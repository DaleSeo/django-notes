-- phpMyAdmin SQL Dump
-- version 2.11.5.1
-- http://www.phpmyadmin.net
--
-- 호스트: localhost
-- 처리한 시간: 18-01-26 14:42 
-- 서버 버전: 5.5.17
-- PHP 버전: 5.2.17p1

SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";

--
-- 데이터베이스: `daleseo`
--

-- --------------------------------------------------------

--
-- 테이블 구조 `post`
--

CREATE TABLE IF NOT EXISTS `post` (
  `postNo` int(11) NOT NULL DEFAULT '0',
  `id` varchar(31) NOT NULL DEFAULT '',
  `name` varchar(31) NOT NULL DEFAULT '',
  `pw` varchar(31) NOT NULL DEFAULT '',
  `date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `kind` varchar(31) NOT NULL DEFAULT '',
  `title` varchar(255) NOT NULL DEFAULT '',
  `memo` text NOT NULL,
  `url` varchar(255) DEFAULT NULL,
  `file` varchar(255) NOT NULL DEFAULT '',
  `hit` int(11) NOT NULL DEFAULT '0',
  `secret` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`postNo`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

--
-- 테이블의 덤프 데이터 `post`
--

INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(1, 'milkboy713', '', '', '2006-07-16 17:42:10', 'HTML', '★★★ 색상표', '클릭☞ <a href="http://milk713.cafe24.com/study/color_table.php">[ 140 Named Color Table ]</a>\r\n', '', '', 45, 0),
(2, 'milkboy713', '', '', '2006-07-16 17:48:00', 'CSS', '마우스 커서 모양 바꾸기', '# 형식\r\n* {cursor:속성값}\r\n\r\n# 속성\r\n* auto : 자동으로 바뀜\r\n* help : 물음표 모양\r\n* move : 4방향 화살표 모양\r\n* text : 텍스트 입력 모양\r\n* crooshair : 십자가 모양\r\n* wait : 모래시계 모양\r\n* hand : 손 모양\r\n\r\n', '', '', 2, 0),
(3, 'milkboy713', '', '', '2006-07-16 17:48:00', 'MySQL', '★ 기본 함수 정리', '# DB 열고 테이블 선택\r\n$connect = mysql_connect(''localhost'', ''[아이디]'', ''[비밀번호]'') or die(mysql_error());\r\nmysql_select_db(''[아이디]'') or die(mysql_error());\r\n\r\n# DB 닫기\r\nmysql_close($connect);\r\n\r\n# 쿼리 실행\r\n$result = mysql_query($query, $connect) or die(mysql_error());\r\n\r\n# 결과 패치\r\n$data = mysql_fetch_array($result);', '', '', 18, 0),
(4, 'milkboy713', '', '', '2006-07-16 17:57:18', 'CSS', '웹폰트 적용하기', '@font-face {font-family:폰트이름; src:url(폰트주소);}', '', '', 6, 0),
(5, 'milkboy713', '', '', '2006-07-16 17:57:18', 'MySQL', '★ 쿼리 정리', '# 번호에 있는 데이터 한 데이터 선택\r\nselect * from table where no=''$no''\r\n\r\n# 같은 카테고리에 속한 데이터 선택 (번호 역순 정렬)\r\nselect * from table where kind=''$kind'' order by no desc\r\n\r\n# 같은 카테고리에 속한 데이터의 총 갯수\r\nselect count(*) from photo where kind=''$kind\r\n\r\n# 데이터 개수\r\n$tot = mysql_num_rows($result)', '', '', 12, 0),
(6, 'milkboy713', '', '', '2006-07-17 14:03:15', 'PhotoShop', '자르기 할 때', '# 가이드 라인\r\n* 좌, 상 : 가이드라인은 안 짜름\r\n* 우, 하 : 가이드라인까지 짜름', '', '', 0, 0),
(7, 'milkboy713', '', '', '2006-07-17 14:37:03', 'PhotoShop', '이미지 축소 할 때', '[Resample Image] 를 ''Bicubic'' 으로 설정', '', '', 0, 0),
(8, 'milkboy713', '', '', '2006-07-26 09:59:24', 'CSS', '링크 스타일 적용이 잘 안될 때', '드림위버로 새문서 작성시,\r\n맨 첫줄\r\n<★!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"★>\r\n부분과\r\n네번째 줄\r\n<★meta http-equiv="Content-Type" content="text/html; charset=euc-kr"★>\r\n부분을 삭제한다.', '', '', 1, 0),
(9, 'milkboy713', '', '', '2006-07-29 23:15:59', 'JavaScript', '한 곳에 두개의 링크거는 방법', '<★a onclick="{window.open(''주소'',''프레임이름''); window.open(''주소'',''프레임이름'');}"★> \r\n문자 또는 그림\r\n<★/a>', '', '', 1, 0),
(10, 'milkboy713', '', '', '2006-07-31 09:55:46', 'HTML', '글자 장식 태그', '<span style="font-familiy:굴림">\r\n<b>굵게</b>\r\n<u>밑줄</u>\r\n<s>취소선</s>\r\n<i>이탤릭체</i>\r\n<tt>타자체</tt>\r\n위첨자<sup>위첨자</sup>\r\n아래첨자<sub>아래첨자</sub>\r\n<big>더 크게</big>\r\n<small>더 작게</small>\r\n</span>\r\n<hr size="1">\r\n<★b>굵게</b>\r\n<★u>밑줄</b★>\r\n<★s>취소선</s★>\r\n<★i>이탤릭체</i★>\r\n<★tt>타자체</tt★>\r\n<★sup>위첨자</sup★>\r\n<★sub>아래첨자</sub★>\r\n<★big>더 크게</big★>\r\n<★small>더 작게</small★>', '', '', 4, 0),
(11, 'milkboy713', '', '', '2006-08-27 14:20:52', 'PHP', '현재 날짜와 시간 출력 함수', 'date("Y년 m월 d일 h시 i분")', '', '', 7, 0),
(12, 'milkboy713', '', '', '2007-01-01 13:14:59', 'PHP', 'datatime 관련', '# timestamp로 바꾸기\r\nstrtotime("datatime형식 시간")\r\n\r\n# 현재시간 datatime 형식으로 바꾸기\r\ndate("Y-m-d H:i:s")\r\n\r\n# timestamp를 datatime 형식으로 바꾸기\r\ndate("Y-m-d H:i:s", timestamp)\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.phpschool.com/gnuboard4/bbs/board.php?bo_table=qna_function&wr_id=136299&sca=&sfl=wr_subject&stx=datetime&sop=and', 'http://www.phpschool.com/gnuboard4/bbs/board.php?bo_table=qna_function&wr_id=136299&sca=&sfl=wr_subject&stx=datetime&sop=and', '', 18, 0),
(13, 'milkboy713', '', '', '2007-01-02 13:14:59', 'PHP', '한글 문자열 깨지지 않고 자르는 함수', 'string mb_strimwidth ( string str, int start, int width, string trimmarker [, string encoding]) \r\n\r\nstr : 문자열.. \r\nstart : 문자열 시작 위치.. \r\nwidth : 길이(?).. \r\ntrimmarker : 접미사(?).. \r\nencoding : 인코딩 타입.. \r\n\r\nstr 문자열의 start 위치부터 witdh만큼 잘라내고 trimmarker를 끝부분에 출력합니다.. \r\nencoding에 지정된 인코딩 타입에 따라 길이를 계산해줍니다.. \r\n''UTF-8''이나.. ''EUC-KR''처럼 지정해주면 됩니다.. \r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.phpschool.com/gnuboard4/bbs/board.php?bo_table=tipntech&wr_id=46975&sca=&sfl=wr_subject&stx=%B9%AE%C0%DA%BF%AD&sop=and', 'http://www.phpschool.com/gnuboard4/bbs/board.php?bo_table=tipntech&wr_id=46975&sca=&sfl=wr_subject&stx=%B9%AE%C0%DA%BF%AD&sop=and', '', 21, 0),
(14, 'milkboy713', '', '', '2006-08-04 12:42:37', 'PhotoShop', '여러 사진에 같은 효과 적용', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://kin.naver.com/db/detail.php?d1id=1&dir_id=1050301&eid=okJ/mWwJ5ttiNQocPV6VgjICktrpbnxQ&title=%255B%25B3%25BB%25B0%25F8%255D%25C6%25F7%25C5%25E4%25BC%25A5%25BF%25A1%2B%25C0%25FC%25C3%25BC%25BB%2', 'http://kin.naver.com/db/detail.php?d1id=1&dir_id=1050301&eid=okJ/mWwJ5ttiNQocPV6VgjICktrpbnxQ&title=%255B%25B3%25BB%25B0%25F8%255D%25C6%25F7%25C5%25E4%25BC%25A5%25BF%25A1%2B%25C0%25FC%25C3%25BC%25BB%2', '', 2, 0),
(15, 'milkboy713', '', '', '2006-08-11 12:42:37', 'DreamWeaver', '드림위버 2004 MX에서 한글이 깨져보일때', '드림위버강좌 MX 2004 - 소스보기, 한글 왜 깨지나?  \r\n\r\n \r\n\r\n \r\n\r\n<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=euc-kr">\r\n페이지 상단에 위와같은 문서 인코딩이 지정되지 않는 php, asp, js 등의 문서에서는 한글이 종종 깨지는 현상을 목격한다.\r\n\r\n \r\n\r\n이런 문제가 발생하는 경우 드림위버 MX 2004 버전의 업데이트를 받지 않았기 때문이다.\r\n\r\n하지만 7.0.1 업데이트 이후에도 동일한 문제는 계속해서 발생할 수 있다.\r\n\r\n이유는 환경설정에서 기본인코딩 언어를 한국어로 지정해 두지 않았기 때문.\r\n\r\n아래 그림과 같이 "한국어 - 인코딩이 지정되지 않은 기존의 파일을 열 때 사용" 항목에 체크해 주어야 한다.\r\n\r\n \r\n\r\n이런경우 페이지 상단에 <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=euc-kr"> 이와같은 문서인코딩이 없더라도 한글은 깨지지 않는다.\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/kchubaka2?Redirect=Log&logNo=40031676425', 'http://blog.naver.com/kchubaka2?Redirect=Log&logNo=40031676425', '', 11, 0),
(16, 'milkboy713', '', '', '2006-08-11 12:42:37', 'PhotoShop', '이미지 크기 줄이기 때 interporation 설정', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/orms/120018276147', 'http://blog.naver.com/orms/120018276147', '', 4, 0),
(17, 'milkboy713', '', '', '2006-10-26 12:42:37', 'PHP', '폴더와 파일정보 읽는 방법 (크기, 생성날짜 등)', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://kin.naver.com/db/detail.php?d1id=1&dir_id=10111&docid=330370', 'http://kin.naver.com/db/detail.php?d1id=1&dir_id=10111&docid=330370', '', 1, 0),
(18, 'milkboy713', '', '', '2006-08-09 13:50:02', 'PhotoShop', '싸이월드 사진효과', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://kin.naver.com/db/detail.php?d1id=1&dir_id=110&eid=cDeTKsKCNCU38p+yo4r6TQ/oXP8IJXP8&ts=1129477238', 'http://kin.naver.com/db/detail.php?d1id=1&dir_id=110&eid=cDeTKsKCNCU38p+yo4r6TQ/oXP8IJXP8&ts=1129477238', '', 7, 0),
(19, 'milkboy713', '', '', '2006-08-09 02:31:36', 'PhotoShop', '뽀샤시, 잡티 없애기', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://kin.naver.com/db/detail.php?d1id=1&dir_id=110&eid=5ssQKOvs8zA3829FZjkvTUx816T+AHPn&qb=xvfF5LylIMitu+fH0Q==', 'http://kin.naver.com/db/detail.php?d1id=1&dir_id=110&eid=5ssQKOvs8zA3829FZjkvTUx816T+AHPn&qb=xvfF5LylIMitu+fH0Q==', '', 3, 0),
(20, 'milkboy713', '', '', '2006-08-09 02:45:59', 'PhotoShop', '싸이월드의 ''화사한+색보정'' 효과', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://kin.naver.com/knowhow/entry.php?eid=HClWuU3qnLp5k6DQHR7UuK9fbMZC4zTG', 'http://kin.naver.com/knowhow/entry.php?eid=HClWuU3qnLp5k6DQHR7UuK9fbMZC4zTG', '', 1, 0),
(21, 'milkboy713', '', '', '2006-09-12 13:06:36', 'DreamWeaver', '문서 포멧 들여쓰기 설정', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://cafe.naver.com/hyoreejin.cafe?iframe_url=/ArticleRead.nhn%3Farticleid=31', 'http://cafe.naver.com/hyoreejin.cafe?iframe_url=/ArticleRead.nhn%3Farticleid=31', '', 3, 0),
(22, 'milkboy713', '', '', '2007-01-02 15:46:12', 'HTML', 'form의 탭(Tab) 순서를 정하는 방법', '<input tabindex = "순서">\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/dudwo00?Redirect=Log&logNo=130000243140', 'http://blog.naver.com/dudwo00?Redirect=Log&logNo=130000243140', '', 16, 0),
(23, 'milkboy713', '', '', '2007-01-03 09:01:12', 'PHP', '줄바꾸기 + 슬래쉬 제거 + 태그 그대로', 'nl2br(stripslashes(htmlspecialchars($data[memo])))\r\n', '', '', 12, 0),
(24, 'milkboy713', '', '', '2007-01-04 13:58:21', 'JavaScript', '즐겨찾기에 추가 + 시작페이지 설정', '# 즐겨찾기에 추가\r\n<a href=\\"javascript:window.external.AddFavorite(\\''http://www.milkbox.pe.kr\\'',\\''MilkBox™│대영이 홈피\\'');\\">즐겨찾기에 추가</a>\r\n\r\n# 시작페이지 설정\r\n<a style=\\"cursor:hand\\" href onClick=\\"this.style.behavior=\\''url(#default#homepage)\\'';this.setHomePage(\\''http://milkbox.pe.kr\\'');\\">', '', '', 5, 0),
(25, 'milkboy713', '', '', '2007-01-05 01:59:02', 'PHP', '문자열 함수 정리', '# 문자열 치환\r\nstr_replace(교체당할 부분, 교체시킬 부분, 대상 문자열); ', '', '', 10, 0),
(26, 'milkboy713', '', '', '2007-01-05 18:37:44', 'PHP', '아이피 추적 변수', '$REMOTE_ADDR', '', '', 0, 0),
(27, 'milkboy713', '', '', '2007-02-18 13:31:31', 'MySQL', '시간 상관없이 하루 동안 데이터 추출', '		SELECT * \r\n		FROM $tb \r\n		WHERE date \r\n		LIKE ''$date%''', '', '', 7, 0),
(28, 'milkboy713', '', '', '2007-02-20 11:28:00', 'PhotoShop', 'gif 파일 만들기', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://kin.naver.com/db/detail.php?d1id=1&dir_id=1&eid=u9VWBL+deKc17O5KmxHwgxFHMvdOcCl3&qb=Z2lmIMbEwM8guLi16bHi', 'http://kin.naver.com/db/detail.php?d1id=1&dir_id=1&eid=u9VWBL+deKc17O5KmxHwgxFHMvdOcCl3&qb=Z2lmIMbEwM8guLi16bHi', '', 3, 0),
(29, 'milkboy713', '', '', '2007-02-24 14:55:39', 'Media', 'AVI를 WMV 로 변환할 때, 최적의 사항은?', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://kin.naver.com/knowhow/entry.php?d1id=8&dir_id=8&eid=qCrVxK5srR/d4QMWlRrPQrW5u4nwJ846&qb=YXZpIHdtdiC6r8iv', 'http://kin.naver.com/knowhow/entry.php?d1id=8&dir_id=8&eid=qCrVxK5srR/d4QMWlRrPQrW5u4nwJ846&qb=YXZpIHdtdiC6r8iv', '', 2, 0),
(30, 'milkboy713', '', '', '2007-02-25 08:10:11', 'PHP', '웹 프로그래밍 언어 궁합', 'PHP : 원도우서버, 리눅스서버 사용가능  \r\n\r\n           DB = my-sql, ms-sql\r\n\r\n           사용료가 없음\r\n\r\n범용\r\n \r\n\r\nASP : 원도우서버에 사용\r\n\r\n           DB = ms-sql\r\n\r\n          라이센스를 구입\r\n\r\n기업용\r\n\r\n \r\n\r\nJSP : 원도우서버에 사용\r\n\r\n          DB = Oracle, MS-SQL\r\n\r\n         라이센스를 구입\r\n\r\n보안이 중요한 대기업 용\r\n\r\n \r\n\r\n닷넷 : 원도우서버에 사용(ASP에서 발전하여 새로운 언어(중간)로써 발전중\r\n\r\n            DB = ms-sql\r\n\r\n           라이센스를 구입\r\n', '', '', 4, 0),
(31, 'milkboy713', '', '', '2007-04-07 10:53:58', 'PHP', '배열', '* count($arr)\r\n배열 크기 리턴', '', '', 1, 0),
(32, 'milkboy713', '', '', '2007-04-07 10:54:38', 'PHP', '함수', 'funtion 함수이름 ( 인자변수 ) {\r\n\r\nreturn 반환값;\r\n}', '', '', 4, 0),
(33, 'milkboy713', '', '', '2007-04-07 13:26:35', 'PHP', 'Call by reference', '함수 인자 변수 앞에 & 만 붙여주면 된다.', '', '', 2, 0),
(34, 'milkboy713', '', '', '2007-04-22 11:56:15', 'HTML', '목록 테그', '* 순서있는 목록\r\n<ol type="A/a/I/i/1" start="n">\r\n    <li type="A/a/I/i/1" value="n">\r\n<ol>\r\n\r\n* 순서없는 목록\r\n<ul type="disc/circle/square">\r\n   <li type="disc/circle/square">\r\n<ul>\r\n\r\n* 정의 목록\r\n<dl>\r\n   <dt>용어\r\n   <dd>해설\r\n</dl>', '', '', 2, 0),
(35, 'milkboy713', '', '', '2007-04-22 12:27:19', 'JavaScript', '창 관련', '* 뒤로\r\n<input type="button" onclick="history.go(-1)" value=''뒤로''>\r\n\r\n* 창닫기\r\n<input type="button" onclick="window.close()" value=''닫기''>\r\n\r\n* 클릭 하면 새창 열리기 (옵션 적용해서)\r\n<a href="#" onClick="window.open(''random/input.php'','''',''width=600,height=400,top=200,left=200,scrollbars=no'');">[ Clikc Here ]</a>\r\n\r\n* 페이지 이동 버튼\r\n<input type="button" onclick="location.href = ''주소''" value=''이동''>', '', '', 39, 0),
(36, 'milkboy713', '', '', '2007-04-22 14:20:49', 'PHP', '세션', 'session_start();\r\n\r\n$_SESSION["min"] = 9;', '', '', 2, 0),
(37, 'milkboy713', '', '', '2007-04-23 00:42:19', 'JavaScript', '페이지 강제 이동', '<script>\r\nlocation.replace(''이동할페이지주소'');\r\n</script>', '', '', 30, 0),
(38, 'milkboy713', '', '', '2007-05-20 09:24:56', 'PHP', 'foreach', '배열 출력\r\n\r\nforeach($array as $value) { echo $value; }\r\n\r\nforeach($array as $key => $value) { echo "$key => $ value"; }', '', '', 1, 0),
(39, 'milkboy713', '', '', '2007-05-20 10:18:38', 'JavaScript', '팝업', '<body onload="window.open(''popup.php'','''',''left=250, top=300, width=300, height=220'')">', '', '', 8, 0),
(40, 'milkboy713', '', '', '2007-05-23 12:39:21', 'PHP', 'PHP 제한', '함수 오버로딩(인자 개수 다르게 해서 같은 함수 이름 사용) 안됨\r\n\r\n클래스의 맴버 변수는 상수로만 지정 가능 -> 생성자 이용할 것', '', '', 3, 0),
(41, 'milkboy713', '', '', '2007-05-24 18:01:02', 'PHP', '참조(Reference)', '$a = $b;\r\n\r\n하면 변수 a로 변수 b의 내용이 복사되고\r\n\r\n$a = &$b;\r\n\r\n하면 변수 a와 변수 b가 같은 값(객체)를 가르킨다.\r\n\r\n\r\n<?\r\n\r\nclass Member {\r\n\r\n	var $id;\r\n	var $name;\r\n	\r\n	function setID($id) {\r\n	\r\n		$this->id = $id;\r\n	\r\n	}\r\n	\r\n	function setName($name) {\r\n	\r\n		$this->name = $name;\r\n	\r\n	}\r\n	\r\n	function printMember() {\r\n	\r\n		echo "<li>아이디 : ".$this->id;\r\n		echo "<li>이름 : ".$this->name;\r\n	\r\n	}\r\n\r\n}\r\n\r\n$m1 = new Member();\r\n$m1->setID("milkboy713");\r\n$m1->setName("yeji818");\r\n$m1->printMember();\r\n\r\n$m2 = &$m1;\r\n\r\n$m1->setID("mini");\r\n$m1->setName("mini");\r\n\r\n$m2->printMember();\r\n\r\n?>', '', '', 0, 0),
(42, 'milkboy713', '', '', '2007-06-03 16:29:26', 'MySQL', 'phpmyadmin 설정법', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://tong.nate.com/toonkorea/36320031', 'http://tong.nate.com/toonkorea/36320031', '', 6, 0),
(43, 'milkboy713', '', '', '2007-06-03 21:02:41', 'PHP', '환경 변수', '$PHP_SELF : 현재 페이지\r\n$HTTP_REFERER : 이전 페이지\r\n', '', '', 19, 0),
(44, 'milkboy713', '', '', '2007-07-12 12:50:41', 'HTML', '이미지를 이용한 버튼 만들기', '<input type="image" name="submit" src="경로" border="0">\r\n\r\n기본적으로 submit 하도록 설정됨', '', '', 6, 0),
(45, 'milkboy713', '', '', '2007-08-01 20:28:07', 'HTML', '플래쉬 점선 테두리 문제 해결법', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.nzeo.com/bbs/zboard.php?id=p_etc&page=1&sn1=&divpage=1&sn=off&ss=on&sc=off&select_arrange=headnum&desc=asc&no=1333', 'http://www.nzeo.com/bbs/zboard.php?id=p_etc&page=1&sn1=&divpage=1&sn=off&ss=on&sc=off&select_arrange=headnum&desc=asc&no=1333', '', 7, 0),
(46, 'milkboy713', '', '', '2007-08-03 23:37:14', 'HTML', '이미지 링크 테두리 제거 & 줄바꿈 공백 제거', 'img {border-width:0; vertical-align: top;}', '', '', 11, 0),
(47, '', '', '', '2007-08-15 08:39:22', 'HTML', 'html 테두리 둥글게', '태그로 테이블 모서리를 둥글게 하기 위해선 아래의 소스를 넣어주셔야 해요.\r\n\r\n \r\n\r\n<head>와 </head> 사이에 아래의 소스를 넣어주세요.\r\n\r\n \r\n\r\n<script>\r\nfunction roundTable(objID) {\r\nvar obj = document.getElementById(objID);\r\nvar Parent, objTmp, Table, TBody, TR, TD;\r\nvar bdcolor, bgcolor, Space;\r\nvar trIDX, tdIDX, MAX;\r\nvar styleWidth, styleHeight;\r\n\r\n// get parent node\r\nParent = obj.parentNode;\r\nobjTmp = document.createElement(''SPAN'');\r\nParent.insertBefore(objTmp, obj);\r\nParent.removeChild(obj);\r\n\r\n// get attribute\r\nbdcolor = obj.getAttribute(''rborder'');\r\nbgcolor = obj.getAttribute(''rbgcolor'');\r\nradius = parseInt(obj.getAttribute(''radius''));\r\nif (radius == null || radius < 1) radius = 1;\r\nelse if (radius > 6) radius = 6;\r\n\r\nMAX = radius * 2 + 1;\r\n\r\n/*\r\ncreate table {{\r\n*/\r\nTable = document.createElement(''TABLE'');\r\nTBody = document.createElement(''TBODY'');\r\n\r\nTable.cellSpacing = 0;\r\nTable.cellPadding = 0;\r\n\r\nfor (trIDX=0; trIDX < MAX; trIDX++) {\r\nTR = document.createElement(''TR'');\r\nSpace = Math.abs(trIDX - parseInt(radius));\r\nfor (tdIDX=0; tdIDX < MAX; tdIDX++) {\r\nTD = document.createElement(''TD'');\r\n\r\nstyleWidth = ''1px''; styleHeight = ''1px'';\r\nif (tdIDX == 0 || tdIDX == MAX - 1) styleHeight = null;\r\nelse if (trIDX == 0 || trIDX == MAX - 1) styleWidth = null;\r\nelse if (radius > 2) {\r\nif (Math.abs(tdIDX - radius) == 1) styleWidth = ''2px'';\r\nif (Math.abs(trIDX - radius) == 1) styleHeight = ''2px'';\r\n}\r\n\r\nif (styleWidth != null) TD.style.width = styleWidth;\r\nif (styleHeight != null) TD.style.height = styleHeight;\r\n\r\nif (Space == tdIDX || Space == MAX - tdIDX - 1) TD.style.backgroundColor = bdcolor;\r\nelse if (tdIDX > Space && Space < MAX - tdIDX - 1) TD.style.backgroundColor = bgcolor;\r\n\r\nif (Space == 0 && tdIDX == radius) TD.appendChild(obj);\r\nTR.appendChild(TD);\r\n}\r\nTBody.appendChild(TR);\r\n}\r\n\r\n/*\r\n}}\r\n*/\r\n\r\nTable.appendChild(TBody);\r\n\r\n// insert table and remove original table\r\nParent.insertBefore(Table, objTmp);\r\n}\r\n</script>\r\n\r\n \r\n\r\n \r\n\r\n \r\n\r\n<body>와 </body> 안에 아래의 소스를 넣어주세요.\r\n\r\n \r\n\r\n<table id="ta" width="300" height="100" border="0" radius="3" rborder="#999999" rbgcolor="#F8F8F8">\r\n<tr>\r\n<td valign="top">테스트입니다</td>\r\n</tr>\r\n</table>\r\n<script>roundTable("ta");</script>\r\n\r\n \r\n\r\n \r\n\r\n* 테이블 테그 안의 가로 크기와 세로 크기를 수정\r\n  width="300" height="100"\r\n\r\n* 테이블 테두리 색상과 테이블 안쪽 색상\r\n   rborder="#999999" rbgcolor="#F8F8F8"\r\n\r\n\r\n* 테이블 둥근 테두리 정도 (값이 클수록 더욱 둥글 둥글 해집니다)\r\n   radius="3"\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://kin.naver.com/db/detail.php?d1id=1&dir_id=109&eid=mfkf3LAPVcqOCJWtvdqCOIRr4li5aUs3&qb=aHRtbCDF18DMuu0guPC8rbiuILXVsduw1A==', 'http://kin.naver.com/db/detail.php?d1id=1&dir_id=109&eid=mfkf3LAPVcqOCJWtvdqCOIRr4li5aUs3&qb=aHRtbCDF18DMuu0guPC8rbiuILXVsduw1A==', '', 32, 0),
(48, '', '', '', '2007-08-26 20:01:02', 'PHP', '리눅스 명령어 실행', '# 파일명 목록 $file에 배열로 넘기기\r\n\r\nexec("ls file/$data[no]", $file);\r\n\r\n# 폴더 지우기\r\n \r\nexec("rm -rf ../$tb/file/$data[no]");', '', '', 2, 0),
(49, '', '서대영', '', '2007-08-29 22:53:41', 'HTML', '폼태그', '# 텍스트\r\n\r\n<input type=text name=rem2 size=8 maxsize=60 >\r\n\r\n# 라디오 버튼\r\n\r\n                성별 [ 남자<input type="radio" name="sex" checked> \r\n                     여자<input type="radio" name="sex"> ]<br> \r\n\r\n# 체크 박스\r\n                취미 [ 여행 <input type="checkbox" name="hobby"> \r\n                            <input type="checkbox" name="hobby"> ]<br>\r\n\r\n', '', '', 17, 0),
(50, '', '서대영', '', '2007-08-29 23:45:56', 'PHP', '업로드 파일 정보 읽기', '<!-- 업로드 파일 정보 읽기 ----->\r\n<div align="right">\r\n<?\r\n	$info = lstat("file/$data[kind]/$file[0]");\r\n	$size_kb = $info[size] / 1024;\r\n	$size = substr("$size_kb", 0, -7);\r\n	echo "* 파일이름 : $file[0]&nbsp&nbsp;* 파일크기 : $size KByte";\r\n?>&nbsp;&nbsp;<a href="file/<?=$data[kind]?>/<?=$file[0]?>"><b>[ 파일 다운로드 ]</b></a></div>\r\n<hr size="1" color="#8CD9D9">\r\n<!----- 업로드 파일 정보 읽기 -->', '', '', 3, 0),
(51, '', '서대영', '', '2007-09-01 13:30:59', 'JavaScript', '메세지 창 뛰우기', '<script>\r\nwindow.alert(''비밀번호가 일치하지 않아요... -_ㅡ+ '');\r\nhistory.go(-1);\r\n</script>', '', '', 2, 0),
(52, '', '서대영', '', '2007-09-02 00:06:58', 'JavaScript', '폼 입력 여부 체크', '<!-- 자바 스크립트 (이름 입력 여부 체크) -->\r\n<script>\r\n	function chk_frm() {\r\n		if(!document.cmt.name.value) {\r\n			window.alert(''이름을 입력하세요!'');\r\n			document.cmt.name.focus();\r\n			return false;\r\n		}\r\n	}\r\n</script>\r\n<!-- 자바 스크립트 (이름 입력 여부 체크) -->', '', '', 2, 0),
(53, '', '서대영', '', '2007-09-09 11:51:08', 'JavaScript', '부모창 닫으면서 새창 열기', '<img src="../inc/img/intro.gif" name="intro" border="0"\r\n	\r\n	onClick="\r\n		window.open(''index3.php'','''',''width=880, height=750, top=10,left=10,scrollbars=no'')\r\n		opener = null;\r\n		window.close();\r\n	"\r\n	onMouseover="intro.src=''../inc/img/intro_1.gif''" onMouseout="intro.src=''../inc/img/intro.gif''">\r\n\r\n\r\n\r\n----- 2008.06.26 아래 방법은 exploere 7.0 에서 닫을까요? 메세지 뜨게 만들어서 안됨\r\n\r\n\r\n    function upwin(url){\r\n\r\n		window.open(url);\r\n		opener = self;\r\n		self.close();\r\n		\r\n    }\r\n\r\n\r\n\r\n\r\n----- 2008.08.04 모든 explorer에서 작동\r\n\r\nfunction na_open_window() {\r\n\r\n if(window.name != '''')\r\n  w = window.open("common/main/main.jsp",\r\n\r\n "pop",''left=0,top=0,width=1014,height=708,toolbar=no,menubar=no,status=yes,scrollbar=no,\r\n\r\nresizable=no'');\r\n\r\n    \r\n     if (navigator.appVersion.indexOf("MSIE 7.0")>= 0){  \r\n         // ie 7.0\r\n        window.open(''common/main/main.jsp'',''_self'').close();\r\n    }else{   \r\n        // ie7.0 이하에서\r\n        opener = self;\r\n        self.close();\r\n    }\r\n    \r\n setTimeout(windowClose, 10);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/n_nickel?Redirect=Log&logNo=100022329261', 'http://blog.naver.com/n_nickel?Redirect=Log&logNo=100022329261', '', 14, 0),
(54, '', '서대영', '', '2007-09-09 12:23:55', 'HTML', 'iframe', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://cafe.naver.com/swingme.cafe?iframe_url=/ArticleRead.nhn%3Farticleid=162', 'http://cafe.naver.com/swingme.cafe?iframe_url=/ArticleRead.nhn%3Farticleid=162', '', 10, 0),
(55, '', '서대영', '', '2007-09-11 23:16:18', 'PHP', 'echo""와 die() 차이', 'echo는 메세지만 뛰우고 die는 php실행이 멈춘다.', '', '', 1, 0),
(56, '', '서대영', '', '2007-09-19 14:39:04', 'PHP', '플레쉬 테두리 문제 해결', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.iezn.com/test/ie/index.php', 'http://www.iezn.com/test/ie/index.php', '', 0, 0),
(57, '', '서대영', '', '2007-09-19 23:25:35', 'CSS', '맨 밑에 배경그림 넣기', '	<td ID="메뉴" width="25%" rowspan="2" bgcolor="#D7D7D7" style="\r\n		background-image: url(/img/left_bottom.jpg);\r\n		background-repeat:no-repeat;\r\n		background-position:bottom;\r\n	">', '', '', 3, 0),
(58, '', '서대영', '', '2007-09-21 19:31:59', 'PhotoShop', '단축키 모음', 'Tab = 툴박스의 팔레트가 감추어졌다! 나타납니다. \r\n\r\nShift + Tab =오른쪽에 있는 팔레트(레이어,히스토리,인포등) 감추기/보이기 \r\n\r\nCaps lock =툴의 커서모양이 + 모양으로 바뀐다. 영역을 정확히 표시할 수 있습니다. \r\n\r\nSpacebar = 손바닥툴로 변환되어 모니터상에서 보이지 않는 부분을 드래그하여 볼 수 있습니다. \r\n\r\nAlt + Delect(Backspace) =전경색상을 칠합니다 \r\n\r\nCtrl + Delect(Backspace) =배경색상을 칠합니다. \r\n\r\nShift + Delect(Backspace)= Fill 대화상자를 불러옵니다. \r\n\r\n\r\n\r\nCtrl + Alt + + 이미지의 배율을 한 단계씩 확대시킵니다. \r\n\r\nCtrl + Alt + - 이미지의 배율을 한 단계씩 축소시킵니다. \r\n\r\nCtrl + 0 [Fit on Screen] 전체 이미지를 작업창 크기로 보여줍니다. \r\n\r\nCtrl + Alt + 0 [Actual Pixels] 100% 배율로 보여줍니다. \r\n\r\n\r\n\r\nCtrl + N 새창 열기입니다. \r\n\r\nCtrl + O 저장된 이미지 파일 열기입니다. \r\n\r\nCtrl + Alt + O Open As로 저장된 파일 열기입니다. \r\n\r\nCtrl + S 작업하는 것을 저장합니다. \r\n\r\nCtrl + Shift + S [Save As] 작업하는 것을 다른 이름으로 저장합니다 \r\n\r\nCtrl + Shift + Alt + S [Save for Web] 작업하는 것을 웹최적화 이미지로 저장합니다 \r\n\r\n\r\n\r\nCtrl + A [Select All] 전체영역을 선택합니다. \r\n\r\nCtrl + D [Deselect] 선택영역을 해제합니다. \r\n\r\nCtrl + Shift + D [Reselect] 최근에 해제한 선택영역을 재선택합니다. \r\n\r\nAlt + Ctrl + D [Feather Selection] 선택영역에 Feather 값을 지정하는 대화 상자가 나타납니다. \r\n\r\nCtrl +Shift + I 선택영역을 반전시킵니다. \r\n\r\nCtrl + X 선택된 이미지를 오려내어 클립보드에 저장합니다. \r\n\r\nCtrl + C 선택된 이미지를 복사합니다.(현재 레이어만) \r\n\r\nCtrl + Shift + C [Copy Merge] 선택된 이미지를 복사합니다.(보이는대로) \r\n\r\nCtrl + V 선택된 이미지를 붙여줍니다. \r\n\r\nCtrl + Shift + V [Paste into] 명령이 실행됩니다. \r\n\r\n\r\n\r\nCtrl + Y RGB의 이미지를 CMYK의 이미지로 보여줍니다. \r\n\r\nCtrl + Z 실행된 명령을 취소합니다. \r\n\r\nCtrl + Alt + Z [Step Backward] 작업을 여러번 취소합니다. \r\n\r\nCtrl + Shift + Z [Step Forward] 여러번 취소한 작업을 여러번 복구합니다. \r\n\r\n\r\n\r\nCtrl + F 최근에 적용한 Filter를 설정값 그대로 다시 적용합니다. \r\n\r\nCtrl + Alt + F 최근에 적용한 Filter의 대화 상자가 나타납니다. \r\n\r\nCtrl + T 이미지를 변형시킵니다. \r\n\r\nCtrl + R 작업창에 눈금자를 보임 또는 감춤으로 토글됩니다. \r\n\r\nCtrl + P 작업물을 프린트합니다. \r\n\r\nCtrl +: 가이드선이 나타났다! 사라집니다. \r\n\r\nCtrl + " 그리드선이 나타났다! 사라집니다. \r\n\r\n\r\n\r\nCtrl + ] 현재 레이어가 상위 레이어로 이동합니다. \r\n\r\nCtrl + Shift + ] 현재 레이어가 최상위 레이어로 이동합니다. \r\n\r\nCtrl + [ 현재 레이어가 하위 레이어로 이동합니다.(백그라운드 위) \r\n\r\nCtrl + Shift + [ 현재 레이어가 최하위 레이어로 이동합니다. \r\n\r\nCtrl + E [Merge Down] or [Merge Group] 명령이 적용됩니다. \r\n\r\nCtrl + Shift + E [Merge visible] 명령이 적용됩니다. \r\n\r\nCtrl + Alt + E [Merge Down] or [Merge Group] 하여 현재레이어에 합칩니다 \r\n\r\nCtrl + Alt + Shift + E [Merge visible] 하여 현재레이어에 합칩니다 \r\n\r\nCtrl + G 현재 레이어와 아래 레이어를 그룹으로 만듭니다. \r\n\r\nCtrl + Shift + G 레이어의 그룹을 해제합니다. \r\n\r\n\r\n\r\nCtrl + Shift + L [Auto level] 명령이 적용됩니다. \r\n\r\nCtrl + Alt + Shift + L [Auto Contrast] 명령이 적용됩니다. \r\n\r\nCtrl + Shift + B [Auto Color] 명령이 적용됩니다. \r\n\r\nAlt + Ctrl + X [Extract]의 화면을 열어줍니다. \r\n\r\n\r\n\r\nF 윈도우 모드 변경 \r\n\r\nD 팔레트 디폴트 \r\n\r\nX 배경색/전경색 전환  \r\n', '', '', 4, 0),
(59, '', '서대영', '', '2007-09-23 22:43:41', 'HTML', 'Cafe24 무료 스트리밍 접속방법', '먼저 FTP 접속정보는 다음과 같습니다. \r\n\r\nFTP 주소 : wm-001.cafe24.com(또는 wm-002.cafe24.com)\r\nID : 고객님의 아이디 \r\nPW : 고객님의 비밀번호\r\n포트 : 포트번호확인은 현재 무료스트리밍 서비스 세팅완료 메일을 통해 안내되고 있으며, \r\n재확인을 원하실 경우 고객센터로 본인 확인 후 확인가능합니다.\r\nPassive Mode : 체크 \r\n\r\n파일 업로드 후 링크되는 주소는 mms://wm-001(또는wm-002).cafe24.com/ID/파일명입니다. \r\n\r\n참고로 스트리밍 호스팅은 윈도우 미디어 플레이어 9.0 이상에서 정상적인 \r\n재생이 가능합니다. \r\n\r\n\r\n만약 아이피공유기 사용 등으로 사설아이피를 이용하신다면 Passive Mode 로 ftp \r\n접속을 하셔야 합니다. \r\n\r\n* 알FTP 경우에는 포트번호 입력란 하단에 Passvie Mode 체크가 있습니다. \r\n* 윈도XP에 서비스팩2가 설치되어 있다면 제어판의 방화벽을 해제하세요. \r\n\r\n감사합니다.\r\n', '', '', 0, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(60, '', '서대영', '', '2007-09-23 23:07:25', 'Media', '[exobud] 그레이+레드', '=========================================================================\r\n▒  ExoBUD™ MP(II) v5.0  스크립트 사용설명서 ▒\r\n=========================================================================\r\n\r\nPlayer Version: ExoBUD™ MPlayer(II) v5.0 plus\r\nCompatibility : Internet Explorer(이하 IE) v5.5 이상 (Netscape 비호환)\r\n	        MicroSoft Windows Media Player(이하 wmp) v 7.1 이상 \r\n	        Windows98 이상 (ME,NT,2000,XP 계열사용가능)\r\n\r\n(C)Copyright ExoBUD™ 2001-2005, Design by Jinwoong, Eu.\r\n\r\n=========================================================================\r\n▒  ExoBUD™ MP(II) v5.0 사용상의 주의 사항 ▒\r\n=========================================================================\r\n\r\n 주의1 : wmp7.1/v9 개체로 제작된 관계로 v6.4개체 버전과 로직상의 호환성이 없습니다.\r\n 주의2 : Internet Explorer 이외의 다른 웹브라우저에서는 스크립트가 실행되지않습니다.\r\n 주의3 : Javascript로 제작된 만큼 플레이어 수정시 대.소문자 구별에 특히 유의하세요.\r\n\r\n ※ ExoBUD™ MP의 저작권은 ExoBUD™에 있으며, 저작권 명시의 변경 및 삭제를 불허합니다.\r\n ※ ExoBUD™ MP를 응용 또는 2차 저작물(수정물)에 대하여 저작권을 인정받을 수 없습니다.\r\n    (단, 고유한 창작 이미지 파일은 저작권법에 의하여 보호를 받을 수 있습니다.)\r\n ※ ExoBUD™ MP를 구성하는 부속 파일 또는 전체 파일의 무단 배포를 금합니다.\r\n    (단, 일반적으로 skin 이라 불리우는 이미지 파일에 한하여 예외로 인정합니다.)\r\n ※ ExoBUD™ MP를 영리목적으로 이용시에는 반드시 저작권자와 협의하시기 바랍니다.\r\n ※ ExoBUD™ MP의 배포는 저작권자의 허가를 받은 사람에게 국한됩니다.\r\n     (배포 및 상업적 이용 문의는 이메일 exobud@hanmail.net 로 연락주십시요.)\r\n ※ ExoBUD™ MP는 불건전 사이트 및 불법 사이트, 성인사이트에서 사용할 수 없습니다.\r\n\r\n=========================================================================\r\n▒  ExoBUD™ MP(II) v5.0 plus 사용상의 특징\r\n=========================================================================\r\n\r\n[1] ExoBUD™ MP는 Windows Media Player(이하 WMP) OLE 개체를 HTML내에 삽입(EMBED)형태로 \r\n    구현한 멀티미디어 재생기로 Windows Media Techinque(이하 WMT)의 기술을 따르고 있습니다.\r\n    따라서, WMP에서 재생 가능한 모든 미디어 파일에 대하여 (연속/선곡)재생을 할수 있습니다.\r\n    ※인테넷 상에서 서비스를 할 경우 ASF,WMA 등의 스트리밍(Streaming)파일 형식을 이용하세요.\r\n\r\n[2] WMP의 메타파일(asx,wax,wvx)에 등록된 다수의 미디어요소를 완벽하게 재생할 수 있습니다.\r\n    메타파일에 등록된 각 ENTRY 의 TITLE,AUTHOR는 ExoBUD™ MP상에 출력됩니다.\r\n\r\n[3] 미디어의 URL등록만으로도 "타이틀 추척기능"에 의하여 Title 정보및 자막출력이 가능합니다.\r\n    ※ "타이틀 자동복구기능"은 재생을 시도한 미디어에 대하여 실제 포함된 정보를 출력합니다.\r\n\r\n[4] CAPTION(자막)기능을 설정하여 음악가사 및 자막출력에 응용할 수 있스니다 (SMI 파일)\r\n    \r\n[5] ExoBUD™ MP에서 제공되는 플레이리스트에서 사용자가 선택된 미디어만 재생할 수 있습니다.\r\n    ※ 선곡재생이 진행중인 동안 발생된 자용자의 선곡 변경은 즉시 재생로직에 반영됩니다.\r\n\r\n[6] 완벽한 Random mode 재생 및 Sequential mode 재생을 동적으로 지원합니다. \r\n    ※ Random 모드에서도 등록된 전체 트랙의 각 미디어에 대하여 1회씩 재생을 시킵니다.\r\n    ※ Random/Sequential mode는 사용자가 언제든지 선택 가능합니다.\r\n\r\n[7] 재생 진행 시간(Elapse, Lapse 형식)을 동적으로 표시할 수 있도록 지원합니다. \r\n    ※ 인터넷 익스플로러(이하 IE) 상태바에 재생중인 미디어의 타이틀및 진행시간 표시도 가능합니다\r\n    ※ Elapse/Lapse Time Format 형식은 사용자가 언제든지 선택 가능합니다.\r\n    ※ 시간출력은 (시:분:초)형식이며 1시간 미만인 경우 (분:초)형식으로 출력됩니다.\r\n    ※ 시간출력 부분은 플레이어 상태가 변경될 때마다 팁(Tip)을 표시하는 기능도 포함되어 있습니다.\r\n\r\n[8] 재생관련 오류 처리기및 오류 표시기능이 포함되어 있습니다.\r\n    ※ 오류가 발생하면 3회의 재접속을 시도하며,  접속실패시 다음 미디어의 재생을 시도합니다\r\n\r\n[9] 관리자를 위하여 등록한 미디어 파일에 대한 실제 정보를 획득할 수 있는 Alert 기능을 지원합니다.\r\n    ※ Alert 기능은 음악 등록후  정상적으로 해당 미디어에 접근할 수 있는지 확인하는데도 유용합니다.\r\n    ※ 실제 인터넷상에서 서비스를  할경우에는 반드시 이 기능을 취소하여야 합니다.\r\n\r\n[10] 볼륨조절이 가능하며 볼륨량을 표시할 수 있습니다 (Mute, Volume Up, Volume Down)\r\n    ※ Mute 버튼은 토클(toggle)버튼입니다. 따라서 Mute 상태의 해지는 Mute버튼을 누르거나,\r\n       Volume Up, Volume Down 을 누르면 Mute 상태는 해지됩니다. \r\n      \r\n[11] 재생에 꼭 필요한 Optimized Logic 만을 제공합니다.\r\n      ※ 등록한 트랙 전체를 1회만 재생하거나, 또는 연속 재생을 하도록 설정할 수 있습니다.\r\n      ※ Random 재생은 각 미디어에 대하여 고른 재생기회를 부여하도록 설계되어 있습니다.\r\n      ※ 인터넷상에서 제공될 미디어에 대한 접근오류에 대하여 대처할 수 있습니다.\r\n      ※ 플레이어 상태 변화에 따른 적절한 메시지 팁(message tip)을 출력합니다.\r\n      ※ 플레이어 상태에 따라서 적절한 정보를 갖는 이미지를 출력합니다.\r\n      ※ 인터넷상에서 제공될 미디어에 대한 접근오류에 대하여 대처할 수 있습니다.\r\n\r\n[12] 뮤직비디오 (wmv와 같은 VOD) 플레이어로도 사용이 가능합니다.\r\n     VOD로 사용할 경우 WMP 개체 파라미터및 그 개체에 적용된 스타일의 width,height를 변경하세요\r\n    \r\n======================================================================\r\n▒ ExoBUD™ MP(II) v5.0 plus 를 홈페이지에 넣는 첫걸음  ▒\r\n======================================================================\r\n(1단계 : 압축풀기)\r\n\r\n      배포되는 플레이어 파일은 모두 zip 파일로 압축된 것입니다.\r\n      (alz 파일 형태로  받으신 분은 반드시 알집(ALZip)으로 풀으셔야 합니다.)\r\n      exe 파일로 받으신 분은 실행후 압축을 풀 드라이브 위치만 지정하시면 됩니다.\r\n      압축을 푼 폴더는 *.html,*.js  파일 및 img 폴더(이미지파일)들로 구성되어 있습니다\r\n\r\n(2단계 : 미디어 준비)\r\n\r\n     인터넷에 음악이나 비디오를 서비스 하기 위해서는 스트림형식(asf,wma 등)의 미디어를 준비해야 합니다\r\n     ※ wmtools 4.x 를 이용하여 비스트림파일(예:avi,mp3,wav등)을 asf 형식으로 바꾸거나,\r\n     ※ 윈도우즈 미디어 인코더 v7.x 이상으로 wma 등의 스트림 파일 형식으로 바꾸세요\r\n         (http://cyworld.com/exobud 로 오면 간단히 asf형식으로 변환하는 방법이 기술되어 있습니다)\r\n\r\n     asf,wma등으로 인코딩된 미디어를 사용자 웹사이트에 업로드하기 바랍니다.\r\n     (주의: 미디어의 이름은 영문소문자,숫자로만 구성되도록 하세요(공백,특수문자 사용금지))\r\n\r\n     일부 웹서버의 경우 스트림 파일을 지원하지 못하는 경우가 있으므로, 이 경우 다른 웹서버를 선택하세요\r\n    (mms서버가 아니면 일반 HTTP 프로토콜을 사용하는 웹서버에서는 완벽한 스트리밍 처리는 못합니다) \r\n\r\n======================================================================\r\n▒  옵션(Option) 설정 및 재생 미디어 등록 ▒\r\n======================================================================\r\n\r\n (주의) 옵션설정 및 미디어 등록을 위한 사용자 편집 작업은 "메모장" 에서 이루어 집니다.\r\n           다수의 스크립트로 구성된 관계로 특정 웹에디터로 편집하는 경우 오류가 발생할 수 있습니다.\r\n           어렵지않은 작업이므로 반드시 아래 절차에 따라 수정하시기 바랍니다.\r\n\r\n (1단계 : 플레이어 확인 >> exobud.html )\r\n\r\n      exobud.html 을 인터넷 익스플로러(이하 IE)로 불러오기(open)를 합니다.\r\n\r\n  ※ 재생 버튼을 눌러 샘플 미디어가 재생이 되는지 확인 합니다.\r\n      (아래 옵션 설정 부분의 var blnUseSmi=true 로 설정하면 자막을 볼 수 있습니다)\r\n      재생이 되지 않는다면 샘플로 등록된 음악의 경로가 바뀌었거나 없는 경우입니다. (^^;)\r\n\r\n  ※ IE 버전및 윈도우즈 미디어 플레이어(이하 wmp) 버전이 낮은 경우 작동하지 않습니다.\r\n        (IE 5.5 이상 / wmp 7.1 이상이 요구되며, Netscape에서는 작동하지 않습니다)\r\n\r\n  ※ IE 설정 언어가 한국어가 아닌 경우 비정상적으로 보일수 있습니다. \r\n         (IE 메뉴의 [보기]>[인코딩]에서 자동선택및 한국어로 바꾸세요)\r\n  \r\n\r\n (2단계 : 플레이어 옵션설정 >> config.js)\r\n\r\n      config.js 파일을 메모장(Notepad)으로 연후에 플레이어 환경을 아래 주석에 따라 설정하세요\r\n      Javascript 는 대.소문자를 엄격히 구분하므로 환경 설정시 유의하여 작성하세요\r\n\r\n     // 플레이어가 로드된 후에 바로 재생을 시작할 것인지 결정하세요: 자동재생(true) | 대기모드(false)\r\n     // 기본값은 false이지만 웹상에서는 일반적으로 true로 설정하여 자동재생을 하는 경우가 많습니다.\r\n     // 자동재생은 트래픽 측면과 사용자 동의없는 캐스팅이라는 점에서 false 로 설정할 것을 권합니다.\r\n     var blnAutoStart = false;\r\n\r\n     // 재생을 목록순으로 할 것인지, 무작위로 할 것인지 결정하세요: 순차재생(false) | 랜덤재생(true)\r\n     // 초기의 기본 설정일뿐, 사용자가 언제든 재생 모드를 플레이어상의 버튼으로 변경할 수 있습니다.\r\n     var blnRndPlay = false; \r\n\r\n     // 최초에 등록된 미디어(1번트랙)를 절대트랙(Supreme Track)으로 지정할 것인지 결정하세요\r\n     // 무작위 재생(Random mode)에서도 절대트랙을 최우선으로 재생되도록하려면 true로 설정하세요\r\n     var blnAbs1stTrack = false;\r\n\r\n     // 웹브라우저의 상태바에 타이틀명을 출력할 것인지 결정하세요 : StatusBar출력(true) : 출력안함(false)\r\n     // IE의 상태바에 어떠한 정보도 표시하지 않으려면 false로 설정하세요 \r\n     var blnStatusBar = true; \r\n\r\n     // 자막(SMI 캡션파일)을 사용할 것인지 결정하세요  : 자막사용(true) | 자막없음(false)\r\n     // true로 설정하면 자막영역이 표시되며, 샘플미디어의 자막도 확인이 가능합니다.\r\n     var blnUseSmi = false;\r\n\r\n     // 전체 트랙을 재생할 회수를 결정하세요 : 전체 트랙 반복 재생(true) | 한번만 재생(false)\r\n     // 배경음악 플레이어로 사용할 경우 true로 설정하는 것이 좋을 듯 합니다.\r\n     var blnLoopTrk = false;\r\n\r\n     // 재생중인 미디어 자체가 갖는 실제 정보를 얻고자 한다면 아래 값을 true 로 설정하세요\r\n     // Alert형식으로 정보가 제공되며, 음악등록에 오류가 있는 경우 정보 출력은 되지 않습니다.\r\n     // 음악등록이 정상적인지 확인하기 위한 관리팁이므로 실제 웹사이트에 업로드할땐 false로 설정하세요\r\n     var blnShowMmInfo =false;\r\n\r\n\r\n (3단계 : 미디어 등록 하기 >> addlist.js)\r\n\r\n     addlist.js 파일을 메모장(Notepad)으로 연후에 아래 형식으로 미디어를 등록하세요\r\n     addlist.js 파일에 등록 예제형식이 있으므로 참고하면 미디어 등록시 도움이 될 것입니다.\r\n     미디어 등록형식은 아래와 같습니다. 초보자는 일반음악등록 형식을 취하면 편리합니다.\r\n     (주의) Javascrpt 는 대.소문자구별 및 오류에 민감하므로 주의해서 작성하세요\r\n     (주의) Javascript 에서 특수한 의미를 갖는 특수문자 (\\, " , '' )등은 사용하지마세요.\r\n\r\n----------------------------------------------------------------------------------\r\n  ※ 일반 음악 등록 형식 : mkList("미디어URL","타이틀명");\r\n     음악 등록 전체 형식 : mkList("미디어URL","타이틀명","자막파일명", "선택제외플래그(f)");\r\n     등록 후 선택은 제외 : mkList("미디어URL","타이틀명","", "f");\r\n     자동 정보 추적 형식 : mkList("미디어URL");\r\n----------------------------------------------------------------------------------\r\n   eg) mkList("http://myhome/asf/cool.asf","Cool-Ooops");\r\n\r\n 주의(1) : 자막파일은 해당 미디어(xyz.wma)와 ''같은 폴더''에 ''동일한 이름(xyz.smi)''으로 존재하도록 하세요.\r\n           ※ 주의(1)처럼 하면 자막경로를 등록하지 않아도 자동으로 자막이 인식되어 추가됩니다.\r\n 주의(2) : 자막파일명을 등록해야 할 경우 해당미디어의 URL을 기준으로하므로 자막파일명만 기입하면 됩니다.\r\n 주의(3) : 사용자 PC에 존재하는 미디어의 기본 경로는 "file:///드라이브:\\\\경로\\\\미디어.asf" 입니다. \r\n           ※ 로컬(local)경로 구분자는 \\\\ 입니다. ex) mkList("file:///c:\\\\music\\\\pop\\\\pop1.asf"."팝송1");\r\n 주의(4) : 자동 제목 추적형식을 취하는 경우, 플레이리스트에는  정보추적문구가 표시됩니다.\r\n           ※ 재생이 시도된 이후에는 자동으로 타이틀이 복원되며, 저장되어 정보를 잃지 않습니다.\r\n 주의(5) : 미디어 경로입력시 " "사이에 (특히 앞.뒤에)공백을 넣으면 경로가 바르게 인식되지 않습니다.\r\n           ※ 미디어 파일명은 반드시 영숫자(Alpha-Numeric) 형식을 취해야합니다. \r\n              (대.소문자를 구분하므로 가능한 소문자-숫자 형태로 통일된 형식의 파일명을 사용하세요)\r\n           ※ WMP의 인터넷셩로에는 한글,일어,중국어와 같은 문자 코드는 제대로 인식되지 않습니다.\r\n              따라서, 특정언어코드및 특수문자.공백을 미디어명이나 경로(URL)에 포함되면 안됩니다.\r\n\r\n 주의(6) : 대다수 발생하는 플레이어의 스크립트 오류는 미디어 등록과정에서의 사용자 실수인 경우가 많습니다.\r\n           한곡한곡 등록과 테스트를 겸하면 한꺼번에 등록한 후에 오류를 찾는 것보다 용이합니다. \r\n\r\n   미디어 등록이 완료된 후에는 반드시 "저장"을 한후에 플레이어를 다시 IE에서 불러오세요.\r\n   정상적으로 미디어가 등록되었는지, 오류는 없는지 등을 반드시 확인하시기 바랍니다.\r\n\r\n======================================================================\r\n▒  홈페이지에 플레이어 넣기 ▒\r\n======================================================================\r\n\r\n 옵션설정및 재생할 미디어 등록이 완료되었다면 웹사이트에 플레이어 파일 전체를 업로드해야 합니다.\r\n (플레이어에 포함된 sample 폴더를 제외한 모든 html,js 파일및 img 폴더를 업로드하세요)\r\n\r\n FRAME 테그를 이용하여 위에 업로드된 exobud.html 을 원하는 html의 프레임에 넣으면 됩니다.\r\n (플레이어 사이즈가 폭(width)이 대략 640, 높이(height)가 20(자막사용시 60)정도 입니다)\r\n (프레임 영역의 크기는 플레이어가  전체가 보일 수 있도록 적절히 조절하세요)\r\n\r\n FRAME및 IFRAME의 사용법은 HTML 테그이므로 관련 서적이나 인터넷을 참고하세요\r\n IFRAME을 사용할 경우 아래 부분을 참고하세요(홈페이지 제작 초보자는 IFRAME 사용에 유의)\r\n\r\n <IFRAME name="exobudmp"\r\n	SRC="업로드한 exobud.html의 URL"\r\n	height="20"  width="680" \r\n	leftmargin="0" topmargin="0"  marginheight="0" marginwidth="0" \r\n	frameborder="0" \r\n	scrolling="no"  ></IFRAME>\r\n\r\n IFRAME 테그는 일종의 레이어(Layer) 처럼 어떤 html 에서든 쉽게 사용될 수 있지만,\r\n 방문자 네비게이션에 의한 플레이어의 실종이 발생하지 않도록 유의하셔야 합니다.\r\n 가능한 기본페이지(보통 index.html)에 FRAME을 구성하여 플레이어를 고정적으로 배치하세요.\r\n\r\n IFRAME은 FRAME으로 나뉜 영역 중 거의 고정적으로 배치되는 영역(예:menu만으로 구성된 프레임 )에서\r\n DIV,LAYER 등의 테그로 프레임내의 임의 위치에 플레이어를 구성하고자 할 때 매우 유용합니다. \r\n\r\n======================================================================\r\n▒  고급사용자 : 플레이어 배경색 및 이미지 관련 ▒ \r\n======================================================================\r\n\r\n 각 html 의 스타일정의는 해당 파일명의 스타일시트 파일에 정의되어 있습니다.\r\n ※ exobud.css 는 exobud.html (플레이어)의 스타일시트 정의 파일입니다.\r\n ※ exobudpl.css 는 exobudpl.html (플레이리스트)의 스타일시트 정의 파일입니다.\r\n\r\n      (a)  플레이어 색상 바꾸기 (exobud.css)\r\n\r\n            BODY { margin: 0px 0px 0px 0px; background:white; cursor:crosshair;} \r\n	.title{ FONT-FAMILY: 돋움,굴림; FONT-SIZE: 11px; color:#222222; }\r\n	.time{ FONT-FAMILY: 돋움,굴림; FONT-SIZE: 11px; color:#505050; }\r\n   \r\n             .title  는 타이틀 출력부에 표시될 글꼴및 색상 크기를 지정합니다. (글꼴크기 최대 12px 까지가능)\r\n             .time 는 재생진행시간 출력버튼에 사용되는 글꼴및 색상 크기를 지정합니다. (글꼴크기 최대 12px 까지가능)\r\n             exobud.html의 전체배경색및 이미지는 BODY 부분에 정의하면 됩니다.\r\n\r\n      (b) 자막 영역 세부설정 (caption.js)\r\n\r\n          캡션을 사용하지 않더라도 exobud.html에 아래코드를 제거하면 안됩니다.\r\n            <SCRIPT Language="JavaScript" src="caption.js"></SCRIPT>\r\n\r\n          캡션을 사용하지 않을 경우 옵션설정(config.js)에서 var blnUseSmi = false;로 설정하세요.\r\n\r\n          자막의 위치를 바꾸고자 한다면 exobud.html에서  아래 코드부분을 원하는 위치에 옮기면됩니다.\r\n            <SCRIPT Language="JavaScript" src="caption.js"></SCRIPT>\r\n\r\n          자막영역에 관한 스타일및 기타 설정은 caption.js 파일을 수정하면 됩니다.\r\n          아래 코드는 captipn.js 파일의 일부 내용입니다.\r\n\r\n\r\n      <div id="capText" style="width:100%;height:60;font-size:11px;color:white;background-color:#555555;display:none;">\r\n           <P align=right>caption</div>\r\n\r\n           width및 height 값을 적절히 바꾸어서 사용하면 원하는 사이즈로 자막영역을 설정할 수 있습니다.\r\n           smi 파일의 텍스트는 주로 "흰색"을 사용하므로 자막영역의 배경색은 진회색계열의 #555555 입니다.\r\n           smi 파일의 텍스트를 검정계열로 할경우 background-color 를 밝은색으로 바꾸어 주세요.\r\n           font-size는 smi 파일의 캡션과 무관하므로 수정할 필요가 없습니다.\r\n           캡션에 출력되는 자막의 글꼴 색상및 크기 등등은 smi 파일에서 정의해 주어야합니다.\r\n\r\n\r\n      (c)  플레이리스트에서 배경 변경 (exobudpl.css)\r\n	\r\n	스타일 정의부분에서 body 부분을 정의한 곳을 보시기 바랍니다.\r\n\r\n	      BODY { scrollbar-face-color: #eaeaff; scrollbar-shadow-color: #44a0f0; \r\n		 scrollbar-highlight-color: #666666; scrollbar-3dlight-color: #44a0f0; \r\n		 scrollbar-darkshadow-color:#44a0f0; scrollbar-track-color:#55b0ff;\r\n		 scrollbar-arrow-color: #666666; font-size:12px;\r\n		 background:url(lhouse_l.jpg) white no-repeat fixed  right 94%;} \r\n\r\n	scrollbar 란 접두어가 붙는 것은 스크롤바에대한 색상정의 부분입니다.\r\n	페이지 나눔기능이 있으므로 사실상 스크롤바에 대한 정의는 굳이 필요치 않습니다.\r\n\r\n	플레이리스트의 배경과련부분은 위의 background 부분을 변경하면 &#46065;니다.\r\n	( background:url(배경이미지URL) 배경색 배경이미지위치 및 기타 옵션; )\r\n	이 부분에 대한 자세한 설정은 스타일시트 서적을 참고하세요\r\n                  \r\n      (d)  플레이리스트에서 각 음악 리스트의 색상 (exobudpl.css)                \r\n\r\n	스타일 정의부분에서 아래의 anchor 정의 부분을 보시기 바랍니다.\r\n\r\n	      A:visited { color: #444444; text-decoration: none } \r\n	      A:active { color: #444444; text-decoration: none } \r\n	      A:hover {color:darkblue; text-decoration: none ; cursor:w-resize;}\r\n	      A:link { color: #444444; text-decoration: none } \r\n\r\n	각 음악의 색상은 일반적인 링크색상 변경과 같습니다.\r\n\r\n	A:visited :는 한번이상 클릭한 적이있는 경우의 색깔... \r\n	A:active : 현재 활성화된 링크색깔... \r\n	A:hover : 마우스가 해당 목록에 놓여질때의 색상 \r\n	A:link : 원래 링크색깔... \r\n              \r\n	color 값을 원하는 색상으로 바꿀수 있습니다.\r\n\r\n      (f)  플레이리스트에서 트랙번호 색상 (exobudpl.css)\r\n\r\n	스타일 정의부분에서 아래의 TD 정의 부분을 보시기 바랍니다.\r\n\r\n	TD {font-family:굴림;font-size:12px; color:silver;}\r\n\r\n	플레이어에서 바꾸듯이 이곳을 바꾸어 주면\r\n	플레이리스트의 트랙번호 글자색 크기 글꼴을 바꿀수 있습니다.\r\n\r\n\r\n======================================================================\r\n▒  기타 참고 사항 ▒\r\n======================================================================\r\n      ExoBUD  홈페이지에 오시면 최신 업데이트된 소스를 받으실수 있습니다.\r\n      문제점이 있거나 궁금한 점이 있다면 아래 URL로 찾아오시면 감사하겠습니다.\r\n\r\n      홈페이지 : http://cyworld.com/exobud 또는 http://exobud.freeto.net\r\n      e-mail   : exobud@hanmail.net\r\n      icq      : 96138429 (authorization mode 이므로 사유를 밝혀주셔야 Add 됩니다.)\r\n\r\n\r\n\r\n============================== FILE ==============================\r\n엑소버드_그레이레드.zip|엑소버드_그레이레드.JPG', '', '엑소버드_그레이레드.zip|엑소버드_그레이레드.JPG', 4, 0),
(61, '', '서대영', '', '2007-09-23 23:13:12', 'Media', '[exobud] 미니오렌지', '\r\n\r\n\r\n\r\n============================== FILE ==============================\r\n엑소버드_오렌지.zip|엑소버드_오렌지.jpg', '', '엑소버드_오렌지.zip|엑소버드_오렌지.jpg', 11, 0),
(62, '', '서대영', '', '2007-11-07 16:18:36', 'IT', 'DNS (Domain Name System)', 'The most basic task of DNS is to translate hostnames to IP addresses. In very simple terms, it can be compared to a phone book. For example, if you want to know the internet address of en.wikipedia.org, DNS can tell you that it is 145.97.39.155. DNS also has other important uses.\r\n\r\nPreeminently, DNS makes it possible to assign Internet names to organizations or concern they represent, independently of the physical routing hierarchy represented by the numerical IP address. Because of this, hyperlinks and Internet contact information can remain the same, whatever the current IP routing arrangements may be, and can take a human-readable form (such as "wikipedia.org") which is rather easier to remember than an IP address (such as 66.230.200.100). People take advantage of this when they recite meaningful URLs and e-mail addresses without caring how the machine will actually locate them.\r\n\r\nThe Domain Name System (DNS) distributes the responsibility for assigning domain names and mapping them to IP networks by allowing an authoritative server for each domain to keep track of its own changes, avoiding the need for a central registrar to be continually consulted and updated.', '', '', 5, 0),
(63, '', '서대영', '', '2007-11-07 16:32:03', 'IT', 'E-mail', 'E-mail (short for electronic mail; often also abbreviated as e-mail, email or simply mail) is a store and forward method of composing, sending, storing, and receiving messages over electronic communication systems. The term "e-mail" (as a noun or verb) applies both to the Internet e-mail system based on the Simple Mail Transfer Protocol (SMTP) and to X.400 systems, and to intranet systems allowing users within one organization to e-mail each other. Often these workgroup collaboration organizations may use the Internet protocols or X.400 protocols for internal e-mail service. E-mail is often used to deliver bulk unsolicited messages, or "spam", but filter programs exist which can automatically delete some or most of these, depending on the situation.', '', '', 0, 0),
(64, '', '서대영', '', '2007-11-07 16:37:37', 'IT', 'SMTP (Simple Message Transfer Protocol)', 'SMTP is a relatively simple, text-based protocol, in which one or more recipients of a message are specified (and in most cases verified to exist) and then the message text is transferred. It is a client-server protocol, whereby a client transmits an email message to a server. Either an end-user''s email client, a.k.a. MUA (Mail User Agent), or a relaying server''s MTA (Mail Transport Agents) can act as an SMTP client.\r\n\r\nAn email client knows the outgoing mail SMTP server from its configuration. A relaying server typically determines which SMTP server to connect to by looking up the MX (Mail eXchange) DNS record for each recipient''s domain name (the part of the email address to the right of the at (@) sign). Conformant MTAs (not all) fall back to a simple A record in the case of no MX. Some current mail transfer agents will also use SRV records, a more general form of MX, though these are not widely adopted. (Relaying servers can also be configured to use a smart host.)\r\n\r\nThe SMTP client initiates a TCP connection to server''s port 25 (unless overridden by configuration). It is quite easy to test an SMTP server using the telnet program (see below).\r\n\r\nSMTP is a "push" protocol that does not allow one to "pull" messages from a remote server on demand. To do this a mail client must use POP3 or IMAP. Another SMTP server can trigger a delivery in SMTP using ETRN.', '', '', 1, 0),
(65, '', '서대영', '', '2007-11-07 16:46:49', 'IT', 'MIME (Multipurpose Internet Mail Extensions)', 'Multipurpose Internet Mail Extensions (MIME) is an Internet Standard that extends the format of e-mail to support:\r\n\r\ntext in character sets other than US-ASCII; \r\nnon-text attachments; \r\nmulti-part message bodies; and \r\nheader information in non-ASCII character sets. \r\n\r\nVirtually all human-written Internet e-mail and a fairly large proportion of automated e-mail is transmitted via SMTP in MIME format. Internet e-mail is so closely associated with the SMTP and MIME standards that it is sometimes called SMTP/MIME e-mail.[1]\r\n\r\nThe content types defined by MIME standards are also of importance outside of e-mail, such as in communication protocols like HTTP for the World Wide Web. HTTP requires that data be transmitted in the context of e-mail-like messages, even though the data may not actually be e-mail.', '', '', 1, 0),
(66, '', '서대영', '', '2007-11-07 16:55:27', 'IT', 'POP (Post Office Protocol) VS IMAP (Internet Message Access Protocol)', 'The design of POP3 and its procedures supports end-users with intermittent connections (such as dial-up connections), allowing these users to retrieve e-mail when connected and then to view and manipulate the retrieved messages without needing to stay connected. Although most clients have an option to leave mail on server, e-mail clients using POP3 generally connect, retrieve all messages, store them on the user''s PC as new messages, delete them from the server, and then disconnect. In contrast, the newer, more capable Internet Message Access Protocol (IMAP) supports both connected (online) and disconnected (offline) modes of operation. E-mail clients using IMAP generally leave messages on the server until the user explicitly deletes them. This and other aspects of IMAP operation allow multiple clients to access the same mailbox. Most e-mail clients support either POP3 or IMAP to retrieve messages; however, fewer Internet Service Providers (ISPs) support IMAP. The fundamental difference between POP3 and IMAP4 is that POP3 offers access to a mail drop; the mail exists on the server until it is collected by the client. Even if the client leaves some or all messages on the server, the client''s message store is considered authoritative. In contrast, IMAP4 offers access to the mail store; the client may store local copies of the messages, but these are considered to be a temporary cache; the server''s store is authoritative.\r\n\r\n', '', '', 2, 0),
(67, '', '서대영', '', '2007-11-07 17:19:39', 'IT', 'HTTP (Hypertext Transfer Protocol)', 'Hypertext Transfer Protocol (HTTP) is a communications protocol used to transfer or convey information on intranets and the World Wide Web. Its original purpose was to provide a way to publish and retrieve hypertext pages. Development of HTTP was coordinated by the W3C (World Wide Web Consortium) and the IETF (Internet Engineering Task Force), culminating in the publication of a series of RFCs, most notably RFC 2616 (June 1999), which defines HTTP/1.1, the version of HTTP in common use.\r\n\r\nHTTP is a request/response protocol between a client and a server. The client making an HTTP request - such as a web browser, spider, or other end-user tool - is referred to as the user agent. The responding server - which stores or creates resources such as HTML files and images - is called the origin server. In between the user agent and origin server may be several intermediaries, such as proxies, gateways, and tunnels. HTTP is not constrained to using TCP/IP and its supporting layers, although this is its most popular application on the Internet. Indeed HTTP can be "implemented on top of any other protocol on the Internet, or on other networks. HTTP only presumes a reliable transport; any protocol that provides such guarantees can be used."\r\n', '', '', 1, 0),
(68, '', '서대영', '', '2007-11-07 18:43:23', 'IT', 'HTML (Hypertext Markup Language)', 'HTML, an initialism of Hypertext Markup Language, is the predominant markup language for web pages. It provides a means to describe the structure of text-based information in a document &#8212; by denoting certain text as headings, paragraphs, lists, and so on &#8212; and to supplement that text with interactive forms, embedded images, and other objects. HTML is written in the form of labels (known as tags), surrounded by angle brackets. HTML can also describe, to some degree, the appearance and semantics of a document, and can include embedded scripting language code which can affect the behavior of web browsers and other HTML processors.\r\n\r\nHTML is also often used to refer to content of the MIME type text/html or even more broadly as a generic term for HTML whether in its XML-descended form (such as XHTML 1.0 and later) or its form descended directly from SGML (such as HTML 4.01 and earlier).', '', '', 0, 0),
(69, '', '서대영', '', '2007-11-07 18:48:40', 'IT', 'XML (Extensible Markup Language)', '하나의 파일에 문서의 내용과 구조가 함계 존재. 데이터 교환에 적합.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nThe Extensible Markup Language (XML) is a general-purpose markup language.[1] It is classified as an extensible language because it allows its users to define their own tags. Its primary purpose is to facilitate the sharing of structured data across different information systems, particularly via the Internet.[2] It is used both to encode documents and serialize data. In the latter context, it is comparable with other text-based serialization languages such as JSON and YAML.[3]\r\n\r\nIt started as a simplified subset of the Standard Generalized Markup Language (SGML), and is designed to be relatively human-legible. By adding semantic constraints, application languages can be implemented in XML. These include XHTML,[4] RSS, MathML, GraphML, Scalable Vector Graphics, MusicXML, and thousands of others. Moreover, XML is sometimes used as the specification language for such application languages.\r\n\r\nXML is recommended by the World Wide Web Consortium. It is a fee-free open standard. The W3C recommendation specifies both the lexical grammar, and the requirements for parsing.', '', '', 5, 0),
(70, '', '서대영', '', '2007-11-07 19:01:36', 'IT', 'HTTP cookie', 'HTTP cookies, sometimes known as web cookies or just cookies, are parcels of text sent by a server to a web browser and then sent back unchanged by the browser each time it accesses that server. HTTP cookies are used for authenticating, tracking, and maintaining specific information about users, such as site preferences and the contents of their electronic shopping carts. The term "cookie" is derived from "magic cookie," a well-known concept in unix computing which inspired both the idea and the name of HTTP cookies.\r\n\r\nCookies have been of concern for Internet privacy, since they can be used for tracking browsing behavior. As a result, they have been subject to legislation in various countries such as the United States and in the European Union. Cookies have also been criticised because the identification of users they provide is not always accurate and because they could potentially be used for network attacks. Some alternatives to cookies exist, but each has its own drawbacks.\r\n\r\nCookies are also subject to a number of misconceptions, mostly based on the erroneous notion that they are computer programs. In fact, cookies are simple pieces of data unable to perform any operation by themselves. In particular, they are neither spyware nor viruses, despite the detection of cookies from certain sites by many anti-spyware products.\r\n\r\nMost modern browsers allow users to decide whether to accept cookies, but rejection makes some websites unusable. For example, shopping baskets implemented using cookies do not work if cookies are rejected.', '', '', 0, 0),
(71, '', '서대영', '', '2007-11-07 19:11:41', 'IT', 'URL (Uniform Resource Locator)', 'Abbreviation of Uniform Resource Locator, the global address of documents and other resources on the World Wide Web. \r\nThe first part of the address indicates what protocol to use, and the second part specifies the IP address or the domain name where the resource is located. \r\n\r\nFor example, the two URLs below point to two different files at the domain pcwebopedia.com. The first specifies an executable file that should be fetched using the FTP protocol; the second specifies a Web page that should be fetched using the HTTP protocol: \r\n\r\nftp://www.pcwebopedia.com/stuff.exe \r\nhttp://www.pcwebopedia.com/index.html \r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.webopedia.com/TERM/U/URL.html', 'http://www.webopedia.com/TERM/U/URL.html', '', 2, 0),
(72, '', '서대영', '', '2007-11-07 19:19:35', 'IT', 'VoIP(Voice over IP)', 'Voice over Internet Protocol, also called VoIP (pronounced voyp), IP Telephony, Internet telephony, Broadband telephony, Broadband Phone and Voice over Broadband is the routing of voice conversations over the Internet or through any other IP-based network.\r\n\r\nCompanies providing VoIP service are commonly referred to as providers, and protocols which are used to carry voice signals over the IP network are commonly referred to as Voice over IP or VoIP protocols. They may be viewed as commercial realizations of the experimental Network Voice Protocol (1973) invented for the ARPANET providers. Some cost savings are due to utilizing a single network to carry voice and data, especially where users have existing underutilized network capacity that can carry VoIP at no additional cost. VoIP to VoIP phone calls are sometimes free, while VoIP to public switched telephone networks, PSTN, may have a cost that is borne by the VoIP user.\r\n\r\nVoice over IP protocols carry telephony signals as digital audio, typically reduced in data rate using speech data compression techniques, encapsulated in a data packet stream over IP.\r\n\r\nThere are two types of PSTN to VoIP services: Direct Inward Dialing (DID) and access numbers. DID will connect the caller directly to the VoIP user while access numbers require the caller to input the extension number of the VoIP user.\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://en.wikipedia.org/wiki/Internet_telephone', 'http://en.wikipedia.org/wiki/Internet_telephone', '', 3, 0),
(73, '', '서대영', '', '2007-11-07 23:12:37', 'IT', 'DHCP (Dynamic Host Configuration Protocol)', 'Short for Dynamic Host Configuration Protocol, a protocol for assigning dynamic IP addresses to devices on a network. With dynamic addressing, a device can have a different IP address every time it connects to the network. In some systems, the device''s IP address can even change while it is still connected. DHCP also supports a mix of static and dynamic IP addresses. \r\nDynamic addressing simplifies network administration because the software keeps track of IP addresses rather than requiring an administrator to manage the task. This means that a new computer can be added to a network without the hassle of manually assigning it a unique IP address. Many ISPs use dynamic IP addressing for dial-up users.', '', '', 2, 0),
(74, '', '서대영', '', '2007-11-07 23:25:38', 'IT', 'Gateway', 'an entrance to another network. \r\n\r\n------------------------------------------------------------\r\n\r\nA node on a network that serves as an entrance to another network. In enterprises, the gateway is the computer that routes the traffic from a workstation to the outside network that is serving the Web pages. In homes, the gateway is the ISP that connects the user to the internet. \r\nIn enterprises, the gateway node often acts as a proxy server and a firewall. The gateway is also associated with both a router, which use headers and forwarding tables to determine where packets are sent, and a switch, which provides the actual path for the packet in and out of the gateway. ', '', '', 2, 0),
(75, '', '서대영', '', '2007-11-07 23:30:02', 'IT', 'Router', '내부 네트워크(가정, 회사)와 외부 네트워크(인터넷, WAN)를 연결해주는 장치.\r\n그래서 Gaeway라고도 불림\r\n\r\n\r\n\r\nA device that forwards data packets along networks.\r\n\r\n------------------------------------------------------------\r\n\r\nA device that forwards data packets along networks. A router is connected to at least two networks, commonly two LANs or WANs or a LAN and its ISP.s network. Routers are located at gateways, the places where two or more networks connect. Routers use headers and forwarding tables to determine the best path for forwarding the packets, and they use protocols such as ICMP to communicate with each other and configure the best route between any two hosts. ', '', '', 4, 0),
(76, '', '서대영', '', '2007-11-07 23:42:06', 'IT', 'Hub & Switch', '전원을 여러 플러그로 나눠주는 멀티탭 역할\r\n\r\n\r\n스위치 : 여러대가 연결되어도 한대가 연결된 속도\r\n\r\n스위치는 PC에 할당되는 대역폭을 확대 시키기 위해 탄생된 장비로 허브와는 달리 LAN이제공하는 대역폭을 PC로 고스란히 전달한다.(고속 이더넷 스위치는 자신에 연결된 PC의 대수에 상관없이 각각에 (1백Mbps)10Mbps의 대역폭을 제공한다. \r\n\r\n\r\n허브 : 여러개닥 연결될수록 느려짐.\r\n\r\n허브는 여러 대의 PC를 연결하는 장비다.보통 4.8, 12.16, 24 등 다양한 포트를갖고 있으며 각 포트는 PC 1대에 할당된다.허브의 약점은 각 LAN이 보유한 대역폭을 PC의 대수만큼 쪼개서 제공한다는 것. 예를 들어 10Mbps의 대역폭을 제공하 는 이더넷에 8포트형 허브로 PC 8대를 연결시켰을 때 8대의 PC는 각각 1.25Mbps의 대역폭만 을 할당받게 된다. 이같은 성능상의 한계로 허브는 점차 재택근무 및 가정(SOHO)용으로 밀려나는 추세며 그 자리를 스위치가 대체하고 있다. ', '', '', 5, 0),
(77, '', '서대영', '', '2007-11-08 09:05:29', 'IT', 'Internet VS WWW', 'Many people use the terms Internet and World Wide Web (a.k.a. the Web) interchangeably, but in fact the two terms are not synonymous. The Internet and the Web are two separate but related things. \r\nThe Internet is a massive network of networks, a networking infrastructure. It connects millions of computers together globally, forming a network in which any computer can communicate with any other computer as long as they are both connected to the Internet. Information that travels over the Internet does so via a variety of languages known as protocols. \r\n\r\nThe World Wide Web, or simply Web, is a way of accessing information over the medium of the Internet. It is an information-sharing model that is built on top of the Internet. The Web uses the HTTP protocol, only one of the languages spoken over the Internet, to transmit data. Web services, which use HTTP to allow applications to communicate in order to exchange business logic, use the the Web to share information. The Web also utilizes browsers, such as Internet Explorer or Netscape, to access Web documents called Web pages that are linked to each other via hyperlinks. Web documents also contain graphics, sounds, text and video. \r\n\r\nThe Web is just one of the ways that information can be disseminated over the Internet. The Internet, not the Web, is also used for e-mail, which relies on SMTP, Usenet news groups, instant messaging and FTP. So the Web is just a portion of the Internet, albeit a large portion, but the two terms are not synonymous and should not be confused. ', '', '', 5, 0),
(78, '', '서대영', '', '2007-11-19 16:28:47', 'HTML', '제목달린 글상자', '<fieldset><legend> 제목</legend>제목을 넣어서 fiedlset작성하기</fieldset> \r\n<fieldset style="width:50; height:30">필드셋 크기를 원하는 크기로 만든다.</fieldset> \r\n<fieldset style="border:3 solid #808080">필드셋 선의 두께와 모양, 색상을 변경하기</fieldset> \r\n<fieldset style="padding:5">필드셋에 여백을 만들어준다.</fieldset> \r\n<fieldset style="border-left-width:20">필드셋의 경계선 일부분에 두께를 변경한 경우</fieldset>', '', '', 6, 0),
(79, '', '서대영', '', '2007-11-19 17:43:21', 'HTML', '들여쓰기', '<blockquote>\r\n\r\n1.  생물\r\n\r\n    <blockquote>\r\n        1) 동물\r\n    </blockquote>\r\n\r\n    <blockquote>\r\n        2) 식물\r\n    </blockquote>\r\n\r\n</blockquote>', '', '', 3, 0),
(80, '', '서대영', '', '2007-12-06 09:54:37', 'PHP', '문자열 자체로 변수명으로 쓰기', '${"문자열"}\r\n\r\nex)\r\n\r\n${"color_".$sub} = "#FF9900";\r\n\r\n은 아래랑 같다. \r\n\r\n \r\n    if ($sub == 1) $color_1 = "#FF9900"; \r\n    if ($sub == 2) $color_2 = "#FF9900"; \r\n    if ($sub == 3) $color_3 = "#FF9900"; \r\n    if ($sub == 4) $color_4 = "#FF9900"; \r\n    if ($sub == 5) $color_5 = "#FF9900";     \r\n    if ($sub == 6) $color_6 = "#FF9900"; \r\n    if ($sub == 7) $color_7 = "#FF9900"; \r\n    if ($sub == 8) $color_8 = "#FF9900";   \r\n', '', '', 3, 0),
(81, '', '서대영', '', '2007-12-07 01:04:45', 'Java', '자바의 특징', '1) 플랫폼에 독립적이다\r\n\r\n * Java : 소스코드(a.java) - 컴파일 -> 중간코드(a.class) - 인터프리트 -> VM -> 모든HW\r\n * c++ : 소스코드(a.c) - 컴파일 -> 기계코드(a.exe) -> 특정HW\r\n\r\n2) OOP\r\n\r\n3) 간단하다\r\n\r\n * 포인터의 개념 X, 연산자 중복 X\r\n\r\n4) 견고하다\r\n\r\n * Exception\r\n * Garvege Collection', '', '', 3, 0),
(82, '', '서대영', '', '2007-12-07 12:56:45', 'Java', '자바의 기본', '# 설치\r\n\r\n * 시스템 변수 PATH 에 C:Program FilesJavajdk1.6.0_03bin 추가 (콘솔 명령어 입력시 어느 경로에서나 javac와 java 명령어를 실행 가능하도록, eclipse 사용시 필요 없음)\r\n\r\n * JVM = jdk\r\n\r\n# 명령어\r\n\r\n * C:Program FilesJavajdk1.6.0_03bin 에 위치\r\n * javac Test.java : 컴파일\r\n * java Test.class : 실행\r\n\r\n# 관례\r\n\r\n * 하나의 자바 파일에 하나의 자바 클래스\r\n * 파일명과 클래스 이름 동일\r\n * 클래스 이름은 대문자로 시작\r\n * main 함수로 부터 프로그램 시작', '', '', 9, 0),
(83, '', '서대영', '', '2007-12-07 13:36:36', 'Java', '식별자와 키워드', '# 식별자\r\n\r\n * 프로그래머가 의미 부여\r\n * 클래스명, 변수명, 매쏘드명\r\n * 대소문자 구분\r\n * 뛰어쓴 단어의 첫 글자는 대문자로\r\n * 클래스명 : 대문자로 시작\r\n * 변수명, 매쏘드명 : 소문자로 시작\r\n * 상수화변수 : 전체를 대문자로\r\n * 한글, _, $ 이용 자제\r\n * 길어도 의미있는 단어 사용\r\n\r\n# 예약어\r\n\r\n * 프로그래밍 언어에 미리 정의된 단어', '', '', 0, 0),
(84, '', '서대영', '', '2007-12-07 13:36:57', 'Java', '변수와 상수', '# 변수\r\n\r\n * 전역변수(맴버변수, 클래스변수) : 매쏘드 밖, 클래스 내, 초기화 O\r\n * 지역변수 : 매쏘드 내, 초기화 X\r\n\r\n# 상수 \r\n\r\n * final과 static 키워드를 이용, 전체 대문자로', '', '', 6, 0),
(85, '', '서대영', '', '2007-12-07 13:37:09', 'Java', '자료형', '# 자료형\r\n\r\n * 데이터의 종류\r\n\r\n# 기본 자료형\r\n\r\n * 값자체를 저장\r\n * 데이터\r\n * boolean (true, false)\r\n * char\r\n * byte, short, int(32bit), long(64bit)\r\n * double(기본실수형), float(부동소수형?)\r\n\r\n\r\n# 참조 자료형\r\n\r\n * 객체를 가르키는 주소값을 저장\r\n * 데이터와 매쏘드', '', '', 3, 0),
(86, '', '서대영', '', '2007-12-07 13:40:39', 'Java', '형변환(Casting)', '# 기본 데이터 형변환\r\n\r\n * 암묵적\r\n\r\n  - double -> float -> long -> short -> int -> short, char -> byte\r\n  - ex) double num = 10;\r\n\r\n * 명시적\r\n\r\n  - 암묵적 반대 방향\r\n  - ex) int num = (int)10.0;\r\n\r\n * boolean 형은 형변환 불가\r\n\r\n# 객체 형변환\r\n\r\n ※ 아들은 아버지옷 입을 수 있지만, 아버지는 아들옷 입을 수 없음.\r\n\r\n * 암묵적\r\n \r\n  - 하위 타입에서 내에서 상위 타입 가능\r\n  - Parent p1 = new Child(); \r\n\r\n * 명시적\r\n\r\n  - 상위 타입로 형변환 됐었던 하위 타입가 다시 본래 타입로 귀환 가능\r\n  - Child c1 = (Child)p1;', '', '', 4, 0),
(87, '', '서대영', '', '2007-12-08 23:00:56', 'Java', '연산자', '# System.out.println(++a) 와 System.out.println(a++) 의 차이\r\n\r\n - 전자는 a를 증가시키고 출력, 후자는 a를 출력 후 증가\r\n\r\n# && 와 & 의 차이\r\n\r\n - 전자는 앞이 false 이면 뒤는 수행안하지만, 후자는 앞 뒤 수행다함\r\n\r\n# 관계, 논리 연산자는 boolean를 리턴\r\n\r\n# Shift 연산자\r\n\r\n * 8 >> 2 는 8 / 2^2과 같다\r\n * 8 << 2 는 8 * 2^2과 같다\r\n * >>> unsigned shift : 부호 비트까지 옮겨버러셔 음수를 했을 경우 다른 값이 나온다.\r\n\r\n# 연산자 우선순위 보다는 괄호를 애용하자\r\n\r\n# ==\r\n\r\n# 객체명 instanceof 클래스명 : 이 객체가 이 클래스나 이 클래스 상위 클래스의 객체인지 판별.\r\n\r\n * 기본 데이터 타입을 비교할 때는 값을 비교하고, 클래스 타입을 비교할 때는 주소값을 비교한다. ★\r\n * 객체 자체 값을 비교하기 위해서는 Object 클래스의 equals 함수를 사용한다.', '', '', 11, 0),
(88, '', '서대영', '', '2007-12-08 23:02:37', 'Java', '제어문', '# switch - else - break 정수만 가능\r\n\r\n★ break : 가장 가까운 반복문(조건문 X)을 빠져나감\r\n★ continue : 한 루프만 통과', '', '', 4, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(89, '', '서대영', '', '2007-12-11 00:54:51', 'Java', 'OOP', '* 현존 시스템 -> 전산 시스템\r\n* data와 행위의 결함\r\n* 재사용성, 유지보수성 -> 결합도 응집도\r\n\r\n1. 추상화 : 하나의 객체를 관계되는 특성과 행위로 묶어서 표현\r\n2. 캡슐화 : 하나의 클래스에 관련된 애트리브트와 메스드들을 묶음. 정보은닉과 절차은닉.\r\n3. 다형성 : 상속, overriding, casting, interface, abstract class\r\n', '', '', 4, 0),
(90, '', '서대영', '', '2007-12-11 01:05:08', 'Java', 'String 클래스', 'String 객체는 한번 생성되고 나면 변경할 수 없고 완전히 새로운 String 객체가 생성됨.\r\n\r\n\r\n# 많이 쓰이는 매서드\r\nlength, charAt\r\n\r\n\r\n# replaceAll(String oldStr, newStr);\r\n\r\n : 스트링 대체\r\n\r\n# equalsLgnoreCase()\r\n\r\n :  대소문자 구분 없이 비교', '', '', 4, 0),
(91, '', '서대영', '', '2007-12-11 13:37:31', 'Java', '클래스', '# 클래스 : 전산적인 객체의 설계도\r\n# 객체 : 실제 메모리를 할당받은 클래스를 통해 만들어진 객체\r\n\r\n', '', '', 0, 0),
(92, '', '서대영', '', '2007-12-11 13:40:53', 'Java', '매쏘드 (method)', '★ 용도 : 필드의 값을 제어할 때, (다른 클래스의 맴버변수가 아니라...) \r\n\r\n# parameter (매개변수) : 매쏘드 정의 시\r\n\r\ne.g. public return_type methodName (type parameter, ...)\r\n\r\n# argument (인자) : 매쏘드 호출 시\r\n\r\ne.g. objectName.methodName(argument, ...)\r\n', '', '', 2, 0),
(93, '', '서대영', '', '2007-12-12 23:09:40', 'Java', '이클립스와 Eclipse WTP all-in-one 차이점', '이클립스에서 스트럿츠를 해보려고 하는데\r\n\r\n자료를 찾아보니 wtp all-in-one 이라는 버전이 있더군요\r\n\r\n이거랑 그냥 버전이랑 차이가 뭔가요?\r\n\r\n지금 그냥 버전에 비주얼에디터플러그인 설치해서 쓰고 있는데\r\n\r\n지금 제가 쓰고 있는거랑은 틀린건가요??\r\n\r\n지금 쓰고 있는거에 wtp만 따로 설치 할수 있나요??\r\n\r\n그냥 하고 wtp의 차이점을 알려주세용\r\n\r\n\r\nre: 이클립스 버전질문 (wtp 하고 그냥의 차이점??)\r\n\r\n\r\nwtp은 웹개발 플러그인입니다.\r\n\r\n이클립스와 그 플러그인이 함께들어간 Eclipse WTP all in one받는게\r\n\r\n편합니다.Project란에보면 Dynamic Web Project란게 있는데\r\n\r\n서블릿, JSP개발할 수 있습니다. 그외 EJB개발도 편합니다.\r\n\r\n톰켓을 비롯한 어플리케이션서버와\r\n\r\n연동해서 바로 실행결과도 볼 수있고 디버깅도 가능하죠. \r\n\r\n웹개발은 이거 하나로 간단히 해결되죠.\r\n\r\n예전엔 톰켓플러그인이나 람보즈플러그인 같은 것을 받아서 깔아야했었지만...\r\n\r\n비주얼에디터?? 스윙이나 AWT개발 플러그인이 아닌지??\r\n\r\nWTP외에 여러가지 서브프로젝트가 있습니다.\r\n\r\n \r\n\r\nBRIT -- BI(OLAP)레포팅툴\r\nTPTP -- 프로파일링\r\nEMF -- 이클립스 모델링 프레임워크 \r\n\r\n \r\n\r\nWTP(Web Tools Platform) 는 자바의 웹애플리케이션(J2EE)개발에 필요한 여러 기능을 제공하기위한 프로젝트이다. 우리는 WTP를 eclipse에 플러그인하여 사용할 수 있다.\r\n\r\n설치해서 사용해 보면 기쁨과 감격으로 넘칠 것이다.\r\n\r\n가장 간단한 방법으로 all-in-one 파일을 사용해 본다.\r\n\r\n \r\n\r\n \r\n\r\n[설치하기]\r\n\r\n \r\n\r\n(1) eclipse홈페이지에 접속 http://www.eclipse.org/  -> Download -> Popular Projects 의 \r\nWeb Tools 선택\r\n\r\n \r\n\r\n(2) 최신버전을 선택한다.\r\n\r\n \r\n\r\n(3) "WebTools Platform; All-in-one" 타이틀내 섹션에서 해당 플렛폼에 맞는 파일을 선택한다.\r\n\r\n[windows]인경우, 아래 링크로 바로 해당 다운로드 페이지로 이동할 수 있다.\r\n\r\nhttp://www.eclipse.org/downloads/download.php?file=/webtools/downloads/drops/R1.5/R-1.5.2-200610261841/wtp-all-in-one-sdk-R-1.5.2-200610261841-win32.zip\r\n\r\n \r\n\r\n(4) 다운받은 파일을 설치원하는 디렉토리에 압축을 풀면, eclipse 라는 디렉토리가 생긴다.\r\n\r\n이 All-In-One 파일에는 eclipse 및 WTP플러그인이 모두 포함되어 있다.\r\n\r\n이로써 모든 설치는 끝난 것이다.\r\n\r\n \r\n\r\n(5) eclipse.exe를 실행한 후, Windows > Open Perspective > Other... 에서 J2EE가 추가된 것을 확인할 수 있을 것이다.\r\n \r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/milkboy713/60045267271', 'http://blog.naver.com/milkboy713/60045267271', '', 3, 0),
(94, '', '서대영', '', '2007-12-12 23:20:02', 'Eclipse', '이클립스 자바 기본 세팅', '[Windows] - [Preferences...] 클릭 후,\r\n\r\n□ Font 바꾸기\r\n\r\n□ Encoding UTF 로 모두 바꾸기\r\n\r\n□ 줄번호 보이기\r\n\r\nGeneral - Editors - Text Editors 에서\r\nShow line numbers 체크\r\n\r\n\r\n□ 자동 괄호 닫기, 세미 콜론 자동 위치\r\n\r\nJava - Editor - Typing 에 있는 모든 항목 체크 \r\n\r\n\r\n□ API 소드 코드 보기 (F3키)\r\n\r\nJava - Installed JRE 에서 사용할 JRE 버젼을 jdk1.5 로설정 (API 소드 코드 볼 수 있음)\r\n\r\n\r\n□ JDK 버젼 확인 (여러 JDK를 설치한 적이 있는 경우)\r\n\r\nJava - Compiler 체크\r\nJava - Installed JRE 체크\r\n\r\n□ 자동완성 (Ctrl + Space)\r\n\r\nWindow → Preferences → Java → Editor → Content Assist → Advanced\r\n\r\n여기에서 Other Java Proposals에 체크를 해주면 해결된다.\r\n\r\n□ * import\r\n\r\n이클립스의 설정창(Window -> Preferences)에서 Java -> Code Style -> Organize Imports -> Number of static imports needed for.*의 숫자를 99(기본값)를 1로 줄여주면 된다고 \r\n\r\n□ static import\r\nWindow » Preferences » Java » Editor » Content Assist » Favorites\r\nNew Type 버튼 클릭하고 필요한 클래스 추가\r\n\r\n□ Maven Artifact의 Sources, JavaDoc 다운로드\r\nWindow > Preference > Maven 에서\r\n체크 Download Artifact Sources, Download Artifact JavaDoc\r\n\r\n# 더블 클릭했을 때, 구현체로 바로 가기\r\nGo to Window > Preferences > General > Editors > Text Editors > Hyperlinking, and uncheck Open Declaration. ', NULL, '', 39, 0),
(95, '', '서대영', '', '2007-12-13 11:49:50', 'Java', '생성자', '* method 형태, ( ~ ) { ~ }\r\n* class 명과 동일\r\n* return type 표현 X\r\n* 하나의 클래스 안에 여러개\r\n* 객체 생성시 딱 한번 실행 -> 객체를 위한 메모리 할당\r\n* new 연산자 뒤에 사용\r\n* 생성자를 안 만들더라도 디폴트 생성자(매개변수 없이) 생성됨\r\n* 매개변수 생성자를 사용할 때 반드시 디폴트 생성자도 만들어 놓는 습관이 나중에 상속을 위해서 필요.\r\n', '', '', 0, 0),
(96, '', '서대영', '', '2007-12-13 12:03:15', 'Java', 'this', '※ this : 객체 자신을 가르키는 객체 참조값\r\n\r\n# this();\r\n\r\n * 생성자 내에서 생성자 호출\r\n * 가장 첫줄에 한번만\r\n\r\n# this.id = id;\r\n\r\n * method 내에서 member variable 을 가르키기 위해\r\n\r\n# b1.b(this)\r\n\r\n * 현재 객체 자체를 b1 클래스의 b 매서드의 매개변수로 사용\r\n', '', '', 4, 0),
(97, '', '서대영', '', '2007-12-13 12:27:29', 'Java', 'static members', '□ class(static) members\r\n\r\nㅇ 개념\r\n - JVM이 class를 인식하는 동시에 생성되는 필드 및 메서드\r\n\r\nㅇ static filed\r\n - 같은 class 타입의 모든 객체들이 공용으로 사용하는 필드\r\n - 값을 이 객체 저 객체에서 바꿀 수 있음\r\n - 상수화 변수 (final)\r\n\r\nㅇ static method\r\n - 객체명이 아닌 클래스명으로 바로 접근 : Class.method()\r\n - 유틸리티 함수\r\n\r\n\r\n□ object members\r\n\r\n - 객체 생성시 메모리 할당\r\n - 객체명으로 접근\r\n\r\n□ 프로그램 실행 순서\r\n\r\n * java A.class를 하면\r\n  - 1. A class 파일 로딩\r\n  - 2. static 영역에 메모리 할당\r\n  - 3. main함수 호출', '', '', 5, 0),
(98, '', '서대영', '', '2007-12-15 20:58:04', 'Java', 'Overloading vs. Overriding', '# 공통점\r\n\r\n * 동일 이름의 method 명을 쓴다\r\n\r\n# 차이점\r\n\r\n *  Overloading(매쏘드 재정의)\r\n\r\n  - 하나의 class 내에서\r\n  - parameter 의 type 이나 순서를 다르게\r\n  ex) 여러개의 생성자\r\n\r\n *  Overriding(매쏘드 다중 정의)\r\n\r\n  - 상하위 class 간에\r\n  - 동일한 시그니처(매개변수 순서나 타입)', '', '', 11, 0),
(100, '', '서대영', '', '2007-12-17 00:31:04', 'Java', '배열', '# 동일 성격의 data을 하나의 이름으로 묶은 객체\r\n\r\n# reference 변스로 취급 ★\r\n\r\nex) \r\n\r\n* 기본 데이터 타입\r\n\r\nint a[]; a = new int[2]; a[0] = 10; a[1] = 20;\r\n\r\n* 클래스 타입\r\n\r\nA a[]; a = new A[2]; a[0] = new A(); a[1] = new A();\r\n\r\n* 선언과 동시에 초기화\r\n\r\nint a[] = {10, 20};', '', '', 4, 0),
(101, '', '서대영', '', '2007-12-17 21:17:05', 'Java', 'package', '# 파일 시스템의 Directory와 유사한 개념\r\n\r\n# 관계되는 class 들 끼리 묶어 놓자\r\n\r\n# 동일 package 내의 class들만 서로 사용 가능함\r\n\r\n* import 구문을 이용해서 다른 package의 class를 사용 가능함\r\n* java.lang 은 자동으로 import된다.\r\n\r\n# convention (관습)\r\n\r\n* java, javax 는 java 표준 클래스들\r\n* URL 역순으로 쓴다\r\n- com.java.~\r\n- com.sds.~\r\n\r\n# 필수 패키지\r\n\r\n* java.lang\r\n* java.io\r\n* java.util', '', '', 0, 0),
(102, '', '서대영', '', '2007-12-18 11:06:29', 'Java', '접근제한자', '# 용도\r\n\r\n* 캡슐화 : 공개할 부분과 비공개할 부분을 나눌 수 있음.\r\n* 유지보수성 향상 : 클래스 내용 변경이 용이.\r\n\r\n\r\n# 종류\r\n\r\n* public : 외부 패키지까지 모든 클래스\r\n* protected : 외부 패키지라도 상속받고 있다면 OK\r\n* package : 같은 패키지 내에서만\r\n* private : 해당 클래스\r\n\r\n※ 클래스는 public과 package 두 종류 밖에 없음.', '', '', 5, 0),
(103, '', '서대영', '', '2007-12-18 11:11:36', 'Java', 'StringBuffer 클래스 매서드', ' \r\n   append \r\n  prototype StringBuffer append( TYPE data ) \r\n예제 StringBuffer stb = new StringBuffer("hello");\r\nstb.append("world"); \r\n설명 TYPE으로 올 수 있는 것은 Primitive Data Type들과 char[],\r\nString, Object type이 올 수 있고 StringBuffer object가\r\n갖고 있는 문자열 뒤에 매개변수로 넘어온 data를 문자열로\r\n바꾸어 추가시킵니다. \r\n \r\n \r\n insert \r\n  prototype StringBuffer insert( int offset, TYPE data ) \r\n예제 StringBuffer stb = new StringBuffer("java");\r\nstb.insert(2, "new "); \r\n설명 TYPE으로 올 수 있는 것은 Primitive Data Type들과 char[],\r\nString, Object type이 올 수 있고 첫번째 매개변수인\r\noffset 위치에 두번째 매개변수로 넘겨진 data를 문자열로\r\n바꾸어 삽입합니다. \r\n \r\n \r\n setCharAt \r\n  prototype void setCharAt(int index, char ch) \r\n예제 StringBuffer stb = new StringBuffer("scjp");\r\nstb.setCharAt(3, ''d''); \r\n설명 첫번째 매개변수인 index번째 위치한 문자를 두번째 매개변수로\r\n넘긴 문자로 치환해 버립니다. \r\n \r\n \r\n toString \r\n  prototype Stirng toString() \r\n예제 StringBuffer stb = new StringBuffer("hello");\r\nString res = stb.toString(); \r\n설명 StringBuffer object가 갖고 있는 문자열을 String object로\r\nreturn 합니다. \r\n \r\n \r\n length \r\n  prototype int length() \r\n예제 StringBuffer stb = new StringBuffer("hello");\r\nint len = stb.length(); \r\n설명 현재 StringBuffer object가 갖고 있는 문자열의\r\nchar count(길이)를 return 합니다. \r\n \r\n \r\n capacity \r\n  prototype int capacity() \r\n예제 StringBuffer stb = new StringBuffer("hello");\r\nint cap = stb.cacacity(); \r\n설명 현재 StringBuffer object가 갖고 있는 문자열이 들어갈 수\r\n있는 buffer의 크기를 return 합니다. \r\n \r\n \r\n setLength \r\n  prototype void setLength( int newlength ) \r\n예제 StringBuffer stb = new StringBuffer\r\n("hello world");\r\nstb.setLength( 5 ); \r\n설명 String이 들어갈 수 있는 buffer의 길이를 변경시켜 줍니다.\r\n이 때 만약 현재 자신이 갖고 있는 buffer의 길이보다\r\nnewlength가 짧으면 이미 가지고 있던 buffer의 길이가\r\n줄어들어 문자열이 짤리게 될 수도 있고 더 길면 메모리가\r\n더 할당되고 나머지는 null char가 초기값으로 지정됩니다. \r\n \r\n \r\n', '', '', 5, 0),
(104, '', '서대영', '', '2007-12-18 11:32:11', 'Java', '메모리 (스택과 힙)', '# 스택\r\n\r\n* 매서드, 매개변수, 지역변수\r\n* 맨 상단이 현재 실행중인 매서드\r\n\r\n# 힙\r\n\r\n* 참조자료형 : 객체(맴버 변수), 배열, static 변수 \r\n\r\n# Garbage Collection\r\n\r\n* 스택에 있는 변수로 부터 가르킴을 당하지 않는 힙 내에있는 메모리공간을 삭제\r\n* System.gc() 매소드를 통해 우선순위로 높여서 인위적으로 실행시킬 수 있음\r\n또는\r\nRuntime run = Runtime.getRuntime();\r\nrun.gc();\r\n\r\n-----------------------------------------------------------\r\n앞서 언급한 것처럼 Garbage Collection은 Garbage Collector 라는 thread에 의해\r\n이루어지는 것입니다.\r\n그런데 thread라는 속성 자체가 언제 동작될지는 딱 보장할 수 없는 것이지요.\r\n앞에서 프로세스의 idle time에 Garbage Collector thread가 실행된다고 했듯이,\r\n프로세서의 스케쥴에 따라 thread의 동작 시점이 결정될 것입니다. \r\n \r\n  특히 자바의 Garbage Collector thread는 다른 thread를 방해 하지 않기 위해서,\r\n프로세서를 차지하여 실행될 수 있는 우선순위를 매우 낮게 설정해 놓았답니다.\r\n(물론 메모리가 절대 부족한 상황에서는 그 우선순위가 제일 높아지겠지만요.) \r\n\r\n\r\n\r\n', '', '', 9, 0),
(105, '', '서대영', '', '2007-12-18 11:33:22', 'Java', '매개변수 전달', '# 기본자료형\r\n\r\n * 값이 그대로 복사되기 때문에 값이 바뀌더라도 서로 영향 X\r\n\r\n# 참조자료형\r\n\r\n * 값이 저장되어 있는 주소값이 복사되기 때문에 서로 값을 공유', '', '', 1, 0),
(106, '', '서대영', '', '2007-12-19 11:18:15', 'Java', '상속', '★ 가장 중요한 것!!\r\n\r\n자식 인스턴스를 부모 타입 변수로 가리키면,\r\n부모의 필드, 자식의 메서드가 실행된다.\r\nParent child = new Child();\r\nchild.filed; => 부모의 필드\r\nchild.method(); => 자식의 메서드\r\n\r\n자식의 필드를 오버라이딩 하더라도 덮어쓰는게 아니다.\r\nHeap 영역에 각 각 따로 존재하기 때문에\r\n가리키는 타입이 무엇인가에 따라 다른 필드값이 나온다.\r\n하지만 메서드는 일단 오버라이딩하면 부모 타입으로 가르키든 자식 타입으로 가리키든\r\n무조건 자식 타입이 실행된다.\r\n\r\n\r\n# 개념\r\n\r\n* 슈퍼 클래스의 모든 맴버를 서브 클래스로 복사해놓은 거나 마찬가지\r\n* 아버지 돈은 모두 아들 돈\r\n* 하위 클래스 is a 상위 클래스\r\n\r\n# 필요성\r\n\r\n* 재사용성 (소스코드의 재사용)\r\n* 유지보수성 (다형상)\r\n\r\n# 상속되지 않는 것\r\n\r\n* private 변수\r\n* 오버라이드 매서드\r\n* 생성자\r\n\r\n□ 문법\r\n\r\nclass A {변수, 메서드 }\r\nclass B {A변수와 메서드 필요 \r\n+ B추가 변수와 메서드}\r\n==>B 클래스 일부 요소와 A클래스 모든 요소\r\n중복 정의\r\n\r\nclass A{변수, 메서드 }\r\nclass B extends A{(A자동포함)\r\n        B추가 변수와 메서드}\r\n\r\nclass 사람{밥먹다(), 잠자다()}\r\nclass 회사원 extends 사람{일하다()}\r\n\r\n회사원은 사람 이다(is a)\r\n==>상속 표현\r\n==>중복 정의 제거 \r\n\r\n\r\n\r\n* extends 키워드 사용\r\n* 다중 상속 지원 안 함\r\n\r\n□ 정리\r\n\r\nParent 가 메소드를 a(), b(), c()\r\n\r\nChild가 메소드를 c(), d()\r\n\r\nParent p01 = new Parent();\r\np01레퍼런스변수는 a(), b(), c() 메소드를 이용한다.\r\n\r\nChild c01 = new Child();\r\nc01레퍼런스변수는 a(), b(), c() [Child], d()\r\n\r\nParent p02 = new Child();\r\np02레퍼런스변수는 a(), b(), c() [Child]\r\n\r\n\r\n\r\n============================== FILE ==============================\r\nInheretanceExample.zip', '', 'InheretanceExample.zip', 13, 0),
(113, '', '서대영', '', '2007-12-21 11:16:10', 'Java', '인터페이스 (Interface)', '★ 구현하는 클래스들의 메서드 스펙을 똑같이 하기 위해서\r\n\r\n인터페이스(interface)\r\n: 메서드 구현부가 없는 특수한 형태의 클래스\r\ninterface 탈것 {\r\n타기();\r\n}\r\n\r\ndb 종류마다 방법이 다르다\r\n = db 호출 라이브러리 모두 다르다\r\n\r\ninterface dbConnect{\r\n conn();\r\n}\r\n\r\nclass OracleDB implements dbConnect {\r\n conn(){Oracle 관련 ... 오버라이딩}\r\n}\r\n\r\nclass DB2DB implements dbConnect{\r\n conn(){ DB2관련 ... 오버라이딩}\r\n}\r\n\r\nclass SqlServerDB implements dbConnect{\r\n conn(){SqlServer 관련 ... 오버라이딩}\r\n}\r\n\r\n\r\n# 하위 클래스의 동작방법이 일정하지 않을 때, 인터페이스에서 선언만 해두고 하위 클래스에서 각 각 오버라이딩.\r\n\r\n# 서로 다른 여러개의 클래스가 존재하는데 공통으로 같은 기능을 구현이 필요하면서 기능 구현 방법 다를 때..\r\n\r\n# 공통 기능 명세서 제공, 스펙 제공, 강제성. \r\nex) Sun사는 인터페이스만 만들고 DB vendor들에게 그 기능들을 구현하도록 강제.\r\n\r\n# 모든 method가 추상, 상수화 변수 밖에 못가짐\r\n\r\n# 클래스의 커뮤니케이션 수단\r\n\r\n# interface를 구현하는 클래스는 inteface 내의 모든 추상 method를 구현해야 함.\r\n\r\n# implements 라는 예약어 사용\r\n\r\n# -able 이라는 이름이 많이 붙음. is a 관계 가질 수 없을 때.\r\n\r\n# 특정적인 클래스가 아니라, 어떤 능력만 가진 개념.\r\n\r\n□ 특이사항\r\n\r\n- 필드 앞에는 암묵적으로 static 키워드 삽입\r\n- 메서드 앞에는 암묵적으로 abstract 키워드 삽입', '', '', 13, 0),
(107, '', '서대영', '', '2007-12-19 11:37:18', 'Java', 'super', '※ this : 상위 클래스를 가르키는 객체 참조값\r\n\r\n# super();\r\n\r\n* 하위 생성자 내에서 상위 생성자 호출\r\n* 가장 첫 줄, this랑 같이 쓰일 수 없음\r\n* 작성하지 않았다면 default로 추가됨 -> 모든 클래스에서 Object 클래스의 맴버를 사용할 수 있는 이유★\r\n\r\n# super.method();\r\n\r\n* 하위 클래스의 method 내에서 상위 클래스의 method를 호출\r\n\r\n# b1.b(this)\r\n\r\n* 현재 객체 자체를 b1 클래스의 b 매서드의 매개변수로 사용\r\n', '', '', 1, 0),
(109, '', '서대영', '', '2007-12-19 19:59:40', 'Java', '유용한 API', '# Interger 클래스\r\n\r\n* public static String toString(int i) : i를 문자로 치환', '', '', 1, 0),
(112, '', '서대영', '', '2007-12-21 11:05:11', 'Java', '추상클래스 (Abstract Class)', '# 추상 메쏘드 : 선언 부만 있고 구현 부는 없는 매써드.\r\n\r\n# 특징\r\n\r\n * 일반 클래스 맴버에 추상 메쏘드가 추가 되어 구성됨\r\n * 객체 생성 불가\r\n\r\n# 용도 : 하위 클래스에게 특정 매써드의 오버라이드를 강제하기 위해서 ★\r\n\r\n# 활용 : 하위 클래스들이 공통 행위를 가지고 있으나 그 행위의 내부 처리 방식이 다를 경우.', '', '', 4, 0),
(110, '', '서대영', '', '2007-12-20 13:12:14', 'Java', 'final 키워드 - The final modifier', '# class\r\n \r\n* 상속 불가\r\n\r\n# method\r\n\r\n* overriding 불가\r\n\r\n# variable\r\n\r\n* 상수화 변수\r\n* 그냥 final 이면 그 인스턴스 내에서 상수이고,\r\n* static final 이면 그 클래스 전체에서 상수이다.\r\n\r\n\r\n==================================================================================================================================\r\nThe final Modifier\r\nA variable that is declared with the final modifier can be initialized as part of that declaration, but can never again be assigned a new value. If it is a base type, then it is a constant. If a reference variable is final, then it will always refer to the same object (even if that object changes its internal state). If a member variable of a class is declared as final, it will typically be declared as static as well, because it would be unnecessarily wasteful to have every instance store the identical value when that value can be shared by the entire class.\r\nDesignating a method or an entire class as final has a completely different consequence, only relevant in the context of inheritance. A final method cannot be overridden by a subclass, and a final class cannot even be subclassed.', NULL, '', 4, 0),
(111, '', '서대영', '', '2007-12-21 10:54:09', 'Java', '다형성 (Polymolphism)', '# 정의\r\n\r\n* 여러 하위 객체를 한 상위 타입으로 사용\r\n\r\n# 장점 \r\n\r\n* 이용자 입장에서 행위 내부는 신경안쓰고 같은 타입으로 여러 객체를 사용\r\n\r\n# 유지보수성 ★\r\n\r\n* 상위 타입으로서 하위 타입을 컨트롤\r\n\r\n# Overriding\r\n\r\n* 상위 클래스의 매서드를 하위 클르래스에서 같은 이름으로 재작성\r\n* 행위의 개념은 같으나 세부 동작이 틀림\r\n* return type, method name, parameters가 완전 동일해야 함\r\n\r\n# 형변환 ★\r\n\r\nA { a();}\r\nB { a(); b();}\r\n\r\nA a1 = new B(); => OK\r\na1.a(); => B클래스의 오버라이드된 매써드 호출\r\na1.b(); => 컴파일 에러. a1은 A 타입 객체이므로 b() 매서드를 실행 못 시킴\r\n\r\n\r\n', '', '', 5, 0),
(114, '', '서대영', '', '2007-12-24 10:28:07', 'DB', 'DBMS', '# 장점\r\n\r\n* 데이터의 공용\r\n* 데이터 중복 최소화\r\n* 일관성 유지\r\n* 무결성 유지\r\n* 보안 보장\r\n* 표준화 용이\r\n* 전체 데이터 요구의 조정\r\n\r\n# 단점\r\n\r\n * 비용\r\n * 프로그램 복잡화\r\n * 성능상의 오버헤드', '', '', 7, 0),
(115, '', '서대영', '', '2007-12-24 11:02:09', 'DB', '관계형(Relational) 모델', '# 데이터베이스(Database) : Realtion의 집합\r\n\r\n# 릴레이션(Relation) : file, table\r\n\r\n# 튜플(Tuper) : record, row\r\n\r\n# 애트리뷰트(Attribute) : field, column\r\n\r\n# 도메인(Domain) : 특정 Attribute가 가질 수 있는 값의 집합\r\n\r\n# 기본키(Primary Key) : 튜플을 구분하기 위한 유일한 하나 이상의 애트리뷰트(널X)\r\n\r\n * 개체 무결성 (Entitiy Integrity) : 기본키으 값은 Null이 될 수 없다.\r\n\r\n# 왜래키(Foreign Key) : 기본키를 참조하는 애트리뷰트\r\n\r\n * 참조 무결성(Referential Integrity) : 외래키의 값은 참조된 릴레이션의 기본키 값이거나 Null이다.', '', '', 6, 0),
(116, '', '서대영', '', '2007-12-24 11:49:59', 'SQL', 'SELECT Statments', '■ Definition\r\nA SELECT statement retrieves information form the database.\r\n\r\n■ Syntax\r\nSELECT * | { [DISTINCT] column | expression [AS alias], ... } \r\nFROM table\r\n[WHERE condition(s)]\r\n[ORDER BY {column, expr, numeric_position} [ASC | DESC]];\r\n\r\n■ Excuting Order\r\n① FROM\r\n② WHERE\r\n③ GROUP BY\r\n④ HAVING\r\n⑤ SELECT\r\n⑥ ORDER BY\r\n\r\n∴ aliases in SELECT clause can''t be recognized in WHERE caluse \r\n\r\n- 표기 순서\r\n\r\nselect [distinct] 컬럼명, 함수명(내장/사용자정의함수), *\r\nfrom 테이블명\r\n[where 조회조건식(update, delete 동일)]\r\n[group by 그룹함수 그룹화할 컬럼명]\r\n[having 그룹함수 결과식 조건식]\r\n[order by 정렬컬럼명 [desc]]\r\n\r\n- 실행 순서\r\n\r\nfrom \r\nwhere\r\ngroup by\r\nhaving\r\nselect\r\norder by\r\n\r\n\r\n* projection(열선택), selection(행선택), join, calculate 를 담당\r\n\r\n■ Column Alias\r\n- Requires double quotation marks if it contains spaces or special charecters or if it is case sensitive.\r\n- ex) SELECT last_name AS "Last Name"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n------------------------------------------------------------\r\n\r\nSELECT절과 FROM절은 반드시 있어야 함.\r\n\r\n[WHERE       condition]\r\n\r\n[GROUP BY  group_by_expression]\r\n\r\n[HAVING      group_condition]\r\n\r\n[ORDER BY  column]\r\n\r\n은 선택적으로 사용가능, 위 형식의 대괄호[]로 표시된 형식은 생략가능\r\n\r\n \r\n\r\n ■ DISTINCT : 중복되는 행을 제거하는 옵션입니다.\r\n ■ *            :  테이블의 모든 column을 출력 합니다. \r\n ■ alias       :  해당 column에 대해서 다른 이름을 부여할 때 사용합니다. \r\n ■ table_name :  질의 대상 테이블명\r\n ■ WHERE    :   조건을 만족하는 행들만 검색\r\n ■ condition :  column, 표현식, 상수 및 비교 연산자\r\n ■ ORDER BY :   질의 결과 정렬을 위한 옵션(ASC:오름차순(Default),DESC내림차순)\r\n\r\n \r\n\r\n--작성규칙--\r\n\r\n1. SQL명령문에서는 대소문자를 구분하지 않음.\r\n\r\n   키워드는 대문자, 테이블 이름, 칼럼 이름은 소문자 권장\r\n\r\n2. 절은 가능한 줄을 구분하여 작성, 들여쓰기 사용으로 읽기 쉽도록 함\r\n\r\n3. SQL문 마지막에  ;를 입력하여 문이 끝남을 알림\r\n\r\n4. 가장 최근 명령어가 1개가 SQL Buffer에 저장됨\r\n[출처] SELECT문의 형식 및 사용|작성자 모험이\r\n\r\n\r\n', '', '', 30, 0),
(117, '', '서대영', '', '2007-12-28 22:34:08', 'Java', '자료구조', '# Collection\r\n\r\n* 동적 자료구조\r\n* Object 타입으로 저장하므로 기초 데이터 타입은 Wrapper 필요\r\n* Object 타입으로 추출하므로 캐스팅 필요\r\n\r\n1. List\r\n\r\n- Vector, ArrayList\r\n- index로 접근, 중복값 허용\r\n\r\n2. Map\r\n\r\n- HashTable, HashMap\r\n- key갑승로 접금, 중복 허용\r\n\r\n3. Set\r\n\r\n- HashSet\r\n- 중복 허용 X\r\n\r\n※ ArrayList, HashMap 권장\r\n\r\n# 배열\r\n\r\n* 정적 자료구조\r\n* size 고정\r\n* 기초 데이터 타입 가능\r\n\r\n# Emulation, Iteratior\r\n\r\n* Collecton 타입의 종류에 상관없이 동일한 인터페이스로 편리하게 사용', '', '', 5, 0),
(118, '', '서대영', '', '2007-12-28 22:37:52', 'DB', 'JOIN', '# INNER JOIN\r\n\r\n* SELECT * FROM t1 JOIN t2 USING (c);\r\n* SELECT * FROM t1 JOIN t2 ON t1.c = t2.c;\r\n* SELECT * FROM t1, t2 WHERE t1.c = t2.c;\r\n* 양 테이블의 널 값은 제외 시킴\r\n\r\n# LEFT OUTER JOIN\r\n : 왼쪽 테이블의 모든 값이 조회\r\n   오른쪽 테이블에는 널값으로 조회\r\n\r\n* SELECT * FROM t1 LEFT OUTER JOIN t2 ON t1.c = t2.c;\r\n* SELECT * FROM t1, t2 WHERE t1.c = t2.c(+);\r\n* t2 테이블의 널값까지 출력\r\n\r\n# FULL OUTER JOIN\r\n\r\n* SELECT * FROM t1 LEFT OUTER JOIN t2 ON t1.c = t2.c;\r\n* SELECT * FROM t1, t2 WHERE t1.c(+) = t2.c(+);\r\n* 양 테이블의 널값까지 출력\r\n\r\n# SELF JOIN\r\n\r\n* 자기 자신의 테이블과 조인0\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/amnesty7?Redirect=Log&logNo=30039046478', 'http://blog.naver.com/amnesty7?Redirect=Log&logNo=30039046478', '', 22, 0),
(119, '', '서대영', '', '2007-12-28 22:54:20', 'DB', '집계함수(aggregation)', '# 수학 함수 외의 컬럼은 반드시 GROUP BY 절로 묶어야 함\r\n\r\n# aggregation 이 후에는 Having 절을 사용하여 조건을 나타냄', '', '', 4, 0),
(120, '', '서대영', '', '2007-12-29 09:54:09', 'Java', 'IO', '# byte 단위\r\n\r\n* InputStream\r\n* OutputStream\r\n\r\n# 문자 단위\r\n\r\n* Reader\r\n* Writer\r\n\r\n# 콘솔화면에서 키보드 한줄 씩 입력 받기\r\n\r\nBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\r\nString name = kb.readLine();\r\n\r\n* System.in : 표준입력장치(키보드)로 부터 바이트 입력을 받음\r\n* InputStreamReader : 비이트 단위가 아니라 문자 단위로 입력을 받음\r\n* BufferedReader : 문자 단위가 아니라 한 줄 단위로 입력을 받음\r\n\r\n# 파일에 쓰기\r\n\r\nPrintWriter pw = new PrintWriter(new FileWriter("c:tempphone.txt"));\r\n\r\npw.println(name);\r\npw.close();\r\n\r\n# 파일을 읽기\r\n\r\nBufferedReader br = new BufferedReader(new FileReader("c:tempphone.txt"));\r\n\r\nString content = br.readLine();\r\n\r\n\r\n		for (String line; (line = reader.readLine()) != null; ) {\r\n			System.out.println(line);\r\n		}\r\n\r\n\r\n\r\nbr.close();\r\n\r\n\r\n# InputStream/OutputStream 과 Reader/Writer 의 차이\r\n\r\nCopyCharacters is very similar to CopyBytes. The most important difference is that CopyCharacters uses FileReader and FileWriter for input and output in place of FileInputStream and FileOutputStream. Notice that both CopyBytes and CopyCharacters use an int variable to read to and write from. However, in CopyCharacters, the int variable holds a character value in its last 16 bits; in CopyBytes, the int variable holds a byte value in its last 8 bits.\r\n\r\n=> 읽고 쓰는 비트의 수의 차이 밖에 없음', '', '', 42, 0),
(121, '', '서대영', '', '2007-12-29 23:24:03', 'JDBC', 'JDBC 코딩 순서', '□ 이용단계\r\n \r\n1. DB 연결\r\n\r\nClass.forName("oracle.jdbc.driver.OracleDriver");\r\n// oracle.jdbc.driver.OracleDriver 클래스의 임포트 후 객체까지 생성 (클래스 동적 바인딩)\r\nString url = "jdbc:oracle:thin:@localhost:1521:xe";\r\nString user = "hr";\r\nString password = "hr";\r\nConnection con = DriverManager.getConnection(url, user, password);\r\n// oracle.jdbc.driver.OracleDriver 클래스의 스태틱 변수\r\n\r\n2. SQL 전송\r\n\r\n1) Statement stmt = con.createStatement();\r\n2) PreparedStatement pstmt = con.preparedStatement(insert into emp values(?, ?, ?);\r\n\r\n3. SQL 결과 검색\r\n\r\nResultSet rs = stmt.excuteQuery("Select no, id from emp");\r\nint rc = stmt.excuteUpdate("insert / update / delte");\r\n\r\n4. 결과 이용\r\n\r\nrs.next()/previous()/first()/last()\r\n\r\nwhile(rs.next()) {\r\n\r\n  int no = rs.getInt(1);\r\n  String id = rs.getString("id");\r\n\r\n}\r\n\r\n5. DB 연결 해재\r\n\r\nrs.close();\r\nstmt.close();\r\ncon.close();\r\n\r\n\r\n# 주의사항\r\n\r\n* close로 닫으면 rs 객체를 사용할 수 없음', '', '', 64, 0),
(122, '', '서대영', '', '2007-12-30 10:03:40', 'Java', '문자열 <-> 숫자', 'int num = Integer.parseInt(str);\r\nString str = Integer.toString(num);  or  new Integer(num).toString();', '', '', 17, 0),
(123, '', '서대영', '', '2007-12-31 18:53:12', 'Java', '문자열 팁', '# 역순으로 바꾸기\r\nStringBuffer sb = new Stringbuffer(str).reverse();\r\n\r\n# 확장자 잘라내기\r\nname.substring(0, name.lastIndexOf(''.''))', '', '', 5, 0),
(124, '', '서대영', '', '2008-01-04 12:20:16', 'JavaScript', 'HTML 문서에 삽입법', '# HTML 문사에 직접\r\n\r\n<HTML>\r\n<HEAD>\r\n  <SCRIPT LANGUAGE="javascript">\r\n    ...\r\n  </SCIRPT>\r\n</HEAD>\r\n</HTML>\r\n\r\n# 링크\r\n\r\n<HTML>\r\n<HEAD>\r\n  <SCRIPT LANGUAGE="javascript" src="script.js"></SCIRPT>\r\n</HEAD>\r\n</HTML>', '', '', 2, 0),
(125, '', '서대영', '', '2008-01-04 12:22:09', 'JavaScript', '함수', 'function func_name(parameters) {\r\n\r\n  statements;\r\n\r\n  retrun expression;\r\n\r\n}\r\n\r\n※ 함수는 이벤트에 의해 호출된다.\r\n※ 변수 타입은 자동', '', '', 3, 0),
(126, '', '서대영', '', '2008-01-04 12:24:36', 'JavaScript', '특징', '# 스크립트 랭기지 (캄파일 과정없이 파싱)\r\n\r\n# 변수의 데이터 타입 지정 안함\r\n\r\n# 이벤트 기반(degvent-driven)\r\n\r\n# "+" 는 문자열에서는 연결\r\n\r\n# 디버그가 힘듬', '', '', 3, 0),
(127, '', '서대영', '', '2008-01-04 12:29:34', 'JavaScript', '이벤트(event)', 'onFocus : 초점 획득했을 때\r\nonBlur : 초점 상실했을 때\r\n\r\n\r\n* onClick = "a();"\r\n* onSubmit\r\n* on MouseOver\r\n* onChange\r\n* onLoad\r\n* onFocus\r\n* onFlow', '', '', 9, 0),
(128, '', '서대영', '', '2008-01-09 10:55:15', 'Java', '단축키', '* "System.out.pritln()" 자동 출력\r\n\r\n"sysout" + [Ctrl] + [space]\r\n\r\n* 자동 import & throws Exception\r\n\r\n[Ctrl] + [Shift] + o ', '', '', 2, 0),
(129, '', '서대영', '', '2008-01-09 11:04:27', 'Java', 'Eclipse Tip', '< Source 주메뉴 >\r\n\r\n* Generate Getters and Setters\r\n* Generate Constructor using Fields\r\n\r\n# Navigator View\r\n\r\n실제 폴더 구조를 볼 수 있음', '', '', 1, 0),
(130, '', '서대영', '', '2008-01-10 10:31:28', 'Java', '자동 오버로딩', '마우스 오른쪽 버튼 - [source] - overide/implement Method', '', '', 0, 0),
(131, '', '서대영', '', '2008-01-16 15:46:49', 'Java', '난수 생성', 'import java.util.*;\r\n\r\nRandom random = new Random();\r\n		\r\nint a = random.nextInt(9);\r\n\r\n// 0 에서 9 사이의 난수 생성\r\n\r\n--------------------------------------------\r\n\r\nMath.random() 함수 사용해도 됨\r\n\r\nint a = (int) (Math.random() * 10);\r\n\r\n			\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://mwultong.blogspot.com/2006/11/java-mathrandom-int.html', NULL, '', 19, 0),
(132, '', '서대영', '', '2008-01-21 19:25:43', 'DB', '유용한 쿼리', '* select *\r\nfrom user_tables\r\n : 모든 테이블 목록 보기\r\n\r\n* DESC table_name\r\n : 테이블 구조 보기\r\n\r\n* DESC sysdate FROM dummy;\r\n : 현재 날짜 출력', '', '', 11, 0),
(133, '', '서대영', '', '2008-01-22 15:57:29', 'Tomcat', '[이클립스] 톰켓 구성법', '1. 톰켓이 구동 중이라면 (우측 하단 트레이 확인) 중지 시킨다.\r\n\r\n2. [File] - [New] - [Project] : Web 폴더에서 Dynamic Web Project 선택\r\n\r\n3. Target Runtime : New 버튼 클릭 후 Apache 폴더에서 Apache Tomcat v5.5 선택\r\n\r\n4. Tomcat installation directory : C:/tomcat (톰켓을 설치해 놓은 경로)\r\n\r\n5. JRE : Installed JREs 버튼 클릭 후 원하는 JRE 버젼 선택\r\n\r\n6. 화면 하단 Server 탭 : 톰캣 서버 위에서 마우스 오른 쪽 버튼 New - Server를 선택 후 : [NEXT] 클릭 후 에 원하는 프로젝트 add 후 에 [Finish] 클릭\r\n\r\n7. JDBC 드라이버 파일 (ojdbc14.jar) 파일을 tomcat/common/lib 밑으로 복사 - intalled JREs를 통해 추가했다면 안해도 됨\r\n\r\n※ 이클립스로 톰켓을 구성하면 프로젝트가 Worksapce로 지정된 경로에 생성된다. 따라서 이클립스는 개발용으로만 사용하고 추 후 배포 시에는 jar 파일로 압축해서 톰켓의 webapps 폴더로 옮겨야 한다.\r\n\r\n※ 이클립스만 사용한다면 classpath 설정 등은 필요없다. web.xml은 잘 모름 ㅋ\r\n\r\n※ 포트번호를 바꾸려면 화면 하단 Server 텝에 있는 서브를 더블 클릭하면 된다.', '', '', 44, 0),
(134, '', '서대영', '', '2008-01-23 09:55:55', 'Eclipse', 'import 방법', '1. [File] - [import]\r\n\r\n2. General - FileSystem\r\n\r\n3. From directory에서 소스 src 폴더 선택\r\n\r\n4. Into directroy에서 데스터네이션 src 폴더 선택\r\n\r\n5. Options 에서 Create selected folders only\r\n', '', '', 7, 0),
(135, '', '서대영', '', '2008-01-23 10:22:32', 'JavaScript', '스크립트 디버거 사용법', '1. 그냥 설치\r\n\r\n2. 인터넷 익스플로러 [도구] - 인터넷옵션 - 고급탭\r\n\r\n3. 모든 스크립트 오류에 관련된 알림 표시 체크\r\n스크립트 디버깅 사용 안 함 언체크', '', '', 0, 0),
(136, '', '서대영', '', '2008-01-23 14:16:48', 'JavaScript', '숫자로 형변환', 'var num = Number(str);\r\nvar num = new Number(str);', '', '', 2, 0),
(137, '', '서대영', '', '2008-01-24 16:45:21', 'Network', '원격 PC의 하드드라이브 보기', '[시작] - [실행]\r\n\r\n\\\\70.12.114.160\\c$', '', '', 0, 0),
(138, '', '서대영', '', '2008-01-25 14:01:52', 'Tomcat', '콘솔에서 DB Connection Polling 설정', '1. starup.bat 실행\r\n\r\n2. http://localhost:8000\r\n\r\n3. Click on [Tomcat Administration]\r\n\r\n4. Clink on [Data Sources]\r\n\r\n5. Select [Create New Data Source]\r\n\r\n6. Set like below \r\n\r\n\r\n\r\n============================== FILE ==============================\r\nConnectionPooling.jpg', '', 'ConnectionPooling.jpg', 13, 0),
(139, '', '서대영', '', '2008-01-25 16:02:26', 'Java', '소스 문서화 하는 방법', '1. 각 클래스와 필드, 메서드에 주석을 단다.\r\n : 클래스나 필드, 메서드 위에 마우스를 놓고 마우스 오른쪽 버튼\r\n[Source] - [Generate Element Comment]\r\n\r\n2. 주메뉴 [Project] - [Generate Javadoc]\r\n\r\n3. 문서화할 Project 를 선택하고 Destination 폴더 선택\r\n\r\n4. 포함시킬 라이브러리 선택', '', '', 1, 0),
(140, '', '서대영', '', '2008-01-25 16:37:40', 'Eclipse', '[Plugin] Data Source Explorer 사용법', '이클립스에서 DB에 SQL문을 날려볼 수 있는 유용한 기본 플러긴\r\n\r\n\r\n\r\n※ 플러그인 설치 되어 있어야 함\r\n\r\n1. [perspective] - [other] - [Data] - [Database Explorer]\r\n\r\n2. [Connections] 에서 우클릭 [New Connection] \r\n\r\n3. 아래처럼 세팅\r\n\r\n4. Test.sqlpage 파일 만듬\r\n\r\n5. 쿼리를 타이핑 하고 블록을 잡고 우버튼 [RunSQL]\r\n\r\n\r\n------------------------ v3.4 -----------------------------\r\n\r\n1. 하단 [Data Sourse Explorer] 탭에서 마우스 우측 버튼 - [new] 버튼 클릭\r\n\r\n2. 나머지는 위에 비슷하게\r\n\r\n3. 원하는 프로젝트 위에서 마우스 우측 버튼 - [new] - [other] 버튼 클릭\r\n\r\n4. [SQL Develepment] 폴더 아래 [SQL File] 클릭\r\n\r\n5. SQL 쿼리 작성 (끝에 ; 없이) 후 [Excute]\r\n\r\n\r\n\r\n============================== FILE ==============================\r\nDatabaseExplorer.jpg', '', 'DatabaseExplorer.jpg', 21, 0),
(141, '', '서대영', '', '2008-03-01 00:45:20', 'SDS', '삼성SDS의 현재와 미래', '< SDS의 현재와 미래 >\r\n\r\n# IT 서비스 산업의 미래 - Virtual Value Net\r\n\r\n* 산업의 근간\r\n* 산업의 고도화\r\n* 산업의 창출\r\n\r\n# IT 서비스업의 특징\r\n\r\n* 지식기반\r\n* 고객 변화 관리 및 주도\r\n* 빠른 기술 변화 속도\r\n* 브랜드 파워가 핵심\r\n\r\n# IT 서비스 산업의 과제와 해결방안 - 서비스 사이언스\r\n\r\n* 생산성 - 자동화\r\n* 품질 - 표준화\r\n* 인적자원 관리 - 프로세스화\r\n\r\n# 유비쿼터스\r\n\r\n* 모든 기기가 언제 어디서나 자유롭게 통신망에 접속할 수 있는 환경\r\n* Any Device\r\n* Wireless - Anytime + Anywhere\r\n\r\n# 주요 연혁\r\n\r\n* 1985 설립\r\n* 2003 김인 사장 취임\r\n\r\n# 해외법인\r\n\r\n* 미국, 브라질, 영국, 중국, 싱가포르\r\n\r\n# Vision\r\n\r\n* 고객 선도 능력 기반의 통합 IT서비스 기업으로서 유비쿼터스 세상의 창조자\r\n* Thought Leadership Based Integrated IT Service Provider\r\n\r\n# Goal\r\n\r\n* 2010sus Global Top 10 Premier IT서비스 기업\r\n\r\n# Brand Slogan\r\n\r\n* U-creator\r\n* U dream, we create.\r\n\r\n# 비젼 달성 로드맵\r\n\r\n* -04 정비기\r\n* 05 - 07 역량강화기\r\n* 08 도약기\r\n\r\n# 경영기조 - 낙타정신\r\n\r\n* Courageous\r\n* Adaptive\r\n* Mature\r\n* Energetic\r\n* Loyal\r\n\r\n# 행동지침\r\n\r\n* 목표는 높게\r\n* 자세는 ''낙타정신''\r\n* 실행은 ''개방-공유-참여''', '', '', 2, 0),
(142, '', '서대영', '', '2008-03-01 01:52:26', 'SDS', '인사현황 및 제도', '# 조직 구성도 (11 본부)\r\n\r\n* 건설팅 본부\r\n* 영업 본부\r\n* 3S 본부\r\n* 전자 본부\r\n* IT인프라 본부\r\n* SD 본부\r\n* 생산성혁신본부\r\n* 정보기술연구소\r\n* 전략마케팅실\r\n* 경원지원실\r\n* 인력지원실\r\n\r\n# 직무 체계 (8 모듈)\r\n\r\n* 영업 / 마케팅\r\n* 컨설팅\r\n* IT아키텍쳐\r\n* IT관리\r\n* IT개발\r\n* IT운영\r\n* IT인프라\r\n* 경영지원\r\n\r\n# 평가종류\r\n\r\n* 역량평가 - 개인\r\n* 성과평가 - 조직\r\n\r\n# 평가자 : 부서장\r\n\r\n# 역량승격\r\n\r\n* Junior -Senior - Principal\r\n* CRB(Competency Review Board) 심사\r\n\r\n# 직급승격\r\n\r\n* 사원 - 선임 - 책임 - 수석보 - 수석', '', '', 1, 0),
(143, '', '서대영', '', '2008-03-01 02:08:19', 'SDS', '업의 본질과 일하는 방식', '# IT서비스업이란?\r\n\r\n* 전문적인 정보기술을 활용하여 일반기업이나 공공기관을 대상으로 정보화에 필요한 모든 서비스를 제공하는 업\r\n\r\n# IT서비서업의 본질\r\n\r\n* 정보시스템을 기획(Consulting), 구축(SI), 운영(SM)\r\n\r\n# IT서비스업의 특징\r\n\r\n* People Business\r\n* 기술 및 경기 민감도 낮음\r\n* 진입 장벽 높음\r\n\r\n# 업의 성공요소\r\n\r\n* 정확한 수요 에측 및 고객 관계 관리\r\n* 유연한 자원 운영 및 투명한 원가관리 체계\r\n* 철저한 위험관리\r\n* 표준화된 운영프로세스 및 협업\r\n* 지적 자신 재활용\r\n\r\n# 요구되는 전문성\r\n\r\n* 개별적 기술에 대한 IT 전문성\r\n* 고객이 속하는 업종에 대한 전문성\r\n\r\n# 6시그마\r\n\r\n* Define\r\n* Measure\r\n* Analyze\r\n* Improve\r\n* Contorl\r\n\r\n# OpenPlace\r\n\r\n* 협업 커뮤니티\r\n* Web 2.0', '', '', 1, 0),
(144, '', '서대영', '', '2008-03-02 13:24:05', 'Java', '배열 for 문 간단 버젼', '		int[] arr = {1, 2, 3, 4, 5, 6};\r\n		for (int a : arr) {\r\n			System.out.println(a);\r\n		}', '', '', 4, 0),
(145, '', '서대영', '', '2008-03-05 20:56:58', 'SDS', '원가의식', '', '', '', 1, 0),
(146, '', '서대영', '', '2008-03-05 21:18:07', 'SDS', '지식경영', '# 지식분류체계\r\n\r\n* 형식지 : 머리밖 - 방법론, Best Practice, 프로세스 산출물, IT 기술 지식, 시장/사업 지식 \r\n\r\n* 암묵지 : 머리속 - 지식 내트워크\r\n\r\n\r\n# 지식경영프로그램\r\n\r\n* Best Practice : 우수 사업 사례\r\n\r\n* 연구회\r\n\r\n* 싸이버컨설팅 : 네이버 지식인\r\n\r\n※ 아르 : 싸이버화폐\r\n\r\n\r\n# OpenPlace \r\n\r\n* 업무수행 서비스 - 업무 마당 홈 : 개인 업무\r\n\r\n* 커뮤니케이션 서비스 - 협업 커뮤니티 : 팀 커뮤니케이션\r\n\r\n* 지식 선순환 서비스 - 나의지식(아리샘)\r\n - BestPractice, 연구회, 사이버컨설팅에서 지식 검색\r\n - 부서 보관함 : 부서 미니홈피\r\n - DRM (Digital Right Menagement) : 대외비, 극비문서 암호화', '', '', 1, 0),
(147, '', '서대영', '', '2008-03-05 21:46:52', 'SDS', '보상체계 및 복리후생', '# 계약연봉 구성항목 ★\r\n\r\n* 기본급\r\n* 직무역량급\r\n* 성과급\r\n* 자가운전보조금\r\n* 설/추석 지급분\r\n\r\n# 연봉 외 보상항목\r\n\r\n* 상하반기 PI : 7, 1월, 0~150%\r\n* PS : 1월, 전사EVA * 20%\r\n* 연차수당\r\n* 식대보조금 : 65000\r\n\r\n# 휴가\r\n\r\n* 연차휴가 : 법적\r\n- 신입 : 1개월 개근시 1일\r\n- 시작 : 연간 15일\r\n- 2년 마다 +1 (한도 10일)\r\n\r\n* 리프레쉬 휴가 : 회사\r\n- 기본 : 8일\r\n- 5년마다 +1 (한도 4일)\r\n\r\n# 법정 복리 후생 ★\r\n\r\n* 건강보험 : 월소득의 5.8% / 2\r\n* 국민연금 : 월소득의 9.0% / 2\r\n* 고용보험 : 연봉 1.75%\r\n* 산재보험 : 전액 회사\r\n\r\n# 사내 복리 후생\r\n\r\n* 주택안정 : 주택대부, 기숙사, 사택\r\n* 건강보장 : 의료비, 건강검진\r\n* 재테크 : 마을금고\r\n* 여가생활 : 콘도, 캐리비언베이, 동호회\r\n* 노후생활 : 개인연금\r\n* 편의시설\r\n\r\n# 21세기협의회 ★\r\n\r\n* 노사협의회', '', '', 1, 0),
(148, '', '서대영', '', '2008-03-06 21:10:44', 'SDS', '제안', '# 제안\r\n\r\n* 의안을 내어 놓음.\r\n* 상대방의 행동 변혁을 통해 나의 목적을 이루기 위한 설득 커뮤니케이션 과정\r\n\r\n# 제안의 성공 요건\r\n\r\n* 고객의 진정한 니즈에 대한 답변\r\n* 사업자의 성공적 사업 수행 역량 강조\r\n* 경쟁사 대비 차별화\r\n\r\n# 고객의 결정 과정\r\n\r\n* 인지적 태도  : 인지 -> 지각\r\n* 정서적 태도 : 호감 -> 선호\r\n* 행동적 태도 : 확신 -> 결정\r\n\r\n# 제안을 위해 필요한 역량\r\n\r\n* Thinking\r\n* Writing\r\n* Presentation', '', '', 1, 0),
(149, '', '서대영', '', '2008-03-06 21:36:45', 'SDS', '양성제도 및 그린라이트', '# 의무 교육 시간\r\n\r\n* 사원 : 160시간 / 년 (집합 40시간)\r\n* 선임 - 수석 : 130시간 / 년 (집합 30시간)\r\n\r\n# 외국어 자격 제도\r\n\r\n* 필기 검정 : 년 6회, 년 2회 응시료 100% 지원\r\n* 회화 검정 : 년 5회, 년 2회 응시료 50% 지원\r\n\r\n# 역량개발계획을 위해 사용하는 시스템\r\n\r\n* My ProWay\r\n\r\n# 신입사원 양성체계\r\n\r\n* PreSTC -> SVP -> STC I -> STC II (그린라이트)\r\n\r\n# 그린라이트 제도\r\n\r\n* 신입사원 평가 유보 - 기본기 교육\r\n* 입사 후 9개월 간\r\n* 상위 5% 그린라이트 우수사원\r\n', '', '', 1, 0),
(150, '', '서대영', '', '2008-03-06 21:37:11', 'SDS', '6시그마', '# 6시그마 기본 방법론\r\n\r\n* DMAIC : Define, Measure, Analyze, Improve, Control\r\n- 기존 프로세스 개선\r\n* DMADOV(DFSS) : Define, Measure, Analyze, Design, Optimize, Verify \r\n- 새로운 프로세스 창조\r\n\r\n# SDS 자체 방법론\r\n\r\n- MFSS : Marketing for six sigma\r\n- SFSS : Sales ~\r\n- IFSS : Inovator ~\r\n\r\n# 6시그마로 좋아지는 것\r\n\r\n* 프로세스 개선\r\n* 내부역량강화\r\n* 재무성과 창출\r\n* 고객만족\r\n\r\n# 6시그마 전문인력\r\n\r\n* GB : Green Belt\r\n* BB : Black Belt\r\n* MBB : Mater Black Belt\r\n* 챔피언\r\n* FEA : Financial Effect Analyst\r\n\r\n# 6시그마 혁신의 흐름\r\n\r\n* 정비기 : 새는 물 막기\r\n* 역량강화기 : 그릇 키우기\r\n* 도약기 : 꿈 이루기\r\n\r\n# 시그마 2.0 추진체제\r\n\r\n* 내부 지향 -> 외부 지향\r\n* 관리, 안전 -> 도전, 창의\r\n* 전문인력, 전사 주도 -> 전원 참여, 현장 주도\r\n* 기본 강조 -> 실전 중시\r\n* 어려운 시그마 -> 쉬운 시그마\r\n\r\n\r\n', '', '', 2, 0),
(151, '', '서대영', '', '2008-03-08 15:35:57', 'Oracle', '콘솔 사용 시 버퍼 너비 설정', 'C:oraclexeapporacleproduct10.2.0serversqlplusadminglogin.sql\r\n\r\n파일에 \r\n\r\nSET LINESIZE 250을 아무데나 추가\r\n\r\n또는\r\n\r\n콘솔에 SET LINESIZE 250라고 침\r\n', '', '', 3, 0),
(210, '', '서대영', '', '2008-07-22 09:53:50', 'Eclipse', '[이클립스] jsp, html 파일 만들기', '1. 프로젝트의 WebContent 폴더 위에서 마우스 우측 버튼 [New] - [JSP] or [HTML] \r\n\r\n2. File Name 쓰고 [Finish] 클릭\r\n\r\n3. 소스 작성\r\n\r\n4. http://127.0.0.1:8080/프로젝트폴더명/파일명.확장자', '', '', 1, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(152, '', '서대영', '', '2008-03-09 01:29:13', 'Java', '문자열 함수', ' \r\n   length \r\n  prototype int  length()\r\n \r\n예제 int len = str.length(); \r\n설명 object의 문자열 길이를 return \r\n \r\n \r\n toUpperCase \r\n  prototype String  toUpperCase()\r\n \r\n예제 String res = str.toUpperCase(); \r\n설명 object의 문자열을 UpperCase로 바꾼 문자열을 갖는 새로운\r\nString object를 return \r\n \r\n \r\n toLowerCase \r\n  prototype String  toLowerCase()\r\n \r\n예제 String res = str.toLowerCase(); \r\n설명 object의 문자열을 LowerCase로 바꾼 문자열을 갖는 새로운\r\nString object를 return \r\n \r\n \r\n equals \r\n  prototype boolean  equals(Object)\r\n \r\n설명 object와 매개변수로 넘어온 object의 문자열이 같은지 비교.\r\n같으면 true를 return함. Object class에서 상속받은 equals를\r\n재정의함. \r\n \r\n \r\n equalsIgnoreCase \r\n  prototype boolean  equalsIgnoreCase(String)\r\n \r\n설명 object와 매개변수로 넘어온 object의 문자열이 같은지\r\n대소문자에 상관없이 비교. 같으면 true를 return함. \r\n \r\n \r\n chatAt \r\n  prototype char  chatAt(int)\r\n \r\n예제 char ch = str.charAt(1); \r\n설명 매개변수로 넘어온 integer 값에 지정된 문자를 return \r\n \r\n \r\n concat \r\n  prototype String  concat(String)\r\n \r\n예제 String res = str.concat("mer"); \r\n설명 object의 문자열 뒤에 매개변수로 넘어온 문자열을 붙인\r\n새로운 String object를 return \r\n \r\n \r\n indexOf \r\n  prototype int  indexOf(int  ch)\r\nint  indexOf(String  str)\r\n \r\n예제 int starti = str.indexOf("Pro"); \r\n설명 object의 문자열에서 매개변수로 넘어 오는 ch나 str이\r\n나타나는 첫번째 index를 return함.\r\n만약 없으면 -1을 return \r\nprototype int  indexOf(int  ch, int  fromIndex)\r\nint  indexOf(String  str ,int  fromIndex)\r\n\r\n\r\n\r\n* 여러 개의 단어가 포함되는 지...\r\n\r\nif ("|C550|C6A0|C780|C750|".indexOf(userVO.getCorpCode()) >0) {\r\n\r\n\r\n}\r\n\r\n\r\n\r\n \r\n설명 object의 문자열 중 fromIndex부터 비교 하여, 매개변수로\r\n넘어오는 ch나 str이 나타나는 첫번째 index를 return함.\r\n만약 없으면 -1을 return \r\n \r\n \r\n lastIndexOf \r\n  prototype int  lastIndexOf(int  ch)\r\nint  lastIndexOf(String  str)\r\n \r\n예제 int lasti = str.lastIndexOf("gra"); \r\n설명 매개변수로 넘어오는 ch나 str이 object의 문자열의 가장\r\n오른쪽에 처음 으로 나타나는 첫번째 index를 return함.\r\n만약 없으면 -1을 return \r\nprototype int  lastIndexOf(int  ch, int  fromIndex)\r\nint  lastIndexOf(String  str ,int  fromIndex)\r\n\r\n\r\n\r\n\r\n\r\n \r\n설명 매개변수로 넘어오는 ch나 str이 object의 문자열의\r\nfromIndex 이하부터로 해서 가장 오른쪽에 처음으로 나타나는\r\n첫번째 index를 return함. 만약 없으면 -1을 return \r\n \r\n \r\n substring \r\n  prototype String substring(int  beginIndex)\r\nString substring(int  beginIndex, int  endIndex)\r\n \r\n예제 String sub = str.substring(5, 8); \r\n설명 object의 문자열에서 beginIndex를 포함해서 끝까지\r\n또는 endIndex를 제외한 바로 앞까지의 문자열을\r\n새로운 String object로 return \r\n \r\n \r\n toString \r\n  prototype String  toString()\r\n \r\n설명 Object class의 toString이 override된 메소드임.\r\n새로운 String object를 return \r\n \r\n \r\n trim \r\n  prototype String  trim()\r\n \r\n예제 String newstr = "sample";\r\nString res = newstr.trim(); \r\n설명 object의 문자열의 양쪽 끝 white space를 제거한\r\n새로운 String object를 return \r\n \r\n \r\n \r\n  참고적으로 앞서 학습하며 보았던 valueOf 메소드는 \r\n \r\n  static String String.valueOf(TYPE) \r\n \r\n', '', '', 25, 0),
(190, '', '서대영', '', '2008-07-17 10:14:20', 'Oracle', '날짜 컨트롤', '□ 날짜 입력\r\n\r\nTO_DATE(''94/03/15 03:20:30'',''YY/MM/DD HH:MI:SS'')\r\n\r\n□ 날짜로 검색을 할 때는\r\n\r\n- 칼럼에 to_char() 함수를 이용하거나\r\nselect * from A where idx=''6'' and  to_char(time, ''yyyymm'') = ''200607''\r\n\r\n- 값에 to_date() 함수를 이용한다.\r\nselect * from A where idx=''6'' and  time = to_date(''200607'', ''yyyy-mm-dd'')\r\n\r\n\r\n□ 현재 시각으로 변경\r\n\r\nupdate board set date = sysdate', '', '', 11, 0),
(153, '', '서대영', '', '2008-03-09 14:25:01', 'JavaScript', 'Form 유효성 체크', '# 공통 자바스크립트\r\n\r\n<script type="text/javascript">\r\n  function validate() {\r\n    if(document.form.name.value = '''') {\r\n      alert(''이름은 필수 입력입니다'');\r\n      return false;\r\n    }\r\n    if(isNaN(document.form.phone.value)) {\r\n      alert(''전화번호는 숫자여야 합니다'');\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n</script>\r\n\r\n# 방법 1. 엔터와 클릭 모두 동작 (권장)\r\n\r\n<form name="form" onSubmit="return validate(this);">\r\n\r\n# 방법 2. 클릭에만 동작\r\n\r\n<input type="submit" value="확인" onClick="retrun validate(this.form);">\r\n\r\n\r\n\r\n\r\n\r\n\r\n★★★★★★★\r\n\r\n\r\n<input type = "button'' value="보내기" onClick = 함수명(this.form)>\r\n\r\n - onClick 이벤트로 함수를 호출 할 경우 <form> 을 함수의 인자값으로 넘겨주려면  this.form 의 형태로 넘겨 주어야 한다\r\n\r\n \r\n\r\n<form name="frmJumin" method="post" onSubmit="return checkJumin(this);" action="#">\r\n\r\n- onSubmit 형식으로 함수를 호출할 경우 함수명 앞에 "return" 을 명시해야 하며 form 을 인자값으로 넘겨줄 때도 this.form 이 아닌 this 만 명시해준다\r\n[출처] 16 . onClick=함수(this.form), onSubmit=ruturn 함수(this)|작성자 brmwjt\r\n\r\n', '', '', 29, 0),
(154, '', '서대영', '', '2008-03-12 11:18:03', 'Java', '깨지는 한글 인코딩', '	public static String getEncString(String str) {\r\n		String encStr = null;\r\n		\r\n		try {\r\n			if (str != null) \r\n				encStr = new String(str.getBytes("8859_1"), "KSC5601");\r\n		} catch (Exception e) {\r\n			System.out.println("addPost exception : " + e);\r\n		}\r\n		\r\n		return encStr;\r\n	}', '', '', 6, 0),
(155, '', '서대영', '', '2008-03-12 14:16:40', 'JavaScript', 'alert() confirm()', 'function htmlAlert(strMsg)\r\n\r\n{\r\n\r\n     alert(strMsg);\r\n\r\n     return;\r\n\r\n}\r\n\r\nfunction htmlConfirm(strMsg)\r\n\r\n{\r\n\r\n     if(confirm(strMsg)) return "YES";\r\n\r\n     else return "NO";\r\n\r\n     \r\n\r\n     return null;\r\n\r\n}\r\n', '', '', 15, 0),
(156, '', '서대영', '', '2008-03-13 09:29:13', 'Eclipse', '디버그 모드 사용법', 'F5 : 함수 안으로 들어가기\r\nF6 : 함수 밖으로 가기', '', '', 2, 0),
(157, '', '서대영', '', '2008-03-14 11:31:00', 'HTML', 'XMP 태그', '문서에 나타나 있는 그대로를 브라우저에 보여 줄 때 사용합니다. <PRE>태그와 다른 점은 <XMP> 태그 안의 다른 HTML 태그까지 보여 준다는 것입니다. ', '', '', 0, 0),
(158, '', '서대영', '', '2008-03-14 12:45:49', 'HTML', 'ⓒ', '&copy;\r\n\r\n\r\n\r\n Copyright(ⓒ) ', '', '', 0, 0),
(159, '', '서대영', '', '2008-03-14 13:20:51', 'HTML', '페이지 자동 이동', '<META http-equiv="refresh" content="초 단위 시간;URL=이동할 홈페이지 주소"> \r\n', '', '', 0, 0),
(160, '', '서대영', '', '2008-03-14 19:39:58', 'HTML', '파일전송 폼', '<INPUT type="file" name="항목 이름" accept="MIME형식">  \r\n\r\ntype  입력 양식의 형태를 결정합니다. 이 경우 "file"로 지정합니다. \r\nname 폼에서 입력 양식 항목에 이름을 정의하는 속성입니다. \r\naccept 수신할 수 있는 파일 형식을 지정하는 속성으로 여러 개인 경우는\r\n,(콤마)로 구분합니다. \r\n\r\n\r\n<HTML>\r\n<HEAD><TITLE>입력 양식</TITLE></HEAD>\r\n<BODY>\r\n<FORM action="a.php" method="get">\r\n전송할 파일을 입력하세요.<BR>\r\n<INPUT type="file" name="field01" accept="image/jpeg,image/gif"><P>\r\n</FORM>\r\n</BODY>\r\n</HTML> \r\n', '', '', 2, 0),
(161, '', '서대영', '', '2008-03-14 19:42:25', 'HTML', '여러 항목이 보이는 펼친 목록', '\r\n여러 개의 항목이 한번에 보이도록 지정하는 경우입니다. <SELECT>태그의 size 속성으로 \r\n보여지는 개수를 지정합니다. 이 경우도 기본 선택항목은 <OPTION>태그의 selected 속성으로\r\n선택할 수 있습니다. \r\n 형식 \r\n\r\n<SELECT size="목록 개수" name="항목명">\r\n<OPTION value="1">목록 1\r\n<OPTION value="2">목록 2\r\n<OPTION value="3" selected>목록 3\r\n<OPTION value="4">목록 4\r\n</SELECT>\r\n \r\n \r\n \r\n', '', '', 2, 0),
(162, '', '서대영', '', '2008-03-14 19:44:01', 'HTML', '글상자 태그', '홈페이지 안에 문자수의 제한 없이 여러 줄을 입력할 수 있는 글상자를 삽입하는 기능입니다. <TEXTAREA>태그를 사용하여 작성하고, 각각의 속성을 이용하여 효과를 지정할 수 있습니다. \r\n 형식 \r\n<TEXTAREA name="항목 이름" cols="한 행의 문자 수" rows="행 수"\r\nreadonly wrap> ~ </TEXTAREA> \r\n\r\nname 항목의 이름을 지정합니다. \r\ncols 한 행에 입력되는 문자수로 너비를 지정합니다.  \r\nrows 보여질 행 수를 입력합니다. \r\nreadonly 읽을 수만 있고, 입력하지 못하게 설정합니다. \r\nwrap 줄 바꾸기 방법을 지정합니다.\r\n     off : 줄바꿈 없습니다.\r\n     soft : 화면상에서만 줄바꿈 나타나고 송신되지는 않습니다.\r\n     hard : 화면상에 줄바꿈 나타나고 줄 바꿈 정보가 송신됩니다. \r\n \r\n \r\n \r\n', '', '', 7, 0),
(163, '', '서대영', '', '2008-03-14 19:47:17', 'HTML', 'LABEL 태그', '입력을 위한 양식과 옆에 있는 문자를 함께 반응하도록 설정하는 기능입니다. \r\n예를 들어 checkbox나 radio 버튼의 경우 옆의 문자만 클릭해도 선택이 되도록 하거나 입력을 위한 \r\n항목의 경우 옆에 입력된 문자만 클릭해도 커서가 나타나도록 하는 기능입니다.  \r\n 형식 \r\n<LABEL for="참조 id"> ~ </LABEL> \r\n \r\n \r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/kmoonki?Redirect=Log&logNo=20002760721', 'http://blog.naver.com/kmoonki?Redirect=Log&logNo=20002760721', '', 7, 0),
(164, '', '서대영', '', '2008-03-14 19:48:00', 'HTML', 'FIELDSET', '폼의 일부분을 그룹으로 지정하기 위해 사용하는 기능입니다. 이 경우 <FIELDSET> 태그로 \r\n그룹을 지정하고, <LEGEND>태그로 그룹의 이름을 지정할 수 있습니다. \r\n 형식 \r\n   \r\n \r\n \r\n', '', '', 9, 0),
(165, '', '서대영', '', '2008-05-05 23:08:54', 'PHP', 'PHP로 MVC구현_제1회', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/dusttin.do?Redirect=Log&logNo=12039320', 'http://blog.naver.com/dusttin.do?Redirect=Log&logNo=12039320', '', 1, 0),
(166, '', '서대영', '', '2008-05-05 23:09:41', 'PHP', 'PHP로 MVC구현_제2회', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/dusttin.do?Redirect=Log&logNo=12040202', 'http://blog.naver.com/dusttin.do?Redirect=Log&logNo=12040202', '', 1, 0),
(167, '', '서대영', '', '2008-06-25 11:47:36', 'JavaScript', 'select 폼 태그 컨트롤', '// 2008.06.23 서대영 사원 : reset 함수 추가\r\n\r\n	function page_reset() {\r\n		var form=document.frm_menu;\r\n		form.cdmodel.value = "";\r\n		form.bigcode2.text = "Select Path 1"; \r\n		form.bigcode2.value = "0"; \r\n		form.midcode2.text = "Select Path 2"; \r\n		form.midcode2.value = "0"; \r\n		form.smlcode2.text = "Select Path 3"; \r\n		form.smlcode2.value = "0"; \r\n		form.action = "ProductView.jsp";\r\n		form.submit();\r\n	}\r\n\r\n\r\n\r\n\r\n\r\n------------------------------------------------------------\r\n\r\n\r\n															<select name="bigcode2" style="width:140pt"\r\n																onchange="showchange()">\r\n																<option value="0">\r\n																	<font face=verdana color=darkblue>Select Path 1</font></option>\r\n																	<%\r\n																	for (int i = 0; i < productGroup.length; i++) {\r\n																	%>\r\n																\r\n																<option value="<%=productGroup[i].getCode_id()%>" <%if (bigcode2.equals(productGroup[i].getCode_id())){%>selected<%} %>>\r\n																	<span title="<%=productGroup[i].getCode_name()%>">\r\n																		<%=productGroup[i].getCode_name()%>\r\n																	</span></option>\r\n\r\n																	<%\r\n																	}\r\n																	%>\r\n																\r\n															</select>', '', '', 8, 0),
(168, '', '서대영', '', '2008-06-26 09:49:41', 'MySQL', 'MySQL 의 주요 SQL 문법', 'http://blog.naver.com/etwas0227?Redirect=Log&logNo=60021083919\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://kin.naver.com/open100/db_detail.php?d1id=1&dir_id=10110&eid=/C/etBG+MQ95vUQ3qegswpdZVEZyEe0R&qb=SU5TRVJUILmuuf0=&pid=fb7F7woQsD4ssvAg6o4sss--026468&sid=SGLnL1LOYkgAADiTHBE', 'http://kin.naver.com/open100/db_detail.php?d1id=1&dir_id=10110&eid=/C/etBG+MQ95vUQ3qegswpdZVEZyEe0R&qb=SU5TRVJUILmuuf0=&pid=fb7F7woQsD4ssvAg6o4sss--026468&sid=SGLnL1LOYkgAADiTHBE', '', 9, 0),
(169, '', '서대영', '', '2008-06-30 16:41:10', 'JSP', '인클루드, 임포트 하는 방법', '<%@ include file="경로" %>\r\n<%@ page import="경로" %>', '', '', 3, 0),
(170, '', '서대영', '', '2008-07-14 10:27:47', 'IT', '남의 컴퓨터 하드 접근', '\\\\70.12.115.130\\c$', '', '', 0, 0),
(171, '', '서대영', '', '2008-07-14 10:53:18', 'Oracle', 'sqlplus 유용한 명령어', '- 도스창에서 접속 (TNSNAME.ora 등록되어 있을 때)\r\nsqlplus 계정/암호@TNSNAME\r\nex) sqlplus MES_GUEST/ifdnsdud01@GMES_SEPM\r\n\r\n- 도스창에서 접속 (TNSNAME.ora 등록 안되어 있을 때)\r\nsqlplus login/pwd@//hostname:1521/sidname\r\nex) sqlplus MES_GUEST/ifdnsdud01@//106.116.82.72:1521/SEPMDA\r\n\r\nhttp://www.missiondata.com/blog/database/59/accessing-oracle-with-sqlplus-and-no-tnsnames/\r\n\r\n-계정정보 조회\r\nshow user;\r\n\r\n-pl/sql오류정보 조회\r\nshow errors;\r\n\r\n-계정 테이블 목록 조회\r\nselect * from tab;\r\n\r\n-테이블정보 조회\r\n(컬럼명, 타입, 길이)\r\ndesc[ribe] 테이블명;\r\n\r\n-이전입력명령어 조회&편집\r\ned[it] \r\n\r\n- sql 스크립트 파일 실행\r\nc:javaa.sql 파일 실행\r\n@ c:javaa \r\n\r\n- pl/sql블록 실행\r\nexec[ute] pl/sql블록이름;\r\n\r\n- sqlplus 변수 선언\r\nvar[iable] 변수명 변수타입;\r\n\r\n- 한페이지의 테이블 데이터 라인수 조정\r\nset pagesize 100;\r\n\r\n- 라인의 길이 조정\r\nset linesize 200;\r\n\r\n- 같은 쿼리 다시 수행\r\n/\r\n\r\n- 파일로 내보내기\r\nSET COLSEP ′,′\r\nSET PAGESIZE 0\r\nSET LINESIZE 120\r\n\r\nSpool C:EMP.csv\r\n\r\nSELECT * FROM EMP;\r\n\r\nSpool OFF', '', '', 20, 0),
(492, '', '서대영', '', '2009-01-15 14:39:27', 'Oracle', '[Object] Views', '■ Advantages\r\n- To make complex quries easy\r\n- To restrict data access\r\n- To provide data independence\r\n- To present different views of the same data\r\n\r\n■ Syntax\r\n- 생성\r\n CREATE [OR REPLACE] [FORCE] VIEW 뷰명 [(칼럼명들)]\r\n AS 서브쿼리\r\n ※ FORCE : 베이스테이블이 없어도 뷰만 생성\r\n- 소멸\r\n DROP VIEW 뷰명\r\n\r\n■ Option\r\n [WITH CHECK OPTION] : Those rows are accessible to the view can be inserted or updated\r\n ex) CREATE OR REPLACE VIEW empvu20\r\n      AS SELECT *\r\n      WHERE department_id = 20\r\n      WITH CHECK OPTION\r\n : 부서번호가 20번이 아니면 뷰를 통해 INSERT하거나 UPDATE가 불가능\r\n [WITH READ ONLY] : No DML can be performed on this view\r\n\r\n■ Note\r\n- 뷰는 오직 생성과 대체만 있지 수정할 수 없다.\r\n- 서브쿼리의 SELECT 절에 칼럼이 아닌 수식을 쓸 경우 그 수식에 alias를 주거나,\r\nCREATE VIEW 절의 칼럼명을 명시해준다.\r\n- 테이블의 멀티로우가 뷰에서 싱글로우로 표시된된다면 뷰에서 DELETE할 수 없다.\r\n(그룹함수, DISTINCT 키워드, ROWNUM 수도칼럼)\r\n- 위의 경우 포함 + 수식이 있는 경우 UPDATE할 수 없다.\r\n- 위의 경우 포함 + NOT NULL 칼럼이 베이스 테이블로 부터 뷰에 반영되지 않았을 때 뷰에서 INSERT할 수 없다. (MOT NULL 칼럼에 NULL 값을 할당하게 되기 때문)\r\n ', '', '', 2, 0),
(174, '', '서대영', '', '2008-07-14 11:43:26', 'DB', 'where 절 뒤의 연산자', '□ 문자열로 시작\r\n\r\n칼럼명 LIKE ''문자열%''\r\n\r\n□ 10 이상 20 이하\r\n\r\n칼럼명 between 10 and 20\r\n\r\n□ 3개의 문자열 중 하나\r\n\r\n칼럼명 in (''문자열1'', ''문자열2'', ''문자열3'')', '', '', 4, 0),
(175, '', '서대영', '', '2008-07-14 11:44:40', 'DB', 'TCL (Transaction Control Language)', '', '', '', 1, 0),
(176, '', '서대영', '', '2008-07-14 12:00:47', 'DB', '그룹함수', 'count(칼럼명)\r\nsum(칼럼명)\r\navg(칼럼명)\r\nmax(칼럼명)\r\nmin(칼럼명)', '', '', 3, 0),
(177, '', '서대영', '', '2008-07-14 13:34:20', 'DB', '제약조건', '□ 제약조건(파트 1, 6장 5절)\r\n1. primary key(not null + unique)\r\n2. not null\r\n3. unique\r\n4. check\r\n5. foreign key\r\n\r\n□ 기본키 지정\r\n\r\nCONSTRAINT 제약조건명 PRIMARY KEY (필드명)\r\n\r\nex) CONSTRAINT PK_BLOG PRIMARY KEY (BLOG_ID)\r\n\r\n□ 외래키 지정\r\n\r\nCONSTRAINT 제약조건명 FOREIGN KEY (참조하는필드명) REFERENCES 참조되는테이블명(참조되는필드명) ON DELETE CASCADE\r\n\r\nex) CONSTRAINT FK_BLOG_BLOG_ID FOREIGN KEY (BLOG_ID) REFERENCES BLOG_USER(USER_ID) ON DELETE CASCADE', '', '', 11, 0),
(178, '', '서대영', '', '2008-07-14 16:45:25', 'Java', '예외처리', '예외가 발생했을 때 프로그램이 바로 종료된다.\r\n이를 막기 위해서 try-catch문을 사용해서 예외처리를 하는 것이다.\r\nfinally블럭 안에서 미처 잡지 못한 예외가 있더라도 프로그램이 종료되지 않고 수행된다.\r\n\r\n\r\n□ 직접처리\r\n\r\n- 예외발생 메서드 내부 처리\r\n- try{\r\n 에외발생 가능성 문장\r\n} catch(예외클래스명 변수명){\r\n 예외발생시 수행문장[들]\r\n} finally {\r\n 예외 발생 유무, 예외 타입, 예외처리 유무와 관계없이 반드시 수행\r\n(예외 처리 안 해도 수행 ★)\r\n}\r\n\r\n\r\nclass Test {\r\n public static void main(String[] args) throws Exception {\r\n  try {\r\n   int i = Integer.parseInt(args[0]);\r\n   System.out.println(10 / i);\r\n  } catch(ArithmeticException e) {\r\n   System.err.println("0으로 나눔 오류");\r\n   System.out.println("0이 아닌 값을 입력하세요.");\r\n  } catch(NumberFormatException e) {\r\n   System.err.println("숫자 아님 오류");\r\n   System.out.println("정수 값을 입력하세요.");\r\n  } catch(ArrayIndexOutOfBoundsException e) {\r\n   System.err.println("배열 넘침 오류");\r\n   System.out.println("하나의 값을 입력하세요."); 		\r\n  } // try-catch\r\n } // main\r\n} // class\r\n\r\n- finally : 심지어 에러처리를 미처 못해 프로그램이 중단되더라도 실행된다!\r\n- 정수를 0으로 나누는 경우\r\nArithmeticException발생\r\n\r\n- 배열의 잘못된 인덱스 참조하는 경우\r\nArrayIndexOutOfBoundsExcepiton\r\n\r\n- 정수로 변경할 수 없는 문자열값 변경하는 경우\r\nNumberFormatException\r\n\r\n\r\n□ 간접처리\r\n\r\n-. 콜러가 좀 더 유연하게 에러처리를 할 수 있도록\r\n-. void m(int i){\r\n try{\r\n 10 / i;\r\n }catch(ArithmeticException e){a;}\r\n}-->직접처리(예외처리방법 지정 권한)\r\n\r\nvoid m1(){-->a\r\n m(0);\r\n}\r\n\r\nvoid m2(){-->a\r\n m(0);\r\n} \r\n\r\n-----------------------------------\r\nvoid m(int i) throws ArithmeticException{\r\n 10 / i;\r\n}\r\n\r\nm1(){\r\ntry{\r\n  m(0);\r\n}catch(ArithmeticException e){a+b; }  \r\n} \r\n\r\nm2(){\r\ntry{\r\n  m(0);\r\n}catch(ArithmeticException e){a+c; }  \r\n} \r\n\r\n\r\n□ 예외 종류\r\n\r\n-. Exception \r\n반드시 예외 처리 : compiler 체크 o\r\n-. RuntimeException \r\n필요시 예외 처리\r\n(jvm 자동 예외 처리 기능 : compiler 체크x)', '', '', 27, 0),
(179, '', '서대영', '', '2008-07-15 08:49:01', 'Oracle', 'Oracle 데이터 타입과 Java 데이터 타입의 상관 관계', 'varchar2(가변길이), char(고정길이)<-->String\r\nnumber(n) : 정수<--->int(byte, short, long)\r\nnumber(n, s): 실수<--->double(float)\r\ndate, timestamp<--->Date\r\n', '', '', 5, 0),
(180, '', '서대영', '', '2008-07-15 09:10:23', 'Java', 'Method Overriding', 'class 회사원 {일하다(), \r\n급여계산하다(){본봉 + 일반수당}}\r\n\r\nclass 임원 extends 회사원 {\r\n급여계산하다(){본봉 + 임원수당}\r\n}\r\n\r\n임원 클래스가 회사원 클래스 상속한 후에\r\n급여계산하다()의 재정의하여 변경.\r\n\r\n\r\n\r\n\r\nclass DBConnection{\r\n connect(){\r\n //db 이름 정보 구현\r\n }\r\n}\r\n\r\nclass OracleDBConnection \r\nextends DBConnection {\r\n connect(){\r\n //db 이름, ip, port, 계정, 암호 정보 구현\r\n }\r\n}', '', '', 2, 0),
(185, '', '서대영', '', '2008-07-16 11:14:19', 'JDBC', 'PreparedStatement 인터페이스', '□ 상속 관계\r\n\r\ninterface PreparedStatement extends Statement\r\n{Statement 상속 자동 포함 메서드\r\n executeXXXX():4종류 메서드\r\n추가 메서드:setxxxx()\r\n}\r\n\r\n□ 장점\r\n\r\n1. 반복 동일 sql : 구문분석(parsing)과 컴파일(compile)을 캐쉬해 놓음\r\n2. ''''  안붙여도 된다 ; sql문장ㄹ 포함x\r\n3. 파일처럼 긴 길이의 문자열 저장 편리\r\n4. 보안\r\n\r\n\r\n\r\n□ 주의사항\r\n\r\n* setter, getter 메서드를 사용할 때 index 번호는 1부터 시작한다.\r\n\r\n* 칼럼또는 테이블명을 ?로 놓을 수 없다. 오직 값만...\r\n\r\nselect 컬럼명\r\nfrom 테이블명\r\nwhere 컬럼명 연산자 ?\r\ngroup by 그룹화 컬럼명\r\nhaving  그룹함수 조건식  sum(salary) >= ?\r\norder by 정렬 컬럼명 \r\n\r\ninsert into 테이블명 values(?,?,?...)\r\n\r\nupdate 테이블명\r\nset 컬럼명 =?\r\nwhere  컬럼명 연산자 ?\r\n\r\ndelete 테이블명 where 컬럼명 연산자 ?', '', '', 10, 0),
(1029, '', '서대영', '', '2012-01-25 11:13:18', 'Jennifer', 'Jennifer Agent', '[ 설정 디렉토리 ]\r\ncd /bea/jennifer/agent\r\n\r\n* lwst.jdk.jar : Agent 라이브러리\r\n* 00.conf : Agent 별 설정파일\r\n\r\n[ 구동쉘 ]\r\n기존 와스 구동쉘 복사\r\ncd /bea/domains/portalDomain/bin/\r\ncp startWebLogic.sh startWebLogic_jenn.sh\r\n\r\n아래 내용 추가\r\n##################### jennifer set ####################################\r\nJENNIFER_HOME="/bea/jennifer/agent"\r\nJAVA_OPTIONS="${JAVA_OPTIONS} -Djennifer.config=${JENNIFER_HOME}/${JENNIFER_CONF} -javaagent:${JENNIFER_HOME}/lwst.javaagent.jar"\r\nJAVA_OPTIONS="${JAVA_OPTIONS} -Xbootclasspath/p:${JENNIFER_HOME}/lwst.boot.jar:${JENNIFER_HOME}/lwst.portal.jar:${JENNIFER_HOME}/jennifer.boot.jar"\r\n###########################################################################', '', '', 3, 0),
(182, '', '서대영', '', '2008-07-15 11:53:17', 'JDBC', 'JDBC 환경 설정', '□ 다운로드 경로\r\n\r\nwww.oracle.com\r\ndownload--> driver-->jdbc driver\r\n---> db버전 --> 9.2.0.1\r\n\r\n\r\n□ JDBC driver를 classpath에 등록 (for Console)\r\n\r\n- 콘솔창 사용시 JVM을 위해 JDBC driver 클래스의 포함 경로를 알려줌.\r\n\r\n- 시작-설정-제어판-시스템-고급탭-환경변수-사용자변수에 classpath 추가\r\nORACLE_HOME=D:/oraclexe/..../10.0\r\nCLASSPATH=.;%ORACLE_HOME%/jdbc/lib/ojdbc14.jar\r\n\r\n\r\n□ JDBC driver를 Bild Path에 추가 (for Eclipse)\r\n\r\n클릭 : http://www.dayo.pe.kr/study/index.php?mode=view&no=202\r\n', '', '', 17, 0),
(183, '', '서대영', '', '2008-07-16 10:10:37', 'JDBC', 'Connection 인터페이스', '□ JDBC Driver 로드 \r\n\r\n-. JDBC Driver는 jdk의 기본 클래스가 아니므로 import를 이용할 수 없다.\r\n\r\n1) Class.forName("드라이버클래스명");\r\nex) oracle.jdbc.driver.OracleDriver \r\n\r\n2) DriverManager.registerDriver(new 드라이버클래스());\r\nex) DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver());\r\n\r\n\r\n□ DB 연결\r\n\r\n-. Connection con = DriverManager.getConnection("url", "id", "pw");\r\n             \r\njdbc protocol:--->jdbc:(db 공통)\r\nsubprotocol:-->oracle:thin:\r\nsubname:--> @ip:port:데이터베이스명\r\n  \r\n-. ex) jdbc:oracle:thin:@70.12.220.140:1521:ora9"', '', '', 10, 0),
(184, '', '서대영', '', '2008-07-16 10:10:53', 'JDBC', 'Statement 인터페이스', '1. select\r\n\r\nResultSet rs = st.executeQuery("select ...");\r\n\r\n\r\n2. DML\r\n\r\nint uc = st.executeUpdate("insert/delete/update..");\r\n\r\n3. Both\r\n\r\nif(st.execute(sql)){\r\n ResultSet rs = st.getResultSet();\r\n}\r\nelse{\r\n int uc = st.getUpdateCount();\r\n}\r\n\r\n4. Batch\r\n\r\nst.addBatch("insert...");//1\r\nst.addBatch("delete ...");//5\r\nst.addBatch("update....");//3\r\n\r\n{1, 5, 3}\r\nint uc[] = st.executeBatch();\r\nint count[] = st.executeBatch();', '', '', 11, 0),
(186, '', '서대영', '', '2008-07-16 15:20:59', 'JDBC', 'ResultSet 인터페이스', '□ 생성방법\r\n\r\n1. stmt.excuteQuery("select ... ");\r\n2. if(excute()) stmt.getResultSet();\r\n\r\n* slect 문의 결과가 단일 정수라도 rs.next()해서 포인터 옮겨야함\r\n\r\n□ jdk2.0 추가\r\n\r\nStatment stmt = con.createStatment(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\r\n\r\n1. ResultSet의 스크롤 가능\r\nprevious()\r\nfirst()\r\nlast()\r\nbeforeFirst()\r\nafterLast()\r\nrelative(int row)\r\nabsolute(int row)\r\n\r\n2. ResultSet의 db update 가능\r\n\r\n1) insertRow()\r\n- moveToInsertRow()\r\n- moveToCurrentRow()\r\n2) updateRow()\r\n- updateXXX(int column, data)\r\n3) deleteRow()', '', '', 9, 0),
(187, '', '서대영', '', '2008-07-16 17:09:02', 'JSP', '자바 Web Application 패턴', '1.게시판읽기/게시판수정/게시물목록:jdbc, *.java\r\n2.web browser 출력:*.jsp\r\n \r\nclient--*.jsp<-(Vector:임시저장소)<--*.java<---db\r\n\r\n\r\n                vo : 중간저장소\r\n                useBean:jsp 와 jdbc 연결', '', '', 3, 0),
(188, '', '서대영', '', '2008-07-16 17:11:07', 'DB', 'top-n query', 't_emp 테이블을 id 역순으로 조회하여\r\n6-10번째 데이터만 조회하여 출력\r\n\r\n\r\n\r\n1. 급여 desc 정렬\r\nselect * from t_emp order by salary desc;\r\n\r\n2. 1번 결과 테이블에서 rownum 생성, num 이름\r\n붙여 조회\r\n\r\nselect rownum as num, name, salary\r\nfrom (select * from t_emp \r\n      order by salary desc)\r\n;\r\n\r\n3. 2번 결과 테이블에서   \r\nselect num, name, salary\r\nfrom (select rownum as num, name, salary\r\n      from (select * from t_emp \r\n            order by salary desc\r\n            )\r\n      )\r\nwhere num >= 6 and num 11      ', '', '', 5, 0),
(189, '', '서대영', '', '2008-07-16 17:14:34', 'Tomcat', '[DOS] 톰켓 설치법 (servlet, jsp 실행환경 구축)', '※ 설치파일보다 압축만해재하는 파일이 나음\r\n\r\n1. tomcat 5.5.26 설치\r\n1) Choose Component : Full\r\n2) Choose Instrall Location : D:/Tomcat\r\n3) Configuratioin - User Name, Password : 기억할 자신 없으면 둘 다 공백\r\n\r\n2. 구동 (D:/Tomcat/bin) \r\n1) tomcat5.exe : 도스용, log를 볼 수 있어 디버깅 유리\r\n2) tomcat5w.exe : 윈도우용, 트레이에서 쉽게 켜고 끌 수 있음\r\n\r\n3. 실행\r\n[시작] - [Apache Tomcat] - [Tomacat Manager] \r\n\r\n4. context path 구축\r\n1) D:/Tomact/webapps/컨텍스트패스/ - jsp, html 파일\r\n2) D:/Tomact/webapps/컨텍스트패스/WEB-INF/ - web.xml 파일을 둔다.\r\n3) D:/Tomact/webapps/컨텍스트패스/WEB-INF/classes/ - java, class 파일을 둔다. \r\n\r\n5. html 파일 테스트 \r\nD:/Tomact/webapps/컨텍스트패스/ 에 test.html 파일을 만들고,\r\n브라우져에 http://localhost:8080/컨텍스트패스/test.html 을 입력한다.\r\n\r\n6. classpath 추가\r\nCATALINA_HOME=D:/Tomcat;\r\nCLASSPATH=.;%CATALINA_HOME%/common/lib/servlet-api.jar;%CATALINA_HOME%/common/lib/jsp-api.jar\r\n\r\n7. 서블릿 주석 해제\r\nD:/Tomact/conf/web.xml 열어서 invoker 관련 소스 주석 해제\r\n(참조 : http://www.dayo.pe.kr/study/index.php?mode=view&no=204)\r\n\r\n8. JDBC 드라이버 로드\r\nojdbc14.jar 파일을 D:/Tomact/common/lib/ 로 복사\r\n\r\n9. class 파일 테스트 \r\nD:/Tomact/webapps/컨텍스트패스/WEB-INF/classes/ 에 java 파일을 만들고,\r\n콘솔창에서 이 경로로 이동해서 컴파일을 시켜서 Test.java 파일을 만든다. (javac Test.java)\r\n브라우져에 http://localhost:8080/컨텍스트패스/servlet/Test 을 입력한다.\r\n\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/daks_gada?Redirect=Log&logNo=10031955150', 'http://blog.naver.com/daks_gada?Redirect=Log&logNo=10031955150', '', 35, 0),
(191, '', '서대영', '', '2008-07-17 15:03:49', 'Oracle', '대략적인 구조', 'Oracle 안 에는 여러 이름의 데이터베이스가 들어있고 각 각 그 안에는 유저마다 다른 데이터 공간을 제공한다.\r\n관리자는 namepace.table 을 통해서 모든 유저의 테이블에 접근할 수 있다.', '', '', 0, 0),
(192, '', '서대영', '', '2008-07-17 16:36:20', 'JDBC', 'Metadta API', '- 데이터의 데이터 실제 데이터의 부가 정보 제공\r\n\r\n□ DatabaseMetaData\r\n\r\nㅇ db 연결 부가 정보(db, jdbc driver) 제공\r\n\r\nㅇ 역할 :  정보 제공\r\n\r\nㅇ 생성방법\r\n\r\nDatabaseMetaData dbmd = con.getMetaData();\r\n\r\nㅇ 메서드\r\ndbmd.getDatabaseProductName()\r\ndbmd.getDatabaseProductVersion()\r\ndbmd.getUser()\r\ndbmd.getURL()-->JDBC DRIVER 다르다\r\ndbmd.getDriverName()\r\ndbmd.getDriverVersion()\r\n==>String, int, String[]\r\n==> jdbc program 디버깅 목적\r\n\r\n자바--.한글--->오라클(깨져...)\r\n\r\ndbmd.supportsBatchUpdates()\r\n==> true/false(boolean)\r\n\r\naddBatch(), executeBatch()\r\n\r\ndbmd.supportsResultSetType\r\n(ResultSet.TYPE_SCROLL_SENSITIVE)\r\n==>true\r\nnext(), previous(), last(), first()....\r\n\r\ndbmd.supportsResultSetConcurrency\r\n(ResultSet.TYPE_SCROLL_SENSITIVE,\r\n ResultSet.CONCUR_UPDATABLE)\r\n==> updatexxxx(컬럼값)\r\n    insertRow()/updateRow()/deleteRow()\r\n\r\nㅇ 메서드 계열\r\n    \r\n- getXXX()---> 정보 읽기 String, int, String[]\r\n- supportsxxx()--->기능 지원 여부 true/false\r\n\r\n\r\n\r\n□ ResultsetMetaData\r\n\r\nㅇ 결과 부가 정보 제공\r\n\r\nㅇ 역할 : select 결과로 생성된 ResultSet의\r\n포함 컬럼 갯수, 컬럼명, 타입, 길이, 제약조건\r\n제공\r\n\r\nㅇ 생성방법 : ResultSetMetaData rsmd = rs.getMetaData();\r\n\r\n\r\n★ 테이블 구조(열개수, 타입 등)에 관계없이 테이블을 조회하는 방법\r\n\r\nex) String sql = "select * from ?";\r\n\r\nㅇ 메서드 \r\nrsmd.getCoulmnCount()\r\nrsmd.getCoulmnName(int )\r\nrsmd.getCoulmnTypeName(int )\r\n===>String\r\nrsmd.isNull(int)\r\n==> int (0(not null)/1(nullable)/2(db, jdbc driver 정보제공x))\r\n\r\njava 클래스명 테이블명\r\n\r\n컬럼명 .....................\r\n컬럼타입.....................\r\nnull여부\r\n데이터......................', '', '', 4, 0),
(193, '', '서대영', '', '2008-07-17 16:43:24', 'DB', 'PL/SQL', '□ 용도\r\n\r\n- 사용자 정의 함수\r\n- sql + 변수선언, 예외처리, \r\n- 조건문, 반복문 사용 가능 블록 선언\r\n\r\n\r\n□ 인터페이스 정의\r\n\r\ninterface CallableStatement\r\nextends PreparedStatement\r\n{Statement 상속 executexxx() 자동 포함\r\nPreparedStatement setxxxx() 자동 포함\r\n추가 메서드 .....\r\nregisterOutParameter()\r\ngetXXXX()\r\n}\r\n\r\n\r\n□ Function 문법 : 하나의 리턴값 소유\r\n\r\ncreate or replace function 이름\r\n(파라미터 선언)\r\nreturn 리턴할 변수타입\r\nis\r\n지역변수 선언\r\nbegin\r\n  sql, if, loop....\r\nexception \r\n예외처리부\r\nend;\r\n \r\n\r\n□ Procedure 문법 : 실행만 하는 구조\r\n\r\ncreate or replace procedure 이름\r\n(파라미터 선언)\r\nis\r\n지역변수 선언\r\nbegin\r\n \r\nend;\r\n \r\n \r\n□ pl/sql 블록 소스 확인 sql\r\n\r\n select text\r\n from user_source\r\n where name=''TAX''\r\n order by line;\r\n\r\n★ into 뒤에 변수에 select 로 조회된 칼럼값을 저장해 놓아야 사용할 수 있음.\r\nfor를 사용하면 다행 결과를 Result Set 으로 받을 수 있음.', '', '', 10, 0),
(194, '', '서대영', '', '2008-07-17 16:45:22', 'JDBC', 'CallableStatement', '□ 용도\r\n\r\n- pl/sql(파트1 7장) 블록 정의 여러번 호출\r\n\r\n\r\n□ 문법\r\n\r\nCallableStatement ct = \r\ncon.prepareCall\r\n("pl/sql블록호출문자열");==>동일 pl/sql 호출\r\n\r\npl/sql블록호출문자열\r\n{?=call 함수명(?,?)}\r\n{call 프로시져명(?,?..)}\r\n\r\n\r\n□ 메서드\r\nexecutexxx()\r\nsetxxxx()\r\nregisterOutParameter()\r\ngetXXXX()\r\n\r\n\r\n□ 수행 순서\r\n\r\n1.생성\r\nCallableStatement ct = \r\ncon.prepareCall("{?=tax(?)}");\r\n\r\n2.  입력파라미터 값 설정\r\n\r\nct.setInt(2, 1000);\r\n\r\n3. 출력 파라미터 타입 설정\r\nct.registerOutParameter\r\n(1,java.sql.Types.INTEGER);\r\n\r\n4. 실행\r\nct.execute();\r\n\r\n5. 결과출력\r\nint tax = ct.getInt(1);', '', '', 10, 0),
(195, '', '서대영', '', '2008-07-18 13:42:51', 'SDS', '트랜잭션 처리', '□ 자동 커밋 (기본 설정)\r\n\r\ncon.setAutoCommit(true);\r\n\r\n\r\n□ 수동 커밋\r\n\r\ncon.setAutoCommit(true);\r\n\r\nDML... 처리\r\n\r\ncon.commit(); \r\n또는\r\ncon.rollback();\r\n\r\n\r\n□ 커밋 설정 보기\r\n\r\ncon.getAutoCommit();\r\n\r\n\r\n□ 개념\r\n\r\n트랜잭션 개념\r\nA - B 계좌이체(두개이상 단일 작업 결합된\r\n논리적 하나의 작업)\r\n= 두개 이상의 sql 결합\r\n\r\n계좌 테이블(계좌번호, 잔액 컬럼) \r\n\r\n\r\n1.A 출금\r\nupdate 계좌\r\nset 잔액 = 잔액 - 이체액\r\nwhere 계좌번호 =A;\r\n\r\n---------(네트워크오류 중단, 취소:ROLLBACL )---------------\r\n2.B 입금\r\nupdate 계좌\r\nset 잔액 = 잔액 + 이체액\r\nwhere 계좌번호 =B;\r\n-----------------------\r\n==>계좌이체 트랜잭션 COMMIT\r\n(DB 반영)\r\n', '', '', 7, 0),
(196, '', '서대영', '', '2008-07-18 15:33:57', 'JDBC', 'DataSource / Connection Pool', '□ DataSource 클래스\r\n - Connection Pool의 Management 성격의 클래스\r\n - Connection Pool로부터 Connection 획득방법을 제공\r\n\r\n□ DataSource 필요성\r\n - network 연결 객체의 체계적인 관리\r\n - client 응답 속도 향상\r\n → 미리 Connection을 맺어서, 관리하면서 이용\r\n\r\n□ DataSource 라이브러리\r\n - arpache.common.dbcp.jar\r\n - WAS에 Connection Pool과 DataSource가 잘 갖춰져 있으므로 주로 이것을 이용\r\n\r\n\r\n□ Connection 생성방법\r\n\r\n1. DataSource 이용방법\r\n: Connection 공유, \r\njdbc driver이름 다르게 기술\r\nurl, id, pw 정보 다르게 기술\r\n==> 자바소스 변경 불가피\r\n(db 독립적)\r\n: xml 파일에 접속정보 저장해놓으면 소스 수정할 필요 없음\r\n\r\n2. DriverManager 이용방법 (기존 방법)\r\n\r\n\r\n□ 문법\r\n\r\nContext initContext = \r\nnew InitialContext();\r\n==>"/jdbcstudy"\r\n\r\nContext envContext  = \r\n(Context)initContext.lookup\r\n("java:/comp/env");\r\n==>"jdbc/myoracle"\r\n   "xxxxx"\r\njdbcstudy.xml 파일 설정 자원 이름 정보\r\n\r\n\r\nDataSource ds = \r\n(DataSource)envContext.lookup\r\n("jdbc/myoracle");\r\n\r\n==> driver, .... 이용하여 xx개의 con생성\r\n\r\n\r\nConnection conn = ds.getConnection();\r\n\r\n\r\nst생성\r\nrs생성\r\n\r\nconn 반납\r\n\r\n\r\n\r\n□ datasource & jndi 실습\r\n\r\n1. server 에 datasource 설정\r\n2. eclipse 에 database 접속해서 sql 문 테스트 할수 있는 환경설정\r\n3. sample table, data 준비\r\n4. servlet 프로그램을 작성해서 select 테스트..\r\n\r\n\r\n\r\n1. server 에 datasource 설정\r\n	==> jdbc driver 를 서버 라이브러리 디렉토리에 위치시킨후\r\n			server.xml 파일을 수정하면 된다.\r\n			C:apache-tomcat-5.5.20commonlib 에 카피...\r\n\r\n\r\n2. eclipse 에 database 접속해서 sql 문 테스트 할수 있는 환경설정\r\n	WTP 에서 제공되는 DataSource Explorer 를 이용해서 DB Connection 등록하고\r\n		SQL 파일로 sql 문 테스트...\r\n\r\n4. 서블릿 코드 작성\r\n\r\n   private DataSource ds;\r\n\r\n	// 서블릿 객체가 생성될 때 딱 한번만 호출되는 메서드이다.\r\n	// 이곳에서 JNDI 프로그램을 통해 DataSource 객체를 획득하겠다.\r\n	public void init() throws ServletException {\r\n		// TODO Auto-generated method stub\r\n		super.init();\r\n		try {\r\n		\r\n			InitialContext cxt = new InitialContext();\r\n			ds = (DataSource) cxt.lookup("java:comp/env/jdbc/myoracle");\r\n			\r\n		} catch (Exception e) {\r\n			// TODO: handle exception\r\n			System.out.println(e);\r\n		}\r\n		\r\n	}  ', '', '', 30, 0),
(197, '', '서대영', '', '2008-07-18 15:54:12', 'SDS', 'CLOB / BLOB', 'LOB : LARGE OBJECT\r\n==>SQL 3 버전에서 지원하는 대용량 데이터 타입\r\n오라클 9i : sql 3버전 \r\njdbc driver : 2.0기능지원\r\n\r\n\r\nCLOB:character LARGE OBJECT(문자열 대용량 데이터)\r\n==> 텍스트 파일 저장, 게시판내용\r\n4gb\r\n(주소, 문자열내용)\r\nBLOB:binary LARGE OBJECT(바이너리 대용량 데이터)\r\n==> 이미지파일, 음향파일 저장\r\n4gb\r\n(주소, 이진코드내용)\r\n\r\n영화 다운로드-재생\r\n1. 다운로드 완료 - 재생(데이터묶음)\r\n2. 다운로드/재생/다운로드/재생(스트림형태)\r\n\r\nvarchar2:문자열 저장 , 4000 바이트\r\n(문자열내용)\r\nraw:바이너리코드 저장, 2000 바이트\r\n(이진코드내용)\r\n\r\nclob 데이터 insert\r\n1. insert into 테이블명 \r\nvalues(,,,,,empty_clob())\r\n-->완료-->rollback\r\n2. select clob타입컬럼\r\n   from 테이블명\r\n   for update;\r\n-->완료x\r\n\r\n \r\n pl/sql\r\n   \r\n select\r\n into\r\n \r\n테이블생성\r\n \r\nClob 데이터 insert   \r\nClob 데이터 select\r\nBlob 데이터 insert\r\nBlob 데이터 select', '', '', 2, 0),
(198, '', '서대영', '', '2008-07-18 15:56:08', 'Java', 'main 함수 종료', 'System.exit( 0 );', '', '', 1, 0),
(199, '', '서대영', '', '2008-07-21 10:55:37', 'Oracle', '설치법', '※ 경로명에 한글이 들어가면 안 된다!\r\n\r\n□ 다 디폴트로 하되 바꿀 것만 나열\r\n\r\n1. 서비스 이름 (DB 이름) : ora9\r\n\r\n2. 호스트 이름 : 70.12.220.140\r\n\r\n3. 로그인 변경 : jsp22/jsp22', '', '', 5, 0),
(200, '', '서대영', '', '2008-07-21 12:17:14', 'Eclipse', '클래스 자동 import', 'ctrl + shift + o', '', '', 3, 0),
(202, '', '서대영', '', '2008-07-21 12:22:59', 'Eclipse', '외부 jar 파일 로드 (ex. JDBC Driver)', '□ 디폴트 JRE로 추가\r\n\r\n- [Window] 메뉴 - [Preference] 클릭\r\n- Java - Installed JREs- [Edit] 클릭\r\n- [Add External JARs] - *.jar 파일 선택\r\n\r\n\r\n□ 프로젝트 만들 때 마다 매번 추가 (임시)\r\n\r\n1. Package Explorer에 있는 프로젝트에서 마우스 오른쪽 버튼 누르고 Properties 클릭\r\n\r\n2. Java Build Path 선택하고 Libraries 선택\r\n\r\n3. Add External JARs 를 선택하고 원하는 jar 파일(ojdbc14.jar)을 선택\r\n\r\n\r\n□ jdk 에 아예 디폴트로 추가 시켜 놓음 (영구)\r\n\r\n- jdk1.4/jdk/jre/lib/ext 에 ojdbc14.jar 을 복사', '', '', 10, 0),
(204, '', '서대영', '', '2008-07-21 16:40:33', 'Tomcat', '/sevlet/서블릿명 사용하기', 'C:/Tomcat5.5/conf 에 있는 두 파일을 수정한다.\r\n\r\n□ server.xml\r\n\r\n- 서버 정책 : 관리자 계정, 포트\r\n\r\n□ web.xml\r\n\r\n- 어플리케이션 정책 : 서버 내 모든 Web application 공통 사항 정의 : 표기 URL, 쿼리 문자열, 세션 시간, mine 타입 등\r\n- invoker 관련 소스에 주석을 해재해야 서블릿이 작동한다.\r\n- 하나의 Web application에만 해당하는 각 컨텍스트의 WEB-INF 아래있는 web.xml 파일과 혼돈하지 말 것\r\n\r\n1. 약 100~110번 라인 근처에 주석 해재\r\n\r\n    <servlet>\r\n        <servlet-name>invoker</servlet-name>\r\n        <servlet-class>\r\n          org.apache.catalina.servlets.InvokerServlet\r\n        </servlet-class>\r\n        <init-param>\r\n            <param-name>debug</param-name>\r\n            <param-value>0</param-value>\r\n        </init-param>\r\n        <load-on-startup>2</load-on-startup>\r\n    </servlet>\r\n\r\n2. 약 350번 라인 근처에 주석 해재\r\n\r\n    <servlet-mapping>\r\n        <servlet-name>invoker</servlet-name>\r\n        <url-pattern>/servlet/*</url-pattern>\r\n    </servlet-mapping>', '', '', 43, 0),
(205, '', '서대영', '', '2008-07-21 16:54:09', 'JSP', '톰켓 사용시 주의 사항', '- java 파일을 수정하여 class 파일을 다시 생성했을 경우, WAS를 반드시 리스타트 해줘야 변경 사항이 반영된다.\r\n\r\n- 또는 Tomcat Manager(http://127.0.0.1:8080/manager/html) 에 들어가서 해당 path를 Reload 한다.', '', '', 3, 0),
(206, '', '서대영', '', '2008-07-21 23:28:00', 'Oracle', '포트번호 바꾸기 (Tomcat 8080과 충돌)', '□ 현재 포트번호 확인\r\n\r\nselect dbms_xdb.gethttpport() from dual;\r\n\r\n□ 8081로 포트번호 변경\r\n\r\nexec dbms_xdb.sethttpport(8081);', '', '', 6, 0),
(207, '', '서대영', '', '2008-07-22 09:19:52', 'JSP', '톰켓 디렉토리 구조', 'WebContent\r\n\r\n- .jsp, .html 파일\r\n\r\nsrc\r\n\r\n- .java 파일 (servlet 포함)\r\n\r\n\r\nbuild\r\n\r\n- .class 파일\r\n', '', '', 1, 0),
(208, '', '서대영', '', '2008-07-22 09:19:54', 'Eclipse', 'Workspace 변경법', '[File] - [Switch Workplace]\r\n\r\n또는 \r\n\r\n바로가기의 등록정보에 대상의 파일 명 뒤에\r\n\r\n-data c:\\workspace 추가', '', '', 5, 0),
(236, '', '서대영', '', '2008-07-25 02:11:33', 'Eclipse', 'Workplace에 있는 프로젝트 살리기', '[File] - [Import] - [General] - [Existing Projects into Workplace]\r\n\r\n[Browse]로 프로젝트폴더 설정하고 Select All', '', '', 0, 0),
(209, '', '서대영', '', '2008-07-22 09:45:49', 'Eclipse', '[이클립스] servlet 파일 만들기', '1. 프로젝트의 src 폴더 위에서 마우스 우측 버튼 - [New] - [Class]\r\n\r\n2. Name : 원하는 이름\r\n\r\n3. Superclass : javax.servlet.http.HttpServlet\r\n\r\n4. 소스 작성\r\n\r\n5. http://127.0.0.1:8080/컨텍스트패스/servlet/서블릿클래스명(확장자 없이)', '', '', 5, 0),
(211, '', '서대영', '', '2008-07-22 10:19:50', 'JSP', '웹문서 종류', '웹문서 : 브라우져에서 볼 수 있는 모든 요소, 서버에 요청하는 모든 요소\r\n\r\n□ Clinet Side\r\n\r\nㅇ 정적\r\n- html\r\n- gif\r\n- jpg\r\n\r\nㅇ 동적\r\n- applet : 컴파일 (by client JVM)\r\n- java scirpt : 스크립트\r\n\r\n□ Server Side\r\n\r\nㅇ 동적\r\n- Servlet : 컴파일 (by server JVM)\r\n- jsp : 스크립트', '', '', 1, 0),
(212, '', '서대영', '', '2008-07-22 10:46:20', 'HTTP', 'HTTP Response Code', '200 OK\r\n- 204 No Content : 응답 바디가 비어있을 때 (PUT이나 DELETE에서 자주 사용)\r\n\r\n300 성공\r\n304 not modified : 브라우져 캐쉬 사용\r\n302 found (Moved Temporarily) : 미인증 클라이언트를 로긴창으로 라다이렉트할 때 사용\r\n\r\n400 클라이언트 잘못\r\n- 401 Unauthorized (Spring Security에서 인증안된 API 요청 거부할 때)\r\n- 403 Forbidden (CSRF 공격 탐지, GrantedAuthority가 부족할 때)\r\n- 404 없는 파일 요청\r\n- 405 요청 방식 잘못\r\n\r\n500 서버 내 파일 오류\r\n- servlet, jsp 파일 로직 문제 발생\r\n\r\n\r\n# 200 (Cache) 와 304 의 차이\r\n * 200 (Cache) : Web Server 와 통신없이 로컬 캐쉬 로드\r\n * 304 : Browser 가 Web Server 에 해당 페이지의 최종 수정을 요청하고, 최종 수정일이 변경되지 않았다면 Catch 로드 (200 Cache 보다 느림)\r\nhttp://stackoverflow.com/questions/1665082/http-status-code-200-cache-vs-status-code-304\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html', NULL, '', 30, 0),
(213, '', '서대영', '', '2008-07-22 11:15:30', 'Web', 'URL과 URI 차이', 'URI(Uniform Resource Identifier)는 존재하는 자원을 식별하기 위한 일반적인 식별자를 정의하는 규정이고, URL(Uniform Resource Locator)은 인터넷의 특정 자원의 장확한 위치를 식별하기 위한 규정이다. 다시 말하면 URL은 URI의 한 형태라고 할 수 있다.\r\n\r\n \r\n\r\n예) http://www.naver.com/jwjung/index.jsp\r\n\r\nURL : http://www.naver.com/jwjung/index.jsp\r\n\r\nURI : /jwjung/index.jsp\r\n[출처] URI와 URL의 차이|작성자 하하하\r\n\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/jwjung0723?Redirect=Log&logNo=90013591795', 'http://blog.naver.com/jwjung0723?Redirect=Log&logNo=90013591795', '', 2, 0),
(214, '', '서대영', '', '2008-07-22 11:33:07', 'Servlet', 'Servlet 수행 흐름', 'WAS의 Servlet Container는 단지\r\nHttpServlet 객체의 init(), service(), destroy() 를 호출할 뿐...\r\n이 때 사용자가 HttpServlet 클래스의 이 메서드를 오버라이딩해 놓으면\r\n오버라이딩된 메서드들이 호출된다.\r\n-----------------------------------------------------------\r\n\r\n1. 브라우저로가 서블릿 수행을 요청하는 URL을 요청.\r\n서블릿 실행 가상 경로 : http://127.0.0.1:8080/컨텍스트명/servlet/클래스명\r\n\r\n2. WAS(톰켓) 안에서 웹서버가 서블릿 수행 요청임을 인식하고 서블릿 컨테이너에게 서블릿을 수행하도록 요청\r\n\r\n3. 최초 요청 시 서블릿 메모리 로딩\r\n : Servlet 객체 생성\r\n   init() 호출 : 메모리에 올리기 위해 처음으로 서블릿 호출시 딱 한번\r\n\r\n4. WAS가 쓰레드풀에 있는 하나의 쓰레드를 이용하여\r\n : service() 호출 : 호출될 때 마다 매번\r\n  doGet() 또는 doPost() 호출\r\n\r\n5. 서블릿의 수행 결과를 웹 서버에 전송.\r\n\r\n6. 출력버퍼의 내용으로 HTTP 응답 헤더와 응답 바디를 구성하여 브라우져로 응답\r\n\r\n7. 쓰레드풀로 반환\r\n\r\n※ 반복 요청 시 에는 4 ~ 7 만 수행된다.\r\n\r\n8. 오랫동안 사용하지 않은 서블릿 메모리에서 제거\r\n : destroy() 호출\r\n\r\n\r\n\r\n', '', '', 26, 0),
(215, '', '서대영', '', '2008-07-22 13:23:00', 'Servlet', '브라우져 출력 내용의 타입과 문자셋 지정', 'res.setContentType("text/html; charset=EUC-KR");\r\n\r\n\r\n- 한글이 깨지지 않기 위해서 항상 해줄 것.', '', '', 12, 0),
(216, '', '서대영', '', '2008-07-22 13:34:32', 'JSP', '톰켓 API', 'Tomcat/webapps/tomcat-docs/servletapi/index.html', '', '', 2, 0),
(217, '', '서대영', '', '2008-07-22 13:45:14', 'Servlet', 'HttpServletRequset / HttpServletResponse', '□ 원천\r\n\r\nServlet Container가 client로 부터 받은 요청정보를 토대로 생성한다.\r\n그래서 servlet에서 사용할 수 있다.\r\n\r\n클라이언트 ======(http 요청)=====> 서버 \r\n클라이언트 <=====(http 응답)====== 서버 \r\n\r\n\r\n□ HttpServletRequset : http 요청(해더, 쿼리)을 나타내는 클래스\r\n\r\nㅇ 필수 메서드 (요청 정보 추출)\r\n- void setCharacterEncoding("EUC-KR"); - 한글 쿼리 요청\r\n- String getParameter(String param_name);\r\n- String[] getParameterValues(String param_name);\r\n- Object getAttribute(String param_name);\r\n\r\nㅇ 부가 메서드\r\n- String getQueryString();\r\n- String getContentType();\r\n- String getContentLength();\r\n\r\n\r\n□ HttpServletResponse : http 응답을 나태나는 클래스\r\n\r\nㅇ 필수 메서드 (응답 출력)\r\n- void setContentType("text/html; charset=EUC-KR") - 한글 쿼리 응답\r\n- PrintWriter getWriter()\r\n\r\nㅇ 부가 메서드\r\n- setCookie()\r\n- set\r\n- sendError() : sendError(403); sendError(HttpServletResponse.SC_FORBIDDEN);', '', '', 47, 0),
(218, '', '서대영', '', '2008-07-22 15:04:49', 'WAS', 'Deployment Descriptor 설정', '- Context/WEB-INF/web.xml 수정\r\n\r\n□ 서블릿명 재정의 + 초기 파라미터\r\n\r\n	<servlet>\r\n		<servlet-name>\r\n		닉네임\r\n		</servlet-name>\r\n		<servlet-class>\r\n		실제 클래스명\r\n		</servlet-class>\r\n		<init-param>\r\n			<param-name>쿼리변수1</param-name>\r\n			<param-value>값1</param-value>\r\n		</init-param>\r\n		<init-param>\r\n			<param-name>쿼리변수2</param-name>\r\n			<param-value>값2</param-value>			\r\n		</init-param>\r\n	</servlet>\r\n\r\n\r\n□ 서블릿명 맵핑 (외부에서 서블릿인지 모르도록)\r\n\r\n    <servlet-mapping>\r\n        <servlet-name>닉네임</servlet-name>\r\n        <url-pattern>*.do</url-pattern>\r\n    </servlet-mapping>\r\n\r\n\r\n□ 오류 처리\r\n\r\n	<error-page>\r\n		<error-code>405</error-code>\r\n		<location>/servlet/ErrorHandleServlet</location>\r\n	</error-page>\r\n	<error-page>\r\n		<exception-type>java.lang.NullPoinerException</exception-type>\r\n		<location>/servlet/ErrorHandleServlet</location>\r\n	</error-page>', '', '', 12, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(219, '', '서대영', '', '2008-07-23 09:31:14', 'Eclipse', '유용한 기능', 'syso + Ctrl + Shift : System.out.println();\r\n\r\nShift + F2 : API 연동\r\n\r\nF3 : 메서드 구현 소스로 이동 (Ctrl 누르고 마우스 클릭)\r\n\r\nCtrl + Shift : 자동 채우기\r\n\r\nCtrl + Shift + o : 패키지 자동 임포트\r\n\r\nCtrl + 1 : 해결책 제시\r\n\r\n[Source] - [Format] (Ctrl + Shirt + f ): 소스 정렬\r\n\r\n[Source] - [Override/Implement Metods] : 상위 클래스 매서드 오버라이드\r\n\r\n[Source] - [Generate Getters/Setters] : 게터/세터 메서드 생성\r\n\r\n[Window] - [Web Browser] - [2 Internet Explorer] : 내부 익스플로러가 아닌 인터넷 익스플로러 사용', '', '', 15, 0),
(220, '', '서대영', '', '2008-07-23 10:36:54', 'JSP', '쿼리로 넘어온 암호화된 문자열 처리 ★', '□ req.setCharacterEncoding("euc-kr")\r\n\r\n- 위 한줄만 doPost 함수 안 에 첨가\r\n- post 방식에서만 작동\r\n\r\n\r\n□ convert 함수 사용 - get, post 모두 작동\r\n\r\n	private String convert(String param) {\r\n		String convertparam = null;\r\n		try {\r\n			convertparam = new String(param.getBytes("8859_1"), "KSC5601");\r\n		} catch (Exception e) {\r\n			System.out.println("한글 변환 오류 발생");\r\n		}\r\n		return convertparam;', '', '', 13, 0),
(221, '', '서대영', '', '2008-07-23 10:41:11', 'Web', 'Query 문자열 규칙', '1. http://주소?name1=value1&name2=value2&...\r\n\r\n2. 영문자, 숫자, 특수문자 그대로\r\n\r\n3. 공백 : + 로 표시\r\n\r\n4. 그 외 문자 : %16진수', '', '', 0, 0),
(222, '', '서대영', '', '2008-07-23 10:44:47', 'Web', 'Query 문자열 전달 방식', '□ get\r\n\r\n- 주소? 뒤에 ?name=value&... 스트링 추가 \r\n- 요청 해더\r\n- 보안 취약, 길이 제한, 사용 간편\r\n- form 태그를 이용하지 않고 바로 주소창에 입력 가능\r\n- 서블릿에서 doGet() 메서드로 처리\r\n\r\n\r\n□ post\r\n\r\n- 쿼리 내용이 안 보임\r\n- 요청 바디\r\n- 문자열 길이 제한 X\r\n- 반드시 form 태그를 이용\r\n- 서블릿에서 doPost() 메서드로 처리', '', '', 6, 0),
(223, '', '서대영', '', '2008-07-23 14:08:19', 'Servlet', '상태 정보 유지 (Cookie & Session)', '□ 쿠키\r\n\r\n* 특징\r\n\r\n- 클라이언트에 저장\r\n- 브라우저 종료 후에도 만료 시간 만큼 유지\r\n- 공개해도 무방한 정보 (암호화 필요)\r\n- 추가속성 설정 가능 : 유효기간, 유효디렉토리, 추가값\r\n- 텍스트만 저장\r\n- 속성과 값으로 이뤄진 여러 쿠키을 가지는 쿠키 배열로 생각할 것\r\n\r\n* 문법\r\n\r\n- API : interface javax.servlet.http.Cookie\r\n- 쿠키 생성 : Cookie cookie = new Cookie(name, value);\r\n- 만료 설정 : cookie.setMaxAge(expiry);\r\n- 응답에 쿠키 등록 : resp.addCookie(cookie);\r\n- 요청으로부터 쿠기 호출 : Cookie[] cookies = req.getCookies();\r\ncookies[i].getName();	\r\ncookies[i].getValue();\r\n\r\n\r\n□ 세션\r\n\r\n* 특징\r\n\r\n- 서버에 저장\r\n- 브라우져 종료 후 소멸, 종료 전에도 만료 시간이 자나면 소멸\r\n- 보안이 필요한 정보\r\n- 추가속성 설정 불가능\r\n- 자바 객체 저장 가능\r\n- 여러 개의 속성과 값을 가진 하나의 세션 객체로 생각할 것\r\n\r\n* 문법\r\n\r\n- API : interface javax.servlet.http.HttpSession (톰켓 벤더가 구현)\r\n- 요청으로부터 세션 호출 : 		\r\nHttpSession session = req.getSession(false); 세션 없으면 null 리턴\r\nHttpSession session = req.getSession(); 세션 없으면 새로운 세션 생성\r\n- 서버에 속성 등록 : session.setAttribute(String name, Object value);\r\n- 속성 호출 : Object value = (Object)session.getAttribute(String name);\r\n- 속성 메모리에서 삭제 : session.removeAttribute("test");\r\n- 세션 삭제 : session.session.invalidate();\r\n- 만료 설정 : setMaxInactiveInterval();', '', '', 33, 0),
(224, '', '서대영', '', '2008-07-23 14:08:58', 'JavaScript', '쿠키 정보 보기', '주소창에 \r\n\r\njavascript:document.cookie\r\n또는\r\njavascript:alert(document.cookie);', '', '', 4, 0),
(225, '', '서대영', '', '2008-07-23 14:10:55', 'IT', '쿠키 완전 정복', '□ 저장소\r\n\r\nC:/Documents and Settings사용자계정/Cookies/\r\n\r\n\r\n□ 보안 설정\r\n\r\n인터넷 옵션 - 개인 정보 - 설정 : 디폴트가 보통\r\n\r\n', '', '', 2, 0),
(233, '', '서대영', '', '2008-07-24 14:22:22', 'Servlet', '맴버 변수를 활용한 DB 접근', 'import java.io.*;\r\nimport javax.servlet.*;\r\nimport javax.servlet.http.*;\r\nimport java.sql.*;\r\n\r\npublic class InitParamTestServlet extends HttpServlet {\r\n   Connection conn;   \r\n   public void init(ServletConfig sc) {\r\n	    try {\r\n	       String account = sc.getInitParameter("account");\r\n	       String password = sc.getInitParameter("password");\r\n	       Class.forName("oracle.jdbc.driver.OracleDriver");\r\n	       conn = DriverManager.getConnection("jdbc:oracle:thin:@70.12.220.140:1521:ORA9", account, password);	       \r\n	    } catch (Exception e) {\r\n	       System.out.println("DB 접속 오류 발생 :"+e);\r\n	    }\r\n   }\r\n   public void doGet(HttpServletRequest req, HttpServletResponse res) {\r\n	    PrintWriter out = null;\r\n	    Statement stmt = null;\r\n	    ResultSet rs = null;\r\n    	try {\r\n	    	res.setContentType("text/html; charset=EUC-KR");\r\n         	out= res.getWriter();\r\n         	out.println("<html>");\r\n     		out.println("<head><title>Request 정보 출력 Servlet</title></head>");\r\n		    out.println("<body>");\r\n		    stmt = conn.createStatement();\r\n	       	rs  = stmt.executeQuery("SELECT * from product");\r\n	       	out.println("<h3>product 테이블의 내용</h3>");\r\n		    out.println("<pre>");\r\n         	while (rs.next()) {\r\n            	out.print(rs.getString("id") + "   ");\r\n            	out.print(rs.getString("classid") + "   ");\r\n            	out.print(rs.getString("name") + "   ");\r\n            	out.print(rs.getInt("balance") + "   ");\r\n            	out.println(rs.getFloat("price"));\r\n         	}\r\n         	out.println("</pre>");\r\n      	 	out.println("</body></html>");\r\n         	out.close();\r\n 	    } catch (Exception e) {\r\n	       	out.println("<h3>요청을 처리하는 동안 오류가 발생하였습니다!!!</h3>");\r\n         	out.println("</body></html>");\r\n	       	out.close();\r\n	       	System.out.println("오류: "+e); \r\n	    } finally {\r\n	       	try {\r\n	          	if (stmt != null)\r\n               		stmt.close();\r\n            	if (rs != null)\r\n               		rs.close();\r\n         	} catch (Exception e) {\r\n            	System.out.println("DB 자원 해제 오류 발생 :"+e);\r\n         	}\r\n      	}\r\n   }\r\n   public void destroy() {\r\n      try {\r\n         if (conn != null)\r\n            conn.close();\r\n      } catch (Exception e) {\r\n         System.out.println("DB 접속 해제 오류 발생 :"+e);\r\n      }\r\n   }  \r\n}\r\n', '', '', 22, 0),
(226, '', '서대영', '', '2008-07-24 09:30:15', 'Servlet', 'RequestDispather 클래스 - 요청 분산', '★ 중요\r\n\r\n- servlet에서 jsp파일로 forward하면 주소표시줄의 url은 바뀌지 않고 jsp파일만 브라우져에 표시된다.\r\n\r\n\r\n□ 속성값 공유 방법\r\n\r\n- 보낸 서블릿에서 req.setAttribute(name, value)로 속성값을 설정해서 보냄\r\n- 받은 서블릿에서 req.getAttribute(name, value)로 속성값을 받아옴\r\n\r\n\r\n□ 메서드 \r\n\r\n- RequestDispather.forward(req, res, path) : 다른 서블릿으로 요청, 응답 객체 모두 전송, 출력 버퍼 삭제(out.clear();)\r\n- RequestDispather.include(req, res, path) : 다른 서블릿에서 전송 후 처리된 요청, 응답을 다시 받음, 출력 버퍼 유지\r\n\r\n\r\n□ 사용법\r\n\r\nRequestDispatcher rd = getServletContext().getRequestDispatcher("/test.jsp");\r\nrd.forward(req, res);\r\n\r\n\r\n※ res.sendRedirect : 네트워크 부하 큼\r\n클리이언튼 -> 서버 -> 서블릿1 -> 서버 -> 클라이언트 -> 서버 -> 서블릿2 -> 서버 -> 클라이언트\r\nRequestDispather : 서블릿끼리 통신 \r\n클리이언트 -> 서버 -> 서블릿1 -> 서블릿2 -> 서버 -> 클라이언트', '', '', 37, 0),
(227, '', '서대영', '', '2008-07-24 09:36:37', 'JSP', '정보 공유 방법', '- 아래 클래스들은 공통으로 setAttribute()와 getAttribute() 메서드를 가짐\r\n\r\n□ HttpRequest, RequestDispatcher\r\n\r\n- 요청이 처리되서 응답될 때 까지. 즉, forward나 iuclude 한 페이지에서는 같은 변수 값 유지\r\n\r\n- 사용법\r\nrequest.setAttribute("name", "value");\r\nRequestDispatcher rd = getServletContext().getRequestDispatcher("경로"); \r\nrd.forward(request, response);\r\n\r\n\r\n□ HttpSession\r\n\r\n- 같은 브라우져(30분)에서 같은 변수 값 유지\r\n\r\n- 사용법\r\nHttpSession session = req.getSession(false);\r\nObject obj = session.getAttribute("name");\r\nsession.setAttribute("name", "value");\r\n\r\n\r\n□ ServletContext\r\n\r\n- 동일 컨텍스트 패스 내에서 톰켓을 종료할 때 까지, 즉 다른 브라우져에서도 같은 변수 값 유지\r\n\r\n- 사용법\r\nServletContext application = getServletContext();\r\nObject obj = appication.getAttribute("name");\r\napplcation.setAttribute("name", "value");', '', '', 23, 0),
(228, '', '서대영', '', '2008-07-24 09:41:08', 'Pattern', 'MVC 패턴', 'Model을 바비 인형, View를 여러 옷, Controller를 아이라고 생각하면 편함\r\n\r\n- 복잡도 ↓, 응집도 ↑\r\n- Browser -> Conroller -> Model -> View -> Browser\r\n- 화면과 로직을 분리해서 관리하므로 유지 보수가 효과적\r\n- 프로젝트 수행 시 자바개발자와 웹디자너가 역할 분담\r\n\r\n□ Model (JavaBeans)\r\n\r\n- 실제 요청을 처리하는 비지니스 로직\r\n- Value Object, Data Access Object\r\n- java, class 파일\r\n\r\n□ View\r\n\r\n- 브라우져로 화면을 구성해서 응답을 보냄\r\n- html, jsp 파일\r\n\r\n□ Controller\r\n\r\n- Model 과 View 연결해주는 역할\r\n- 브라우져로 부터 요청을 전문으로 받아서 적합한 모델로 전송\r\n- servlet 파일\r\n\r\n\r\n>>> Model 1 : JSP가 Controller(요청 받음)와 View(응답 보냄)를 다 함\r\n>>> Model 2 : Servlet이 Conttoller, JSP가 View\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.javaworld.com/javaworld/jw-12-1999/jw-12-ssj-jspmvc.html', 'http://www.javaworld.com/javaworld/jw-12-1999/jw-12-ssj-jspmvc.html', '', 12, 0),
(229, '', '서대영', '', '2008-07-24 10:54:53', 'JSP', 'JSP 5대 태그 ★', '1. 실행문 : 스크립틀릿(scriptlet) 태그\r\n<% 자바코드 %>\r\n- 서블릿 변환 후, _jspService() 메서드 안에 선언됨\r\n- 지역변수 용\r\n\r\n2. 표현문 : 표현문 태그, 할당문 태그\r\n<%= 변수, 매서드 %>\r\n- out.println()의 매개변수\r\n\r\n3. 선언문 : 선언문 캐그 (MVC2 모델에서 거의 안씀)\r\n<%! 자바코드 %>\r\n- 서블릿 변환 후, _jspServie() 메서드 밖에 선언 \r\n- 멤버 변수 및 메소드 용\r\n\r\n4. 지시 : 지시자 태그 ★\r\n - Container 지시사항\r\n1) page : page의 속성 설정, 서블릿 변환 시 설정\r\n<%@ page language="java" contentType="text/html; charset=EUC-KR"\r\n    pageEncoding="EUC-KR"%>\r\n<%@ page import="java.sql.*, java.io.*" %>\r\n<%@ page errorPage="e.jsp" %>\r\n<%@ page isErrorPage="true" %> (에러표시 페이지 내에서만)\r\n<%@ page session="false" %> (세션 사용 안 할 때만)\r\n2) inlclude : 소스 그대로 붙여넣기\r\n<%@ include file="a.jsp" %>\r\n3) taglib : 커스텀 태그 선언\r\n<%@ taglib prefix="kkang" uri="식별자" %>\r\n\r\n5. 주석 : 주석문 태그\r\n<%-- 주석 --%> : 서블릿소스, 브라우져소스에서 안 보임', '', '', 57, 0),
(232, '', '서대영', '', '2008-07-24 14:01:43', 'JSP', 'JSP 내장객체 ★', 'JspWriter out\r\nHttpServletRequest request\r\nHttpServletResponse response\r\nHttpSession session\r\nServletContext application\r\nServletConfig config\r\nJspException exception\r\nPageContext pageContext\r\nObject page\r\n\r\n\r\n□ 내장 객체 (_jspService() 내에 선언되어 있음)\r\n\r\n* 페이지 입출력\r\n- HttpServletRequest request\r\nrequest.getParameter();\r\nrequest.getParameterValues();\r\nrequest.getMethod();\r\n\r\n- HttpServletResponse response\r\nresponse.sendRedirect();\r\n\r\n- JspWriter out\r\nout.print();\r\nout.flush();\r\nout.close();\r\n\r\n* JSP 페이지 서블릿\r\n- Object page = this;\r\n- ServletConfig config\r\nweb.xml에 있는 초기화 파라미터 사용\r\n\r\n* 외부 환경 정보\r\n- HttpSession session : 브라우져 정보\r\nsession = req.getSession(); 가 선언되어 있음\r\n- ServletContext application : JSP page가 속한 컨텍스트(어플리케이션) 정보\r\napplication.getResourcePaths();\r\napplication.getServerInfo();\r\n- PageContext pageContext : JSP page 자체의 주변 정보, 다른 내장 객체들을 만들어 냄.\r\n\r\n* 에러\r\nThrowable exception (<%@ page isErrorpage=true %>로 설정된 파일만 사용 가능)', '', '', 51, 0),
(230, '', '서대영', '', '2008-07-24 13:48:25', 'JSP', 'jsp 주석처리 종류', '□ html 주석 \r\n\r\n<!-- 주석 -->\r\n- 브라우져 소스 보임\r\n- jsp 소스 보임\r\n- servlet 소스 보임\r\n\r\n\r\n□ jsp 주석\r\n\r\n<%-- 주석 --%>\r\n- 브라우져 소스 안보임\r\n- jsp 소스 보임\r\n- servlet 소스 안보임\r\n- 보안 좋음\r\n\r\n\r\n□ 자바 주석\r\n\r\n<%\r\n// 단일 주석\r\n/* 멀티 \r\n주석 */\r\n%>\r\n- 브라우져 소스 안보임\r\n- jsp 소스 보임\r\n- servlet 소스 보임', '', '', 9, 0),
(231, '', '서대영', '', '2008-07-24 14:01:04', 'JSP', 'JSP 수행 흐름 ★', '* 변환과 컴파일은 최초호출 시 딱 한번만 일어남\r\nMyJSP.jsp -(jsp 문법 체크)-> MyJSP_jsp.java -(java 문법 체크)-> MyJSP_jsp.class\r\n\r\n\r\n□ 수행 흐름\r\n\r\n1. JSP 컨테이너 : JSP 페이지 -> 페이지 구현 서블릿 소스 -> 서블릿 클래스\r\n2. Servlet 컨테이어 : 서블릿 클래스 -> 서블릿 객체\r\n- jspInit() -> _jspService() -> jspDestroy()\r\n\r\n★ jsp의 수정날짜를 보고 java파일을 만든다.\r\n\r\n\r\n□ JSP 페이지 구현 서블릿\r\n\r\n- 실제 톰켓에서 실행했을 때\r\nD:/Tomcat/work/Catalina/localhost/컨텍스트/org/apache/jsp\r\n\r\n- 이클립스에서 실행했을 때\r\nD:/workplace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/work/Catalina/localhost/컨텍스트/org/apache/jsp/', '', '', 21, 0),
(234, '', '서대영', '', '2008-07-24 14:53:15', 'Tomcat', '톰켓 역할', '1. 웹서버 : html처리\r\n2. 웹 어플리케이션 서버 : java, jsp 파일 컴파일\r\n - jsp 컨테이너\r\n - servlet 컨테이너\r\n', '', '', 0, 0),
(235, '', '서대영', '', '2008-07-24 15:47:49', 'JSP', 'include 종류 ★', '□ 정적 include\r\n\r\n<%@ include file="a.jsp" %>\r\n\r\n- 소스 그대로 copy & paste\r\n- 캄파일 시점에서 include (.class 파일 하나)\r\n- 서블릿 소스 하나로 합쳐서 변환\r\n- 맴버 변수 공유 가능\r\n- php의 <? include 와 같음\r\n- 유지보수성 안 좋음 (반영 X)\r\n\r\n□ 동적 include (권장)\r\n\r\n<jsp:include page="jsp, servlet 파일" />\r\n<c:import url="b.jsp" %>\r\n\r\n- 실행 시점 결과만 포함\r\n- 런타임 시점에서 include (.class 파일 둘)\r\n- 서블릭 소스 두개 변환, 두개 클래스\r\n- 맴버 변수 공유 불가\r\n- RequestDispatcher 클래스의 include() 메서드와 비슷\r\n- 유지보수성 좋음 (바로 반영)\r\n\r\n- <c:import>는 외부 app 또는 외부 server 끼지 inlcude 가능', '', '', 41, 0),
(238, '', '서대영', '', '2008-07-25 10:43:43', 'JSP', '액션 태그', 'MVC2 모델에서 거의 쓸 일이 없음...\r\n\r\n\r\n1. <jsp:include page="jsp, servlet 파일" flus="true|false" /> \r\n- JSP페이지 모듈화 : 반복되는 코드를 따로 작성해서 한 페이지 내에 포함\r\nflush="true" 라는 속성을 사용하여 만약 jsp:include 를 만나기 전까지 \r\n페이지 결과를 버퍼링 하고 있었다면 전부 쏟아버리고 (flush, 출력해버리고) \r\njsp:include 결과를 화면에 표시\r\n\r\n2. <jsp:forward>\r\n  <jsp:param name=value />\r\n</jsp:forward>\r\n- 조건에 따라 서로 다른 페이지로 분기\r\n- 요청을 그대로 가지고 매개변수와 함께 페이지 이동\r\n- RequestDispather.forward 랑 동일 (getParmater()를 사용한다는 점 빼고)\r\n- 동일 웹서버의 동일 어플리케이션에서만 가능\r\n\r\n3. <jsp:useBean />\r\n4. <jsp:setProperty />\r\n5. <jsp:getProperty />\r\n- 빈관련 태그 : 자바빈즈 객체를 생성하고 맴버변수값 세팅 및 호출\r\n\r\n\r\n※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※\r\n<jsp:tag />\r\n<jsp:plugin type="applet" codebase="appletsrc" code="Blink" height="200" width="200" >  \r\n- 애플릿 지원\r\n\r\n', '', '', 34, 0),
(237, '', '서대영', '', '2008-07-25 09:34:02', 'JSP', '에러 처리 ★', '1) error 처리 페이지 만들기\r\n\r\n<%@ page isErrorPage="true" import="gomgil.common.GomgilException" %>\r\n\r\n2) web.xml 에 에러 페이지 등록\r\n\r\n	<error-page>\r\n		<exception-type>gomgil.common.GomgilException</exception-type>\r\n		<location>/common/error.jsp</location>\r\n	</error-page>\r\n\r\n3) error 발생 가능성 있는 페이지\r\n\r\n<%@ page errorPage="error.jsp"%>\r\n\r\n\r\n\r\n\r\n사실 톰켓에서 3번은 필요 없는 듯\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/imbyuri?Redirect=Log&logNo=110019779966', 'http://blog.naver.com/imbyuri?Redirect=Log&logNo=110019779966', '', 13, 0),
(239, '', '서대영', '', '2008-07-25 14:25:57', 'JSP', '빈태그, 자바빈즈', '□ 자바빈즈 규칙\r\n\r\n- package 선언 : default package 허용 X\r\n- private field 선언 : setter(), getter()\r\n- public method() 선언\r\n- public 기본생성자 선언\r\n\r\n\r\n□ 액션태그 사용법\r\n\r\n1. 자바빈즈 객체생성하여 타입과 이름 부여하고 공유 범위\r\n 결정\r\n\r\n<jsp:useBean id="test" class="sds.edu.beans.TestBean" scope="page|request|session|application" type="java.lang.Object" />\r\n- 자바코드 \r\nimport sds.edu.beans.TestBean;\r\nObject test = new TestBean(); 와 동일\r\n\r\n* scope 속성 : 빈의 유지 범위\r\n - page : 한 페이지 내에서만\r\n - request : include, forward 를 통해 참조하는 페이지까지...\r\n - session : 브라우져가 닫힐 때 까지\r\n - application : 하나의 application에서 공용으로 여러 페이지에서 사용\r\n\r\n2. setter 메서드 호출\r\n\r\n방법 1) <jsp:setProperty name="test" property="*" />\r\n- 자바코드 test.setXxx(response.getParameter("xxx")); 와 동일\r\n\r\n방법 2) <jsp:setProperty name="test" property="id" />\r\n- 자바코드 test.setId(response.getParameter("id")); 와 동일\r\n\r\n방법 3) <jsp:setProperty name="test" property="id" param="id2" />\r\n- 자바코드 test.setId(response.getParameter("id2")); 와 동일\r\n\r\n방법 4) <jsp:setProperty name="test" property="id" value="java" />\r\n- 자바코드 test.setId("java"); 와 동일\r\n\r\n3. getter 메서드 호출\r\n\r\n<jsp:getProperty name="test" property="id" />\r\n- 자바코드 test.getId(); 와 동일', '', '', 27, 0),
(240, '', '서대영', '', '2008-07-29 22:11:35', 'Oracle', '에러 메세지', 'ORA-00984: 열을 사용할 수 없습니다\r\n\r\n- 문자열에 ''''를 안 붙였을 때', '', '', 4, 0),
(241, '', '서대영', '', '2008-07-29 23:07:00', 'CSS', '테이블', 'border-collapse:collapse\r\n- 테이블 경계 얇게', '', '', 1, 0),
(242, '', '서대영', '', '2008-07-30 08:33:09', 'CSS', 'CSS 삽입법', '□ 링크\r\n\r\n<link  type="text/css" rel="stylesheet" href="/css/common.css">\r\n\r\n* link 태그는 특이하게 closing tag를 사용하지 않으므로 주의\r\n* rel : relationship\r\n\r\n\r\n□ 파일마다\r\n\r\n<style>\r\n태그명.CLASS명 {속성:값};\r\n</style>', NULL, '', 15, 0),
(243, '', '서대영', '', '2008-07-30 09:37:43', 'CSS', '웹폰트 사용법', '@font-face {\r\nfont-family: 웹폰트이름;\r\nfont-style: normal;\r\nfont-weight: normal;\r\nsrc: url(웹폰트경로); \r\n}\r\n\r\n@font-face {font-family:티티체; src:url(../font/ttche9.eot);}\r\n@font-face {font-family:영원체; src:url(../font/forever10.ewf);}\r\n@font-face {font-family:친구체; src:url(../font/chin9.eot);}\r\n@font-face {font-family:휴먼모닥; src:url(../font/humonmodak12.eot);}', '', '', 8, 0),
(244, '', '서대영', '', '2008-07-31 22:19:54', 'Eclipse', '기본 Server 세팅', '[Windows] - [Preference] - [Server] - [Runtime Environmnets]', '', '', 1, 0),
(245, '', '서대영', '', '2008-08-04 15:18:54', 'JSP', '첨부 실행없이 무조건 다운로드', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/kimjungjin84?Redirect=Log&logNo=10015233482', 'http://blog.naver.com/kimjungjin84?Redirect=Log&logNo=10015233482', '', 5, 0),
(246, '', '서대영', '', '2008-08-04 22:32:54', 'HTML', '[tag] button', '<button onClick="OpenDownloader()">다운로드</button>', '', '', 1, 0),
(247, '', '서대영', '', '2008-08-14 12:06:48', 'Java', '[Acroedit] 사용자 도구 설정', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/seunglak?Redirect=Log&logNo=100016034810', 'http://blog.naver.com/seunglak?Redirect=Log&logNo=100016034810', '', 0, 0),
(248, '', '서대영', '', '2008-08-16 03:01:34', 'Java', '프로그램 작성 순서', '문제 분석\r\n\r\n입출력 설계\r\n\r\n논리(알고리즘) 설계\r\n\r\n코딩\r\n\r\n실행\r\n\r\n수정', '', '', 1, 0),
(249, '', '서대영', '', '2008-08-18 10:06:38', 'Java', '확장for문 : 편리한 for 문법', 'for(Object obj : Collection) {System.out.println(obj);}', '', '', 9, 0),
(250, '', '서대영', '', '2008-08-18 10:47:55', 'Eclipse', '이클립스 구동하자마자 생기는 오류 해결 (eclipse.ini)', '일단 한글이 포함된 경로에 있으면 안됨\r\n\r\n[ 최적화 ]\r\n\r\n-vmargs\r\n-Dosgi.requiredJavaVersion=1.6\r\n-Xverify:none\r\n-XX:+UseParallelGC\r\n-XX:-UseConcMarkSweepGC\r\n-XX:+AggressiveOpts\r\n-XX:PermSize=128M\r\n-XX:MaxPermSize=128M\r\n-XX:MaxNewSize=128M\r\n-XX:NewSize=128M\r\n-Xms512m\r\n-Xmx512m\r\n\r\n----------------------------------------------------------\r\n\r\n-Xms256m\r\n-Xmx256m\r\n요거만 해주면 됨\r\n\r\n-------------------------------------------------------------------\r\neclipse.ini 오류해결\r\n아래 내용으로 eclipse.ini 파일을 대체한다.\r\n\r\n-vm\r\nD:/jdk1.6.0_17/bin\r\n-startup\r\nplugins/org.eclipse.equinox.launcher_1.0.201.R35x_v20090715.jar\r\n--launcher.library\r\nplugins/org.eclipse.equinox.launcher.win32.win32.x86_1.0.200.v20090519\r\n-product\r\norg.eclipse.epp.package.jee.product\r\n--launcher.XXMaxPermSize\r\n256M\r\n-showsplash\r\norg.eclipse.platform\r\n--launcher.XXMaxPermSize\r\n256m\r\n-vmargs\r\n-Dsun.lang.ClassLoader.allowArraySyntax=true\r\n-Dosgi.requiredJavaVersion=1.5\r\n-Xms40m\r\n-Xmx512m\r\n\r\n\r\n\r\n============================== FILE ==============================\r\neclipse.ini', '', 'eclipse.ini', 28, 0),
(251, '', '서대영', '', '2008-08-18 14:45:54', 'Java', '도스 설정', 'JDK  설치 - javac.exe (컴파일러), javadoc.exe .....\r\nC:Javajdk1.5.0_15\r\n\r\nJRE 설치 - java.exe (JVM) - C:WINDOWSsystem32\r\nC:Javajre1.5.0_15\r\n\r\nJAVA가 설치된 후에는 환경변수를 설정 \r\n\r\n시작 -> 설정 -> 제어판 -> 시스템 -> 고급탭\r\n\r\n환경변수를 클릭 (ststem변수에 설정)\r\n\r\nJAVA_HOME : C:/Java/jdk1.5.0_15\r\nCLASSPATH : .;%JAVA_HOME%/libtools.jar\r\n(.; 는 현재경로를 의미함)\r\n\r\n기존의 PATH에 다음을 맨 앞에 추가\r\n%JAVA_HOME%/bin; \r\n\r\n\r\n시작 -> 실행 -> cmd [enter]\r\n\r\njavac [enter] ------ JAVA_HOME, PATH 가 잘못 설정.\r\n\r\njavac HelloWorld.java -------- JAVA_HOME, PATH 가 잘못 설정.\r\n\r\njava HelloWorld [enter] ------ class를 못찾는다. - CLASSPATH가 잘못설정', '', '', 12, 0),
(252, '', '서대영', '', '2008-08-18 14:59:40', 'Java', '[도스] 임시 클래스패스에 추가', 'set CLASSPATH=%CLASSPATH%;c:\\temp', '', '', 1, 0),
(253, '', '서대영', '', '2008-08-18 16:12:38', 'Eclipse', '화면설정', '□ Perspective\r\n\r\n* 작업 용도에 따른 전체 화면 구성 (Java 모드, J2EE 모드, 디버그 모드...)\r\n* [Window] - [Open Perspective] 에서 추가 가능\r\n* 화면 우측 상단 [>>] 버튼을 통해 전환 가능\r\n\r\n□ View\r\n\r\n* 하나의 Perspective를 이루고 있는 여러 개의 창\r\n* [Window] - [Show View] 에서 추가 가능 \r\n* 중간에 있는 View를 Editor라고 부름', '', '', 3, 0),
(254, '', '서대영', '', '2008-08-18 16:15:51', 'UML', 'UML의 개념', 'IT시스템을 바라보는 관점에 따른 그림\r\n\r\ncf) 한 건축물이 보는 사람에 따라 조감도, 설계도, 배관도가 있는 것 처럼...', '', '', 0, 0),
(255, '', '서대영', '', '2008-08-18 16:18:01', 'UML', '[Eterprise Architect] 설치법', 'easetupfull_build_815_20070814.exe 를 실행시키고 무조건 다음.\r\n\r\n바탕화면에 바로가기를 실행시키고 Key를 {} 통째로 붙여넣고 이름과 회사 입력.\r\n\r\njet35sp3.exe 를 설치해야 XP에서 잘 돌아간다.', '', '', 3, 0),
(256, '', '서대영', '', '2008-08-18 23:34:55', 'EJB', 'EJB 개념', '□ 정의\r\n\r\n* Servlet, JSP, JDBC 등과 함께 J2EE(서버측 자바 웹애플리케이션 산업 표준)의 기능 중 하나\r\n* 분산 애플리케이션을 지원하는 컴포넌트 기반의 객체\r\n* MVC2 모델에서 비지니스 로직을 담당 (Serverlet 컨트롤 로직, JSP 표현 로직)\r\n\r\n□ 사용법\r\n\r\n* JBoss와 같은 EJB Container에 올려서 서비스 \r\n\r\n□ 특징\r\n\r\n* 컴포넌트 기반의 객체 - 재사용성\r\n* 분산 애플리케이션 지원 \r\n- 원격 사이트에서 필요한 기능을 EJB로 제공\r\n- 현재 사이트는 이 EJB를 호출\r\n* 대량, 분산 트렌젝션 - 현재, 원격 사이트 동시에 롤백\r\n\r\n□ 종류\r\n\r\n* Session Bean\r\n- VO ?? (나의 추측)\r\n- 무상태 : 속도를 위해 객체 풀에 넣어두고 재사용\r\n- 상태유지 : 장바구니처럼 클라이언트 상태 유지\r\n\r\n* Message Driven Bean \r\n- JMS(Java Message Service) 서비스에서 리스너 역할\r\n\r\n* Entitiy Bean\r\n- DAO ?? (나의 추측)\r\n- 빈하나가 DB 테이블의 하나의 행의 데이터\r\n- SQL 없이 DB 작업 \r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://cafe.naver.com/oznet.cafe?iframe_url=/ArticleRead.nhn%3Farticleid=299', 'http://cafe.naver.com/oznet.cafe?iframe_url=/ArticleRead.nhn%3Farticleid=299', '', 13, 0),
(257, '', '서대영', '', '2008-08-19 10:11:59', 'Java', 'Java의 메모리 구조', '□ 메소드 영역 (Method Area) \r\n - 메소드의 컴파일된 코드 \r\n - class 변수 (static variable) \r\n\r\n□ 스택 영역 (Stack Area) \r\n - 매개 변수 \r\n - 지역 변수 \r\n\r\n□ 힙 영역 (Heap Area) \r\n - 객체 \r\n  (class 객체, 배열 객체등) \r\n\r\n\r\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\r\n\r\n□ Perm 영역\r\n\r\n* main함수가 실행되기 위해 메모리에 클래스 자제가 올라간다.\r\n* 이 때 그 클래스의 static 필드와 모든 메서드(static 관계없이)들이 메모리에 올라간다.\r\n* 그리고 다른 클래스들이 필요할 때 마다 첫번 째 한번은 이 perm영역에 클래스 정보를 올려야 다음에 또 사용할 때 계속 참조할 수 있다. (어떤 static 변수가 있는지 어떤 함수가 있는지...)\r\n* 한 번 올려지면 JVM이 끝날 때 까지 변경 불가.\r\n\r\n□ Heap 영역\r\n\r\n* 인스턴스가 생성되면 필드가 (메서드는 perm 영역에 있음) 올라간다.\r\n\r\n□ Stack 영역\r\n\r\n* 메서드(static 포함)가 실행될 때 stack entry가 만들어진다.\r\n* stack entry안에 메서드의 매개 변수들이 저장된다.\r\n* JVM이 시작되면 stack에 main함수와 arg[]변수가 올라온다.\r\n* stack에 아무 것도 남아 있지 않으면 JVM이 종료된다.', '', '', 9, 0),
(258, '', '서대영', '', '2008-08-19 10:12:58', 'Tomcat', '클래스 바뀔 때 마다 WAS리 리셋해주는 이유', 'WAS도 JVM 위에서 돌아가기 때문에 \r\n리셋을 해줘야 메모리에 변경된 클래스 내용이 반영된다.\r\n\r\n또한 PC의 시간을 정확히 맞춰놔야 한다.\r\nWAS에서 컴파일할 때 class가 수정된 시간을 보고 다시 메모리에 올리기 때문에...', '', '', 2, 0),
(259, '', '서대영', '', '2008-08-19 13:58:25', 'Servlet', '클래스(서블릿) 이름이 유동적인 경우 인스턴스 생성하는 방법', '클래스 이름이 고정적인 경우\r\n\r\nHttpServlet servlet = new 서블릿이름();\r\n\r\n쓰서 클래스의 인스턴스를 생성하면 좋겠지만,\r\n\r\n\r\n클래스 이름이 유동적인 경우 \r\n클래스 이름을 외부에서 받아와서 \r\nClass.forName() 함수를 통해\r\n클래스 인스턴스를 생성한다.\r\n\r\nString className = 외부에서 받아온 서블릿이름;\r\nClass class = Class.forName(className);\r\nHttpServlet servlet = (HtppServlet)class.newInstance();', '', '', 12, 0),
(260, '', '서대영', '', '2008-08-19 15:10:44', 'Oracle', '네트워크 설정 파일', '* 위치 : C:\\oracle\\product\\10.2.0\\db_1\\NETWORK\\ADMIN\r\n\r\n- listener.ora : 다른 원격 컴퓨터가 내 컴퓨터의 DB에 접속 프로필을 설정\r\n- tnsnames.ora : 내 컴퓨터가 다른 원격 컴퓨터의 DB에 접속 프로필을 설정 \r\n\r\n\r\nClient sqlplus | tnsnames.ora ----------->  listener.ora | Server oracleDB\r\n', '', '', 10, 0),
(261, '', '서대영', '', '2008-08-19 17:57:11', 'Weblogic', '로그 파일 심각도 설정 (필수)', '[시작] - [모든 프로그램] - [BEA Products] - [User Projects] - [jblog] - [Admin Server Console]\r\n\r\n도메인 구조 창에서,\r\n\r\n* [환경] - [서버] - 중앙에 AdminServer(관리) 클릭\r\n* [로깅]탭으로 이동\r\n* 좌측 하단 고급 클릭\r\n* [잠금 및 편집 버튼]\r\n* 로그 파일 : 심각도 수준 : 을 info로 변경\r\n* 좌측 상단 [저장 버튼]\r\n* 최 좌측 상단 [변경 내용 활성화] \r\n\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://localhost:7001/console/', 'http://localhost:7001/console/', '', 14, 0),
(262, '', '서대영', '', '2008-08-19 18:11:49', 'ANT', 'ANT 설치 및 도스 세팅', '1. http://ant.apache.org/ 에 들어가서 최신버젼을 다운받는다.\r\n\r\n2. Java가 설치된 디렉토리에 압축을 푼다. ex) D:\\Java\\apache-ant-1.7.1\r\n\r\n3. 환경변수에 추가한다.\r\n\r\n- ANT_HOME = D:\\Java\\apache-ant-1.7.1\r\n- PATH = %ANT_HOME%\\bin;\r\n\r\n4. C:\\>ant\r\nBuildfile: build.xml does not exist!\r\nBuild failed\r\n라고 나오면 정상으로 설치된 것이다.\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://ant.apache.org/', 'http://ant.apache.org/', '', 6, 0),
(263, '', '서대영', '', '2008-08-19 18:23:46', 'ANT', '이클립스에서 Ant 사용', '□ 환경 설정 (%ECLIPSE_HOME%/plugins 에 있는 디폴트 Ant Library사용해도 무방)\r\n\r\n1. [Window 메뉴] - [Preferences 메뉴] \r\n\r\n2. [Ant] - [Runtime] - [And Home 버튼]\r\n\r\n3. %ANT_HOME% 경로를 지정 - 확인\r\n\r\n4. [Window 메뉴] - [Show View 메뉴] - [Ant]\r\n\r\n\r\n□ 실행\r\n\r\n1. 프로젝트명위에서 우버튼 [New] - [Files].\r\n\r\n2. bulid.xml 파일을 만든다.\r\n\r\n3. 만든 build File을 화면의 [Ant  뷰]로 끌어온다.\r\n\r\n4. [Ant 뷰]에서 task 단위 또는 전체를 실행시킨다.\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://cafe.naver.com/javainjeju.cafe?iframe_url=/ArticleRead.nhn%3Farticleid=82', 'http://cafe.naver.com/javainjeju.cafe?iframe_url=/ArticleRead.nhn%3Farticleid=82', '', 10, 0),
(264, '', '서대영', '', '2008-08-20 00:35:45', 'EJB', '무상태 세션빈', '□ 무상태 세션빈 개념\r\n \r\n- 하나의 빈 객체를 EJB 인스턴스 풀에 넣어 여러 클라이언트가 공유\r\n\r\n- 생명주기(개수, 생성, 소멸)은 EJB 컨테이너가 관리\r\n\r\n- 클라이언트 정보를 유지 하는 것이 의미가 없음\r\n\r\n\r\n\r\n□ 무상태 세션빈 작성법 (간단한 덧셈 예제) \r\n\r\n\r\n# 1. Home Interface와 Remote Interface와 Bean Class를 작성한다.\r\n \r\n\r\n1) Home Interface\r\n\r\n- javax.ejb.EJBHome 인터페이스를 상속받는다.\r\n\r\n- 빈 클래스를 생성, 검색, 삭제할 수 있는 메소드를 선언한다.\r\n \r\n\r\n---------- Start of AddHome.java -------------------------------------------------------------\r\n\r\nimport java.rmi.* ;\r\n\r\nimport javax.ejb.* ;\r\n\r\npublic interface AddHome extends EJBHome {\r\n\r\n    public Add create() throws CreateException, RemoteException {}\r\n\r\n}\r\n\r\n// 홈 인터페이스의 create()의 인자수와 형식은 빈클래스의 ejbCreate()와 일치하도록 한다\r\n\r\n// 무상태 세션빈을 작성할 경우 인자가 없는 create()를 만들어야 한다 ★\r\n\r\n// create()의 return형식은 원격 인터페이스의 형식과 일치하도록 한다\r\n\r\n// create()는 throws CreateException, RemoteException을 갖도록 한다\r\n\r\n---------- End of AddHome.java ---------------------------------------------------------------\r\n\r\n\r\n2) Remote Interface\r\n\r\n- javax.ejb.EJBObject 인터페이스를 상속받는다.\r\n\r\n- 클라이언트가 호출 할 비지니스 메소드를 정의하고 있다.\r\n\r\n\r\n---------- Start of Add.java ---------------------------------------------------------------------\r\n\r\nimport java.rmi.* ;\r\n\r\nimport javax.ejb.* ;\r\n\r\npublic interface Add extends EJBObject {\r\n\r\n    public int getAdd(int num1, int num2) throws RemoteException{}\r\n\r\n}\r\n\r\n---------- End of Add.java ----------------------------------------------------------------------\r\n\r\n\r\n3) Bean Class\r\n\r\n- javax.ejb.SessionBean 인터페이스를 구현한다.\r\n\r\n- 원격 인터페이스에서 선언한 비지니스 메소드를 실질적으로 구현한다.\r\n\r\n- 빈 클래스에서는 원격&홈 인터페이스를 구현하지 않는다.\r\n\r\n\r\n---------- Start of AddEJB.java ----------------------------------------------------------------\r\n\r\nimport java.util.* ;\r\n\r\nimport javax.ejb.* ;\r\n\r\npublic class AddEJB implements SessionBean {\r\n\r\n    public int getAdd(int num1, int num2) {\r\n\r\n        return num1 + num2 ;\r\n\r\n    }\r\n\r\n    public AddEJB() {} // 생성자\r\n\r\n    public void ejbCreate() {} // 만들고..\r\n\r\n    public void ejbRemove() {} // 지우고..\r\n\r\n    public void ejbActivate() {} // 작동시키고..\r\n\r\n    public void ejbPassivate() {} // 작동중지 시키고..\r\n\r\n    public void setSessionContext(SessionContext sc) {} // 세션을 짜맞춘다..\r\n\r\n}\r\n\r\n---------- End of AddEJB.java -----------------------------------------------------------------\r\n\r\n\r\n\r\n# 2. AddHome.java & Add.java & AddEJB.java 3개 파일을 컴파일 한다.\r\n\r\n\r\n# 3. deploy 한다.\r\n\r\n  배치는 EJB컨테이너에서 세션빈을 아용할 수 있게 만드는 것을 의미한다.\r\n\r\n  배치된 세션빈은 JNDI명을 이용하여 JNDI - lookup으로 참조한 후 사용할 수 있다.\r\n\r\n  EJB의 해당 객체는 홈 인터페이스와 원격 인터페이스를 구현하고 있으므로.\r\n\r\n  이들을 이용하여 해당 EJB객체에 접근할 수 있다.\r\n\r\n  META-INF 디렉토리를 jar파일로 압축해서 배포를 하는데.\r\n\r\n  압축된 이 파일을 EJB jar파일이라 한다.\r\n\r\n  주의할 점은 META-INF디렉트리를 만들때 대문자로만 작성해야 한다.\r\n\r\n  JAVA_HOMEbin 디렉토리에 있는 jar.exe로 압축 할 수도 있다.\r\n\r\n  c:classessessionbeanadd 디렉토리로 이동한 후.\r\n\r\n  jar cvf add.jar *. * 라고 명령어를 작성한다.\r\n\r\n\r\n# 4. addform.jsp와 add.jsp를 작성한다\r\n\r\n\r\n---------- Start of addform.jsp -------------------------------------------------------\r\n\r\n<html>\r\n    <title>EJB 와 덧셈</title>\r\n</head>\r\n<body>\r\n<-- post 방식으로 add.jsp 를 호출합니다. add.jsp 는 EJB객체를 이용하는 jsp 파일입니다. -->\r\n<form method="post" action="add.jsp">\r\n    값 1: <input type="text" name="num1"><br>\r\n    값 2: <input type="text" name="num2"><br>\r\n    <input type="submit" value="계산">\r\n</form>\r\n</body>\r\n</html>\r\n\r\n---------- End of addform.jsp -------------------------------------------------------\r\n\r\n\r\n---------- Start of add.jsp ----------------------------------------------------------\r\n\r\n<%@ page contentType = "text/html; charset=euc-kr" %>\r\n<%@ page import="javax.naming.*" %>\r\n<%@ page import="javax.rmi.PortableRemoteObject" %>\r\n<%@ page import="AddHome" %>\r\n<%@ page import="Add" %>\r\n<html>\r\n<head>\r\n    <title>EJB 와 덧셈</title>\r\n</head>\r\n<body>\r\n<%\r\n\r\n    /* addform.html로부터 2개의 문자열로 구성된 숫자값을 전달받아.\r\n    Integer 클래스를 이용하여 정수화 하는 부분입니다. */\r\n\r\n    int num1 = 0 ;\r\n    int num2 = 0 ;\r\n\r\n    try {\r\n        num1 = Integer.parseInt(request.getParameter("num1")) ;\r\n    } catch(Exception e) {\r\n        num1 = 0 ;\r\n    }\r\n\r\n    try {\r\n        num2 = Integer.parseInt(request.getParameter("num2")) ;\r\n    } catch(Exception e) {\r\n        num2 = 0 ;\r\n    }\r\n\r\n    Context initial = new InitialContext() ; \r\n\r\n    // 세션빈의 객체 인터페이스의 레퍼런스를 가져온다.. 인자값은 JNDI 이름과 일치해야 한다.\r\n    Object obj = initial.lookup("MyAdd") ; \r\n\r\n    // 홈 객체 인터페이스의 레퍼런스를 가져온다.\r\n    AddHome home = (AddHome)PortableRemoteobject.narrow(obj, AddHome.class) ;\r\n\r\n    //EJB객체를 생성한다.\r\n    Add a1 = home.create();\r\n\r\n    out.println("결과값 :" + a1.getAdd(num1, num2)) ;\r\n\r\n%>\r\n</body>\r\n</html>\r\n\r\n---------- End of add.jsp -----------------------------------------------------------\r\n\r\n\r\n# 5. web component를 만든 후, 다시 deploy 한다.\r\n\r\n\r\n\r\n※ JNDI(Java Naming and Directory Interface)\r\n- 자바 객체를 네이밍/디렉토리 서비스에 등록, 삭제, 검색할 수 있는 방법 제공\r\n- 각각의 서버에서 운영되는 객체를 서버상에서 이용하기 위한 방법\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://memolog.blog.naver.com/milkboy713/62', 'http://memolog.blog.naver.com/milkboy713/62', '', 10, 0),
(265, '', '서대영', '', '2008-08-20 09:25:41', 'UML', '[Eterprise Architect] 클래스 다이어그램 만들기', '* Eterprise Architect 실행\r\n\r\n* [File] - [New Project]\r\n\r\n* 파일 이름과 경로 지정\r\n\r\n* Select moel(s) 창에서 [Cancel]\r\n\r\n* 우측 상단 Project Browser 셀에서, Model 에서 우클릭 [New View]\r\n\r\n* Create New View 대화 상자에서 Name 지정, Class View 선택, [OK]\r\n\r\n* 우측 상단 Project Browser 셀에서, Class View 에서 우 클릭 [Add] - [Add Digram]\r\n\r\n* New Diagram 대화 상자에서 [UML Structural] - [Class] -[OK]\r\n\r\n* 좌측 상단의 Class Elements 셀에 있는 아이콘을 긁어와서 클래스를 만든다.\r\n\r\n* 만들어진 클래스 위에서 우클릭 후 [Attribute], [Opperation] 통해 필드와 메서드를 추가할 수 있다.\r\n\r\n* 최즉 상단의 Class Relationships 셀에 있는 아이콘을 긁어와서 클래스 사이의 관계를 만든다.\r\n\r\n* Associatio 관계선 위에서 더블 클릭하면 Target Direction, Complexity 등을 설정한다.', '', '', 4, 0),
(266, '', '서대영', '', '2008-08-20 09:39:21', 'Java', '직렬화 인터페이스', 'java.io.Serializable;\r\n원격 전송을 원하는 클래스에서 상속해야 한다.\r\n\r\nserialversionID 는 애플리케이션 내에서 유일해야함\r\n\r\ntransient 키워드를 사용하여 특정 필드만 직렬화에서 제외 가능 (역직렬화될 때 null을 반환한다.)\r\n\r\n\r\n- mark interface : 메서드가 하나도 없는 인터페이스\r\n- 해당 인터페이스를 구현하고 있는 경우에만 원격으로 전송될 수 있다.\r\n- 필드 역시 직렬화 인터페이스를 구현하거나 기본형이어야 한다.\r\n- ejb가 주고 받는 RMI-IIOP 타입\r\n- DTO (Data Transfer Object)', NULL, '', 7, 0),
(267, '', '서대영', '', '2008-08-20 09:51:13', 'UML', '[Eterprise Architect] Source Code <-> Class Diagram', '□ Class Digram -> Source Code\r\n\r\n우측상단 Project Browser 셀에서,\r\nClass View위에 우버튼\r\nCode Engineering >> Generate Source Code\r\n\r\n\r\n□ Source Code -> Class Digram\r\n\r\n우측상단 Project Browser 셀에서,\r\nClass View위에 우버튼\r\nCode Engineering >> Import Source Directory\r\n\r\n\r\n□ Source Code <-> Class Digram\r\n\r\n우측상단 Project Browser 셀에서,\r\nClass View위에 우버튼\r\nCode Engineering >> Synchronize Package with Code\r\n\r\n\r\n', '', '', 3, 0),
(268, '', '서대영', '', '2008-08-20 10:36:14', 'Java', '추상클래스와 인터페이스의 차이', '추상클래스는 다중 상속이 안 된다!!\r\n--------------------------\r\n\r\nis a 관계가 성립되면 추상 클래스이고 단지 메서드의 스팩만 정의해주는 것은 인터페이스다.\r\n\r\n예) \r\n\r\nabstract class 어류 ◁─── class 상어.fishSwim(long km);\r\nabstract class 조류 ◁─── class 팽귄.birdSwim(int m);\r\nabstract class 포유류 ◁─── class 고래.slowSwim(short cm);\r\n\r\n- 어류, 조류, 포유류는 실질적으로 존재하는 객체가 아니기 때문에 말그대로 추상적인 abstarct class로 선언한다.\r\n\r\n- 상어, 팽귄, 고래는 모두 다른 Super Class를 가지지만, 공통적인 method를 가진다. 이러한 metod들의 스펙을 동일하게 지정해줄 때 interface를 사용한다.\r\n\r\ninterface Swimable.swim(int m);  ◁------ class 상어, 팽귄, 고래\r\n\r\n- 위 처럼 상어, 팽귄, 고래 클래스들이 Swimable 인터페이스를 구현하게 하면 반드시 헤험치다 함수의 이름을 swim, 리턴타입을 void, 파라미터 타입을 int로 강제하게 된다.\r\n\r\nSwimable s1 = new 상어();\r\ns1.swim(1000);\r\nSwimable s2 = new 팽귄();\r\ns1.swim(100);\r\nSwimable s3 = new 고래();\r\ns1.swim(1);\r\n\r\n- 위처럼 Swimable 인터페이스 레퍼런스 변수로 각 클래스의 인스턴스를 가르쳐서 같은 타입의 레퍼런스 변수로 각 클래스의 다른 메서드를 수행시킬 수 있다.\r\n=> 다형성.\r\n\r\n\r\n\r\n\r\n\r\n----------------------------------------------------------\r\n    마지막으로, 추상클래스나 인터페이스의 경우 첫번째 자식의 입장에서 본다면 별 다른 차이를 못 느낄 수도 있다.\r\n    하지만 첫번째 자식만 있을 경우라면 차라리 인터페이스를 사용하자. 추상클래스의 원래 의미를 생각한다면 상속\r\n    받은 두번째(손자) 혹은 세번째(증손자) 자손 해서 아래로 아래로 계속 상속 받는 자식들이 필요하다면 그 때 추상\r\n    클래스를 사용하는게 좋을 듯 하다.\r\n\r\n\r\n\r\nhttp://kin.naver.com/qna/detail.nhn?d1id=1&dirId=1040201&docId=70563086&qb=7Ja47KCcIOyduO2EsO2OmOydtOyKpCDstpTsg4Eg7YG0656Y7Iqk&enc=utf8&section=kin&rank=1&search_sort=0&spq=0&pid=gw5CAc5Y7thsscZsRzCssc--071771&sid=TwJkiAA3Ak8AAHEAHTU\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://211.233.63.3/board.aspx?BoardIdx=23472&Mode=2&Name=asptip&Page=1', 'http://211.233.63.3/board.aspx?BoardIdx=23472&Mode=2&Name=asptip&Page=1', '', 6, 0),
(269, '', '서대영', '', '2008-08-20 14:50:37', 'UML', '클래스 다이어그램의 관계(Relations) 표시', '□ 상속 (Genrallization)\r\n\r\n[Sub class] ───▶ [Super class]\r\n\r\n- Sub class가 Super class의 상속을 받을 때\r\n- class Sub extends Super \r\n- Sub instance is a Super instance 관계 일 때\r\n\r\n\r\n□ 구현 (Realization)\r\n\r\n[Implementing class] ------▶ [Interface]\r\n\r\n- class Implementig implements Interface\r\n- Implementing class가 Interface의 메서드를 구현할 때\r\n\r\n\r\n□ 의존 (Dependecy)\r\n\r\n[Depending class] ------> [Depended class]\r\n\r\n- class Depending throws Depended {\r\n\r\n    Depended method() {...}\r\n    void method(Depended d) {...}\r\n    void method() {\r\n        Depended d;\r\n    }\r\n\r\n}\r\n- Depending class가 Depended class를 반드시 필요로 할 때\r\n- 즉 Depending class의 메서드의 리턴, 파라미터, 지역변수의 타입이 Depended 일 때\r\n\r\n\r\n□ 연관 (Association)\r\n\r\n[Associating class] (0...*) ───> (1) [Associated class]\r\n\r\nex) 댓글 (0...*) ───> (1) 포스트\r\n                       \r\n- class Associating class {\r\n\r\n    Associated a;\r\n\r\n}\r\n- Associating class가 Associated class를 참조할 때\r\n- Associating instance has a Associated instance 관계 일 때\r\n- 즉 Associating class가 타입이 Depended 인 필드를 반드시 가질 때', '', '', 10, 0),
(270, '', '서대영', '', '2008-08-20 15:43:39', 'Weblogic', '데이터소스 설정', '[시작] - [모든 프로그램] - [BEA Products] - [User Projects] - [jblog] - [Start Admin Server]\r\n\r\n* [서비스] - [JDBC] - [데이터소스] 중아에 AdminServer(관리) 클릭\r\n* 좌측 상단 [잠금 및 편집]\r\n* [새로 만들기]\r\n* 데이터 소스 속성에서, \r\n- 이름 : 알아서 (ex. OracleDataSource)\r\n- JNDI이름 : context.lookup(string); 함수 호출해서 dataSourse 뽑아올 때 사용할 JDNI이름(룩업키) (ex. JBLOGTXDS)\r\n- DB유형 : Oracle\r\n- DB드라이버 : Oracle XA (분산 트렉젝션 지원)\r\n* 연결속성에서,\r\n- DB 이름 : xe\r\n- host 이름 : localhost\r\n- port : 1521\r\n- 사용자 이름 : scott\r\n- 암호 : tiger\r\n* 구성테스트\r\n* 대상 Admin Server 에 체크\r\n* 데이터소스 목록에, 세가지 필드가 모두 체워져 있으면 성공!', '', '', 12, 0),
(271, '', '서대영', '', '2008-08-20 21:43:02', 'Weblogic', 'Weblogic install 방법', '사용자 정의 설치를 선택하고 Workshop 빼고 설치\r\nMercury 프로파일 도구도 언 체크\r\n마지막에 Quickstart 실행 언 체크', '', '', 8, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(272, '', '서대영', '', '2008-08-20 22:27:52', 'ANT', '빌드파일 작성법', '□ bilud.properties\r\n\r\n* build.xml 파일에서 사용할 변수값 지정\r\n\r\n---------------------- build.properties -----------------------\r\nsrc.dir = ${basedir}/src\r\nbin.dir = ${basedir}/bin\r\njar.dir = ${basedir}/jar\r\ndoc.dir = ${basedir}/doc\r\n------------------------------------------------------------\r\n\r\n□ bilud.xml\r\n\r\n# 주요 엘러먼트\r\n\r\n* project 엘러먼트\r\n\r\n- 최상위 엘리먼트 (root element)\r\n- 프로젝트의 이름과 디폴트 작업타겟, 기본 경로 등을 설정\r\n\r\n* target 엘러먼트\r\n\r\n- 일련의 명령들은 묶은 하나의 작업 단위\r\n- depends 속성 : 의존관계 \r\n\r\n* task 엘러먼트\r\n\r\n- 하나의 명령\r\n- DOS 명령어 : mkdir, copy, delete, echo\r\n- JAVA 명령어 : javac, java, jar, javadoc\r\n\r\n# 기타 엘러먼트\r\n\r\n* property 엘러먼트\r\n- ${변수명}으로 xml 파일 내에서 불러올 변수의 값을 지정하거나 저정 파일(build.properties)를 참조해줌\r\n\r\n* path 엘러먼트\r\n- 클래스 패스가 여러 곳에 산재되어 있는 경우 하나의 레퍼런스 아이디로 참조해줌\r\n\r\n----------------------bilud.xml----------------------------\r\n<project name="HelloAnt" default="all" basedir=".">\r\n	<!-- Set Property -->\r\n	<property file="build.properties" />\r\n	<!-- Set Classpath -->\r\n	<path id="project.class.path">\r\n		<fileset dir="${bin.dir}" includes="**/*.class"/>\r\n	</path>\r\n	<!-- Print Locations -->\r\n	<target name="init">\r\n		<echo message="source location is ${src.dir}"/>\r\n		<echo message="build location is ${bin.dir}"/>\r\n		<echo message="jarfile location is ${jar.dir}"/>\r\n		<echo message="javadoc location is ${doc.dir}"/>\r\n		<echo message="* Start Ant!!"/>\r\n	</target>\r\n	<!-- Compile -->\r\n    <target name="javac" depends="init">\r\n    	<mkdir dir="${bin.dir}"/>\r\n		<javac srcdir="${src.dir}" destdir="${bin.dir}"/>\r\n		<echo message="* Compile Success!!"/>\r\n    </target>\r\n	<!-- Execute -->\r\n	<target name="java" depends="javac">\r\n		<java classname="HelloAnt" classpath="${bin.dir}"/>\r\n		<echo message="* Excute Success!!"/>\r\n	</target>\r\n	<!-- Export to Jar -->\r\n	<target name="jar" depends="java">\r\n	   	<mkdir dir="${jar.dir}"/>\r\n		<jar jarfile="${jar.dir}/ant.jar" basedir="${bin.dir}" includes="**/*.class"/>\r\n		<echo message="* Export Success!!"/>\r\n	</target>\r\n	<!-- Make Javadoc -->\r\n	<target name="javadoc" depends="jar">\r\n		<mkdir dir="${doc.dir}"/>\r\n		<javadoc sourcepath="${src.dir}" sourcefiles="${src.dir}/HelloAnt.java" windowtitle="HelloAnt API" destdir="${doc.dir}" />\r\n		<echo message="* Document Success!!"/>\r\n	</target>\r\n	<!-- Default -->\r\n	<target name="all" depends="javadoc">\r\n		<echo message="* End Ant!!"/>\r\n	</target>\r\n</project>\r\n-----------------------------------------------------------\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://ant.apache.org/manual/index.html', 'http://ant.apache.org/manual/index.html', '', 24, 0),
(273, '', '서대영', '', '2008-08-20 22:28:13', 'ANT', 'ANT란?', '- 자바 프로그램을 자동으로 빌드하고 배치해주는 툴\r\n : class 파일, jar 파일, doc 파일, ejb 파일 들을 자동으로 생성\r\n\r\n- xml 파일로 빌드 스크립트로 작성 : O/S 독립적', '', '', 3, 0),
(274, '', '서대영', '', '2008-08-21 01:12:12', 'ANT', '도스에서 ant 명령', 'C:\\ant>ant\r\n- project의 default target을 빌드\r\n\r\nC:\\ant>ant target명\r\n- project의 해당traget만 빌드\r\n\r\nC:\\>ant -buildfile C:\\ant\\build.xml\r\n- 다른 경로에 있는 project를 빌드\r\n\r\n', '', '', 1, 0),
(275, '', '서대영', '', '2008-08-21 01:24:01', 'Weblogic', '웹애플리케이션 추가 (Weblogic Domain)', '1. [시작] - [모든 프로그램] - [BEA Products] - [Tools] - [Configuration Wizard]\r\n\r\n2. (디폴트)새 Weblogic 도메인 만들기\r\n\r\n3. (디폴트)위에 원, 위에 네모 체크\r\n\r\n4. Username = password : weblogic\r\n\r\n5. (디폴트)개발모드, Sun SDK 1.5\r\n\r\n6. (디폴트)아니오\r\n\r\n7. 도메인이름 : 원하는 Context Root (ex. jblog) / 도메인위치 : (디폴트)\r\n\r\n8. (디폴트)관리 서버 시작 언체크\r\n\r\n9. [시작] - [모든 프로그램] - [BEA Products] - [User Projects] - [jblog] - [Start Admin Server]', '', '', 10, 0),
(276, '', '서대영', '', '2008-08-21 09:38:15', 'DB', '2단계 커밋', '- DB에 있는 Transaction Manager들이 분산트랜젝션을 위해 서로 통신할 때 사용하는 통신규약\r\n\r\n- 트렌잭션을 시작하는 DB가 로그를 남기고 그 내용을 공유하기 위해 트렌젝션에 참여하는 DB들로 메세지를 보냄\r\n\r\n- 그 트렌젝션에 참여하는 모든 DB과 동시에 Commit / Roolback\r\n\r\n- 한 트렌젝션에 다른 트렌젝션일 일부가 되어 하나의 트렌잭션이 된다고 보면 됨 (포함관계)\r\n\r\n- 국민은행 TR [시작]==================================>[종료]\r\n- 우리은행 TR                      [시작]========>[종료]\r\n', '', '', 1, 0),
(277, '', '서대영', '', '2008-08-21 09:41:33', 'JUnit', 'JUnit 사용법', '- 단위(class) 테스트 자동화툴\r\n\r\n\r\n□ Library 추가\r\n - Project Properties\r\n - Java Build Path\r\n - Add Library 버튼 - Junit 선택\r\n - Junit 3 또는 Junit4 선택\r\n - 경로 : eclipse/plugins/org.junt4_4.3.1/junit.jar\r\n\r\n\r\n \r\n\r\n□ Junit3\r\n - TestCase 클래스 상속\r\n - setUp 매서드와 tearDown 메서드 사이에 test로 시작하는 테스트할 함수 위치\r\n□  Junit4\r\n - POJO, annotation방식\r\n\r\n* junit.framework.TestCase클래스를 상속받아 구현한다.\r\n\r\n* 필드 : 테스트할 클래스 타입의 변수\r\n\r\n* 메서드 : 테스트할 클래스 메서드 앞에 test를 붙인다.\r\n\r\n* 가장 먼저, 가장 나중에 호출되는 setUp() 메서드와 tearDwon() 메서드를 오버라이딩 할 수 있따.\r\n\r\n* Run AS -> JUnit Test 를 실행하면, SetUp() 메서드 -> test 메서드들 -> tearDown() 메서드가 차례로 호출되서 테스트가 된다.\r\n\r\n* assertNotNull(Object) 함수를 통해 객체가 생성됐는지 안됐는지 조사할 수 있다.\r\n\r\n\r\n\r\n============================== FILE ==============================\r\nVectorTest.java', '', 'VectorTest.java', 34, 0),
(278, '', '서대영', '', '2008-08-21 14:31:27', 'EJB', 'Class Loader 정책', '-----------------------------\r\nServlet Container / EJB Container\r\n-----------------------------\r\nDomain1 / Domain2\r\n-----------------------------\r\nWAS\r\n-----------------------------\r\nJVM\r\n-----------------------------\r\n\r\n\r\n* JVM\r\n\r\n- classpath 환경변수\r\n- %JAVA_HOME%/jre/lib (Core Library)\r\n- %JAVA_HOME%/jre/ext\r\n\r\n\r\n* Weblogic Domain\r\n\r\n- C:beauser_projectsdomains도메인lib\r\n\r\n\r\n* EJB Container\r\n\r\n- C:beauser_projectsdomains도메인autodeploy\r\n\r\n\r\n* Servlet Container\r\n\r\n- 컨텍스트명/WEBINF/lib\r\n\r\n\r\n=> JVM의 Class Loader가 참조하는 경로의 class파일을 바꾸면 반드시 WAS를 리셋해야 하지만 \r\n\r\n=> WAS상부에 있는 도메인, EJB Container, Servlet Container의 Class Loader가 참조하는 경로의 class파일을 바꾸면 그냥 빌드만 다시해주면 된다.', '', '', 6, 0),
(279, '', '서대영', '', '2008-08-21 16:55:45', 'Weblogic', '배포 (deploy)', '# 배포 : 하드드라이브에 있는 클래스파일들을 WAS로 옮기는 과정\r\n\r\n\r\n1. ant로 자동배치\r\n1) 소스파일을 컴파일하고, \r\n2) C:/bea/user_projects/domains/jblog/autodeploy에 복사한다.\r\n\r\n2. Admin Server Console에서,\r\n[배포]를 클릭한다.\r\n\r\n3. 제대로 배포가 되었다면, 자동배포가 되었다고 목록에 나타난다.\r\n\r\n4. 자동배포가 안된다면, 다시 Weblogic을 실행시키고 도스창을 뛰운 상태로,\r\nant를 다시 실행해서 에러 로그를 확인한다.', '', '', 10, 0),
(280, '', '서대영', '', '2008-08-21 23:47:37', 'JDBC', '요약 정리', '# package : java.sql.*    ,   javax.sql.*\r\n\r\n1) DB접속 interface:  java.sql.Connection\r\n2) SQL준비, 바인딩, 실행 interface : java.sql.Statement (단순sql)\r\n                                            java.sql.PreparedStatement \r\n                                            java.sql.CallableStatement (pl/sql)\r\n3) 데이터를 읽어오는 interface : java.sql.ResultSet (select문을 사용할 경우 사용)\r\n\r\n# JDBC Driver : ojdbc14.jar ( java.sql, javax.sql 인터페이스를 구현하고 있는\r\n                                     클래스의 모음 - 오라클사가 제공)\r\n\r\n데이터베이스 준비, 개발자는 SQL을 알고 있어야 한다.\r\n\r\n-----------------------------------\r\n\r\ninsert, update, delete \r\n\r\n1) db연결\r\n2) sql 을 준비 (ex : insert into emp values ( ?, ? ,? ) )\r\n3) sql 바인딩 (물음표의 수만큼)\r\n4) sql 을 실행\r\n5) db close\r\n\r\n\r\nselect\r\n\r\n1) db 연결\r\n2) sql을 준비 (ex : select .... from emp where id = ? )\r\n3) sql 바인딩 (물음표의 수만큼)\r\n4) sql 을 실행\r\n5) 실행된 결과를 가리키는 커서를 얻게 된다.\r\n6) 가리키는 결과를 한건 읽어온다.\r\n7) 6을 반복 (더이상 읽어올게 없을 때 까지)\r\n8) db close\r\n', '', '', 11, 0),
(281, '', '서대영', '', '2008-08-22 07:39:39', 'EJB', '배포방법', '* UserHome interface, UserRemote interface, UserSessionBean class, User interface, UserImpl abstract classd와 각종 유틸, DAO, VO를 컴파일하고 jar파일로 만들어서  %WAS%/domain이름/autodeploy로 복사한다.\r\n\r\n* Client가 필요한 UserRemote interface, UserHome interface, UserVO class 이렇게 3개의 클래스만 따로 jar로 만들어서 WEB-INF/lib 폴더에 복사한다.', '', '', 3, 0),
(282, '', '서대영', '', '2008-08-22 08:36:51', 'Weblogic', '이클립스에서 구동 및 배포', 'Windows >> Preperences >> Server >> Installed Runtimes >> Add\r\n\r\nBEA WebLogic Server v10.0 선택\r\n\r\nWebLogic Home - C:/bea/wlserver_10.0\r\n\r\nDomain Home -C:/bea/user_projects/domains/사용자도메인명', '', '', 9, 0),
(283, '', '서대영', '', '2008-08-22 09:02:41', 'Servlet', '프로젝트 폴더 구조', 'src ---> JBlogWeb/build/classes ( 컴파일경로)\r\n\r\nJBlogWeb - src\r\n              - build - classes ( 클래스 )\r\n              - j2src\r\n              - WebContent - WEB-INF - lib\r\n                                                  - classes\r\n                                                  - web.xml\r\n                                                  - weblogic.xml\r\n                                  - index.html\r\n                                  - index.jsp\r\n                                  - blog\r\n                                  - common\r\n                                  - css\r\n                                  ........\r\n\r\n--------------------------------------------\r\nWAS 는 web.xml과 weblogic.xml 을 가장먼저 읽어들인다.\r\n\r\nweb.xml\r\n필터설정 : CharacterSetFilter ( *.do )\r\n서블릿설정    : JBlogServlet ( *.do )\r\nwelcome-file-list : index.html, index.htm, index.jsp\r\nhttp://127.0.0.1:7001/JBlogWeb/\r\n\r\n\r\n*.do\r\nIE --- request -----> 필터 -----> 서블릿 (실행)\r\n   <--  response ----  필터 ------ \r\n\r\nweblogic.xml\r\n\r\nworking-dir : C:/jblog/JBlogWeb/j2src   ( JSP --> servlet )\r\ncontext-root : JBlogWeb\r\n\r\nhttp://127.0.0.1:7001/JBlogWeb/\r\n                            =========\r\n                            context-root', '', '', 15, 0),
(284, '', '서대영', '', '2008-08-22 09:05:03', 'Eclipse', '프로젝트의 Library 및 Buld Path 설정', '프로젝트 선택 - 우측버튼 - Properties\r\n- Java Build Path - \r\n\r\n\r\nSoruce 탭 : Default Ouput Path 설정 - 자바 파일이 클래스 파일로 컴파일 되는 경로 잡아주기\r\n\r\nLibraries 탭 : Library 잡아주기, 대부분 프로젝트를 다른 컴퓨터로 그대로 옮겼을 때 엑박 뜨면 이 문제\r\n\r\n', '', '', 3, 0),
(285, '', '서대영', '', '2008-08-22 15:52:50', 'EJB', 'InitialContext 객체', 'InitalContext는 JNDI네이밍서버와 통신하는개체인데,\r\n\r\nJNDI네임을 키로 DataSource나 EJBHome인터페이스를 얻어온다.', '', '', 3, 0),
(286, '', '서대영', '', '2008-08-22 15:55:54', 'EJB', 'servlet에서 사용하는 방법', '프로그래머가 Home과 Remote인터페이스만 만들면 \r\n\r\nEJB 컨테이너가 이 두 인터페이스를 구현해서 JNDI네이밍서버에 저장한다.\r\n\r\nservlet에서는 InitalContext타입객체로 JDNI네이밍서버로부터\r\n\r\nHome인터페이스를 얻어오고,\r\n\r\n이 Home인터페스가 create로 Remote인터페이스를 가져온다.\r\n\r\n이 Remote인터페이스가 비지니스 로직을 수행한다.\r\n\r\n\r\n------------------------------------------------------------\r\n\r\n			// 4) BlogHome을 JNDI네이밍서버에서 찾아와서 BlogRemote를 생성한다.\r\n			BlogHome blogHome = (BlogHome) ServiceLocator.getInstance().getRemoteHome("com.sds.jblog.biz.blog.Blog", BlogHome.class);\r\n			BlogRemote blogRemote = blogHome.create();\r\n			\r\n			// 5) BLOG테이블에 블로그 레코드 하나를 추가한다.\r\n			blogRemote.regBlog(blogVO);', '', '', 3, 0),
(287, '', '서대영', '', '2008-08-22 15:57:16', 'Weblogic', 'EJB 클래스다이어그램', '\r\n\r\n\r\n\r\n============================== FILE ==============================\r\nuserComponent.EAP', '', 'userComponent.EAP', 3, 0),
(884, '', '서대영', '', '2010-08-17 23:45:03', 'JSP', 'JSP 프리컴파일', 'WAS 벤더마다 설정방법이 틀림', '', '', 0, 0),
(288, '', '서대영', '', '2008-08-22 16:25:32', 'Servlet', 'MVC2 모델 수행 흐름', '1. client의 browser가 server의 WAS로 요청을 한다.\r\n(client, server : 컴퓨터 / browser, WAS : 컴퓨터에 설치된 응용프로그램)\r\n\r\n2. WAS는 browser로부터 받은 요청을 분석한다. \r\n- weblogic.xml을 참조해 context root를 확인 \r\n- web.xml을 참조해 어떤 servlet요청인지 그 servlet이 어디 위치해 있는지 확인\r\n- web.xml을 참조해 filter도 확인한다.\r\n\r\n3. filter가 있으면 필터를 수행한다.\r\n- filter는 일반적으로 한국어 인코딩 등을 수행\r\n\r\n4. WAS의 servlet container가 WAS가 받은 요청을 HttpRequest타입 객체로, WAS가 보낼 응답을 HttpRespons타입 객체로 생성한다.\r\n\r\n5. servlet container는 servlet의 init()함수를 호출해 servlet을 실행시킨다.\r\n\r\n6. servlet은 context root 다음에 나오는 servlet path(xxx.do)에 맞는 action클래스를 찾는다.\r\n\r\n7. actionclass는 POJO객체를(또는 EJB객체) 이용해서 비지니스 로직을 수행한다.\r\n\r\n8. servlet은 해당 jsp에 요청과 응답을 첨부해 forward한다.\r\n\r\n9. jsp container가 jsp를 servlet으로 변경해서 brower로 응답을 보낸다.\r\n\r\n=> 결국 서블릿은 한 번 생성되면 중간에서 모든 요청과 응답을 통제하게 된다.', '', '', 9, 0),
(289, '', '서대영', '', '2008-08-24 16:47:38', 'Java', '소수 첫째 자리 반올림', 'int num = 38.45\r\nMath.round(num * 10) / 10.0\r\n\r\n\r\n\r\n이렇게 하면 38.4 가 나옴.', '', '', 1, 0),
(290, '', '서대영', '', '2008-08-24 17:10:55', 'Java', 'printWriter.printf(String, Obj) : PrintWriter 포멧 정리', 'printWriter.printf("%.3f", 95.12345);\r\n\r\n=> 95.123이 출력된다.\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://cafe.naver.com/javachobostudy.cafe?iframe_url=/ArticleRead.nhn%3Farticleid=2612', 'http://cafe.naver.com/javachobostudy.cafe?iframe_url=/ArticleRead.nhn%3Farticleid=2612', '', 6, 0),
(291, '', '서대영', '', '2008-08-24 17:25:46', 'Java', '2진수로 변환', 'String str = Integer.toBinaryString(8);\r\n\r\nstr은 1001을 String객체를 참조합니다.', '', '', 3, 0),
(292, '', '서대영', '', '2008-08-25 12:04:17', 'Weblogic', 'Weblogic 웹프로젝트 import 하기', '1. C:루트에 jblog_study폴더 복사\r\n2. Eclipse에서 import\r\n3. 폴더 위에 X가 뜬다.\r\n\r\n4-1. JBlogCommon에 BulidPath설정\r\n\r\n1) C:/jblog_advanced/JBlogCommon/jblog_domain에 있는 테이블과 데이터 생성 쿼리를 sqlplus에 붙여놓고 commit;\r\n2) JBlogCommon/conf에 있는 database.properties 파일의 url 수정\r\n2) C:/jblog_advanced/JBlogCommon/jblog_domain/jbloglib에서 ibatis관련 jar파일 3개를\r\nC:/bea/user_projects/domains/jblog/lib로 복사한다.\r\n3) 프로젝트의 Build Path가서 JBLOG_LIB를 remove하고 다시 위의 3개의 ibatis파일과 jblog-common.jar 그리고 log관련 jar파일 두개 총 6개의 jar를 등록한다.\r\n4) build.xml파일을 빌드한다.\r\n\r\n4-1. JBlogServer에 BulidPath설정\r\n1) 프로젝트의 Build Path가서 add External Jars해서 C:/bea/wlserver_10.0/server/lib안의 api.jar, weblogic.jar, web-api.jar 이렇게 3개의 EJB관련 라이브러리를 등록한다.\r\n2) UserCompont와 BlogComponet 폴더에 있는 build.xml파일을 실행시킨다.\r\n\r\n4-2. JBlogWeb에 WAS설정\r\n1) JBlogWeb/conf에 있는 jndi.properties 파을의 url 수정\r\n2) WebContent - WEB-INF에서 weblogic.xml파일의 context-root를 JBlogWeb2로 바꾼다.\r\n3) Window >> Preference >> Server >> Installed Runtime 가서 WeblogicHome(wlserver)와 DomainHome(jblog)를 잡아준다.\r\n\r\n5. 테스트\r\n1) 이클립스로 서버를 가동시킨다\r\n2) JBlogServer에 있는 UserSessionBeanTest파일을 JUnit으로 실행시켜서 초록색 바가 나오면 성공이다.', '', '', 12, 0),
(293, '', '서대영', '', '2008-08-25 13:32:10', 'Log4j', '설명서', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/saojung50?Redirect=Log&logNo=120011392974', 'http://blog.naver.com/saojung50?Redirect=Log&logNo=120011392974', '', 20, 0),
(294, '', '서대영', '', '2008-08-27 09:19:08', 'Java', '윈도우 GUI 프로그래밍', '□ 클래스\r\n\r\n* javax.swing.JFrame 클래스를 상속받은 클래스는 하나의 윈도우 창이 된다.\r\n\r\n* constructor 안에 창관련 정보를 설정한다.\r\n- super("제목표시줄에 나타날 문구");\r\n- setLocation(가로좌표, 세로좌표);\r\n- setSize(가로, 세로);\r\n- setVisible(true);\r\n\r\n* paint(Graphic g) 메서드 안에 창에 표시될 그래픽을 그린다.\r\n- Graphics2D g2d = (Graphics2D)g;\r\n2D 그래픽을 그리기 위해서 필요하다.\r\n\r\n* main함수 내에서 setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); 를 호출해서 창을 닫을 수 있도록 한다.\r\n\r\n\r\n□ 메서드\r\n\r\n- g.setColor(new Color(0, 0, 0));\r\n색 설정\r\n- g2d.setStroke(new BasicStroke(3.0f));\r\n펜 설정 (느낌, 종류)\r\n- g.drawString("안녕하세요", 100, 100);\r\n글 쓰기\r\n- g2d.drawLine(125, 125, 175, 175);\r\n선 긋기\r\n- g2d.drawRect(300, 100, 200, 400);\r\n- g2d.fillRect(100, 300, 400, 200);\r\n사각형 그리기\r\n- g2d.drawOval(600, 100, 50, 50);\r\n- g2d.fillOval(600, 100, 20, 20);\r\n원 그리기\r\n- g2d.drawArc(600, 300, 300, 300, 0, 90);\r\n- g2d.fillArc(600, 300, 300, 300, 180, 90);\r\n부채꼴 그리기\r\n- GeneralPath path = new GeneralPath();\r\n		path.moveTo(200, 200);\r\n		path.lineTo(400, 200);\r\n		path.lineTo(400, 400);\r\n		path.lineTo(200, 400);\r\n		path.closePath();\r\n패직선 그리기\r\n\r\n\r\n□ 예제\r\n\r\nimport java.awt.BasicStroke;\r\nimport java.awt.Color;\r\nimport java.awt.Graphics;\r\nimport java.awt.Graphics2D;\r\nimport java.awt.geom.GeneralPath;\r\n\r\nimport javax.swing.JFrame;\r\n\r\n\r\npublic class Example15 extends JFrame {\r\n	public Example15() {\r\n		super("Using colors");\r\n		setLocation(100, 100);\r\n		setSize(1000, 800);\r\n		setVisible(true);\r\n	}\r\n	\r\n	public void paint(Graphics g) {\r\n		g.drawString("안녕하세요", 100, 100);\r\n		g.setColor(new Color(255, 0, 0));\r\n		g.drawOval(100, 100, 50, 50);\r\n		\r\n		Graphics2D g2d = (Graphics2D)g;\r\n		\r\n		g2d.setColor(new Color(0, 0, 0));\r\n		g2d.setStroke(new BasicStroke(3.0f));\r\n		g2d.drawLine(125, 125, 175, 175);\r\n		g2d.drawLine(125, 175, 175, 125);\r\n		\r\n		GeneralPath path = new GeneralPath();\r\n		path.moveTo(200, 200);\r\n		path.lineTo(400, 200);\r\n		path.lineTo(400, 400);\r\n		path.lineTo(200, 400);\r\n		path.closePath();\r\n		\r\n		g2d.draw(path);\r\n		\r\n		g2d.drawRect(300, 100, 200, 400);\r\n		g2d.setColor(new Color(0, 0, 255));\r\n		g2d.fillRect(100, 300, 400, 200);\r\n		\r\n		g2d.drawOval(600, 100, 50, 50);\r\n		g2d.fillOval(600, 100, 20, 20);\r\n		\r\n		g2d.setColor(new Color(0, 255, 0));\r\n		g2d.setStroke(new BasicStroke(1.0f));\r\n		g2d.drawArc(600, 300, 300, 300, 0, 90);\r\n		g2d.fillArc(600, 300, 300, 300, 180, 90);\r\n		\r\n	}\r\n	\r\n	public static void main(String[] args) {\r\n		Example15 application = new Example15();\r\n		application.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n	}\r\n}\r\n', '', '', 5, 0),
(295, '', '서대영', '', '2008-08-27 12:35:33', 'Java', 'Singleton Pattern - 싱글턴 패턴', '□ 정의\r\n\r\n- 인스턴스가 한 개 밖에 존재하는 않는 것을 보증하는 패턴\r\n- 메모리에 오직 하나의 인스턴스만을 올릴 수 있는 클래스 구조\r\n\r\n\r\n□ 구현 방법\r\n\r\n1) 자기 타입의 인스턴스를 가르키는 staic한 필드를 가진다.\r\n2) 클래스 외부에서 사용할 수 없는 private한 생성자를 가진다.\r\n3) 1) 의 static 필드를 반환하는 static한 getter메소드를 가진다.\r\n4) 일반 필드들은 2)의 private필드로 초기화 된다.\r\n\r\n\r\n□ 원리\r\n\r\nstatic필드는 클래스가 매모리의 perm영역에 최초로 올라갈 때 오직 한 번만 생성된다. \r\n즉, 이 static필드는 인스턴스마다 가지는 일반 필드와 다르게 모든 인스턴스가 공유하도록 클래스, 메서드와 함께 perm영역에 자리잡고 있는 것이다.\r\n생성자를 private하게 선언하면 클래스 외부에서 이 생성자를 통해 인스턴스를 생성할 수 없다.\r\n이 private한 생성자를 이용해서 static팔드에 자기 타입의 인스턴스를 참조시키면 이 인스턴스는 이 클래스의 유일한 인스턴스가 된다.\r\n\r\n정리하면, 클래스 내부에서 privte한 생성자를 사용하여 인스턴스를 생성한 후, 이 인스턴스를 static필드로 가리키고 이 필드를 static메서드로 받아오면 우리는 이 클래스 타입의 유일한 인스턴스를 사용할 수 있게 된다.\r\n\r\n\r\n□ 예\r\n\r\npublic class Singleton {\r\n	\r\n	private static Singleton singleton = new Singleton();\r\n	\r\n	private int number;\r\n	\r\n	private Singleton() {\r\n		System.out.println("# 인스턴스가 생성되었습니다.");\r\n		number = 10;\r\n		System.out.println("# number필드에 10을 저장하였습니다.");\r\n	}\r\n\r\n	public static Singleton getSingleton() {\r\n		return singleton;\r\n	}\r\n	\r\n	public int getNumber() {\r\n		return number;\r\n	}\r\n	\r\n	public void setNumber(int n) {\r\n		number = n;\r\n	}\r\n\r\n}\r\n\r\n------------------------------------------------------------\r\n\r\npublic class SingletonTest {\r\n	\r\n	public static void main(String[] args) {\r\n		// 생성자가 private하게 선언되서 불가능\r\n		// Singleton singleton = new Singleton();\r\n		\r\n		// static필드가 가르키고 있는 Sington타입의 유일한 인스턴스를 singleton1변수가 가리킴\r\n		Singleton singleton1 = Singleton.getSingleton();\r\n		singleton1.setNumber(100);\r\n		System.out.println("singleton1의 number필드의 값 : " + singleton1.getNumber());\r\n		\r\n		// 새로운 변수에 Singleton타입의 인스턴스를 다시 생성해봤자 동일하고 유일한 인스턴스를 참조함\r\n		Singleton singleton2 = Singleton.getSingleton();\r\n		System.out.println("singleton2의 number필드의 값 : " + singleton2.getNumber());\r\n	}\r\n\r\n----------------------------------------------------------------------\r\npackage com.javapassion.examples;\r\n\r\nimport java.io.FileInputStream;\r\nimport java.util.Properties;\r\n\r\npublic class MessageSupportFactory {\r\n    \r\n    private static MessageSupportFactory instance = null;   \r\n    private Properties props = null; \r\n    private MessageRenderer renderer = null;\r\n    private MessageProvider provider = null;\r\n    \r\n    private MessageSupportFactory() {\r\n        props = new Properties();\r\n        \r\n        try {\r\n        	props.load(new FileInputStream("msf.properties"));\r\n            \r\n            // get the implementation classes\r\n            String rendererClass = props.getProperty("renderer.class");\r\n            String providerClass = props.getProperty("provider.class");\r\n            \r\n            renderer = (MessageRenderer) Class.forName(rendererClass).newInstance();\r\n            provider = (MessageProvider) Class.forName(providerClass).newInstance();\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n    \r\n    static {\r\n        instance = new MessageSupportFactory();\r\n    }\r\n    \r\n    public static MessageSupportFactory getInstance() {\r\n        return instance;\r\n    }\r\n    \r\n    public MessageRenderer getMessageRenderer() {\r\n        return renderer;\r\n    }\r\n    \r\n    public MessageProvider getMessageProvider() {\r\n        return provider;\r\n    }\r\n    \r\n}', NULL, '', 37, 0),
(296, '', '서대영', '', '2008-08-27 22:50:02', 'EJB', '브릿지 패턴', 'UserSessionBean 클래스는 UserRemote 인터페이스의 EJB관렴메서드를 제외한 비지니스로직 메서드만 구현해야 한다.\r\n따라서 직접 implements할 수 없다.\r\n그래서 UserSessionBean 클래스는 UserImpl 클래스를 상속받고,\r\nUserRemote 인터페이스는 User 인터페이스를 상속받게 한다.\r\n그리고 이 UserImpl 클래스가 User 인터페이스를 상속하게 하면,\r\nUserRemote 인터페이스는 UserSessionBean 클래스의 선언부를 모두 포함할 수 있다.\r\n\r\n즉, 어떤 클래스가 인터페이스를 부부적으로 구현할 때, 각 각의 부모 클래스와 인터페이스를 통해서 간접적으로 구현하는 패턴을 말한다.', '', '', 0, 0),
(297, '', '서대영', '', '2008-08-27 22:50:44', 'Java', 'Reflecton', '메서드 자동 호출에 쓰이는 기술.\r\n\r\n어떤 메써드를 가진 모든 클래스를 문자열로 받아서 그 메써드를 호출할 수 있다.\r\n', '', '', 0, 0),
(298, '', '서대영', '', '2008-08-27 22:53:57', 'Framework', '[iBatis]', 'DAO를 구현할 때 SQL 쿼리를 전송을 편리해주는 framework\r\n\r\n\r\n* Blog.xml : SQL 맵핑 정보\r\n\r\n@ sqlMap : 루트 엘러먼트\r\n- namespace : 엘러먼트 별명\r\n\r\n@ typeAias : 긴 클래스명을 짧게\r\n\r\n@ resultMap : select 한 결과 담는 곳\r\n- id : 맵이름\r\n- property : UserVO의 필드명\r\n- column : DB의 실제 필드명\r\n\r\n@ statement들 : select, insert, update, delete\r\n- id : 명령 이름\r\n- resultMap : 결과를 넣을 맵\r\n- parameterClass : 위 typeAlias에서 사용을 VO클래스명\r\n\r\n\r\n\r\n* SqlMapBlogDaoImpl 클래스\r\n: User.xml 파싱 정보를 다 알고 있음\r\n\r\n- queryForObject 한건 조회 (상속 받음)\r\n- queryForList 리스트 조회 (상속 받음)\r\n\r\n\r\n------------------------------------------------------------\r\n\r\n간단히 말하면\r\n \r\nJava 에서 DB 작업을 할때 SQL Query가 소스코드에 이곳 저곳 아니면 모아놨더라도 소스코드 내에 두개 된다.\r\n \r\nJDBC를 연결하고 작업이 끝나면 닫거나 에러가 날때 마다 제대로 작성된 코드라면 예외처리를 해줘야 한다.\r\n \r\n트랜잭션 관리나 캐쉬 복작한 쿼리를 적용하기 위해서는 많은 노하우가 필요하다.\r\n \r\n이 모든 것들을 iBatis는 xml형식으로 SQL Query를 관리하고 예외처리 트랜잭션관리 등을 편리하게 제공해준다.\r\n \r\n그리고 POJO 객체와 Table의 컬럼들을 편리하고 빠르고 정확하게 매칭 시켜줄 수 있는 강력한 프레임워크이다.\r\n \r\n바로 이것이 iBatis를 한번 사용하게 되면 JDBC코드 작성을 꺼리게 되는 이유이다.\r\n \r\niBatis만큼 유명한 Persistence Layer 프레임 워크로 하이버네이트가 있다.\r\n \r\n하지만 이 둘은 그 용도가 달라진다. ', '', '', 11, 0),
(299, '', '서대영', '', '2008-08-27 22:54:21', 'Struts', '[Struts]', 'controller(요청과 응답을 제어)해주는 framework\r\n\r\n\r\n쉽게 표현하면 struts라는 framework 는 모델 2의 controller 부분을 구체적으로 구현해 둔 \r\n\r\nframework 이라는 것입니다 struts 를 사용한다는 것은 이렇게 구현이 되어 있는 class 와 interface을\r\n\r\n사용하는 것과 같은 의미인 것입니다\r\n\r\n1. client 가 요청을 합니다 (브라우저의 주소창에 서버에서 제공할 수 있는 자원을 요청합니다 )\r\n\r\n2. web.xml 안에 지정되어 있는 초기화 parameter 를 로딩합니다 \r\n\r\n   (초기화의 단계는 8단계를 거치게 됩니다 - 자세한 설명은 천천히 하겠습니다)\r\n\r\n3. 그리고 서블릿 컨테이너는 해당되는 요청을 WEB-INF 에 설정된 web.xml 을 참조하여\r\n\r\n   해당되는 요청을 처리할 수 있는 ActionServlet 에 넘겨줍니다\r\n\r\n4. ActionServlet 이 RequestProcessor 의 process() 를 호출합니다\r\n\r\n5. 이 RequestProcessor 안에서 16단계의 작업 단계를 거칩니다 ( 이 부분도 강좌를 하면서 해 나가겠습니다 )\r\n\r\n6. ActionForm 을 이용하여 사용자가 입력한 data 가 유효한 지를 확인한 다음에 유효하지 않은 경우에 유효한 data 를 얻기    위해 필요한 동작을 수행하는 메소드가 수행됩니다\r\n\r\n   (차 후에 소스를 보면 더욱 명확하게 알수 있게 됩니다)\r\n\r\n7. 이 16단계 중 13번째 메소드인 processActionCreate() 이 수행되어 Action class 의 인스턴스가 생성됩니다\r\n\r\n8. 이 Action class 를 가지고 비즈니스 로직을 수행하게 됩니다 (15단계의 메소드입니다)\r\n\r\n 주의하실 부분은 이러한 동작들이 RequestProcessor 안에 구현된 메소드의 단계별 수행 동작안에 있는 것입니 다\r\n\r\n9. 위에서 수행된 결과값을 리턴받은 마지막 메소드인 processActionForward() 를 이용해서보여줄 URL로 forwarding 하거나 redirect 해주게 됩니다', '', '', 9, 0),
(300, '', '서대영', '', '2008-08-28 00:00:00', 'UML', 'PK 지워지면 FK 같이 지워지기', '□ 문법\r\n\r\nCONSTRAINT 제약조건명 FOREIGN KEY (외래키칼럼) REFERENCES 참조테이블(주키칼럼) ON DELETE CASCADE \r\n\r\n□ 예제\r\n\r\nCREATE TABLE BLOG\r\n(\r\nBLOG_ID VARCHAR2(32) NOT NULL ,\r\nTITLE VARCHAR2(100) NOT NULL,\r\nTAG VARCHAR2(500),\r\nCNT_DISPLAY_POST CHAR(2),\r\nSTATUS VARCHAR2(10),\r\nCREATED_DATE DATE,\r\nCREATED_BY VARCHAR2(32),\r\nMODIFIED_DATE DATE,\r\nMODIFIED_BY VARCHAR2(32),\r\n  CONSTRAINT PK_BLOG PRIMARY KEY (BLOG_ID),\r\n  CONSTRAINT FK_BLOG_BLOG_ID FOREIGN KEY (BLOG_ID) REFERENCES USER(USER_ID) ON DELETE CASCADE \r\n);', '', '', 1, 0),
(301, '', '서대영', '', '2008-08-28 09:56:31', 'Servlet', 'Web Scope 객체', 'page - 로컬 범위\r\nrequest - 요청부터응답\r\nsession - 사용자\r\napplication - 컨텍스트\r\n\r\n위 모든 객체는 공통적으로\r\nsetAttribute(String key, Object value);\r\n와\r\ngetAttribute(String key);\r\n를 가진다.\r\n', '', '', 4, 0),
(302, '', '서대영', '', '2008-08-28 23:54:39', 'DB', '왼쪽에 0채워 스트링 타입 숫자 만들기', 'LPAD(''원래 문자열'', 자리수, ''왼쪽 공백을 채울 문자열'')\r\n\r\nex) LPAD(NVL(MAX(category_ID), 000000) + 1, 6, ''0'')\r\n최고 번호에 1을 더해 왼쪽이 0으로 채워진 6자리 문자열 만듬.', '', '', 11, 0),
(303, '', '서대영', '', '2008-08-29 10:06:46', 'JavaScript', '호출법', '# 외부 화일에서 연결하여 사용\r\n\r\n<SCRIPT TYPE="text/javascript" SRC="js 파일명"></SCRIPT>\r\n\r\n\r\n# HEAD 부분에서 사용\r\n\r\n<HEAD>\r\n    <SCRIPT TYPE="text/javascript">\r\n    <!-- \r\n        document.write("여러분 자바스크립트 과정에 오신것을 환영합니다.");\r\n    //-->\r\n    </SCRIPT>\r\n</HEAD>\r\n\r\n\r\n\r\n* <!-- 와 --> 는 HTML 문서의 주석표시이지요. \r\n<SCRIPT> 태그를 인식하지 못하는 브라우저는 그대로 흐르게 되어\r\n자바스크립트 소스 코드를 마치 텍스트처럼 화면에 보이게 합니다. 그것을 막기\r\n위해서 주석표시를 하는 것입니다. \r\n* 반면에 <SCRIPT> 태그 를 인식하는 브라우저에서는 스크립트내의 \r\nHTML 주석처리를 무시하고 자바스크립트 소스 코드를 실행할 것입니다.\r\n다만 마지막 라인이 컴파일 되지 않도록 자바스크립트의 주석표시인 // 을\r\n추가합니다. \r\n \r\n\r\n# 엘레멘트에 끼워넣기\r\n\r\n<ELEMENT onevent="javascript code"></ELEMENT>', '', '', 5, 0),
(304, '', '서대영', '', '2008-08-29 17:21:13', 'Servlet', '서블릿 URL분석', 'http://70.12.107.136:7001/JBlogWeb/login.do?id=dayo&pw=dayo\r\n\r\n□ http:// - 프로토콜\r\n□ 70.12.107.136 - 아이피 or 도메인\r\n□ Port - :7001\r\n□ Context - JBlogWeb\r\n□ Path - login.do?id=dayo&pw=dayo\r\n* login.do - 파일명\r\n* ?id=dayo&pw=dayo - 쿼리(파라미터)\r\n\r\n', '', '', 7, 0),
(305, '', '서대영', '', '2008-08-29 17:36:41', 'Servlet', '서블릿 수행 정리', '1. 브라우져 주소창에 http://70.12.107.136:7001/JBlogWeb/ 입력한다.\r\n2. 브라우져가 IP가 70.12.107.136 컴퓨터를 찾고 7001포트를 통해 WAS에 접속한다.\r\n3. WAS에 있는 Servlet Container가 url을 분석해서 Request객체를 생성한다. (세션, 쿠키, 파라미터)\r\n4. Servlet Container가 weblogic.xml파일 내에 있는 context-map을 참조해서 컨텍스트명이 JBolgWeb의 실제경로를 찾아낸다.\r\n5. Servlet Container가 컨텍스트내에 있는 WEB-INF폴더에 있는 web.xml파일을 참조해서 welcomfile파일(xxx.do)을 찾아낸다.\r\n6. Servlet Container가 web.xml파일 내에 있는 url-map을 참조하여 실행시킬 servlet파일을 찾아낸다.\r\n7. Servlet Container가 JVM을 이용해서 servlet파일을 실행시킨다.\r\n8. servlet클래스의 init() 메소드가 호출되어 servlet이 메모리에 올라간다.\r\n9. servlet클래스의 service(req, res) or doGet(req, res) or doPost(req, res) 메소드가 호출되어 사용할 action클래스를 결정한다.\r\n10. Action객체로 excute(req, res) 메서드를 호출해서 웹로직을 실행한다.\r\n11. 리턴 결과가 Servlet으로 넘어온다.\r\n12. Servlet이 forward를 하거나 redirect를 한다.\r\n13. 해당 jsp가 보여진다.', '', '', 28, 0),
(306, '', '서대영', '', '2008-08-29 17:42:25', 'Servlet', 'Layerd Architecture', '* IE\r\n\r\n□ Web Layer\r\n\r\n* Servlet : 요청,응답 / JSP : 출력\r\n* Action : 웹로직\r\n\r\n□ EJB Layer\r\n: 원격 POJO객체 이용\r\n\r\n□ POJO Layer\r\n: 비지니스 로직\r\n\r\n□ DAO Layer\r\n: CRUD\r\n\r\n* DB Layer', '', '', 2, 0),
(307, '', '서대영', '', '2008-09-02 22:15:41', 'IT', 'Telnet이란?', '원격 컴퓨터 실시간 제어, Remote Login, 가상 터미널 기술 사용, Unix Server가 필요', '', '', 1, 0),
(308, '', '서대영', '', '2008-09-02 22:26:45', 'IT', 'IT 솔루션', '□ SCM\r\n\r\n물류유통 관리\r\n\r\n\r\n□ ERP\r\n\r\n생산부터 판매까지 전사 관리\r\n\r\n\r\n□ CRM\r\n\r\n고객과 접점 형성, 고객 만족도 향상', '', '', 1, 0),
(309, '', '서대영', '', '2008-09-07 14:11:17', 'JavaScript', '배열', '<script type="text/javascript">\r\n<!--\r\nvar myArray = new Array(3);\r\nmyArray[0]  = 1;\r\nmyArray[1]  = "문자열도 저장할 수 있습니다.";\r\nmyArray[2]  = true;\r\n\r\nfunction showMe(){\r\n   for (i = 0 ; i < myArray.length ; i++){ \r\n       document.write(myArray[i]+"<br>");\r\n   }\r\n}\r\nshowMe();\r\n//-->\r\n</script>\r\n\r\n\r\n* 배열 길이 : 배열변수명.length\r\n* var myArray = [1, 2, 3]; 이렇게 선언과 할당을 동시에 할 수 있음', '', '', 10, 0),
(310, '', '서대영', '', '2008-09-07 14:29:37', 'JavaScript', '삼항 조건 연산자', '# 문법\r\n\r\nmyVar = ( 조건 ) ? 첫 번째 값 : 두 번째 값;\r\n \r\n* 조건을 검사하여 참이면 첫번째 값을 myVar 에 대입하고, 거짓이면 두 번째 값을\r\nmyVar 에 대입하게 됩니다.\r\n\r\n\r\n# 예\r\n \r\nvar a = 2, b = 3, c = 4, d = 5;\r\nvar myVar;\r\nmyVar = ( a > b ) ? c : d;\r\n \r\n* myVar 에 대입되는 값은 어떤 값일까요? 조건 부분에 해당되는 a > b 가 거짓이므로\r\nd 에 대입된 값인 5가 myVar 에도 대입됩니다.\r\n그래서 myVar 값은 5가 되죠.\r\n', '', '', 0, 0),
(311, '', '서대영', '', '2008-09-07 14:40:36', 'JavaScript', '문자열 수식을 계산해주는 함수', 'eval\r\n\r\n<script type="text/javascript">\r\n<!--\r\n   function calculate(str){\r\n      return eval(str);\r\n        // eval 함수는 str 수식을 계산합니다.\r\n   }\r\n\r\n   var a = calculate(''1+3+2'');\r\n//-->\r\n</script>', '', '', 1, 0),
(312, '', '서대영', '', '2008-09-07 14:41:53', 'JavaScript', '화면 출력 함수', 'document.write(내용);\r\n\r\nbody안에 내용보다 더 먼저 출력됨.', '', '', 1, 0),
(313, '', '서대영', '', '2008-09-21 21:31:29', 'JavaScript', '객체 생성자를 사용하여 객체 생성하기', '생성자도 일반 메서드처럼 정의하되 대문자로 시작한다.\r\n메서드는 따로 정의하고 생성자안에서 this.메서드 = 메서드 이름으로 지정해준다.\r\n\r\n<html>\r\n<head>\r\n<title>생성자 실습</title>\r\n<script type="text/javascript">\r\n<!--\r\n    function User(name, cnt) {\r\n        this.name = name;\r\n        this.cnt = cnt;\r\n        this.welcome = welcome;\r\n    }\r\n    function welcome() {\r\n        alert(this.name + "님 " + this.cnt + "번 째 방문을 환영합니다.");\r\n    }\r\n    var user = new User("서대영", 101);\r\n//-->\r\n</script>\r\n</head>\r\n\r\n<body>\r\n    <a href="#" onClick="user.welcome();">클릭</a>\r\n</body>\r\n</html>\r\n\r\n	', '', '', 5, 0),
(314, '', '서대영', '', '2008-09-21 21:41:12', 'JavaScript', 'DOM', '* Document Object Model\r\n\r\n* 자바스크립트가 HTML 문서의 객체(태그)들을 실제적으로 제어하는 방법인 HTML 문서의\r\n객체모형\r\n\r\n* 브라우저에 내장되어 있는 오브젝트들을 다루기 위함\r\n\r\n ', '', '', 4, 0),
(315, '', '서대영', '', '2008-09-21 23:08:21', 'JavaScript', '하위 객체의 메소드 호출하기', '<html>\r\n<head>\r\n<title>하의 객체의 메소드 호출하기</title>\r\n<script type="text/javascript">\r\n<!--\r\n    function User(name, cnt, pen) {\r\n    	this.name = name;\r\n        this.cnt = cnt;\r\n		this.pen = pen;;\r\n    }\r\n	function Pen(size, color) {\r\n		this.size = size;\r\n		this.color = color;\r\n		this.paint = paint;\r\n	}\r\n	function paint() {\r\n		alert(this.size + "pt 굶기의 펜으로 " + this.color + "색의 그림을 그림니다.");\r\n	}\r\n	var pen = new Pen(8, "파란");\r\n	var user = new User("서대영", 101, pen);\r\n//-->\r\n</script>\r\n</head>\r\n\r\n<body>\r\n    <a href="#" onClick="user.pen.paint();">클릭</a>\r\n</body>\r\n</html>', '', '', 0, 0),
(316, '', '서대영', '', '2008-09-21 23:09:52', 'JavaScript', '하위 객체의 속성 사용하기', '<html>\r\n<head>\r\n<script type="text/javascript">\r\n<!--\r\nfunction Phone(maker, number, color){\r\n   this.maker = maker;\r\n   this.number = number;\r\n   this.color = color;\r\n   this.ring = ring;\r\n}\r\nfunction ring(){\r\n   alert("따르릉~ 전화왔습니다.") \r\n}\r\nfunction Person(name,phone){\r\n   this.name = name;\r\n   this.phone = phone;\r\n   this.callme = callme;\r\n}\r\nfunction callme(){\r\n   alert("내 전화번호는 "+ this.phone.number +"입니다. 꼭 전화해주세요.");\r\n}\r\nvar myPhone = new Phone("회사1", "111-111-1111", "빨간색");\r\nvar I = new Person("홍길동", myPhone);\r\n//-->\r\n</script>\r\n</head>\r\n<body>\r\n    <h3>사람을 클릭하면 전화해 달라고 말합니다. </h3>\r\n    <a href="#" onClick="I.callme();">\r\n    <img src="person1.gif" border=0></a>\r\n</body>\r\n</html>			', '', '', 0, 0),
(317, '', '서대영', '', '2008-09-22 10:04:07', 'Java', '정규표현식', 'X* : X가 0번 이상 반복\r\n\r\n. : 모든 문자\r\n\r\n문자열의 ; 뒷부분을 지워라.\r\nstring.replaceAll(";.*", "");', '', '', 1, 0),
(318, '', '서대영', '', '2008-09-22 10:37:49', 'HTML', 'nowrap속성 nobr태그', '<td nowrap>\r\n줄바꿈이 되지 않고 셀너비가 길어짐\r\n\r\n<td><nobr>\r\n마찬가지 효과\r\n\r\n\r\n셀의 너비를 %로 주었을 때 nowrap 속성을 주면\r\n브라우져 창을 가로 크기를 줄여도 셀 안의 텍스트가\r\n줄바꿈 되지 않고 가로 대신 가로 스크롤바가 생긴다.\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/sjylove19?Redirect=Log&logNo=40053751554', 'http://blog.naver.com/sjylove19?Redirect=Log&logNo=40053751554', '', 16, 0),
(319, '', '서대영', '', '2008-09-22 13:41:23', 'CSS', '링크포거스 없애기', '2.스타일 시트를 사용한 방법\r\n\r\n이방법은 윗방법처럼 하나하나 감추지 않고 사용되는 전체문서에 통일적용하시고 싶으실때 유용하게 \r\n사용하실수 있습니다.\r\n\r\n스타일시트에 아래소스를 삽입하시면 됩니다.\r\n\r\n일반 링크포커스 감추기 : a {selector-dummy: expression(this.hideFocus=true);}\r\n+이미지맵 링크포커스 감추기 : a,img {selector-dummy: expression(this.hideFocus=true);}\r\n+input 버튼 링크포커스 감추기 : a,img,input{selector-dummy: expression(this.hideFocus=true);}\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://kin.naver.com/detail/detail.php?d1id=1&dir_id=109&eid=ot/NQEKq/rYaaJB9vyVTgSPLVCiKCZL+&qb=YSB7c2VsZWN0b3ItZHVtbXk6IGV4cHJlc3Npb24odGhpcy5oaWRlRm9jdXM9dHJ1ZSk=&pid=fLNmlsoi5ThssZ0k/3Zsss--234921', 'http://kin.naver.com/detail/detail.php?d1id=1&dir_id=109&eid=ot/NQEKq/rYaaJB9vyVTgSPLVCiKCZL+&qb=YSB7c2VsZWN0b3ItZHVtbXk6IGV4cHJlc3Npb24odGhpcy5oaWRlRm9jdXM9dHJ1ZSk=&pid=fLNmlsoi5ThssZ0k/3Zsss--234921', '', 3, 0),
(320, '', '서대영', '', '2008-09-22 18:14:29', 'JavaScript', '이벤트 핸들러', 'click 객체를 클릭한다 onClick \r\nmouseOver 마우스를 객체 위로 가져간다 onMouseOver \r\nmouseOut 마우스를 객체 위에서 치운다 onMouseOut \r\nmouseDown 마우스를 누른다 onMouseDown \r\nmouseUp 눌렀던 마우스를 놓는다 onMouseUp \r\nmouseMove 마우스를 움직인다 onMouseMove \r\nload 브라우저가 HTML 문서를 읽어오고 있다 onLoad \r\nunload 브라우저가 HTML 문서를 빠져나가고 있다 onUnload \r\nfocus 객체에 focus 를 둔다 onFocus \r\nblur 객체의 focus 를 다른 곳으로 옮긴다 onBlur \r\nchange 입력 내용을 바꾸거나, 선택 항목을 바꾸고 있다 onChange \r\nselect 객체의 내용을 선택한다 onSelect \r\nsubmit 사용자가 submit 버튼을 누른다 onSubmit \r\nreset 사용자가 reset 버튼을 누른다 onReset \r\n', '', '', 8, 0),
(321, '', '서대영', '', '2008-09-22 18:17:36', 'JavaScript', 'window 객체', '# 속성\r\n \r\nself 윈도우 자기자신 \r\nopener 자기를 오픈한 윈도우 \r\nlocation 윈도우의 URL 정보. 값이 location 객체임 \r\nhistory 윈도우의 history 정보. history 객체 및 배열 \r\nframes 윈도우의 frame 정보. frame 객체 및 배열 \r\ndocument 윈도우의 문서. document 객체 \r\nclosed 윈도우가 닫혀있는지 여부. \r\n\r\n\r\n# 메서드\r\n\r\nopen() 윈도우를 엽니다. \r\nclose() 윈도우를 닫는다. \r\nalert() 경고 대화상자를 엽니다. \r\nconfirm() 확인/취소 대화상자를 엽니다. \r\nprompt() 문자열을 입력받는 대화상자를 엽니다. \r\nsetTimeOut() 지정된 시간 후에 명령을 계속 실행합니다. \r\nclearTimeOut()  setTimeOut() 을 해제합니다. \r\nfocus() 윈도우에 focus 를 두어 맨 앞으로 오게 합니다. \r\n', '', '', 5, 0),
(322, '', '서대영', '', '2008-09-22 18:20:29', 'JavaScript', 'window.open(URL, 윈도우명, 윈도우특성);', '# 윈도우특성\r\n\r\ntoolbar 툴바 yes/no \r\nlocation location 박스 yes/no \r\ndirectories directory 버튼 yes/no \r\nstatus statu 바 yes/no \r\nmenubar 메뉴바 yes/no \r\nscrollbar 스크롤바 yes/no \r\nresizable 크기조절 yes/no \r\nwidth 창의 가로 너비 pixel 값 \r\nheight 창의 세로 폭 pixel 값 \r\nfullscreen (IE only) full screen mode\r\n닫을 때는 Alt + F4 yes/no \r\nleft 화면에서의 x 위치 pixel 값 \r\ntop 화면에서의 y 위치 pixel 값 \r\n\r\n<html>\r\n<head>\r\n    <script type="text/javascript">\r\n    function openwindow(){\r\n        window.open("http://www.e-campus.co.kr","openWin1",  \r\n            "width=200,height=200,toolbar=yes" );\r\n        // e-campus 를 새창에 띄우라는 명령입니다. \r\n    }\r\n    </script>\r\n</head>\r\n<body>\r\n    <form>\r\n    <input type=button value="윈도우 특성을 주어 OPEN 합니다." \r\n        onclick="openwindow()">\r\n    </form>\r\n</body>\r\n</html>\r\n \r\n ', '', '', 11, 0),
(323, '', '서대영', '', '2008-09-22 18:35:04', 'JavaScript', '오픈한 윈도우 제어', 'myWin.location.href = "http://www.e-campus.co.kr" ; \r\n\r\n\r\n<a href="http://www.e-campus.co.kr" target="openWin1">\r\n<form action="http://www.e-campus.co.kr" target="openWin1">  \r\n\r\n\r\n\r\n\r\n<html>\r\n<head>\r\n    <script type="text/javascript">\r\n    function openwindow(){\r\n        myWin = window.open("","openWin1",                \r\n            "width=200,height=200,toolbar=yes,top=200,left=300" );\r\n\r\n        myWin.location.href="http://www.e-campus.co.kr" ;\r\n            // 새 창을 띄운 후 그 창의 URL 을 myWin 으로 제어.\r\n    }\r\n    </script>\r\n</head>\r\n<body>\r\n    <form>\r\n    <input type=button value="윈도우 OPEN 후 변수로 제어합니다." \r\n        onclick="openwindow()"><p>\r\n    <a href="http://www.yahoo.co.kr" target="openWin1">\r\n        윈도우명을 이용하여 제어 </a>\r\n    </form>\r\n</body>\r\n</html>\r\n \r\n ', '', '', 3, 0),
(324, '', '서대영', '', '2008-09-22 18:38:49', 'JavaScript', '새 윈도우에서 자신을 연 위도우 제어하기', 'opener.location.href = "http://www.e-campus.co.kr" ;\r\nopener.location.reload() ;\r\nopener.formName.textName.value="연습";\r\n\r\n\r\n<html>\r\n<head>\r\n<script type="text/javascript">\r\nfunction changeUrl()\r\n{\r\n	opener.location.href="http://www.yahoo.co.kr";\r\n}\r\n</script>\r\n</head>\r\n<body>\r\n<form>\r\n<input type=button value="opener 를 제어합니다." onclick="changeUrl()">\r\n</form>\r\n</body>\r\n</html>\r\n \r\n ', '', '', 4, 0),
(325, '', '서대영', '', '2008-09-22 18:47:11', 'JavaScript', '기타 윈도우 메서드', ' \r\n \r\n  window.focus() 메소드는 윈도우에 focus 를 주어 그 윈도우를 가장 윗 쪽으로\r\n올라오도록 합니다. \r\n \r\n  myWin = window.open("http://www.e-campus.co.kr")\r\nmyWin.focus();       // 윈도우에 focus 를 준다.\r\n \r\n \r\n \r\n   \r\n \r\n  window.close() 메소드는 윈도우를 닫습니다. \r\n \r\n  if(!myWin.closed){           // 아까 열었던 창이 아직 안 닫힌경우에\r\n        myWin.close();       // 윈도우를 닫는다.\r\n}\r\n \r\n \r\n \r\n   \r\n \r\n  alert() 메소드는 사용자에게 주의를 전달하기 위하여 사용됩니다.\r\nalert(), confirm(), promt() 메소드는 앞의 window 를 생략한 형식으로 주로 사용합니다. \r\n \r\n  alert("이 메뉴는 회원 가입 후 사용가능합니다."); \r\n \r\n \r\n   \r\n \r\n  confirm() 메소드는 확인/취소 메시지 박스를 보여주어 사용자의 선택을 받기 위하여\r\n사용됩니다.\r\n확인을 클릭하면 true ,취소를 클릭하면 false 를 결과값으로 return 합니다. \r\n \r\n  confirm("삭제하시겠습니까"); \r\n \r\n \r\n   \r\n \r\n  prompt()는 사용자로부터 간단한 사항을 입력받습니다. \r\n \r\n  prompt(); \r\n \r\n \r\n   \r\n \r\n  메소드 내용 실례 \r\nmoveTo(x,y) 윈도우를 x,y 위치로 이동 window.moveTo(100,100) \r\nmoveBy(x,y) 윈도우를 x,y 만큼 이동 window.moveBy(20,20) \r\nresizeTo(x,y) 윈도우를 x,y 크기로 조절 window.resizeTo(300,300) \r\nresizeBy(x,y) 윈도우를 x,y 만큼 조절 window.resizeBy(10,10) \r\nscrollTo(x,y) 윈도우를 x,y 위치로 스크롤 window.scrollTo(0,50) \r\nscrollBy(x,y) 윈도우를 x,y 만큼 스크롤 window.scrollBy(0,10) \r\n \r\n', '', '', 2, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(326, '', '서대영', '', '2008-09-22 18:55:44', 'JavaScript', 'window.frame 객체', 'self frame 자기자신 \r\nparent 부모 frame \r\ntop 최상위 frame \r\n\r\n\r\n\r\n<html>\r\n<head>\r\n    <script type=text/javascript>\r\n    <!-- \r\n    function goUrl(strUrl){\r\n         parent.rightframe.location.href=strUrl;\r\n    }\r\n    //-->\r\n    </script>\r\n</head>\r\n<body>\r\n    <a href="javascript:goUrl(''http://www.yahoo.co.kr'')">yahoo</a><p>\r\n    <a href="#" onClick="goUrl(''http://www.empas.com'')">empas</a><p>\r\n    <a href="http://www.naver.com" target=rightframe>naver</a><p>\r\n</body>\r\n</html>', '', '', 6, 0),
(327, '', '서대영', '', '2008-09-22 18:56:19', 'JavaScript', 'A태그에서 자바스크립트 메서드 호출', '<A> 태그를 클릭하였을 때 자바스크립트 함수를 호출하는 위해서\r\nhref 속성 값에서 앞에 "javascript :" 라고 표시하였습니다.', '', '', 0, 0),
(328, '', '서대영', '', '2008-09-22 18:59:55', 'JavaScript', 'window.location 객체', '# 속성\r\n\r\nhref \r\n \r\n  href 에 값을 지정하면 현재 웹 페이지의 URL 을 변경할 수 있습니다.\r\n앞에서도 많이 다루어졌듯이 window.location.href = URL; 과 같이 작성하면\r\n현재 윈도우, frame, 새로 오픈한 윈도우, opener 에 상관없이 모든 윈도우의 URL 을\r\n변경할 수 있습니다. \r\n \r\n   \r\n# 메서드\r\n\r\n  메소드 내용 \r\nreload() 현재 페이지를 reload 합니다. \r\nreplace() 현재 페이지의 URL 을 변경하되 history 에 남기지 않아 back 할 수\r\n없도록 합니다. \r\n \r\n\r\n \r\n  사용 예 내용 \r\nlocation.reload(); 브라우저의 새로고침 버튼을 클릭하는 것과 같은\r\n효과입니다. \r\nlocation.replace(URL); 해당 URL 로 이동하되 back 하여 지금 페이지를\r\n다시 볼 수 없습니다.\r\n주로 사용자의 정보를 처리하는 부분을 다시 back 해서\r\n중복해서 처리하지 못하도록 할때 사용합니다. \r\n \r\n', '', '', 15, 0),
(329, '', '서대영', '', '2008-09-22 19:04:19', 'JavaScript', 'window.document 객체', '# 속성\r\n\r\nURL 현재 HTML 문서의 URL 을 보여줍니다. \r\nreferrer 현재 HTML 문서를 호출한 문서의 URL 을 보여줍니다. \r\nforms 문서에 포함된 form 의 배열 \r\ncookie cookie 파일의 정보 \r\nalinkColor 문서의 active 링크색 \r\nbgColor 문서의 background 색 \r\nfgColor 문서의 foreground 색 , 텍스트 색 \r\nlinkColor 문서의 링크색 \r\nvlinkColor 문서의 이미 가본적이 있는 링크색 \r\n\r\n<html>\r\n<head>\r\n    <script type=text/javascript>\r\n    function changeColor(){\r\n        document.bgColor = "blue";\r\n    }\r\n    </script>\r\n</head>\r\n<body>\r\n    <p><input type=button onClick="changeColor()" value="배경색바꾸기">\r\n</body>\r\n</html>\r\n\r\n\r\n\r\n# 메서드\r\n\r\nopen() 빈 문서에 document stream 을 open 합니다. \r\nwrite() HTML 문서에 내용을 씁니다. \r\nclose() 내용을 다 쓴 후에 document stream 을 close 합니다. \r\n\r\n\r\n <html>\r\n<head>\r\n    <script type=text/javascript>\r\n    <!--\r\n        function openWin(){\r\n            win1 = window.open('''','''',''width=100,height=100'');\r\n            win1.document.open();\r\n            win1.document.write("<html><body>");\r\n            win1.document.write("HELLO~<br>");\r\n            win1.document.write("</body></html>");\r\n            win1.document.close();\r\n        }\r\n    //-->\r\n    </script>\r\n</head>\r\n<body>\r\n    <form>\r\n        <input type=button onClick="openWin();" value="열기">\r\n    </form>\r\n</body>\r\n</html>', '', '', 1, 0),
(330, '', '서대영', '', '2008-09-22 19:08:27', 'JavaScript', 'window.history 객체', ' \r\n \r\n  history 객체의 속성에는 length 가 있어서 열어본 문서의 개수가 기록되어 있습니다. \r\n \r\n  속성명 내용 \r\nlength history 의 기록수 \r\n \r\n \r\n   \r\n \r\n  history 객체의 메소드에는 다음의 3가지가 있습니다. \r\n \r\n  메소드 내용 사용예 \r\nback() 전 페이지로 이동합니다. history.back() \r\nforward() 다음 페이지로 이동합니다. history.forward() \r\ngo() 지정한 페이지로 이동합니다.  history.go(-1) \r\n \r\n', '', '', 3, 0),
(331, '', '서대영', '', '2008-09-23 08:38:22', 'JavaScript', 'document.image 객체', 'src 이미지 파일 URL \r\nborder 이미지 테두리 \r\n\r\n\r\n 1  <html>\r\n2  <head>\r\n3      <script type="text/javascript">\r\n4      var i = 1;\r\n5      var imageArr = new Array();\r\n6      function preload(){\r\n7          for (i = 1; i <= 4; i++){\r\n8              imageArr[i] = new Image();\r\n9              imageArr[i].src = "preload"+i+".gif";\r\n10         }\r\n11     }\r\n12     function changeImage(){ \r\n13         if (i > 4) i = 1;\r\n14         document.image1.src = imageArr[i].src;\r\n15         i ++;\r\n16     }\r\n17     </script>\r\n18 </head>\r\n19 <body onLoad="preload()">\r\n20      <a href="#" onClick=changeImage()><img \r\n             name=image1  src="preload4.gif" border=0></a>\r\n21 </body>\r\n22 </html>\r\n \r\n \r\n\r\n<html>\r\n<head>\r\n    <script type="text/javascript">\r\n    function changePhoto(){\r\n        document.image1.src="imageb.gif"; \r\n    }\r\n    </script>\r\n</head>\r\n<body>\r\n    <a href="#" onClick=changePhoto()>\r\n        <img name=image1 src="imagea.gif" border=0>\r\n    </a>\r\n</body>\r\n</html>\r\n \r\n ', '', '', 6, 0),
(332, '', '서대영', '', '2008-09-23 08:59:40', 'JavaScript', 'document.form 객체', '속성 내용 \r\nname form 명 \r\naction form 의 내용을 전송할 페이지 URL \r\n\r\n메소드 내용 \r\nsubmit() form 의 내용을 전송한다. \r\nreset() form 의 내용을 clear 한다. \r\n\r\n이벤트핸들러 내용 \r\nonSubmit form 의 내용을 전송하려 할 때 submit 이벤트가 발생합니다. \r\n\r\n\r\n<form name = "form명" action = "URL" onSubmit = "함수">\r\n    전송할 내용\r\n</form>\r\n\r\n* E-mail 검증\r\n\r\n1  <html>\r\n2  <head>\r\n3      <script type="text/javascript">\r\n4      function validate()\r\n5      {\r\n6          var x=document.myForm; \r\n7          var at=x.myEmail.value.indexOf("@"); \r\n8          if (at == -1)\r\n9          {\r\n10             alert("e-mail형식이 잘못 되었습니다.");\r\n11             return false;\r\n12         }\r\n13     }\r\n14     </script>\r\n15 </head>\r\n16 <body>\r\n17     <form name="myForm" action="getform.html" \r\n                          onsubmit="return validate()"> \r\n18     E-mail 을 입력하세요. \r\n19         <input type="text" name="myEmail">\r\n20         <input type="submit" value="나의 e-mail 발송"> \r\n21     </form>\r\n22 </body>\r\n23 </html>\r\n', '', '', 4, 0),
(333, '', '서대영', '', '2008-09-23 08:59:55', 'JavaScript', '내장함수', '  자바스크립트 내장함수 \r\n \r\n  자바스크립트에는 사용자가 정의하지 않고 처음부터 내장되어 있는\r\n함수가 있습니다. 자바스크립트 내장 함수라고 부르며, 그 종류에는\r\nparseInt(), parseFloat(), escape(), unescape(), inNaN(),\r\neval() 이 있습니다. \r\n \r\n   parseInt() 는 문자열을 정수로 바꾸어주며, \r\n parseFloat() 은 문자열을 부동소숫점으로 바꾸어 줍니다. \r\n escape() 문자를 ASCII 형식으로 변환하며, \r\n unescape() 는 ASCII 형식을 문자로 변환합니다. \r\n isNaN() 은 값이 숫자인지 아닌지 판단합니다. \r\n eval() 은 문자열을 계산하여 숫자로 변환합니다. \r\n \r\n ', '', '', 5, 0),
(334, '', '서대영', '', '2008-09-23 09:02:50', 'JavaScript', 'form.button 객체', '\r\n\r\n\r\n* 숫자 검증\r\n\r\n1   <html>\r\n2   <head>\r\n3       <script type="text/javascript">\r\n4       <!--\r\n5           function validate(form)\r\n6           {\r\n7               inStr = form.myInput.value\r\n8               if (isNaN(inStr) || inStr == ""){\r\n9                   alert("숫자를 입력하십시요") ;\r\n10                  form.myInput.focus();\r\n11                  form.myInput.select();\r\n12                  return false ;\r\n13              }\r\n14              else{\r\n15                  form.submit();\r\n16              }\r\n17          }\r\n18       //-->\r\n19       </script>\r\n20  </head>\r\n21  <body>\r\n21      <form name="myForm" action="getform.html">\r\n23      숫자를 입력하십시요.\r\n24          <input type="text" name="myInput">\r\n25          <input type="button" value="전송" onClick="validate(this.form)">\r\n26      </form>\r\n27  </body>\r\n28  </html>\r\n\r\n', '', '', 5, 0),
(335, '', '서대영', '', '2008-09-23 09:02:50', 'JavaScript', 'form.radio 객체', ' 1   <html>\r\n2   <head>\r\n3       <script type="text/javascript">\r\n4       <!--\r\n5           function check()\r\n6           {\r\n7               form = document.forms[0]; \r\n8               if (form.job[0].checked){\r\n9                   form.answer.value = form.job[0].value;\r\n10              }\r\n11              else if (form.job[1].checked){\r\n12                  form.answer.value = form.job[1].value;\r\n13              }\r\n14          }\r\n15      //-->\r\n16      </script>\r\n17  </head>\r\n18  <body>\r\n19      <form>\r\n20      직업 : <br>\r\n21          <input type="radio"  name="job" value="학생" checked>학생\r\n21          <input type="radio"  name="job" value="회사원">회사원\r\n22          <input type=button value="선택결과" onClick=check()>\r\n23          <input type="text" name="answer">\r\n24      </form>\r\n25  </body>\r\n26  </html>\r\n \r\n ', '', '', 9, 0),
(336, '', '서대영', '', '2008-09-23 09:15:13', 'JavaScript', '[자바스크립트 내장객체] String', '속성 내용 \r\nlength 문자열길이 \r\n메소드  내용 \r\ntoLowerCase() 문자열을 소문자로 만듭니다. \r\ntoUpperCase() 문자열을 대문자로 만듭니다. \r\ncharAt(i) 문자열에서 i 번째 문자를 말합니다.\r\n인덱스는 0번째부터 시작합니다. \r\nsubstring(i,j) i와 j번째 사이의 문자열을 말합니다.\r\ni 번째 문자는 포함하나 j 번째 문자는 포함하지 않음. \r\nindexOf("문자열") 해당 문자열의 위치값을 줍니다. \r\n \r\n \r\n  그러면, 위에서 설명드린 메소드가 실제로 어떻게 사용될까요? 아래를 함께 보시죠. \r\n \r\n  사용 예 값 \r\n"abc".length  3 \r\na = "abc" ;\r\na.length 3 \r\n"ABC".toLowerCase() abc \r\n"abc".toUpperCase() ABC \r\n"abc".charAt(2) c \r\n"abcdef".substring(1,3) bc \r\n"abc@empas.com".indexOf("@empas") 3 \r\n \r\n', '', '', 2, 0),
(337, '', '서대영', '', '2008-09-23 09:17:10', 'JavaScript', '[자바스크립트 내장객체] Date', '속성 내용 \r\nlength 문자열길이 \r\n메소드  내용 \r\ntoLowerCase() 문자열을 소문자로 만듭니다. \r\ntoUpperCase() 문자열을 대문자로 만듭니다. \r\ncharAt(i) 문자열에서 i 번째 문자를 말합니다.\r\n인덱스는 0번째부터 시작합니다. \r\nsubstring(i,j) i와 j번째 사이의 문자열을 말합니다.\r\ni 번째 문자는 포함하나 j 번째 문자는 포함하지 않음. \r\nindexOf("문자열") 해당 문자열의 위치값을 줍니다. \r\n \r\n \r\n  그러면, 위에서 설명드린 메소드가 실제로 어떻게 사용될까요? 아래를 함께 보시죠. \r\n \r\n  사용 예 값 \r\n"abc".length  3 \r\na = "abc" ;\r\na.length 3 \r\n"ABC".toLowerCase() abc \r\n"abc".toUpperCase() ABC \r\n"abc".charAt(2) c \r\n"abcdef".substring(1,3) bc \r\n"abc@empas.com".indexOf("@empas") 3 \r\n \r\n', '', '', 0, 0),
(338, '', '서대영', '', '2008-09-23 09:24:56', 'JavaScript', '[자바스크립트 내장객체] Math', '객체 생성없이 바로 사용\r\n\r\n Math 객체는 수치계산에 관련한 객체입니다.\r\nMath 에는 여러 가지 속성과 메소드가 있는데, 그 중에 자주 사용되는 메소드를\r\n살펴보면 다음과 같습니다. \r\n \r\n  메소드 내용 \r\nmin(n,m) n 과 m 중 작은 수 \r\nmax(n,m) n 과 m 중 큰 수 \r\nfloor(n) n 보다 작은 수 중 가장 큰 정수 \r\nceil(n) n 보다 큰 수 중에 가장 작은 정수 \r\nround(n) n 을 정수로 반올림. \r\nrandom() 0부터 1까지 난수를 표시합니다. \r\n \r\n \r\n  그러면, 위에서 설명드린 메소드가 실제로 어떻게 사용될까요?\r\n아래는 함께 보시죠. \r\n \r\n  사용 예 값 \r\nMath.min(2,3) 2 \r\nMath.max(2,3) 3 \r\nMath.floor(3.6) 3 \r\nMath.ceil(3.6) 4 \r\nMath.round(3.6) 4 \r\nrandom() 0 <= 값 < 1 인 임의의 수 \r\n \r\n', '', '', 5, 0),
(339, '', '서대영', '', '2008-09-23 10:05:20', 'JavaScript', 'form.select 객체', '1   <html>\r\n2   <head>\r\n3       <script type="text/javascript">\r\n4       function selectJob()\r\n5       {\r\n6           selind = document.form1.job.selectedIndex;\r\n7           selval = document.form1.job.options[selind].value;\r\n8           seltxt = document.form1.job.options[selind].text;\r\n9           document.form1.sample.value=selval + " " + seltxt;\r\n10      }\r\n11      </script>\r\n12  </head>\r\n13  <body>\r\n14      <form name=form1>\r\n15          <select name="job" onchange="selectJob()">\r\n16              <option value="">직업을 선택하세요.</a>\r\n17              <option value=student>학생</option>\r\n18              <option value=employee>회사원</option>\r\n19              <option value=engineer>엔지니어</option>\r\n20          </select>\r\n21      <p><input type="text" name="sample"></p>\r\n22      </form>\r\n23  </body>\r\n24  </html>\r\n', '', '', 3, 0),
(340, '', '서대영', '', '2008-09-23 14:40:25', 'JavaScript', '같은 id 값을 가는 객체들 배열로 받아오기', 'document.all["아이디"]; 를 사용한다.\r\n\r\n\r\n  function locationFocus(clickPart) {\r\n    var rows = document.all["row"];\r\n    var locations = document.all["location"];\r\n		for (i = 0; i < locations.length; i++) {\r\n			if (clickPart == locations[i].innerText) {\r\n				rows[i].focus();\r\n				rows[i].bgColor = ''#7F7FFF'';\r\n				break;\r\n			}\r\n		}\r\n	}', '', '', 3, 0),
(341, '', '서대영', '', '2008-09-24 08:49:18', 'JavaScript', 'select 객체 제어', '<html>\r\n<head>\r\n<script type="text/javascript">\r\nfunction save(){\r\n   /* select 선택 항목 */\r\n   selind = document.form1.job.selectedIndex ;\r\n   seltxt =  \r\n          document.form1.job.options[selind].text +" " ;\r\n\r\n   alert(seltxt+"을 선택하셨습니다.");\r\n}\r\n</script>\r\n</head>\r\n<body>\r\n<form name=form1 action=getform.html>\r\n1.직업\r\n<select name="job">\r\n   <option value=student>학생</option>\r\n   <option value=employee>회사원</option>\r\n</select><br>\r\n2.취미\r\n<input type="checkbox"  name="hobby" value="reading">독서\r\n<input type="checkbox"  name="hobby" value="game">게임<br>\r\n3.주소\r\n<input type="radio"  name="address" value="Seoul">서울시\r\n<input type="radio"  name="address" value="Pusan">부산시<p>\r\n※ 빠짐없이 선택하여 주세요.<p>\r\n<input type=button onClick="save()" value="저장하기">\r\n</body>\r\n</html>			', '', '', 7, 0),
(342, '', '서대영', '', '2008-09-24 08:57:09', 'HTML', 'DHTML 개념', ' DHTML 은 Dynamic HTML 의 약자로서, 동적인 HTML 을 말하는 것입니다.\r\n즉 DHTML 은 정적으로 페이지의 내용이 구성되었던 HTML 의 스타일을 바꾸고,\r\n내용을 수정하고, 위치를 변경할 수 있도록 하는 기술을 말합니다.  \r\n \r\n  따라서 DHTML 은 어떤 특별한 언어를 가리키는 것이 아니라, 동적으로 HTML 을\r\n구성하기 위하여 필요한 기술들의 집합을 말합니다. 이때 필요한 기술들이 바로 HTML,\r\nCSS, DOM, 자바스크립트입니다. \r\n \r\n   \r\n \r\n \r\n  HTML 은 태그로 이루어진 문서를 말하지요. DOM 은 문서를 객체 모형으로 다루는\r\n모델이구요, CSS 는 문서의 서식, 스타일을 지정하는 약속이구요, 자바스크립트는\r\n동적으로 HTML 문서를 제어하는 분야입니다. \r\n \r\n  다시 말하면, DOM 과 CSS 을 기반으로 하여 자바스크립트로 HTML 을 동적으로\r\n제어 하는 것이 바로 DHTML 입니다. \r\n', '', '', 0, 0),
(343, '', '서대영', '', '2008-09-24 14:45:02', 'HTML', '이미지 옆 딱 중간에 글씨', '<img src=''/km/images/exp/images/ftv2node.gif'' align=''absmiddle''>', '', '', 2, 0),
(344, '', '서대영', '', '2008-09-25 08:41:05', 'CSS', 'body의 배경 다루기', 'background-color 배경색 background-color:#ff0000 \r\nbackground-image:url  배경그림 background-image:url("이미지명") \r\nbackground-repeat 배경그림\r\n반복여부 background-repeat:no-repeat \r\nbackground-position 배경그림의\r\n위치 background-position:right bottom \r\nbackground-attachment 배경그림\r\n고정여부 background-attachment:fixed \r\n\r\n\r\n <HTML>\r\n<HEAD>\r\n    <STYLE TYPE="text/css">\r\n        body {\r\n            color:#7BA2AA;\r\n            font-weight:bold;\r\n            background-color:#FFFFFF; \r\n            background-image:url("person1.gif");\r\n            background-repeat:no-repeat;\r\n            background-position:right bottom;\r\n            background-attachment:fixed;\r\n        }\r\n    </STYLE>\r\n</HEAD>\r\n<BODY>\r\n    문서의 배경을 다루어보도록 하겠습니다. <p>\r\n    스크롤을 해보세요.\r\n    &nbsp;<p>&nbsp;<p>&nbsp;<p>&nbsp;<p>&nbsp;<p>&nbsp;<p>\r\n    &nbsp;<p>&nbsp;<p>&nbsp;<p>&nbsp;<p>&nbsp;<p>&nbsp;<p>\r\n    &nbsp;<p>&nbsp;<p>&nbsp;<p>&nbsp;<p>&nbsp;<p>&nbsp;<p>\r\n    &nbsp;<p>&nbsp;<p>&nbsp;<p>&nbsp;<p>&nbsp;<p>&nbsp;<p>\r\n    &nbsp;<p>&nbsp;<p>\r\n    문서의  끝입니다.\r\n</BODY>\r\n</HTML>\r\n \r\n ', '', '', 3, 0),
(345, '', '서대영', '', '2008-09-25 08:42:24', 'CSS', '글꼴 및 서식', 'color 글꼴 색 red ,blue , ..#ffffff,... \r\nfont-style 글꼴 normal , italic , oblique \r\nfont-weight 굵기 none,bold,lighter,bolder, 100 , 200 ,... \r\nfont-size 글꼴 크기 10,11,... \r\nfont-family 글꼴 family serif, sans-serif,cursive,fantasy,monospace \r\ntext-decoration 장식 none , underline,overline,line-through,blink \r\ntext-align 정렬방법 left,right,center \r\nmargin-top 윗여백 10px, 20px, 숫자 + 단위로 구성단위를 안주면\r\ndefault 로 px 가 붙음 \r\nmargin-left 왼쪽 여백 10px \r\nmargin-right 오른쪽 여백 10px \r\nmargin-bottom 아래 여백 10px \r\nline-height 줄간격 normal, 150% , 1  \r\nletter-spacing 문자 간격 0.5em (em 은 그 범위에서 유효한 글자 크기를\r\n1로 함.) \r\nword-spacing 단어 간격 1em \r\n \r\n \r\n <HTML>\r\n<HEAD>\r\n    <STYLE TYPE="text/css">\r\n        body {\r\n            font-family: 돋움체,돋움,굴림체,굴림,Arial;\r\n            text-decoration:italic;\r\n            font-weight:bold;\r\n            font-size:12pt;\r\n            margin-top:30px;\r\n            margin-left:80px;\r\n            margin-right:80px;\r\n            margin-bottom:10px;      \r\n            text-align:center;\r\n            letter-spacing:0.5em;\r\n            word-spacing:1em; \r\n        }\r\n    </STYLE>\r\n</HEAD>\r\n<BODY>\r\n    문서에 서식을 정의합니다. <br>\r\n    font 와 margin, align, spacing 을 사용하였습니다.\r\n</BODY>\r\n</HTML>\r\n \r\n \r\n', '', '', 3, 0),
(346, '', '서대영', '', '2008-09-25 08:48:24', 'CSS', '링크 스타일', ' 링크 스타일을 설정하기 위해서는 아래와 같은 속성을 사용합니다. \r\n \r\n  속성 내용 \r\nA: link {스타일} 링크 \r\nA: visited{스타일} 이미 방문한 링크 \r\nA: active{스타일} 링크 클릭 후 마우스를 떼었을 때 \r\nA: hover{스타일} 링크에 마우스를 over 하였을 때 \r\n \r\n \r\n  그러면 아래 예제에서 문서의 링크 스타일을 적용하여 보도록 하겠습니다. \r\n \r\n  <HTML>\r\n<HEAD>\r\n    <STYLE TYPE="text/css">\r\n        A:link    {color:blue; text-decoration:none}\r\n        A:visited {color:#A58778; text-decoration:none}\r\n        A:active  {color:red; text-decoration:none}\r\n        A:hover   {color:aqua; text-decoration:underline}\r\n    </STYLE>\r\n</HEAD>\r\n<BODY>\r\n    <a href="http://www.javascript.com">javascript.com</a><br>\r\n    <a href="http://www.webreference.com">webreference.com</a><br>\r\n    <a href="http://www.yahoo.co.kr">yahoo</a><br>\r\n</BODY>\r\n</HTML>\r\n \r\n \r\n', '', '', 1, 0),
(347, '', '서대영', '', '2008-09-25 08:49:36', 'CSS', '태그의 위치', 'position 절대위치, 상대위치 absolute , relative \r\nleft x 위치 10px \r\ntop y 위치 20px \r\nwidth 폭 120px \r\nheight 높이 100px \r\n\r\n\r\n\r\n <HTML>\r\n<HEAD>\r\n    <STYLE TYPE="text/css">\r\n    h1.ex1 {\r\n        position:relative; \r\n        left:20;\r\n        top:30;\r\n        width:600px;\r\n        background-color:blue;\r\n        height:300px\r\n    }\r\n    h1.ex2 {\r\n        position:relative;\r\n        left:-20;\r\n        top:10;\r\n        width:500px;\r\n        background-color:red;\r\n        height:100px\r\n    }\r\n    </STYLE>\r\n</HEAD>\r\n<BODY>\r\n    <h1>스타일을 적용하지 않은 일반적인 heading입니다.</h1>\r\n    <h1 class="ex1">오른쪽으로 20만큼 이동하였습니다.</h1>\r\n    <h1 class="ex2">왼쪽으로 20만큼 이동하였습니다.</h1>\r\n</BODY>\r\n</HTML>\r\n \r\n \r\n', '', '', 4, 0),
(348, '', '서대영', '', '2008-09-25 08:52:00', 'CSS', '가시성', '각 태그는 일단 문서를 작성하면 문서에 보이는 것이 당연하지만 visibility 속성을\r\n사용하여 안 보이도록 조정할 수 있습니다.\r\n그와 비슷한 속성으로 display 속성이 있는데, visibility 가 항상 일정한 자리를\r\n차지한다면 display 는 none 인경우 자리를 차지하지 않는다는 점이 다릅니다.\r\n그리고 태그들이 겹치는 경우에 태그들 간의 순서를 z-index 라는 속성을 사용하여\r\n조정할 수 있습니다. \r\n \r\n  속성 내용 사용법 \r\nvisibility 태그가 화면에 보이는 여부 hidden/visible \r\ndisplay 태그가 화면에 표현되는 여부 none/inline/block \r\nz-index 태그들 사이의 순서 숫자 값 \r\n \r\n \r\n  그럼 , 다음에서 visiblity 속성을 이용하여 태그를 숨기는 예제를 살펴보도록 하겠습니다. \r\n \r\n  <HTML>\r\n<HEAD>\r\n    <STYLE TYPE="text/css">\r\n    h1.one { \r\n        visibility:visible;\r\n    }\r\n    h1.two {\r\n        visibility:hidden;\r\n    }\r\n    </STYLE>\r\n</HEAD>\r\n<BODY>\r\n    <h1 class="one">첫번째 문장입니다.</h1>\r\n    <h1 class="two">두번째 문장입니다.</h1>\r\n    <h1 class="one">세번째 문장입니다.</h1>\r\n</BODY>\r\n</HTML>\r\n \r\n \r\n', '', '', 2, 0),
(349, '', '서대영', '', '2008-09-25 08:55:20', 'JavaScript', 'document.all 객체', '객체는 자바스크립트에서 모두 배열에 저장되어 있습니다. 자바스크립트에서는\r\nall 이라는 collection 에 저장되어있습니다. 그래서 아래와 같은 방법으로 mydiv 에\r\n접근할 수 있습니다. \r\n \r\n  document.all.mydiv\r\ndocument.all["mydiv"]\r\ndocument.getElementById["mydiv"]\r\n \r\n \r\n \r\n  all 객체는 모든 객체들을 모아놓은 집합 객체, 즉 collection 입니다.\r\n \r\n', '', '', 2, 0),
(350, '', '서대영', '', '2008-09-25 08:57:00', 'JavaScript', '[Dynamic Style] 스타일 제어', 'document.all.mydiv.style.fontSize\r\ndocument.all.mydiv.style.backgrondColor\r\ndocument.all.mydiv.style.left\r\ndocument.all.mydiv.style.top\r\ndocument.getElementById("mydiv").style.left \r\n \r\n \r\n \r\n  위에서 속성들을 사용할 때 스타일의 font-size 는 자바스크립트에서 fontSize 로,\r\nbackground-color 는 backgroundColor 로 사용한 점을 주의하셔야 합니다.\r\n즉, "-" 가 포함된 속성은 모두 "-"을 없애고 그 다음 문자를 대문자로 사용한 것이죠. \r\n', '', '', 3, 0),
(351, '', '서대영', '', '2008-09-25 08:59:08', 'JavaScript', '[Dynamic Style] 폰트 스타일 제어', ' <html>\r\n<head>\r\n    <script type="text/javascript">\r\n    function fontChange(){\r\n        obj = document.all["mydiv"];\r\n        obj.style.fontSize  = "18px";\r\n        obj.style.color = "red";\r\n        obj.style.fontStyle = "italic";\r\n        obj.style.fontWeight = "bold";\r\n        obj.style.fontFamily = "돋움,돋움체";\r\n     \r\n    }\r\n    </script>\r\n</head>\r\n<body>\r\n    <div id="mydiv" style="font-size:10pt; color:#000000; font-style::normal;\r\n	font-weight:none; font-family:굴림,굴림체"  \r\n	onMouseOver="fontChange()">\r\n    이곳에 마우스를 가져오시면 글자모양이 바뀝니다.\r\n    </div>\r\n</body>\r\n</html>\r\n \r\n ', '', '', 2, 0),
(352, '', '서대영', '', '2008-09-25 08:59:52', 'JavaScript', '[Dynamic Style] 가시성 제어', '<html>\r\n<head>\r\n    <style type="text/css">\r\n    h1.ex1{ \r\n        visibility:visible;\r\n    }\r\n    h1.ex2{\r\n        visibility:hidden;\r\n    }\r\n    </style>\r\n    <script type="text/javascript">\r\n    function show(){\r\n        document.all.second.style.visibility = "visible";\r\n    }\r\n    </script>\r\n</head>\r\n<body>\r\n\r\n    <h1 class="ex1">첫번째 문장입니다.</h1>\r\n    <h1 class="ex2" id=second>두번째 문장입니다.</h1>\r\n\r\n    <p onClick="show()">여기를 클릭하시면 두번째문장이 보입니다.</p>\r\n\r\n</body>\r\n</html>\r\n', '', '', 5, 0),
(353, '', '서대영', '', '2008-09-25 09:00:30', 'JavaScript', '[Dynamic Style] z-index 제어', '<html>\r\n<head>\r\n    <style type="text/css">\r\n    img.x{\r\n        position:absolute;\r\n        left:0;\r\n        top:0;\r\n        z-index:-1;\r\n    }\r\n    </style>\r\n    <script type="text/javascript">\r\n    function down(){\r\n        document.all.img1.style.zIndex = -1 ;\r\n    }\r\n    function up(){\r\n        document.all.img1.style.zIndex = 2 ;\r\n    }\r\n    </script>\r\n</head>\r\n<body>\r\n    <a href="#" onMouseOver="up()" onMouseOut="down()">\r\n    <img class="x" id="img1" src="person1.gif" border=0></a>\r\n    <h3 style="width:110px">\r\n    마우스를 가져가면 문장과 이미지의 보이는 순서가 바뀝니다.</h3>\r\n</body>\r\n</html>\r\n', '', '', 2, 0),
(354, '', '서대영', '', '2008-09-25 09:01:48', 'JavaScript', '[Dynamic Style] left, top 제어', ' <html>\r\n    <script type="text/javascript">\r\n        function go(){\r\n            obj = document.all.myRegion;\r\n            obj.style.left = parseInt(obj.style.left) + 5;\r\n            obj.style.top = parseInt(obj.style.top) + 5;\r\n        }\r\n    </script>\r\n\r\n<body>\r\n    <p id="myRegion"  style="position:absolute; left:10px; top:10px;\r\n        width:200px; height:70px; background-color:red; color:white;\r\n        font-weight:bold; text-align:center" onMouseOver="go()" \r\n        onMouseOut="go()">\r\n        마우스를 위로 가져가면 움직입니다.\r\n    </p>\r\n</body>\r\n</html>\r\n \r\n ', '', '', 2, 0),
(355, '', '서대영', '', '2008-09-28 15:45:10', 'JavaScript', '전역 지역 변수', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.joon.pe.kr/blog/253', 'http://www.joon.pe.kr/blog/253', '', 0, 0),
(356, '', '서대영', '', '2008-09-28 15:53:46', 'JavaScript', '이클립스에서 사용', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.joon.pe.kr/blog/253', 'http://www.joon.pe.kr/blog/253', '', 0, 0),
(357, '', '서대영', '', '2008-09-28 16:19:45', 'JavaScript', '일정 간격으로 함수 반복 실행', 'id = window.setInterval("함수()", ms);\r\nwindow.clearInterval(id);\r\n\r\n<html>\r\n<head>\r\n<script>\r\n	function start() {\r\n		moveid = window.setInterval("move()", 50);\r\n	}\r\n	function move() {\r\n		document.all.tab.style.pixelLeft += 10;\r\n		document.all.tab.style.pixelTop += 10;\r\n	}\r\n	function stop() {\r\n		window.clearInterval(moveid);\r\n	}\r\n	document.onmousedown = stop;\r\n</script>\r\n\r\n</head>\r\n\r\n<body onLoad="start()">\r\n	<table id="tab" style="position:absolute;top:10; left:10; z-index:-1">\r\n		<tr>\r\n			<td>호호호</td>\r\n		</tr>\r\n	</table>\r\n</body>\r\n</html>', '', '', 3, 0),
(358, '', '서대영', '', '2008-09-28 16:24:37', 'JavaScript', '마우스 오른쪽 버튼 금지', '<html>\r\n<head>\r\n    <script type="text/javascript">\r\n    function noRightClick() {\r\n        if (event.button == 2) {\r\n            alert("오른쪽 버튼은 사용하지 마세요.");\r\n        }\r\n    }\r\n    document.onmousedown = noRightClick;\r\n    </script>\r\n</head>\r\n<body>\r\n    오른쪽 클릭하여보세요.\r\n</body>\r\n</html>\r\n', '', '', 0, 0),
(359, '', '서대영', '', '2008-09-28 17:33:54', 'JavaScript', 'div 제너레이터', '<HTML>\r\n<HEAD>\r\n<SCRIPT type="text/javascript">\r\n<!--\r\nfunction genDivTag(Name, Left, Top, htmlcode){\r\n   document.writeln(''<DIV ID='' + Name + \r\n      ''STYLE="position:absolute; overflow:none;'' + \r\n      ''left:'' + Left + ''px; top:'' + Top + ''px;">'' + \r\n      htmlcode + ''</DIV>'');\r\n}\r\n\r\nfunction genScreen(){\r\n   genDivTag(''slide'' ,20,80,''<img src=person1.gif>'');\r\n   genDivTag(''menu''  ,20,90,''<DIV style="font-size:13pt">사람 이미지입니다.</DIV>'');\r\n}\r\n//-->\r\n</script>\r\n</head>\r\n<body>\r\n<script type="text/javascript">\r\n<!--    \r\ngenScreen();\r\n//-->\r\n</script>\r\n</body>\r\n</html>			', '', '', 1, 0),
(360, '', '서대영', '', '2008-09-28 17:35:01', 'JavaScript', '롤오버 메뉴', '<html>\r\n<head>\r\n<style type="text/css">\r\n   table.menu {position:relative; display:none}\r\n</style>\r\n<script type="text/javascript">\r\nfunction showmenu(elmnt){\r\n   document.all[elmnt].style.display ="block" ;\r\n}\r\n\r\nfunction hidemenu(elmnt){\r\n   document.all[elmnt].style.display="none" ;\r\n}\r\n</script>\r\n</head>\r\n<body>\r\n<h3>Drop down menu</h3>\r\n<table>\r\n<tr><td onmouseover="showmenu(''site'')" \r\n        onmouseout="hidemenu(''site'')"\r\n        style="width:80px">\r\n      <a href="javascript://">검색사이트</a><br>\r\n          <table class="menu" id="site">\r\n          <tr><td>\r\n              <a href="http://www.yahoo.co.kr">YAHOO</a>\r\n          </td></tr>\r\n          <tr><td>\r\n              <a href="http://www.empas.com">EMPAS</a>\r\n          </td></tr>\r\n          <tr><td>\r\n              <a href="http://www.naver.com">NAVER</a>\r\n          </td></tr>\r\n      </table>\r\n   </td></tr>\r\n</table>\r\n</body>\r\n</html>			', '', '', 3, 0),
(361, '', '서대영', '', '2008-09-28 17:35:56', 'JavaScript', '경과 시간 표시', '<html>\r\n<head>\r\n<script>\r\ni =  0 ; \r\nfunction auto(){\r\n	window.setInterval("timeGo()", 1000);\r\n}\r\n\r\nfunction timeGo(){\r\n	document.all.autoflag.innerText = ++i+ ''초''\r\n}	\r\n</script>\r\n</head>\r\n<body onload=auto()>\r\n경과시간입니다. <div id=autoflag></div>\r\n</body>\r\n</html>			', '', '', 1, 0),
(362, '', '서대영', '', '2008-09-28 19:24:40', 'JavaScript', 'navigator객체로 브라우저 종류와 버젼 구하기', ' 3장의 넷스케이프 네비게이터 DOM 그림 기억나시죠?\r\n브라우저의 내장객체 중에 navigator 객체가 있는데, 이 객체는 현재 사용하고 있는\r\n브라우저에 대한 상세한 정보를 제공하여 줍니다. \r\n \r\n  그럼, 먼저 navigator 객체의 속성을 살펴볼까요? \r\n \r\n  속성 내용 \r\nappName 브라우저 이름 \r\nappVersion 브라우저 버젼 \r\nappCodeName 브라우저 코드 이름 \r\nuserAgent 브라우저 User Agent \r\nmimeTypes 브라우저가 지원하는 mimeTypes \r\nplugins 브라우저에 설치된 plugin \r\n \r\n \r\n\r\n\r\n<HTML>\r\n<HEAD>\r\n<script type="text/javascript">\r\n<!--\r\n  var ie4 = false; \r\n  var ie5 = false;\r\n  var ns4 = false;\r\n  var ns6 = false;\r\n\r\n  var appNm = navigator.appName;\r\n  var appVer = navigator.appVersion;\r\n  var appUser = navigator.userAgent;\r\n  if (appNm == "Microsoft Internet Explorer"){\r\n     if (parseInt(appVer) >= 4){\r\n       // "MSIE" 의 위치\r\n       var iePos = parseInt(appVer.indexOf("MSIE"));\r\n       // "MSIE 5.5;"에서 5.5 추출\r\n       appVer = parseInt(appVer.substring(iePos + 5,\r\n                         appVer.indexOf('';'',iePos)));\r\n     }\r\n     if (appVer == 4)      ie4 = true;\r\n     else if (appVer == 5) ie5 = true;\r\n  }else if (appNm = "Netscape"){\r\n     //"Netscape6" 의 위치\r\n    var ns6Pos = appUser.indexOf("Netscape6"); \r\n    if (ns6Pos != -1) \r\n       //Netscape6/6.1에서 6.1추출 \r\n        appVer = parseInt(appUser.substring(ns6Pos+10));\r\n    else  appVer = parseInt(appVer);\r\n    if      (appVer == 4) ns4 = true;\r\n    else if (appVer == 6) ns6 = true;\r\n  }\r\n  document.write ("현재 사용하고 계신 브라우저는 "\r\n                  + appNm + appVer +"입니다.");\r\n//-->\r\n</script>\r\n</HEAD><BODY></BODY></HTML>\r\n \r\n \r\n \r\n  만약 상세한 브라우저 버젼을 추출하려면, 위 예제의 parseInt() 가 아닌\r\nparseFloat(navigator.appVersion) 처럼 parseFloat 를 사용하시면 됩니다. \r\n', '', '', 4, 0),
(363, '', '서대영', '', '2008-09-28 19:26:34', 'JavaScript', '간단한 브라우져 구분', ' \r\n  var ie4 = (document.all && !document.getElementById) ? true : false;\r\nvar ie5 = (document.all && document.getElementById) ? true : false;\r\nvar ns4 = (document.layers) ? true : false;\r\nvar ns6 = (document.getElementById && !document.all) ? true : false;\r\n \r\n \r\n \r\n  혹은, 아래처럼 인터넷 익스플로어 4.X 와 5.X 가 모두 document.all 을\r\n지원하기 때문에, 대개 두 브라우저를 구분하지 않고 처리합니다. \r\n \r\n  var ie = (document.all) ? true : false;\r\nvar ns4 = (document.layers) ? true : false;\r\nvar ns6 = (document.getElementById && !document.all) ? true : false;\r\n \r\n \r\n', '', '', 1, 0),
(364, '', '서대영', '', '2008-09-30 09:08:40', 'HTML', 'frameset, frame 태그', '※ frameset 태그는 body 태그와 함께쓰지 않는다.\r\n\r\n# frameset\r\n\r\n* cols = "왼쪽 너비, 오른쪽 너비"\r\n* rows = "위 높이, 아래 높이"\r\n* frameborder = "yse/no"\r\n\r\n\r\n# frame\r\n\r\n* src = "경로"\r\n* name = "이름"\r\n* marginwidth = "왼쪽 여백"\r\n* marginheight = "위쪽 여백"\r\n* scrolling = "yes/no/auto"\r\n* noresize\r\n\r\nex) \r\n\r\n<frameset cols="30%, *" frameborder="yes">\r\n  <frame src="과제2-2.htm" name="menu">\r\n  <frame src="과제2-3.htm" name="content">\r\n</frameset>', '', '', 6, 0),
(365, '', '서대영', '', '2008-09-30 11:46:53', 'JavaScript', '전체화면 새창', 'window.open(url, "djvuframe", "channelmode=yes, resizable=yes");', '', '', 0, 0),
(366, '', '서대영', '', '2008-10-04 00:11:53', 'Tomcat', 'cafe24 톰캣 재가동법', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://cafe.naver.com/webcode.cafe?iframe_url=/ArticleRead.nhn%3Farticleid=6', 'http://cafe.naver.com/webcode.cafe?iframe_url=/ArticleRead.nhn%3Farticleid=6', '', 2, 0),
(367, '', '서대영', '', '2008-10-04 12:59:06', 'MySQL', 'MySQL Server 설치법', '* no-install\r\nhttp://www3.ntu.edu.sg/home/ehchua/programming/sql/MySQL_HowTo.html\r\n\r\n\r\n* installer\r\nhttp://blog.naver.com/smin0201?Redirect=Log&logNo=90003303455\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www3.ntu.edu.sg/home/ehchua/programming/sql/MySQL_HowTo.html', 'http://www3.ntu.edu.sg/home/ehchua/programming/sql/MySQL_HowTo.html', '', 7, 0),
(368, '', '서대영', '', '2008-10-04 13:01:50', 'MySQL', 'MySQL 명령어 ★', '※ MySQL사용법\r\n\r\n시작-프로그램-MySQL-MySQL server5.0-MySQL command Line Client-12345 : DBMS가 알아들음\r\n\r\n \r\n\r\n시작-실행-cmd : OS가 알아들음\r\n\r\n(cd,md,rd,dir,copy con-입력-ctrl+z-엔터,type a.txt-내용확인)-종속성\r\n\r\n \r\n\r\nmysql>show databases; - 디렉토리 보기\r\n\r\nmysql>create database korea; - 디렉토리 만들기\r\n\r\nmysql>drop database japan; - 디렉토리 삭제\r\n\r\nmysql>use korea; - 디렉토리 안으로 진입\r\n\r\nmysql>show tables; - 파일보기\r\n\r\nmysql>select 1; - 조회\r\n\r\nmysql>select 1000+50; - 사칙연산\r\n\r\nmysql>select now(); - 현재시간(함수호출)\r\n\r\nmysql>select 3<7; - 비교연산\r\n\r\nmysql>select if(60>50,"합격","불합격"); - 제어\r\n\r\nmysql>select ""; - 작은따옴표나 큰따옴표 마감시까지 오류 나옴\r\n\r\nmysql>quit - 클라이언트 종료\r\n\r\n \r\n\r\n도스창에서 MySQL접속사용-시작(ctrl+esc)-실행-cmd-c-dir-cd -mysql-bin-mysql.exe\r\n\r\n : 접근거부-아이디/패스워드 있어야함\r\n\r\nmysql (-h 호스트 -P 포트) -u root -p 엔터-->12345-->접속-->quit-->도스모드-->exit-->윈도우즈상태\r\n\r\n \r\n\r\nmysql>create table rank (no int , nation char(8), gold int); - 테이블만들기\r\n\r\nmysql>desc rank; - 테이블 내용보기\r\n\r\nmysql>select * from rank; - 테이블로부터 내용 가져오기\r\n\r\nmysql>insert into rank values(1,"중국",7); - 테이블에 값 넣기\r\n\r\nmysql>select no as "순위" , nation as "국가". gold as "메달" from rank; - 테이블 값 변경\r\n\r\nmysql>drop table rank; - 테이블 삭제\r\n\r\n \r\n\r\n* DBMS를 통해서 만들었으므로 독립성 존재함/수동으로 변경불가/mssql을 통해서만 수정가능\r\n\r\n[출처] MySQL 사용법|작성자 동윤맘\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// General\r\nSTATUS      // Displays status such as port number\r\n;           // Sends command to server for processing (or \\g)\r\n\\c          // Cancels (aborts) the current command\r\n\\G          // Displays the row vertically\r\n \r\n// Database-level\r\nDROP DATABASE databaseName                 // Deletes the database\r\nDROP DATABASE IF EXISTS databaseName       // Deletes only if it exists\r\nCREATE DATABASE databaseName               // Creates a new database\r\nCREATE DATABASE IF NOT EXISTS databaseName // Creates only if it does not exists\r\nSHOW DATABASES                             // Shows all databases in this server\r\n   \r\n// Set current (default) database.\r\n// Otherwise you need to use the fully-qualified name, in the form \r\n//   of "databaseName.tableName", to refer to a table.\r\nUSE databaseName\r\n   \r\n// Table-level\r\nDROP TABLE tableName\r\nDROP TABLE IF EXISTS tableName\r\nCREATE TABLE tableName (column1Definition, column2Definition, ...)\r\nCREATE TABLE IF NOT EXISTS tableName (column1Definition, column2Definition, ...)\r\nSHOW TABLES              // Shows all the tables in the default database\r\nDESCRIBE tableName       // Describes the columns for the table\r\nDESC tableName           // Same as above\r\n   \r\n// Record-level (CURD - create, update, read, delete)\r\nINSERT INTO tableName VALUES (column1Value, column2Value,...)\r\nINSERT INTO tableName (column1Name, ..., columnNName) \r\n   VALUES (column1Value, ..., columnNValue)\r\nDELETE FROM tableName WHERE criteria\r\nUPDATE tableName SET columnName = expression WHERE criteria\r\nSELECT column1Name, column2Name, ... FROM tableName \r\n   WHERE criteria\r\n   ORDER BY columnAName ASC|DESC, columnBName ASC|DESC, ...\r\n  \r\n// Running a script of MySQL statements\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www3.ntu.edu.sg/home/ehchua/programming/sql/MySQL_HowTo.html', NULL, '', 44, 0),
(2088, 'dale.seo', '', '', '2016-06-19 11:39:15', '', '[mysql shell] 데이터베이스 생성/삭제/열람/선택', 'https://opentutorials.org/course/195/1404\r\n\r\ncreate database dale character set utf8 collate utf8_general_ci;\r\n\r\nshow databases;\r\n\r\nuse dale;', NULL, '', 2, 0),
(369, '', '서대영', '', '2008-10-04 13:07:47', 'MySQL', 'JDBC MySQL 세팅', '	private static final String CLASS_NAME = "com.mysql.jdbc.Driver";\r\n	private static final String URL = "jdbc:mysql://localhost/dale";\r\n	private static final String USER = "dayo713";\r\n	private static final String PASSWORD = "yeji0818";\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nURL = jdbc:mysql://서버IP/데이터베이스', '', '', 18, 0),
(370, '', '서대영', '', '2008-10-04 15:22:48', 'MySQL', 'MySQL DDL', '* null 로 전환\r\nalter table  테이블명 change 칼럼명 칼럼명 타입;\r\nex) ALTER TABLE `dupont_free` CHANGE `url` `url` VARCHAR( 255 ) [null];  \r\n\r\n* not null 로 전환\r\nalter table  테이블명 change 칼럼명 칼럼명 타입 not null;\r\nex) ALTER TABLE `dupont_free` CHANGE `url` `url` VARCHAR( 255 ) not null;\r\n\r\n* 테이블 이름 변경\r\nalter talbe 구테이블명 rename 새테이블명;\r\nALTER TABLE `dupont_free` RENAME `dupont`;\r\n\r\n* 테이블 칼럼 추가\r\nALTER TABLE  categories ADD  date DATE NOT NULL ;', '', '', 7, 0),
(371, '', '서대영', '', '2008-10-04 17:28:08', 'JavaScript', '자신의 태그의 가르키는 객체 this', 'this를 함수의 인자로 사용하면, 외부 js 파일을 만들었을 때 편리하다.\r\n\r\n<form method="post" action="/jsp/Result.jsp" onsubmit="return Validate_Data(this)">', '', '', 2, 0),
(373, '', '서대영', '', '2008-10-04 22:07:05', 'HTML', '[form 태그] select - option 태그', '# 드롭 다운 메뉴\r\n\r\n<select [multiple] name="이름">\r\n  <option [value = "실제값"]>표시값</option>\r\n</select>\r\n\r\n* multiple 속성을 사용하면 복수 선택이 가능함\r\n* option에 value 속성값을 지정안하면 태그 안의 값이 value로 지정됨\r\n(단 유효성 검사사 value 값을 사용못하므로 지양)', '', '', 9, 0),
(374, '', '서대영', '', '2008-10-04 22:18:50', 'JavaScript', '유효성 체크 단위 소스', '# input 종류 (text, select-one, radio, checkbox에 상관없이 작동)\r\n\r\nfunction validateForm(form) {\r\n	var isValid = true;\r\n	if (!validateInput(form.Country) || !validateInput(form.Platform) || !validateInput(form.SBU)) \r\n		isValid = false; \r\n	return isValid;\r\n}\r\n\r\nfunction validateInput(input) {\r\n	var isValid = false;\r\n	var isSingle = input.type == "text" || input.type == "select-one";\r\n	if (isSingle) {\r\n		if (input.value != "") isValid = true;\r\n	} else {\r\n		for (var i = 0; i < input.length; i++)\r\n			if (isValid = input[i].checked) break; \r\n	}\r\n	if(!isValid) { \r\n		alert("You did not answer all questions"); \r\n		if (isSingle) input.focus();\r\n		else input[0].focus();\r\n	}\r\n	return isValid;\r\n}\r\n\r\n-----------------------------------------------------------\r\n\r\nfunction validateInput(input, msg) {   \r\n\r\n	if (input.value == "") {\r\n		alert(input.name + msg); \r\n		input.focus();\r\n		return false;\r\n	}\r\n	else return true;\r\n	\r\n}\r\n\r\n\r\nfunction validateChecks(checks, msg) {   \r\n	\r\n	var isValid = false;\r\n	\r\n	for (var i = 0; i < checks.length; i++) {\r\n		if (isValid = checks[i].checked) break;    \r\n	}\r\n\r\n	if(!isValid) {      \r\n		alert(checks[0].name + msg); \r\n		checks[0].focus();\r\n	}\r\n	\r\n	return isValid;\r\n	\r\n}', '', '', 26, 0),
(372, '', '서대영', '', '2008-10-04 19:27:52', 'JavaScript', '체크박스 유효성체크', '	flag = true;\r\n	for (i = 0; i < form.SBU.length; i++) {\r\n		if (form.SBU[i].checked) {   \r\n			flag = false;\r\n		}\r\n	}\r\n	if (flag) {\r\n		alert("SBU must be selected");\r\n		form.SBU[0].focus();\r\n		return false;\r\n	}', '', '', 9, 0),
(375, '', '서대영', '', '2008-10-05 12:54:35', 'UML', '클래스 다이어그램', '클래스이름\r\n-----------\r\n- 애트리뷰트\r\n-----------\r\n+ 오퍼레이션()\r\n\r\n* 클래스 이름 : 명사, 대문자로 시작\r\n* 애트리뷰트와 오버레이션 : 명사/동사, 소문자로 시작\r\n* 패키지이름이 있을 때 : package_name :: ClassName\r\n* 추상 클래스와 추상 메서드는 이탤릭체로 표현\r\n\r\n\r\n# 애트리뷰트 표기법\r\n[가시성] 애트리뷰트이름 [:타입] [다중성] [=기본값] [{특성문자열}]\r\n\r\n# 오퍼레이션 표기법\r\n[가시성] 오퍼레이션이름([매개변수리스트]) [:리턴타입] [다수성] [{특성문자열}]ㄱ\r\n\r\n# 가시성 표기법\r\n+ public / # protected / - private\r\n\r\n# 인터페이스\r\n<< interface >>\r\n인터페이스이름\r\n-----------\r\n+ 오퍼레이션()', '', '', 6, 0),
(376, '', '서대영', '', '2008-10-05 14:28:17', 'JavaScript', '프린트 대화상자 띄우기', '<a href="javascript:window.print();">현재 페이지 프린트</a>', '', '', 3, 0),
(377, '', '서대영', '', '2008-10-05 14:39:30', 'JavaScript', '배경 글라데이션 효과', '<html>  \r\n<head>  \r\n    <title>BLUEB</title>  \r\n</head>  \r\n  \r\n<body style="filter:progid:DXImageTransform.Microsoft.Gradient(endColorstr=''#ccffcc'', startColorstr=''#FFFFFF'', gradientType=''0'');">  \r\n  \r\n</body>  \r\n</html>  \r\n\r\n------------------------------------------------------------\r\n\r\n<style>\r\nbody{filter=''progid:DXImageTransform.Microsoft.Gradient(GradientType=0, StartColorStr=yellowgreen, EndColorStr=#FFFFFF)''}\r\n</style> \r\n', '', '', 2, 0),
(378, '', '서대영', '', '2008-10-05 14:46:17', 'JavaScript', '마우스 물파장 효과 (인트로 사용할 것)', '<html>  \r\n<head>  \r\n    <title>http://www.blueb.co.kr</title>  \r\n  \r\n<style type="text/css">  \r\n    #screen {   \r\n        position:absolute;   \r\n        left: 0;   \r\n        top: 0;   \r\n        width: 100%;   \r\n        height: 100%;   \r\n        overflow: hidden;   \r\n    }   \r\n    #screen img {   \r\n        position: absolute;   \r\n        filter: alpha(opacity=50);   \r\n        opacity: 0.5;   \r\n        left: -1000px;   \r\n    }   \r\n</style>  \r\n  \r\n<script type="text/javascript">  \r\nvar xm = 0;   \r\nvar ym = 0;   \r\nvar nx = 0;   \r\nvar ny = 0;   \r\nvar nw = 0;   \r\nvar nh = 0;   \r\n  \r\n  \r\nfunction resize() {   \r\n    with(document.getElementById("screen")){   \r\n        nx = offsetLeft;   \r\n        ny = offsetTop;   \r\n        nw = offsetWidth;   \r\n        nh = offsetHeight;   \r\n    }   \r\n}   \r\nonresize = resize;   \r\n  \r\ndocument.onmousemove = function(e){   \r\n    if(window.event) e=window.event;   \r\n    xm = (e.x || e.clientX) - nx;   \r\n    ym = (e.y || e.clientY) - ny;   \r\n    R = 1;   \r\n}   \r\n// ---------------------   \r\nvar Nb = 17;   \r\nvar R = 0;   \r\nvar C = 0;   \r\nvar object = new Array();   \r\n  \r\nfunction makedoot(N){   \r\n    this.ds = document.createElement("img");    \r\n    this.ds.src = document.getElementById("glob").src;   \r\n    document.getElementById("screen").appendChild(this.ds);   \r\n    this.r = (N * 100 / Nb);   \r\n    this.x = -1000;   \r\n    this.y = 0;   \r\n    this.Ge = function (){   \r\n        with (this){   \r\n            if (r >= 100){   \r\n                R--;   \r\n                if (R<0){   \r\n                    x = Math.random() * nw;   \r\n                    y = Math.random() * nh;   \r\n                }   \r\n                else {   \r\n                    x = xm;   \r\n                    y = ym;   \r\n                }   \r\n                r = 0;   \r\n                ds.style.zIndex = C++;   \r\n            }   \r\n            r += 2;   \r\n            with (ds.style){   \r\n                left = Math.round(x-r)+"px";   \r\n                top = Math.round(y-r)+"px";   \r\n                width = height = Math.round(r * 2)+"px";   \r\n            }   \r\n            if (ds.filters != undefined) ds.filters.item(0).opacity = Math.round(102 - r);   \r\n            else ds.style.opacity = (102 - r) / 100;   \r\n        }   \r\n    }   \r\n}   \r\n  \r\n  \r\nonload = function() {   \r\n    resize();   \r\n    for (i=0; i<Nb; i++) object[i] = new makedoot(i);   \r\n    setInterval("for(i in object)object[i].Ge();", 16);   \r\n}   \r\n  \r\n</script>  \r\n</head>  \r\n  \r\n<body>  \r\n  \r\n<div id="screen"></div>  \r\n  \r\n<img id="glob" src="http://www.blueb.co.kr/SRC/javascript/image5/Glob8.gif" style="visibility: hidden">  \r\n  \r\n</body>  \r\n</html>  \r\n', '', '', 3, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(379, '', '서대영', '', '2008-10-05 14:48:11', 'JavaScript', '마우스를 피해다니는 젤리 (인트로)', '<HTML>\r\n<HEAD>\r\n    <TITLE>BLUE-B</TITLE>\r\n\r\n<style type="text/css">\r\n    img {position:absolute;left:-1000;}\r\n</style>\r\n\r\n<script type="text/javascript">\r\n<!--\r\nwindow.onerror         = new Function("return true");\r\ndocument.onselectstart = new Function("return false");\r\nscreen.bufferDepth     = 16;\r\n\r\nobject = new Array();\r\nN  = 0;\r\nxm = -1E10;\r\nym = 0;\r\nnx = 0;\r\nny = 0;\r\nS  = 0;\r\nW  = 0;\r\nH  = 0;\r\n/////////////\r\nNi = 48;\r\n/////////////\r\n\r\nfunction CObj(N,x,y,src){\r\n    o = document.createElement("img");\r\n    o.src = src;\r\n    document.getElementById("CENTER").appendChild(o);\r\n    this.obj  = o.style;\r\n    this.x  = x;\r\n    this.y  = y;\r\n    this.x0 = x;\r\n    this.y0 = y;\r\n    this.anim = function () {\r\n        with(this){\r\n            dx = xm - x;\r\n            dy = ym - y;\r\n            d = Math.sqrt(dx * dx + dy * dy);\r\n            x = x - S / d * (dx / d) + (x0 - x) * .5;\r\n            y = y - S / d * (dy / d) + (y0 - y) * .5;\r\n            obj.left = x - W;\r\n            obj.top  = y - H;\r\n        }\r\n    }\r\n}\r\n\r\nfunction run(){\r\n    for(i in object)object[i].anim();\r\n    setTimeout("run()", 16);\r\n}\r\n\r\ndocument.onmousemove = function(e){\r\n    if (window.event) e = window.event;\r\n    xm = -nx * .5 + (e.x || e.clientX);\r\n    ym = -ny * .5 + (e.y || e.clientY);\r\n}\r\n\r\nfunction resize(){\r\n    nx = document.body.offsetWidth;\r\n    ny = document.body.offsetHeight;\r\n    S  = ny * 20;\r\n}\r\nonresize = resize;\r\n\r\nonload = function() {\r\n    img = document.getElementById("IMG");\r\n    resize();\r\n    W  = img.width  / 2;\r\n    H  = img.height / 2;\r\n    A = (2 * Math.PI) / Ni;\r\n    for(var i=0; i<Ni; i++){\r\n        x = W * Math.cos(A * i);\r\n        y = H * Math.sin(A * i);\r\n        object[i] = new CObj(i,x,y, img.src);\r\n    }\r\n    run();\r\n}\r\n//-->\r\n</script>\r\n</head>\r\n\r\n\r\n<body>\r\n\r\n<div id="CENTER" style="position:absolute;left:50%;top:50%"></div>\r\n\r\n<img id="IMG" src="http://www.blueb.co.kr/SRC/javascript/image3/Glob1.gif" style="VISIBILITY: hidden">\r\n\r\n</body>\r\n</html> ', '', '', 5, 0),
(380, '', '서대영', '', '2008-10-05 15:18:25', 'JavaScript', '첨부 파일 입력 폼 추가', '<script language=''javascript'' type=''text/javascript''> \r\n<!-- \r\nvar uf = ''''; \r\nfunction sw_file_add(size, ext) \r\n{ \r\n    eval(''sw_file_add_form'' + uf).innerHTML += "<input type=file name=file[] size=''" + size + "'' " + ext + "><div id=''sw_file_add_form" + (uf+1) + "''></div>"; \r\n    uf++; \r\n} \r\n--> \r\n</script> \r\n\r\n<form name=sw_write_form method=post enctype="multipart/form-data" action="board.php?table=test&mode=insert"> \r\n    <input type=file name=file[] size=50 class=input_write> \r\n    &nbsp;<a href="javascript:sw_file_add(50, ''class=input_write'');"><b>첨부폼추가</b></a> \r\n    <div id=sw_file_add_form></div> \r\n</form> ', '', '', 9, 0),
(381, '', '서대영', '', '2008-10-05 15:22:07', 'JavaScript', '입력폼 선택시 바탕색 하이라이트', '<script>\r\nfocusColorAll.color = ''#ffcc00'';\r\nfunction focusColorAll(strId) { \r\n   var objParent = document.getElementById(strId);\r\n   var arrInput = document.forms[strId].elements;\r\n   for(var i=0; i<arrInput.length; i++) {\r\n      var objSrc = arrInput[i];\r\n      if(objSrc.type == ''text'' || objSrc.type == ''textarea'') {\r\n         objSrc.onfocus = function() {  \r\n             focusColorAll.oldcolor = this.style.backgroundColor;\r\n             this.style.backgroundColor = focusColorAll.color;\r\n         }\r\n\r\n         objSrc.onblur = function() {  \r\n             this.style.backgroundColor = focusColorAll.oldcolor;\r\n         }\r\n      }\r\n   }\r\n}\r\n</script>\r\n\r\n<form name="f1">\r\n<input type="text" name="a1"><br>\r\n<input type="text" name="a2"><br>\r\n<input type="text" name="a3"><br>\r\n</form> \r\n\r\n<script>\r\n   focusColorAll(''f1'');\r\n</script>', '', '', 5, 0),
(382, '', '서대영', '', '2008-10-05 15:23:00', 'JavaScript', '입력폼 선택시 테두리 하이라이트', '<html>\r\n<head>\r\n    <title>http://www.blueb.co.kr</title>\r\n<style>\r\n.box { font: 12px "verdana"; COLOR: #434343; border:#C8C8C8 1px solid;padding:4 0 0 4;}\r\n.onInput3 { font: 12px "verdana"; COLOR: #434343; border:1px solid #F0563E; padding:4 0 0 4;}\r\n.offInput3 { font: 12px "verdana"; COLOR: #434343; border:1px solid #C8C8C8; padding:4 0 0 4;}\r\n</style>\r\n<script language="javascript">\r\nfunction overInput(f) {\r\n    f.className = "onInput3";\r\n}\r\n\r\nfunction outInput(f) {\r\n    f.className = "offInput3";\r\n}\r\n</script>\r\n</head>\r\n\r\n<body>\r\n\r\n<input type="text" name="username" value="" style="height: 22px;width: 135px;" class="box" onFocus="overInput(this);" onBlur="outInput(this);">\r\n<input type="password" name="passwd" style="height: 22px;width: 135px;" class="box" onFocus="overInput(this);" onBlur="outInput(this);">\r\n\r\n</body>\r\n</html> ', '', '', 4, 0),
(383, '', '서대영', '', '2008-10-05 22:00:25', 'CSS', '얇은 테두리 테이블', '# 방법 1\r\n\r\n<table cellspacing="1" bgcolor="gray">\r\n<tr bgcolor="white">\r\n\r\n# 방법 2\r\n\r\n<style>\r\n	.tbl {\r\n		border: 1px solid #gray;\r\n		border-collapse:collapse;\r\n		font-family: arial;\r\n		font-size: 8pt;\r\n		color:dimgray;\r\n	}\r\n	.tbl td, .tbl th {\r\n		border: 1px solid #gray;\r\n		padding: 5px;\r\n		text-align: center;\r\n	}\r\n</style>\r\n</head>\r\n\r\n<body>\r\n<table cellspacing="0" class="tbl">', '', '', 3, 0),
(384, '', '서대영', '', '2008-10-05 22:56:24', 'JavaScript', '테이블 색상을 한줄 씩 엇갈리게 색상을 적용', '	function alternateRowColors(tbl) {\r\n		var rows = tbl.getElementsByTagName("TR");\r\n		for (var i = 0; i < rows.length; i++) {\r\n			if (rows[i].childNodes[0].tagName != "TH" && i % 2 == 0)\r\n				rows[i].bgColor = "#EEEEEE";\r\n		}\r\n	}\r\n\r\n\r\n<table id="tbl">', '', '', 14, 0),
(385, '', '서대영', '', '2008-10-06 15:11:59', 'Java', 'ArrayList', 'remove(int index) 할 때는 항상 뒷 인덱스부터 뽑아낼 것.', '', '', 0, 0),
(386, '', '서대영', '', '2008-10-06 17:04:35', 'HTML', '대표 폰트', 'Dotum\r\n\r\nGulim\r\n\r\nTahoma\r\n\r\nVerdana\r\n\r\nArial\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/songjaesoon?Redirect=Log&logNo=25950298', 'http://blog.naver.com/songjaesoon?Redirect=Log&logNo=25950298', '', 1, 0),
(387, '', '서대영', '', '2008-10-06 19:17:21', 'JavaScript', '디자인이 적용된 종합 폼', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blueb.co.kr/bbs.php?table=JS_08&where=ALL&search_step=1&category=종합/기타&query=view&uid=114&p=2#', 'http://blueb.co.kr/bbs.php?table=JS_08&where=ALL&search_step=1&category=종합/기타&query=view&uid=114&p=2#', '', 2, 0),
(388, '', '서대영', '', '2008-10-10 11:50:28', 'Unix', '압축 명령어', '□ 파일\r\n\r\ngzip <파일명>\r\n : <파일명>.gz 파일로 압축됨\r\n\r\n\r\n-1 : compress faster \r\n-9 : compress better\r\n-d 압축풀기\r\n\r\n\r\n□ 폴더\r\n\r\n# 압축하기\r\n\r\ntar cvf 압축파일명.jar 압축할폴더\r\n\r\n\r\n# 압축풀기\r\n\r\ntar xvf 압축파일명.jar\r\n* 로그 없이\r\ntar zxf 압축파일명.jar\r\n\r\n\r\n# 주의사항\r\n\r\nftp에서 폴더 전체를 put 할 때 편리\r\n항상 경로 생각할 것.\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://cafe.naver.com/swingme.cafe?iframe_url=/ArticleRead.nhn%3Farticleid=16', NULL, '', 54, 0),
(389, '', '서대영', '', '2008-10-15 16:57:09', 'JSP', '삼항 연산자를 이용한 request 널 값 처리', 'String S_1_1 = request.getParameter("S_1_1") == null ? "" : request.getParameter("S_1_1");', '', '', 2, 0),
(390, '', '서대영', '', '2008-10-15 17:25:29', 'JavaScript', '자바스크립트 안에 jsp 코드 삽입', '	function nomalAlert(){\r\n		alert("<%=prop.getProperty("alert.message.1")%>!!");\r\n		return false;\r\n	}', '', '', 4, 0),
(391, '', '서대영', '', '2008-10-15 17:30:05', 'JavaScript', 'textarea 글자수 제한', '	/**\r\n	 * Validates a field regarding date. (Event Call-back Function)\r\n	 * @author Dale Seo\r\n	 * @since 2011.10.19\r\n	 * @version 1.0\r\n	 */\r\n	function validateDate() {\r\n		if($j(this).val().length >= 10) {\r\n			alert(''Input the date in the right format.'');\r\n			$j(this).val($j(this).val().substring(0, 10));\r\n			return false;\r\n		}\r\n	}\r\n\r\n\r\n------------------------------------------------------------\r\n\r\n<TEXTAREA NAME="A_34" ROWS="" COLS="3" style="width=99%;" onKeyPress="Javascript:textCounter(this,1900);">', '', '', 11, 0),
(392, '', '서대영', '', '2008-10-18 11:19:45', 'CSS', '웹폰트 변환법 (WEFT 사용법)', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://eunhwak.egloos.com/4388922', 'http://eunhwak.egloos.com/4388922', '', 0, 0),
(393, '', '서대영', '', '2008-10-19 18:51:04', 'CSS', '스크롤바', '<STYLE>\r\nBODY { scrollbar-3dlight-color:#CCCCCC;\r\nscrollbar-arrow-color:#CCCCCC;\r\nscrollbar-track-color:#FFFFFF;\r\nscrollbar-darkshadow-color:#FFFFFF;\r\nscrollbar-face-color:#FFFFFF;\r\nscrollbar-highlight-color:#FFFFFF;\r\nscrollbar-shadow-color:#CCCCCC}\r\n</STYLE>\r\n\r\n\r\nbody {\r\n             scrollbar-face-color: #CCCCCC;\r\n             scrollbar-arrow-color: #333333;\r\n             scrollbar-track-color: #FFFFFF;\r\n	scrollbar-highlight-color: #FFFFFF;\r\n	scrollbar-3dlight-color: #FFFFFF;\r\n	scrollbar-darkshadow-color: #FFFFFF;\r\n	scrollbar-shadow-color: #FFFFFF;\r\n}\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://yoonmi.net/scroll.htm', 'http://yoonmi.net/scroll.htm', '', 2, 0),
(394, '', '서대영', '', '2008-10-25 10:19:21', 'UML', 'Structural Diagram', '# 클래스 다이어그램\r\n\r\n정적인 클래스 관계\r\n\r\n# 컴포넌트 다이어그램\r\n\r\n제공하는 인터페이스 ○---------[컴포넌트]---------( 필요한 인터페이스\r\n\r\n# 디플로이먼트 다이어그램\r\n\r\n하드웨어 관계\r\n\r\n# 컴포지트 스트럭처 다이어 그램\r\n\r\n복합구조\r\n\r\n# 패키지 다이어그램\r\n\r\n패키지의 import와 access\r\n', '', '', 3, 0),
(395, '', '서대영', '', '2008-10-25 11:19:19', 'Weblogic', 'Behavioral Diagram', '# 유스케이스 다이어그램\r\n\r\n* 액터\r\n- 시스템의 사용자 또는 타 시스템\r\n\r\n* 유스케이스\r\n- 시스템의 기능\r\n- 타원으로 표현\r\n- "목적어 + 행위" 형태로 표현\r\n\r\n* 연관 관계\r\n- 액터와 유스케이스 사이\r\n\r\n* 포함 관계\r\n- 유스케이스 사이 포함\r\n\r\n* 확장 관계\r\n- 선택적 수행\r\n\r\n# 시퀀스 다이어그램\r\n\r\n- 가장 일반적인 인터렉션 다이어그램\r\n- 객체간의 송수신 메세지를 시간의 흐름에 따라 나열\r\n\r\n# 객체(Object)\r\n# 생명선(LifeLine)\r\n# 메시지(Message)\r\n# 제어초점(Focus of Control)\r\n\r\n# 커뮤니테이션 다이어그램\r\n\r\n# 인터렉션 오버뷰 다이어그램\r\n\r\n# 타이밍 다이어그램\r\n\r\n* 시간의 흐름에 따른 상태의 변화\r\n\r\n# 엑티비티 다이어그램\r\n\r\n* 시스템의 동적인 관점\r\n* 액션, 분기, 포크와 조인\r\n- 시작 ●\r\n- 종료 ⊙\r\n\r\n\r\n# 스테이트머신 다이어그램\r\n\r\n# 다이어그램 실습', '', '', 1, 0),
(396, '', '서대영', '', '2008-10-25 12:27:00', 'IT', '소프트웨어 컴포넌트', '=> 하나 이상의 기능을 갖는 독립적인 소프트웨어인 동시에\r\n조립을 통해 응용 프로그램을 작성할 수 있는 부품 형태의 소프트웨어\r\n\r\n=> 표준 인터페이스를 갖춰야 함\r\n\r\n소프트웨어의 재사용성, 기능적 독립성, 대체 \r\n', '', '', 0, 0),
(397, '', '서대영', '', '2008-10-26 12:09:38', 'UML', 'UML 모델링 순서', '# Usecase Modeling\r\n\r\n1. 요구사항 정의\r\n\r\n2. 유스케이스 모델링\r\n\r\n3. 유스케이스 상세화\r\n\r\n\r\n# Structural Modeling\r\n\r\n1. 객체 모델링\r\n\r\n2. 유스케이스 정적 분석\r\n\r\n\r\n# Behavioral Modeling\r\n\r\n1. 유스케이스 동적 분석 (시퀀스, 커뮤니케이션 다이어그램)\r\n\r\n2. 상태 모델링 (스테이트머신 다이어그램)\r\n\r\n\r\n# Component Modeling\r\n\r\n1. 소프트웨어 아키텍쳐 정의\r\n\r\n2. 컴포넌트 식별\r\n\r\n3. 컴포넌트 사호정의 (시퀀스 다이어그램)', '', '', 5, 0),
(398, '', '서대영', '', '2008-10-27 01:08:14', 'JavaScript', '클립보드로 복사', '<HTML>\r\n<HEAD>\r\n    <TITLE>BLUEB</TITLE>\r\n<script> \r\nfunction copy_msg(obj){ \r\n        var doc = document.all[obj].createTextRange(); \r\n        document.all[obj].select(); \r\n        doc.execCommand(''copy''); \r\n        alert("클립보드로 복사 되었습니다. nnCtrl + V로 붙여넣기를 하세요."); \r\n} \r\n</script> \r\n</HEAD>\r\n\r\n<BODY>\r\n<textarea cols="40" rows="5" id="copymsg">\r\n사랑은 유리같은 것 \r\n김도훈 편곡 \r\n\r\n정말 몰랐어요 사랑이란 유리 같은 것 \r\n아름답게 빛나지만 깨어지기 쉽다는 걸 \r\n이젠 깨어지는 사랑의 조각들은 \r\n가슴 깊이 파고 드는 견딜 수 없는 아픔이에요 \r\n슬픔은 잊을 수가 있지만 상처는 지울 수가 없어요 \r\n오랜 시간이 흘러도 희미해 질 뿐이에요 \r\n사랑하는 그대여 이것만은 기억해줘요 \r\n그토록 사랑했던 내 영혼은 지금 어두운 그림자 뿐임을 \r\n\r\n슬픔은 잊을 수가 있지만 상처는 지울 수가 없어요 \r\n오랜 시간이 흘러도 희미해 질 뿐이에요 \r\n사랑하는 그대여 이것만은 기억해줘요 \r\n그토록 사랑했던 내 영혼은 지금 어두운 그림자 뿐임을 \r\n\r\n그토록 사랑했던 내 영혼은 지금 어두운 그림자 뿐임을\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.blueb.co.kr/bbs.php?table=JS_02&where=ALL&search_step=1&category=텍스트&query=view&uid=131&p=5', 'http://www.blueb.co.kr/bbs.php?table=JS_02&where=ALL&search_step=1&category=텍스트&query=view&uid=131&p=5', '', 1, 0),
(399, '', '서대영', '', '2008-10-27 01:11:27', 'JavaScript', '다가오는 글씨', '<HTML>\r\n<HEAD>\r\n    <TITLE>BLUEB</TITLE>\r\n<SCRIPT LANGUAGE="JavaScript">\r\n<!--\r\nmessage = "Welcome To WWW.BLUEB.CO.KR";   //텍스트 지정\r\ncolours = new Array(''000099'',''ff6600'')  //색상지정\r\nsiZe = 20;\r\nmessage = message.split('' '');\r\ntimer = null;\r\nclrPos = 0;\r\nmsgPos = 0;\r\njog = 1;\r\ncurrentStep = 10;\r\nstep = 8;\r\nns = (document.layers)?1:0;\r\nviz = (document.layers)?''hide'':''hidden'';\r\n\r\n    if (ns)\r\n        document.write("<div id=''T'' style=''position:absolute''></div><br>");\r\n            else {\r\n                document.write("<div style=''position:absolute''>");\r\n                document.write("<div align=''center'' style=''position:relative''>");\r\n                document.write("<div id=''T'' style=''position:absolute;width:0;height:0;font-family:Arial;font-size:0''>kurt</div>");\r\n                document.write("</div></div><br>");\r\n    }\r\n\r\nfunction Message() {\r\n    var pageHeight = (document.layers)?window.innerHeight:window.document.body.offsetHeight;\r\n    var pageWidth = (document.layers)?window.innerWidth:window.document.body.offsetWidth;\r\n        if (ns) {\r\n            ypos = pageHeight / 2;\r\n            var Write = ''<div align="center" style="width:0px;height:0px;font-family:Arial,Verdana;font-size:''+currentStep/4+''px;color:''+colours[clrPos]+''">''+message[msgPos]+''</div>'';\r\n                document.T.top = ypos + -currentStep / 8 + window.pageYOffset;\r\n                document.T.document.write(Write)\r\n                document.T.document.close();\r\n        }\r\n        else {\r\n            ypos = pageHeight / 2;\r\n            xpos = pageWidth / 2;\r\n            T.style.width = currentStep;\r\n            T.style.pixelTop = ypos + -currentStep / 16 + document.body.scrollTop;\r\n            T.style.pixelLeft = (xpos - 20)+ -currentStep / 2;\r\n            T.style.fontSize = currentStep / 8;\r\n            T.innerHTML = message[msgPos];\r\n            T.style.color = colours[clrPos];\r\n        }\r\n        \r\n        if (ns)step += 5;\r\n            else step += 15;\r\n                currentStep += step\r\n        if (ns) {\r\n        if (currentStep > pageWidth) {\r\n            currentStep = 10;\r\n            step = 8;\r\n            msgPos += jog;\r\n            clrPos += jog;\r\n        }\r\n        if (clrPos >= colours.length) clrPos = 0;\r\n        }\r\n        else {\r\n        if (currentStep > pageWidth * siZe) {\r\n            currentStep = 10;\r\n            step = 8;\r\n            msgPos += jog;\r\n            clrPos += jog;\r\n        }\r\n        if (clrPos >= colours.length) clrPos = 0;\r\n        }\r\n        if (msgPos >= message.length) {\r\n            clearTimeout(timer);\r\n        if (ns) document.T.visibility = viz;\r\n        else T.style.visibility = viz;\r\n        }\r\n        timer = setTimeout("Message()",40)\r\n        }\r\n//-->\r\n</script>\r\n</HEAD>\r\n<BODY onLoad="Message()">\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.blueb.co.kr/bbs.php?table=JS_02&where=ALL&search_step=1&category=텍스트&query=view&uid=51&p=7', 'http://www.blueb.co.kr/bbs.php?table=JS_02&where=ALL&search_step=1&category=텍스트&query=view&uid=51&p=7', '', 6, 0),
(400, '', '서대영', '', '2008-10-27 11:46:58', 'Unix', 'Telnet 명령어', 'ls 파일명 : 단순 검색\r\nll 파일명 : 상세 검색\r\n-R 서브디렉토리의 내용까지 출력합니다. \r\n-t 시간 순서로 정렬합니다. \r\n-tr 시간 내림차순\r\n-F 디렉토리, 실행파일, 텍스트 파일을 구분 지어 나열합니다. \r\nls 파일명.xls : 검색 목록 파일로 내보내기\r\n\r\ncd : 기본 경로로 이동\r\ncd / : 최상위 경로로 이동\r\ncd .. : 상위 폴더로 이동\r\nwl : start.sh, stop.sh 가 있는 곳으로 이동\r\n\r\n□ cp : 복사\r\n- R : 하위 디렉토리 포함\r\n \r\n□ mv : 이동\r\n- R : 하위 디렉토리 포함\r\n\r\nman 명령어 : 명령어 설명서 보기\r\ndate : 현재 날짜 시간\r\n\r\nesc + k : 전에 썼던 명령어\r\n- h 좌 ㅣ 우 x 지우기\r\n\r\n□ 실시간 로그 보기\r\ntail -f 파일명 | grep 검색어 \r\n\r\n□ 파일 검색\r\nfind ./ | grep 검색어\r\n\r\n(Global Regular Expression Print)\r\n\r\n□ 연결 폴더 보기\r\nbdf .\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/sispaqlove?Redirect=Log&logNo=80035459101', 'http://blog.naver.com/sispaqlove?Redirect=Log&logNo=80035459101', '', 67, 0),
(401, '', '서대영', '', '2008-10-28 13:46:18', 'Oracle', '대소문자 구분 안하고 검색', 'upper 또는 lower 함수를 사용\r\n\r\nselect title from t_boarddata where upper(title) like upper(''%trade%'') \r\n', '', '', 3, 0),
(402, '', '서대영', '', '2008-10-28 15:41:29', 'Unix', 'VI 에디터 사용법', 'vi +100 <filename> 100번째 행을 부터 보여줌\r\n\r\nG : 마지막 행으로 이동\r\n21G : 21번째 행으로 이동\r\n\r\n:set nu 행번호 표시\r\n:set nonu 행번호 숨기기\r\n\r\n\r\n\r\n:q! => 저장 안하고 나오기\r\n:wq! => 저장 후 나오기\r\n:.,$ d => 글 전체 지우기\r\n\r\n/검색어 => 검색하기\r\nn 다음 검색\r\nN 이전 검색\r\n\r\nesc => 편집 모드\r\n\r\n- x : 삭제\r\n- a : 문자열 추가 (다음줄)\r\n- i : 문자열 삽입\r\n\r\n\r\n\r\n□ 커서이동\r\n- h : 커서를 한칸 왼쪽으로 이동\r\n- l : 커서를 한칸 오른쪽으로 이동\r\n- j,k : 이전에 실행된 명령어 호출 (j: 위로, k: 아래로)\r\n- ^ : 그 줄의 맨 앞으로\r\n- $ : 그 줄의 맨 뒤로\r\n\r\n \r\n\r\n<삽입모드로 전환>\r\n\r\ni : insert 커서의 앞에 삽입\r\n\r\na : add 커서의 뒤에 삽입\r\n\r\no : 다음 줄에 삽입\r\n\r\nEsc : 삽입 모드 해제\r\n\r\n \r\n□ 화면이동\r\n\r\n- ctrl + b : 위로 이동\r\n- ctrl + f : 아래로 이동\r\n\r\n<기타 편집키>\r\n\r\nx : 커서가 위치한 한 문자 삭제 (삭제된 문자는 버퍼에 저장됨)\r\n\r\np : paste 버퍼에 저장된 내용을 커서의 뒤에  붙여넣기\r\n\r\nD : 커서가 위치한 곳부터 줄 끝까지 삭제 (삭제된 문자는 버퍼에 저장됨)\r\n\r\ndd : 줄 전체 삭제\r\n\r\ns : switch 커서가 위치한 한 문자를 문자 또는 문장으로 치환 (Esc로 종료)\r\n\r\ncw : change word 커서가 위치한 곳부터 해당 단어으 끝까지 치환\r\n\r\nv :  화면을 vi 편집창으로 전환 (여러 라인에 걸쳐 명령을 편집후 수행 가능)\r\n\r\n\r\n\r\n\r\n< 들여쓰기, 내여쓰기 \r\n\r\n:> [num]\r\n\r\n# 한줄 복사\r\n yy\r\n\r\n# 붙여 넣기\r\n p\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://cafe.naver.com/iyagisunmul/322', 'http://cafe.naver.com/iyagisunmul/322', '', 65, 0),
(403, '', '서대영', '', '2008-10-29 23:07:28', 'JavaScript', 'window.onload = function() { ... }', '문서가 다 읽혀진 후 실행하야 하는 함수.\r\n\r\n<script>\r\nwindow.onload = function() {\r\n     function1();\r\n     function2();\r\n}\r\n</script>\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/hisun1027?Redirect=Log&logNo=130031958042', 'http://blog.naver.com/hisun1027?Redirect=Log&logNo=130031958042', '', 2, 0),
(404, '', '서대영', '', '2008-10-30 14:22:51', 'JSP', 'request 내장 객체의 메서드', '■ local의 기본 정보 (IP, Name, Port)\r\nLocal IP : <%=request.getLocalAddr()%>\r\nLocal Name : <%=request.getLocalName()%>\r\nLocal Port : <%=request.getLocalPort()%>\r\n\r\n■ 클라이언트의 정보\r\nRemote IP : <%=request.getRemoteAddr()%>\r\nRemote Host : <%=request.getRemoteHost()%>\r\nRemote Port : <%=request.getRemotePort()%>\r\n\r\n■ 서버 이름과 포트 (일반적으로 local 기본정보와 동일)\r\nServer Name : <%=request.getServerName()%>\r\nServer Port : <%=request.getServerPort()%>\r\n\r\n■ 지역 정보 (대부분 한국을 의미하는 ko가 나옴)\r\nLocale : <%=request.getLocale()%> \r\n \r\n\r\n■ 사용하는 프로토콜 ("프로토콜/메이저버전.마이너버전" 의 형태)\r\nProtocol : <%=request.getProtocol()%>\r\n\r\n■ http, https, ftp와 같은 것을 의미\r\nScheme : <%=request.getScheme()%>\r\n\r\n \r\n\r\n■ https와 같은 보안 채널의 사용 여부 (true/false 값으로 되어 있음)\r\nSecure Channel : <%=request.isSecure()%><br>\r\n\r\n \r\n\r\n■ 요청에 대한 URI, URL, 컨텍스트 경로, 서블릿 경로, GET/POST등의 메소드\r\nRequest''s URI : <%=request.getRequestURI()%>\r\nRequest''s URL : <%=request.getRequestURL()%>\r\nContext Path : <%=request.getContextPath()%>\r\nServlet Path : <%=request.getServletPath()%>\r\n\r\nMethod : <%=request.getMethod()%>\r\n\r\n■ 세션 ID에 대한 정보\r\nSession ID : <%=request.getRequestedSessionId()%>\r\nSession ID from Cookie : <%=request.isRequestedSessionIdFromCookie()%>\r\nSession ID from URL : <%=request.isRequestedSessionIdFromURL()%>\r\nSession ID is still valid : <%=request.isRequestedSessionIdValid()%>\r\n\r\n■ Header 정보\r\n<%\r\nEnumeration eHeader = request.getHeaderNames();\r\nwhile (eHeader.hasMoreElements()) {\r\n    String hName = (String)eHeader.nextElement();\r\n    String hValue = request.getHeader(hName);\r\n\r\n    out.println(hName + " : " + hValue + "<br>");\r\n}\r\n%>\r\n\r\n■ Request 객체를 통해서 쿠키 정보를 보는 방식\r\n<%\r\nCookie cookies[] = request.getCookies();\r\nfor (int i=0; i < cookies.length; i++) {\r\n    String name = cookies[i].getName();\r\n    String value = cookies[i].getValue();\r\n\r\n    out.println(name + " : " + value + "<br>");\r\n}\r\n%>\r\n\r\n \r\n\r\n    /**\r\n    * cookie 값을 설정하는 메소드.\r\n    * @param HttpServletResponse response\r\n    * @param String cookieName\r\n    * @param String cookieValue\r\n    */\r\n    public void setCookie(HttpServletResponse response, String cookieName, String cookieValue) {\r\n        int maxAge = (60 * 60 * 24 * 15); // 15day\r\n        setCookie(response, cookieName, cookieValue, maxAge);\r\n    }\r\n\r\n \r\n\r\n    /**\r\n    * cookie 값을 설정하는 메소드.\r\n    * @param HttpServletResponse response\r\n    * @param String cookieName\r\n    * @param String cookieValue\r\n    * @param int maxAge\r\n    */\r\n    public void setCookie(HttpServletResponse response, String cookieName, String cookieValue, int maxAge) {\r\n        cookieValue = URLEncoder.encode(cookieValue);\r\n        Cookie cookie = new Cookie(cookieName, cookieValue);\r\n        cookie.setMaxAge(maxAge);\r\n        response.addCookie(cookie);\r\n    }\r\n\r\n \r\n\r\n    /**\r\n    * cookie 값을 찾아서 리턴하는 메소드.\r\n    * @param HttpServletRequest request\r\n    * @param String cookieName\r\n    * @return String\r\n    */\r\n    public String getCookie(HttpServletRequest request, String cookieName) {\r\n        Cookie[] cookies = request.getCookies();\r\n        String cookieValue = null;\r\n        for (int i = 0; i < cookies.length; i++) {\r\n            if (cookieName.equals(cookies[i].getName())) {\r\n                cookieValue = URLDecoder.decode(cookies[i].getValue());\r\n                break;\r\n            }\r\n        }\r\n        return cookieValue;\r\n    }\r\n\r\n\r\n■ HTML 폼을 통해 넘어온 데이터를 받는 부분\r\n<%\r\nEnumeration eParam = request.getParameterNames();\r\nwhile (eParam.hasMoreElements()) {\r\n    String pName = (String)eParam.nextElement();\r\n    String pValue = request.getParameter(pName);\r\n\r\n    out.println(pName + " : " + pValue + "<br>");\r\n}\r\n%>\r\n\r\n■ 미리 설정한 attribute를 가져오는 부분\r\n<%\r\nEnumeration eAttr = request.getAttributeNames();\r\nwhile (eAttr.hasMoreElements()) {\r\n    String aName = (String)eAttr.nextElement();\r\n    String aValue = request.getHeader(aName);\r\n\r\n    out.println(aName + " : " + aValue + "<br>");\r\n}\r\n%>\r\n\r\n \r\n\r\nrequest.XXX\r\n\r\n=============================================================\r\n\r\n// 클라이언트 정보 및 서버정보 읽기\r\n\r\n=============================================================\r\n\r\nString  getRemoteAddr()               웹서버에 연결한 클라이언트의 IP 주소를 가져온다.\r\n\r\nlong     getContentLength()          클라이언트가 전송한 요청 정보의 길이를 구해온다.\r\n\r\nString  getCharacterEncoding()     클라이언트가 요청 정보를 전송할 때 사용한 캐릭터\r\n\r\n                                                      의  인코딩을 구해온다.\r\n\r\nString  getContentType()              클라이언트가 요청 정보를 전송할 때 사용한 컨텐츠\r\n\r\n                                                      의 타입을 구해온다.\r\n\r\nString  getProtocol()                     클라이언트가 요청한 프로토콜을 구한다.\r\n\r\nString  getMethod()                      웹 브라우저가 정보를 전송할 때 사용한 방식을 구한다.\r\n\r\nString  getRequestURI()               웹 브라우저가 요청한 URL에서 경로를 구한다.\r\n\r\nString  getContextPath()              JSP페이지가 속한 웹 어플리케이션의 콘텍스트 경로를\r\n\r\n                                                    구한다.\r\n\r\nString  getServerName()              연결할 때 사용한 서버 이름을 구한다.\r\n\r\nString  getServerPort()                서버가 실행 중인 포트 번호를 구한다.\r\n\r\n \r\n\r\n \r\n\r\n=============================================================\r\n\r\n//HTML폼과 요청파라미터 처리\r\n\r\n=============================================================\r\n\r\nString  getParameter(String name)                          이름이 name인 파라미터의 값을 구한다                                                                      (Request("name") 과 동일)\r\n\r\nString[]  getParameterValues(String name)            이름이 name인 모든 파라미터의 값을                                                                         배열로 가져온다.\r\n\r\njava.util.Enumeration  getParameterNames()         웹브라우저가 전송한  파라미터의\r\n\r\n                                                                                이름을 구한다.\r\n\r\njava.util.Map  getParameterMap()                           웹브라우저가 전송한 파라미터의\r\n\r\n                                                                                맵을 구한다.\r\n\r\n \r\n\r\nex> name파람 = request.getParameter("name")\r\n\r\n      Enumeration enum = request.getParameterNames();\r\n\r\n         while(enum.hasMoreElements)\r\n\r\n              String name = (String)enum.nextElement();\r\n\r\n \r\n\r\n \r\n\r\n=============================================================\r\n\r\n//요청 헤더 정보의 처리\r\n\r\n=============================================================\r\n\r\nString  getHeader(String name)                              지정한 이름의 헤더값을 구한다.\r\n\r\njava.util.Enumeration  getHeasers(String name)    지정한 이름의 헤더 목록을 구한다.\r\n\r\njava.util.Enumeration  getHeaderName()                모든 헤더의 이름을 구한다.\r\n\r\nint  getIntHeader(String name)                               지정한 헤더의 값을 정수값으로 \r\n\r\n                                                                                읽어온다.\r\n\r\nlong getDateHeader(String name)                      지정한 헤더의 값을 시간값으로 \r\n\r\n                                                                            읽어온다 (1970년1월1일 이후로\r\n\r\n                                                                            흘러간 1/1000초 단위로 읽어온다.)\r\n\r\nex> Enumeration enum = request.getHeaderNames();\r\n\r\n        while(enum.hasMoreElements()){\r\n\r\n            String headerName = (String)enum.nextElement();\r\n\r\n            String headerValue = request.getHeader(headerName);\r\n\r\n        }\r\n\r\n \r\n\r\n \r\n\r\n \r\n\r\n=============================================================\r\n\r\n//값 설정하기(Attribute)\r\n\r\n=============================================================\r\n\r\nvoid  setAttribute(String name, Object values)   이름이 name인 속성의 값을 values로 저장한다.\r\n\r\nObject getAttribute(String name)                        이름이 name인 속성의 값을 구한다.\r\n\r\nvoid removeAttribute(String name)                     이름이 name인 속성을 삭제한다.\r\n\r\njava.util.Enumeration getAttributeNames()         속성의 이름 목록을 구한다.\r\n\r\n \r\n\r\n## 주의 : setAttribute 에서 값이 Object이기 때문에 int, double과 같은 기본 데이터 타입은 속성값에 할당 할 수 없다. 이유는 Object가 아니기 때문이다. 이 경우엔 레퍼 클래스를 사용해야 한다.\r\n\r\n      Integer intValue = new Integer(100);\r\n\r\n      request.setAttribute("radio", intValue);  \r\n\r\n      ...\r\n\r\n      Integer intValue = (Integer)request.getAttribute("radio");\r\n\r\n      int value = intValue.intValue();\r\n[출처] Request 활용|작성자 고구마\r\n\r\n \r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/mrgoguma?Redirect=Log&logNo=140037077260', 'http://blog.naver.com/mrgoguma?Redirect=Log&logNo=140037077260', '', 45, 0),
(405, '', '서대영', '', '2008-10-30 16:36:58', 'SQL', 'WHERE절에서 NULL 값 다루기 ★', '\r\n□ 주의!! NULL값이 포함된 필드에서 특정값을 제외학고 조회\r\n\r\nWHERE comlumn <> ''D''\r\n=> X (널값을 제외한 다른 값들만 나옴)\r\nWHERE NVL(comlumn, '' '') <> ''D''\r\n=> O (널값을 포함한 다른 값들이 나옴)\r\n\r\n\r\n\r\n□ NULL이 아닌 값만 조회\r\n\r\nselect * from TABLE where COLUMN is not null ', '', '', 9, 0),
(407, '', '서대영', '', '2008-11-14 13:33:52', 'SQL', '뒤에서 몇자리만 잘라내기', 'select bomfile, substr(bomfile, 0, length(bomfile)-5)\r\nwhere bom_modelcode\r\n\r\n* substr(자를문자열, 자르기시작할index, 자르기끝날index)', '', '', 3, 0),
(489, '', '서대영', '', '2009-01-15 08:11:42', 'Oracle', '8. DML (Data Manipulation Language)', '■ INSERT\r\n1) Insert a single row : VALUES 절 이용\r\n INSERT INTO 테이블 [(칼럼1, 칼럼2)] \r\n VALUES (값1, 값2)\r\n2) Insert multi rows : 서브 쿼리 이용\r\n INSERT INTO 테이블 [(칼럼1, 칼럼2)] \r\n SELECT 칼럼 FROM 테이블 WHERE 조건\r\n\r\n■ MODIFY\r\n UPDATE 테이블 set 칼럼1=값1, 칼럼2=값2 [WHERE 조건식]\r\n ※  WHERE 절이 없으면 모든 로우의 칼럼값을 통일\r\n\r\n■ DELETE\r\n DELETE [FROM] 테이블 [WHERE 조건식] \r\n ※  WHERE 절이 없으면 모든 로우 삭제\r\n\r\nCF) 테이블 초기화 \r\n TRUNCATE TABLE 테이블 (DDL)\r\n : 속도가 빠르고 용량도 줄여주지만, rollback이 불가능\r\n\r\n■ Transaction\r\n- DML은 메모리 상에서만 수행되고 commit/rollback 후, 실제 DB에 반영된다. \r\n- consists a collection of statments that form a logical unit of work.\r\n- The previous state of the data can be recovered.\r\n- The current user can review the results of the DML operatiion by using SELECT statement.\r\n- Other uesrs cannot view the results of the DML statements by the current user.\r\n- The affected rows are locked; Other users cannot change the datg in te affected rows.\r\n\r\n■ COMMIT / ROLLBACk\r\n- COMMIT\r\n- SAVEPOINT a\r\n- ROLLBACK [TO a]\r\n- 트렌젝션이 끝나고 새로운 트렌젝션이 시작될 때\r\n* commit / rollback\r\n* automatic commit (DDL, DCL) : 앞에 있던 DML들도 같이 커밋되므로 주의\r\n* 정상 종료 - commit / 비정상 종료 - rollback\r\n- If a single DML statement fails during execution, only that statement is rolled back. So the user shoud terminate transaction explictitly by executing a COMMIT or ROLLBACK statement.', '', '', 12, 0),
(408, '', '서대영', '', '2008-11-15 22:54:03', 'Servlet', '배포 서술자 Deployment Discriptor (WEB-INF/web.xml) ★', '[ 문법 ]\r\n(((description*, display-name*, icon*)) | distributable | context-param | filter | filter-mapping | \r\n listener | servlet | servlet-mapping | session-config | mime-mapping | welcome-file-list | error-page | jsp-\r\n config | security-constraint | login-config | security-role | ((env-entry*, ejb-ref*, ejb-local-ref*, ((service-ref*)), \r\n resource-ref*, resource-env-ref*, message-destination-ref*)) | message-destination | locale-encoding-mapping-\r\n list)*\r\n\r\n□ 톱켓 관리자에 표시되는 이름\r\n\r\n	<display-name>shop</display-name>\r\n\r\n□ 디폴트 호출 파일	\r\n\r\n	<welcome-file-list>\r\n		<welcome-file>index.jsp</welcome-file> \r\n		<welcome-file>index.html</welcome-file>\r\n		<welcome-file>index.htm</welcome-file>\r\n	</welcome-file-list>\r\n\r\n□ 오류 페이지 설정\r\n\r\n<error-page>\r\n  <exception-type>java.lang.Throwable</exception-type>\r\n  또는\r\n  <error-code>404</error-code>\r\n  <location>/error.jsp</location>\r\n</error-page>\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.daum.net/turnnig-pointer/16498174', 'http://blog.daum.net/turnnig-pointer/16498174', '', 18, 0),
(410, '', '서대영', '', '2008-11-16 00:23:41', 'Servlet', 'HttpServletRequest', '// Example: http://myhost:8080/people?lastname=Fox&age=30\r\n\r\nString uri = request.getScheme() + "://" +   // "http" + "://\r\n             request.getServerName() +       // "myhost"\r\n             ":" + request.getServerPort() + // ":" + "8080"\r\n             request.getRequestURI() +       // "/people"\r\n            (request.getQueryString() != null ? "?" +\r\n             request.getQueryString() : ""); // "?" + "lastname=Fox&age=30"\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://stackoverflow.com/questions/17241532/get-root-domain-from-request', 'http://stackoverflow.com/questions/17241532/get-root-domain-from-request', '', 18, 0),
(411, '', '서대영', '', '2008-11-16 02:39:44', 'Cafe24', '단독 톰캣 재시작 방법', 'cafe24 JSP 비지니스 이상의 단독 톰캣일 경우 톰캣 컨테이너를 STOP, START시키는 방법입니다.\r\n\r\n※ 공용 톰캣 사용자 분들은 해당되지 않습니다)\r\n\r\n고객님의 서버에 SSH2로 접속 후 아이디와 비밀번호를 입력합니다. \r\n\r\n\r\ntomcat/bin/catalina.sh stop \r\n\r\ntomcat/bin/catalina.sh start \r\n\r\n\r\n위 명령어를 입력하시면 STOP, START 하실 수 있습니다. \r\n\r\n정상적인 톰캣의 구동 확인은 \r\n\r\ntail -f tomcat/logs/catalina.out \r\n\r\n파일 제일 마지막 부분에 \r\n\r\nINFO: Server startup in 874 ms \r\n\r\n위와 같은 구문으로 확인하실수 있습니다. \r\n\r\n※ 874ms 숫자는 변경될수 있습니다.\r\n\r\n[참고]SSH 접속 프로그램은 아래의 경로를 통해 PUTTY를 다운받아 사용할 수 있습니다. \r\n\r\nhttp://www.putty.nl/download.html', '', '', 12, 0),
(412, '', '서대영', '', '2008-11-16 02:57:42', 'JSP', '이클립스 이미지 파일 경로 주의', '서블릿을 사용하는 가상 경로를 사용하므로\r\n아래처럼 .. 대신 <%=request.getContextPath() %>\r\n로 해줘야 이클립스와 실제 서버에서 모두 잘 수행됨.\r\n\r\n<img src="../img/LogoWithMotto.gif">\r\n<img src="<%=request.getContextPath() %>/img/LogoWithMotto.gif">', '', '', 1, 0),
(413, '', '서대영', '', '2008-11-16 10:39:24', 'HTML', '전체화면 꽉차는 테이블', '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">\r\n<html>\r\n<head>\r\n<meta http-equiv="Content-Type" content="text/html; charset=EUC-KR">\r\n<title>Error Page</title>\r\n</head>\r\n<body>\r\n<table width="100%" height="100%" border="0" cellpadding="0" cellspacing="0">\r\n<tr>\r\n	<td align="center">\r\n		<h1>Error</h1>\r\n	</td>\r\n</tr>\r\n</table>\r\n</body>\r\n</html>\r\n\r\n\r\n※ 주의 : <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">\r\n로 하면 안 됨', '', '', 4, 0),
(414, '', '서대영', '', '2008-11-16 11:33:12', 'Servlet', '파라미터 정보 Logging', '		Enumeration enu = req.getParameterNames();\r\n		System.out.println("\\n############ Parameters Information ############");\r\n		System.out.printf("%-20s : %-20s \\n", "Param Name", "Param Value");\r\n		System.out.println("------------------------------------------------");\r\n		while (enu.hasMoreElements()) {\r\n			String paramName = (String)enu.nextElement();\r\n			System.out.printf("%-20s : %-20s \\n", paramName, req.getParameter(paramName));\r\n		}\r\n		System.out.println("################################################\\n");', '', '', 21, 0),
(491, '', '서대영', '', '2009-01-15 08:44:42', 'Oracle', 'Data Types', '기본적으로 크게 문자, 숫자, 날짜\r\n\r\nVARCHAR2(size) : Max가 정해진 가변 문자열\r\nCHAR(size) :  Max가 정해진 고정 문자열\r\nNUMBER(p, s) : p - 자리수, s - 절삭위치(<0) or 소수점수(>0)\r\nDATE\r\nLONG : 2G 문자열 (제한 많음)\r\nCLOB : 4G 문자열 (개발 힘듬)\r\nBLOB : 4G 이미지, 사운드, 비디오\r\nBFILE : 4G 외부파일\r\n\r\n※ 기타\r\nTIMESTAMP : Date with fractional seconds\r\nTIMESTAMP WITH TIME ZONE\r\nTIMESTAMP WITH LOCAL TME ZONE\r\n', '', '', 2, 0),
(415, '', '서대영', '', '2008-11-16 12:24:47', 'MySQL', '대소문자 구분해서 조회', 'MySQL에서는 기본적으로 대소문자 구분하지 않는다.\r\n구분하기 위해서는 칼럼명 앞에 binary 키워드를 붙인다.\r\n\r\nwhere binary COLUMN_NAME = ''abc''', '', '', 2, 0),
(416, '', '서대영', '', '2008-11-17 10:24:23', 'SQL', '숫자와 문자의 구분해주는 쿼리', 'select NVL2(TRIM(TRANSLATE(code_name,''1234567890'','' '')),0,1), code_name\r\n\r\n: 문자면 0, 숫자면 1을 리턴\r\n\r\n\r\nselect code_name\r\nfrom kmuser.tkmlinkcode\r\nwhere NVL2(TRIM(TRANSLATE(code_name,''1234567890'','' '')),0,1) = ''1''\r\n\r\n: 숫자만 조회\r\n', '', '', 9, 0),
(417, '', '서대영', '', '2008-11-19 15:07:12', 'Oracle', '내보내기 가져오기 (덤프 백업 만들기)', '□ 내보내기\r\n\r\nexp DB명/암호 file=덤프파일명.dmp tables=테이블명 statistics=none\r\n\r\n□ 가져오기\r\n\r\nimp DB명/암호 file=덤프파일명.dmp tables=테이블명 ignore=y fromuser=DB명 touser=DB명\r\n\r\n\r\nex)\r\n\r\nexp nkmuser/dbwj38   file=tb_ift_bomhead_081119_Dayo.dmp tables = tb_ift_bomhead statistics=none\r\n\r\nexp akmuser/akmuser file=expview_081223_Dayo.dmp tables=tb_ift_bomhead, cttmodel, bizctt, cttfile, skp_modelcode statistics=none\r\n\r\n\r\n\r\nimp morgdbadm/morgdbadm   file=orgdbadm.dmp   ignore=y fromuser=orgdbadm    touser=morgdbadm\r\n\r\n\r\n□ 결과 메세지\r\n\r\nIMP-00015: following statement failed because the object already exists:\r\n테이블이 이미 존재할 때, 기존 테이블을 드랍 후 시도한다.\r\n\r\nimporting table               "TB_IFT_BOMHEAD"    1232177 rows imported\r\n잘되고 있음 ㅋㅋㅋ', '', '', 6, 0),
(418, '', '서대영', '', '2008-11-20 00:44:05', 'MySQL', '왜래키 체크 설정', 'mysql> set foreign_key_checks=0 ;  --외래키 체크를 하지 않음\r\nmysql> set foreign_key_checks=1;  --외래키 체크를 함\r\n\r\n덤프로 테이블을 생성할 때 외래키 체크를 풀고하면 에러가 안난다.', '', '', 1, 0),
(419, '', '서대영', '', '2008-11-20 14:02:54', 'Oracle', 'DECODE', '# 구문\r\ndecode({column|expression}, search1, result1, [,search2, result2] ... [,deafult])\r\n\r\n# 설명\r\n- 컬럼값이 sercah1과 같으면 result1을 출력\r\n- switch-case\r\n\r\n# 예\r\n\r\nslect ename, job, decode(\r\n    job, ''analyst'', ''분석가, ''clerk'', ''점원'', ''manager'', ''관리자'', ''백수''\r\n) as job_desc\r\nfrom emp;', '', '', 8, 0),
(420, '', '서대영', '', '2008-11-21 21:01:19', 'Java', 'jar 명령어 사용법', 'jar 명령사용법 정리 | 자바관련문서 \r\n 2004.06.02 21:59 \r\n곰탱(wizsoft)   \r\nhttp://cafe.naver.com/wizsoft/35   \r\n \r\njar(Java Archive)에 대해서 \r\n\r\n1. jar파일이란 : jar파일은 archive파일이다. 즉 여러개의 파일을 하나의 파일로 묶는\r\njar명령을 사용하여 생성된다. 이 파일은 winzip에서 열어 볼 수 있으며, winzip에서 \r\n열어보면 여러개의 파일들이 디렉토리 정보를 가진채 들어 있다. (아무 jar파일을 직접\r\n클릭해 열어 보시라)\r\n\r\n2. zip 파일과 다른 점 : winzip과 다른점은 압축되어 있을수도 있고, 그냥...하나로 \r\n묶어놓은 파일일수 도 있다. 그래서 jar 파일을 archive파일이라 볼수 있다. 이렇게\r\narchive파일로 묶는 이유는 자바로 개발한 여러클래스 파일들 또는 패키지 파일이\r\n있을때, 이를 하나로 묶어두면, 그 클래스들을 참조하기도 편하고, 다운 받기도 쉽다.\r\n(애플릿의 경우 더욱 그러함)\r\n\r\n3. jar명령 사용하기 \r\n\r\n(1) 명령구문 : jar {ctxu}[vfm0M] [jar-file] [manifest-file] [-C dir] files ...\r\n(2) {ctxu} 중의 하나는 맨 앞에 나와야할 필수 옵션이다.\r\n: c (새로운 archive파일을 생성한다)\r\n: t list table of contents for archive \r\n: x (다음에 지정한 파일들을 archive파일로 부터 압축을 푼다)\r\n: u (기존 archive파일에 들어있는 파일을 수정한다.)\r\n(3) [vfm0M]은 {ctxu} 중의 하나다음에 오는 옵션이다.\r\n: v (명령화면창으로 진행사항에 관한 메시지를 출력한다.):웬만하면 써주면좋음..\r\n: f (archive될 파일이름을 지정한다.) : 그래도 생성될 파일의 이름은 써줘야겠죠?\r\n: m (정보를 manifest파일로 부터 포함한다.)\r\n: 0 (저장만 하고, zip으로 압축하진 않는다.) \r\n- 클래스파일을 압축하면 곤란하죠...class파일의 경우는 꼭..써줘야죠..\r\n: M (추가되는 엔트리에 대한 manifest 파일을 생성하지 않는다.)\r\n(4) -C (지정된 디렉토리로 바꾸고, 다음 파일을 포함한다.)\r\n: 어떤 파일이 디렉토리이면 순환되면서 처리된다. \r\n(5) manifest file이름과 archive파일 이름은 순서대로 지정되어야 한다.\r\n(6) manifest file : 뭐...대단한 파일인줄 알았는데, 열어보면 내용이 다음과 같습니다.\r\n: m옵션을 주어 지정하는데 뭐....중요한건 아닌거 같으니까...이런게 있다는것만 \r\n아셔도 될듯..\r\n<내용>\r\nManifest-Version: 1.0\r\nCreated-By: 1.2.2 (Sun Microsystems Inc.)\r\n\r\n\r\n4. 사용예\r\n\r\n예) jar cvf new.jar 1.class 2.class\r\n: c옵션이 사용되었으므로 일단은 1.class, 2.class를 묶으려고 시도할 것이다.\r\n(생성시는 반드시 f옵션을 줘야함, 안주면 어케 될까?...함해봐요...컴에서 삑삑\r\n소리가 나올것임..-.-; 왜그런지는 아시겠죠?)\r\n: v옵션이 사용되었으므로 진행상황 메시지가...줄줄 나올것이다. (이건 안해도 됨)\r\n: f옵션은 c옵션사용시 생성될 파일명을 지정(반드시 해주어야 지정된 이름으로 파일이\r\n생성된다.)\r\n\r\n예) jar cvf new.jar -C test/ .\r\n: -C옵션을 주면 현 디렉토리 아래의 test디렉토리에 있는 모든 파일을 new.jar로\r\n묶어준다.\r\n\r\n예) jar cvf new.jar -C /test .\r\n: 위의 것이랑 비슷하지만... test디렉토리 뿐 아니라 현디렉토리에 있는 파일도 \r\nnew.jar로 묶어준다.\r\n\r\n예) jar xf test.zip\r\n: x옵션은 아카이브를 푼다는 의미, f는 아시죠...?\r\n\r\n예) jar ufv0 new.jar test\r\n: u옵션은 test디렉토리 밑의 파일들을 new.jar에 추가한다는 의미...(test디렉토리에\r\n파일이 있어야겠죠..?)\r\n: 0옵션은 압축하지 말고 추가하라는 의미(클래스 파일의 경우는 이 옵션을 써줘야함)\r\n: f와 v는 아시겠죠...?\r\n \r\n곰탱(wizsoft)   \r\n \r\n', '', '', 20, 0),
(421, '', '서대영', '', '2008-11-23 11:41:27', 'Java', '클래스 이름 얻기', 'getClass().getSimpleName()', '', '', 0, 0),
(422, '', '서대영', '', '2008-11-23 11:44:14', 'JavaScript', '자식창을 닫으면서 부모창 url 바꾸기', '<button\r\n			onClick="opener.location.href=''LogIn.dupont?MemberNo=<%=mvo.getMemberNo()%>''; window.close();">Select</button>', '', '', 3, 0),
(423, '', '서대영', '', '2008-11-23 20:51:52', 'JSP', '엑셀 파일 보여주기 or 다운로드', '파일 상단에 추가...\r\n3번째거는 무조건 다운로드 시킬 때만...\r\n\r\n    response.setHeader("Content-Disposition", "attachment; filename=RawData.xls"); \r\n    response.setHeader("Content-Description", "JSP Generated Data"); \r\n    response.setContentType("application/vnd.ms-excel");  \r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/sonaqbi?Redirect=Log&logNo=120014853979', 'http://blog.naver.com/sonaqbi?Redirect=Log&logNo=120014853979', '', 3, 0),
(424, '', '서대영', '', '2008-11-24 16:43:28', 'Unix', 'ftp 명령어', 'delete 파일명\r\n\r\nrmdir 폴더명\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/minhan_nemo?Redirect=Log&logNo=40014579663', 'http://blog.naver.com/minhan_nemo?Redirect=Log&logNo=40014579663', '', 7, 0),
(425, '', '서대영', '', '2008-11-24 16:46:44', 'Unix', 'comple.sh', 'javac -d /acube/chinaskp/cms_collector/classes -classpath /acube/chinaskp/cms_collector/lib/log4j-1.2.8.jar:/acube/\r\nchinaskp/cms_collector/lib/classes12.zip /acube/chinaskp/cms_collector/src/*.java', '', '', 5, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(426, '', '서대영', '', '2008-11-28 21:47:20', 'Eclipse', 'Eclipse Shortcuts 단축키 ★', '[ 자주 쓰는 단축키 ]\r\nCtrl + F11 : 실행\r\nCtrl + d : 한줄 지우기\r\nCtrl + i : 한줄 자동 들여쓰기\r\nCtrl + q : Jump to last location edited\r\nStrl + m : 전체화면\r\nCtrl + Shift + T : Open / Search for Types\r\nCtrl + Shift + R : Open / Search for resources, e.g. files\r\nCtrl + Shift + m : 클래스 하나 자동 임포트\r\nCtrl + Shift + g : 특정 클래스나 메소드를 참조하는 모든 곳을 찾기\r\nCtrl + F4 : 닫기\r\nCtrl + Shift+ F4 : 전체닫기\r\nAlt + Shift + a : 열편집\r\nAlt + Shift + r : Rename\r\nAlt + Shift + r : Move\r\nCtrl + E : Allows to select an editor from the currently open editors\r\nCtrl + F8 : Shortcut for switching perspectives\r\nAlt + ↑or Alt + ↓ : 선택한 블록 한 줄 위/아래 이동 ★\r\nAlt + ← or Alt + → : Go to previous/ next editor position in history\r\nCtrl-PageUp/PageDown : Switch to previous/next editor ★\r\nF3 : Go to the declaration of this variable\r\nCtrl + Shift + P : Go to the matching bracket ★\r\nCtrl+Shft+B	: Toggle Breakpoint\r\n\r\nLower case: CTRL+SHIFT+Y (CMD+SHIFT+Y on Mac OS X)\r\nUpper case: CTRL+SHIFT+X (CMD+SHIFT+X on Mac OS X)\r\n\r\n★ 자동 완성 : Ctrl + Space\r\n자동으로 만들어진 괄호 전에 Enter을 누르면 괄호를 빠져나감\r\n※ implements / overide : Alt + Shift + S + V \r\n\r\n10. Editor 최대/축소                            => Ctrl + M\r\n\r\n\r\n1.  필드, 클래스 등 정의부로 가기           => F3 혹은 Ctrl + 클릭\r\n     원래 화면으로 돌아오기                    => Alt + 왼쪽 화살표 키\r\n     다시 F3으로 보았던 화면으로 가기      => Alt + 우측 화살표 키\r\n2.  메소드나 필드 간 이동                       => Ctrl + O\r\n     에디터 간 전환                                 => Ctrl + F6  or Ctrl + E\r\n     뷰 간 전환                                       => Ctrl + F7\r\n     퍼스펙티브 간 전환                          => Ctrl + F8\r\n3.  현재 에디터 화면 닫기                      => Ctrl + W\r\n     전체 열린 파일 닫기                        => Ctrl + Shift + F4\r\n4. Hot Fix                                           => Ctrl + 1\r\n5. import 정리                                     => Ctrl + Shift + O\r\n   자동 import                                      => Ctrl + Shift + M\r\n6. indentation 정리                              => Ctrl + i\r\n   Debug 모드 실행                             => Alt + Shift + D, J\r\n8. 파일이나 메소드의 주석 입력 단축키   => Alt + Shift + J\r\n    - 한줄 주석 처리                            => Ctrl + /\r\n    - 블록 주석                                   => Ctrl + Shift + /   (잘 안됨.. 왜 일까요??)\r\n    - 블록 주석 해제                            => Ctrl + Shift + \r\n9. 다음 찾기                                      => Ctrl + K\r\n   이전 찾기                                      => Ctrl + Shift + K\r\n11. 입력 파라미터 정보 보기                => Ctrl + Shift + Space\r\n\r\n13. Window Builder 사용시 Source와 Design사이 전환  => F12\r\n14. 소스를 기본 포맷으로 맞추기          => Ctrl + Shift + F \r\n15 ctrl + alt + h : 메서드 호출구조 보기\r\n\r\nhttp://www.shortcutworld.com/en/win/Eclipse.html#link_3\r\nhttp://www.keyxl.com/aaac600/286/Eclipse-3-keyboard-shortcuts.htm\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.vogella.com/articles/EclipseShortcuts/article.html', 'http://www.vogella.com/articles/EclipseShortcuts/article.html', '', 77, 0),
(427, '', '서대영', '', '2008-12-01 12:01:01', 'Linux', 'crontab - 예약작업', 'crontab -l : 현재 예약되어 있는 작업 목록\r\ncrontab -e : 예약 되어있는 작업 목록 편집\r\n \r\n★ 해당 유저 계정으로 루트 폴더에서 수행한다.\r\n\r\n< 형식 >\r\n\r\n[분]  [시]  [일]  [월]  [요일]  명령어\r\n\r\n분 = 0~59\r\n시 = 0~23\r\n일 = 1~31\r\n월 = 1~12\r\n요일 = 0~6  (0=일 / 1=월 / 2=화 / 3=수 / 4=목 / 5=금 / 6=토)\r\n\r\n''*'' 은 해당 필드의 모든 시간을 의미. \r\n1,3,5 와 같이 콤마(,)로 구분하여 여러 시간대를 지정하는 것이 가능. \r\n1-10 과 같이 하이픈(-)으로 시간 범위 지정 가능. \r\n2-10/3 과 같이 하이픈(-)으로 시간 범위를 지정한 후 슬래쉬(/)로 시간 간격 지정가능. 앞의 예는 2시부터 10시까지 3시간 간격=3,6,9 시를 의미함\r\n\r\nex)\r\n45 3 * * *  : 매일 3시 45분에 수행\r\n5 9 * * 6      : 매주 금요일 9시 5분에 수행\r\n15 1,18 16 * * : 매달 16일 1시15분과 오후 6시 15분에 수행\r\n\r\n\r\n< 로그위치 >\r\n/var/adm/cron\r\n\r\n[ 크론탭 끄기 ]\r\n /usr/sbin/cron kill -9 pid\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.thegeekstuff.com/2009/06/15-practical-crontab-examples/', 'http://www.thegeekstuff.com/2009/06/15-practical-crontab-examples/', '', 32, 0),
(428, '', '서대영', '', '2008-12-02 09:27:53', 'SQL', '중복 데이터 찾기', 'select 칼럼 from 테이블\r\ngroup by 칼럼 having count(칼럼) > 1 ', '', '', 3, 0),
(429, '', '서대영', '', '2008-12-02 16:55:23', 'Unix', '운영체제 확인', 'uname -a', '', '', 5, 0),
(430, '', '서대영', '', '2008-12-03 09:14:55', 'IT', 'SSL (Secure Socket Layer)', '※ 참고로 SSL(Secure Socket Layer) 이란?\r\n\r\n  => 인터넷상에서 전송되는 자료를 암호화하기 위해서는 http 일반 프로토콜이 아닌 https 일반 프로토콜을 사용해야 합니다.\r\n\r\n       이를 위해서는 1) SSL 인증서를 전자인증업체로 부터 구매하여,\r\n\r\n                           2) 웹서버를 보안 서버로 만들기 위해 SSL 인증서를 설치하고,\r\n\r\n                           3) 어플리케이션에서도 https 를 사용하도록 프로그래밍을 하여야 합니다.\r\n\r\n       개인 정보 보호를 위한 가장 기본적인 수단이며, 정보전략 8대 중요 취약점 중 6번째 "중요정보 평문전송"의 방어법입니다.\r\n\r\n       암호화에 따른 시스템 퍼포먼스 저하가 있어서, G-SPN 에서는 로그인 등에만 선별적으로 적용하며,\r\n\r\n       은행이나 공공기관의 경우 모든 페이지에서 전 구간 SSL 적용을 하는 걸로 알고 있습니다.\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://kin.naver.com/detail/detail.php?d1id=1&dir_id=106&eid=NAYzz+uROMyD6bgLxC2zuffTuZWAWy81&qb=c3Ns&pid=fgUMlsoi5T8sste4MqZsss--137207&sid=STXOgB6@NUkAABRIGgU', 'http://kin.naver.com/detail/detail.php?d1id=1&dir_id=106&eid=NAYzz+uROMyD6bgLxC2zuffTuZWAWy81&qb=c3Ns&pid=fgUMlsoi5T8sste4MqZsss--137207&sid=STXOgB6@NUkAABRIGgU', '', 9, 0),
(431, '', '서대영', '', '2008-12-07 23:03:23', 'HTML', '풍선말', 'HTML 에서 텍스트에 풍선말 거는 방법\r\n<span title="풍선말"> 링크 </span>\r\n\r\n이미지에 풍선말 거는 방법\r\n\r\n<img alt="풍선말" /> \r\n\r\n \r\n\r\n테이블에서 처리방법\r\n\r\n<td title="풍선말">\r\n\r\n\r\n', '', '', 1, 0),
(432, '', '서대영', '', '2008-12-12 20:34:39', 'Excel', '선택 영역만 인쇄하기', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://jwdukejw.tistory.com/193', 'http://jwdukejw.tistory.com/193', '', 0, 0),
(433, '', '서대영', '', '2008-12-12 21:18:47', 'Oracle', '버젼 확인 / 케릭터셋 확인', 'select * from V$VERSION\r\n\r\nSELECT * FROM product_component_version\r\n\r\nselect * from V$NLS_PARAMETERS', '', '', 16, 0),
(434, '', '서대영', '', '2008-12-14 10:25:58', 'Ajax', 'Ajax 무작정 따라하기', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://cafe.naver.com/ajaxdev.cafe?iframe_url=/ArticleRead.nhn%3Farticleid=164', 'http://cafe.naver.com/ajaxdev.cafe?iframe_url=/ArticleRead.nhn%3Farticleid=164', '', 4, 0),
(435, '', '서대영', '', '2008-12-14 11:56:27', 'JavaScript', '자신의 부모 엘러먼트 및 자식 컬렉션', 'this.parentElement\r\n\r\nthis.childNodes', '', '', 8, 0),
(436, '', '서대영', '', '2008-12-14 12:59:05', 'HTML', 'tbody', '여러 tr, rd의 속성을 일괄적으로 줄 때\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.empas.com/kyt4150pds/17096488', 'http://blog.empas.com/kyt4150pds/17096488', '', 0, 0),
(437, '', '서대영', '', '2008-12-14 13:08:09', 'JavaScript', 'DOM 메소드', '※ node : 대상 node\r\n※ parent : document 이외의 element로 이루어진 부모 node 있음\r\n※ document : 부모 node는 무조건 document (문서의 최상단)\r\n\r\n1. 노드 만들기\r\n (1) reference = document.createElement(element)\r\n (2) reference = document.createTextNode(text)\r\n\r\n2. 노드 복사\r\n (1) reference = node.cloneNode(true/false)\r\n   - true : 자식노드 전체를 복사\r\n   - false : 자기자신만 복사\r\n\r\n3. 노드 추가\r\n (1) reference = parent.appendChild(newChild)\r\n   - newChild를 parent 의 자식노드로 추가\r\n (2) reference = parent.insertBefore(newNode,targetNode)\r\n   - newNode를 targetNode의 바로 이전(previous)에 targetNode와 형제관계로써 노드 추가\r\n\r\n4. 노드 삭제\r\n (1) reference = parent.removeChild(node)\r\n\r\n5. 노드 바꾸기\r\n (1) reference = parent.replaceChild(newChild,oldChild)\r\n\r\n6. 노드 값 변경\r\n (1) node.setAttribute(attributeName,attributeValue)\r\n\r\n7. 노드 찾기\r\n (1) attributeValue = node.getAttribute(attributeName)\r\n (2) element = document.getElementById(ID)\r\n   - 유일무이 하므로, 1개의 노드를 반환\r\n (3) elements = parent.getElementsByTagName(tagname)\r\n   - 다수의 존재를 염두해야 하므로 배열로 반환\r\n (4) booleanValue = node.hasChildNodes \r\n   - 각 요소의 자식 노드가 있는지의 여부. 참/거짓으로 반환.\r\n (5) elements = document.getElementByClassName(classname)\r\n   - 클래스 이름으로 찾기\r\n\r\n8. 노드 프로퍼티\r\n (1) name = node.nodeName \r\n   - 특정 노드의 이름을 포함한 문자열을 반환\r\n     (특정 노드가 요소 노드이면 그 요소의 이름을 반환)\r\n (2) integer = node.nodeType \r\n   - 1 : 엘리먼트\r\n   - 2 : 속성\r\n   - 3 : 텍스트\r\n (3) value = node.nodeValue \r\n   - 특정 노드의 값을 반환\r\n     (노드 종류가 속성이면 속성값, 텍스트이면 텍스트 내용, 요소이면 빈 값)\r\n\r\n9. 노드 내부 구조 보기\r\n (1) nodeList = node.childNodes\r\n (2) reference = node.firstChild\r\n (3) reference = node.lastChild\r\n (4) reference = node.nextSibling\r\n (5) reference = node.parentNode\r\n (6) reference = node.previousSibling \r\n[출처] 유용한 DOM 메소드와 프로퍼티|작성자 문피쉬\r\n', '', '', 7, 0),
(440, '', '서대영', '', '2008-12-15 11:04:11', 'CSS', '줄바꿈 방지', 'white-space: nowrap\r\n\r\n\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/jinhyeogi?Redirect=Log&logNo=10035335624', 'http://blog.naver.com/jinhyeogi?Redirect=Log&logNo=10035335624', '', 12, 0),
(441, '', '서대영', '', '2008-12-15 15:22:15', 'Java', '[Collection] List, Set, Map 차이', 'List : 데이터 중복 허용, 데이터의 순서 관리\r\nSet : 데이터 중복 불허, 데이터 순서 무관\r\nMap : 키 중복 불허, 데이터 중복 허용\r\n\r\n\r\n\r\n Set \r\n \r\n  size() Set의 요소 개수를 리턴합니다. \r\nisEmpty() Set이 비어 있는지 여부를 리턴합니다. \r\ncontains() Set에 특정 원소가 포함되어 있는지 여부를 리턴합니다. \r\nadd() Set에 특정 원소를 추가합니다. \r\nremove() Set에서 특정 원소를 제거합니다. \r\n \r\n \r\n List \r\n \r\n  get() 지정한 위치에 있는 데이터를 리턴합니다. \r\nset() 지정한 위치에 있는 데이터를 변경합니다. \r\nadd() 지정한 위치에 데이터를 추가합니다. \r\nremove() 지정한 위치에서 데이터를 제거합니다. \r\nindexOf() 지정한 데이터가 있는 처음 위치를 리턴합니다. \r\nlastIndexOf() 지정한 데이터가 있는 마지막 위치를 리턴합니다. \r\nsubList() 지정된 범위에 해당하는 부분 List를 리턴합니다. \r\n \r\n \r\n Map \r\n \r\n  put() 키(Key)와 값으로 구성된 새로운 데이터를 추가합니다. \r\nget() 지정한 키(Key)에 해당하는 데이터를 리턴합니다. \r\nremove() 지정한 키(Key)에 해당하는 데이터를 삭제합니다. \r\ncontainsKey() 지정한 키(Key)가 존재하는지 여부를 리턴합니다. \r\ncontainsValue() 지정한 값이 존재하는지 여부를 리턴합니다. \r\nsize() Map의 요소 개수를 리턴합니다. \r\nisEmpty() Map이 비어 있는지 여부를 리턴합니다. \r\n \r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/atonikkaz?Redirect=Log&logNo=10017976539', 'http://blog.naver.com/atonikkaz?Redirect=Log&logNo=10017976539', '', 2, 0),
(442, '', '서대영', '', '2008-12-16 10:40:47', 'JavaScript', '개체가 소소된 최상위 윈도우', 'window.top\r\n개체가 소소된 최상위 윈도우', '', '', 2, 0),
(443, '', '서대영', '', '2008-12-16 10:43:22', 'JavaScript', 'Javascript 내장함수', '[ eval() ]\r\n\r\n1. 오류 검사\r\n\r\n2. 수치화\r\n\r\n3. 핸들러\r\n\r\n\r\n\r\nescape() IE NS escape(jsString) 문자열을 ASCII 글자로 접속할 수 있도록 엔코딩한다 o \r\neval() IE NS eval(jsString) Javascript 코드가 맞는가 틀린가를 검정하고 수행한다. o \r\nGetObject() IE - GetObject(pathName,class) JScript 기능함수 파일에서 자동화 개체에 대한 참조를 반환한다. x \r\nisFinite() IE NS isFinite(testValue) 수치(Number)를 점검하여, 유효한 수치인가를 판명한다. o \r\nisNaN() IE NS isNaN(testValue) 수치(Number)를 점검하여, 무효한 수치인가를 판명한다. o \r\nNumber() IE NS Number(jsString) Javascript 문자열 jsString을 개체(object) 값으로 환산한다. o \r\nparseFloat() IE NS parseFloat(jsString) 문자열을 점검하여 유효한 수치만을 를 반환한다. o \r\nparseInt() IE NS parseInt(jsString,radix) 문자열을 점검하여 유효수치 중에서 정수만 반환한다. o \r\nScriptEngine() IE - ScriptEngine() JScript 스크립트 엔진의 스크립팅 언어 이름을 반환한다. x \r\nScriptEngineBuildVersion() JScript 스크립트 엔진의 작성 번호를 반환한다. x \r\nScriptEngineMajorVersion() JScript 스크립트 엔진의 주 버전 번호를 반환한다. x \r\nScriptEngineMinorVersion() JScript 스크립트 엔진의 보조 버전 번호를 반환한다. x \r\nString() IE NS String(jsString) 문자열 jsString을 개체(object) 문자열 값으로 환산한다. o \r\ntaint, untaint - NS taint, untaint 개인 정보보호를 위해 도입되었으나 별로 사용되지 않는다.    \r\nunescape() IE NS unescape(encodedstring) escape() 기능함수로 엔코딩 된 데이터를 디코딩한다. o \r\n', '', '', 4, 0),
(444, '', '서대영', '', '2008-12-16 11:44:05', 'CSS', '페이지 여백 없애기', 'body {\r\n  margin:0px;\r\n}\r\n', '', '', 1, 0),
(445, '', '서대영', '', '2008-12-16 21:25:51', 'Java', 'Collections.sort() - Comparable, compareTo()', 'import java.util.*;\r\n \r\nclass Person implements Comparable {\r\n    private String name;\r\n    private int age;\r\n \r\n    public Person(String name, int age) { this.name = name; this.age = age; }\r\n    public String getName(){ return name; }\r\n    public int getAge(){ return age; }\r\n    public int compareTo(Object o) { // 나이순으로 정렬\r\n        Person p = (Person)o;\r\n        return this.age > p.age ? 1 : 0;\r\n    }\r\n}\r\n \r\npublic class Test{\r\n    public static void main(String[] args){\r\n        List<Person> l = new ArrayList<Person>();\r\n        l.add(new Person("홍길동", 33));\r\n        l.add(new Person("임꺽정", 25));\r\n        l.add(new Person("장길산", 30));\r\n        Collections.sort(l);\r\n        for(Person p : l){\r\n            System.out.printf("이름: %s, 나이: %dn", p.getName(), p.getAge());\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.empas.com/phpaspjsp/25915705', 'http://blog.empas.com/phpaspjsp/25915705', '', 21, 0),
(446, '', '서대영', '', '2008-12-22 09:03:52', 'Tomcat', '프로젝트 JDK 버젼 체크', 'Build Path의 JDK 버젼\r\n\r\n[Project] - [Properties] - [Java Compiler]의 버젼\r\n\r\nTomcat 구동 버젼', '', '', 2, 0),
(447, '', '서대영', '', '2008-12-23 10:04:27', 'SQL', '테이블 전체 복사', 'create table 생성될테이블이름 \r\nas select * from 복사할테이블이름\r\n\r\n\r\n\r\ninsert into model_bal\r\nselect * from model\r\n', '', '', 10, 0),
(448, '', '서대영', '', '2008-12-23 10:57:40', 'JavaScript', '테이블 줄 하이라이트', '<tr bgcolor="#F6F6F6" onMouseOver="this.style.backgroundColor=''#CAD2DF'';" onMouseOut="this.style.backgroundColor=''#F6F6F6''">', '', '', 9, 0),
(438, '', '서대영', '', '2008-12-14 14:47:50', 'JavaScript', '[DOM] 테이블 제어', 'var body = document.getElementsByTagName("body");\r\nvar table = body[0].getElementsByTagName("table");\r\nvar tbody = table[0].getElementsByTagName("tbody");\r\nvar tr= tbody[0].getElementsByTagName("tr);', '', '', 6, 0),
(439, '', '서대영', '', '2008-12-14 14:51:22', 'JavaScript', '테이블 트리', '	function toggleChildren(tr) {\r\n		var depth = Number(tr.childNodes[0].innerText);\r\n		var nTr = tr.nextSibling;\r\n		while (nTr != null) {\r\n			var nDepth = Number(nTr.childNodes[0].innerText);\r\n			if (nDepth == depth + 1) {\r\n				if (nTr.style.display != ''none'') \r\n					nTr.style.display = ''none'';\r\n				else \r\n					nTr.style.display = ''block'';\r\n			} else if (nDepth > depth + 1) {\r\n				if (nTr.style.display != ''none'')\r\n					nTr.style.display = ''none'';\r\n			} else break;\r\n			nTr = nTr.nextSibling;\r\n		}\r\n	}\r\n\r\n\r\n\r\n============================== FILE ==============================\r\nBomTree.jsp', '', 'BomTree.jsp', 9, 0),
(449, '', '서대영', '', '2008-12-24 13:39:17', 'Unix', 'compile.sh', 'export CP=${CLASSPATH}:.:$HOME/ep/acube_classes/classes/:./lib/ojdbc14.zip:./classes/:./lib/sapjco.jar\r\n\r\njavac -deprecation -d ./classes/ -cp $CP ./src/*.java\r\n\r\n\r\n\r\n□ 심플\r\n\r\njava -classpath $CLASSPATH:./:/acube/asiaskp/km/km_was/km/classes/jars/classes12.zip:/acube/asiaskp/km/km_was/km/\r\nclasses/log4j-1.2.8.jar:/acube/asiaskp/km/km_was/km/classes com.skp.expview.dao.ProductViewDao\r\n\r\n□ 복잡\r\n\r\nEP_HOME=$HOME/ep/acube_classes\r\nEP_CLASSPATH=${EP_HOME}/lib/jstorapi.jar:${EP_HOME}/lib/axis_lib.jar:${EP_HOME}/lib/jdbc/classes12.zip:${EP_HOME}/classes:${EP_HOME}\r\n/interface:${EP_HOME}/lib/screenscrap/wisefree.jar:${EP_HOME}/lib/chartbuilder/chart.jar:${EP_HOME}/lib/xmllib/jdom.jar:${EP_HOME}/l\r\nib/xmllib/xerces.jar:$HOME/idir/web/WEB-INF/classes:$HOME/idir/web/WEB-INF/classes/jexcelapi/jxl.jar:${EP_HOME}/lib/search/verity.ja\r\nr:${EP_HOME}/lib/search/vsearch.jar\r\n\r\nKM_HOME=$HOME/km/km_was/km/classes\r\nKM_CLASSPATH=$HOME/km/km_was/km:${KM_HOME}:${KM_HOME}/jars/freemarker.jar:${KM_HOME}/jars/filetrans.jar:${KM_HOME}/jars/jsftp.jar:${\r\nKM_HOME}/jars/xml.jar:${KM_HOME}/jars/ldapfilt.jar:${KM_HOME}/jars/ldapjdk.jar:${KM_HOME}/jars/activation.jar:${KM_HOME}/jars/mail.j\r\nar\r\n\r\nDC_HOME=$HOME/km/km_was/km/cms/ejbs\r\nDC_CLASSPATH=${DC_HOME}/axis.jar:${DC_HOME}/xercesImpl.jar:${DC_HOME}/wsdl4j.jar:${DC_HOME}/jaxrpc.jar:${DC_HOME}/axis-ant.jar:${DC_\r\nHOME}/saaj.jar:${DC_HOME}/log4j-1.2.8.jar:${DC_HOME}/commons-discovery.jar:${DC_HOME}/commons-logging.jar\r\n\r\nDEST=$HOME/km/km_was/km/classes\r\n\r\njavac -d $DEST -classpath $CLASSPATH$:$HOME/km/km_was/km/classes:$EP_CLASSPATH$:$KM_CLASSPATH$:$DC_CLASSPATH$ $1', '', '', 28, 0),
(450, '', '서대영', '', '2008-12-24 14:47:03', 'JavaScript', '특정 프레임만 인쇄', '그 프레임에 포커스 주고 인쇄할 것\r\n\r\ntop.Descriptions.focus(); \r\ntop.Descriptions.print();', '', '', 0, 0),
(451, '', '서대영', '', '2008-12-24 16:23:56', 'JavaScript', '자식창 제어', 'popup = window.open(''history.exp'', '''', ''toolbar=no, status=no, resizable=yes'');\r\npopup.print();', '', '', 0, 0),
(452, '', '서대영', '', '2008-12-26 16:29:10', 'Oracle', '[Toad] 쿼리 결과 파일로 저장', '결과 데이터 아무 셀에서 마우스 우클릭 후 Save As\r\n엑셀 파일이나 tab delimited(txt 파일) 를 선택한다.', '', '', 3, 0),
(453, '', '서대영', '', '2008-12-29 08:40:45', 'DB', 'ER -> Table', '□ 분석 -> 설계\r\n\r\n - Entity -> Table\r\n - Attribute -> Column\r\n - Unique Identifier -> Primary Key\r\n - Relationship -> Foreign Key\r\n\r\n□ 변환 원칙\r\n\r\n - 1:N => 1쪽의 기본키를 N쪽의 외래키로 넣는다\r\n - 1:1 => 어느 쪽이든 한 쪽의 기본키를 다른 쪽의 외래키로 넣는다\r\n - N:M => 양쪽의 기본키 둘을 합친 복합 속성을 기본키로 하는 복합 테이블을 만든다.\r\n\r\n□ 주의사항\r\n\r\n - 다중값 속성 : 해당 엔티티의 기본키와 다중값 속성을 합친 복합속성을 기본키로 \r\n하는 별도의 테이블을 생성한다.\r\n - 복합값 속성 : 복합속성 하나만 유지하든지, 원자값 여러 개 속성으로만 유지하든지 둘 중 하나를 결정해야 한다.\r\n - 관계성 속성 : 1:1인 경우 아무쪽에, 1:N인 경우 N쪽에, N;M인 경우 복합테이블\r\n\r\n□ 일반화를 포함하는 ERD의 테이블 변환\r\n\r\n1. 모든 엔티티 테이블화 : 슈퍼엔티티, 서브엔티티 각각의 애트리뷰트가 많을 때\r\n2. 슈퍼엔티티만 테이블화 : 서브엔티티의 애트리뷰트가 하나 씩 밖에 없을 때\r\n3. 서브엔티티만 테이블화 : 슈퍼인티티의 애트리뷰트가 하니 밖에 없을 때', '', '', 12, 0),
(454, '', '서대영', '', '2008-12-29 13:50:53', 'IT', '주요 오픈 소스 SW', 'Linux 커널, Apche 웹서버, Tomcat 와스, FireFox 웹브라우져, MySQL 데이터베이스, Eclipse 툴\r\n\r\n□ OS\r\n - Linux\r\n\r\n□ JAVA \r\n - ANT : 빌드\r\n - Junit : 테스트\r\n - iBatis : SQL 맵퍼\r\n - Hibernate : 객체/관계형 맵핑\r\n - Spring : 프레임&#50916;\r\n - EJB 3.0\r\n\r\n□ JAVA 표준\r\n - Spring, Struts, Hibernate\r\n\r\n□ Web Server\r\n - Arpache\r\n\r\n□ WAS\r\n - Tomcat\r\n - jBoss\r\n\r\n□ IDE\r\n - Eclipse\r\n - Maven\r\n\r\n□ DBMS\r\n - MySQL\r\n - Ingres\r\n\r\n□ Web Browser\r\n - Nascape\r\n - Firefox\r\n\r\n□ Application\r\n - Alfresco\r\n - SugarCRM\r\n - OpenLDAP', '', '', 10, 0),
(460, '', '서대영', '', '2009-01-02 15:59:22', 'Unix', '프로세스 관리 명령어', '□ 프로세스 정보 및 상태 출력\r\n\r\n$ ps\r\n\r\n- a : 모든 프로세스\r\n- e : 실행 중인 모든 사용자 프로세서\r\n- f : 상세 정보\r\n- l : 모든 정보\r\n- x : Shows the command line in extended format.\r\n\r\n$ ps aux | grep jekyll\r\n$ ps -ef | grep xxxskp\r\n$ ps -ef | grep opt\r\n\r\n$ ps -ef |grep portalManaged |grep -v grep |wc -l \r\nportalManaged 프로세스의 카운트를 세줌. 1이면 정상\r\n\r\n\r\n* UID : 사용자 식별자   \r\n* PID : 프로세스 식별자\r\n* PPID : 부프로세스 식별자\r\n* C : 프로세스 소모량   \r\n* STIME : 프로세스 시작 시간, 분, 초\r\n* TTY : 단말 장치명\r\n* TIME : 실행 누적 시간\r\n* COMMAND : 실행시킨 명령어\r\n\r\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\r\n\r\n□ 프로세스 강제 종료\r\n\r\n$ kill [옵션] 프로세스식별자\r\n\r\n- 3 : 쓰레드 덤프 생성\r\n- 9 : 무조건 강제 종료 (정상적으로 종료가 안될 때)\r\n\r\n$ ps -3 3510\r\n$ ps -9 3510\r\n\r\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\r\n\r\n□ 로그아웃 후 백그라운드 명령 계속 실행\r\n\r\n$ nohup 명령어 [인수들] [> 실행 결과 저장 경로] &\r\n\r\n- 디폴트 저장 파일 : nohup.out\r\n\r\n- 예 1) 저장 경로 지정 X\r\n$ nohup cc test.1c &\r\n- 실행결과 : 프로세스 식별자와 저장 경로 출력\r\n7080\r\n$ sending output to nohup.out\r\n\r\n- 예 2) 저장 경로 지정 O : startWebLogic.sh을 백그라운드에서 실행시키고 그 결과를 bea7001.log에 저장\r\n$ nohup startWebLogic.sh > /acube/euroskp/logs/weblogic/bea7001.log &\r\n- 실행결과 : 프로세스 식별자만 출력\r\n7183\r\n\r\n\r\n\r\n\r\n\r\n\r\n', NULL, '', 25, 0),
(455, '', '서대영', '', '2008-12-29 21:42:46', 'DB', '정규화 (DB설계 최적화)', '□ 정규화\r\n - 테이블을 쪼개는 과정\r\n - 조인이 늘어나는 단점이 있어서 (4, 5NF는 추천 X)\r\n\r\n□ 함수적 종속성\r\n - X → Y\r\n - X칼럼이 Y칼럼을 결정\r\n - Y칼럼은 X칼럼에 종속\r\n\r\n□ 1NF\r\n - 원자값으로만\r\n - 부분 종속 존재\r\n\r\n□ 2NF\r\n - 이행 종속 존재\r\n\r\n□ 3NF\r\n - 이행 종속 제거\r\n\r\n□ BCNF\r\n - FDD의 모든 결정자는 각 테이블의 키\r\n', '', '', 15, 0),
(456, '', '서대영', '', '2008-12-29 21:50:08', 'DB', 'ERD 설계 (개념적 모델링)', '■ 순서\r\n1. 엔티티 선택 : 명사 (2개 이상의 레코드 보유)\r\n2. 관계성 부여 : 동사\r\n3. 골격 ERD 구성\r\n\r\n□ 개체 (Entitiy)\r\n - 명사\r\n - 사각형\r\n - 2개 이상의 레코드 보유\r\n\r\n\r\n\r\n□ 속성 (Attribute)\r\n - 키 : 빈원\r\n - 일반 : 찬원\r\n\r\n\r\n\r\n□ 관계 (Relationship)\r\n - 동사\r\n - 마름모', '', '', 8, 0),
(457, '', '서대영', '', '2008-12-29 22:00:48', 'DB', '[논리적 모델링] ERD → FDD', '□ 작성원칙\r\n① 1:N일 경우 N쪽의 KEY에서 1쪽의 KEY로 화살표 표시한다.\r\n② 1:N의 경우 관계성의 애트리뷰트는 N쪽의 KEY에서 해당 애트리뷰트 쪽으로 화살표를 삽입한다.\r\n③ N:M일 경우 양쪽 KEY를 묶는다.\r\n④ N;M의 경우 관계성 애트리뷰트는 양쪽 KEY를 묶어서 해당 애트리뷰트 쪽으로 화살표 삽입한다.\r\n⑤ 일반화의 경우 서브 엔티티 KEY에서 슈퍼 엔티티 KEY 쪽으로 화살표를 삽입한다.\r\n⑥ 다중값의 경우 해당 엔티티의 KEY와 다중값 속성을 함계 묶는다.', '', '', 15, 0),
(458, '', '서대영', '', '2008-12-29 22:01:50', 'DB', '데이터모델링 단계', '1. 요구 분석 : 업무처리규정\r\n2. 개념적 설계 : ERD 개체간계도 (Entity Relationship Diagram)\r\n3. 논리적 설계 : FDD 함수적 종속도 (Function Dependency Diagram)\r\n4. 물리적 설계 : 데이터베이스 설계도\r\n\r\n\r\n', '', '', 15, 0),
(459, '', '서대영', '', '2008-12-29 22:24:01', 'DB', '[모델링] FDD → 테이블', 'FDD의 모든 결정자는 각 테이블의 키가 된다.\r\n\r\n화살표 나가는 방향으로만 모두 묶는다.\r\n화살표 나가는 곳이 키 칼럼,\r\n바는 쪽이 일반 칼럼\r\n\r\n', '', '', 10, 0),
(461, '', '서대영', '', '2009-01-07 15:09:50', 'Network', '방화벽 등록 확인', 'telnet IP를 해서 blank cmd가 나오면 일단은 뚫린거다. (다른 문제)\r\n\r\n\r\n\r\n간단하게 프롬프트(도스창)에서 검사하실수 있습니다.\r\n프롬프트 창을 여신다음에 telnet 아이피주소 포트번호 하시면 됩니다.\r\n\r\nc:/\\telnet 218.151.77.160 6000\r\n이렇게 하셨을때 아이피에 연결됐는지안됐는지 포트가 열려 있는지 아닌지를 알 수 \r\n있습니다. 연결이 안되어 있다면 연결이 안됐다는 메세지가 뜨고요\r\n아이피도 연결되고 포트도 연결이 되어 있으면 프롬프트 창에 찍혀있던 내용이 안보이고 까만 화면만 보입니다.. ', '', '', 6, 0),
(462, '', '서대영', '', '2009-01-08 13:39:10', 'Java', 'Integer 클래스의 parseInt()와 valueOf의 차이', 'public static int parseInt(String s) \r\npublic static Integer valueOf(String s)\r\n\r\n리턴타입이 다르다.', '', '', 13, 0),
(463, '', '서대영', '', '2009-01-09 13:48:13', 'Unix', '화면 파일로 말기', 'll BT* > text.txt', '', '', 2, 0),
(464, '', '서대영', '', '2009-01-09 13:53:13', 'Unix', 'fgrep : 문자열 포함하는 라인 출력', '## grep과 차이\r\nfgrep은 정규식 지원을 하지 않는다.\r\n\r\n□ 문법\r\n fgrep [옵션] 문자열 [파일명...]\r\n\r\n□ 옵션\r\n -b : 개수 번호 붙이기\r\n -n : 파일 줄번호 붙이기\r\n -i : 대소문자 구문 안함\r\n -e : 줄수만 출력\r\n -c : 갯수 세기\r\n\r\n□ 예\r\n fgrep -n LE37A558P3FXXU *20081129*\r\n : 20081129을 포함하는 파일들 중에서 LE37A558P3FXXU 문자열을 포함하는 줄을 줄번호와 함께 출력\r\n\r\nfgrep -c ''[11300] SAP Destination ASCAP to try to connect, but failed to connect.'' gspn-exception.log-2011-06-07\r\n : 해당 문자열이 들어간 라인수 출력', NULL, '', 23, 0),
(465, '', '서대영', '', '2009-01-11 10:47:33', 'Java', '수행시간 측정', '위 방법이 객체를 더 써서 더 좋은 것 같음\r\n\r\n\r\n\r\n--------------------------------------------------------------------\r\n\r\nlong t = System.currentTimeMillis()\r\n\r\n수행 문장\r\n\r\nSystem.out.println("계산시간:" + (System.currentTimeMillis() - t) + "ms");\r\n\r\n\r\n\r\n---------------------------------------------------------------------\r\n\r\n\r\n\r\n		Date d1 = new Date();\r\n		// --------------------------->\r\n                수행 문장\r\n		// --------------------------->\r\n		Date d2 = new Date();\r\n		elapsed_time = d2.getTime() - d1.getTime();\r\n		System.out.println("Approach 1: Read method took " + elapsed_time\r\n				+ " milliseconds");', '', '', 14, 0),
(466, '', '서대영', '', '2009-01-11 11:21:07', 'Algorithm', '소수 구하기', 'import java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.PrintWriter;\r\nimport java.util.ArrayList;\r\n\r\npublic class Advance24 {\r\n\r\n	public static void main(String[] args) throws Exception {\r\n\r\n		BufferedReader reader = new BufferedReader(new FileReader("input.txt"));\r\n		PrintWriter writer = new PrintWriter(new FileWriter("output.txt"));\r\n			\r\n		int max = Integer.valueOf(reader.readLine());\r\n		ArrayList<Integer> primes = new ArrayList<Integer>();\r\n		\r\n		for (int i = 2; i <= max; i++) {\r\n			if (isPrime(i)) primes.add(i);\r\n		}\r\n\r\n		for (int i = 0; i < primes.size(); i++) {\r\n			writer.println(primes.get(i));\r\n		}\r\n		\r\n		reader.close();\r\n		writer.close();\r\n		\r\n	}\r\n	\r\n	public static boolean isPrime(int n) {\r\n		if (n == 2) return true;\r\n		if (n % 2 ==0) return false;\r\n		else {\r\n			for (int i = 3; i * i <= n; i += 2) {\r\n				if (n % i == 0) return false;\r\n			}\r\n		}\r\n		return true;\r\n	}\r\n\r\n}\r\n', '', '', 6, 0),
(467, '', '서대영', '', '2009-01-11 12:15:24', 'Algorithm', '최대공약수, 최소공배수', 'import java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.PrintWriter;\r\n\r\n\r\npublic class Advance14 {\r\n	\r\n	public static void main(String[] args) throws Exception {\r\n		BufferedReader reader = new BufferedReader(new FileReader("input.txt"));\r\n		PrintWriter writer = new PrintWriter(new FileWriter("output.txt"));\r\n			\r\n		int n1 = Integer.valueOf(reader.readLine());\r\n		int n2 = Integer.valueOf(reader.readLine());\r\n		\r\n		writer.println(gcd(n1, n2));\r\n		writer.println(lcm(n1, n2));\r\n		\r\n		reader.close();\r\n		writer.close();\r\n	}\r\n	\r\n	public static int gcd(int n1, int n2) {\r\n		if (n2 == 0) return n1;\r\n		else return gcd(n2, n1 % n2);\r\n	}\r\n	\r\n	public static int lcm(int n1, int n2) {\r\n		return n1 * n2 / gcd(n1, n2);\r\n	}\r\n	\r\n}\r\n', '', '', 9, 0),
(469, '', '서대영', '', '2009-01-12 22:57:16', 'SQL', 'SQL Convention', 'To enhance readibility,\r\n\r\n- Clauses are placed on seperate lines.\r\n- Indents are used.\r\n- Keywords typically are entered in uppercase.\r\n- Table names and columns are entered in lowercase', '', '', 7, 0),
(470, '', '서대영', '', '2009-01-12 23:00:07', 'SQL', 'Operators', '+ Add\r\n- Subtract\r\n* Multiply\r\n/ divde\r\n※ Mod(A, B) : A % B\r\n|| Concatenation', '', '', 3, 0),
(471, '', '서대영', '', '2009-01-12 23:02:53', 'SQL', 'Null Value', '이론 : 아직 결정되지 않는 값을 대표하는 키워드\r\n현실 : 알 수 없는 모든 값\r\n\r\nArithmetic expressions containing a null value evaluate to null.', '', '', 3, 0),
(472, '', '서대영', '', '2009-01-12 23:11:44', 'SQL', 'Literal', '- Literal : a character, a number, or a date\r\n- Date and character values must be enclosed by single quotation marks.\r\n- Number values don''t be have to enclosed by single quotation marks.\r\n\r\n주의 : \r\n''fater''''''day''', '', '', 1, 0),
(473, '', '서대영', '', '2009-01-12 23:24:04', 'SQL', 'WHERE Clause', '■ Definition\r\nRestrict rows of ouput\r\n\r\n■ Comparison Conditions\r\n= : Equal to\r\n<> : Not equal to\r\nBETWEEN A AND B : Between two values (inclusive)\r\nex) WHERE salary BETWEEN 100 AND 200\r\n= WHERE salary >= 100 AND salary <= 200\r\nIN (set) : Match any of a list of values\r\nex) WHERE manager_id IN (100, 200)\r\n= WHERE manager_id = 100 OR manager_id = 200\r\nLIKE ''_ | %'': Match a character pattern\r\n- % : any sequence of zero or more characters\r\n- _ : any single character\r\nIS NULL : is a null value', '', '', 12, 0),
(474, '', '서대영', '', '2009-01-12 23:32:42', 'SQL', 'Substituion Variables', '■ Definition\r\na variable prefixed with an ampersand mark to promt the user for a value\r\n정확하게 그자리에 똑같이 대체해 줌\r\n\r\n■ Syntax\r\n- a number literal : &user_variable\r\n- a date or character literal : ''&user_variable''\r\n- to reuse the varialbe value without prompting the user each time\r\n: ''&&user_variable''\r\n\r\nex) WHERE emplyee_id = &employee_num', '', '', 1, 0),
(475, '', '서대영', '', '2009-01-12 23:35:26', 'SQL', 'ORDER BY clause', '■ Definition\r\nsort rows of ouput', '', '', 0, 0),
(476, '', '서대영', '', '2009-01-12 23:39:24', 'Oracle', 'Single-Row Functions', '■ Definition\r\n§ Return one result per row.\r\n\r\n■ Syntax\r\n§ function_name [(arg1, arg2, ...)]\r\n\r\n■ Kind\r\n① Character Functions\r\n② Number Fuctions\r\n③ Date Functions\r\n④ Coversion Functions\r\n⑤ General Functions', '', '', 4, 0),
(477, '', '서대영', '', '2009-01-13 08:32:18', 'Oracle', 'Character Functions', '■ Case-Manipulation Functions\r\n- LOWER\r\n- UPPER\r\n- INICAP : to uppercase for the first letter of each word\r\n\r\n■ Character-Manipulation Functions\r\n- CONCAT\r\n- SUBSTR(column|expression, m [,n])\r\n : starting at carecter position m, n character long \r\n : if m is negative, the count starts from the end of the character value\r\n : if n is omitted, all characters to the end of the string are returned\r\n- LENGTH\r\n- INSTR(column|expression, ''string'' [,m] [,n])\r\n : returns the numeric position of a named string\r\n : m to start searching (default = 1)\r\n- LPAD(column|expression, n, ''string'')\r\n- RPAD(column|expression, n, ''string'')\r\n: pads the character value right-justified to a toal width of n character positions\r\n- TRIM(leading|trailing|bothh, trim_character FROM trim_source)\r\n- REPLACE(text, search_string, replacment_string)\r\n : the occurrence n of the string (default = 1)', '', '', 4, 0),
(478, '', '서대영', '', '2009-01-13 08:33:23', 'Oracle', 'Number Functions', '- ROUND\r\n- TRUNC\r\n- MOD', '', '', 0, 0),
(479, '', '서대영', '', '2009-01-13 08:36:48', 'Oracle', 'Date Functions', '※ Default Display Format\r\n- America : DD-MON-RR\r\n- Korea : RR/MM/DD\r\n이 형식만 따른다면 날짜 대신 문자열을 사용 가능\r\n\r\n\r\n- SYSDATE : returns the current database server date and time\r\n- MOTHS_BETWEEN\r\n- ADD_MONTHS\r\n- NEXT_DAY(date, ''char'') : 다음 주 char요일\r\n- LAST_DAY\r\n- ROUND\r\n- TRUNC\r\n\r\n\r\n\r\nex) 6개월 후 첫번째 월요일\r\nSELECT last_name, hire_date, \r\nTO_CHAR(NEXT_DAY(ADD_MONTHS(hire_date, 6), ''MON''), ''fmDAY, "the" Ddspth "of" Month, YYYY'') REVIEW\r\nFROM employees\r\n\r\nex) 요일 순 정렬\r\nSELECT last_name, hire_date, \r\nTO_CHAR(hire_date, ''DAY'') AS day\r\nFROM employees\r\nORDER BY TO_CHAR(hire_date - 1, ''d'')', '', '', 5, 0),
(480, '', '서대영', '', '2009-01-13 08:36:57', 'Oracle', 'Coversion Functions', '■ Implicit Conversion\r\n - CHAR <-> NUMBER : employee_id > 100\r\n - CHAR <-> DATE : hire_date < ''01-Jan-98''\r\n\r\n■ Explicit Conversion (Recommended : Readibility, Speed)\r\n - TO_NUMBER(char, ''format'') : CHAR -> NUMBER\r\n - TO_DATE(char, ''format'') : CHAR -> DATE\r\n저장된 로우 데이터를 유저가 보기 좋게 변환\r\n - TO_CHAR(number, ''format'') : NUMBER -> CHAR\r\n - TO_CHAR(date, ''format'') : DATE -> CHAR\r\n\r\n■ Date Format\r\n - YYYY\r\n - YEAR\r\n - YY : the return date is in the current century\r\n - RR : the century of the return value varies according to the specified two-dight year and the last two digits of the current year.\r\n - MM\r\n - fmMM\r\n - MONTH\r\n - MON\r\n - DY : Three-letter abbreviation of the day of the week\r\n - DAY\r\n - DD\r\n\r\n■ Time Format\r\n - AM / PM\r\n - HH / HH12 / HH24\r\n - Mi\r\n - SS / SSSSS\r\n\r\n■ Number Format\r\n - 9 : a number\r\n - 0 : forces a zero to be displayed\r\n - $ : dollar sign\r\n - L : local currency symbol\r\n - . : decimal point\r\n - , : thousands indicator\r\n ex) TO_CHAR(salary, ''$99,999,00'') = $6,000,00\r\n\r\n\r\n\r\n', '', '', 9, 0),
(481, '', '서대영', '', '2009-01-13 10:38:46', 'Oracle', 'General Functions', '- NVL(칼럼, 널일때)\r\n- NVL2(칼럼, 널아닐때, 널일때)\r\n- NULLIF(칼럼1, 칼럼2) : 칼럼1과 2가 같으면 NULL 다르면 칼럼1 반환\r\n- COALSESCE(칼럼1, 칼럼2, ..., 칼럼n) : 칼럼1이 널이면 칼럼2, 칼럼2가 널이면 칼럼3...\r\n\r\n\r\n※ NVL을 통해 널값을 처리하는 것보다,\r\n널값의 본연의 의미(아직 결정되지 않은 값)을 생각해본다면,\r\n테이블 생성할 때 칼럼의 디폴트값을 정해주는 것이 옮다.\r\n\r\nex) 이름 처러\r\nNVL(NVL(last_name, first_name), ''no name'')\r\n\r\n\r\nex) NVL 두 인수 타입은 동일 해야함!\r\nSELECT last_name, NVL(TO_CHAR(commission_pct), ''No Commission'')\r\nFROM employees', '', '', 5, 0),
(482, '', '서대영', '', '2009-01-13 17:05:18', 'Oracle', '결과 테이블 칼럼과 로우 바꾸기 (DECODE 이용)', '-- 연도와 봉급합을 칼럼명으로\r\nSELECT TO_CHAR(hire_date, ''YY'') year, sum(salary) sumsal\r\nFROM employees\r\nGROUP BY TO_CHAR(hire_date, ''YY'');\r\n\r\n-- 각 연도를 칼럼명으로\r\nselect \r\nSUM(DECODE(year, ''00'', sumsal)) "2000",\r\nSUM(DECODE(year, ''99'', sumsal)) "1999",\r\nSUM(DECODE(year, ''98'', sumsal)) "1998",\r\nSUM(DECODE(year, ''97'', sumsal)) "1997",\r\nSUM(DECODE(year, ''96'', sumsal)) "1996",\r\nSUM(DECODE(year, ''95'', sumsal)) "1995"\r\nfrom (\r\n  SELECT TO_CHAR(hire_date, ''YY'') year, sum(salary) sumsal\r\n  FROM employees\r\n  GROUP BY TO_CHAR(hire_date, ''YY'') \r\n);', '', '', 3, 0),
(483, '', '서대영', '', '2009-01-14 08:49:33', 'Oracle', 'Conditional Expressions', '■ CASE expression\r\n- 등가비교 : CASE와 WHEN 사이에 칼럼 위치, 칼럼과 비교값이 같으면 리턴값을 반환\r\nCASE 칼럼 \r\nWHEN 비교값1 THEN 리턴값1\r\nWHEN 비교값2 THEN 리턴값2\r\nELSE 기본리턴값\r\n\r\n- 대소비교 : WHEN뒤에 칼럼 위치.\r\nCASE \r\nWHEN 칼럼 > 비교값1 THEN 리턴값1\r\nWHEN 칼럼 > 비교값2 THEN 리턴값2\r\nELSE 기본리턴값\r\n\r\n■ DECODE function\r\n- 등가비교만 가능\r\nDECODE(col/expression, search1, result1\r\n[, search2, result2, ...]\r\n[, default])\r\n\r\nex) DECODE(job_id, \r\n''IT_PROG'', 1.10* salar,\r\n''ST_CLERK'', 1.15*salary,\r\n''SA_REP'', 1.20*salary,\r\nsalary)  "Revised Salary"', '', '', 4, 0),
(484, '', '서대영', '', '2009-01-14 09:05:36', 'Oracle', 'Group (Multi-row) Functions', '■ Definition\r\n - operate on sets of rows to give one result per group.\r\n - ignore null values. ★\r\n\r\n■ Syntax\r\nSELECT [column, ] group_function(column), ...\r\nFROM table\r\n[WHERE condition]\r\n[GROUP BY group_by_expression]\r\n[HAVING group_condition]\r\n[ORDER BY column]\r\n\r\n■ Types\r\n - AVG\r\nex) AVG(NVL(commission, 0))\r\n - COUNT : returns the number of rows without null values\r\n - MAX\r\n - MIN\r\n - STDDEV 표준편차\r\n - SUM\r\n - VARIANCE 분산\r\n\r\n■ Guidelines\r\n - The other columns except for a group function in a SELECT clause shoud appear in the GROUP BY clause\r\n - The GROUP BY clumns does not have to be in the SELECT list.', '', '', 5, 0),
(485, '', '서대영', '', '2009-01-14 11:12:05', 'Oracle', 'Joins', '※ Standard\r\n - ANSI SQL 92 : use a WHERE clause to join\r\n - ANSI SQL 99 : use JON, USING, ON clasue to join\r\n - SQL 99 is recommended\r\n\r\n■ Equijoins\r\n1. Natural Joins\r\n- join two tables based on the same column name and type.\r\nSELECT columns\r\nFROM table1\r\nNATURAL JOIN table2\r\n\r\n2. USING clause\r\n- the same names but the data types don not match\r\n- do not use table prefix before common_column_name\r\nFROM table1\r\nJOIN table2 \r\nUSING (common_column_name)\r\n\r\n3. ON clause\r\n- when column names and types are diffrent\r\n- improve readibity (sprate search condition and join condition)\r\n- Self-Joins\r\nFROM table1\r\nJOIN table2\r\nON (table1.column_name = table2.column_name)\r\n\r\n■ Nonequijoins\r\n- 범위를 기준으로 조인\r\nFROM emplyees e\r\nJOIN job_grades j\r\nON e.salary BETWEEN j.lowest_sal AND j.hightest_sal\r\n\r\n■ Outer Joins\r\n- 조인 조건과 부합되지 않는 로우도 표시\r\n1. LEFT(RIGHT) OUTER JOIN : 왼쪽(오른쪽) 테이블을 로우를 모두 보여주겠다.\r\n(SQL 99)\r\nFROM table1 \r\nLEFT OUTER JOIN table2\r\nON table1.common_col = table2.common_col\r\n(SQL 92) +의 의미 : table2에 table1의 common_col값과 일치하는 값이 없더라도 빈 로우로 조인하겠다.\r\nFROM table1, table2\r\nWHERE tabe1.common_col = table2.common_col(+)\r\n2. FULL OUTER JOIN : 양쪽 테이블을 모든 로우를 보여주겠다.\r\n(SQL 99)\r\nFROM table1 \r\nFULL OUTER JOIN table2\r\n(SQL 92) : ++ 는 지원 안함\r\n\r\n■ CROSS JOIN (Cartesian Products)\r\n- 조인 조건없이 조인\r\n- 일반적으로 사용할 때가 없지만, 부하테스트시 만건의 데이터를 억건의 데이터로 만들 때 사용한다.\r\nFROM table1\r\n(CROSS) JOIN table2', '', '', 11, 0),
(486, '', '서대영', '', '2009-01-14 12:07:26', 'Oracle', 'Subqueries', '■ 용도\r\n\r\n■ 순서\r\n서브쿼리 실행 후 슈퍼쿼리 실행\r\n\r\n■ 주의사항\r\n- ORDER BY는 슈퍼쿼리 단에서 딱 한번만 실시\r\n- use a single-row subquery with a single-row opeartor\r\n- use a multi-row subquery with a multi-row operator \r\n\r\n* Single-row comparision opeartors\r\n: =, >, >=, <, <=, <>\r\n\r\n* Multi-row comparison operators\r\n- IN : = ANY\r\n- ANY : (one of them)\r\n<ANY : less than MAX\r\n>ANY : more than MIN\r\n- ALL: (everyting)\r\n<ALL : less than MIN\r\n>ALL : more than MAX\r\n\r\n★ NOT IN () 을 사용할 때 () 안에 NULL이 존재하면 전체가 NULL이 되서 어떤 값도 slect 되지 않는다.', '', '', 4, 0),
(487, '', '서대영', '', '2009-01-14 13:45:52', 'Oracle', 'Set Operators', '- The expressions in the SELECT lists must match in number and data type.\r\n- Column names from the first query appear in the result.\r\n- ORDER BY clause can appear only at the very end of the statment.\r\n\r\nUNION : 중복 제거 합집합\r\nUNION ALL : 중복 포함 합집합\r\nINTERSECT : 교집합\r\nMINUS : 차집합\r\n\r\n\r\n※ 어기지로 칼럼 수와 타입 맞추기\r\nSELECT department_id, TO_NUMBER(null) location, hire_date\r\nFROM employees\r\nUNION\r\nSELECT department_id, location_id, TO_DATE(null)\r\nFROM departments', '', '', 3, 0),
(488, '', '서대영', '', '2009-01-14 15:48:29', 'MySQL', 'MySQL Foreign Key (외래키) 사용하기', 'MySQL에서 InnoDB 테이블은 Foreign 키 제한 검사를 지원한다. \r\n\r\nForeign 키 제한은 단순히 두 테이블을 조인 (join)하기 위해 필요한 것이 아니다. InnoDB가 아닌 스토리지 엔진의 경우, 컬럼이 REFERENCES tbl_name(col_name) 구문을 사용하도록 정의하는 것이 가능한데, 이것은 실제로 아무런 효과도 없으며, 또한 여러분이 지금 정의하는 컬럼은 다른 테이블에 있는 컬럼을 참조하도록 의도된 것이라는 것을 알려주는 메모 또는 코멘트 역할만 하게 된다. 이 신텍스를 다음과 같은 상황에서 사용할 때는 특히 중요하다: \r\n\r\n·         MySQL은 col_name 이 실제로 tbl_name 에 있는지 (또는 tbl_name 자체가 존재하는지) 확인하기 위한 어떠한 종류의 CHECK도 실행하지 않는다.    \r\n\r\n·         MySQL 은 여러분이 정의한 테이블에서 열을 가져와서 삭제하는 것과 같은 행동을 tbl_name 에서는 전혀 하지 않는다; 다른 말로 표현하면, 이 신텍스는 ON DELETE 또는 ON UPDATE 가 구동하는데 아무런 영향을 미치지 않는다. (여러분이ON DELETE 또는 ON UPDATE 구문을 REFERENCES 구문의 일부분으로 작성한다 하더라도, 이것은 무시되어 버린다.) \r\n\r\n·         이 신텍스는 column을 만들어 낸다; 이것은 어떤 종류의 인덱스 또는 키를 만들지는 않는다. \r\n\r\n·         이 신텍스는 InnoDB 테이블을 정의하기 위해 사용할 때 에러를 발생시킨다. \r\n\r\n여러분은 여기에서 보듯이, 컬럼을 만들어서 조인(join) 컬럼으로 사용할 수 있다: \r\n\r\nCREATE TABLE person (    id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,    name CHAR(60) NOT NULL,    PRIMARY KEY (id)); CREATE TABLE shirt (    id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,    style ENUM(''t-shirt'', ''polo'', ''dress'') NOT NULL,    color ENUM(''red'', ''blue'', ''orange'', ''white'', ''black'') NOT NULL,    owner SMALLINT UNSIGNED NOT NULL REFERENCES person(id),    PRIMARY KEY (id)); INSERT INTO person VALUES (NULL, ''Antonio Paz''); SELECT @last := LAST_INSERT_ID(); INSERT INTO shirt VALUES(NULL, ''polo'', ''blue'', @last),(NULL, ''dress'', ''white'', @last),(NULL, ''t-shirt'', ''blue'', @last); INSERT INTO person VALUES (NULL, ''Lilliana Angelovska''); SELECT @last := LAST_INSERT_ID(); INSERT INTO shirt VALUES(NULL, ''dress'', ''orange'', @last),(NULL, ''polo'', ''red'', @last),(NULL, ''dress'', ''blue'', @last),(NULL, ''t-shirt'', ''white'', @last); SELECT * FROM person;+----+---------------------+| id | name                |+----+---------------------+|  1 | Antonio Paz         ||  2 | Lilliana Angelovska |+----+---------------------+ SELECT * FROM shirt;+----+---------+--------+-------+| id | style   | color  | owner |+----+---------+--------+-------+|  1 | polo    | blue   |     1 ||  2 | dress   | white  |     1 ||  3 | t-shirt | blue   |     1 ||  4 | dress   | orange |     2 ||  5 | polo    | red    |     2 ||  6 | dress   | blue   |     2 ||  7 | t-shirt | white  |     2 |+----+---------+--------+-------+  SELECT s.* FROM person p, shirt s WHERE p.name LIKE ''Lilliana%''   AND s.owner = p.id   AND s.color <> ''white''; +----+-------+--------+-------+| id | style | color  | owner |+----+-------+--------+-------+|  4 | dress | orange |     2 ||  5 | polo  | red    |     2 ||  6 | dress | blue   |     2 |+----+-------+--------+-------+이러한 형태로 사용될 경우에, REFERENCES 구문은 SHOW CREATE TABLE 또는 DESCRIBE 구문의 결과에는 나타나지 않는다: \r\n\r\nSHOW CREATE TABLE shirt\\G*************************** 1. row ***************************Table: shirtCreate Table: CREATE TABLE `shirt` (`id` smallint(5) unsigned NOT NULL auto_increment,`style` enum(''t-shirt'',''polo'',''dress'') NOT NULL,`color` enum(''red'',''blue'',''orange'',''white'',''black'') NOT NULL,`owner` smallint(5) unsigned NOT NULL,PRIMARY KEY  (`id`)) ENGINE=MyISAM DEFAULT CHARSET=latin1여기에서처럼 REFERENCES 를 컬럼 정의문에서 코멘트 형태 또는 “리마인더(reminder)”로 사용하는 것은 MyISAM 및 BerkeleyDB 테이블에서도 적용 할 수 있다. \r\n\r\n\r\n출처 : www.mysqlkorea.co.kr\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.pages.kr/57', 'http://blog.pages.kr/57', '', 8, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(490, '', '서대영', '', '2009-01-15 08:33:25', 'Oracle', '9. DDL (Data Definition Language)', '■ Object Types\r\n- Table\r\n- View\r\n- Sequence\r\n- Index\r\n- Synonym\r\n- 기타 : Procedure, Package, Trigger\r\n\r\n■ 테이블 명명 규칙\r\n- 문자로 시작\r\n- _, $, # 특수문자만 가능\r\n\r\n■ Create\r\n\r\n* Syntax\r\n\r\nCREATE TABLE 테이블명 (\r\n칼럼명 타입(크기) [DEFAULT 기본값, 제약조건],\r\n칼럼명 타입(크기) [DEFAULT 기본값, 제약조건],\r\n칼럼명 타입(크기) [DEFAULT 기본값, 제약조건]\r\n)\r\n\r\n* 테이블 코멘트 달기\r\nCOMMENT ON TABLE 테이블명\r\nIS ''코멘트내용''\r\n\r\n* 테이블의 구조와 내용 복사\r\n\r\nCREATE TABLE new_tab \r\nAS (select * from old_tab);\r\n\r\n* DEFAULT Option\r\nCREATE TABLE hire_date (\r\nid NUMBER(8),\r\nhire_date DATE DEFAULT SYSDATE\r\n)\r\n\r\n■ Constratints\r\n* Syntax\r\n1) Column-level \r\n칼럼명 [CONSTRAINT 제약명] 제약타입\r\n2) Table-level\r\n칼럼명, ...\r\n[CONSTRAINT 제약명] 제약타입(칼럼명, ...)\r\n※ CONSTRAINT는 단지 제약명명을 해주는 키워드\r\n※ NOT NULL은 무조건 컬럼레벨로\r\n\r\n* Types\r\n- NOT NULL\r\n- UNIQUE : NULL은 중복 삽입 가능\r\n- PRIMARY KEY : NOT NULL + U', '', '', 20, 0),
(519, '', '서대영', '', '2009-04-15 22:24:44', 'DB', '트렌젝션', '데이터베이스의 논리적 연산단위를 뜻하는데,\r\n보통 COMMIT나 ROOLBACK 명령어 이전의 모든 DML을 통칭한다.\r\n\r\n□ COMMIT이나 ROLLBACK 이전의 데이터 상태\r\n - 단지 buffer에만 영향을 받았기 때문에 데이터의 이전 상태는 복구 가능.\r\n - 현재 사용자는 SELECT 문으로 결과를 확인 가능.\r\n - 다른 사용자는 현재 사용자가 수행한 결과를 볼 수 없음.\r\n - 변경된 행은 잠금(Locking)이 설정되어서 다른 사용자가 변경할 수 없음.\r\n \r\n \r\n', '', '', 1, 0),
(493, '', '서대영', '', '2009-01-16 07:58:39', 'Oracle', '[Object] Sequences', '■ Definition\r\n- automatically generate unique numbers\r\n- used to create a primary key value (주문번호, 게시물번호)\r\n- shared by other tables\r\n- replace application code\r\n\r\n■ Syntax\r\n- 생성\r\n CREATE SEQUENCE 시퀀스명\r\n [INCREMENT BY n] : 증감량\r\n [START WITH n] : 시작번호\r\n [MAXVALUE n]\r\n [MINVALUE n]\r\n [CYCLE] : 최대를 넘으면 다시 최소로 올지\r\n [CACHE n] : 메모리에 몇 개 씩 올려놓을지\r\n- 수정\r\n ALTER SEQUENCE 시퀀스명\r\n ※ START WITH는 바꿀 수 없음\r\n- 소멸\r\n DROP SEQUENCE 시퀀스명\r\n\r\n■ Psedocolumns\r\n- NEXTVAL : the next available sequence value\r\n- CURRVAL : the current sequence value\r\n\r\n■ Example\r\nINSERT INTO departments\r\nVALUES (deprt_seq.NEXTVAL, ''Support'', 2500);\r\n\r\n', '', '', 7, 0),
(494, '', '서대영', '', '2009-01-16 08:18:47', 'Oracle', '[Object] Indexes', '■ Definition\r\n - used by the Oracle server to speed up the retrieval of rows\r\n - reduce disk I/O by using a B tree\r\n\r\n■ Types\r\n - Unique Index : automatically created when you define a PRIMARY KEY or UNQUE\r\n - Nonunique Index : manually created by users\r\n\r\n■ Syntax\r\n- 생성\r\n CREATE INDEX 인덱스명\r\n ON 테이블명(칼럼명들)\r\n- 소멸\r\n DROP INDEX 인덱스명\r\n\r\n■ Guidelines\r\n- 값의 종류가 다양한 칼럼\r\n- 널값을 많이 가지는 칼럼 (NULL값은 인덱싱 안함)\r\n- 검색조건이나 조인조건에 자주 사용되는 칼럼 ★\r\n- 자주 DML을 사용되거나 수식이 사용되는 테이블은 오히려 성능 저하 (DML 수행 시마다 INDEX도 갱신되는 오버해드, 수식은 INDEX 사용 못함)', '', '', 5, 0),
(495, '', '서대영', '', '2009-01-16 08:24:30', 'Oracle', '[Object] Synonyms', '■ Definition\r\n - Another name for an object\r\n - Sorten lengty object names\r\n - Create an easier reference to a table owned by another user\r\n\r\n■ Syntax\r\n- 생성\r\n CREATE [PUBLIC] SYNONYM 시너님명\r\n FOR 오브젝트명\r\n ※ [PUBLIC] : 모든 사용자 접근 권한\r\n\r\n- 소멸\r\n DROP SYNONYM 시너님명\r\n', '', '', 1, 0),
(496, '', '서대영', '', '2009-01-16 08:31:50', 'Oracle', 'Data Dictionay', '■ Definition\r\n - 오브젝트들의 정보를 저장하고 있는 뷰\r\n - USER_ : 자기 소유의 오브젝트 리스트\r\n - ALL_ : 모든 유저 소유의 오브젝트 중 내가 권한 있는 것만\r\n\r\n■ 출발점\r\nSELECT * FROM DICTONARY : 모든 데이터사전뷰의 종류를 조회\r\nSELECT * FROM DICT\r\n\r\n■ Types\r\nuser_objects\r\nuser_tables\r\nuser_tab_columns\r\nuser_constraints\r\nuser_cons_columns\r\nuser_views : 뷰의 원래 쿼리를 조회 시 유용\r\nuser_sequences\r\nuser_tab_synonyms\r\nuser_indexes\r\nuser_ind_columns\r\nALL_DB_LINKS : 디비링크\r\n\r\n\r\n-- TABLE 목록 조회\r\n \r\nSELECT OBJECT_NAME FROM USER_OBJECTS\r\nWHERE OBJECT_TYPE =''TABLE''\r\nORDER BY OBJECT_NAME ;\r\n \r\n \r\n-- Column 목록 조회\r\n \r\nSELECT TABLE_NAME, COLUMN_NAME, DATA_TYPE, DATA_LENGTH, DATA_PRECISION, DATA_SCALE, NULLABLE  FROM COLS \r\n-- WHERE TABLE_NAME NOT LIKE ''%SYNC'' \r\nORDER BY TABLE_NAME, COLUMN_ID\r\n\r\n\r\n', '', '', 10, 0),
(497, '', '서대영', '', '2009-01-19 16:58:18', 'IT', '인증요청사(CSR) 생성법', 'Certificate Signing Request\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com:80/viper150?Redirect=Log&logNo=120003356340', 'http://blog.naver.com:80/viper150?Redirect=Log&logNo=120003356340', '', 3, 0),
(498, '', '서대영', '', '2009-01-21 11:35:17', 'CSS', '배경 이미지 관련', '* 배경 이미지 브라우져 크기로 늘려서 삽입\r\nbody {\r\n	background: url(''../images/bg.jpg'');\r\n	background-size: cover;\r\n}\r\n\r\n\r\n* 배경에 고정된 이미지 삽입\r\n<STYLE> body { background-image:url("http://www.dayo.pe.kr/free/file/85/chick.gif"); background-attachment: fixed; background-repeat: no-repeat; background-position: top right; } table { background-color: transparent; } td { background-color: transparent; } </STYLE>', '', '', 14, 0),
(499, '', '서대영', '', '2009-01-27 16:12:07', 'JavaScript', '유일한 폼객체 가져오기', 'document.forms[0]', '', '', 7, 0),
(500, '', '서대영', '', '2009-01-27 17:33:14', 'JavaScript', '[Form] slelect 값이 바귈 때 마다 재로딩', '		<select name="region" onChange="forms[0].submit();">\r\n			<option value="">전권역</option>\r\n			<%\r\n				for (int i = 0; i < regions.size(); i++) {\r\n					RegionRecord r = (RegionRecord) regions.get(i);\r\n					boolean isSelected = r.getRegionCode().equals(request.getParameter("region")) ? true : false;\r\n			%>\r\n			<option value="<%=r.getRegionCode() %>" <%=isSelected ? "selected" : "" %>><%=r.getRegionName() %></option>\r\n			<%\r\n				}\r\n			%>	\r\n		</select>', '', '', 6, 0),
(501, '', '서대영', '', '2009-01-27 23:40:10', 'Cafe24', '톰켓 맵핑법', 'web.xml 파일 뿐만 아니라.\r\n나의 서비스 관리 > 톰켓 맵핑\r\n에서 ".확장자" 로 등록도 해줘야한다.', '', '', 1, 0),
(502, '', '서대영', '', '2009-02-03 10:50:31', 'Unix', 'tail', '□ tail : 파일 찾기\r\n\r\n$ tail [+- [줄수][파일명]]\r\n\r\n- 디폴트 줄수 : 10줄\r\n- 디폴트 파일 : 표준 입력\r\n-f : 실시간 보기 \r\n\r\n$ tail -f /aucbe/bea/user_projects/domains/saskp/bea7001.log\r\n\r\n\r\ntail +100 aaaa.log | head -50\r\n100줄 부터 50라인 보기\r\ntail -n +154950 businessSvr3_03_rfcTxLog_12.log | head -100\r\n\r\n\r\nr tail\r\n방금 실행한 셀 로그 보기', '', '', 22, 0),
(704, '', '서대영', '', '2010-01-26 22:45:00', 'JavaScript', 'decode 함수', '공백, 사선 등을 처리하고, 이것들을 안정한 문자로 변환\r\n\r\nGET 방식으로 요청을 보낼 때 쿼리에 사용', '', '', 2, 0),
(503, '', '서대영', '', '2009-02-03 17:07:17', 'Java', '널값 if 검사와 for문을 한 번에', 'for (int i = 0; data != null && i < data.length; i++) {...}', '', '', 4, 0),
(504, '', '서대영', '', '2009-02-09 11:36:24', 'JavaScript', '페이지 바로 이동', '<script>\r\n	location.href="http://europe.samsungportal.com/km/km/servlet/index.exp";\r\n</script>', '', '', 9, 0),
(505, '', '서대영', '', '2009-02-11 15:17:57', 'Unix', '.profile', '- 계정 홈 데렉토리에 위치\r\n- 선처리를 담당\r\n\r\n□ 단축명령어 설정\r\nalias log=''tail -f /aucbe/bea/user_projects/domains/saskp/bea7001.log''\r\n\r\n□ 단축경로 설정\r\nexport JAVA_HOME=/opt/java1.4\r\n\r\n□ vi 모드 설정 (esc + k 누르면 전에 수행 목록 나옴)\r\nset -o vi', '', '', 18, 0),
(506, '', '서대영', '', '2009-02-13 17:39:20', 'Unix', 'bdf 디스크 여유 용량 체크', 'KB 단위\r\n\r\n\r\nlsmedia (첨부파일 용량 체크)', '', '', 28, 0),
(507, '', '서대영', '', '2009-02-19 16:10:35', 'JavaScript', '특수문자 입력제한', '		if (/[^0-9a-zA-Z]/.test(serial))\r\n			alert("special character is not allowed. (ex. ? ; & + )");', '', '', 1, 0),
(1377, '', '서대영', '', '2015-03-26 22:30:51', 'AWS', 'ASW RDS MySQL UTF-8 인코딩 설정', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://hyeonstorage.tistory.com/276', 'http://hyeonstorage.tistory.com/276', '', 2, 0),
(509, '', '서대영', '', '2009-03-04 19:51:14', 'IT', 'SOA (Service Oriented Architecture)', '□ 등장배경\r\n - System Oriented → Solution Oriented  → Service Oriented\r\n - 비즈니스와 IT 간의 간격을 축소하기 위해 \r\n\r\n□ 정의\r\n - 비즈니스 서비스 중심으로 IT 시스템을 구현하기 위한 서비스 지향적 이키텍쳐 모델\r\n - 기존 IT 시스템의 기능을 단위 서비스하여 비즈니스 프로세스 중심으로 재 조합하여 새로운 IT 시스템으로 구현하기 위한 아키텍처 모델\r\n\r\n□ Web Services\r\n - SOA를 구현하기 위한 표준 기술\r\n - 인터넷 상에 분산되어 있는 각종 서비스, 어플리케이션, 시스템들 간의 상호작용을 가능하게 해주는 서비스 지향적 아키텍처(SOA)를 구현하는 표준 기술', '', '', 2, 0),
(510, '', '서대영', '', '2009-03-05 10:42:22', 'Oracle', 'DB Link', 'CREATE DATABASE LINK "DB link 명"\r\nCONNECT TO "유저내임"\r\nIDENTIFIED BY "패스워드"\r\nUSING ''사용할TNS명'';\r\n\r\n\r\nex)\r\ncreate database link "TSED_VD"\r\nconnect to QINGS_DIS\r\nidentified by "<pwd>"\r\nusing ''TNS:TSED_DIS'';\r\n\r\n\r\n\r\n\r\n\r\n< DB link 사용 시 Remote Session 종료 방법 >\r\n\r\n1) Local Database 접속을 종료하면 자동적으로 Remote Database의 세션은 종료된다.\r\n\r\n2) ALTER SESSION 명령어로 종료할 수 있다.\r\nALTER SESSION CLOSE DATABASE LINK <dblink_name>;\r\n \r\n위 명령어 사용시 ORA-2080:database linke is in use, 메세지가 나타나면\r\nCOMMIT 명령어로 해당 트랜잭션의 모든 OPEN된 CURSOR를 완료시킨다.\r\n\r\n3) DBMS_SESSION 패키지를 이용하여 종료한다.\r\nEXECUTE DBMS_SESSION.CLOSE_DATABASE_LINK(''dblink_name'');\r\n\r\n\r\n< DB Link 리스트 조회 >\r\n\r\nselect *\r\n\r\nfrom user_db_links\r\n\r\n=====================================================================\r\n\r\n< SERK_VD 디비링크 추가 >\r\n\r\n□ /oracle/network/admin/tnsnames.ora에 추가\r\n\r\n \r\n\r\nSERK_VD =\r\n\r\n  (DESCRIPTION =\r\n\r\n    (ADDRESS = (PROTOCOL = TCP)(HOST = 106.109.80.14)(PORT = 1521))\r\n\r\n    (CONNECT_DATA = (SID = ORCL))\r\n\r\n)\r\n\r\n \r\n\r\n \r\n\r\n□ DBlink 생성\r\n\r\n \r\n\r\nCREATE DATABASE LINK "SERK_VD"\r\n\r\nCONNECT TO QINGS_DIS\r\n\r\nIDENTIFIED BY  "ifdnsdud01"\r\n\r\nUSING ''TNS:SERK_VD'';\r\n\r\n \r\n\r\n \r\n\r\n□ 접속 테스트\r\n\r\ntelnet 106.109.80.14 1521\r\n\r\ntnsping SERK_VD\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://cafe.naver.com/techora.cafe?iframe_url=/ArticleRead.nhn%3Farticleid=65', 'http://cafe.naver.com/techora.cafe?iframe_url=/ArticleRead.nhn%3Farticleid=65', '', 23, 0),
(511, '', '서대영', '', '2009-03-05 10:43:50', 'Network', '명령어', 'ping IP주소\r\ntnsping Alias or IP주소\r\n: Alisa 는 tnsnames에 등록된 것을 사용한다.\r\n\r\nping gspn2.samsungcsportal.com -t -n 30 > NZ.txt\r\n: 30번 수행한 결과를 NZ.txt 파일에 저장\r\n\r\ntracert IP주소\r\ntelnet IP주소 포트번호\r\n: 라우팅 체크에 사용됨', '', '', 20, 0),
(512, '', '서대영', '', '2009-03-06 19:42:26', 'IT', '가상화 & Grid Computing', '□ 가상화\r\n - 컴퓨팅 자원을 추상화하여 하나의 컴퓨팅 시스템을 여러 개의 자원으로 쪼개어 사용하게 하는 기술\r\n\r\n□ Grid Computing\r\n - 분산되어 있는 다수의 컴퓨터 자원을 하나의 컴퓨터처럼 사용하는 기술\r\n - 새로운 IT 자원의 투자없이 기존의 여유분을 모아고성능 IT서비스를 제공할 수 있음\r\n - Utiity Computing\r\n\r\n\r\n\r\n=> Grid Computing을 구현하기 위해서는 가상화 기술이 필요 => Cloud Computing', '', '', 2, 0),
(513, '', '서대영', '', '2009-03-09 19:35:31', 'IT', 'Cloud Computing', '- IT 자원을 소유하지 않고 필요할 때 인터넷을 통해 서비스 형태로 이용\r\n\r\n\r\n\r\n□ PaaS (Platform as a Service)\r\n - 인터넷을 통해 서비스희 형태로 플랫폼 (HW + SW)를 제공하는 방식', '', '', 0, 0),
(514, '', '서대영', '', '2009-03-11 13:31:06', 'Oracle', '디스크 용량이 부족할 때', 'D:\\oraclexe\\app\\oracle\\admin\\XE\\bdump 의 파일을 삭제한다.', '', '', 2, 0),
(515, '', '서대영', '', '2009-03-17 17:38:13', 'Weblogic', '스타트 시 Heap 메모리 설정', '/bea/user_projects/domains/cisskp> vi startWebLogic.sh\r\n\r\nMEM_ARGS="-DCISSKP6001 -ms512m -mx512m -XX:MaxPermSize=256m -Dweblogic.rjvm.ponsetimeout=5000 -Dweblogic.servlet.useExtendedSessionFormat=true"\r\n\r\n512 부분을 바꿔준다.', '', '', 4, 0),
(516, '', '서대영', '', '2009-03-30 11:15:13', 'Web', '파피콘(인터넷 즐겨찾기 아이콘)', '<link rel="shortcut icon" href="/EP/image/AcubeIcon.ico">\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://anzbanner.tistory.com/24', 'http://anzbanner.tistory.com/24', '', 1, 0),
(517, '', '서대영', '', '2009-03-31 10:54:52', 'Unix', 'top 명령어', 'CPU별 사용량 보기\r\n전체 메모리 사용량 보기', '', '', 7, 0),
(518, '', '서대영', '', '2009-04-15 19:21:49', 'SQL', '[DDL] ALTER', '-- 칼럼 추가\r\nALTER TABLE 테이블명\r\nADD(\r\n  칼럼명 타입(사이즈),\r\n  칼럼명 타입(사이즈)\r\n)\r\n\r\n-- 칼럼 삭제\r\nALTER TABLE 테이블명\r\nDROP COLUMN 칼럼명\r\n\r\n-- 칼럼 수정\r\nALTER TABLE 테이블명\r\nMODIFY (\r\n  칼럼명 타입(사이즈),\r\n  칼럼명 타입(사이즈)\r\n)\r\n\r\n-- 제약 추가\r\nALTER TABLE 테이블 명\r\nADD CONSTRAINT 제약명 제약 [칼럼명]\r\n\r\n-- 제약 삭제\r\nALTER TABLE 테이블명\r\nDROP CONSTRAINT 제약명 \r\n\r\n-- 제약 활성\r\nALTER TABLE 테이블명\r\nENABLE CONSTRAINT 제약명 [CASCADE]\r\n\r\n-- 제약 불능\r\nALTER TABLE 테이블명\r\nDISABLE CONSTRAINT 제약명 [CASCADE]\r\n\r\n※ CASCADE는 해당 제약조건에 종속되어 있는 다른 테이블의 제약조건도 모두\r\nDISABLE하라는 의미로 만약 PLAYER_ID_PK가 다른 테이블에서 외부 키로 적용되고\r\n있다면 해당 외부 키도 DISABLE 됩니다.\r\n', '', '', 15, 0),
(520, '', '서대영', '', '2009-04-16 13:57:40', 'Network', 'hosts 파일 : DNS보다 우선으로 IP 결정', 'C:/WINDOWS/system32/drivers/etc/hosts\r\n\r\n\r\n\r\n\r\n\r\n\r\n# Copyright (c) 1993-1999 Microsoft Corp.\r\n#\r\n# This is a sample HOSTS file used by Microsoft TCP/IP for Windows.\r\n#\r\n# This file contains the mappings of IP addresses to host names. Each\r\n# entry should be kept on an individual line. The IP address should\r\n# be placed in the first column followed by the corresponding host name.\r\n# The IP address and the host name should be separated by at least one\r\n# space.\r\n#\r\n# Additionally, comments (such as these) may be inserted on individual\r\n# lines or following the machine name denoted by a ''#'' symbol.\r\n#\r\n# For example:\r\n#\r\n#      102.54.94.97     rhino.acme.com          # source server\r\n#       38.25.63.10     x.acme.com              # x client host\r\n\r\n127.0.0.1       localhost\r\n165.213.254.59	cis.samsungportal.com\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nhosts 파일이란?\r\nhosts 파일은 DNS 서버를 사용하기 이전에 Windows에서 주로 사용하던 파일로 서버 주소를 적어 놓은 텍스트 파일입니다. 인터넷 연결이 현재는 대부분 DNS 서버를 통해 이루어지고 있지만, Windows에서는 hosts 파일을 이용하여 IP 주소와 호스트 이름을 매핑시켜 줍니다. 텍스트 형태의 파일이므로 일반 사용자들이 해당 파일을 열어 쉽게 수정할 수 있으며, 이러한 점을 악용하여 악성코드가 hosts 파일을 직접 변경하여 사용자 모르게 피해를 입히는 사례가 많습니다.\r\n\r\nhosts 파일은 Windows뿐만 아니라 유닉스, 리눅스와 같은 다른 운영체제에서도 동일하게 사용하고 있습니다. Windows에서는 hosts 파일이 있으면 DNS 서버 보다 먼저 해당 파일을 참조하여 원하는 호스트명을 찾습니다. 따라서, 악성코드가 이런 헛점을 이용하여 사용자 모르게 악성 호스트명을 입력하여 두면, hosts 파일에 해당 주소에 매핑되는 IP 주소가 있으므로 DNS를 참조하지 않고 바로 접속하게 됩니다.\r\n\r\nAhnLab Online Security는 hosts 파일 변조 확인 기능을 통해 사용자 모르게 악성코드가 변경했을지도 모르는 hosts 파일을 사용자가 쉽게 변경 전 파일과 변경 이후의 내용을 한눈에 비교할 수 있도록 하며, 새로 변경된 내용이 사용자가 직접 추가했거나 안전하다고 판단되면 새로 변경된 hosts 파일을 그대로 사용하셔도 됩니다. 그러나, 변경된 내용이 사용자가 알 수 없거나 악성코드로 분류된 IP 주소로 판단되는 경우 복원을 통해 이전의 hosts 파일을 사용할 수 있도록 제공하고 있습니다.\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/jjh5400823?Redirect=Log&logNo=10030292176', 'http://blog.naver.com/jjh5400823?Redirect=Log&logNo=10030292176', '', 12, 0),
(521, '', '서대영', '', '2009-04-17 22:40:44', 'SQL', 'SQL 수행단계', '\r\n-\r\n 발췌 대상 테이블을 참조한다. (FROM)\r\n \r\n-\r\n 발췌 대상 데이터가 아닌 것은 제거한다. (WHERE)\r\n \r\n-\r\n 행들을 그룹화 합니다. (GROUP BY) → GROUPPING\r\n \r\n-\r\n 그룹함수의 값의 조건에 맞는 것만을 출력한다.(HAVING)\r\n \r\n-\r\n 데이터 값을 계산한다. (SELECT)\r\n \r\n-\r\n 데이터를 특정 칼럼을 기준으로 정렬한다. (ORDER BY)\r\n \r\n \r\n', '', '', 1, 0),
(522, '', '서대영', '', '2009-04-17 22:42:07', 'SQL', 'GROUP BY', 'GROUP BY절은 그룹별 통계정보를 제공한다.\r\n \r\n-\r\n GROUP BY 절을 사용하면 데이터베이스가 GROUP BY에 명시된 칼럼(Column)의 \r\n순서대로 오름차순 정렬을 실시한다.\r\n \r\n-\r\n GROUP BY절에서는 ALIAS명을 사용할 수 없다.\r\n \r\n-\r\n 그룹함수는 WHERE절에는 올 수 없다. \r\n \r\n-\r\n HAVING절에는 제한조건을 두어 그룹에 대하여 조건을 만족하는 내용만 출력된다.\r\n \r\n-\r\n HAVING절은 일반적으로 GROUP BY절 뒤에 위치한다.\r\n \r\nSELECT [ DISTINCT ] 칼럼명 [ ALIAS명 ]\r\nFROM 테이블명\r\n[ WHERE 조건식 ]\r\n[ GROUP BY 칼럼(Column)이나 표현식 ]\r\n[ HAVING 그룹조건식 ] ;\r\n \r\n \r\n \r\n', '', '', 6, 0),
(523, '', '서대영', '', '2009-04-17 22:42:42', 'SQL', 'ORDER BY', 'ORDER BY절은 조회된 자료를 정리하는 것이다. \r\n \r\n-\r\n ORDER BY절은 SQL문의 제일 마지막에 위치한다.\r\n \r\n-\r\n ORDER BY절에 칼럼(Column)명 대신에 위에서 사용한 ALIAS명도 사용 가능하다.\r\n \r\n-\r\n 정렬방식을 지정하지 않으면 기본적으로 오름차순이 적용된다.\r\n \r\n-\r\n NULL값은 오름차순으로 정렬했을 경우에는 가장 마지막에, \r\n내림차순으로 정렬했을 경우에는 맨 앞에 온다.\r\n \r\nSELECT [ DISTINCT ] 칼럼명 [ ALIAS명 ]\r\nFROM 테이블명\r\n[ WHERE 조건식 ]\r\n[ GROUP BY 칼럼(Column)이나 표현식 \r\n[ HAVING 그룹조건식 ] ]\r\n[ ORDER BY 칼럼(Column)이나 표현식 [ ASC 또는 DESC ] ] ;\r\n \r\n \r\n \r\n', '', '', 1, 0),
(524, '', '서대영', '', '2009-04-21 12:56:24', 'IT', 'RIA (Rich Internet Application)', 'http://www.neovis.net/blog_post_44.aspx\r\n\r\n\r\nhttp://blog.naver.com/etwas0227/60019772564\r\n\r\n\r\n\r\nhttp://blog.naver.com/etwas0227?Redirect=Log&logNo=60026221205', '', '', 1, 0),
(525, '', '서대영', '', '2009-04-22 13:31:31', 'Unix', 'ls 디렉토리 및 파일 정보 출력', '파일권한/하드링크번호/사용자/그룹/용량/월/일/시간/파일명\r\n\r\n-a : 숨긴 파일\r\n-l : 세부 정보\r\n-t : 수정시간 정렬\r\n\r\n', NULL, '', 14, 0),
(526, '', '서대영', '', '2009-04-22 14:06:55', 'Network', 'nslookup IP주소 알아내기', '$ nslookup 도메인네임 \r\n$ host 도메인네임\r\n\r\nDNS서버에 맵핑정보를알아냄\r\n\r\n주의. hosts 파일에 등록한 맵핑은 반영 안됨\r\nhosts 파일에 등록한 맵핑은 ping 을 통해 알아내야 함', NULL, '', 10, 0),
(527, '', '서대영', '', '2009-04-22 15:13:27', 'Oracle', '오라클 디스크 관리 정책', '물리적 디스크사용량은 DC에서 관리하는 팩터중에 하납니다.(거의 기본항목이죠)\r\n\r\n\r\n1. : DB의 테이블스페이스가 자동으로 extend 되어있는경우..\r\n디비공간이 모자라면 알아서 dbf파일사이즈가 커집니다.\r\n대신 적절한 조치가 없으면 디스크가 Full이 나겠죠..끊임없이 느니까..\r\n\r\n\r\n2 : DBA가 DB를 디테일하게 관리하는경우에는 자동으로 extend 되지 않게 되어있습니다. 이 경우는 물리적으로 디스크가 풀이나지는 않겠지만 dbf 파일이 자동으로 늘지 않으므로 레코드가 막 늘면 어느순간 저장이 안되겠&#52012;..ㅡㅡ;\r\n\r\n\r\n\r\n\r\n\r\n1. 물리적 디스크풀을 DC 하드웨어 담당자가 인지하고  어느영역인지 확인해서 날리겠죠.\r\n2. 지금은 그 영역이 오라클쪽이니까 DBA한테 같이 가는게 맞을겁니다.\r\n3. DBA가 그 영역에서 템프나 로그가 문제라면 지워서 해결할것이고, 데이터 영역이라고 판단하면 디스크확장을 문의할겁니다.', '', '', 0, 0),
(536, '', '서대영', '', '2009-04-30 09:57:21', 'Unix', 'find - 파일 찾기', '$ find 경로명 옵션 : 사용자가 지정한 특정 범위에 해당하는 모든 파일을 검색\r\n\r\n| grep 검색어\r\n-name 파일명\r\n-type 파일형 (d : 디렉토리, e : 연결파일)\r\n-user 로그인명\r\n-exec 명령어 {} ;\r\n-atime 수 : 24시간 중 지정한 시간에 접근된 \r\n-mtime 수 : 24시간 중 지정한 시간에에 변경된\r\n\r\n$ find / -name test.txt\r\n: 루트 디렉토리부터 test.txt 파일 찾기\r\n$ find . -name test.txt\r\n: 현재 디렉토리부터 test.txt 파일 찾기 \r\n$ find . -name *.jsp\r\n: 모든 jsp 파일 찾기\r\n$ find . -type d\r\n: 디렉토리만 찾기\r\n$ find . -mtime 0\r\n: 24시간 동안 변경된 파일 찾기\r\n$ find . -name ''*.jsp'' -exec ls -l {} :\r\n: 모든 jsp 파일의 정보 출력\r\n\r\n$ find / -name test1.c &#8211;print\r\n: 루트 디렉토리부터 검색하여 검색된 파일을 한 행에 하나씩 표준 출력\r\n$ find . -name test1.c &#8211;print \r\n: 현재의 작업 디렉토리에서 검색 \r\n$ find / -size +1000 &#8211;print \r\n: 루트에서 크기가 1000 블록 이상인 파일 검색 \r\n$ find . -size -1000 &#8211;print\r\n: 현 디렉토리에서 크기가 1000 블록 이하인 파일 검색 \r\n$ find . -mtime +10 &#8211;print \r\n: 10일 이전에 수정된 파일 검색 \r\n$ find . -mtime -10 -exec rm {} W;\r\n: 10일 이내에 수정한 파일을 검색하여 모두 지운다\r\n$ find ./ -name "*.jsp" -print | wc -l\r\n: jsp 파일 총 개수 출력\r\n$ find . -name ''DBOM*.BOM*'' -exec grep -ln DMR57 {} W;\r\n: 현재 디렉토리 하위에 있는 자바 파일에서 svcCode 라는 단어를 찾아서, 해당 파일의 이름과 단어가 있는 라인을 출력한다.\r\n(마지막에 세미콜론은 쉘명령의 끝을 알리고, 세미콜론이 특수문자이기 때문에 앞에 역슬래시가 붙는다.)\r\n{}는 find 명령이 찾은 파일이름이 들어가는 곳을 지정하는 것이며,\r\n;는 -exec 옵션의 끝임을 알리는 겁니다. ', '', '', 71, 0),
(528, '', '서대영', '', '2009-04-23 15:08:06', 'SQL', '연산자 우선순위', 'AND > OR\r\n\r\nAND를 X, OR을 +로 보면 됨.\r\n우선순위도 AND가 높고 따라서 분배 법칙도 성립\r\n\r\nWHERE (team_id =''K02'' OR team_id =''K07'') AND position =''MF''\r\nWHERE team_id =''K02'' AND position = ''MF'' OR team_id =''K07'' AND position =''MF''\r\n \r\n', '', '', 2, 0),
(529, '', '서대영', '', '2009-04-26 12:11:27', 'SQL', '문자형 함수', '□ 대소문자 전환함수 \r\n - LOWER(문자열) : 문자열의 알파벳 문자를 소문자로 바꾸어 준다.  \r\n - UPPER(문자열) : 문자열의 알파벳 문자를 대문자로 바꾸어 준다.  \r\n - INITCAP(문자열) : 문자열에서 각 단어의 첫 글자를 대문자로, 모든 다른 문자는 소문자로 만들어 준다.  \r\n\r\n□ 문자 조작함수  \r\n - CONCAT(문자열1, 문자열2) : 문자열1과 문자열2을 연결합니다. 연결연산자(||)와 동일하다.  \r\n - SUBSTR(문자열, m[, n ] ) : 문자열 중 m위치에서 n개의 문자길이에 해당하는 문자를 돌려준다. n이 생략되면 마지막 문자까지이다.  \r\n - LENGTH(문자열) : 문자열의 개수를 값으로 돌려준다.  \r\n - LTRIM(문자열 [, 지정문자] ) : 문자열의 첫 문자부터 확인해서 지정문자가 나타나는 동안 해당문자를 제거한다.(지정문자가 생략되면 공백\r\n값이 디폴트)  \r\n - RTRIM(문자열 [, 지정문자 ] ) : 문자열의 마지막 문자부터 확인해서 지정문자가 나타나는 동안 해당문자를 제거한다.(지정문자가 생략되면 공백\r\n값이 디폴트)  \r\n - TRIM( [leading | trailing | both ] 지정문자 FROM 문자열 ) : 문자열에서 머리말, 꼬리말, 또는 양쪽에있는 지정문자를 제거한다. ( leading | trailing | both가 생략되면 both값이 디폴트)  \r\n - LPAD(문자열1, n [, 문자열2 ] ) : 문자열1의 왼쪽에 문자열2를 덧붙여서 전체가 n개의 문자가 되도록 한다. 문자열2가 생략되면 공백으로 채워진다. \r\n - RPAD(문자열1, n [, 문자열2 ] )  문자열1의 오른쪽에 문자열2를 덧붙여서 전체가 n개의 문자가 되도록 한다. 문자열2가 생략되면 공백으로 채워진다.  \r\n - INSTR(문자열1, 문자열2[, n[, m] ] ) : 문자열1에서 n번째 문자부터 문자열2가\r\nm번째 나타나는 위치를 돌려준다. n,m이 생략되면 디폴트 값은 1이다.  \r\n - TRANSLATE(문자열1,문자열2,문자열3) : 문자열1 중에서 문자열2를 문자열3로 \r\n교체한다.  \r\n - REPLACE(문자열1,문자열2[,문자열3]) : 문자열1에서 문자열2를 찾아서\r\n문자열3로 교체한다. 문자열3가 생략되면 문자열2가 제거된다.', '', '', 8, 0),
(530, '', '서대영', '', '2009-04-26 12:15:01', 'SQL', '숫자형 함수', 'ABS(숫자) \r\n 숫자의 절대값을 돌려준다.  \r\nMOD(숫자1, 숫자2) 숫자1을 숫자2로 나누어 나머지 값을 돌려준다. \r\nSIGN(숫자)  숫자가 양수인지, 음수인지 0 인지를 구별한다.  \r\nCEIL(숫자)  숫자보다 크거나 같은 최소정수를 돌려준다.  \r\nFLOOR(숫자)  숫자보다 작거나 같은 최대정수를 돌려준다. \r\nROUND(숫자 [, m ] ) 숫자를 소수점 m자리에서 반올림하여 돌려준다.\r\nm이 생략되면 디폴트 값은 0 이다.  \r\nTRUNC(숫자 [, m] ) 숫자를 소수 m자리에서 잘라서 버린다.\r\nm이 생략되면 디폴트 값은 0 이다.  \r\nSIN, COS, TAN,...  숫자의 삼각함수 값을 돌려준다. \r\n', '', '', 0, 0),
(531, '', '서대영', '', '2009-04-26 12:16:21', 'SQL', '날짜형 함수', 'SYSDATE  현재 날짜와 시각  \r\nADD_MONTHS(날짜, n)  날짜에 n개월을 더 한 날짜(n은 정수이어야 함) \r\nMONTHS_BETWEEN(날짜1, 날짜2) 날짜1과 날짜2 사이의 월수를 돌려주며 양수,\r\n음수도 가능하다. \r\nNEXT_DAY(날짜,''요일'')  날짜 다음의 해당 주(''요일'')의 다음 날짜를 \r\n돌려준다.\r\n요일은 날 또는 문자 스트링을 나타내는 숫자이다.  \r\nLAST_DAY(날짜)  현재 날짜를 포함하고 있는 달의 마지막 날을\r\n돌려 준다.  \r\nROUND(날짜 [, ''FORMAT''] )  어떤 FORMAT이 생략되면 자정까지 시간설정과 \r\n함께 날짜를 돌려준다.\r\n다른 시간을 갖고 있는 날짜 비교시 사용된다. \r\nTRUNC(날짜 [, ''FORMAT''] )  어떤 FORMAT이 생략되면 날짜에 포함되어 있는\r\n달의 번째 날을 돌려준다.\r\n날짜의 시간부분을 제거할 때 사용된다. \r\n', '', '', 6, 0),
(532, '', '서대영', '', '2009-04-26 12:18:26', 'SQL', '변환형 함수', 'TO_CHAR(숫자 | 날짜 [, FORMAT] )  숫자나 날짜를 주어진 FORMAT 형태대로\r\n문자열 타입으로 변환한다. \r\nTO_NUMBER(문자열)  문자열을 숫자로 변환한다.  \r\nTO_DATE(문자열 [, FORMAT ] )  문자열을 주어진 FORMAT 형태대로 날짜\r\n타입으로 변환한다. ', '', '', 3, 0),
(533, '', '서대영', '', '2009-04-26 12:29:08', 'SQL', '포멧', '□ 숫자 포멧\r\n9 숫자 위치를 나타냅니다. \r\n''9''의 개수가 숫자를 출력하게 될\r\n자릿수를 의미합니다.  ''9999999''  1234  \r\n0 0을 출력합니다. ''0999999''  0001234  \r\n$ 달러 기호  ''$9999999'' $1234  \r\nL 지역적으로 사용되는 통화 기호를\r\n출력한다.  ''L9999999''  \\1234  \r\n. 표시한 포맷 위치에 소수점으로 출력한다. ''9999999.99'' 1234.00  \r\n, 표시한 포맷 위치에 콤마(Comma)를\r\n출력한다.  ''9,999,999'' 1,234  \r\nMI 숫자가 음수이면 숫자 오른쪽에 ''-''를\r\n표기한다.  ''9999999MI''  1234-  \r\nS 숫자 앞에 ''+''(양수), ''-''(음수)의 부호를\r\n출력한다. ''9999999S''  +1234  \r\nPR 숫자가 음수이면 좌우에 ''<>''를 붙여서\r\n출력한다.  ''9999999PR''  <1234>  \r\nG 표시한 포맷 위치에 천 단위 문자를 \r\n출력한다.  ''9G999G999'' 1,234  \r\nEEEE 과학 연산 표기법으로 출력한다. ''99.999EEEE''  1.234E+03  \r\nV 숫자에 10n을 곱한다.  ''9999V99''  123400  \r\nB 숫자 앞에 0 대신에 공백을 붙여서\r\n출력한다.  ''B9999999.99'' 1234.00  \r\n\r\nTH\r\nSP\r\nSPTH  숫자에 대한 서수적인 표현한다.\r\n숫자에 대한 영어식 수로 표현한다.\r\n숫자에 대한 영어식 서수로 표현한다.  10TH, 03RD\r\nTEN, THREE\r\nTENTH, THIRD \r\n\r\n□ 날짜 포멧\r\nSCC, CC  세기(Century)를 출력하며 ''S''는\r\n기원전( BC)일자 앞에 ''-''를 표기한다.  21 \r\nYYYY, SYYYY  년도(Year)를 완전하게 표기한다.\r\n''S''는 같은 의미.  2002 \r\nYYY, YY, Y 년도의 마지막 3자리, 2자리, 1자리를\r\n출력한다. 00, 02, 2 \r\nSYEAR, YEAR 년도의 영문 발음된 표기로 출력한다.  TWO THOUSAND TWO \r\nBC 또는 AD BC(기원전), AD(서기)와 함께 년도를\r\n출력한다. 기원전 1999 또는 BC1999\r\n서기 2002 또는 AD2002  \r\nRR 다음 세기(Century)의 년도 마지막 \r\n두자리 출력.  02 \r\nQ 대상 월이 속한 해당 분기(Quarter)를 \r\n출력한다.  4 \r\nMM 월에 대한 두 자리 숫자(01~12)로\r\n출력한다. 12 \r\nMONTH  월에 대한 전체 영문 표기명으로\r\n출력한다. OCTOBER  \r\nMON 월에 대한 영문표기 중 앞의\r\n세 자리를 출력한다.  OCT  \r\nRM 월에 대한 로마식 표기로 출력한다.  X \r\nWW\r\nW 1년 중 몇 째 주에 속하는지, 월에서\r\n몇 번째 주인지를 표기한다. 40 → 2002년 중 40번째 주\r\n1 → 10월 중 첫째 주  \r\nDDD\r\nDD\r\nD 년의 일수\r\n월의 일수\r\n주의 일수를 출력한다.  276 →2002년 중 276일 째\r\n03 →2002년 10월 중 2일째\r\n5 →요일 중 다섯 번째인 목요일  \r\nDAY  요일에 대한 전체 영문 표기명으로\r\n출력한다.  THURSDAY  \r\nDY  요일에 대한 3자리 약명으로 출력한다.  THU \r\nJ  Julian Day인 BC 4712년 12월 \r\n31일부터의 날수.  2452551  \r\n\r\n□ 시간 포멧\r\nAM(A.M.), PM(P.M.) 오전/오후 시각에 대해서 출력한다. AM(오전) 또는 PM(오후) \r\nHH, HH12\r\nHH24  하루 중 시간 또는 시간(1~12)\r\n시간(0~23)   \r\nMI  분(Minutes)를 숫자로 출력한다.\r\n(0~59)   \r\nSS 초(Seconds)를 숫자로 출력한다.\r\n(0~59)   \r\nSSSSS 자정을 기준으로 한 초를 출력한다.\r\n(0~86399)  \r\n\r\n', '', '', 7, 0),
(534, '', '서대영', '', '2009-04-26 12:31:28', 'SQL', '일반형 함수', 'NVL(표현식1, 표현식2) \r\n 표현식1의 결과값이 NULL이면 표현식2의 값을\r\n출력한다. 단, 표현식1과 표현식2의 결과의\r\n데이터 타입이 같아야 한다.  \r\nDECODE(표현식, 기준1, 값1[,\r\n기준값2, 값2, ... , 디폴트값)  표현식의 값이 기준1이면 값1을 출력하고\r\n기준2이면 값2를 출력한다. 그리고 기준값이\r\n없으면 디폴트 값을 출력한다.  \r\nGREATEST(표현식1, 표현식2,...)  표현식의 값들 중에서 가장 큰 값을 출력한다.  \r\nLEAST(표현식1, 표현식2,...)  표현식의 값들 중에서 가장 작은 값을 출력한다. \r\nUSER  현재 DB를 사용하는 DB User 명을 출력한다.  \r\nUID  현재 DB를 사용하는 DB User의 내부 식별번호를\r\n출력한다.  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nSQL> SELECT ename 사원명, sal 월급, comm 커미션, \r\n2 (sal * 12) + comm A, (sal * 12) + nvl(comm,0) B \r\n3 FROM emp;\r\n\r\nSQL> SELECT player_name 선수명, DECODE(position, ''TM'',''감독'',''TC'',''코치'',\r\n''TD'',''닥터'',\r\n2 ''MF'',''미드필더'',''FW'',''포워드'',''DF'',''디펜더'',''GK'',''골키퍼'',''없음'') 포지션\r\n3 FROM player_t\r\n4 ORDER BY 선수명;\r\n', '', '', 13, 0),
(535, '', '서대영', '', '2009-04-26 13:21:04', 'SQL', '그룹 함수 (다중행 함수)', 'COUNT(*) NULL 값을 포함한 행의 수를 출력한다. \r\nCOUNT(표현식)  표현식의 값이 NULL 값인 것을 제외한 행의\r\n수를 출력한다. \r\nSUM([DISTINCT | ALL] 표현식) 표현식의 NULL 값을 제외한 합계를 출력한다.  \r\nAVG([DISTINCT | ALL] 표현식) 표현식의 NULL 값을 제외한 평균을 출력한다.  \r\nMAX([DISTINCT | ALL] 표현식) 표현식의 최대값을 출력한다.\r\n(문자,날짜 데이터 타입도 사용가능)  \r\nMIN([DISTINCT | ALL] 표현식) 표현식의 최소값을 출력한다.\r\n(문자,날짜 데이터 타입도 사용가능)  \r\nSTDDEV([DISTINCT | ALL] 표현식) 표현식의 표준편차를 출력한다.  \r\nVARIAN([DISTINCT | ALL] 표현식)  표현식의 분산을 출력한다.  \r\n', '', '', 5, 0),
(537, '', '서대영', '', '2009-05-03 14:10:32', 'IT', '포멧 전 체크', '드라이버\r\n즐겨찾기\r\n인증서\r\nFTP\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.paran.com/4647/23041795', 'http://blog.paran.com/4647/23041795', '', 4, 0),
(538, '', '서대영', '', '2009-05-08 09:11:37', 'Oracle', '10g Client 설치 후 원격 DB 접속', '10g Client가 설치된 폴더 내에 network/admin/tnsnames.ora 파일을 추가하면 원격 DB에 접속 가능하다.\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/eohyun?Redirect=Log&logNo=110024943074', 'http://blog.naver.com/eohyun?Redirect=Log&logNo=110024943074', '', 4, 0),
(762, '', '서대영', '', '2010-02-19 22:51:55', 'Network', 'ipconfig', 'ipconfig\r\n장비의 IP 세팅 정보 출력\r\n\r\n\r\nipconfig/? 하면 여러 옵션들이 나옴\r\n\r\n* IP 초기화 후 재할당 방법\r\n\r\nipconfig/release\r\nipconfig/renew\r\n\r\n[ DNS 캐쉬 관련 ]\r\nipconfig/displaydns : DNS 캐쉬 보기\r\nipconfig/flushdns : DNS 캐쉬 삭제', '', '', 8, 0),
(539, '', '서대영', '', '2009-05-30 17:48:23', 'Java', 'JFrame 기본', '// GUI 프로그래밍 시작 (main함수 내에 존재해야...)\r\nJFrame frame = new JFrame();\r\n\r\n// 바로 JFrame 위에 widgets을 추가할 수 없음 (content pane이 필요)\r\nframe.getContentPane().add(button);\r\n\r\n// 실제로 화면에 보이게 하려면 프레임 크기와 보이기 속성 지정해야함\r\nframe.setSize(300, 300);\r\nframe.setVisible(true);', '', '', 0, 0),
(540, '', '서대영', '', '2009-06-04 15:01:10', 'Oracle', '오라클 날짜 포멧', '-- 09/06/01 00:00:00\r\nSELECT TO_CHAR(TO_DATE(''20090601'',''YYYYMMDD''), ''YY/MM/DD HH24:MI:SS'')\r\nFROM dual\r\n\r\n-- 09/06/01 오전 12:00:00\r\nSELECT TO_CHAR(TO_DATE(''20090601'',''YYYYMMDD''), ''YY/MM/DD AM HH:MI:SS'')\r\nFROM dual', '', '', 11, 0),
(541, '', '서대영', '', '2009-06-08 17:36:22', 'Java', 'javac 옵션 정리', '□ 문법\r\n\r\njavac <options> <souce files>\r\n\r\nex)\r\n\r\njavac Hello.java Greeting.java\r\n파일 두개 컴파일\r\n\r\njavac *.java\r\n모든 파일 컴파일\r\n\r\n\r\n\r\n□ 옵션\r\n\r\n[1] -cp <path> 또는 -classpath <path> : 참조할 클래스들의 경로\r\n\r\nex)\r\n\r\n윈도우에서는 ; 로 여러개의 클래스패스를 구분\r\njavac -cp .;C:JavaEngclasses;C;JavaKorclasses C:JavaHello.java\r\n\r\n유닉스에서는 : 로 여러개의 클래스패스를 구분\r\njavac -cp .:$HOME/ep/acube_classes/classes/:./lib/ojdbc14.zip:./classes/ ./src/*.java\r\n\r\n\r\n[2] -d <path> : 클래스 파일일 생성할 루트 디렉토리\r\n\r\n이 옵션이 없으면, 소스파일이 위치한 디렉터리에 클래스 파일을 생성\r\n해당 디렉토리가 존재하지 않으면 "The system cannot find the path specified" 에러 출력\r\n\r\nex)\r\n\r\n윈도우\r\njavac -d C:JavaClassfiles C:JavaHello.java 입니다.\r\n\r\n유닉스\r\njavac -d ./classes ./src/*.java\r\n\r\n[3] -deprecation : 권장되지 않는 API 위치 출력\r\n\r\nex)\r\n\r\nC:Java> javac World.java\r\nNote: World.java uses a deprecated API. Recompile with "-deprecation" for details\r\n.\r\n1 warning\r\n\r\n\r\n\r\n\r\n--------------- compile.sh --------------------------\r\n\r\njavac -d /acube/measkp/cms_collector/classes -classpath /acube/measkp/cms_collector/lib/log4j-1.2.8.jar:/acube/measkp/cms_collector/\r\nlib/classes12.zip /acube/measkp/cms_collector/src/*.java\r\n~\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n-----------------------------------------------------------\r\n  -g                        Generate all debugging info\r\n  -g:none                   Generate no debugging info\r\n  -g:{lines,vars,source}    Generate only some debugging info\r\n  -nowarn                   Generate no warnings\r\n  -verbose                  Output messages about what the compiler is doing\r\n  -deprecation              Output source locations where deprecated APIs are used\r\n  -classpath <path>         Specify where to find user class files\r\n  -sourcepath <path>        Specify where to find input source files\r\n  -bootclasspath <path>     Override location of bootstrap class files\r\n  -extdirs <dirs>           Override location of installed extensions\r\n  -d <directory>            Specify where to place generated class files\r\n  -encoding <encoding>      Specify character encoding used by source files\r\n  -source <release>         Provide source compatibility with specified release\r\n  -target <release>         Generate class files for specific VM version\r\n  -help                     Print a synopsis of standard options\r\n  -file <filename>          Specify a file containing a list of Java source files\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.daum.net/turnnig-pointer/6936921', 'http://blog.daum.net/turnnig-pointer/6936921', '', 20, 0),
(542, '', '서대영', '', '2009-06-09 11:01:20', 'iPlanet', '중요 설정 파일', '우선 서비스 구성을 위해 SJS Web Server의 관련 Configuration Files는 4가지 입니다.\r\n1) server.xml : 웹서버의 구성정보 (웹콘솔로 100% 세팅가능)\r\n2) magnus.conf : 웹서버의 초기화 정보 및 튜닝 관련 설정\r\n3) obj.conf : request 처리루틴\r\n4) mime.types : contents MIME Type에 대한 정의\r\n', '', '', 19, 0),
(543, '', '서대영', '', '2009-06-09 11:03:51', 'iPlanet', '텔넷에서 설정파일을 수동으로 바꾼 후 웹콘솔에 적용하는 방법', '1. 설정 파일을 교체한다.\r\n\r\n2. touch 로 수정일을 최신으로.\r\n\r\n3. WEB콘솔화면 우측상단 [Apply] 버튼 클릭 후, [Load Configuration Files] 버튼 클릭', '', '', 3, 0),
(544, '', '서대영', '', '2009-06-09 11:07:22', 'iPlanet', '설정 1- magnus.conf', '콘솔에서 만들어지므로 하기 내용은 바뀌지 않도록 주의한다.\r\n(그냥 복사하면 다른 인스턴스랑 동시에 꺼지고 올라감)\r\nServerName chinagspn1\r\nServerID https-gspn-tobe\r\nPidLog /sunweb/sun6.1/https-gspn-tobe/logs/pid\r\nUser webadm\r\nTempDir /tmp/https-gspn-tobe-3d4cb7d9\r\n\r\n# 튜닝할 것\r\n############################\r\nRqThrottle 512 -----> 동접자 (내부 쓰레드 개수)\r\nMaxProcs 2 -----> 프로세스 수 \r\n(즉 동접자가 512 * 2 = 1024 / 메모리 사용률 2배)\r\nKeepAliveTimeout 15 -----> Client 와 HTTP 연결 유지 시간 (소켓 재 사용시간)\r\nMaxKeepAliveConnections 8192 -----> KeepAliveTime에 대한 Max 큐 설정 값\r\n############################\r\n\r\n\r\n\r\n\r\n\r\n#ServerRoot /opt/iPlanet/https-asiaportal\r\nServerID https-asiaportal\r\nServerName asiaportal\r\nErrorLog /opt/iPlanet/https-asiaportal/logs/errors\r\nPidLog /opt/iPlanet/https-asiaportal/logs/pid\r\nUser root\r\nMtaHost localhost\r\nDNS off\r\nSecurity on\r\nClientLanguage en\r\nAdminLanguage en\r\nDefaultLanguage en\r\nMaxProcs 4\r\nRqThrottle 512\r\nStackSize 131072\r\nCGIWaitPid on\r\n\r\n# 템프데릭토리 (권한 체크할 것)\r\nTempDir /tmp/https-asiaportal-7990a0a0\r\n\r\nInit fn=load-types mime-types=mime.types\r\nInit fn="load-modules" shlib="/opt/iPlanet/bin/https/lib/libNSServletPlugin.sl" funcs="NSServletEarlyInit,NSServletLateInit,NSSe\r\nrvletNameTrans,NSServletService" shlib_flags="(global|now)"\r\nInit fn="NSServletEarlyInit" EarlyInit=yes\r\nInit fn="NSServletLateInit"  LateInit=yes\r\n\r\n# WAS와 연결해주는 라이브러리 파일 (버젼 체크할 것)\r\n#Init fn="load-modules" funcs="wl-proxy,wl-init" shlib="/acube/bea/weblogic81/server/lib/hpux11/libproxy.sl"\r\nInit fn="load-modules" funcs="wl-proxy,wl-init" shlib="/acube/bea/weblogic81/server/lib/hpux11/libproxy_61.sl"\r\nInit fn="wl-init"\r\nInit fn="flex-rotate-init" rotate-start="0000" rotate-interval="1440"\r\nInit fn="stats-init" profiling="on"\r\nInit fn="flex-init" access="$accesslog" format.access="%Ses->client.ip% - %Req->vars.auth-user% [%SYSDATE%] "%Req->reqpb.clf-re\r\nquest%" %Req->srvhdrs.clf-status% %Req->srvhdrs.content-length% "%Req->headers.referer%" "%Req->headers.user-agent%""', '', '', 19, 0),
(545, '', '서대영', '', '2009-06-09 11:08:03', 'iPlanet', '로그 확인', '웹콘솔의 Logs 탭을 보면\r\nAccess 로그, Error 로그 모두 확인 가능', '', '', 3, 0),
(546, '', '서대영', '', '2009-06-16 11:24:01', 'HTML', 'input 태그의 readyonly & disabled 옵션', '<input type="text" readonly name="StartDate">\r\n\r\n사용자가 입력은 못하지만 form 변수로 넘어감 (회색)  -> Gray out\r\n\r\n<input type="text" disabled name="StartDate">\r\n\r\n사용자가 입력도 못하고 form 변수로 넘어가지도 않음 (흰색)', '', '', 8, 0),
(547, '', '서대영', '', '2009-06-22 16:55:41', 'Java', 'Calendar 클래스를 이용해서 날짜 다루기', '// 영업 시간인지 확인	\r\nprivate boolean IsDuringBusinessHours() {\r\n		Calendar calendar = Calendar.getInstance();		\r\n		if (calendar.get(Calendar.DAY_OF_WEEK) >= Calendar.MONDAY \r\n				&& calendar.get(Calendar.DAY_OF_WEEK) <= Calendar.FRIDAY) {\r\n			if (calendar.get(Calendar.HOUR_OF_DAY) >= 9\r\n					&& calendar.get(Calendar.HOUR_OF_DAY) <= 17) {\r\n				return true;\r\n			}\r\n			\r\n		}\r\n		return false;\r\n	}\r\n-------------------------------------------------------\r\n\r\n\r\n\r\n@ 윤호현 책임꺼 (현재날짜 VS 변경날짜 + 90)\r\n\r\n//최종패스워드 변경날짜\r\n\r\nString s1 = UserProfileVO.getPASSWDUPDT();\r\n\r\nint s1_year = Integer.parseInt(s1.substring(0, 4));  \r\n\r\nint s1_month = Integer.parseInt(s1.substring(5, 7))-1;  \r\n\r\nint s1_day = Integer.parseInt(s1.substring(8, 10));\r\n\r\n \r\n\r\nCalendar calendar = Calendar.getInstance(); \r\n\r\ncalendar.set(calendar.YEAR, s1_year);  \r\n\r\ncalendar.set(calendar.MONTH, s1_month);  \r\n\r\ncalendar.set(calendar.DATE, s1_day); \r\n\r\n//패스워드 변경날짜 + 90일 적용\r\n\r\ncalendar.add(calendar.DATE,+90);\r\n\r\nDate target = calendar.getTime(); \r\n\r\nDateFormat df = new SimpleDateFormat("yyyyMMdd");\r\n\r\nString tg_strDate = df.format(target); \r\n\r\n \r\n\r\nSystem.out.println("tg_strDate=" + tg_strDate);\r\n\r\n \r\n\r\n//현재날짜 \r\n\r\nDate today = new Date(); \r\n\r\nString now_strDate = df.format(today); \r\n\r\nSystem.out.println("now_strDate=" + now_strDate);\r\n\r\n \r\n\r\n//값비교후 패스워드페이지 이동\r\n\r\nif(Integer.parseInt(now_strDate) > Integer.parseInt(tg_strDate))\r\n\r\n    {\r\n\r\n    strNextPage = Application.getValue("EPHOME") + "/user/jsp/UM_Pswd.jsp?goto=/" + Application.getValue("EPHOME") + "/login/login_forward.jsp";\r\n\r\n    }\r\n\r\n \r\n\r\n--------------------------------------------------------------------\r\n\r\n\r\n@ 하재천 과장꺼 (현재날짜 - 3달 VS 변경날짜)\r\n\r\n			/************************* 2009.06.22 ***********************/\r\n			GregorianCalendar cal = new GregorianCalendar();\r\n			SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMdd");\r\n			cal.add(Calendar.MONTH, -3); //before 3 month\r\n			String basis = formatter.format(cal.getTime());\r\n			String changed = "";\r\n			\r\n			if ("".equals(UserProfileVO.getPASSWDUPDT()))\r\n				strNextPage = Application.getValue("EPHOME") + "/user/jsp/UM_Pswd.jsp?goto=/" + Application.getValue("EPHOME") + "/login/login_forward.jsp";\r\n			else{\r\n				changed = UserProfileVO.getPASSWDUPDT().substring(0, 4) + UserProfileVO.getPASSWDUPDT().substring(5, 7) + UserProfileVO.getPASSWDUPDT().substring(8, 10);				\r\n				if (Integer.parseInt(basis) - Integer.parseInt(changed) > 0 )\r\n					strNextPage = Application.getValue("EPHOME") + "/user/jsp/UM_Pswd.jsp?goto=/" + Application.getValue("EPHOME") + "/login/login_forward.jsp";\r\n			}\r\n			/************************* 2009.06.22 ***********************/\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://cynicalking.tistory.com/49', 'http://cynicalking.tistory.com/49', '', 30, 0),
(548, '', '서대영', '', '2009-06-26 13:35:18', 'SQL', '문자열로 된 숫자를 정렬', 'SELECT * from ekmuser.tkmlinkcode\r\nORDER BY TO_NUMBER(code_id)\r\n', '', '', 1, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(549, '', '서대영', '', '2009-07-02 15:57:31', 'Oracle', 'tnsping은 되지만 sqlplus에 접속이 되지 않을때', 'oracle 10g에서  tnsping은 되지만 sqlplus에 접속이 되지 않을때..\r\n10g 사용중 클라이언트를 깔고 서버 접속시 분명히 tnsping은 되는데 sqlplus를 비롯한 application들이 접속이 안되는 거였다.\r\n\r\n에러 내용은 \r\nORA-12154: TNS:could not resolve ..\r\n\r\n \r\n\r\nORA-12154 . 원래 이 에러는 client 에서 DB 접근시 tnsnames.ora 에 db_alias 나 tnsnames.ora 설정이 잘못되어 있을 경우 나타난다. 따라서 대부분 이때 살펴보아야 할 network 설정 파일은 sqlnet.ora 와 tnsnames.ora 두개의 파일이다. \r\n\r\n\r\n일반적으로 tnsnames.ora의 설정부분을 잘못 설정한 경우 발생하기 때문에 확인하면 된다.(머 카피해서 이름이랑 아이피정도만 변경?ㅋ)\r\n\r\n하지만 설정부분에 큰 이상이 없는데 접속이 되지 않을때 두번째로 의심해볼만한 것은 sqlnet.ora 파일이다\r\n\r\n \r\n\r\nsqlnet.ora파일에서 해당IP의 접근을 허용해주면 된다.\r\n\r\n \r\n\r\n# tcp.invited_nodes=(DB로컬 아이피와 접속을 허용할 ip)\r\ntcp.invited_nodes=(192.168.3.211)\r\n# tcp.excluded_nodes=(접속을 차단할 ip)\r\n\r\n \r\n\r\n내 경우는 방화벽 때문이었기 때문에 alias를 읽지 못해 발생한 문제.. 방화벽에서 막혀 있는 부분을 허용해주면 된다.\r\n\r\n \r\n\r\nhttp://forums.oracle.com/forums/thread.jspa?threadID=267600&start=45&tstart=0\r\n\r\n에 의하면 환경설정변수를 읽지 못해 그럴수도 있다고 한다.\r\n이 경우는 시스템 환경변수에 ORACLE_HOME을 등록하고 값으로 Home패스를 등록하면 정상적으로 동작이 가능하다.\r\n\r\n(변경후 부팅이 필요함) 내컴퓨터 -> 속성 -> 시스템등록정보 -> 고급 -> 환경변수 -> 시스템 변수에 등록하면 된다.\r\n\r\n변수이름 : ORACLE_HOME\r\n변수 값   : E:oracleproduct10.2.0client_1\r\n( 실제 설치된 경로는 E:oracleproduct10.2.0client_1networkadminsqlnet.ora )\r\n\r\n경우에 따라서 재부팅이 필요할 수 있다.\r\n[출처] ERROR:ORA-12154:TNS:couldnot resolve service name|작성자 시반\r\n\r\n \r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/civan?Redirect=Log&logNo=150035586479', 'http://blog.naver.com/civan?Redirect=Log&logNo=150035586479', '', 12, 0),
(550, '', '서대영', '', '2009-07-02 19:34:43', 'Java', 'static initializer', '블럭( { 와 } ) 앞에 static modifier를 붙인 형태를 static initializer 블럭이라\r\n합니다. \r\n \r\n  보통 코드 블럭들은 class의 메소드 안에 작성하게 되어있잖아요.\r\n하지만 static initializer 블럭은 메소드 body를 벗어난 곳에 있습니다.\r\n그러면 도대체 실행이 언제 어떻게 일어나는지 궁금하지요? \r\n \r\n  메소드처럼 호출될 수 있는 형태가 아닌 이 static block은 class가 load되는 시점에\r\n한 번 실행되게 되어 있습니다.\r\n이것 또한 instance 생성과 관계 없는 것이지요.\r\n만약 static initializer 블럭이 class 안에 여러 곳 있다면 class가 load되는\r\n시점에서 나타나는 순서대로 차례로 실행 됩니다. \r\n \r\n  class Example {\r\n   static int  count = 0;\r\n   static {                               // 라인 1.\r\n       count += 10;                       // 라인 2.\r\n   }                                      // 라인 3.\r\n   public static void main(String arg[]) {\r\n       System.out.println(count);         // 라인 4.\r\n   }\r\n}\r\n \r\n \r\n \r\n  위의 코드에서 라인1부터 라인3 까지가 static initializer 블럭 입니다.\r\n이와 같은 경우 라인 4의 출력 결과는 10이 될 것 입니다.\r\n그 이유는 main 메소드의 실행에 앞서 이미 static initializer 블럭이 실행되었기\r\n때문입니다. 참고적으로 instance initializer 블럭에 대해 잠깐 살펴보면, \r\n \r\n  instance initializer 블럭은 static initializer 블럭처럼 class 내 메소드를\r\n벗어난 곳에 만들 수 있는데, 이 블럭은 new 연산자에 의해 instance가\r\n만들어지면서 실행되게 되어 있습니다.\r\n(나중에 살펴 보겠지만 instance initializer 블럭은 constructor에 앞서서\r\n처리되어집니다.) \r\n \r\n  class Example {\r\n   static int count = 0; {                  // 라인 1.\r\n      count += 10;                          // 라인 2.\r\n   }                                        // 라인 3.\r\n   public static void main(String arg[]) {\r\n      System.out.println(count);            // 라인 4.\r\n      Example  e = new Example();           // 라인 5.\r\n      System.out.println(count);            // 라인 6.\r\n   }\r\n}\r\n \r\n \r\n \r\n  위의 코드에서 라인 1부터 라인 3까지가 instance initializer 블럭 입니다.\r\n이와 같은 경우 라인 4의 출력 결과는 0 이 될 것이고 라인 5에서 Example object가\r\n생성되면 이때 instance initializer 블럭이 실행되므로, 라인 6의 출력 결과는\r\n10이 되는 것입니다. \r\n', '', '', 0, 0),
(551, '', '서대영', '', '2009-07-03 14:37:11', 'Java', 'Executable Jar 만들기', 'jar 압축 후, MANIFEST.MF 파일에\r\n\r\nMain-Class: 클래스명\r\n\r\n추가.\r\n\r\n그리고 알집으로 다시 압축.\r\n\r\n\r\n-------------------------------------------\r\n[ Maven ]\r\npom.xml 의 dependencies 엘리먼트 아래에 하기 추가\r\n\r\n  <build>\r\n        <plugins>\r\n			<plugin>\r\n                <groupId>org.apache.maven.plugins</groupId>\r\n                <artifactId>maven-jar-plugin</artifactId>\r\n                <version>2.3.1</version>\r\n                <configuration>\r\n                    <archive>\r\n                        <manifest>\r\n                            <mainClass>com.javapassion.examples.App</mainClass>\r\n                            <addClasspath>true</addClasspath>\r\n                        </manifest>\r\n                    </archive>\r\n                </configuration>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://maydaisy.egloos.com/886108', 'http://maydaisy.egloos.com/886108', '', 6, 0),
(552, '', '서대영', '', '2009-07-06 19:57:28', 'Java', 'finally 가 필요할 때', 'catch 문 다음에 finally 를 쓰지 않은 소스는\r\ntry 안 에서 catch 문에서 처리하지 않는 exception 이 발생할 경우,\r\n실행되지 않는다.\r\n\r\n\r\n--------------------------------------------------------------\r\n\r\n\r\ntry 블러과 catch 블럭에 동일하게 들어있는 문장 (ex. 파일 닫기, 커넥션 끊기)\r\n은 finally로 묶으면 같은 문장을 반복할 필요가 없음.\r\n\r\n\r\n\r\n------------------------------------------------------------\r\n\r\n\r\n다음 예문에 사용된 FileOpen, read(),CloseFile()은 설명을 위해 의미론적으로 \r\n사용한 함수라고 가정합니다. \r\n \r\n  try {\r\n   fd = FileOpen("test.txt");\r\n   fd.read();\r\n   CloseFile(fd);}catch (IOException  e) {\r\n   CloseFile(fd);\r\n   System.out.println(e.getMessage());\r\n   e.printStackTrace();\r\n}\r\n \r\n \r\n \r\n  위 예제의 흐름에 의하면 try 블럭에서 open된 파일은 IOException이 발생이 되었건\r\n안되었건 간에 반드시 close되었습니다.\r\n이러한 코드를 다음과 같이 finally 문을 사용한 코드로 변경할 수 있습니다. \r\n \r\n  try {\r\n   fd = FileOpen("test.txt");\r\n   fd.read();\r\n   }\r\ncatch (IOException  e) {\r\n   System.out.println(e.getMessage());\r\n   e.printStackTrace();\r\n}\r\nfinally CloseFile(fd);\r\n \r\n \r\n \r\n  위에서 살펴본 바와 같이 finally 문은 try, catch 구문에서 예외(exception)\r\n발생의 유,무와 관계없이 반드시 실행하고자 하는 코드를 처리하기 위해\r\n사용됩니다. (주의할 점은 finally 문 다음에 다시 catch 문을 쓸 수 없다는\r\n것입니다.) \r\n', '', '', 10, 0),
(553, '', '서대영', '', '2009-07-07 11:58:55', 'Java', '사용자 예외', '1. java.lang.Exception 클래스를 상속받아 커스터마이즈드 클래스를 선언한다.\r\n2. 이 Excettion을 발생시키고 싶은 메서드 안에서 이 Exception의 인스턴스를 생성해서 throw 한다.\r\n3. 이 메서드 내에서 처리할 거면 try - catch를 사용할 수도 있고 메서드 뒤에 throws를 사용해 caller 메서드로 예외를 던질 수도 있다.\r\n\r\n\r\n------------------------------------------------------------\r\n\r\nclass MyExcept extends Exception {\r\n   MyExcept() { // constructor\r\n      super("occured  MyExcept !!");\r\n   }\r\n}\r\nclass TestExcept {\r\n   public static void main(String arg[]) {\r\n      int res = 0;\r\n      TestExcept  mainobj = new TestExcept();\r\n      for (int i = 0; i < 4; i++) {\r\n         try {\r\n            res = mainobj.calc(2, i);\r\n            System.out.println(i + ") res =" + res);\r\n         }\r\n         catch (MyExcept  e) {\r\n            System.out.println(e.getMessage());\r\n         }\r\n         finally {\r\n            System.out.println("finally block");\r\n         }\r\n      } // end of for\r\n      System.out.println("End of main body");\r\n   }\r\n   public int calc(int x, int y) throws MyExcept {\r\n      MyExcept  e = new MyExcept();\r\n      if (x == y) throw(e);\r\n      int result = (x + y) / (x - y);\r\n      return result;\r\n   }\r\n}\r\n', '', '', 4, 0),
(554, '', '서대영', '', '2009-07-07 11:59:50', 'Java', 'exception.getMessage()', '생성자 Exeption(String msg) 에 넣은 msg를 출력', '', '', 2, 0),
(555, '', '서대영', '', '2009-07-07 19:21:54', 'Eclipse', '외부 class 파일 import', 'JDBC 드라이버도 이렇게 추가 가능!!\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/jungssyung?Redirect=Log&logNo=110040694720', 'http://blog.naver.com/jungssyung?Redirect=Log&logNo=110040694720', '', 0, 0),
(556, '', '서대영', '', '2009-07-08 16:39:09', 'Java', '자바 표준 패키지 (자바 API)', ' 자바는 J2SDK에서 정의된 많은 연관된 class들을 package로 묶어 제공하여,\r\n필요에 따라 사용자가 import하여 사용할 수 있습니다. 이러한 미리 제공된\r\nclass package들을 자바 API(Java Application Programming Interface)라 합니다.\r\n프로그래머가 새로운 class를 정의하려 할 때 먼저 자바 API에 이미 그 기능을\r\n정의한 class가 있다면, 자바 API에서 제공하는 수 많은 class들을 재사용하여\r\n쉽게 프로그램을 작성할 수 있습니다. \r\n \r\n  자주 사용하는 자바 API package에 대하여 자세히 살펴보도록 합시다. \r\n \r\n   java.applet \r\n  Java Applet Package. 애플릿 제작 및 브라우저와 애플릿의 상호작용 등을\r\n제공하는 Applet class와 interface를 포함하고 있습니다. \r\n \r\n java.awt \r\n  Java Abstract Windowing Toolkit Package. 그래픽 사용자 인터페이스의 제작과\r\n관리에 필요한 모든 class와 interface를 포함하고 있습니다. \r\n \r\n java.awt.event \r\n  Java AWT Event Package. 이벤트 처리를 해 주는 class와 interface를 포함하고\r\n있습니다. \r\n \r\n java.io \r\n  Java Input/Output Package. 데이터를 입력 받고 출력할 수 있도록 하는 class를\r\n포함하고 있습니다. \r\n \r\n java.lang \r\n  Java Language Package. 이 package는 특별히 지정하지 않아도 자동으로\r\nimport됩니다. 자바 프로그램들이 기본적인 언어차원에서 필요로 하는 class와\r\ninterface를 포함하고 있습니다. \r\n \r\n java.sql \r\n  Java Structured Query Language Package. 프로그램이 데이터베이스와 정보를\r\n교환하기 위한 class와 interface를 포함하고 있습니다. \r\n \r\n java.util \r\n  Java Utilities Package. 날짜/시간 조작, 난수 발생, 문자열의 토큰화 등과\r\n관련된 각종 유틸리티 class와 interface를 포함하고 있습니다. \r\n \r\n', '', '', 8, 0),
(557, '', '서대영', '', '2009-07-08 17:09:35', 'Java', '필드와 메소드의 binding 시점', 'Super s = new Sub();\r\n\r\ns.field → Super의 필드값\r\n\r\ns.method(); → Sub의 메서드 \r\n\r\n\r\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\r\n\r\n\r\n 지금까지 polymorphism을 살펴 보느라 메소드에 대한 binding 시점에 대한 것을\r\n살펴 보았는데, 상속된 class에서 base class의 멤버 변수 이름과 같은 이름을 갖는\r\n멤버 변수를 선언했다면 어떻게 될까요? \r\n \r\n   \r\nclass Base  {\r\n   int   memVar = 100 ;             // 라인 1\r\n   int   memMethod() {\r\n      return memVar;\r\n   }\r\n}\r\n\r\nclass Derived extends Base {\r\n   int   memVar = 200;              // 라인 2 : 1에서 정의된\r\n                                    // 것과 같은 이름\r\n   int   memMethod() {              // 재정의\r\n      return memVar;\r\n   }\r\n}\r\n\r\nclass Test {\r\n   public static void main( String   arg[] ) {\r\n      Base obj = new Derived();\r\n      System.out.println("memVar=" + obj.memVar); \r\n         // 라인 3\r\n      System.out.println("memMethod=" + obj.memMethod());\r\n         // 라인 4\r\n   }\r\n}\r\n \r\n\r\n위 예제에서 라인 4와 같은 경우는 polymorphism에서 배우셨으므로 이제 무엇이\r\n출력될지 잘 아실 겁니다.\r\nobj에 Derived class의 instance가 생성되어 있으므로 "memMethod=200" 이\r\n출력될 것입니다. \r\n \r\n하지만 라인 3에서는 무엇이 출력될까요? \r\n \r\npolymorphism 이라는 것은 메소드에서 일어나는 것이지 멤버 변수에까지\r\n발생되는 것은 아닙니다. 즉 멤버 변수는 run-time binding을 하는 것이\r\n아니라 compile time binding을 해버립니다.\r\n그러므로 라인 3의 결과는 "memVar=100" 이 됩니다. \r\n \r\n \r\n \r\n  상속으로 만들어져 있는 base class와 derived class에 동일한 이름의 멤버 변수와\r\n메소드가 있었을 때 멤버를 access 하는 규칙입니다. \r\n \r\n   object의 멤버 변수는 자신이 선언된 Data type에 의해 compile time에 \r\n  결정된다. \r\n object의 메소드는 실제 자신에 생성되있는 instance에 의해 run-time에  \r\n  결정된다. \r\n \r\n', '', '', 0, 0),
(558, '', '서대영', '', '2009-07-09 19:40:24', 'Java', 'Enumeration VS Iterator', 'Enumeration interface는 여러 개의 원소들을 포함하는 객체에 대해 정의하고 있는\r\ninterface입니다. Vector에서처럼 각 원소에 접근할 때 그 원소의 데이터 형으로\r\n전환하는 코드가 없어도 됩니다.\r\n\r\n□ 주요 메서드\r\n\r\nboolean hasMoreElements(): 더 이상 원소가 존재하는지를 검사합니다.\r\nObject nextElement(): Enumeration 내의 현재 원소 다음의 원소를 가져옵니다. \r\n \r\n□ 사용법\r\n \r\nfor (Enumeration e = v.elements() ; e.hasMoreElements() ;) {\r\n   System.out.println(e.nextElement());\r\n}\r\n \r\n\r\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\r\n\r\nIterator interface는 Enumeration interface를 대체하기 위한 것입니다.\r\n이러한 Iterator interface는 다음과 같은 두 가지 면에서 Enumeration interface와\r\n차이를 보입니다.\r\n \r\n□ 주요 메서드\r\n\r\nboolean hasNext(): 더 이상의 원소가 존재하는지를 얻습니다.\r\nObject next(): 현재 위치 다음에 있는 원소를 가져옵니다.\r\nvoid remove(): Iterator 내의 마지막 원소를 제거합니다. \r\n \r\n□ 사용법\r\n \r\n for (Iterator i = v.iterator() ; i.hasNext() ;) {\r\n   System.out.println(i.next());\r\n}', '', '', 5, 0),
(559, '', '서대영', '', '2009-07-09 19:45:19', 'Java', 'Interface (인터페이스)', '- 모든 멤버 변수는 public static final로 선언되어야만 하고(이 뜻은 interface의 멤버 변수는 단지 상수로만 사용 된다는 것이겠지요.), \r\n- 모든 메소드는 public abstract로 선언되어야만 합니다. (생략해도 public 임. 하지만 상속받는 클래스에서는 오바라이딩 메서드에 public을 붙어야 함)\r\n \r\n\r\n\r\ninterface Greetings {\r\n   public static final int   Samint = 100;\r\n   String   Samstr = "sample";          // 라인 1.\r\n\r\n   public abstract String   sayHello();\r\n   public abstract String   sayGoodBye();\r\n   String  sayThanks();                 // 라인 2.\r\n}\r\n \r\n \r\n \r\n  위와 같이 interface의 선언은 필요한 멤버 변수와 메소드의 선언으로 이루어집니다.\r\n멤버 변수를 선언함에 있어 라인 1과 같이 아무런 선언을 붙이지 않으면 default로\r\npublic static final로 선언되며, 마찬가지로 메소드를 라인 2와 같이 아무런 선언을\r\n붙이지 않았다면 public abstract로 선언됩니다. \r\n', '', '', 4, 0),
(560, '', '서대영', '', '2009-07-15 11:42:09', 'Network', 'DNS 서버', '- Domain Name Server\r\n\r\n- 도메인이름과 아이피주소의 맵핑테이블을 갖고 있음\r\n\r\n- ISP마다 DNS가 있고, 기업망마다 DNS가 있음\r\n\r\n- DNS끼리는 서로 복제 (반나절 ~ 하루 주기)\r\n\r\n- 인트라넷에서는 내부 전용 DNS를 두는 경우도 있음\r\n\r\n- PC내에 PC 전용 DNS를 둘 수도 있음 (hosts 파일)\r\n\r\n- DNS에 등록하려면 호스팅 업체나 인프라 팀에 도메인이름과 아이피주소를 요청', '', '', 3, 0),
(561, '', '서대영', '', '2009-07-15 11:48:32', 'iPlanet', 'iPlanet 구조', 'Administration Server > Server Instance > Virtual Server Class > Virtual Server Instance\r\n\r\n------------------------------------------------------\r\n콘솔에 접속하자 마자 나오는 것은 Administration Server(기본 서버) 이다.\r\n여기서 다른 서버(인스턴스)를 추가, 삭제 관리 할 수 있음.\r\n즉, 하나의 iPlanet 웹서버(소프트웨어)는 여러 개의 인스턴스를 가질 수 있음.\r\n\r\n그리고 각 인스턴스는 포트를 통해 접근을 통제함.\r\n실제 물리적으로도 "https-인스턴스명" 으로 디렉토리가 분리되어 있음.\r\n각 디렉토리의 config 폴더에 obj.conf를 따라감.\r\n\r\n그리고 각 인스턴스는 여러개의 Virtual Server Class를 가질 수 있다.\r\n즉, 하나의 포트로 접속하여 여러 경로로 접근 가능.\r\n단일포트로 여러 개의 WAS로 붙게할 때 보통 사용. (SSL 적용시)\r\n\r\n또 각 Virtual Server Class에는 여러개의 Virtual Server 인스턴스를 가질 수 있다.\r\n(SKP는 하나의 Virtual Server Class에 하나의 Virtual Server만 가졌음)\r\n\r\n\r\n\r\n', '', '', 14, 0),
(562, '', '서대영', '', '2009-07-15 13:37:01', 'iPlanet', '설정2 - obj.conf', '디폴트에서 추가해줄 것은 아래 2가지\r\n\r\n\r\n1) text/jsp 타입을 만나면 펑션이름은 wl-proxy이고 로컬에 포트 7001WAS 로 토스하라.\r\n\r\nService method="(GET|HEAD|POST|PUT)" type="text/jsp" fn="wl-proxy" WebLogicHost="localhost" WebLogicPort="7001"\r\n\r\n※ text/jsp 는 mime.types  파일에 ext 이 정의되어 있어야 함\r\n※ wl-proxy 는 웹로직 플러그인인데 manus.conf 파일에 정의되어 있어야 함\r\n\r\n2) 이 포트/GSPN/* 경로의 아래의 파일은 포트 2188인 weblogic 와스에 붙고 wl-proxy 연결파일로 연결하라.\r\n\r\n\r\n<Object name="weblogic" ppath="*/GSPN/*">\r\nPathCheck fn="set-cache-control" control="no-cache"\r\nService fn="wl-proxy" WebLogicHost="localhost" WebLogicPort="2188" PathTrim="/"\r\n</Object>\r\n\r\n\r\n\r\n===================================================\r\n\r\n아래는 GSPN에 적용된 obj.conf의 설정값입니다.\r\nService method="(GET|HEAD|POST|PUT)" type="text/jsp" fn="wl-proxy" WebLogicCluster="106.10.9.55:9188,106.10.9.55:9288,106.10.9.55:9388,106.10.9.56:9188,106.10.9.56:9288,106.10.9.56:9388" ConnectTimeoutSecs=10 ConnectRetrySecs=2 DynamicServerList=OFF Idempotent=OFF KeepAliveEnabled=false CookieName="GSPN_SESSIONID"\r\n\r\nService fn="wl-proxy" WebLogicCluster="106.10.9.55:9188,106.10.9.55:9288,106.10.9.55:9388,106.10.9.56:9188,106.10.9.56:9288,106.10.9.56:9388" ConnectTimeoutSecs=10 ConnectRetrySecs=2 DynamicServerList=OFF Idempotent=OFF KeepAliveEnabled=false PathTrim="/" CookieName="GSPN_SESSIONID"\r\n\r\n다음은 적용된 각 파라미터에 대한 설명입니다.\r\n\r\n- WebLogicHost (default none) : 연결할 단일 웹로직 서버 IP\r\n\r\n- WebLogicPort (default none) : 연결할 단일 웹로직 서버 Port\r\n\r\n- WebLogicCluster (default none) : 이중화 구성 시 연결할 웹로직 서버의 리스트(콤마로 구분하여 여러 서버를 등록함)\r\n\r\n- PathTrim (default null) : Original URL에서 특정 Path를 제외시킴\r\n\r\n- ConnectTimeoutSecs (default 10) : 웹로직 서버로 연결을 시도하는 최대 시간\r\n\r\n- ConnectRetrySecs (default 2) : 웹로직 서버로 연결시도를 할 때의 Interval Time\r\n\r\n- Idempotent (default ON) : 기본적으로 ON으로 설정되어있고 WLIOTimeoutSecs동안 응답이 없을 경우 Plug-In의 failover 기능이 작동함 OFF로 설정되어있으면 failover 기능이 작동하지 않음\r\n\r\n- KeepAliveEnabled (default true) : Plug-In과 웹로직 서버간의 connection들을 pooling할지 결정\r\n\r\n- DynamicServerList (default ON) : OFF로 설정할 경우 plug-in은 load balancing을 위한 dynamic cluster list를 무시하고 WebLogicCluster 파라미터에 명시된 static list만 사용하게 됨\r\n\r\n- CookieName (default none) : 임의의 session ID를 지정하여 해당 ID를 가지고 실제 세션을 찾아가게 설정\r\n\r\n- KeepAliveSecs (default 20) : WAS의 응답을 기다리는 최대 시간 (초) ★ ', '', '', 26, 0),
(563, '', '서대영', '', '2009-07-16 16:18:19', 'Java', 'Thread', 'run() 을 오버라이딩 하고 start() 로 실행시킴\r\n\r\n\r\n□ 정의\r\n\r\n프로세서가 하나인 시스템에서 여러 프로세스가 동시에 동작 되는 것처럼 느껴지듯이,\r\n한 프로세스 안에서 여러 작업이 동시에 실행되는 효과를 주고 싶을 때 thread를\r\n사용합니다. (그래서 thread를 light weight process 라고도 합니다.)\r\n\r\n\r\n□ 구현법\r\n\r\n1. Thread를 상속하는 클래스에 run()을 오버라이딩하고 객체를 생성하여 start() 함수 호출\r\n\r\n2. Runnable을 구현하는 클래스에 run()을 오버라이딩하고 객체를 생성하여 Thread의 객체를 생성할 때 생성자 매개변수로 넘기고 그 Thead 객체어서 start() 호출\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://searchstory.tistory.com/217', 'http://searchstory.tistory.com/217', '', 15, 0),
(564, '', '서대영', '', '2009-07-17 11:56:01', 'Weblogic', 'Application Document Root 찾기', '콘솔에서\r\n\r\nDeployments > Application > Configuration', '', '', 1, 0),
(565, '', '서대영', '', '2009-07-17 14:29:42', 'iPlanet', 'Virtual Server 의 활용', 'Virtual Server 란\r\n하나의 웹서버 인스턴스는 하나의 리스너 포트를 가지는데,\r\n여러개의 웹서버 인스턴스를 하나의 리스너 포트로 접근해야할 때,\r\n(ex. SSL) 사용한다.\r\n\r\n이 때는 각 Virtual Server는 더 이상 "IP주소:포트번호"로 접근할 수 없고,\r\n반드시 Urlhosts에 세팅해 놓은 도메인이름으로 접근해야 한다.\r\n\r\n[ UrlHosts 세팅 ]\r\n콘솔 > 서버 선택 > Virtual Server Class 탭 > Virtual Server 선택\r\n> Edit Virtual Servers 버튼 > UrlHosts 입력', '', '', 13, 0),
(566, '', '서대영', '', '2009-07-21 07:26:08', 'Java', 'System 클래스 매서드', ' System class는 다음과 같이 표준입출력에 관련된 세개의 변수를 가집니다.\r\n이 변수들은 다음과 같습니다. \r\n \r\n   System.in: 표준 입력 스트림 \r\n \r\n   \r\ntry {\r\n   System.in.read();\r\n}  \r\ncatch(java.io.IOException exception) {\r\n}\r\n \r\n \r\n \r\n System.out: 표준 출력 스트림 \r\n \r\n   \r\nSystem.out.print(“출력된 내용 :  SCJP!”);\r\nSystem.out.println(“라인출력된 내용 :  SCJP!”);\r\n \r\n \r\n \r\n System.err: 표준 에러 출력 스트림 \r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n Garbage Collection에 관련된 메소드는 다음과 같습니다. \r\n   void gc(): garbage collector를 동작시킵니다. \r\n void runFinalization() \r\n  garbage collection을 기다리는 객체의 finalize 메소드를 실행시킵니다.\r\n시스템 종료 기능의 메소드가 있습니다. \r\n void exit(int status) \r\n  현재 실행 중인 자바 가상머신을 종료함으로써 실행중인 프로세스를 멈춥니다. \r\n \r\n', '', '', 2, 0),
(567, '', '서대영', '', '2009-08-06 11:27:54', 'Unix', 'vi .profile 엘리어스 보기', '', '', '', 5, 0),
(568, '', '서대영', '', '2009-08-17 16:30:50', 'Eclipse', 'J2EE 개발환경 구축', '============ 개발환경 구축... ======================\r\nJRE + Tomcat + Eclipse\r\n\r\n=============================\r\nJRE(java) - java.sun.com (1.5) - default 설치..\r\nC:Program FilesJava 하위에 jdk, jre 설치..\r\n\r\n환경설정\r\n	JAVA_HOME : C:Program FilesJavajdk1.5.0_12\r\n	PATH : JAVA_HOME\\\\bin;~~~\r\n\r\n=============================================\r\ntomcat5.5   www.apache.org\r\n	apache 의 download 는 크게  - install\r\n															 압축해제..		\r\n	C:apache-tomcat-5.5.20 에 압축해제로 설치...\r\n	\r\n==============================================\r\neclipse  - www.eclipse.org\r\neclipse-jee-europa-winter-win32  : europa 버전... : 3.3  WTP2.0\r\n압축해제가 곧 설치..\r\nC:eclipse 에 설치...\r\n\r\neclipse.exe 를 처음 실행하면 eclipse.ini 파일을 읽어들여서 환경을 잡는데..\r\n\r\nini 파일 바꾸어서 실행했다...\r\n\r\nC:workspace 로설정..\r\n\r\n=====================================\r\neclipse 기본\r\n\r\nworkspace - workbench\r\n								- n 개의 perspective\r\n										- n 개의 view\r\n\r\n\r\n======================================\r\neclipse 에서 j2ee 프로젝트를 위한 설정\r\n	server 등록 및 project 생성 및 실행\r\n\r\ndynamic web project 를 만들면서 context root 를 지워버리면 우리가 등록하는 web app 가 root app 가 된다.', '', '', 4, 0),
(569, '', '서대영', '', '2009-08-17 16:40:26', 'Eclipse', 'Eclipse 기본 환경설정', '	- 전체 환경설정  : winodw->preferences\r\n	- 프로젝트별 환경설정.. : project 명 오른쪽 마우스->properties\r\n\r\n	- project -> clean : 새로고침 (모든파일 컴파일 다시)', '', '', 8, 0),
(570, '', '서대영', '', '2009-08-17 16:51:41', 'Tomcat', 'Tomcat 디렉토리 구조', '%CATALINA_HOME%/bin/startup.bat(sh) 서버 구동\r\n%CATALINA_HOME%/bin/shutdown.bat(sh) 서버 정지\r\n%CATALINA_HOME%/common/lib : 어플리케이션 범용 라이브러리\r\n%CATALINA_HOME%/conf/server.xml : 서버 환경 설정\r\n(port 변경, root web app 변경...)\r\n%CATALINA_HOME%/webapps : 어플리케이션 목록\r\n%CATALINA_HOME%/webapps/context : 클래스 파일 외...\r\n%CATALINA_HOME%/webapps/context/WEB-INF/web.xml : 배포 지시자 (DD)\r\n%CATALINA_HOME%/webapps/context/WEB-INF/classes : 클래스 파일', '', '', 6, 0),
(571, '', '서대영', '', '2009-08-17 16:53:27', 'Eclipse', 'Eclipse 주요 디렉토리', 'eclipse\r\n	C:\\eclipse\\features\r\n	C:\\eclipse\\plugins  : 플러그인이 위치하는 디렉토리..\r\n\r\n	C:\\workspace : workspace 하위에 만들어진 모든 파일 및 폴더중 . 으로 시작하는 것들은 이클립스가 자동으로 만들어 낸것들이다..\r\n\r\n압축할 때 .으로 시작하는 파일은 제외되서 압축해서 집으로 가져가면 구동 안됨', '', '', 1, 0),
(572, '', '서대영', '', '2009-08-18 10:03:55', 'Tomcat', 'Web App 디렉토리 구조', '============================\r\nweb app 디렉토리 구조\r\n	webTest\r\n	C:/apache-tomcat-5.5.20/webapps/webTest/test.jsp\r\n\r\n\r\n	static file : .html, .jpg, .jsp  ... : web app 하위 임의의 위치에 가능\r\n	dynamic file : .class\r\n	환경파일 : .xml (web.xml)\r\n	라이브러 파일 : .jar\r\n\r\n	webTest/a.jsp       ==>http://localhost:8080/webTest/a.jsp\r\n				 /aaa/b.jsp		==>http://localhost:8080/webTest/aaa/b.jsp\r\n\r\n				 /WEB-INF/web.xml\r\n				         /c.jsp   ==>http://localhost:8080/webTest/WEB-INF/c.jsp(X)\r\n				         /lib/a.jar  : 런타임시 자동 classpath 잡히는 디렉토리\r\n												==>서버 공용 라이브러리 디렉토리 : 서버에서 인지\r\n																서버에서 수행되는 모든 app 에서 사용가능\r\n												==>WEB-INF/lib : 해당 web app 에서만 사용가능\r\n									\r\n								 /classes/A.class     : classes 디렉토리는 자동 classpath\r\n												 /aaa/B.class  : aaa 는 임의의 디렉토리가 아니다..\r\n																					B 클래스의 package 명이다.\r\n							\r\n							\r\n							==>http://localhost:8080/webTest/WEB-INF/classes/A (x)\r\n							==>http://localhost:8080/webTest/WEB-INF/classes/aaa.B (x)\r\n\r\n							==>http://localhost:8080/webTest/servlets/A\r\n							==>http://localhost:8080/webTest/servlets/aaa.B\r\n\r\n										==>권장사항 아니다..\r\n								==>Servlet 은 web.xml 파일에 url 명을 등록하고 그 url 명으로 서비스\r\n\r\n								<servlet>\r\n									<servlet-name>a1</servlet-name>\r\n									<servlet-class>aaa.B</servlet-class>\r\n								</servlet>\r\n								<servlet-mapping>\r\n									<servlet-name>a1</servlet-name>\r\n									<url-pattern>/kkang</url-pattern>\r\n								</servlet-mapping>\r\n\r\n								==>http://localhost:8080/webTest/kkang (O)\r\n\r\n\r\n========== eclipse 에서 web app 개발 =================\r\nwebTest/test.jsp\r\n			 /WEB-INF/web.xml\r\n							 /lib/a.jar\r\n							 /classes/aaa/A.class\r\n\r\nwebTest/src/aaa/A.java  : src : 모든 .java 파일을 위치\r\n       /build/   : 신경안써도 된다. .java 를 자동으로 컴파일 시켜서 생긴 class 파일을 위치\r\n			 /WebContent/test.jsp  : 나머지 파일\r\n									/WEB-INF/web.xml\r\n\r\n==>이클립스에서는 개발 디렉토리구조를 따로 제시..\r\n\r\n\r\n==>run on server 하는 순간.. 이클립스가 개발 디렉토리 구조에서 적절하게 파일을 뽑아내서 표준 디렉토리 구조로 만들어서 서버에 카피... (ANT)\r\n\r\n==> eclipse 에서 tomcat 서버를 이용하면 임시 서비스 디렉토리를 구성해서 그곳에서 수행시킨다..\r\n\r\nC:/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/webTest\r\n\r\n=============================================\r\neclipse 의 소스폴더\r\n		==> 이클립스는 소스폴더에 작성된 .java 파일만 자동으로 저장시 컴파일을 시켜준다.\r\n		==>소스폴더에 작성된 파일들은 run time 시에 classpath 위치로 자동으로 옮겨준다..\r\n\r\n\r\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\r\n※ weblogic 에서 web app 루트 폴더는 admin console 에서 설정한다.', '', '', 4, 0),
(573, '', '서대영', '', '2009-08-18 11:06:03', 'Java', 'Reflection : 동적 바인딩', '소스를 특정 클래스나 메서드에 독립적으로 만들기 위해서,\r\n해당 클래스나 매서드 이름을 문자열 변수로 받아서,\r\n소스를 클래스나 매서드에 런타임 독립적으로 만든다.\r\n\r\n\r\nClass.forName("oracle,jdbc.driver.OracleDriver");\r\noracle,jdbc.driver.OracleDriver라는 클래스 이름을 문자열로 받아서\r\n해당 클래스를 임포트 후 객체를 생성함.\r\n즉 이자리에 다른 클래스 이름을 쓰면 재 컴파일 필요없이 런타임에 동적으로 클래스를 교체할 수 있다.', '', '', 18, 0),
(574, '', '서대영', '', '2009-08-18 11:19:39', 'J2EE', 'JNDI (Java Name & Directory Interface)', '□ JNDI 개념\r\n\r\nNaming Server 연동 스팩\r\n\r\n(분산환경에서) resource 획득의 표준방법으로 JNDI 강제\r\n\r\nEJB, RMI, JMS\r\nWAS의 DataSource 이용 방법\r\n\r\nWAS로 설정한 모든 Resource는 JNDI로 획득\r\n\r\n\r\n□ 리소스 구조 (JNDI Tree)\r\n\r\n기본적으로 트리 구조인데,\r\n루트 노드가 InitialContext이고, \r\n그 하위에 노드들이 계층적으로 달려있음.\r\n점으로 계층을 구분해서 lookup으로 접근\r\n\r\n\r\n□ 리소스 획득 순서\r\n\r\n// 1) InitialContext 획득\r\nInitialContext cxt = new InitialContext();\r\n// 2) lookup\r\nDataSource ds = (DataSource) cxt.lookup("at.b2.aaa");\r\n\r\n', '', '', 19, 0),
(575, '', '서대영', '', '2009-08-18 11:41:12', 'Tomcat', 'DataSource 등록 ★', '1. ${CATALINA_HOME}/conf/server.xml 의 <GlobalNamingResources> 태그 바디에 아래 소스를 추가\r\n\r\n<Resource auth="Container" name="jdbc/myDB" type="javax.sql.DataSource" driverClassName="oracle.jdbc.driver.OracleDriver" url="jdbc:oracle:thin:@107.10.86.138:1521:acube" username="akmadmin" password="akmadmin" maxActvie="20" maxIdle="10" maxWait="-1">\r\n\r\n2. ${CATALINA_HOME}/conf/context.xml 의 <Context> 태그 바디에 아래 소스를 추가하거나 (모든 Web App에 적용) ${CONTEXT_HOME}/META-INF/context.xml 를 추가 (해당 Web App만 적용)\r\n\r\n<ResourceLink global="jdbc/myDB" name="jdbc/myDB" type="javax.sql.DataSource"/>\r\n\r\n※ Tomcat 5.5 미만에서는 web.xml에도 등록이 필요\r\n\r\n3. Context 객체를 이용해 커넥션을 얻는다.\r\n			Context initCxt = new InitialContext();\r\n			Context envCxt = (Context) initCxt.lookup("java:/comp/env");\r\n			DataSource ds = (DataSource) envCxt.lookup("jdbc/myDB");\r\n\r\n			conn = ds.getConnection();\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.microdeveloper.com/html/JNDI_Orcl_Tomcatp3.html', 'http://www.microdeveloper.com/html/JNDI_Orcl_Tomcatp3.html', '', 34, 0),
(679, '', '서대영', '', '2009-12-11 09:06:39', 'Unix', 'rm 명령어', '문법\r\nrm <option> <file or directory name>\r\n\r\n옵션\r\n- f : 삭제 여부 물어보지 않기 (force)\r\n- R : 디렉토리 삭제 시 하위 디렉토리까지 삭제 (recursive)\r\n\r\n특정 확장자를 가진 모든 파일 삭제\r\nfind . -name "*.class" -exec rm -f {} ;\r\n\r\n하루 이전 로그 파일 삭제\r\nfind . -mtime +1 -exec rm -rf {} \\\\;', '', '', 10, 0),
(576, '', '서대영', '', '2009-08-18 13:59:28', 'Eclipse', 'Servlet Wizard 사용법', '- Project Explore 뷰에서 Dynamic Web Project에 마우스 놓고 오른쪽 버튼,\r\n- New > Other > Web > Servlet 클릭\r\n- Class 이름과 Package 이름 세팅 후 Next 클릭\r\n- URL Mappings 에 원하는 URL이름 설정 (반드시 /로 시작)\r\n- 원하는 오버라이딩 함수 고르기', '', '', 1, 0),
(577, '', '서대영', '', '2009-08-18 14:00:38', 'Eclipse', 'Templete 사용법', '자주쓰이는 코드는 Templete에 등록되어 있다\r\n\r\nsyso\r\nmain\r\ntry\r\n\r\n+ ctrl + space 하면\r\n자동 완성됨', '', '', 1, 0),
(594, '', '서대영', '', '2009-08-21 08:11:38', 'JUnit', 'Junit4 사용법', '[ 테스트 메서드 ]\r\n실패 메세지는 써도 되고 안 써되 딤\r\n\r\nasertXXX("실패 메세지", 테스트값);\r\nassetEquals(Expected Value, Actual Value);\r\n\r\nfail("실패 메세지");\r\n무조건 테스트 실패시킴 (보통 if 나 try 와 사용)\r\n\r\n\r\n[ 테스트 값 세팅 ]\r\n * 모든 테세트 매서드 앞뒤로 실행\r\n@Before\r\n@After\r\n * 한번만 세팅\r\n@BeforeClass\r\n@AfterClass\r\n\r\n[ 그 외 유용한 어노테이션 ]\r\n@Test(expected = ArithmeticException.class)\r\n익셉션 테스트\r\n@Test(timeout = 5000)\r\n타임아웃\r\n@Ignore("Ignore this test for now")\r\n테스트 무시 (@Test 위에 사용)\r\n\r\n\r\n[ main 메서드로 실행하는 방법 ]\r\njunit.textui.TestRunner.run(TestComputeClass.class);\r\n\r\n\r\n\r\nRun as Junit Test 로 실행시킨다.\r\n---------------------------------------------------------------------\r\n\r\nimport org.junit.AfterClass;\r\nimport org.junit.BeforeClass;\r\nimport org.junit.Ignore;\r\nimport org.junit.After;\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\nimport static org.junit.Assert.*;\r\n\r\n// In JUnit 4, you don''t have to extend TestCase class anymore\r\npublic class TestComputeClass {\r\n\r\n    // Initialize common test data\r\n    int x;\r\n    int y;\r\n\r\n    // In JUnit 4, the setUp method can be arbitrary name\r\n    // with @Before annotation\r\n    @Before\r\n    public void MySetUp() {\r\n        System.out.println("setUp - Intialize common test data");\r\n        x = 7;\r\n        y = 5;\r\n    }\r\n\r\n    // In JUnit 4, the tearDown method can be arbitrary name\r\n    // with @After annotation\r\n    @After\r\n    public void MyTearDown() {\r\n        System.out.println("tearDown - Clean up");\r\n    }\r\n\r\n    // One time setup for the whole tests\r\n    @BeforeClass\r\n    public static void myBeforeClassMethod() {\r\n        System.out.println("myBeforeClassMethod - Set things up once for all");\r\n    }\r\n\r\n    // One time teardown for the whole tests\r\n    @AfterClass\r\n    public static void myAfterClassMethod() {\r\n        System.out.println("myBeforeClassMethod - Clean things up once for all");\r\n    }\r\n\r\n    /**\r\n     * Test of add method, of class ComputeClass.\r\n     */\r\n    // In JUnit 4, the test method can be arbitrary name\r\n    // with @Test annotation\r\n    @Test\r\n    public void testAdd() {\r\n        System.out.println("add");\r\n\r\n        ComputeClass instance = new ComputeClass();\r\n\r\n        int expResult = 12;\r\n        int result = instance.add(x, y);\r\n        assertEquals(expResult, result);\r\n\r\n    }\r\n\r\n    /**\r\n     * Test of multiply method, of class ComputeClass.\r\n     */\r\n    @Test\r\n    public void testMultiply() {\r\n        System.out.println("multiply");\r\n\r\n        ComputeClass instance = new ComputeClass();\r\n\r\n        int expResult = 35;\r\n        int result = instance.multiply(x, y);\r\n        assertEquals(expResult, result);\r\n\r\n    }\r\n\r\n    /**\r\n     * Test of subtract method, of class ComputeClass.\r\n     */\r\n    @Test\r\n    public void testSubtract() {\r\n        System.out.println("subtract");\r\n\r\n        ComputeClass instance = new ComputeClass();\r\n\r\n        int expResult = 2;\r\n        int result = instance.subtract(x, y);\r\n        assertEquals(expResult, result);\r\n\r\n    }\r\n\r\n    @Test(expected = ArithmeticException.class)\r\n    public void testDivideByZero() {\r\n        System.out.println("divideByZero");\r\n\r\n        ComputeClass instance = new ComputeClass();\r\n        instance.divide(4, 0);\r\n\r\n    }\r\n\r\n    @Test(timeout = 5000)\r\n    public void testLengthyOperation() {\r\n    }\r\n\r\n    @Ignore("Ignore this test for now")\r\n    @Test\r\n    public void testTheWhatSoEverSpecialFunctionality() {\r\n    }\r\n\r\n    // JUnit 4 no longer supports a UI-based TestRunner; this is left to the IDE \r\n    // developers. But there is still a command-line tool you can use to manually \r\n    // run tests. Just call the class org.junit.runner.JUnitCore and pass the \r\n    // (fully qualified) names of your test classes:\r\n    // java -cp <junit-jar> org.junit.runner.JUnitCore TestComputingClass\r\n    public static void main(String[] args) {\r\n\r\n        System.out.println("Try java -cp build\\classes;<junit-jar> org.junit.runner.JUnitCore TestComputingClass at the application root");\r\n        //junit.textui.TestRunner.run(TestComputeClass.class);  Not applicable.\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/kkpa1002?Redirect=Log&logNo=20110145727', 'http://blog.naver.com/kkpa1002?Redirect=Log&logNo=20110145727', '', 37, 0),
(578, '', '서대영', '', '2009-08-18 14:58:37', 'J2EE', 'Filter', '# 주의사항\r\n\r\nweb.xml 파일에서 url-pattern 를 /* 로 주면 jsp 파일 내에 연결된 css 나 js 파일 때문에\r\n필터가 여러 번 호출되므로 주의한다.\r\n\r\n\r\nclient 요청 시 사전처리, client 응답 전 처리\r\n\r\n실제 요청 처리와 상관없는 여러 Servlet/JSP에 반복되는 코드\r\n사전/사후 코드\r\nP/L, B/L 포함 시키는 것은 지양\r\n\r\nex) B/L 은 아니지만 꼭 필요한 작업\r\n한글 데이터 깨짐 방지\r\n로깅 : 접속, 수행속도\r\n암호/복호\r\n압축/해재\r\n인증(선택)\r\n이미지 변환\r\n\r\n\r\n\r\n□ 프로그램 작성 순서\r\n- 서블릿 life cycle과 비슷\r\n\r\npublic class AFilter implements Filter {\r\n  init() {}\r\n  doFilter(request, response, chain[다음에 수행될 클래스, 컨테이너가 web.xml 파일 보고 호출할 때 세팅]) {\r\n    // 서블릿 이전 처리 (요청 관련)\r\n    chain.doFilter(request, response);\r\n    // 서블릿 이후 처리 (응답 관련)\r\n  }\r\n  destroy() {}\r\n}\r\n\r\n\r\n□ web.xml 설정 (서블릿과 흡사)\r\n	<filter>\r\n		<filter-name>CommonFilter</filter-name>\r\n		<filter-class>kr.dale.filter.CommonFilter</filter-class>\r\n	</filter>\r\n	<filter-mapping>\r\n		<filter-name>CommonFilter</filter-name>\r\n		<url-pattern>*.do</url-pattern>\r\n	</filter-mapping>\r\n\r\n필터가 여러 개일 경우 순서대로 web.xml에 등록\r\n\r\n\r\n\r\n□ 샘플코드\r\n\r\n	public void doFilter(ServletRequest arg0, ServletResponse arg1,\r\n			FilterChain arg2) throws IOException, ServletException {\r\n		// TODO Auto-generated method stub\r\n		// 현재 시스템의 시간... timestamp값\r\n		long start = System.currentTimeMillis();\r\n		// 유저로부터 넘어는 request 데이터의 한글처리\r\n		arg0.setCharacterEncoding("euc-kr");\r\n		// 다음 필터 or 서블릿으로 수행 흐름을 넘겨라\r\n		arg2.doFilter(arg0, arg1);\r\n		long end = System.currentTimeMillis();\r\n		System.out.println("# Time Elapsed : " + (end - start));\r\n		\r\n	}', '', '', 40, 0),
(579, '', '서대영', '', '2009-08-18 16:21:09', 'Servlet', 'Servlet/JSP 중요객체 정리 ★★★', '□ HttpServletRequest\r\n - Client 요청 data\r\n - 서버 컨테이너가 생성 : Service 메서드 매개변수\r\n - 요청시 생성, 응답시 소멸\r\n - 데이터공유 : 한 유저의 한 요청 내\r\n\r\n□ HttpServletResponse\r\n - Server 응답 data\r\n - 서버 컨테이너가 생성 : Service 메서드 매개변수\r\n - 요청시 생성, 응답시 소멸\r\n\r\n□ ServletConfig\r\n - Servlet의 환경정보 (web.xml 등록정보)\r\n - 서버 컨테이너가 생성 : getServletConfig();\r\n - Servlet Life Cycle과 동일\r\n\r\n□ ServletContext ★\r\n - Web App 대표객체\r\n - 컨테이너와 통신할 때 사용\r\n - 서버 컨테이너가 생성 : getServletContext();\r\n - Server Start 시 생성, Sever Stop 시 소멸\r\n - 데이터공유 : 여러 유저의 여러 요청 내\r\n\r\n□ HttpSession\r\n - 상태유지\r\n - Server Side 저장\r\n - 서버 컨테이너가 생성 : request.getSession();\r\n - User가 새로운 Browser로 접근 시 생성\r\n - 데이터공유 : 한 유저의 여러 요청 내\r\n\r\n□ Cookie\r\n - 상태유지\r\n - Client Side 저장\r\n - new 연산자로 생성 ★\r\n - 코드에서 생성하고 소멸\r\n\r\n□ RequsetDispatcher\r\n - 요청 재지정\r\n - 서버 컨테이너가 생성 : context.getRequestDispatcher();\r\n - 코드에서 생성\r\n\r\n\r\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\r\n1분동안 =  ServletContext 수\r\n50개의 Servlet = ServletContext 수\r\n100명의 USer = ServletConfig 수\r\n1000번의 요청 = HttpServletRequest, HttpServletResponse 수\r\n\r\n※ ServletConfig는 서버 메모리에서 언제 destroy될지 모르므로 데이터공유에 사용 불가', '', '', 13, 0),
(580, '', '서대영', '', '2009-08-19 09:40:26', 'Servlet', 'Listener', '□ 개념\r\n - Server Event Program (서버의 상태변화 감지)\r\n\r\n□ 실행시점 \r\n - 데이터공유 객체가 생성 및 소멸될 때\r\n - 상태변화 : Attribute의 add, update, remove 시점\r\n\r\n□ 용도\r\n - Servlet/jsp(Filter)로 절대 실행시킬 수 없는 시점\r\n - Servlet/jsp로 알고리즘을 잡기 힘든 경우\r\n\r\n□ 인터페이스 종류\r\n - ServletContextListener (가장 많이 쓰임)\r\n - ServletContextAttributeListener\r\n - HttpSessionListener\r\n - HttpSessionAttributeListener\r\n - HttpServletRequestListener\r\n - HttpServletRequestAttributeListener\r\n\r\n□ 설정\r\n - web.xml에 등록\r\n<listener>\r\n  <listener-class>AListener</listener>\r\n</listener>', '', '', 10, 0),
(581, '', '서대영', '', '2009-08-19 13:51:57', 'JSP', '태그의 종류', '□ Script Tag\r\n - jsp 파일 내에 Java Code를 담기 위해\r\n\r\n□ Action Tag (Sun 권장)\r\n - jsp 파일 내에 Java를 담지 않기 위해\r\n - 미리 지정된 Java Code로 대체', '', '', 3, 0),
(582, '', '서대영', '', '2009-08-19 14:11:20', 'JSP', 'Custom Tag', '□ 용도\r\n - jsp 내에서 반복되는 Java Code, HTML을 Tag로 대체\r\n\r\n□ 선언\r\n- taglib : 커스텀 태그 라이브러리 선언\r\n<%@ taglib prefix="kkang" uri="식별자" %>\r\n\r\n□ 사용\r\n- kkang : prefix (벤더, 정의자)\r\n- if : 태그명\r\n<kkang: if>\r\n  Hello\r\n</kkang: if>\r\n\r\n□ 설정\r\n - *.tld 파일\r\n - Tag Library Descriptor  환경정보 설정\r\n - WEB-INF 하위에 위치, 자동으로 Container가 인지\r\n\r\n□ 정의\r\n - Tag Handler Class 파일\r\n - TagSupport, BodyTagSupport 클래스 상속\r\n - doStartTag 또는 doEndTage 메서드 구현', '', '', 8, 0),
(583, '', '서대영', '', '2009-08-19 14:54:17', 'Java', 'Annotation', '자바 1.5의 새로운 기술\r\n사람이 아닌 컴파일러나 프로그램을 위한 부가 설명\r\n\r\nxml 방법보다 편리', '', '', 0, 0),
(584, '', '서대영', '', '2009-08-19 14:55:13', 'Java', 'Java 주석 종류', '// 단일줄 주석\r\n\r\n/*\r\n 복수줄 주석\r\n*/\r\n\r\n/**\r\n 다큐멘테이션 주석\r\n*/', '', '', 2, 0),
(585, '', '서대영', '', '2009-08-20 08:26:55', 'Eclipse', '이클립스의 임시 WebApp 저장소', '$workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/$WebApp\r\n\r\n파일이 생성되는 경우는 소스 폴더가 아니라 여기서 확인해야 한다.', '', '', 2, 0),
(586, '', '서대영', '', '2009-08-20 10:22:08', 'Eclipse', 'VO 클래스 쉽게 만들기', '일단 맴버변수만 만든다.\r\n\r\nAlt + Shift + S + R : Getter, Setter 생성\r\n\r\nAlt + Shift + S + C : 기본 Constructor 생성\r\n\r\nAlt + Shift + S + O : 필드값을 세팅해주는 Constructor 생성', '', '', 2, 0),
(587, '', '서대영', '', '2009-08-20 10:45:27', 'Tomcat', 'Tomcat5 콘솔 구동법', '- 설치가 아닌 압축 버젼을 다운받는다\r\n\r\n- 구동 : 콘솔에서 %CATALINA_HOME%/bin/startup.bat 실행\r\n\r\n- 실행이 안 된다면 환경변수에 JAVA_HOME이 등록되어 있는지 확인\r\n\r\n- 정지 : 콘솔에서 CATALINA_HOME/bin/shutdown.bat 실행\r\n', '', '', 3, 0),
(588, '', '서대영', '', '2009-08-20 10:46:44', 'Tomcat', 'Tomcat5 admin 콘솔 설치', 'http://localhost:8080/admin/\r\n\r\n\r\n\r\n저희 jakarta tomcat을 이용해 주셔서 감사합니다. \r\nTomcat 5.x 버전대부터는 web admin 패키지가 자동 설치되지 \r\n않습니다. http://tomcat.apache.org/download-55.cgi 에 가셔서 \r\nAdministration Web Application 패키지를 다운 받으신 후, \r\nwebApps 하위 폴더에 맞게 파일을 복사해 주시면 되겠습니다. \r\n감사합니다. ', '', '', 1, 0),
(589, '', '서대영', '', '2009-08-20 10:57:25', 'JSP', 'JSTL 라이브러리 로드', '\r\nServer : Tomcat5.5/common/lib\r\nApp : WEB-INF/lib/\r\n\r\n\r\nhttp://jakarta.arpache.org\r\n에서 1.1.2 zip 다운 받으면 됨\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://cafe.naver.com/javahanq.cafe?iframe_url=/ArticleRead.nhn%3Farticleid=378\r\n\r\n\r\n\r\n============================== FILE ==============================\r\njstl.jar|standard.jar', 'http://cafe.naver.com/javahanq.cafe?iframe_url=/ArticleRead.nhn%3Farticleid=378', 'jstl.jar|standard.jar', 20, 0),
(590, '', '서대영', '', '2009-08-20 10:58:56', 'JSTL', 'EL(Expression Language) 개념', '\r\njsp에서 사용하기 위한 미니 언어 (변수, 연산)\r\n\r\n[ 문법 ]\r\n* ${표현식}\r\n* 첫 번째 변수는 내장 객체 또는 속성 (page, request, session, application)\r\n\r\n[ 장점 ]\r\n - null 값이 공백으로 출력되어 편리\r\n\r\n[ 용도 ]\r\n - Tag LIbrary(JSTL)과 같이,\r\n - Tag Library로 선언한 변수 출력\r\n - Tag Library의 attribute 값 세팅\r\n\r\n\r\n[ 연산자 ]\r\n- 삼항 연산자\r\n${param.method == ''add'' ? ''add'' : ''modify'' }\r\n', '', '', 48, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(591, '', '서대영', '', '2009-08-20 13:58:30', 'Servlet', 'Respose Redirect VS Request Dispatch ★', '* 요청 디스패치 : 고객의 요청을 대신 처리해달라고 동료에게 부탁\r\n* 응답 리다이렉트 : 고객에게 다른 동료에게 요청하라고 부탁\r\n\r\n[ Request Dispatch ]\r\n-----------------------------------------------------------------------\r\nRequestDispatcher dispatcher = request.getRequestDispatcher("view.jsp");\r\ndispatcher.forward(request, response);\r\n-----------------------------------------------------------------------\r\n - 서버(켄테이너)에 명령\r\n - a.jsp에서 브라우져 안 거치고 바로 요청을 b.jsp로 넘김\r\n - 두 jsp 사이에 request객체로 데이터 공유 가능\r\n - 브라우져 주소창의 url이 동일\r\n\r\n[ Respose Redirect ]\r\n-----------------------------------------------------------------------\r\nresponse.sendRedirect("result.do");\r\n-----------------------------------------------------------------------\r\n - 클라이언트(브라우져)에 명령\r\n - 두 jsp 사이에 request객체로 데이터 공유 불가\r\n - 브라우져 주소창의 url이 변경\r\n - 꼭 사용해야할 경우 : 등록, 가입 시에... (새로고침 때문에)', '', '', 23, 0),
(592, '', '서대영', '', '2009-08-20 15:32:42', 'Explorer', '브라우져 언어 설정', '[도구] - [인터넷옵션] - [언어] 버튼\r\n\r\nko : 한국어\r\nen : 영어\r\n\r\n\r\n\r\n============================== FILE ==============================\r\nbrowser_lang.jpg', '', 'browser_lang.jpg', 4, 0),
(593, '', '서대영', '', '2009-08-20 21:15:07', 'Oracle', '오라클 10g 드라이버', '\r\n\r\n\r\n\r\n============================== FILE ==============================\r\nojdbc14.jar', '', 'ojdbc14.jar', 1, 0),
(595, '', '서대영', '', '2009-08-21 08:49:09', 'JSP', 'JSTL 태그 종류', 'Java Standard Tag Library 자바 표준 커스텀 태그\r\n\r\n□ Core ★★\r\n - 언어의 가장 기초적 기능\r\n - if, for, set\r\n\r\n□ Formatting ★\r\n - data format\r\n - 에러 메세지, 국제화 페이지 (message resource file 이용)\r\n\r\n□ SQL\r\n - Tag로 DBMS\r\n\r\n□ XML\r\n - XML에 file에서 data 추출', '', '', 14, 0),
(596, '', '서대영', '', '2009-08-21 13:48:20', 'Struts', 'Struts 설치', '1. jakarta-struts-1.2.4 폴더의 lib 폴더 내의 jar 파일은 모두\r\n$App/WEB-INF/lib 로 복사\r\n\r\n2. jakarta-struts-1.2.4 폴더의 lib 폴더 내의 그 외 파일들은 모두 $App/WEB-INF 로 복사\r\n\r\n3. web.xml 에 아래 코드 추가\r\n	<servlet>\r\n		<servlet-name>action</servlet-name>\r\n		<servlet-class>\r\n			org.apache.struts.action.ActionServlet\r\n		</servlet-class>\r\n		<init-param>\r\n			<param-name>config</param-name>\r\n			<param-value>/WEB-INF/struts-config.xml</param-value>\r\n		</init-param>\r\n	</servlet>\r\n	<servlet-mapping>\r\n		<servlet-name>action</servlet-name>\r\n		<url-pattern>*.do</url-pattern>\r\n	</servlet-mapping>', '', '', 14, 0),
(597, '', '서대영', '', '2009-08-21 13:50:43', 'Struts', 'Struts 주요 클래스', '□ ActionServlet 클래스\r\n - 요청을 맨 처음 맞이하는 대문역할만\r\n - web.xml에 등록해야 함\r\n - HttpServlet을 구현\r\n  + init() : 환경설정(struts-config) 세팅 \r\n  + service() : requestPrcessor 클래스의 process 메서드 호출\r\n  + destory() : 객체 소멸\r\n\r\n□ Request Processor 클래스\r\n - process()\r\n  + request로 부터 ActionForm 생성  \r\n  + 각 Action 클래스의 excute() 함수 호출\r\n - processXxx() : 기타 처리\r\n\r\n□ Action 클래스\r\n - 모델의 이용방법 정의\r\n - 개발자에 의해 구현\r\n - Actionforward excute(request, response, actionForm, actionMapping) 함수\r\n - return mapping.findForward("뷰이름")\r\n - 여러가지 action 패키지 지원 : ForwardAction, IncludeAction\r\n\r\n□ Action Form 클래스\r\n - Client Request Data Buffer \r\n - VO 클래스와 유사 : 맴버변수, getter, setter\r\n - ActionErrors validate() : 유효성 검증\r\nerros 사이즈가 0이면 유효하다고 인식\r\n───────────────────────────────────\r\n	public ActionErrors validate(ActionMapping mapping,\r\n			HttpServletRequest request) {\r\n		// TODO Auto-generated method stub\r\n		ActionErrors errors=new ActionErrors();\r\n		\r\n		if(id == null || id.length()<1)\r\n			errors.add("id" , new ActionMessage("id required"));\r\n		if(pw == null || pw.length()<1)\r\n			errors.add("pw", new ActionMessage("pw required"));\r\n		\r\n		return errors;\r\n	}\r\n───────────────────────────────────\r\n\r\n□ ActionForward 클래스\r\n - Action과  View 맵핑\r\n - 맵구조', '', '', 16, 0),
(598, '', '서대영', '', '2009-08-21 14:24:49', 'Framework', 'Java F/W 정리', 'F/W는 2003년 이후 나온 Java 준표준\r\n\r\n□ Presentation Layer : 표준 JSP/Servele 역할\r\n - Struts\r\n - Spring MVC\r\n\r\n□ Business Layer : 표준 EJB 역할\r\n - Spring\r\n\r\n□ Data Persistence : 표준 JDBC 역할\r\n - Hibernate (ORM F/W)\r\n - iBatis (Data Mapper)', '', '', 4, 0),
(599, '', '서대영', '', '2009-08-21 14:45:28', 'Struts', 'Struts 환경설정 (struts-config.xml)', 'http://struts.apache.org/1.3.10/userGuide/building_controller.html#4_8_Writing_Action_Mappings\r\n\r\n\r\n1. ActionForm 클래스 등록\r\n\r\n<form-beans>\r\n  <form-bean name="loginForm" type="struts.LoginForm"></form-bean>\r\n</form-beans>\r\n\r\n2. Action 클래스 맵핑 등록\r\n - path : 요청 패턴 (/ + 확장자를 제외한 파일명)\r\n - type : 요청을 처리할 Action 클래스\r\n - name : 파라미터값를 담을 ActionForm\r\n - validate : 유효성 체크 유무\r\n - input : 유효하지 않은 경우 보여줄 View\r\n - scope :  ActionForm의 데이터 공유 범위\r\n <forward> 태그\r\n - name : ActionForward 이름 (mapping.findForward 메서드의 매거변수로 이용)\r\n - path : 보여줄 View 경로 \r\n\r\n<action-mappings>\r\n  <action path="/login" type="struts.LoginAction" name="loginForm" validate="true" input="/loginView.jsp">\r\n  <forward name="success" path="/ok.jsp"></forward>\r\n  <forward name="fail" path="/loginView.jsp"></forward>\r\n  </action>\r\n</action-mappings>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\r\n<?xml version="1.0" encoding="iso-8859-1"?>\r\n<!DOCTYPE struts-config PUBLIC\r\n          "-//Apache Software Foundation//DTD Struts Configuration 1.2//EN"\r\n          "http://struts.apache.org/dtds/struts-config_1_2.dtd">\r\n<struts-config>\r\n	<data-sources />\r\n	<form-beans>\r\n		<form-bean name="loginForm" type="struts.LoginForm"></form-bean>\r\n	</form-beans>\r\n	<global-exceptions />\r\n	<global-forwards></global-forwards>\r\n	<action-mappings>\r\n		<action path="/login" type="struts.LoginAction" name="loginForm"\r\n			validate="true" input="/loginView.jsp">\r\n			<forward name="success" path="/ok.jsp"></forward>\r\n			<forward name="fail" path="/loginView.jsp"></forward>\r\n		</action>\r\n	</action-mappings>\r\n	<message-resources parameter="MessageResources" />\r\n</struts-config>\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/redho07?Redirect=Log&logNo=30033351848', 'http://blog.naver.com/redho07?Redirect=Log&logNo=30033351848', '', 24, 0),
(600, '', '서대영', '', '2009-08-21 15:29:40', 'Framework', 'Spring MVC', 'Struts 보다 요즘 각광 받음, 개발자에게 유연한 환경 제공.\r\n하지만 이미 Struts로 구현된게 워낙 많음\r\n\r\nSimpleUrlHandlerMapping에서 model 을 같이 넘기기 때문에,\r\nel과 함께 사용하면 java 코드를 싹 제거 할 수 있음.\r\n\r\n□ ViewResolver 클래스\r\n - Contolloer 클래스에서 ModelAndView(view, model, model)를 호출할 때', '', '', 11, 0),
(601, '', '서대영', '', '2009-08-23 00:54:33', 'JSTL', 'JSTL 태그 라이브러리 사용법', '□ 다운로드\r\nhttp://tomcat.apache.org/taglibs/standard/\r\n버젼 1.1 (JSP 2.0) 또는 1.0 (JSP 1.2) 다운로드\r\n\r\n□ 클래스패스 설정\r\n첨부된 jar 파일만 App나 Server의 lib폴더에 두면 web.xml 설정이나 tld 파일 생성할 필요 없이 JSTL 사용 가능\r\n\r\n□ 선언\r\n1.1\r\n<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>\r\n<%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt" %>\r\n\r\n1.0\r\n<%@ taglib uri="http://java.sun.com/jstl/core_rt" prefix="c_rt" %>\r\n<%@ taglib uri="http://java.sun.com/jstl/fmt_rt" prefix="fmt_rt" %>\r\n\r\n※ _rt 안 붙이면 자바코드 못 넣음\r\nvalue가 들어갈 자리에 JSP 표현식을 사용하기 위해서는 RT(request time) 기반의\r\n     액션을 사용 합니다. 보통은 EL을 사용하지만 RT 기반의 액션도 이용 가능 한겁니다.\r\n  taglib 지시자에서 uri와 prefix에 _rt 만 붙여 RT기반 액션을 이용 가능 합니다.\r\n\r\n\r\n\r\n□ 화면 출력\r\n- id값 출력 (null 일때는 guest 출력 ★)\r\n<c:out value="${param.id }" default="guest">\r\n\r\n□ 변수 대입\r\n- el로 대입\r\n<c:set var="id" value="dale0713" scope="{page|request|session|application}">\r\n- 객체에 대입\r\n<c:set target="<%=vo %>" value="dale.seo@gamail.com" property="email" />\r\n\r\n\r\n□ if 문\r\n\r\n<c:set var="action" value="free.do?method=add" />\r\n<c:if test="${param.method == ''modify'' }">\r\n	<c:set var="action" value= "free.do?method=modify" />\r\n</c:if>\r\n\r\n□ if - else 문\r\n\r\n<% String action = "free.do?method="; %>\r\n<c:choose>\r\n	<c:when test=''<%=request.getParameter("method").equals("add") %>''>\r\n		<% action += "add"; %>\r\n	</c:when>\r\n	<c:otherwise>\r\n		<% action += "modify"; %>\r\n	</c:otherwise>\r\n</c:choose>\r\n\r\n\r\n□ for 루프\r\n- 리스트 출력\r\n	<c:forEach var="vo" items="${requestScope.list }">\r\n		<tr>\r\n			<td>${vo.employeeID }</td>\r\n			<td>${vo.firstName } ${vo.lastName }</td>\r\n			<td>${vo.email }</td>\r\n			<td>${vo.phoneNumber }</td>\r\n		</tr>\r\n	</c:forEach>\r\n- 1~10 출력\r\n<c:forEach var="i" begin="0" end="9">\r\n	${i }\r\n</c:forEach>', '', '', 65, 0),
(602, '', '서대영', '', '2009-08-23 03:40:53', 'JSP', 'EL이 안되는 환경에서 JSTL을 이용해 리스트 출력', '	<%\r\n		ArrayList<EmployeeVO> list = (ArrayList<EmployeeVO>) request.getAttribute("list");\r\n	%>\r\n	\r\n	<% int i = 0; %>\r\n	<c:forEach items="<%=list %>">\r\n		<% EmployeeVO vo = list.get(i++); %>\r\n		<tr>\r\n			<td><%=vo.getEmployeeID()%></td>\r\n			<td><%=vo.getFirstName()%> <%=vo.getLastName()%></td>\r\n			<td><%=vo.getEmail()%></td>\r\n			<td><%=vo.getPhoneNumber()%></td>\r\n		</tr>\r\n	</c:forEach>', '', '', 13, 0),
(603, '', '서대영', '', '2009-08-23 12:43:36', 'CSS', 'common.css', '.rtop, .rbottom{display:block; background: white;}\r\n.rtop *, .rbottom *{display: block; height: 1px; overflow: hidden; background: red;}\r\n.r1{margin: 0 5px}\r\n.r2{margin: 0 3px}\r\n.r3{margin: 0 2px}\r\n.r4{margin: 0 1px; height: 2px} \r\n\r\nimg {border-width:0; vertical-align: top;}\r\n\r\n@font-face {font-family:티티체; src:url(../font/ttche9.eot);}\r\n@font-face {font-family:영원체; src:url(../font/forever10.ewf);}\r\n@font-face {font-family:친구체; src:url(../font/chin9.eot);}\r\n\r\nth {font-size:9pt; font-family:티티체; color:dimgray; line-height:160%; vertical-align: top; background-color:white} \r\ntd {font-size:9pt; font-family:티티체; color:dimgray; line-height:160%; vertical-align: top; background-color:white}\r\n\r\n.frame {font-size:10pt; font-family:영원체; color:white;}\r\n.frame a:link     {color:#ffffff; text-decoration:none;}\r\n.frame a:visited  {color:#ffffff; text-decoration:none;}\r\n.frame a:active   {color:#ffffff; text-decoration:none;}\r\n.frame a:hover   {color:#cccccc; text-decoration:none;}\r\n\r\n.frame {font-size:10pt; font-family:영원체;}\r\n\r\na {selector-dummy: expression(this.hideFocus=true);}\r\na:link     {color:dimgray; text-decoration:none;}\r\na:visited  {color:dimgray; text-decoration:none;}\r\na:active   {color:dimgray; text-decoration:none;}\r\na:hover   {color:#cccccc; text-decoration:none;}\r\n\r\ninput, textarea, select {border:1 solid #cccccc; font-size:9pt; font-family:티티체; color:dimgray}\r\n\r\nbody {\r\n\r\n	margin-left:0;\r\n	margin-right:0;\r\n	scrollbar-face-color:white;\r\n	scrollbar-highlight-color:#cccccc;\r\n	scrollbar-3dlight-color:white;\r\n	scrollbar-darkshadow-color:white;\r\n	scrollbar-track-color:white;\r\n	scrollbar-arrow-color:#cccccc;\r\n	scrollbar-shadow-color:#cccccc;\r\n	\r\n}\r\n\r\n\r\n\r\n============================== FILE ==============================\r\ncommon.css', '', 'common.css', 21, 0),
(604, '', '서대영', '', '2009-08-23 14:20:55', 'Weblogic', 'Struts actions 패키지', '- Struts에서 제공하는 일반적인 Action\r\n\r\n□ ForwardAction\r\n - action 클래스에서 처리할 B/L이 없을 때\r\n - action 태그 아래 forward 태그를 사용하는 대신\r\n - action 태그의 parameter 속성에 view 페이지 설정\r\n\r\n		<action path="/free/form" parameter="/free/form.jsp"\r\n			type="org.apache.struts.actions.ForwardAction" name="CommonForm">\r\n		</action>', '', '', 1, 0),
(605, '', '서대영', '', '2009-08-28 11:55:39', 'Weblogic', 'jsp_servlet 폴더 위치', 'weblogic.xml 파일 내의 아래 설정 확인\r\n\r\n\r\n    <jsp-param>\r\n      <param-name>workingDir</param-name>\r\n      <param-value>/acube/measkp/km/km_work</param-value>\r\n    </jsp-param>\r\n\r\n위 설정이 없을 경우, bea 도멘인 루트 아래 생긴다.\r\n/opt/bea/user_projects/domains/euroskp/myserver/.wlnotdelete/extract/myserver_acubeidir_web/jsp_servlet', '', '', 12, 0),
(606, '', '서대영', '', '2009-08-28 17:25:30', 'Java', 'Collections 컬렉션', 'Collections.sort(컬렉션 타입); 오름차순 정렬\r\n\r\nCollections.binarySearch(list, "a") : 리스트에서 "a"의 인덱스를 반환\r\n\r\n		ArrayList a = new ArrayList();\r\n		a.add("1");\r\n		a.add("2");\r\n		a.add("3");\r\n		a.add("4");\r\n		a.add("5");\r\n		a.add("6");\r\n		a.add("7");\r\n		a.add("8");\r\n		\r\n		System.out.println(a);\r\n		\r\n		Comparator c = Collections.reverseOrder();\r\n		Collections.sort(a, c);\r\n		\r\n		System.out.println(a);\r\n		\r\n		int result = Collections.binarySearch(a, "6",c);\r\n		\r\n		System.out.println(result);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// TreeSet : 원소들을 정렬된 상태로 유지하며 원소가 중복되어 들어가지 않게 해줍니다.\r\n// HashMap : 원소들을 이름/값 쌍 형식으로 저장하고 접근할 수 있게 해줍니다.\r\n// LinkedList : 컬렉션 중간에서 원소를 추가하거나 삭제하는 작업을 더 빠르게 처리할 수 있게 해주는 컬렉션입니다.\r\n// HashSet : 컬렉션에 중복된 원소가 들어가지 않도록 해주고, 컬렉션 내에서 어떤 원소를 빠르게 찾을 수 있게 해줍니다.\r\n// LinkedHashMap : 일반 HashMap과 거의 똑같지만 원소(이름/값 쌍)가 삽입된 순서를 그대로 유지시켜줄 수도 있고, 원소에 마지막으로 접근했던 순서를 기억하도록 설정할 수도 있다는 점이 다릅니다.\r\n', '', '', 15, 0),
(607, '', '서대영', '', '2009-08-29 22:01:22', 'Java', 'import static', 'Java 5.0에서 추가된 static import 기능이 있다. static 메소드나 static 변수를 접근하기 위해 해당 클래스의 이름과 함께 써 주어야 한다. 하지만 유틸리티성 메소드나 상수의 경우 일일이 클래스 이름을 써주기 귀찮은 경우가 있는데 이 경우 static import를 사용하면 클래스 이름 없이 static 메소드나 static 변수 이름만으로 사용할 수 있다.\r\n\r\n좀 찾아보니 가장 만만한 예제는 java.lang.Math인가보다. @ㅅ@ static 메소드나 변수가 많아서 그런가.. 그래서 나는 java.util.Calendar를 사용하기로 했다. -ㅅ- 왜냐?? 똑같은건 재미 없잖아~ ㅋㅋ 사실 Calendar를 쓰면서 Calendar.YEAR, Calendar.MONTH, Calendar.DATE 같이 Calendar 클래스명을 계속 쓰는게 귀찮았다 -ㅅ-;;;\r\n\r\n\r\nimport static java.util.Calendar.*; // static import 사용(".*" 주의 ㅋ)\r\n\r\nimport java.util.Calendar;\r\n\r\npublic class StaticImportTest\r\n{\r\n    public static void main(String [] args)\r\n    {\r\n        Calendar cal = getInstance();\r\n        System.out.println(cal.get(DATE) + "/" + (cal.get(MONTH) + 1) + "/" + cal.get(YEAR));\r\n    }\r\n}\r\n\r\n\r\nstatic import를 사용하지 않으면 아래와 같이 써야 한다.\r\n\r\n\r\nimport java.util.Calendar;\r\n\r\npublic class StaticImportTest\r\n{\r\n    public static void main(String [] args)\r\n    {\r\n        Calendar cal = getInstance();\r\n        System.out.println(cal.get(Calendar.DATE) + "/" + (cal.get(Calendar.MONTH) + 1) + "/" + cal.get(Calendar.YEAR));\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://entireboy.egloos.com/3954885', 'http://entireboy.egloos.com/3954885', '', 5, 0),
(608, '', '서대영', '', '2009-08-30 00:38:41', 'Java', 'assert 검증', '주석 대신 테스트에 사용\r\n\r\nassert boolean-value;\r\nassert boolean-value message;\r\n\r\njava -ea 클래스명 :  assert 켜기\r\njava 클래스명 : assert 끄기\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/changgaman?Redirect=Log&logNo=60001988495', 'http://blog.naver.com/changgaman?Redirect=Log&logNo=60001988495', '', 6, 0),
(609, '', '서대영', '', '2009-08-30 01:40:07', 'Java', 'IllegalArgumentException', 'if (value == null) {\r\nthrow new IllegalArgumentException(”value is null”);', '', '', 5, 0),
(610, '', '서대영', '', '2009-09-06 16:13:54', 'HTTP', 'HTTP 프로토콜 - 클라이언트의 요청 메시지 & 서버 응답 메시지', '=======================================\r\n\r\n클라이언트의 요청은 3가지로 구성된다.\r\n\r\n* 요청의 시작부분\r\n: HTTP 명령어, URI, HTTP 버전 번호\r\n\r\n* 헤더 정보\r\n: 클라이언트 자체 정보, 서버로 보내의 데이타에 대한 정보를 제공하는 헤더정보\r\n\r\n* 요청 메시지 바디\r\n: 서버에 보내는 데이타\r\n\r\n=======================================\r\n\r\n서버 응답 메시지는 다음 3가지로 구성된다.\r\n\r\n* 응답 시작 부분\r\n: HTTP 버전, 상태 코드, 코드설명\r\n-상태코드 예)100~199[참고정보], 200~299[요청성공], 300~399[방향재지장], 400~499[요청불완전], 500~599[서버에러]\r\n\r\n* 응답헤더\r\n\r\n* 응답 메시지 바디\r\n\r\n[출처] [WEB] HTTP 프로토콜 - 클라이언트의 요청 메시지 & 서버 응답 메시지|작성자 선인장\r\n\r\n', '', '', 5, 0),
(611, '', '서대영', '', '2009-09-08 15:45:17', 'Unix', 'find 명령어 -mtime, -mmin 옵션', '-mtime -d\r\n\r\n현재부터 d전일까지 수정된 파일\r\n\r\n* 하루 내에 수정된 파일 검색\r\nfind . -type f -mtime -1\r\n\r\n* 1시간 내에 수정된 파일 검색\r\nfind . -type f -mmin -60\r\n\r\n-mtime d\r\n\r\nd전일에 수정된 파일\r\n\r\n-mtime +d\r\n\r\nd전일 이전에 수정된 파일', '', '', 20, 0),
(612, '', '서대영', '', '2009-09-14 13:17:30', 'Toad', '자동 키워드 대문자 변환', '<토드 version 9 >\r\nEidtor 화면에서 오른쪽 마우스 버튼 > Editing Options > Language 항복에서 PL/SQL 선택 확인 > Edit 버튼 클릭 > Highlighting tab > Style = Reserved Word 와 SQL Functions 선택 > 오른쪽에서 Captializaiton Effect 를 Uppercase 로 설정\r\nStyle = User Tables 와 Views 선택 > Lowercase 로 설정\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<토드 version 8.6.0.38>\r\n\r\n \r\n\r\nsql 입력시 select 나 where 처럼 키워드를 자동으로 대문자로 변환되도록 설정\r\n\r\n \r\n\r\n1. editor 에서 오른쪽마우스 클릭\r\n\r\n2. Editing Options 클릭\r\n\r\n3. General Options 에서 Display Options 펼침\r\n\r\n4. Apply capitalization effects 체크\r\n[출처] [토드] 키워드 대문자로 자동 변환|작성자 심진\r\n\r\n\r\n\r\n\r\n\r\n\r\n============================== FILE ==============================\r\ntoad9.JPG', '', 'toad9.JPG', 6, 0),
(613, '', '서대영', '', '2009-09-14 13:21:50', 'Toad', '토드 단축키', '테이블 정보 상세보기\r\n\r\nF4 : Table, View, Proc, Funct, Package를 DESC(테이블명 위에 커서를 두고 F4키) \r\n\r\n \r\n\r\n자동완성\r\n\r\nCtrl+. : Table Completion (매칭되는 테이블목록 출력) \r\n\r\nCtrl+T : Columns Dropdown (해당테이블의 컬럼목록 표시) \r\n\r\n \r\n\r\nSQL문 실행\r\n\r\nF5 : SQL Editor내의 모든 SQL문 실행\r\n\r\nCtrl+Enter : 현재 커서의 SQL문 실행 \r\n\r\nF9 : SQL문 실행 후 Grid에 출력\r\n\r\n \r\n\r\n히스토리(과거 수행SQL문 조회)\r\n\r\nF8 : 과거에 실행한SQL문 HISTORY 목록\r\n\r\nAlt+Up : History UP\r\n\r\nAlt+Down : History DOWN\r\n\r\n \r\n\r\n텍스트 대/소문자 변환\r\n\r\nCTRL+L : 텍스트를 소문자로\r\n\r\nCTRL+U : 텍스트를 대문자로\r\n\r\n \r\n\r\n주석처리\r\n\r\nCtrl+B : 주석처리\r\n\r\nCtrl+Shift+B : 주석해제\r\n\r\n \r\n\r\n편집 창 전환(이동)\r\n\r\nF6 : SQL Editor와 결과창간의 이동\r\n\r\nF2 : SQL Editor창 전체화면 전환\r\n\r\nShift+F2 : Grid Output창 전체화면 전환\r\n\r\n \r\n\r\n기타 단축키\r\n\r\nF7 : 화면을 모두 CLEAR\r\n\r\nCtrl+Shift+F : 쿼리문을 보기좋게 정렬\r\n\r\nCtrl+F9 : SQL문 Validate (SQL문을 수행하지 않음)\r\n\r\n', '', '', 7, 0),
(614, '', '서대영', '', '2009-09-14 14:23:05', 'Weblogic', '칼럼 추가 쿼리', 'ALTER TABLE cttfile \r\nADD (stdkey VARCHAR(200) NULL)', '', '', 0, 0),
(615, '', '서대영', '', '2009-09-14 22:46:18', 'Network', '소켓을 이용한 자바 텔넷 프로그램', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.daum.net/question0921/110', 'http://blog.daum.net/question0921/110', '', 3, 0),
(616, '', '서대영', '', '2009-09-17 15:46:05', 'JDBC', 'ResultSetMetaData', '			resultSet = statement.executeQuery();\r\n			ResultSetMetaData metaData = resultSet.getMetaData();\r\n			\r\n			int count = metaData.getColumnCount(); \r\n			\r\n			HashMap map = null;\r\n			String name = "";\r\n			String data = "";\r\n			\r\n			for (;resultSet.next(); list.add(map)) {\r\n								\r\n				map = new HashMap();\r\n				\r\n				for (int i = 0; i < count; i++) {\r\n					\r\n					name = metaData.getColumnName(i + 1).toLowerCase();\r\n					data = resultSet.getString(i + 1);\r\n					map.put(name, data);\r\n					\r\n				}\r\n			\r\n			}\r\n\r\n\r\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\r\n\r\n\r\n\r\n\r\n\r\n\r\njava에서 jdbc를 통해서 데이터베이스에 쿼리를 날린 결과를 가져올때 사용하는 것이\r\n\r\nResultSet이죠.(순수 데이터만을 가집니다.)\r\n\r\n \r\n\r\nResultSetMetaData는 \r\n해당 ResultSet의 데이터 이외에 대한 정보를 가져오는 데에 사용합니다.\r\n\r\n컬럼의 이름/타입류의 데이터를 말합니다.\r\n\r\n테이블을 생성할때 들어가는 옵션 정보들(NOT NULL 속성, 숫자타임인 경우 자릿수 정보등)도 가져올수가 있습니다.\r\n\r\njdbc를 이용하는 경우, 순수 데이터에만 관심을 가지는 경우라면 ResultSet으로 충분하나,\r\n\r\n그외의 정보가 필요한 경우에는 ResultSetMetaData의 정보가 필요한 경우가 있습니다.\r\n\r\n(얼마전에 저의 경우 특정 컬럼의 타입에 따라서 다른 처리를 하는 작업을 한 적이 있는데요. 그런 경우라면 반드시 사용하여야 겠죠.)\r\n\r\n 다음은 javadoc의 내용일부입니다.\r\n\r\nResultSet rs = stmt.executeQuery("SELECT a, b, c FROM TABLE2");\r\nResultSetMetaData rsmd = rs.getMetaData();\r\nint numberOfColumns = rsmd.getColumnCount();\r\n\r\n-------------------------------------------------------------\r\n\r\n\r\n\r\nResultSetMetaData resultsetmetadata = resultset.getMetaData();\r\nint j = resultsetmetadata.getColumnCount();\r\n\r\n\r\nhashtable.put(resultsetmetadata.getColumnLabel(k + 1).toUpperCase(), Long.toString(l1));', '', '', 9, 0),
(617, '', '서대영', '', '2009-09-27 00:13:28', 'Java', 'CSV파일 파싱', 'StringTokenizer 클래스보다 String 클래스의 split() 매서드를 쓰는게 편함\r\n\r\n\r\n	void addSong(String lineToParse) {\r\n		\r\n		String[] tokens = lineToParse.split(",");\r\n		\r\n		Song nextSong = new Song(tokens[0], tokens[1], tokens[2], tokens[3]);\r\n		songList.add(nextSong);\r\n		\r\n	}', '', '', 7, 0),
(618, '', '서대영', '', '2009-09-28 15:47:10', 'Unix', '파일갯수 세기', 'ls | wc -l\r\n: 디렉토리 네 파일갯수 세기\r\n\r\nfind . -name *.class | wc -l\r\n: 모든 class 파일갯수 세기', '', '', 2, 0),
(619, '', '서대영', '', '2009-10-06 23:22:10', 'Java', 'ArrayList VS Vector / HashMap VS HashTable', 'ArrayList, HashMap : 빠름, 싱글쓰레드용\r\nVector, HashTable : 느림, 멀티쓰레드용 \r\n\r\n\r\n\r\n이  둘의  차이점을  잘  모르겠네요\r\n책에는  HashMap이  Hashtable보완되어  나왔다고만  되어  있는데\r\n사용하는거  보니깐  그렇지  않은거  같아서요\r\n아직도  Hashtable을  많이  사용도  되고  있는거  같고...\r\n\r\n------------------------------------------------------------------------------\r\n\r\n\r\nHashMap  이나  Hashtable  이나  둘다  Map  인터페이스를  implements  하고있지만  프로그래밍  환경에  따라서  적절한  놈으로  골라써야  합니다.\r\n\r\n\r\n\r\njava  API  문서에  보면\r\n\r\nThe  HashMap  class  is  roughly  equivalent  to  Hashtable,  except  that  it  is  unsynchronized  and  permits  nulls\r\n\r\n"간략히  말해서  HashMap  은  Hashtable과  같다,  다만  HashMap  이  unsynchronized  하고  null  값을  허용할  뿐이다."\r\n\r\n그러면  Hashtable  에는  null  값이  들어갈  수  없다는건가?  이건  잘  모르겠지만  님께서  Hashtable  만들어놓고  null  키값과  null  value  를  함  넣어보시면  확인하실  수  있을  듯...\r\n\r\n중요한  건  HashMap은  멀티쓰레드  환경에서  사용하면  안된다는  겁니다.\r\n\r\n여러개의  쓰레드가  동시에  HashMap  을  건드려서  key,  value  를  써넣게  되면  문제가  발생할  수  있다,  뭐  이런것  같습니다.  멀티쓰레드  프로그래밍  환경에서는  HashMap  을  쓰면  안되고  Hashtable  을  써야  한다는  거죠...\r\n\r\n단일  쓰레드  환경에서  Hashtable  을  쓰더라도  별  문제는  없는데,  HashMap보다는  성능이  저하될  수  있습니다.', '', '', 9, 0),
(620, '', '서대영', '', '2009-10-07 00:59:53', 'Unix', 'hc (Health Check)', '반드시 실행시켜야할 &#49761;파일 리스트 보여줌', '', '', 0, 0),
(621, '', '서대영', '', '2009-10-08 17:20:21', 'Unix', '기본 명령어', 'exit (Ctrl + d)\r\n로그아웃\r\n\r\ndate\r\n일시\r\n\r\nid\r\n사용자ID와 그룹ID\r\n\r\nwho\r\n현재 로그인한 사용자 정보\r\n\r\nwhoami\r\n사용자 ID\r\n\r\npasswd\r\n로그인 패스워드 변경\r\n\r\nhostname\r\n시스템 이름\r\n\r\nuname -a\r\n운영체제 정보\r\n\r\nman 섹션번호 명령어\r\n온라인 메뉴얼\r\n\r\necho 문자열\r\n메시지 출력\r\n\r\nbanner 문자열\r\n큰 글자로 출력\r\n\r\nwrite 사용자ID\r\n메세지 전송\r\n\r\nmesg y, n 메시지 수신 설정\r\n\r\nmail 사용자ID\r\n메일 전송\r\n\r\nmail\r\n메일 확인\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n', '', '', 23, 0),
(622, '', '서대영', '', '2009-10-08 17:33:08', 'Unix', '파일관리 명령어', 'pwd\r\n작업 디렉토리 절대경로\r\n\r\nls\r\n디렉토리 밑의 파일/디렉토리 정보\r\n-a 모든 파일\r\n-ㅣ 세부정보(유형, 모드, 링크수, 소유자, 그룹, 크기, 수정일 이름)\r\n-R 하위디렉토리까지 재귀적으로\r\nls 정규식\r\n파일 정보 표시\r\n\r\ncd 경로\r\n디렉토리 변경\r\ncd -l\r\n이전 경로\r\n\r\nfind 경로 -name 정규식\r\n파일 검색\r\n\r\nmkdir 디렉토리명\r\n디렉토리 생성\r\n\r\nrmdir 디렉토리명\r\n디렉토리 삭제\r\n\r\ncat 파일명\r\n파일 내용\r\n\r\nmore\r\n파일 내용을 스크린 단위로\r\n\r\ntail -줄수, -f 파일명\r\n파일 내용의 끝부분\r\n-f 실시간 표시\r\n\r\nhead -줄수 파일명\r\n파일 내용의 앞부분\r\n\r\ncp 경로1 경로2 \r\n파일 및 디렉토리 복사\r\n-i 목적지에 파일이 존재할 경우 확인 메시지 표시\r\n-r 하위 디렉토리까지 복사\r\n\r\nmv 경로1 경로2 \r\n파일 및 디렉토리 이동\r\n-i 목적지에 파일이 존재할 경우 확인 메시지 표시\r\nmv aaa bbb\r\naaa 폴더 이름을 bbb로 변경\r\n\r\nrm 파일 및 디렉토리명\r\n -f : 지정된 파일들을 삭제. 오류가 발생해도 사용자에게 아무것도 알리지 않는다.\r\n -r : 모든 디렉토리의 내용을 재귀적으로 지움\r\n -i : 사용자에게 삭제를 확인\r\n', '', '', 5, 0),
(623, '', '서대영', '', '2009-10-16 20:53:44', 'Swing', '창위치, 닫기설정, 보이기', '	/**\r\n	 * 창위치, 닫기설정, 보이기\r\n	 */\r\n	private void setFrame() {\r\n		\r\n		try {\r\n			\r\n			UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");\r\n			\r\n		} catch (Exception e) {\r\n			\r\n			e.printStackTrace();\r\n		}\r\n\r\n		setBounds(300, 200, 800, 600);\r\n		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n		setVisible(true);\r\n\r\n	}', '', '', 2, 0),
(624, '', '서대영', '', '2009-10-20 18:24:30', 'Java', 'java 명령어 옵션', 'o 표준옵션 \r\n\r\n    -cp -classpath <:으로 구분한 디렉토리 및 zip/jar 파일> \r\n              애플리케이션 클래스 및 자원을 위한 검색 경로 설정 \r\n    -D<name>=<value> \r\n              시스템 속성 설정 \r\n    -verbose[:class|gc|jni] \r\n              verbose 출력 모드 활성화 \r\n    -version  제품 버전 출력 \r\n    -showversion  제품 버전을 출력하고 계속 진행 \r\n    -? -help  도움말 출력 \r\n    -X        비표준 도움말 출력 \r\n[출처] Java Command 옵션 정리|작성자 짱가\r\n\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://docs.oracle.com/javase/1.3/docs/tooldocs/solaris/java.html', 'http://docs.oracle.com/javase/1.3/docs/tooldocs/solaris/java.html', '', 10, 0),
(625, '', '서대영', '', '2009-10-21 10:38:00', 'Unix', 'sh 명령어', 'sh <파일명>\r\n\r\n실행권한이 없어도 파일을 실행시켜주기 때문에 편리', '', '', 0, 0),
(626, '', '서대영', '', '2009-10-27 19:47:05', 'Unix', 'ln 명령어 : 파일 및 디렉토리 링크', '□ Symbolic Link\r\n\r\nln -s <file1> <file2>\r\n\r\nfile1 → file1''s inode → data\r\nfile2 → file2''s inode → file1''s inode\r\n\r\n=> 왼도우의 바로가기와 비슷한 기능.\r\n- 원본/사본의 구분이 있음\r\n- 서로 다른 inode 사용. 즉, 새로운 inode를 생성\r\n- 완복 삭제시 data 접근이 불가능\r\n- 이종 파일 시스템 간 링크 가능\r\n- file2의 사이즈가 매우 작음\r\n- 사용자가 원하는 일반적인 링크\r\n- 속도가 hard link보다 느리다\r\n\r\nln -sf\r\n\r\n기존에 같은 이름의 링크(즐겨찾기)가 있더라도 새로운 링크로 대체\r\n\r\n\r\n\r\n\r\n□ Hard Link\r\n\r\nln <file1> <file2>\r\n\r\nfile1 → file1''s inode → data\r\nfile2 → file1''s inode\r\n\r\n- 원본/사본의 구분이 없음\r\n- 서로 같은 inode 사용\r\n- 이종 파일 시스템 간 링크 불가능\r\n- 디렉토리 링크 불가능\r\n- file2의 사이즈는 file1과 같지만 실제로는 없다\r\n- 시스템이 사용\r\n- 속도가 빨라서 부팅에 사용\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/kezig?Redirect=Log&logNo=80025469263', 'http://blog.naver.com/kezig?Redirect=Log&logNo=80025469263', '', 15, 0),
(627, '', '서대영', '', '2009-10-29 16:06:58', 'Unix', 'diff 명령어 파일 내용 비교', 'diff Application.properties Application.properties_20090209\r\n\r\n\r\n□ 결과\r\n\r\nc(변경) : 시작라인번호, 끝라인번호c시작라인번호, 끝라인번호\r\na(추가)\r\nd(삭제)\r\n\r\n\r\n36,38c36,38\r\n< #LOGINHTTPS=https://202.99.58.118/\r\n< LOGINHTTPS=https://china.samsungportal.com/\r\n< #LOGINHTTPS=http://china.samsungportal.com:80/\r\n---\r\n> #LOGINHTTPS=https://202.99.58.119/\r\n> #LOGINHTTPS=https://china.samsungportal.com/\r\n> LOGINHTTPS=http://china.samsungportal.com:80/\r\n69d68\r\n< \r\n85c84\r\n< SMTP_HOST=202.99.58.118\r\n---\r\n> SMTP_HOST=109.10.1.54\r\n158c157\r\n< IDIRWAS=202.99.58.118:7001\r\n---\r\n> IDIRWAS=202.99.58.119:7001', '', '', 2, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(629, '', '서대영', '', '2009-11-06 20:20:30', 'Oracle', 'ORA 에러 정리', 'ORA-00900 invalid SQL statement \r\n\r\nCause: The statement is not recognized as a valid SQL statement. This error can occur if the Procedural Option is not installed and a SQL statement is issued that requires this option (for example, a CREATE PROCEDURE statement). You can determine if the Procedural Option is installed by starting SQL*Plus. If the PL/SQL banner is not displayed, then the option is not installed. \r\n\r\nAction: Correct the syntax or install the Procedural Option. \r\n\r\n\r\nORA-00901 invalid CREATE command \r\n\r\nCause: The CREATE command was not followed by a valid CREATE option. \r\n\r\nAction: Correct the syntax. \r\n\r\n\r\nORA-00902 invalid datatype \r\n\r\nCause: The datatype entered in the CREATE or ALTER TABLE statement is not valid. \r\n\r\nAction: Correct the syntax. \r\n\r\n\r\nORA-00903 invalid table name \r\n\r\nCause: A table or cluster name is invalid or does not exist. This message is also issued if an invalid cluster name or no cluster name is specified in an ALTER CLUSTER or DROP CLUSTER statement. \r\n\r\nAction: Check spelling. A valid table name or cluster name must begin with a letter and may contain only alphanumeric characters and the special characters $, _, and #. The name must be less than or equal to 30 characters and cannot be a reserved word. \r\n\r\n\r\nORA-00904 string: invalid identifier \r\n\r\nCause: The column name entered is either missing or invalid. \r\n\r\nAction: Enter a valid column name. A valid column name must begin with a letter, be less than or equal to 30 characters, and consist of only alphanumeric characters and the special characters $, _, and #. If it contains other characters, then it must be enclosed in double quotation marks. It may not be a reserved word. \r\n\r\n\r\nORA-00905 missing keyword \r\n\r\nCause: A required keyword is missing. \r\n\r\nAction: Correct the syntax. \r\n\r\n\r\nORA-00906 missing left parenthesis \r\n\r\nCause: A required left parenthesis has been omitted. Certain commands, such as CREATE TABLE, CREATE CLUSTER, and INSERT, require a list of items enclosed in parentheses. Parentheses also are required around subqueries in WHERE clauses and in UPDATE table SET column = (SELECT...) statements. \r\n\r\nAction: Correct the syntax, inserting a left parenthesis where required, and retry the statement. \r\n\r\n\r\nORA-00907 missing right parenthesis \r\n\r\nCause: A left parenthesis has been entered without a closing right parenthesis, or extra information was contained in the parentheses. All parentheses must be entered in pairs. \r\n\r\nAction: Correct the syntax and retry the statement. \r\n\r\n\r\nORA-00908 missing NULL keyword \r\n\r\nCause: Either of the following: In a CREATE TABLE or ALTER TABLE statement, NOT was entered to specify that no null values are allowed in that column, but the keyword NULL was omitted. In the IS [NOT] NULL logical operator, the keyword NULL was not found. For example, the following statement generates this message: \r\n\r\nSELECT * FROM EMP WHERE DEPTNO IS NOT; \r\n\r\n\r\nThe keyword NULL must follow the keywords IS NOT. \r\n\r\nAction: Correct the syntax. \r\n\r\n\r\nORA-00909 invalid number of arguments \r\n\r\nCause: An Oracle function was referenced with an incorrect number of arguments. All Oracle functions, except for SYSDATE, require at least one argument. \r\n\r\nAction: Correct the syntax of the function by entering the required number of arguments. \r\n\r\n\r\nORA-00910 specified length too long for its datatype \r\n\r\nCause: No size was specified for a character field or the size was invalid. A maximum length must be specified for each character column. The maximum value for this length varies for each character datatype, such as CHAR or VARCHAR2. \r\n\r\nAction: Enter a maximum length for the field. \r\n\r\n\r\nORA-00911 invalid character \r\n\r\nCause: Special characters are valid only in certain places. If special characters other than $, _, and # are used in a name and the name is not enclosed in double quotation marks ("), this message will be issued. One exception to this rule is for database names; in this case, double quotes are stripped out and ignored. \r\n\r\nAction: Remove the invalid character from the statement or enclose the object name in double quotation marks. \r\n\r\n\r\nORA-00913 too many values \r\n\r\nCause: The SQL statement requires two sets of values equal in number. This error occurs when the second set contains more items than the first set. For example, the subquery in a WHERE or HAVING clause may return too many columns, or a VALUES or SELECT clause may return more columns than are listed in the INSERT. \r\n\r\nAction: Check the number of items in each set and change the SQL statement to make them equal. \r\n\r\n\r\nORA-00914 missing ADD keyword \r\n\r\nCause: The keyword ADD does not precede one of the following: \r\n\r\nThe keyword log file in an ALTER DATABASE statement \r\nA column element or table constraint in an ALTER TABLE statement \r\nThe keyword DATAFILE in an ALTER TABLESPACE statement \r\nAction: Specify the keyword ADD in the ALTER statement. \r\n\r\n\r\nORA-00915 network access of dictionary table not currently allowed \r\n\r\nCause: This is an internal error message not usually issued. \r\n\r\nAction: Contact Oracle Support Services. \r\n\r\n\r\nORA-00917 missing comma \r\n\r\nCause: A required comma has been omitted from a list of columns or values in an INSERT statement or a list of the form ((C,D),(E,F), ...). \r\n\r\nAction: Correct the syntax. \r\n\r\n\r\nORA-00918 column ambiguously defined \r\n\r\nCause: A column name used in a join exists in more than one table and is thus referenced ambiguously. In a join, any column name that occurs in more than one of the tables must be prefixed by its table name when referenced. The column should be referenced as TABLE.COLUMN or TABLE_ALIAS.COLUMN. For example, if tables EMP and DEPT are being joined and both contain the column DEPTNO, then all references to DEPTNO should be prefixed with the table name, as in EMP.DEPTNO or E.DEPTNO. \r\n\r\nAction: Prefix references to column names that exist in multiple tables with either the table name or a table alias and a period (.), as in the examples above. \r\n\r\n\r\nORA-00919 invalid function \r\n\r\nCause: An entry was formatted like a function call, but it is not recognizable as an Oracle function. \r\n\r\nAction: Correct the syntax. \r\n\r\n\r\nORA-00920 invalid relational operator \r\n\r\nCause: A search condition was entered with an invalid or missing relational operator. \r\n\r\nAction: Include a valid relational operator such as =, !=, ^=, <>, >, <, >=, <=, ALL, ANY, [NOT] BETWEEN, EXISTS, [NOT] IN, IS [NOT] NULL, or [NOT] LIKE in the condition. \r\n\r\n\r\nORA-00921 unexpected end of SQL command \r\n\r\nCause: The SQL command was not complete. Part of a valid command was entered, but at least one major component was omitted. \r\n\r\nAction: Correct the syntax. \r\n\r\n\r\nORA-00922 missing or invalid option \r\n\r\nCause: An invalid option was specified in defining a column or storage clause. The valid option in specifying a column is NOT NULL to specify that the column cannot contain any NULL values. Only constraints may follow the datatype. Specifying a maximum length on a DATE or LONG datatype also causes this error. \r\n\r\nAction: Correct the syntax. Remove the erroneous option or length specification from the column or storage specification. \r\n\r\n\r\nORA-00923 FROM keyword not found where expected \r\n\r\nCause: In a SELECT or REVOKE statement, the keyword FROM was either missing, misplaced, or misspelled. The keyword FROM must follow the last selected item in a SELECT statement or the privileges in a REVOKE statement. \r\n\r\nAction: Correct the syntax. Insert the keyword FROM where appropriate. The SELECT list itself also may be in error. If quotation marks were used in an alias, check that double quotation marks enclose the alias. Also, check to see if a reserved word was used as an alias. \r\n\r\n\r\nORA-00924 missing BY keyword \r\n\r\nCause: The keyword BY was omitted in a GROUP BY, ORDER BY, or CONNECT BY clause. In a GRANT statement, the keyword IDENTIFIED must also be followed by the keyword BY. \r\n\r\nAction: Correct the syntax. Insert the keyword BY where required and then retry the statement. \r\n\r\n\r\nORA-00925 missing INTO keyword \r\n\r\nCause: An INSERT statement has been entered without the keyword INTO. \r\n\r\nAction: Correct the syntax. Insert the keyword INTO where required and then retry the statement. \r\n\r\n\r\nORA-00926 missing VALUES keyword \r\n\r\nCause: An INSERT statement has been entered without the keyword VALUES or SELECT. Either a VALUES clause or a SELECT subquery must follow the INSERT INTO clause. \r\n\r\nAction: Correct the syntax. Enter either a VALUES clause or a subquery after the INSERT INTO clause. \r\n\r\n\r\nORA-00927 missing equal sign \r\n\r\nCause: An equal sign has been omitted in one of the following places: \r\n\r\nIn the SET clause of an UPDATE statement \r\nFollowing "!" in a search condition to signify not equal \r\nAction: Correct the syntax. Insert the equal sign where required and retry the statement. \r\n\r\n\r\nORA-00928 missing SELECT keyword \r\n\r\nCause: A SELECT subquery must be included in a CREATE VIEW statement. \r\n\r\nAction: Correct the syntax. Insert the required SELECT clause after the CREATE VIEW clause and then retry the statement. \r\n\r\n\r\nORA-00929 missing period \r\n\r\nCause: This is an internal error message not usually issued. \r\n\r\nAction: Contact Oracle Support Services. \r\n\r\n\r\nORA-00930 missing asterisk \r\n\r\nCause: This is an internal error message not usually issued. \r\n\r\nAction: Contact Oracle Support Services. \r\n\r\n\r\nORA-00931 missing identifier \r\n\r\nCause: The specified string does not contain an identifier. \r\n\r\nAction: Correct the string argument. \r\n\r\n\r\nORA-00932 inconsistent datatypes: expected string got string \r\n\r\nCause: One of the following: \r\n\r\nAn attempt was made to perform an operation on incompatible datatypes. For example, adding a character field to a date field (dates may only be added to numeric fields) or concatenating a character field with a long field. \r\nAn attempt was made to perform an operation on a database object (such as a table or view) that is not intended for normal use. For example, system tables cannot be modified by a user. Note that on rare occasions this error occurs because a misspelled object name matched a restricted object''s name. \r\nAn attempt was made to use an undocumented view. \r\nAction: If the cause is \r\n\r\ndifferent datatypes, then use consistent datatypes. For example, convert the character field to a numeric field with the TO_NUMBER function before adding it to the date field. Functions may not be used with long fields. \r\nan object not intended for normal use, then do not access the restricted object. \r\n\r\nORA-00933 SQL command not properly ended \r\n\r\nCause: The SQL statement ends with an inappropriate clause. For example, an ORDER BY clause may have been included in a CREATE VIEW or INSERT statement. ORDER BY cannot be used to create an ordered view or to insert in a certain order. \r\n\r\nAction: Correct the syntax by removing the inappropriate clauses. It may be possible to duplicate the removed clause with another SQL statement. For example, to order the rows of a view, do so when querying the view and not when creating it. This error can also occur in SQL*Forms applications if a continuation line is indented. Check for indented lines and delete these spaces. \r\n\r\n\r\nORA-00934 group function is not allowed here \r\n\r\nCause: One of the group functions, such as AVG, COUNT, MAX, MIN, SUM, STDDEV, or VARIANCE, was used in a WHERE or GROUP BY clause. \r\n\r\nAction: Remove the group function from the WHERE or GROUP BY clause. The desired result may be achieved by including the function in a subquery or HAVING clause. \r\n\r\n\r\nORA-00935 group function is nested too deeply \r\n\r\nCause: This is an internal error message not usually issued. \r\n\r\nAction: Contact Oracle Support Services. \r\n\r\n\r\nORA-00936 missing expression \r\n\r\nCause: A required part of a clause or expression has been omitted. For example, a SELECT statement may have been entered without a list of columns or expressions or with an incomplete expression. This message is also issued in cases where a reserved word is misused, as in SELECT TABLE. \r\n\r\nAction: Check the statement syntax and specify the missing component. \r\n\r\n\r\nORA-00937 not a single-group group function \r\n\r\nCause: A SELECT list cannot include both a group function, such as AVG, COUNT, MAX, MIN, SUM, STDDEV, or VARIANCE, and an individual column expression, unless the individual column expression is included in a GROUP BY clause. \r\n\r\nAction: Drop either the group function or the individual column expression from the SELECT list or add a GROUP BY clause that includes all individual column expressions listed. \r\n\r\n\r\nORA-00938 not enough arguments for function \r\n\r\nCause: The function was referenced with too few arguments. \r\n\r\nAction: Check the function syntax and specify the required number of arguments. \r\n\r\n\r\nORA-00939 too many arguments for function \r\n\r\nCause: The function was referenced with too many arguments. \r\n\r\nAction: Check the function syntax and specify only the required number of arguments. \r\n\r\n\r\nORA-00940 invalid ALTER command \r\n\r\nCause: An invalid ALTER option was specified. \r\n\r\nAction: Correct the syntax. \r\n\r\n\r\nORA-00941 missing cluster name \r\n\r\nCause: The cluster name was either missing or invalid. \r\n\r\nAction: Specify a valid cluster name. A valid cluster name must start with a letter, be less than or equal to 30 characters, and contain only alphanumeric characters or the special characters $, _, and #. It may not be a reserved word. The name must be specified immediately following the keywords CREATE CLUSTER. \r\n\r\n\r\nORA-00942 table or view does not exist \r\n\r\nCause: The table or view entered does not exist, a synonym that is not allowed here was used, or a view was referenced where a table is required. Existing user tables and views can be listed by querying the data dictionary. Certain privileges may be required to access the table. If an application returned this message, the table the application tried to access does not exist in the database, or the application does not have access to it. \r\n\r\nAction: Check each of the following: \r\n\r\nthe spelling of the table or view name. \r\nthat a view is not specified where a table is required. \r\nthat an existing table or view name exists. \r\nContact the database administrator if the table needs to be created or if user or application privileges are required to access the table. \r\n\r\nAlso, if attempting to access a table or view in another schema, make certain the correct schema is referenced and that access to the object is granted. \r\n\r\n\r\nORA-00943 cluster does not exist \r\n\r\nCause: The current user owns no cluster by the specified name. \r\n\r\nAction: Specify a valid cluster name following the keyword CLUSTER, then retry the statement. \r\n\r\n\r\nORA-00944 insufficient number of clustered columns \r\n\r\nCause: An attempt was made to create a table with fewer cluster columns than were specified in the CREATE CLUSTER statement. The CLUSTER clause of a CREATE TABLE statement must specify all cluster columns that were defined when the cluster was created. \r\n\r\nAction: Specify all cluster columns in the CREATE TABLE statement, then retry it. \r\n\r\n\r\nORA-00945 specified clustered column does not exist \r\n\r\nCause: A column specified in the cluster clause of a CREATE TABLE statement is not a column in this table. \r\n\r\nAction: Re-execute the statement, using the names of columns defined for the table. \r\n\r\n\r\nORA-00946 missing TO keyword \r\n\r\nCause: A GRANT statement was specified without the keyword TO, or an invalid form of the GRANT command was entered. \r\n\r\nAction: Check the syntax for the GRANT command, insert the keyword TO where required, and retry the statement. \r\n\r\n\r\nORA-00947 not enough values \r\n\r\nCause: This error occurs when a SQL statement requires two sets of values equal in number, but the second set contains fewer items than the first set. This can occur in a WHERE or HAVING clause in which a nested SELECT returns too few columns as in: \r\n\r\nWHERE (A,B) IN (SELECT C FROM ...) \r\n\r\n\r\nAnother common cause of this error is an INSERT statement in which the VALUES or SELECT clause does not contain enough values needed for the INSERT, as in \r\n\r\nINSERT INTO EMP(EMPNO,ENAME) VALUES(''JONES'') \r\n\r\n\r\nAction: Check the number of items in each set and change the SQL statement to make them equal. \r\n\r\n\r\nORA-00948 ALTER CLUSTER statement no longer supported \r\n\r\nCause: The ALTER CLUSTER statement has been withdrawn. \r\n\r\nAction: To add data to a cluster from an existing table, use the following series of SQL statements: \r\n\r\nCREATE TABLE newtable SELECT * FROM oldtable CLUSTER clustername; \r\nDROP oldtable; \r\nRENAME TABLE newtable oldtable; \r\n\r\n\r\n\r\nORA-00949 illegal reference to remote database \r\n\r\nCause: This is an internal error message not usually issued. \r\n\r\nAction: Contact Oracle Support Services. \r\n\r\n\r\nORA-00950 invalid DROP option \r\n\r\nCause: A DROP command was not followed by a valid DROP option, such as CLUSTER, DATABASE LINK, INDEX, ROLLBACK SEGMENT, SEQUENCE, SYNONYM, TABLE, TABLESPACE, or VIEW. \r\n\r\nAction: Check the command syntax, specify a valid DROP option, then retry the statement. \r\n\r\n\r\nORA-00951 cluster not empty \r\n\r\nCause: A DROP CLUSTER statement specified a cluster that is not empty. A cluster may not be dropped if it contains any tables, unless the optional INCLUDING TABLES clause is specified. Tables may also be removed from a cluster by using the DROP TABLE command. \r\n\r\nAction: Either specify the INCLUDING TABLES clause in the DROP CLUSTER statement or remove all tables from the cluster with the DROP TABLE command before issuing the DROP CLUSTER command. \r\n\r\n\r\nORA-00952 missing GROUP keyword \r\n\r\nCause: Groups are not currently implemented. \r\n\r\nAction: No user action required. \r\n\r\n\r\nORA-00953 missing or invalid index name \r\n\r\nCause: In a CREATE INDEX, DROP INDEX, or VALIDATE INDEX statement, the index name was missing or invalid. \r\n\r\nAction: Specify a valid index name after the keyword INDEX. To drop or validate an existing index, check the name by querying the data dictionary. To create a new index, check the syntax before retrying. \r\n\r\n\r\nORA-00954 missing IDENTIFIED keyword \r\n\r\nCause: A GRANT CONNECT statement was issued without the keyword IDENTIFIED. \r\n\r\nAction: Check the syntax and insert the keyword IDENTIFIED after the last username. The format is \r\n\r\nGRANT CONNECT TO user-list IDENTIFIED BY password-list; \r\n\r\n\r\n\r\nORA-00955 name is already used by an existing object \r\n\r\nCause: An attempt was made to create a database object (such as a table, view, cluster, index, or synonym) that already exists. A user''s database objects must have distinct names. \r\n\r\nAction: Enter a unique name for the database object or modify or drop the existing object so it can be reused. \r\n\r\n\r\nORA-00956 missing or invalid auditing option \r\n\r\nCause: An AUDIT or NOAUDIT command was not followed by a valid option or the keyword ALL. For example, when AUDITing tables an option such as ALTER, AUDIT, COMMENT, DELETE, GRANT, INDEX, INSERT, LOCK, RENAME, SELECT, or UPDATE must be specified. \r\n\r\nAction: Correct the syntax. \r\n\r\n\r\nORA-00957 duplicate column name \r\n\r\nCause: A column name was specified twice in a CREATE or INSERT statement. Column names must be unique within a table, view, or cluster. \r\n\r\nAction: In a CREATE statement, change one of the column names to a new, unique column name. In an INSERT statement, remove one of the duplicate names. \r\n\r\n\r\nORA-00958 missing CHECK keyword \r\n\r\nCause: The keyword CHECK should follow the keyword WITH in the WITH OPTION clause of the CREATE VIEW statement. \r\n\r\nAction: Check the statement syntax and insert the keyword CHECK where required. Then retry the statement. \r\n\r\n\r\nORA-00959 tablespace ''string'' does not exist \r\n\r\nCause: A statement specified the name of a tablespace that does not exist. \r\n\r\nAction: Enter the name of an existing tablespace. For a list of tablespace names, query the data dictionary. \r\n\r\n\r\nORA-00960 ambiguous column naming in select list \r\n\r\nCause: A column name in the order-by list matches more than one select list columns. \r\n\r\nAction: Remove duplicate column naming in select list. \r\n\r\n\r\nORA-00961 bad datetime/interval value \r\n\r\n\r\nORA-00962 too many group-by / order-by expressions \r\n\r\nCause: The group-by or order-by column list contain more than 1000 expressions. \r\n\r\nAction: Use no more than 1000 expressions in the group-by or order-by list. \r\n\r\n\r\nORA-00963 unsupported interval type \r\n\r\nCause: An unsupported interval type was encountered. \r\n\r\nAction: Use a valid interval type. \r\n\r\n\r\nORA-00964 table name not in FROM list \r\n\r\nCause: A table specified in a query''s SELECT list is not named in the FROM clause list. \r\n\r\nAction: Check spelling of the table names, check that each table name in the SELECT list matches a table name in the FROM list, and then retry the statement. \r\n\r\n\r\nORA-00965 column aliases not allowed for ''*'' \r\n\r\nCause: An alias was used with the return-all-columns function (*) in the SELECT list. For example: \r\n\r\nSELECT * COL_ALIAS FROM EMP; \r\n\r\n\r\nAction: Either specify individual columns or do not specify an alias with a "*". \r\n\r\n\r\nORA-00966 missing TABLE keyword \r\n\r\nCause: A LOCK statement was specified and the keyword TABLE was missing, misspelled, or misplaced. A LOCK statement must begin with LOCK TABLE tablename. \r\n\r\nAction: Correct the syntax. \r\n\r\n\r\nORA-00967 missing WHERE keyword \r\n\r\nCause: The keyword WHERE in a SELECT statement was missing, misspelled, or misplaced. \r\n\r\nAction: Correct the syntax. \r\n\r\n\r\nORA-00968 missing INDEX keyword \r\n\r\nCause: The keyword INDEX in a CREATE UNIQUE INDEX or VALIDATE INDEX statement was missing, misspelled, or misplaced. \r\n\r\nAction: Correct the syntax. \r\n\r\n\r\nORA-00969 missing ON keyword \r\n\r\nCause: The keyword ON in a GRANT, REVOKE, or CREATE INDEX statement was missing, misspelled, or misplaced. \r\n\r\nAction: Check syntax and spelling, and use the keyword ON where required. \r\n\r\n\r\nORA-00970 missing WITH keyword \r\n\r\nCause: The keyword START was specified without the keyword WITH. Both keywords are necessary if a START WITH clause is desired in a tree-structured query. \r\n\r\nAction: Change the keyword START to the keywords START WITH. Then retry the statement. \r\n\r\n\r\nORA-00971 missing SET keyword \r\n\r\nCause: The keyword SET in an UPDATE statement is missing, misspelled, or misplaced. \r\n\r\nAction: Check syntax and spelling, and use the keyword SET after the name of the table to be updated. \r\n\r\n\r\nORA-00972 identifier is too long \r\n\r\nCause: The name of a schema object exceeds 30 characters. Schema objects are tables, clusters, views, indexes, synonyms, tablespaces, and usernames. \r\n\r\nAction: Shorten the name to 30 characters or less. \r\n\r\n\r\nORA-00973 invalid row count estimate \r\n\r\n\r\nORA-00974 invalid PCTFREE value (percentage) \r\n\r\nCause: The percentage of free space specified in a CREATE INDEX statement is not between 0 and 100. A PCTFREE value of 0 means the entire block is available. The value 100 is not useful because it means that no data may be inserted. The default is 10. \r\n\r\nAction: Specify a PCTFREE value between 0 and 100. Then retry the statement. \r\n\r\n\r\nORA-00975 date + date not allowed \r\n\r\nCause: An attempt was made to add two date fields together. Dates may be added only to numeric fields, not to other dates. \r\n\r\nAction: Use the Oracle function TO_NUMBER to convert one of the date fields to a numeric field before adding it to the other date field. \r\n\r\n\r\nORA-00976 LEVEL, PRIOR, or ROWNUM not allowed here \r\n\r\nCause: The use of the PRIOR clause, the pseudo-column LEVEL, or ROWNUM is incorrect in this context. \r\n\r\nAction: Check the syntax for the SQL statement. Then remove or relocate the keyword PRIOR, LEVEL, or ROWNUM. \r\n\r\n\r\nORA-00977 duplicate auditing option \r\n\r\nCause: An AUDIT or NOAUDIT statement specified the same option more than once. \r\n\r\nAction: Either specify ALL without other auditing options or remove the duplicate auditing specifications. \r\n\r\n\r\nORA-00978 nested group function without GROUP BY \r\n\r\nCause: A group function, such as AVG, COUNT, MAX, MIN, SUM, STDDEV, or VARIANCE, was used within another group function, as in MAX(COUNT(*)), without a corresponding GROUP BY clause. \r\n\r\nAction: Either add a GROUP BY clause or remove the extra level of nesting. \r\n\r\n\r\nORA-00979 not a GROUP BY expression \r\n\r\nCause: The GROUP BY clause does not contain all the expressions in the SELECT clause. SELECT expressions that are not included in a group function, such as AVG, COUNT, MAX, MIN, SUM, STDDEV, or VARIANCE, must be listed in the GROUP BY clause. \r\n\r\nAction: Include in the GROUP BY clause all SELECT expressions that are not group function arguments. \r\n\r\n\r\nORA-00980 synonym translation is no longer valid \r\n\r\nCause: The synonym used is based on a table, view, or synonym that no longer exists. \r\n\r\nAction: Replace the synonym with the name of the object it references or re-create the synonym so that it refers to a valid table, view, or synonym. \r\n\r\n\r\nORA-00981 cannot mix table and system auditing options \r\n\r\nCause: Both table-wide and system-wide options were specified within a single AUDIT statement. \r\n\r\nAction: Check the AUDIT command syntax. Then retry one or more AUDIT statements. \r\n\r\n\r\nORA-00982 missing plus sign \r\n\r\nCause: A left parenthesis appeared in a join condition, but a plus sign (+) did not follow. A left parenthesis in a join condition usually signals an outer-join specification and so a plus sign is expected to follow. To specify an outer join on a column in a join operation, follow the column reference in the join condition with a plus sign (+) enclosed in parentheses. \r\n\r\nAction: Correct the SQL syntax and retry the statement. \r\n\r\n\r\nORA-00984 column not allowed here \r\n\r\nCause: A column name was used in an expression where it is not permitted, such as in the VALUES clause of an INSERT statement. \r\n\r\nAction: Check the syntax of the statement and use column names only where appropriate. \r\n\r\n\r\nORA-00985 invalid program name \r\n\r\nCause: Probably a syntax error. \r\n\r\nAction: Correct syntax. \r\n\r\n\r\nORA-00986 missing or invalid group name(s) \r\n\r\nCause: Probably a syntax error. \r\n\r\nAction: Correct syntax. \r\n\r\n\r\nORA-00987 missing or invalid username(s) \r\n\r\nCause: No username was specified in a GRANT statement or one of the specified usernames is invalid. Valid usernames must be specified following the keyword TO in a GRANT statement to define a user. A username must begin with a letter, consist only of alphanumeric characters and the special characters $, _, and #, and be less than or equal to 30 characters. If it contains other characters, it must be enclosed in double quotation marks. It may not be a reserved word. \r\n\r\nAction: Specify a valid username, or list of usernames, following the keyword TO in the GRANT statement. \r\n\r\n\r\nORA-00988 missing or invalid password(s) \r\n\r\nCause: More usernames than passwords were specified in a GRANT statement. A valid password must be specified for each username listed in the GRANT statement. \r\n\r\nAction: Enter a valid password for each username. \r\n\r\n\r\nORA-00989 too many passwords for usernames given \r\n\r\nCause: More passwords than usernames were specified in a GRANT statement. Only one password may be entered for each username listed in the GRANT statement. \r\n\r\nAction: Enter an equal number of usernames and passwords. \r\n\r\n\r\nORA-00990 missing or invalid privilege \r\n\r\nCause: No privileges were specified in a GRANT privilege statement, or one of the specified privileges is invalid. \r\n\r\nAction: Enter one or more valid privileges such as SELECT, INSERT, DELETE, UPDATE, ALTER, INDEX, REFERENCES, or ALL. More than one privilege may be granted by entering the privileges in a list separated by commas (,) or by specifying the keyword ALL to grant all privileges. \r\n\r\n\r\nORA-00991 only MAC privileges may be granted to procedures \r\n\r\nCause: Object privileges or non-MAC system privileges were granted to the procedure. \r\n\r\nAction: Only grant MAC privileges using the PROCEDURE clause. \r\n\r\n\r\nORA-00992 invalid format for REVOKE command \r\n\r\nCause: An invalid form of the REVOKE command was entered. There are two forms of the REVOKE command. The first form is used to revoke a user''s database access privileges. The second form is used to revoke a user''s object privileges. \r\n\r\nAction: Check the command syntax and retry the statement. \r\n\r\n\r\nORA-00993 missing GRANT keyword \r\n\r\nCause: The keyword WITH was specified at the end of a GRANT statement without the keyword GRANT. To grant privileges to a user and the permission to grant those privileges to another user, you must specify the keywords WITH GRANT OPTION at the end of the GRANT statement. \r\n\r\nAction: Change the keyword WITH to the keywords WITH GRANT OPTION, then retry the statement. \r\n\r\n\r\nORA-00994 missing OPTION keyword \r\n\r\nCause: The keywords WITH G', '', '', 13, 0),
(668, '', '서대영', '', '2009-12-03 11:17:07', 'JSTL', 'forEach, forTokens 고급사용', '[ varStatus 속성으로 루핑 횟수 알기 ]\r\n<c:forEach var="movie" items="${movieList}" varStatus="loop">\r\n<li>${loop.count} : ${movie}\r\n</c:forEach>\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://everlikemorning.tistory.com/?page=5', 'http://everlikemorning.tistory.com/?page=5', '', 15, 0),
(669, '', '서대영', '', '2009-12-03 21:27:04', 'JavaScript', '페이지 로드시 첫번째 폼에 포커스', '<body onload="document.forms[0].elements[0].focus();">', '', '', 2, 0),
(670, '', '서대영', '', '2009-12-03 22:00:22', 'CSS', 'input type별 스타일 지정', 'border 대신에 outline 을 쓰면 checkbox 에 테두리 생기는 것 을 방지할 수 있다.\r\n\r\n\r\ninput, select {\r\n	font-family: arial;\r\n	font-size: 11px;\r\n	color: #333333;\r\n	outline: 1px solid #b4b4b4;\r\n	background-color: #FFFFFF;\r\n	padding-right: 2px;\r\n	padding-left: 2px;\r\n}\r\n\r\n-------------------------------------------------------------\r\n\r\n\r\ninput.button {\r\n	border: 1px solid #cccccc;\r\n	width: 50px;\r\n}\r\n\r\nclass 쓰는게 안전....\r\n\r\n\r\n\r\n\r\ninput,select {\r\n	font-size: 8pt;\r\n	font-family: arial;\r\n	color: #333333;\r\n	border: expression((this.type==''submit'')? ''1px solid #cccccc'':'''' );\r\n}\r\n\r\n\r\n\r\n--> submit만 테두리 줌', '', '', 6, 0),
(671, '', '서대영', '', '2009-12-03 23:19:52', 'JSP', 'JSP 에러 처리 방법', '아래 방법은 톰켓 5.5에서 작동 안함. web.xml을 사용해야함.\r\n---------------------------------------------\r\n\r\n JSP 예외처리방법  ☞ JSP  \r\n2004/06/07 19:25\r\n\r\n http://blog.naver.com/lhs7220/120003082805 \r\n\r\n\r\n \r\n이강좌는  http://www.jspschool.com 에서 퍼왔습니다.\r\n\r\n \r\n\r\n1. 예외처리(Exceptions)란 무엇일까용?  \r\n   - 보통 자바에서도 쓰는 것이져.. try{ }catch{} 이렇게 쓰는 것이져.. \r\n   - 예외(Exceptions)란 한마디로 예상하지 못한 이벤트를 말하는 것입니다. \r\n   - 이러한 예외(Exceptions)는 어디서나 발생할 수도 있죠.. \r\n   - 어디서나 발생할 수도 있다는 것이 문제입니다.  \r\n   - 프로그래머는 자신이 생각한 로직(logic)만 필요하지 예외(Exception)는  \r\n     방해가되고 소스를 엉망으로 만들어버리는 무서븐 버그와 같은 겁니당..^^; \r\n   - 간단한 예로 DB연결하고 쿼리 때리고 있는데 DB서버가 맛이 간경우..^^; \r\n   - 이런경우에 예외(Exceptions)이 발생하져 ..  \r\n   - 프로그래머는 어느 정도의 이러한 상황을 예측하고 이런 상황에 대처하도록 \r\n      프로그램을 만들어야 합니다. 그래서 나온것이 예외처리져..^^ \r\n   - 참고루  영어로는 ''Exception Handling'' 이라구 함다..^^..  \r\n      <지가 영어가 약혀서 어디서 훔쳐왔어요.. 위에 철자...^^;;> \r\n\r\n2. JSP에서는 어떻게 예외처리할까용..(?_?);; \r\n   -  우선 간단하게  예외(Exception)를 try ~ catch 블록에 가두어 감시하는  \r\n      아주 심플한 코드를 먼저 보여드리겠습니다. \r\n---------------------------------------------------------------- \r\n<% \r\n   try { \r\n           // 예외를 발생시키는 코드 \r\n   } catch(Exception e) { \r\n           // 예외가 발생했을 때 처리해주는 코드 \r\n   }//try-catch \r\n%> \r\n---------------------------------------------------------------- \r\n\r\nJSP에서는 이런 방법도 쓰지만 더 좋은 방법들이 있져. \r\n\r\nerror Page 이용하는 방법입니다. \r\n\r\nJSP에는 예외처리할때 쓰라고 만든 Directives(지령문)의 errorPage와 isErrorPage란것이 있슴다. \r\n\r\n한번 스펙을 볼깝쇼..^^ \r\n\r\n<%@ page [language="java"] [extends="package.class"] [import={package.class \r\n                   |package.*}...] [session="true|false"] [buffer="none|8kb|sizekb] \r\n                   [autoFlush="true|false"] [isThreadSafe="true|false"] [ info="text"] \r\n                   [errorPage="relativeURL"] contentType="{mimiType \r\n                   [charset=charSet]|[text/html;charset=ISO-8859-1}"] \r\n                   [isErrorPage="true|false] %>  \r\n\r\n요기서.. 활용은..대강 보자면.. \r\n\r\n에러가 날 jsp파일에는 이렇게 적구엽. \r\n<%@ page errorPage="ExceptionHandler.jsp" %> \r\n\r\n에러를 처리해주는 jsp파일에는 요로게 적어줍니다. \r\n<%@ page isErrorPage="true" import="java.io.*" %> \r\n\r\n\r\n\r\n\r\n우선 첫째 강좌에서 본 링크의 예제를 보자면요.^^ \r\n1.Form.html - 사용자의 나이를 입력할수 있게 Form를 뿌려주는 html임다. \r\n2.FormHandler.jsp - 나이를 받아서.. 정수형에 넣구 화면에 뿌려줌다.. \r\n                                  <요기서.. 정수로 변환할때 에러가 남니다.. 숫자가 아닐경우죠..> \r\n3.ExceptionHandler.jsp - 에러가 난 것의 처리를 해줌다.. \r\n\r\n\r\n\r\n예제 우선 보기..^^ \r\n\r\n1.From.html \r\n----------------------------------------------------------- \r\n<html> \r\n<head> \r\n          <style> \r\n          body, input { font-family:Tahoma; font-size:8pt; } \r\n          </style> \r\n</head> \r\n<body> \r\n\r\n<!-- HTML Form --> \r\n<form action="FormHandler.jsp" method="post"> \r\n          나이를 입력해주세엽 ( 올해나이루 ) :  \r\n          <input type="text" name="age" />  \r\n          <input type="submit" value="Submit" /> \r\n</form> \r\n\r\n</body> \r\n</html> \r\n----------------------------------------------------------- \r\njsp에서 값을 받기위해서.. html에서 Form를 작성합니다. \r\n\r\njsp로는 age라는 값이 넘어가겠죠..^^ \r\n\r\n\r\n\r\n2.FormHandler.jsp  \r\n----------------------------------------------------------- \r\n<%@ page errorPage="ExceptionHandler.jsp" %> \r\n<html> \r\n<head> \r\n          <style> \r\n          body, p { font-family:Tahoma; font-size:10pt; } \r\n          </style> \r\n</head> \r\n<body> \r\n\r\n<%-- Form Handler Code --%> \r\n<% \r\n          int age; \r\n\r\n                      age = Integer.parseInt(request.getParameter("age")); \r\n%> \r\n\r\n<%-- Displaying User Age --%> \r\n<p>당신의 나이는 <%= age %>살입니다.</p> \r\n\r\n<p><a href="Form.html">뒤로가기</a>.</p> \r\n\r\n</body> \r\n</html> \r\n----------------------------------------------------------- \r\nForm.html에서 넘어온 age라는 값을 받아서.. 정수로 변환 시켜서 뿌려줌니다. \r\n왜냐구요..^^ \r\nForm으로 넘어오는 값은 다 String으로 받습니다. ^^ \r\n\r\n!! 특히 요기서..  숫자형태가 아닌 ''(O_O)''이런 값이 넘어오믄..당삼.. 예외를 발생시키져.. \r\n 다시 말해서..에러를.. 그것두 무신에러냐 하믄요.. \r\n NumberFormatException <-- 요런 에러가 나죠...^^ \r\n 그러믄.. 2번의 <%@ page errorPage="ExceptionHandler.jsp" %> 요것이 있다믄. \r\n 3번인 ExceptionHandler.jsp으로 제어권을 넘겨줍니다. \r\n  \r\n\r\n3.ExceptionHandler.jsp \r\n----------------------------------------------------------- \r\n<%@ page isErrorPage="true" import="java.io.*" %> \r\n<html> \r\n<head> \r\n          <title>Exceptional Even Occurred!</title> \r\n          <style> \r\n          body, p { font-family:Tahoma; font-size:10pt; padding-left:30; } \r\n          pre { font-size:8pt; } \r\n          </style> \r\n</head> \r\n<body> \r\n\r\n<%-- Exception Handler --%> \r\n<font color="red"> \r\n<%= exception.toString() %><br> \r\n</font> \r\n\r\n<% \r\nout.println("<!--"); \r\nStringWriter sw = new StringWriter(); \r\nPrintWriter pw = new PrintWriter(sw); \r\nexception.printStackTrace(pw); \r\nout.print(sw); \r\nsw.close(); \r\npw.close(); \r\nout.println("-->"); \r\n%> \r\n\r\n</body> \r\n</html> \r\n----------------------------------------------------------- \r\n제어권을 받으면.. exception이라는 인스턴스가 생성되면서.. \r\nexception에 대하여 처리할 수 있게 됩니다. \r\n\r\n쉽게 말씀드리자면. 어떤사람이 저지레를 하믄 옆사람이 처리해주는 거죠.. \r\n이 사람이 어떤 저지레를 하고 잇다궁..^^  < 비교가 이상한가요..^^ > \r\n\r\n\r\n결론.. 1.번에서 숫자가 아닌것을 넣으면.. 2.번에서 NumberFormatException이 발생하구. \r\n     3.번에서 exception의 내용을 보여주고, exception을 따라가면서.. 무신 내용이 있었는지  \r\n       확인 하믄서 보여줍니다...^^ \r\n\r\n\r\n\r\n\r\n\r\n**. 이 에러내용을 맘대로 바꾸고 싶다믄 어떻게 할까요..^^ \r\n\r\n\r\n2번의 내용중.. \r\n<% \r\n          int age; \r\n\r\n                      age = Integer.parseInt(request.getParameter("age")); \r\n%> \r\n\r\n이런 부분을  밑에 소스로 고쳐줍니다. \r\n\r\n\r\n\r\n<% \r\n          int age; \r\n           \r\n          try { \r\n                      age = Integer.parseInt(request.getParameter("age")); \r\n          } catch (NumberFormatException e) { \r\n                      throw new JspException("정수만 넣어주세요..!"); \r\n          } \r\n%> \r\n\r\n\r\n이내용은   try-catch블록으로 NumberFormatException이 발생하믄 잡아서.  \r\nJspException을 강제로 발생시키는 겁니다. 그리고 그곳에.. 필요한 문구를 임으로 넣는 것이져.. \r\n\r\n\r\n*. 참고루.. jsp안에서 try-catch블록으로 예외를 잡아버리면.. errorPage는 실행이 되지 않아서.. \r\n 제어권이 3번인.. jsp페이지로 넘어가지 않습니다.. \r\n 그래서. JspException을 강제로 발생시키는 거졉..^^ \r\n[출처] JSP 예외처리방법|작성자 허니파파\r\n\r\n\r\n \r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/lhs7220?Redirect=Log&logNo=120003082805', 'http://blog.naver.com/lhs7220?Redirect=Log&logNo=120003082805', '', 19, 0),
(980, '', '서대영', '', '2011-09-11 17:10:22', 'Spring', '컨트롤러에서 redirect 하는 방법', 'return new ModelAndView("redirect:noteList.do");\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://itbruce.tistory.com/56', 'http://itbruce.tistory.com/56', '', 5, 0),
(673, '', '서대영', '', '2009-12-04 14:53:49', 'Servlet', 'JSP/Servlet Spec 버전별 특징', 'Java 웹 어플리케이션을 개발하다보면, 의외로 자기가 현재 사용중인 JSP/Servlet 스펙의 버전을 모르는 상태로 개발하는 것을 많이 보게 된다.\r\n\r\n특히, 자주 나타나는 것으로 개발은 Tomcat 에서 하면서, 실제 갑은 톰캣이 아닌 다른 WAS를 사용할 경우가 있는데, 이는 나중에 아주 심각한 문제로 대두될 수 있다. Tomcat 5에서 Tomcat 5가 지원하는 JSP 2.0/Servlet 2.4로 (해당 스펙의 기능을 이용해서) 개발했다가, 나중에 갑이 우리는 죽었다 깨나도 웹 로직 8.1(JSP 1.2/Servlet 2.3) 쓸래... 그래버리면, 그때부터는 열심히 노가다로 고쳐야 된다.\r\n\r\n간단하게 JSP/Servlet 스펙을 내가 아는대로 정리해본다. 특히 개발시 Tomcat으로 개발 환경을 구축한다면, 갑이 원하는 WAS가 지원하는 스펙 버전을 확인해서 그 스펙 버전에 맞는 톰캣을 사용하도록 한다. 물론 각 WAS별 지원 스펙은 해당 WAS의 업체에 물어보면 된다.\r\n\r\n\r\nTomcat 버전별 지원 스펙\r\n\r\n* Tomcat 3.x : JSP 1.1, Servlet 2.2\r\n* Tomcat 4.x : JSP 1.2, Servlet 2.3\r\n* Tomcat 5.x : JSP 2.0, Servlet 2.4\r\n\r\n위 내용은 http://tomcat.apache.org/whichversion.html에서 확인할 수 있다.\r\n물론 상위 버전을 지원하는 WAS는 하위 버전 스펙도 지원한다. Tomcat 5.x에서 JSP 1.1/Servlet 2.2 어플리케이션 짜도 괜찮다. 하지만 안그러는게 더 안전할 거 같다.\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://kwon37xi.egloos.com/2793511', 'http://kwon37xi.egloos.com/2793511', '', 0, 0),
(674, '', '서대영', '', '2009-12-04 15:00:14', 'Eclipse', 'Servlet2.3 /JSP1.2 스펙으로 Dynamic Web Project 생성', 'WebLogic8.1 개발용으로 적합\r\n\r\n\r\n\r\n============================== FILE ==============================\r\nProjectFacets.JPG', '', 'ProjectFacets.JPG', 1, 0),
(675, '', '서대영', '', '2009-12-04 15:07:56', 'Eclipse', '소스는 정상인데 프로젝트에만 에러 표시날 때', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.mungchung.com/xe/?mid=protip&category=4482&document_srl=5306', 'http://www.mungchung.com/xe/?mid=protip&category=4482&document_srl=5306', '', 1, 0),
(676, '', '서대영', '', '2009-12-04 15:53:12', 'JSP', 'JSP 지시자 (JSP Directive)', '1. page 지시자\r\n\r\n2. include 지시자\r\n\r\n3. taglib 지시자\r\n[출처] JSP 지시자 (JSP Directive)|작성자 호시\r\n\r\n\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/nugunnuguya?Redirect=Log&logNo=80008772109', 'http://blog.naver.com/nugunnuguya?Redirect=Log&logNo=80008772109', '', 4, 0),
(677, '', '서대영', '', '2009-12-08 11:19:34', 'Java', 'static 메서드의 hiding', 'static 메서드는 overide 하지 않고 hide 한다.\r\n\r\noveride 된 메서드는 자식 객체가 부모 타입의 변수로 참조되어도 자삭의 메서드를 호출하는 반면,\r\n\r\nhide 된 static 메서드는 자식 객체가 부모 타입의 변수로 참조되었을 때 부모의 메서드가 호출된다.\r\n\r\nclass Father {\r\n	static void print() {\r\n		System.out.println("i''m your father");\r\n	}\r\n\r\n	void print2() {\r\n		System.out.println("i''m your father2");\r\n	}\r\n}\r\n\r\nclass Son extends Father {\r\n	static void print() {\r\n		System.out.println("i''m a son of bitch");\r\n	}\r\n\r\n	void print2() {\r\n		System.out.println("i''m a son of bitch2");\r\n	}\r\n}\r\n\r\npublic class Test6 {\r\n	public static void main(String[] args) {\r\n		Father f = new Father();\r\n		Father s = new Son();\r\n		f.print();\r\n		s.print();\r\n		((Son) s).print();\r\n		f.print2();\r\n		s.print2();\r\n	}\r\n}\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://faq.javaranch.com/view?OverridingVsHiding', 'http://faq.javaranch.com/view?OverridingVsHiding', '', 1, 0),
(678, '', '서대영', '', '2009-12-08 19:08:14', 'JDBC', 'DB Link 로 원격 조회', '1. 커넥션 획득\r\n2. SELECT <user_name>.<table_name>@<link_name>\r\n3. statement 종료 ★ \r\n4. commit ★ \r\n5. ALTER SESSION CLOSE DATABASE LINK <link_name>\r\n6. 커넥션 종료\r\n\r\n3과 4를 안하면 "database link is in use JDBC" SQL Exception이 발생하므로 주의한다.\r\n\r\n\r\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\r\n	public ArrayList select(String dbLink, String serial) throws Exception {\r\n		\r\n		ArrayList list = new ArrayList();\r\n		\r\n		DAO dao = new DAO();\r\n		\r\n		Connection conn = null;\r\n		PreparedStatement stmt = null;\r\n		ResultSet rs = null;\r\n			\r\n		String sql1 = \r\n			" SELECT * " +\r\n			" FROM VDMES.V_IF_SERIAL_PART_NO@" + dbLink + " " +\r\n			" WHERE SERIAL_NUMBER = ? " + \r\n			" AND PART_NUMBER IS NOT NULL ";\r\n		\r\n		String sql2 = " ALTER SESSION CLOSE DATABASE LINK " + dbLink + " ";\r\n		\r\n		try {\r\n			\r\n			conn = dao.getConnection();\r\n			\r\n			// Step 1. Open a DB Link\r\n			stmt = conn.prepareStatement(sql1);\r\n			stmt.setString(1, serial);\r\n			rs = stmt.executeQuery();\r\n			ResultSetMetaData metaData = rs.getMetaData();\r\n			\r\n			int count = metaData.getColumnCount(); \r\n			\r\n			HashMap map = null;\r\n			String name = "";\r\n			String data = "";\r\n			\r\n			for (;rs.next(); list.add(map)) {\r\n								\r\n				map = new HashMap();\r\n				\r\n				for (int i = 0; i < count; i++) {\r\n					\r\n					name = metaData.getColumnName(i + 1).toLowerCase();\r\n					data = rs.getString(i + 1);\r\n					map.put(name, data);\r\n					\r\n				}\r\n			\r\n			}\r\n			\r\n			logger.info("Query1 > " + sql1);\r\n			\r\n			rs.close();\r\n			stmt.close();\r\n			\r\n			// Step 2. Close the DB link.\r\n			conn.commit();\r\n			\r\n			stmt = conn.prepareStatement(sql2);\r\n			stmt.executeUpdate();\r\n			stmt.close();\r\n			\r\n			logger.info("Query2 > " + sql2);\r\n			\r\n		} catch (SQLException e) {\r\n			\r\n			e.printStackTrace();\r\n						\r\n		} finally {\r\n		\r\n			dao.closeAll(conn, stmt, rs);\r\n			\r\n		}\r\n			\r\n		return list;\r\n		\r\n	}', '', '', 9, 0),
(680, '', '서대영', '', '2009-12-11 13:22:12', 'WAS', 'include된 jsp 수정 후 조치사항', '일반적으로 WAS는 jsp의 수정날짜를 보고 java와 class를 수정한다.\r\n즉 include당하는 jsp를 수정했더라도 그 jsp를 include하고 있는 jsp들의 수정날짜가 바뀌는 것은 아니기 때문에 반영이 안되는 경우가 있다.\r\n\r\n이런 경우,\r\n1) include당하는 jsp의 URL을 브라우저로 직접 호출한다.\r\n : include당하는 jsp와 java와 class 수동으로 생성을 위함\r\n2) include하고 있는 jsp를 touch 명령어를 통해 수정일을 갱신한다.\r\n : include하고있는 jsp가 호출될 때 java와 class 다시 생성되게 하기 위함.\r\n\r\ninclude하고 있는 jsp가 너무 많을 경우,\r\n<work_dir>/jsp_servlet/ 아래의 모든 java와 class 파일을 삭제한다.\r\n : find . -name ''*.class'' -exec rm -f {} \\\\;', '', '', 1, 0),
(681, '', '서대영', '', '2009-12-15 16:46:00', 'ANT', 'ANT 총정리', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/ktyuzz?Redirect=Log&logNo=150026864007', 'http://blog.naver.com/ktyuzz?Redirect=Log&logNo=150026864007', '', 6, 0),
(682, '', '서대영', '', '2009-12-17 09:46:24', 'Java', 'Java Code Convention', '[ Method ]\r\nReturn Type 이 bollean 이면 3인칭 동사형을 씀.\r\nisXXX()\r\nqualifiesFor()\r\n\r\n\r\n링크 : 원문\r\n첨부 : 번역\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://java.sun.com/docs/codeconv/html/CodeConvTOC.doc.html\r\n\r\n\r\n\r\n============================== FILE ==============================\r\nJava Code Convention.htm', 'http://java.sun.com/docs/codeconv/html/CodeConvTOC.doc.html', 'Java Code Convention.htm', 1, 0),
(683, '', '서대영', '', '2009-12-17 09:56:57', 'JSP', 'JSP Code Convention', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://java.sun.com/developer/technicalArticles/javaserverpages/code_convention/', 'http://java.sun.com/developer/technicalArticles/javaserverpages/code_convention/', '', 7, 0),
(684, '', '서대영', '', '2009-12-17 17:23:38', 'DBCP', 'DBCP 사용방법 (WEB vs CS)', '1. WEB : Tomcat 5 부터는 기본으로 제공된다.\r\n - naming-factory-dbcp.jar\r\n - server.xml과 context.xml만 수정하고,\r\n - JNDI 문법을 이용해서 받아오기만 하면 됨\r\n\r\n2. CS : Arpache Commons DBCP 사용\r\n - commons-dbcp-.1.21.jar\r\n - commons-pool-1.2.jar\r\n - commons-collections-3.1.jar\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/ceresrits?Redirect=Log&logNo=40062891265', 'http://blog.naver.com/ceresrits?Redirect=Log&logNo=40062891265', '', 6, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(685, '', '서대영', '', '2009-12-18 11:22:09', 'DBCP', 'DBCP 설정의 여러가지 방법', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/soldatj?Redirect=Log&logNo=10067611865', 'http://blog.naver.com/soldatj?Redirect=Log&logNo=10067611865', '', 5, 0),
(686, '', '서대영', '', '2009-12-18 17:30:20', 'DBCP', 'PoolingDataSource를 사용하연 커넥션풀 구현', 'ConnectionFactory와 connectionPool을 이용하여,\r\n직접 PoolableConnectionFactory를 만들어 PollingDataSource를 구현할 수 있다.\r\n\r\n- ConnectionFactory : DriveManager를 이용하여 하나의 커넥션을 생성\r\n- CoonectionPool : 기본인 GenericObjectPool을 사용\r\n- PoolableConnectionFactory : Pool에서 사용할 수 있는 커넥션을 생성\r\n- PoolableConnectionFactory : Pool 기능이 있는 커넥션을 얻을 수 있음\r\n\r\n※ BasicDataSource가 나아보임...\r\n\r\n\r\n\r\n\r\n============================== FILE ==============================\r\nSKPConnectionFactory.java|SKPDataSource.java', '', 'SKPConnectionFactory.java|SKPDataSource.java', 6, 0),
(687, '', '서대영', '', '2009-12-18 17:33:13', 'DBCP', 'BasicDataSource 사용방법', 'java.sql.DataSource 인터페이스를 구현하여,\r\n간단하게 접속 정보를 설정하고, 편리하게 커넥션풀을 구현하여,\r\n커넥션을 얻어서 사용할 수 있다.\r\n\r\n일반 어플리케이션에서 사용하면 좋을 것 같다.\r\n\r\n\r\n\r\n============================== FILE ==============================\r\nDataSource.java', '', 'DataSource.java', 10, 0),
(688, '', '서대영', '', '2009-12-21 15:29:28', 'Unix', '어제 날짜', 'cat /tmp/test.sh\r\n\r\n#!/usr/bin/ksh\r\nyesterday=`TZ=KST+15; date +%Y%m%d`\r\n\r\necho $yesterday\r\n\r\n \r\n\r\nlinux에서는\r\n\r\ncat /tmp/test.sh\r\n\r\n#!/usr/bin/ksh\r\n\r\nyesterday=`date -d yesterday +%Y%m%d `\r\n\r\necho $yesterday\r\n\r\n\r\n\r\n\r\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\r\n# G-ERP Link Data\r\n00 05 * * * /home/rdw/skpfiles/mqsend.sh REWORK_`TZ=KST+15; date +%Y%m%d`.CSV REWORK_`TZ=KST+15; date +%Y%m%d`.CSV SINGLE_ID\r\n\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/farn501?Redirect=Log&logNo=10033017567', 'http://blog.naver.com/farn501?Redirect=Log&logNo=10033017567', '', 1, 0),
(689, '', '서대영', '', '2009-12-24 18:49:52', 'Java', 'java.util.logging.Logger', 'private static Logger logger = Logger.getLogger(SKPTable.class.getName());\r\n\r\n이런 식으로 클래스 당 하나의 logger만 공용으로 사용하거나,\r\n\r\n상속받는 클래스가 있는 경우, logger 변수만 static으로 선언하고 객체마다 logger를 생성하여 사용한다. (그래야 자식 클래스에 에러 났을 때 정확히 표시)\r\nprotected static Logger logger;\r\n\r\npublic SKPTalbe() {\r\n\r\n		logger = Logger.getLogger(getClass().getName());\r\n\r\n}', '', '', 14, 0),
(690, '', '서대영', '', '2009-12-28 16:41:42', 'Java', 'Enumeration 접근법 비교', 'Enumeration 접근법 비교\r\n초기 버전\r\npublic class TrafficLight {\r\n   private int state;   // 1 means red\r\n                            // 2 means yellow\r\n                            // 3 means green\r\npublic int getState() {\r\n      return state;\r\n  \r\n}\r\n-         에러가 발생할 확률이 매우 높음\r\n-         getState()를 쓰는 개발자는 반드시 상태 값 1,2,3의 의미를 알아야 함 -> Debugging이 어려움\r\n \r\n상수를 도입한 일반적인 접근법\r\npublic class TrafficLight {\r\n   public final static int RED       = 1;\r\n   public final static int YELLOW   = 2;\r\n   public final static int GREEN     = 3;\r\n \r\n   private int state;\r\n \r\n   public int getState() {\r\n     return state;\r\n   }\r\n}\r\n-         5.0 이전 버전에서 가능했던 가장 좋은 접근법\r\n-         switch문 등에서 값 비교 시 정의된 상수(TrafficLight.RED 등)를 사용할 것이라고 예측\r\n-         여전히 단점이 많음\r\n&#376;           여전히 상태 값으로 엉뚱한 값을 설정할 수 있음\r\n&#376;           상태 값을 출력하면 알아보기 힘듦 (정수이므로, 별도 정보가 없으니 당연함)\r\n \r\n견고한(Robust) 접근법\r\npublic class LightState {\r\n   protected final String   name;\r\n \r\n   public final static LightState RED = new LightState(“red”);\r\n   public final static LightState YELLOW = new LightState(“yellow”);\r\n   public final static LightState GREEN = new LightState(“green”);\r\n \r\n   private LightState(String s) {\r\n      name = s;\r\n   }\r\n  \r\npublic String name() {\r\n      return name;\r\n   }\r\n}\r\n-         정수(int)보다는 Class(LightState)의 인스턴스를 사용하는 방법\r\n-         생성자가 private: Class 외부나 Subclass에서 인스턴스를 만들 수 없음\r\n-         Typesafe Enumeration Design Pattern\r\n-         장점\r\n&#376;           Typesafe! (null외에 다른 상태 값 설정 불가)\r\n&#376;           debug용 코드에서 LightState 인스턴스를 출력하는 경우, 의미있는 값을 얻을 수 있음\r\n-         단점\r\n&#376;           작성해야 하는 코드 량이 많아짐\r\n \r\nJava 5.0 Enum 사용\r\npublic enum LightState {\r\n   RED, YELLOW, GREEN;\r\n}\r\n \r\n// 사용법\r\nif ( nextTrafficLight.getState() == LightState.RED ) …\r\n-         Typesafe Enumeration Design Pattern의 장점을 모두 가지고 있음\r\n-         코드가 매우 간결함.\r\n \r\n \r\nEnum 특징 및 사용법\r\nEnum 특징\r\n-         enum 키워드로 정의함\r\n-         인스턴트화 될 수 없음\r\n-         아무것도 상속받지도 상속하지도 않음\r\n-         switch문의 argument가 될 수 있음\r\n-         기본으로 (built-in된) name() 및 toString() 메서드 제공 (현재 인스턴스 이름을 반환). name()은 final이므로 override 불가. toString()은 가능.\r\n \r\nEnum 사용법\r\n-         첫번째 문장은 comma로 구분되는 구분자(identifier) 목록. 목록은 세미콜론(;)으로 끝나야 함\r\n-         enum이 로드되면(class-loaded) 각 구분자 별로 인스턴스가 하나씩 생성됨\r\n-         구분자명이 public static final 멤버변수가 되므로, LightState.GREEN과 같이 참조할 수 있음\r\n-         멤버변수, 메서드, 생성자를 enum에 추가할 수 있음\r\nenum Suit {\r\nDIAMOND(true), HEART(true), CLUB(false), SPADE(false);\r\n \r\nprivate boolean red;\r\n \r\nSuit(boolean b) {\r\nred = b;\r\n}\r\n \r\npublic boolean isRed() {\r\nreturn red;\r\n}\r\n \r\npublic String toString() {  // override toString()\r\nString s = name();\r\ns += red ? ":red" : ":black";\r\n      return s;\r\n   }\r\n}\r\n \r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.daum.net/bellosogno/17', 'http://blog.daum.net/bellosogno/17', '', 9, 0),
(691, '', '서대영', '', '2009-12-28 19:08:23', 'Java', 'enum의 실체', '열거형 상수 즉 Enumeration 이란, 미리 정해진 일정한 값을 가진 새로운 자료형을 사용자가 직접 만드는 것입니다.\r\n\r\n\r\n자기 자신 타입의 public static final 맴버변수를 여러 개 가지는 클래스라고 생각하면 됨.\r\n\r\n\r\n\r\nhttp://bluepoet.me/2012/07/18/번역자바-enum의-10가지-예제/\r\n\r\nhttp://blog.naver.com/miniwikibook?Redirect=Log&logNo=60058344401\r\n\r\nhttp://iilii.egloos.com/4343065/\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://bluepoet.me/2012/07/18/번역자바-enum의-10가지-예제/', 'http://bluepoet.me/2012/07/18/번역자바-enum의-10가지-예제/', '', 20, 0),
(692, '', '서대영', '', '2009-12-28 20:38:20', 'Java', 'Enum을 이용한 최상의 Singleton', '/**\r\n * Using Static Field\r\n */\r\npublic class Singleton1 {\r\n\r\n    public static Singleton1 INSTANCE = new Singleton1();\r\n\r\n    private Singleton1() {\r\n    }\r\n\r\n    public void method() {\r\n        System.out.println("method");\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * Using Static Factory Method\r\n */\r\npublic class Singleton2 {\r\n\r\n    private static Singleton2 INSTANCE;\r\n\r\n    public static Singleton2 getInstance() {\r\n        if (INSTANCE == null) {\r\n            INSTANCE = new Singleton2();\r\n        }\r\n        return INSTANCE;\r\n    }\r\n\r\n    private Singleton2() {\r\n    }\r\n\r\n    public void method() {\r\n        System.out.println("method");\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * Using Enum\r\n */\r\npublic enum Singleton3 {\r\n\r\n    INSTANCE;\r\n\r\n    public void method() {\r\n        System.out.println("method");\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.daum.net/bellosogno/15', NULL, '', 17, 0),
(693, '', '서대영', '', '2009-12-31 10:53:20', 'Commons', '[Lang] toString(), equlas(), hashCode() 구현', '도메인 클래스에서 BaseObject를 상속하면 편리\r\n\r\n\r\n\r\npackage dale.study.business.model;\r\n\r\nimport java.io.Serializable;\r\n\r\nimport org.apache.commons.lang.builder.*;\r\n\r\npublic class Domain implements Serializable {\r\n	\r\n	public String toString() {\r\n		\r\n		return ToStringBuilder.reflectionToString(this, ToStringStyle.MULTI_LINE_STYLE);\r\n		\r\n	}\r\n	\r\n	public boolean equals(Object o) {\r\n		\r\n		return EqualsBuilder.reflectionEquals(this, o);\r\n		\r\n	}\r\n	\r\n	public int hashCode() {\r\n		\r\n		return HashCodeBuilder.reflectionHashCode(this);\r\n		\r\n	}\r\n	\r\n}\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://purehani.egloos.com/1468904\r\n\r\n\r\n\r\n============================== FILE ==============================\r\nBaseObject.java', 'http://purehani.egloos.com/1468904', 'BaseObject.java', 41, 0),
(694, '', '서대영', '', '2010-01-02 20:50:57', 'Swing', 'JTable -> 엑셀', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://omen666.tistory.com/158', 'http://omen666.tistory.com/158', '', 0, 0),
(695, '', '서대영', '', '2010-01-02 21:59:54', 'Swing', '자바 Swing Tutorials', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://java.sun.com/docs/books/tutorial/uiswing/components/index.html', 'http://java.sun.com/docs/books/tutorial/uiswing/components/index.html', '', 13, 0),
(696, '', '서대영', '', '2010-01-05 23:42:48', 'JSTL', '<c:catch> 예외처리', '<c:catch var="exception">\r\n\r\n<%\r\n	String str = null;\r\n	str.charAt(1);\r\n%>\r\n\r\n</c:catch>\r\n\r\n<c:if test="${exception != null}">\r\n	There was an exception : ${exception}\r\n</c:if>', '', '', 6, 0),
(697, '', '서대영', '', '2010-01-05 23:50:38', 'JSTL', 'JSTL 주요 태그', '□ 일반\r\n<c:out>\r\n<c:set>\r\n<c:remove>\r\n<c:catch>\r\n\r\n□ 조건\r\n<c:if>\r\n<c:choose>\r\n<c:when>\r\n<c:otherwise>\r\n\r\n□ URL관련\r\n<c:import>\r\n<c:url>\r\n어플리케이션 컨텍스트 패스를 생략하고 절대경로 사용가능함\r\n<a href="<c:url value=''/admin/tenant/tenantModify.do''/>?tenantId=1">\r\n\r\nhttp://blog.naver.com/0192141606?Redirect=Log&logNo=70175761476\r\n\r\n<c:redirect>\r\n<c:param>\r\n\r\n□ 반복\r\n<c:forEach>\r\n<c:forEachToken>', '', '', 24, 0),
(698, '', '서대영', '', '2010-01-09 20:41:12', 'WAS', 'DD 서블릿 설정', 'servlet-name : DD내에서만 사용하는 이름 (서블릿 클래스와 URL을 맵핑하기 위해 사용)\r\nload-on-startup : 0보다 크면 배포시 로딩 (1부터 오름차순으로 로딩)\r\n\r\n	<servlet>\r\n		<servlet-name>ActionServlet</servlet-name>\r\n		<servlet-class>kr.pe.gomgil.servlet.ActionServlet</servlet-class>\r\n		<load-on-startup>1</load-on-startup>\r\n	</servlet>\r\n	<servlet-mapping>\r\n		<servlet-name>ActionServlet</servlet-name>\r\n		<url-pattern>*.do</url-pattern>\r\n	</servlet-mapping>', '', '', 1, 0),
(699, '', '서대영', '', '2010-01-09 21:19:55', 'ANT', 'ANT 매뉴얼', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://ant.apache.org/manual/', 'http://ant.apache.org/manual/', '', 6, 0),
(761, '', '서대영', '', '2010-02-18 21:51:15', 'Unix', '자동 로그아웃 방지', 'TMOUT=0', '', '', 0, 0),
(700, '', '서대영', '', '2010-01-24 15:18:11', 'Ajax', 'DOM 공통 속성', 'nodeName : 텍스트 노드에서 무효\r\nnodeValue : 앨리먼트에서 무효\r\nparentNode\r\nchildNodes : 텍스트 노드와 애트리뷰트 노드는 어떤 자식도 같지 않음\r\nfirstChild\r\nlastChild\r\npreviousSibling\r\nnextSibling\r\nattributes\r\n\r\n', '', '', 4, 0),
(701, '', '서대영', '', '2010-01-25 23:22:07', 'Ajax', '서버와 통신하기 위한 XMLHttpRequest 객체 얻기', 'function getXMLHTTPRequest() {\r\n	\r\n	var xRequest = null;\r\n	\r\n	if (window.XMLHttpRequest) {\r\n	\r\n		xRequest = new XMLHttpRequest();\r\n	\r\n	} else if (window.ActiveXObject) {\r\n	\r\n		xRequest = new ActiveXObject("Microsoft.XMLHTTP");\r\n	\r\n	} else {\r\n	\r\n		alert("Error initialzing XMLHttpRequest!");\r\n		\r\n	}\r\n	\r\n	return xRequest;\r\n\r\n}', '', '', 2, 0),
(702, '', '서대영', '', '2010-01-25 23:25:49', 'Ajax', 'GET, POST 방식으로 서버와 통신하기', 'function callServer() {\r\n\r\n	var city = document.getElementById("city").value;\r\n	var state = document.getElementById("state").value;\r\n	\r\n	if ((city == null) || (city == "")) return;\r\n	if ((state = null) || (city == "")) return;\r\n\r\n	var url = "test.jsp?city=" + escape(city) + "&state=" + escape(state);\r\n             // var qry = escape(city) + "&state=" + escape(state);\r\n             // 콜백함수 설정\r\n             xmlHttp.onreadystatechange = updatePage;\r\n	// 커넥션 맺기\r\n             xmlHttp.open("GET", url, true);\r\n             // xmlHttp.open("POST", url, true);\r\n	// 전송하기\r\n             xmlHttp.send(null);\r\n             // xmlHttp.send(qry);\r\n\r\n}\r\n\r\nfunction updatePage() {\r\n\r\n	if (xmlHttp.readState == 4) {\r\n	             // 서버 응답 받아오기\r\n		var response = xmlHttp.responseText;\r\n		document.getElementById("zipCode").value = response;\r\n	\r\n	}\r\n\r\n}', '', '', 7, 0),
(703, '', '서대영', '', '2010-01-26 14:27:55', 'Weblogic', 'Out of Memory 로그', 'Stack_Trace: error while unwinding stack\r\n( 0)  0xc48775b0   vm_exit_out_of_memory__FUlPCcb + 0x478  [/acube/bea/jdk142_03/jre/lib/PA_RISC2.0/server/libjvm.sl]\r\n( 1)  0xc48ac4e0   jni_GetCharArrayElements__FP7JNIEnv_P11_jcharArrayPUc + 0x208  [/acube/bea/jdk142_03/jre/lib/PA_RISC2.0/server/libjvm.sl]\r\n( 2)  0xcb38a388   RFC_reallocRecordBuffers + 0x250  [/home/eagspn/lib/libsapjcorfc.sl]\r\n( 3)  0xcb38de34   RFC_Tables_C2Java + 0x1f4  [/home/eagspn/lib/libsapjcorfc.sl]\r\n( 4)  0xcb3952a4   Java_com_sap_mw_jco_rfc_MiddlewareRFC_00024Client_nativeExecute + 0xcf4  [/home/eagspn/lib/libsapjcorfc.sl]\r\nJava out of memory messages are marked with pid: 11819 in /var/adm/syslog/syslog.log.', '', '', 3, 0),
(705, '', '서대영', '', '2010-01-27 15:31:34', 'Unix', '메모리 관련 지식', 'top 명령어를 치면 전체 메모리 현황를 확인할 수 있고,\r\nglance 명령어를 치면 현재 메모리 사용 현황을 확인할 수 있다.\r\nglacne에서 m을 누르면 물리적인 메모리 현황도 볼 수 있다.\r\n\r\nMem Util 에서 왼쪽 그래프 부분을 보시면,\r\nS---S 구간은 OS사용량, U--U 구간은 유저(자바)사용량, B--B 구간은 버퍼캐시 부분이다.\r\n\r\n\r\n일반적으로 OS가 1~1.5G를 차지하므로 총 메모리에서 2G 정도 제외하고,\r\n각 애플리케이션의 Heap 메모리를 잡아줘야 한다.\r\n애플리케이션의 Heap 메모리의합이 전체 메모리를 초과하는 경우,\r\n마지막에 올라오는 애플리케이션은 남아있는 메모리 양만 취해서 로딩된다.', '', '', 9, 0),
(706, '', '서대영', '', '2010-01-27 15:34:53', 'Unix', 'glance 명령어', '서버 자원 사용량 모니터링\r\n\r\nSystem: meskpweb                                      Wed Jan 27 09:04:09 2010\r\nLoad averages: 0.11, 0.15, 0.18\r\n165 processes: 128 sleeping, 36 running, 1 zombie\r\nCpu states:\r\nCPU   LOAD   USER   NICE    SYS   IDLE  BLOCK  SWAIT   INTR   SSYS\r\nB3692A GlancePlus C.03.86.00    09:04:50 meskpweb 9000/800                                                        Current  Avg  High\r\n------------------------------------------------------------------------------------------------------------------------------------\r\nCPU  Util   S SU       U                                                                                           | 12%   11%   12%\r\nDisk Util   F               F                                                                                      | 17%   14%   18%\r\nMem  Util   S                SU                                                       UB        B                  | 84%   84%   84%\r\nSwap Util   U         UR                                  R                                                        | 46%   46%   46%\r\n------------------------------------------------------------------------------------------------------------------------------------\r\n                                                            PROCESS LIST                                                Users=    7\r\n\r\n\r\n\r\nm 버튼을 누르면 구체적인 메모리 현황이 나온다.\r\nTotal VM :  17.9gb   Sys Mem  :  2.46gb   User Mem:  15.1gb   Phys Mem:  32.0gb\r\nActive VM:  17.8gb   Buf Cache:  2.56gb   Free Mem:  11.9gb\r\n\r\n\r\n\r\n열수 때문에 에러가 나면\r\nset line 30 으로 해준다.\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/966138?Redirect=Log&logNo=60005107218', 'http://blog.naver.com/966138?Redirect=Log&logNo=60005107218', '', 11, 0),
(707, '', '서대영', '', '2010-01-28 23:18:38', 'Ajax', 'body 엘러먼트 얻기', 'var bodyElement = document.getElementsByTagName("body")[0];', '', '', 1, 0),
(708, '', '서대영', '', '2010-01-28 23:26:07', 'JavaScript', 'document.writeln 출력', '		var list = new Array(''서대영'', ''배지영'', ''하재천'');\r\n		\r\n		document.writeln(\r\n		\r\n			''<div>'' + list + ''</div>''\r\n		\r\n		);', '', '', 0, 0),
(709, '', '서대영', '', '2010-01-28 23:30:48', 'JavaScript', '클래스 선언', '자바스크립트는 class라는 예약어가 없어서 함수 선언을 통해 클래스를 선언한다.\r\n\r\n\r\nfunction 클래스명(인자) {\r\n\r\n    this.필드먕 = 인자;\r\n\r\n    // 초기화 로직\r\n\r\n    클래스명.prototype.메서드명 = function() {\r\n\r\n        // 선언부\r\n\r\n    };\r\n\r\n}\r\n\r\n아래처럼 아예 객체 생성 후 클래스 밖에서 동적으로 추가 가능\r\n\r\nvar 객체명 = new 클래스명(인자);\r\n\r\n객체명.메서드명 = function() {\r\n\r\n    // 선언부\r\n\r\n}', '', '', 12, 0),
(634, '', '서대영', '', '2009-11-10 14:02:05', 'Weblogic', 'Weblogic 10.3 설치', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://ihoney.pe.kr/entry/리눅스에서-Oracle-WebLogic-Server-11g1031-설치하기', 'http://ihoney.pe.kr/entry/리눅스에서-Oracle-WebLogic-Server-11g1031-설치하기', '', 8, 0),
(635, '', '서대영', '', '2009-11-10 14:02:55', 'Weblogic', 'Weblogic 10.3 도메인 생성', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://ihoney.pe.kr/entry/090929-Oracle-Weblogic-기본설정Domain-생성', 'http://ihoney.pe.kr/entry/090929-Oracle-Weblogic-기본설정Domain-생성', '', 4, 0),
(636, '', '서대영', '', '2009-11-10 15:36:58', 'Java', 'java.util.Properties', 'InputStream 객체를 만들어 Properties 객체의 load 메서드에 인자로 넘긴 후,\r\ngetProperty 메서드에 키를 넘겨 값을 받아온다.\r\n\r\nInputStream 객체를 만드는 방법은 절대경로와 상대경로가 있는데,\r\n현재 클래스 파일의 경로를 기준으로 찾는 상대경로를 추천한다.\r\n(getClass와 getResurceAsStream 메스드를 사용)\r\n\r\n1) 절대경로\r\n : prop.load(FileInputStream("test.properties"));\r\n\r\n2) 상대경로\r\n - 클래스와 동일 디렉토리\r\nprop.load(getClass().getResourceAsStream("web.properties"));\r\n - 클래스 최상위 디렉토리 (WEB-INF/classes)\r\nprop.load(getClass().getResourceAsStream("/resources/gspn/connection.properties"));\r\n\r\n\r\n		Properties pp = new Properties();\r\n		\r\n		try {\r\n			\r\n			FileInputStream fis = new FileInputStream("test.properties");\r\n			pp.load(fis);\r\n			\r\n		} catch (Exception e) {\r\n			\r\n			e.printStackTrace();\r\n			\r\n		}\r\n		\r\n		System.out.println(pp.getProperty("name"));\r\n		System.out.println(pp.getProperty("email"));', '', '', 27, 0),
(637, '', '서대영', '', '2009-11-10 15:38:21', 'Java', 'Class.getResourceAsStream(String name)', '현재의 클래스가 존재하는 위치를 기준으로 해당 resource를 찾아주는 역할을 해준다\r\n\r\n\r\n파일이 클래스 위치에 있으면 패스나 뭐 그런것 신경쓰지 말고\r\n다른 곳에 있다면 "/"로 시작하는 풀 패스로 적고\r\nClass.getResourceAsStream("some.properties");         // 클래스와 같은 위치에 있는 경우\r\nClass.getResourceAsStream("/path/other.properties"); // 클래스의 위치와 전혀 다른 곳에 있는 경우\r\n-----------------------------------------------------------\r\n\r\n\r\n\r\n수려한 알고리즘과 아키텍쳐로 무장한 어플리케이션은 패키징을 한 jar파일로서 배포되어진다. 최근 실전에서의 배포를 처음(?)해보면서 겪었던 시행착오를 적어본다. \r\n일단 내가 경험했던 프로젝트의 구조는 다음과 같았다\r\n\r\nMyPrj\r\n  ㄴ src : source디렉토리\r\n   ㄴ bin : class 디렉토리\r\n  ㄴ lib  : 프로젝트 안에서 사용되어지는 라이브러리(*.jar)\r\n  ㄴ dtd : 프로젝트 안에서 사용되어지는 dtd파일들이 들어 있는 디렉토리 \r\n\r\n\r\n자, 일단 구체적인 main-class지정이나 class-path지정은 skip하고, \r\n실제로 jar로 console이나 eclipse(export기능)에서 뽑아냈을 경우에, \r\n프로젝트 안에서 명시했던 dtd의 경로는 jar에서는 더이상 유효하지 않게 된다. \r\n그 이유인 즉, jar안에 생성되는 모든 파일의 루트경로는 위에서의 bin을 기준으로 한다. \r\n따라서 bin디렉토리 밖에 있는 dtd디렉토리를 찾을 수가 없다는 것. \r\n이것을 해결하기 위한 방법이 바로\r\n\r\ngetResourceAsStream(String name)\r\n\r\n메소드의 사용이다.  백문이불여일견. 설명보다 소스를 통해 살펴보자. \r\n\r\nString dtdPath = "/xhtml-form-1.mod";\r\nInputStream resourceAsStream =\r\n                            this.getClass().getResourceAsStream(dtdPath);\r\nreturn new InputSource(new InputStreamReader(resourceAsStream));\r\n\r\n각 메소드에 대해서 Java API를 살펴보면 다음과 같다. \r\n\r\ngetClass : \r\nthis 객체의 실행시에 클래스를 반환한다. 반환되어지는 클래스 객체는 대표되어지는 클래스의 static synchronized 메소드로부터  lock되어진 객체이다. \r\nThe actual result type is Class<? extends |X|> where |X| is the erasure of the static type of the expression on which getClass is called. For example, no cast is required in this code fragment: 실제 결과의 타입은 Class<? extends |X|>이며 여기서 |X|는 getClass가 호출되어졌을때의 표현의 static type의 삭제이다.\r\n\r\nNumber n = 0; \r\nClass<? extends Number> c = n.getClass(); \r\n\r\n\r\nReturns:\r\n          이 객체의 런타임 클래스를 나타내는 Class Object이다. \r\n\r\nSee Also:\r\nThe Java Language Specification, Third Edition (15.8.2 Class Literals)\r\n\r\n\r\ngetResourceAsStream :\r\n\r\npublic InputStream getResourceAsStream(String name)주어진 name으로 리소스를 찾아낸다. 리소스를 검색하는 규칙은 클래스에서 정의되어진 class loader 로부터 구현되어진 주어진 클래스와 관련이 있다. 이 메소드는 이 객체의 class loader에게 위임한다. 만약 이 객체가 bootstrap class loader로부터 로드되어진다면, 메소드는 ClassLoader.getSystemResourceAsStream(java.lang.String) 에게 위임하게 된다.\r\n\r\n위임을 하기 전에, 절대적인 리소스 이름은다음과 같은 알고리즘을 사용하여 주어진 name으로부터 만들어 진다: \r\n\r\n&#8226;만약, name이 ''/'' (''u002f'') 로 시작되어진다면, 리소스의 절대적인 이름(absolute name)은 ''/''에 이어지는 이름의 일부가 된다. \r\n&#8226;그렇지 않으면, 절대적인 이름은 다음과 같은 형식을 가진다 : \r\n\r\n  modified_package_name/name modified_package_name이 있는 곳은 이 객체가 속한 패키지 이름이고, ''.''(''u002e'')를 대신해서 ''/''로 해당 name을 나타낸다.\r\n\r\nParameters:\r\nname - 요구되어지는 리소스의 이름 \r\nReturns:\r\nInputStream 객체이거나 null(이 이름으로 리소스를 못 찾았을 경우) \r\nThrows: \r\nNullPointerException - name이 null일 경우.\r\nSince:\r\nJDK1.1\r\n위 두개의 메소드로부터 언어딘 InputStream객체인 resourceAsStream객체는 this.getClass()로 부터 받은 클래스 즉, 현재의 클래스가 존재하는 위치를 기준으로 해당 resource를 찾아주는 역할을 해준다. 다른 시각으로 해석해보면,  resouceAsStream은 현재 bin디렉토리를 기준으로하여 해당 dtdPath경로의 dtd파일을 찾아준다. 따라서 위의 프로젝트 경로에서 dtd디렉토리를 bin폴더로 옮겨주어야 한다. 한가지 문제가 있는데 이렇게 dtd디렉토&#47504;를 통째로 bin에 카피한 다음 패키징을 할 경우, dtd디렉토리가 그대로 jar페지지에 존재하는 것이 아니라, dtd디렉토리 내에 있는 모든 파일들이 jar패키지 내 최상위경로에 옮겨지게 된다는 것이다. 이렇게 되는 이유(예측컨데, class파일이 아닐경우에는 모두 이런식으로 취급되는 것 같다)는 아직 명확히 이해를 못하고 있지만, 차후 ant를 스터디 하면서 이유를 규명해 나가려 한다. \r\n설명이 너무 난대업어 이해하기 어렵다. 많이 아는만큼 설명도 쉽게 한다는 말처럼, 내가 아직 정확히 이해를 못하고 있기 때문이 아닌가 생각해본다. 다음에는 명쾌한 설명이 되도록 노력해야겠다. \r\n', '', '', 25, 0),
(638, '', '서대영', '', '2009-11-11 17:03:48', 'JavaScript', '오늘은 이 창이 보이지 않습니다.', '<script>\r\n	//Day close\r\n	function setCookie(name, value, expiredays){\r\n		var todayDate = new Date();\r\n		todayDate.setDate(todayDate.getDate() + expiredays);\r\n		document.cookie = name + "=" + escape(value) + ";path=/; expires=" + todayDate.toGMTString() + ";";\r\n	}\r\n\r\n	function closeWin(){\r\n		if(document.form.notice.checked){\r\n			setCookie("notice", "no", 1);\r\n		}\r\n		self.close();\r\n	}\r\n</script>', '', '', 3, 0),
(639, '', '서대영', '', '2009-11-12 11:10:12', 'Weblogic', '로그가 jsp로 남도록 설정', 'JSPKeep Generated : 변환된 java가 저장되도록 설정\r\nEnable JSP Line Numbers : 로그남을 때 jsp 어느 라인에서 에러 났는지 표시\r\n\r\nweblogic.xml 파일에 아래 내용 추가\r\n<jsp-param>\r\n<param-name>workingDir</param-name>\r\n<param-value>/acube/chinaskp/idir/acube_work</param-value>\r\n</jsp-param>\r\n\r\n\r\n\r\n\r\n\r\n============================== FILE ==============================\r\njsp.gif', '', 'jsp.gif', 2, 0),
(640, '', '서대영', '', '2009-11-13 19:49:44', 'JavaScript', '브라우져 및 OS 체크', 'function getNavigatorInfoStr()\r\n{\r\n    var name = navigator.appName, ver = navigator.appVersion,\r\n        ver_int = parseInt(navigator.appVersion), ua = navigator.userAgent, infostr;\r\n    if(name == "Microsoft Internet Explorer")\r\n    {\r\n        if(ver.indexOf("MSIE 3.0") != -1) return "Internet Explorer 3.0x";\r\n        if(ver_int != 4) return "Internet Explorer " + ver.substring(0, ver.indexOf(" "));\r\n\r\n        var real_ver = parseInt(ua.substring(ua.indexOf("MSIE ") + 5));\r\n        if(real_ver &gt;= 7) infostr = "Windows Internet Explorer ";\r\n        else infostr = "Microsoft Internet Explorer ";\r\n\r\n        if(ua.indexOf("MSIE 5.5") != -1) return infostr + "5.5";\r\n        else return infostr + real_ver + ".x";\r\n\r\n        return "Internet Explorer";\r\n    }\r\n    else if(name == "Netscape")\r\n    {\r\n        if(parseInt(ua.substring(8, 8)) &lt;= 4)\r\n          return "Netscape " + ver.substring(0, ver.indexOf(" "));\r\n        else if(ua.lastIndexOf(" ") &lt; ua.lastIndexOf("/"))\r\n          return ua.substring(ua.lastIndexOf(" "));\r\n        else return "Netscape";\r\n    }\r\n    else return name;\r\n}\r\n\r\nfunction getOSInfoStr()\r\n{\r\n    var ua = navigator.userAgent;\r\n\r\n    if(ua.indexOf("NT 6.0") != -1) return "Windows Vista/Server 2008";\r\n    else if(ua.indexOf("NT 5.2") != -1) return "Windows Server 2003";\r\n    else if(ua.indexOf("NT 5.1") != -1) return "Windows XP";\r\n    else if(ua.indexOf("NT 5.0") != -1) return "Windows 2000";\r\n    else if(ua.indexOf("NT") != -1) return "Windows NT";\r\n    else if(ua.indexOf("9x 4.90") != -1) return "Windows Me";\r\n    else if(ua.indexOf("98") != -1) return "Windows 98";\r\n    else if(ua.indexOf("95") != -1) return "Windows 95";\r\n    else if(ua.indexOf("Win16") != -1) return "Windows 3.x";\r\n    else if(ua.indexOf("Windows") != -1) return "Windows";\r\n    else if(ua.indexOf("Linux") != -1) return "Linux";\r\n    else if(ua.indexOf("Macintosh") != -1) return "Macintosh";\r\n    else return "";\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://kldp.org/node/90444', 'http://kldp.org/node/90444', '', 4, 0),
(641, '', '서대영', '', '2009-11-16 19:26:21', 'Unix', '로그파일 백업하는 방법', '$ cp bomFileToDb.log bomFileToDb.log.091116\r\n$ > bomFileToDb.log', '', '', 2, 0),
(642, '', '서대영', '', '2009-11-18 17:10:36', 'Weblogic', '이클립스 Server Runtime 가상 폴더', '.metadata\\.plugins\\org.eclipse.wst.server.core\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.okjsp.pe.kr/seq/94261', 'http://www.okjsp.pe.kr/seq/94261', '', 0, 0),
(643, '', '서대영', '', '2009-11-19 13:40:01', 'Oracle', '다중 열을 단일 행에 나열', 'SELECT usr, SUBSTR (MAX (SYS_CONNECT_BY_PATH (grp, ''/'')), 2) grp\r\nFROM (\r\n    SELECT usr, grp, ROW_NUMBER () OVER (PARTITION BY usr ORDER BY grp) rnum\r\n    FROM (\r\n        SELECT 칼럼1 usr, 칼럼2 grp\r\n        FROM 테이블\r\n    )\r\n)\r\nSTART WITH rnum = 1\r\nCONNECT BY PRIOR rnum = rnum - 1 AND PRIOR usr = usr\r\nGROUP BY usr\r\n\r\n\r\n\r\n\r\n━━━━━━━━━━━━━━━ 예 ━━━━━━━━━━━━━━━━━━\r\n\r\n\r\nusrid | grpid\r\n──────\r\n dale | a\r\n dale | b\r\n dale | c\r\n\r\n↓↓↓↓↓↓\r\n\r\nusrid | grpid\r\n──────\r\ndale | a/b/c\r\n\r\n\r\n\r\nSELECT usr, SUBSTR (MAX (SYS_CONNECT_BY_PATH (grp, ''/'')), 2) grp\r\nFROM (\r\n    SELECT usr, grp, ROW_NUMBER () OVER (PARTITION BY usr ORDER BY grp) rnum\r\n    FROM (\r\n        SELECT usrid usr, grpid grp\r\n        FROM ep_user.tum_usrgrp\r\n    )\r\n)\r\nSTART WITH rnum = 1\r\nCONNECT BY PRIOR rnum = rnum - 1 AND PRIOR usr = usr\r\nGROUP BY usr\r\n', '', '', 3, 0),
(644, '', '서대영', '', '2009-11-19 19:04:25', 'Regex', '정규식 구문', '^		시작\r\n$		끝\r\n.		모든 문자\r\n\r\n*		0개 이상\r\n+		1개 이상\r\n?		0또는 1개\r\n{n} 	n개\r\n\r\n[xyz]	문자 그룹\r\n( )		그룹. 해당 부분을 기억함\r\n\r\n[^xyz]	해당 문자가 아님\r\nx|y		또는\r\n\r\n+?\r\n*?\r\n?? Lazy (최대한 적은 수 리턴)\r\n\r\n\r\n\r\n============================== FILE ==============================\r\n11월3주-Regular Expression.ppt', '', '11월3주-Regular Expression.ppt', 16, 0),
(645, '', '서대영', '', '2009-11-20 10:02:31', 'Regex', 'Java에서 Pattern과 Matcher 클래스로 그룹단위로 나누기', 'Pattern pattern = Pattern.compile(regex);\r\nMatcher matcher = pattern.matcher(phone);\r\n\r\nif (matcher.find())\r\n	System.out.println("- Matched String : " + matcher.group());\r\n\r\nfor (int i = 1; i <= matcher.groupCount(); i ++)\r\n	System.out.println("- Group " + i + " : " + matcher.group(i));', '', '', 12, 0),
(646, '', '서대영', '', '2009-11-20 11:07:49', 'JavaScript', 'getElementById VS getElementsByName', 'getElementById와 getElementsByName의 차이는...\r\n단일값이냐? 아니면 배열값이냐? 라는 차이로 보면 쉬울듯하다.\r\n\r\n\r\n\r\n앞에 document 안 붙여도 잘 됨\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.양평공원.kr/develop/149', 'http://www.양평공원.kr/develop/149', '', 3, 0),
(647, '', '서대영', '', '2009-11-20 11:44:29', 'JavaScript', '정규식을 이용한 전화번호 체크', '	function validatePhone(input) {\r\n	\r\n		var phone = input.value;\r\n		\r\n		alert(phone);\r\n		var regex = /^[0-9]{2,3}-[0-9]{3,4}-[0-9]{4}$/;\r\n		// var regex = new RegExp(/^[0-9]{2,3}-[0-9]{3,4}-[0-9]{4}$/);\r\n		\r\n		if (!regex.test(phone)) {\r\n		\r\n			alert("Invalid Phone Number");\r\n			input.focus();\r\n			return false;\r\n						\r\n		} else\r\n			return true;\r\n	\r\n	}', '', '', 6, 0),
(648, '', '서대영', '', '2009-11-20 13:14:02', 'JavaScript', 'JavaScript replace() Method', '[ Syntax ]\r\nstring.replace(regexp/substr,newstring)\r\n\r\n\r\n[ Example ]\r\nobj.fkimg.replace(/[^\\d\\.]/g, '''')\r\n: 숫자에 있는 특수문자 제거\r\n\r\n\r\n\r\n\r\n\r\n첨부 : 정규식과 replace를 이용한 문자열 치환\r\n\r\n\r\n\r\n============================== FILE ==============================\r\nReplacer.htm', '', 'Replacer.htm', 8, 0),
(649, '', '서대영', '', '2009-11-20 15:42:50', 'Unix', 'grep - 정규식 일치 라인 출력', '[ 용도 ]\r\n\r\n파일이나 문자열에서 패턴과 일치하는 라인만 출력\r\n\r\n[ 문법 ]\r\n\r\ngrep 옵션 파일or문자열\r\n명령어 | grep ~~~\r\n\r\n[ 옵션 ]\r\n\r\n-n : 라인번호 출력\r\n-i : 대소문자 무시하고 검색\r\n-v: 패턴에 맞지않는 부분만 검색\r\n-c : 라인의 갯수만 출력\r\n\r\n[ 예문 ]\r\n\r\ngrep -n "^root" file.txt\r\n: 파일에서 root 로 시작하는 라인을 번호와 출력\r\n\r\ngrep -v "down$" file.txt\r\n: 파일에서 down 로 끝나는 라인만 제외하고 출력\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://cafe.naver.com/linuxmastering.cafe?iframe_url=/ArticleRead.nhn%3Farticleid=20', 'http://cafe.naver.com/linuxmastering.cafe?iframe_url=/ArticleRead.nhn%3Farticleid=20', '', 21, 0),
(650, '', '서대영', '', '2009-11-20 15:43:41', 'Unix', '프로세스 아이디만 출력', 'ps -efx | grep -v grep | grep asiaskp | grep bea | grep WAS | awk ''{print $2}''\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nawk는 gerp가 받아온 행을 뛰어쓰기로 나누어서 리턴', '', '', 7, 0),
(651, '', '서대영', '', '2009-11-20 17:23:43', 'Unix', '유저 체크', '# Checks the user''s id.\r\nUSER_ID=`whoami`\r\nif [ $USER_ID != "root" ] && [ $USER_ID != "cisskp" ]\r\nthen\r\n        echo "- Your ID : $USER_ID"\r\n        echo "- You have no authority. Please relogin with cisskp or root"\r\nfi', '', '', 4, 0),
(652, '', '서대영', '', '2009-11-20 19:52:45', 'Unix', 'echo 메시지 출력 read 키보드 입력', '------------- 계산기 -----------------------\r\nbanner "Calculator"\r\necho "Please enter the first number... \\c"\r\nread n1\r\necho "Please enter the second number... \\c"\r\nread n2\r\necho "Please enter an operator... (+, -, *, /) \\c"\r\nread op\r\n\r\nr=`expr $n1 "$op" $n2`  \r\necho "$n1 $op $n2 = $r"\r\n--------------------------------------------\r\n\r\n예제2는 read 명령을 이용해서 키보드로부터 값을 읽어드린후 그 값을 변수에 저장하고 출력해보는 것이다.\r\n\r\n지금까지 쉘 프로그래밍에 대한 기초적인 것들을 알아 보았다. 미흡하나마 이 글이 여러분께 도움이 되었기를 빌며 다음에는 본격적으로 Bash 문법을 공부해 보기로 하자.', '', '', 6, 0),
(653, '', '서대영', '', '2009-11-20 20:01:31', 'Unix', '변수설정', '쉘 프로그래밍에서 변수를 사용할때는 $를 앞에 붙이면 된다. 하지만 변수의 내용을 설정할 때는 $를 붙이지 않는다.\r\n변수명=값 의 형식으로 하되 = 의 좌우에 공백 이 있어서는 안된다\r\n\r\n----[예제1-2] myinfo.sh -------------------------\r\n\r\nNAME="Dale"\r\necho $NAME\r\n\r\n--------------------------------------------------', '', '', 4, 0),
(654, '', '서대영', '', '2009-11-20 20:02:55', 'Unix', '프로그램 매개변수', '$숫자로 받는다.\r\n\r\n---- test.sh ----\r\necho $1, $2\r\n---------------\r\n\r\ntest.sh Dale Seo\r\n=> Dale, Seo\r\n', '', '', 3, 0),
(655, '', '서대영', '', '2009-11-20 20:36:00', 'Unix', 'for 문 (구구단)', 'banner "Multiplication Table"\r\necho "Please enter the number... \\\\c"\r\nread n\r\n\r\nr=0\r\nfor i in 1 2 3 4 5 6 7 8 9\r\ndo\r\n        r=`expr $n * $i`\r\n        echo "$n * $i = $r"\r\ndone', '', '', 5, 0),
(656, '', '서대영', '', '2009-11-20 21:44:54', 'Unix', '프로세스 순차 실행', 'wihle 문에서 process id를 주기적으로 체크하여 다음 프로세스를 실행\r\n\r\n\r\n\r\n============================== FILE ==============================\r\nall-in-one.sh', '', 'all-in-one.sh', 3, 0),
(657, '', '서대영', '', '2009-11-23 13:45:26', 'HTML', 'object 태그', '< OBJECT 태그를 이용한 ActiveX 설치여부 체크 >\r\n\r\n\r\nobject 태그는 ActiveX 컨트롤을 사용하고 싶을때 사용하는 것입니다. ActiveX는 보통 윈도우등에 사용하는 프로그램을 웹에서 사용하려고 만들어 진것입니다. 동영상, 플레쉬 등 기본적으로는 운영체제의 프로그램에서 동작을 합니다. 그곳에 사용되는 미디어플레이어등을 웹에 심어 웹브라우져에서도 볼수 있도록 만들었지요.\r\n\r\nparam 값은 ActiveX가 실행되는데 필요한 값들을 넘겨주는 값이지요. 동영상을 재생하려면 먼저 파일경로가 있어야 하겠죠. 파일경로등을 param 으로 넘겨주는 역할을 하는것이지요. CLASSID는 ActiveX의 이름이라고 생각하시면 될것입니다. ActiveX를 사용하는 사이트에 접속을 하면 ActiveX가 자신의 pc에 깔리게 되어있습니다. 그러면 레지스트리에 등록이 되고 CLASSID의 값으로 그프로그램(ActiveX)를 브라우져에서 호출하여 보여지게 되는 것이고 CLASSID는 ActiveX 프로그램 이름입니다. ActiveX를 개인이 만들수도 있습니다. vb나 델파이 등을 이용하여 만들어 나만의 컨트롤을 만들수도 있습니다. CLASSID 를 알수 있는 것은 소스보기를 하면 그곳에 CLASSID 가 나와 있습니다. 다른방법은 엑티브엑스패드 인가 하는 프로그램으로 알수도 있구요.\r\n\r\n \r\n\r\n* object 태그에 onError라는 이벤트 핸들을 지정해주고 javascript로 그 핸들에 대한 처리를 해준다 *\r\n\r\n \r\n\r\n<script language="JavaScript" type="text/JavaScript">\r\nfunction ActiveX_error() {\r\n   alert("ActiveX Control이 설치되지 않았습니다.*******");\r\n}\r\n</script>\r\n\r\n\r\n<object id=window type="application/x-oleobject" onError="ActiveX_error();" classid="clsid:3267EA0D-B5D8-11D2-A4F9-00608CEBEE49" codebase="/common/gauceocx/toinbdata.cab#version=1,1,0,35"> \r\n<param name="Command" value="maximize"> \r\n</object>\r\n\r\n \r\n\r\n//classid 에 GUID 식별자를 넣는다.\r\n\r\n//codebase 속성에 ActiveX가 설치되지 않았을때 패키지를 다운받을 주소를 넣는다.\r\n\r\n//ActiveX_error()에는 parameter를 넣을 수 없다.\r\n\r\n//ActiveX_error() 펑션을 object 태그 아래에 기술하면 안되고 위에 기술한다.\r\n\r\n \r\n\r\nclsid:60109D65-70C0-425C-B3A4-4CB001513C69      LuxeCombo     LuxeCombo.LuxeWCombo.1\r\n\r\nclsid:E6876E99-7C28-43AD-9088-315DC302C05F      EMEdit           ToinbEMEdit.ToinbWEMEdit.1\r\nclsid:3267EA0D-B5D8-11D2-A4F9-00608CEBEE49     DataSet          ToinbData.ToinbWData.1\r\n\r\nclsid:0A2233AD-E771-11D2-973D-00104B15E56F       Transaction     ToinbTR.ToinbWTR.1', '', '', 1, 0),
(658, '', '서대영', '', '2009-11-23 19:50:09', 'Network', 'netstat 명령어', '$ netstat -se\r\n히스토리 확인 (나중에 원인 파악)\r\n\r\n$ netstat -na | grep -i LISTEN\r\n리스닝 하는 포트만 보기\r\n\r\n# netstat -na |findstr 80\r\n80포트로 접속된 서버들만 보임\r\n\r\n# 6301 포트와 연결되는 소켓 개수 확인\r\nnetstat -na| grep 6301| wc -l \r\n\r\n# 443 포트 리스닝 하는지 확인\r\nnetstat -na | grep 443 | grep LISTEN \r\ntcp        0      0  194.133.18.136.443     *.*                     LISTEN\r\ntcp        0      0  194.133.18.135.443     *.*                     LISTEN\r\n\r\n# netstat -ni\r\n인터페이스(랜카드) IP확인\r\n\r\nnetstat -an 명령어 결과에 대한 설명\r\n\r\n현재 자신이 연결하고 있는..\r\n그리고, 다른 곳에서 자신으로 연결되어 있는\r\n커넥션 목록을 볼 수 있을 겁니다.\r\n\r\n# netstat -nr\r\n서버 라우팅 테이블 확인\r\n\r\n# netstat -an\r\n\r\nUDP\r\n  Local Address         Remote Address     State\r\n-------------------- -------------------- -------\r\n     *.111                                 Idle\r\n     *.*                                   Unbound\r\n     *.32771                              Idle\r\n     *.4045                                Idle\r\n     *.32772                              Idle\r\n211.217.66.202.53                    Idle\r\n     *.32773                              Idle\r\n     *.514                                 Idle\r\n     *.177                                 Idle\r\n     *.32778                              Idle\r\n     *.2049                                Idle\r\n     *.*                                   Unbound\r\n\r\nTCP \r\n  Local Address             Remote Address      Swind  Send-Q Rwind   Recv-Q  State\r\n-------------------- -------------------- ----- ------ ------- ------ -------\r\n     *.*                                       *.*                       0         0         0          0       IDLE\r\n     *.111                                    *.*                       0         0        0           0 LISTEN\r\n     *.*                                       *.*                        0         0        0           0 IDLE\r\n     *.32771                                *.*                       0         0         0           0 LISTEN\r\n     *.21                                     *.*                        0        0         0           0 LISTEN\r\n     *.23                                     *.*                       0         0         0           0 LISTEN\r\n     *.110                                   *.*                       0         0         0           0 LISTEN\r\n     *.512                                   *.*                       0         0         0           0 LISTEN\r\n127.0.0.1.53                              *.*                       0         0         0           0 LISTEN\r\n211.217.66.202.53                     *.*                       0         0         0           0 LISTEN\r\n     *.32772                                *.*                      0         0         0           0 LISTEN\r\n     *.80                                     *.*                      0         0         0           0 LISTEN\r\n     *.32773                               *.*                       0         0         0           0 LISTEN\r\n211.217.66.202.23    211.217.77.206.16701 65489      0  8760      0     ESTABLISHED\r\n211.217.66.202.23    211.217.77.206.19073 17276      0  8760      0 ESTABLISHED\r\n211.217.66.202.23    211.217.77.206.19629 16089      1  8760      0 ESTABLISHED\r\n211.217.66.202.110   210.217.178.202.1407 65356      0  8760      0 TIME_WAIT\r\n     *.*                  *.*                0      0     0      0 IDLE\r\nActive UNIX domain sockets\r\nAddress  Type          Vnode     Conn  Local Addr      Remote Addr\r\n7071dea8 stream-ord 70560b68 00000000 /tmp/mysql.sock  \r\n-------------------------------------------------------------------------------\r\n상태\r\n\r\nIdle - 포트가 열려 있으나 사용 하지않고 있음\r\nLISTEN - 들어오는 접속을 대기 하고 있음\r\nESTABLISHED - 정상적으로 접속이 연결된 상태\r\nTIME_WAIT - 접속 후 다른 명령이나 신호를 기다리는 상태\r\nSYN_SENT -  접속을 ESTABLISHED 상태로 되려고 시도 하는 상태\r\nCLOSE_WAIT -  서버에서 연결을 종료 하기 위해 클라이언트에게 종결을 요청하고\r\n             회신을 받아 종료하는 과정의 상태\r\nUnbound - 접속을 기다리지 않음\r\nCLOSED - 완전히 종료\r\nCLOSING - 흔하지 않지만 주로 확인 메세지가 전송도중 분실된 상태\r\nSYN_RECEIVED - 서버가 원격 클라이언트로부터 접속 요구를 받아 클라이언트에게 응답\r\n              하였으나 아직 클라이언트에게 확인 메세지를 받지 않은 상태\r\n\r\n\r\nTCP (Transmission Control Protocol) 패킷 관리 프로토콜. 패킷 전달 후 연결 여부까지 확인\r\nUDP (User Datagram Protocol) TCP 보다 연결이 적은 사용자 프로토콜. 패킷전달 여부만 확인\r\n\r\n참고 문서 : http://www.kesm.co.kr/Upload/unix/UNIX-Solaris-포트관리.pdf \r\n\r\n--------------------------------------------------------\r\n[ 서버 라우팅 테이블 확인 ]\r\nwasadm@chinagspn1:[/bea]netstat -r\r\nRouting tables\r\nDestination        Gateway           Flags   Refs     Use  If   Exp  Groups\r\n\r\nRoute Tree for Protocol Family 2 (Internet):\r\ndefault            27.106.204.129    UG        5    136830 en8      -      -   \r\n10/8               109.10.1.1        UGS       7     87482 en9      -      -   \r\n27.106.204.128     chinagspn1        UHSb      0         0 en8      -      -   =>\r\n27.106.204.128/25  chinagspn1        U         1    464653 en8      -      -   \r\nchinagspn1         loopback          UGHS      1       148 lo0      -      -   \r\n27.106.204.255     chinagspn1        UHSb      0         4 en8      -      -   \r\n109/8              109.10.1.1        UGS       1     10955 en9      -      -   \r\n109.10.1.0         chinagspn1        UHSb      0         0 en9      -      -   =>\r\n109.10.1/24        chinagspn1        U         6    609990 en9      -      -   \r\nchinagspn1         loopback          UGHS      8   1171261 lo0      -      -   \r\n109.10.1.255       chinagspn1        UHSb      2      1508 en9      -      -   \r\n127/8              loopback          U        13    170794 lo0      -      -   \r\n203.254.223/24     109.10.1.1        UGS      10      1328 en9      -      -   \r\n\r\nRoute Tree for Protocol Family 24 (Internet v6):\r\n::1%1              ::1%1             UH        1       106 lo0      -      -  ', '', '', 39, 0),
(659, '', '서대영', '', '2009-11-23 22:53:16', 'Tomcat', 'jsp가 변환된 서블릿 경로', '톰캣홈/work/Catalina/서버명/웹애플리케이션명/org/arpache/jsp', '', '', 0, 0),
(660, '', '서대영', '', '2009-11-29 15:11:32', 'XML', 'XML 기술정리', 'DDT, XLM Sechema : XML 문서 구조 정의\r\n\r\nXPath : 특정 요소를 가르키는 경로\r\n\r\nXSL, XSLT : XML 문서를 다른 방법으로 표현\r\n\r\nDOM, SAT : 응용 프로그램에서 XML을 사용', '', '', 4, 0),
(661, '', '서대영', '', '2009-11-30 19:48:59', 'Java', 'switch case 문에서 enum 사용하기', 'public enum Color\r\n{\r\n    BLACK,\r\n    WHITE,\r\n    RED,\r\n    BLUE,\r\n    YELLOW;\r\n}\r\n\r\n\r\n\r\npublic enum Shape\r\n{\r\n    RECTANGLE,\r\n    TRIANGLE,\r\n    CIRCLE,\r\n    OVAL;\r\n}\r\n\r\n\r\n\r\npublic class Paper\r\n{\r\n    private Color color;\r\n    private Shape shape;\r\n\r\n    // Getter와 Setter는 역시 길어지니깐 생략..\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\npublic static void main(String [] args)\r\n{\r\n    Paper p4 = new Paper();\r\n    p4.setShape(Shape.RECTANGLE);\r\n    p4.setColor(Color.WHITE);\r\n\r\n    Paper p5 = new Paper();\r\n    p5.setShape(Color.YELLOW); // 오류발생 : The method setShape(Shape) in the type Paper is not applicable for the arguments (Color)\r\n    p5.setColor(Color.BLACK);\r\n\r\n    Paper p6 = new Paper();\r\n    p6.setShape(-1); // 오류발생 : The method setShape(Shape) in the type Paper is not applicable for the arguments (int)\r\n    p6.setColor(0); // 오류발생 : The method setColor(Color) in the type Paper is not applicable for the arguments (int)\r\n}\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://entireboy.egloos.com/4149658', 'http://entireboy.egloos.com/4149658', '', 12, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(662, '', '서대영', '', '2009-12-02 09:50:56', 'WAS', 'DD 에러 페이지 설정', '□ 에러 코드별로 잡기\r\n	<error-page>\r\n		<error-code>404</error-code>\r\n		<location>/error/500.jsp</location>\r\n	</error-page>\r\n	<error-page>\r\n		<error-code>500</error-code>\r\n		<location>/error/500.jsp</location>	\r\n	</error-page>\r\n\r\n□  에러 타입별로 잡기\r\n    <error-page>\r\n        <exception-type>java.lang.Throwable</exception-type>\r\n        <location>/WEB-INF/views/error.jsp</location>\r\n    </error-page>\r\n	<error-page>\r\n		<exception-type>java.lang.NullPointerException</exception-type>\r\n	<location>/error/NullPointerException.jsp</location>\r\n	</error-page>\r\n\r\n□  에러 대신 보여줄 jsp 페이지\r\n\r\n맨 위에 아래 2줄이 있어야, 브라우져에서 응답 코드에 따라 디폴트 화면을 보여주는 걸 방지된다.\r\n\r\n<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>\r\n<% response.setStatus(HttpServletResponse.SC_OK); %>', '', '', 10, 0),
(663, '', '서대영', '', '2009-12-02 16:35:17', 'Weblogic', 'Weblogic 8.1에서 JSTL 사용법', 'JSTL 버젼 1.0을 사용해야함.\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/pluggers?Redirect=Log&logNo=150006284554', 'http://blog.naver.com/pluggers?Redirect=Log&logNo=150006284554', '', 3, 0),
(664, '', '서대영', '', '2009-12-02 20:02:32', 'Weblogic', '콘솔에서 clssspath 확인방법', '맨 위 Console에서 마우스 오른 쪽 버튼 [Vew server & browser info] 클릭\r\n\r\njava.class.path : 파일 단위로 지정 (권장)\r\njava.class.path : 폴더 단위로 지정\r\n\r\n클래스 이름이 충돌할 경우 앞에 있는것이 우선순위를 가짐.\r\nCLASSPATH 설정 부분은 startWebLogic.sh 참조', '', '', 1, 0),
(665, '', '서대영', '', '2009-12-02 20:04:12', 'Weblogic', 'classpath 설정법 (Window, Linux)', '윈도우는 set 과 ; 로 환경변수를 설정하고,\r\n리눅스는 export 와 : 로 환경변수를 설정한다.\r\n\r\n■ 윈도우 \r\n\r\n1. 세션에서만 유효\r\nset classpath=경로1;경로2;경로3...\r\n\r\n2. 실행, 컴파일할때만 유효\r\njava -classspath 경로1;경로2;경로3...\r\n\r\n3. 영구 세팅\r\n내컴퓨터 > 속성 > 고급탭 > 환경변수\r\n\r\n\r\n■ 리눅스\r\n\r\n1. 세션에서만 유효\r\nexport CLASSPATH=경로1:경로2:경로3...\r\n\r\n2. 실행, 컴파일할때만 유효\r\njava -classspath 경로1:경로2:경로3...\r\n\r\n3. 영구 세팅\r\nvi /etc/profile.d/classs.sh\r\nJAVA_HOME=JDK가 깔려있는 절대경로 값\r\nPATH=$PATH:$JAVA_HOME/bin\r\nCLASSPATH=경로1:경로2:경로3...\r\nexport CLASSSPATH PATH JAVA_HOME', '', '', 12, 0),
(666, '', '서대영', '', '2009-12-02 20:52:31', 'J2EE', 'classpath 우선순위', 'jar 파일을 넣을 수 있는 곳은 3군데 있다.\r\n\r\n${JAVA_HOME}/jre/lib/ext/ : JVM단 (최상위)\r\n- 모든 파일을 실행할 때 참조하는 라이브러리\r\n- 너무 많은 jar 파일을 넣어놓으면 간단한 java파일을 실행할 때도 참조되어 속도가 저하됨\r\n\r\n${CATALINA_HOME}/common/lib/ : 서버단 (톰켓)\r\n${WEBLOGIC_HOME}/wlserver_10.3/shared/lib : 서버단 (웹로직)\r\n- WAS 자체 라이브러리와 어플 공용 라이브러리 (jdbc, jndi 등)\r\n\r\n${CATALINA_HOME}/${CONTEXT_ROOT}/WEB-INF/lib/ : 어플단\r\n- 해당 어플리케이션에서만 사용할 라이브러리\r\n\r\n\r\n\r\n해당 매뉴얼 http://tomcat.apache.org/tomcat-5.5-doc/class-loader-howto.html\r\n\r\n\r\n\r\n----------------------------------------------------------------------\r\n일반적으로 Weblogic 에서 클래스패스 우선순위는\r\nWEB-INF/classes\r\nWEB-INF/lib\r\n$classpath 순이다.\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/paraevil?Redirect=Log&logNo=70024440277', 'http://blog.naver.com/paraevil?Redirect=Log&logNo=70024440277', '', 12, 0),
(667, '', '서대영', '', '2009-12-03 00:21:40', 'JSP', 'EL 지대로 사용하기', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://test.neoburi.com/index?part=bbs&main=005&sub=&act=read&no=567&pg=3&grp=0&rows=30&key=&field=0&mode=', 'http://test.neoburi.com/index?part=bbs&main=005&sub=&act=read&no=567&pg=3&grp=0&rows=30&key=&field=0&mode=', '', 2, 0),
(633, '', '서대영', '', '2009-11-06 20:30:25', 'Unix', '[HP-UX] Root File System Full', '(1) 현상\r\n시스템이 제 역할을 하지 못하며, 심한 경우 모든 서비스가 멈춰서 고객의 요청을 거부할 수 있음.\r\n(2) Practice Guide\r\n\r\n(3) Practice\r\n  Step1) 모니터링 툴에에 "파일시스템(/)의 가용공간이 위험수준에 도달하였습니다."의 메시지를 \r\n\r\n            통해 Root File System 용량에 대한 검토를 진행함.\r\n  Step2) Speed Call 에 서비스 유무 확인\r\n  Step3) 시스템 로그인 후, Root File System 사용량에 대한 부분 체크함.\r\n            # bdf\r\n  Step4) 시스템에 있는 core 화일을 제거함.\r\n            # find / -name core -print\r\n\r\n\r\n            core 화일을 찾아서 자동으로 지우려면 다음과 같은 명령어를 실행함.\r\n            # find / -name core -exec rm {} \\; -print\r\n  Step5) /dev 디렉토리 밑에 일반파일이 있는지 조사함.\r\n            # find /dev  -type f -exec ls -l {} \\;\r\n            일반화일이 있을 경우, 모두 지우면 되며, 특히 테이프에 백업을 받을 경우에 사용자가 \r\n\r\n            디바이스명을 잘못 지정하여, 테이프에 백업되지 않고 화일에  저장하는 경우가 종종 있음.\r\n  Step6) /var가 root 화일 시스템이 있을 경우, /var 디렉토리 밑을 조사함.\r\n            # du -sk /var/* | sort -nr\r\n           이 명령어를 실행하면 /var 밑에 있는 디렉토리 별로 그 서브 디렉토리까지 포함하여 KB 단위\r\n\r\n           의 크기를 출력하며, 거기에서 사이즈가 큰 디렉토리에 대하여  조사함. 정상적인 시스템에\r\n\r\n           주로 문제가 될 만한 디렉토리는 다음과 같음.\r\n             /var/adm\r\n             /var/mail\r\n             /var/log\r\n             /var/preserve\r\n             /var/spool\r\n  Step6-1) /var/adm\r\n             /var/adm/syslog/ 디렉토리에는 시스템이 운용중이 발생하는 메세지나 기타 정보들이 \r\n\r\n             누적 보관됨. 이 디렉토리에 큰 화일이 있으면 정리함.\r\n             syslog.log.XXX.날짜,  ... \r\n\r\n             (시스템에서 발생되는 메시지를 보관하는 파일.그냥 지워도 상관없음)\r\n             syslog.log 화일의 크기가 너무 클 경우, 파일 크기를 0으로 만들 수 있음. \r\n             # cp /dev/null syslog.log \r\n             \r\n             wtmp 또는 wtmpx 화일의 크기가 너무 크면 다음과 같은 명령어를 실행하여 그 크기를 \r\n\r\n             0으로 만들 수 있음. 이 화일에는 시스템에 접속한 사용자에 대한 정보를 가지고 있는 파일.\r\n             # cp /dev/null wtmp\r\n             # cp /dev/null wtmpx\r\n\r\n             만일 pacct이 있으면 그 화일의 크기를 다음과 같은 명령어를 사용하여 크기를 0으로 만들 \r\n\r\n             수 있음. 이 화일은 accounting 정보를 가지고 있는  파일.\r\n             # cp /dev/null pacct\r\n             pacct1, pacct2, ... 등등의 화일이 있으면 그냥 삭제하면 됨.\r\n\r\n \r\n\r\n             그외에도 사이즈가 큰 화일을 알아서 정리한다.\r\n  Step6-2) /var/mail\r\n             /var/mail 디렉토리에는 메일 데이타가 보관되는 곳이다. 이 디렉토리에 사이즈가 큰 파일이 \r\n\r\n             있으면, 해당 사용자에게 그 메일을 정리하도록 함.\r\n  Step6-3) 기타 디렉토리에 대해서도 조사하여 불필요하게 사이즈가 큰 파일이 있을  경우 알아서 \r\n             정리해야 함. 단 파일을 지울 때, 그 파일이 어떤 파일인지 숙지한 후에 지울 것인가 아닌가\r\n\r\n             를 결정해야 함.\r\n  Step7) / filesystem 시스템에 있는 1 MB 이상되는 파일을 조사하여, 파일 크기순으로 sort하여 그 \r\n\r\n             내용을 조사함.\r\n             # find / -mount -size +1024k -ls > /tmp/find.list\r\n             # sort -nr +6 /tmp/find.list > /tmp/find.list.s\r\n             find.list.s 화일에서 비정상적인 큰 화일이 있는지 조사하여, 불필요한 파일은 삭제함.\r\n  Step8) File System 사용량 체크\r\n             # bdf\r\n  Step9) 서비스 정상 가동 여부를 확인\r\n       1) DBMS\r\n            # ps -ef  | grep ora_\r\n            # su - 오라클User\r\n            # sqlplus ‘/ as sysdba’\r\n            sqlplus> SELECT count(*) from tab;\r\n            sqlplus> exit\r\n            # lsnrctl status\r\n       2) Application\r\n            # ps -ef  | grep 프로세스명 (프로세스 데몬 기동 확인)\r\n            해당 Application SE에게 연락하여 정상여부 확인\r\n  Step10) 장애 처리 종료\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/mathee96?Redirect=Log&logNo=50039997903', 'http://blog.naver.com/mathee96?Redirect=Log&logNo=50039997903', '', 7, 0),
(710, '', '서대영', '', '2010-01-31 16:30:55', 'JavaScript', '객체 읽기전용으로 처리', '	function changeMode(mode) \r\n	{\r\n		if (mode == ''R'') \r\n		{\r\n			$(''searchForm'').FsYear.disabled = true;\r\n			$(''searchForm'').FsMonth.disabled = true;\r\n			$(''searchForm'').FDATE.disabled = false;\r\n			$(''searchForm'').TDATE.disabled = false;\r\n		}\r\n		else\r\n		{\r\n			$(''searchForm'').FsYear.disabled = false;\r\n			$(''searchForm'').FsMonth.disabled = false;\r\n			$(''searchForm'').FDATE.disabled = true;\r\n			$(''searchForm'').TDATE.disabled = true;\r\n		}\r\n	}\r\n\r\n\r\n\r\n$(''FREIGHT'').readOnly = true;', '', '', 9, 0),
(711, '', '서대영', '', '2010-02-01 10:29:35', 'XML', 'XML 표준스펙', 'http://www.w3.org/\r\n\r\n> XML Technology\r\n\r\n> XML Essentials\r\n\r\n> 맨아래 \r\n\r\nCurrent Status of Specifications\r\nLearn more about the current status of specifications related to: \r\n\r\n> XML \r\n\r\n> Extensible Markup Language (XML) 1.0 (Fifth Edition) \r\n\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.w3.org/TR/2008/REC-xml-20081126/', 'http://www.w3.org/TR/2008/REC-xml-20081126/', '', 4, 0),
(712, '', '서대영', '', '2010-02-01 10:43:11', 'XML', 'Editplus에서 xsd, xsl, dtd 구문강조', '도구 > 기본설정 > 파일종류 : XML > 파일확장자 앞에 추가 : dtd;xsl;xsd;xml;...', '', '', 2, 0),
(713, '', '서대영', '', '2010-02-01 11:08:15', 'Window', '가상디렉토리 만들기', '제어판 > 관리도구 > 기본웹사이트 > 새로만들기 > 가상디렉토리\r\n> 별칭지정 > 디렉토리\r\n\r\nhttp://localhost/별칭 으로 브라우져로 탐색가능', '', '', 0, 0),
(714, '', '서대영', '', '2010-02-01 12:08:06', 'XML', 'XML 문서 구성 요소 (6가지)', '1. [필수] PI (Processing Instructions)\r\n - 파서나 응용프로그램에 어떤 특별한 작업을 현재 XML문서에 행하라는 지시함\r\n - 형식 :\r\n<?PItarget 처리내용 ?>\r\n- xml 타겟은 필수 ( 속성 : version, encoding)\r\n - 예)\r\n<?xml version="1.0" encoding="euc-kr" ?>\r\n<?xml-stylesheet type="text/xsl" href="product.xsl"?>\r\n<?dd-voice type="sound/kr" ?>\r\n\r\n\r\n2. DTD 선언 - XML문서의 구조와 문법정의\r\n<!DOCTYPE root-ele-name SYSTEM "uri" [ 정의 ]>\r\n\r\n\r\n3. [필수] Elements \r\n - root 1개, 계층구조\r\n - 요소 = 태그 + 속성 + 내용\r\n - 대소문자 구별, 공백 불허\r\n\r\n\r\n4. ENTITY 참조 - DTD에서 미리선언하고 DTD또는 XML문서에서 재사용가능 (치환)\r\n - 반복 사용되는 문자열이나 외부 객체 저장해 놓음\r\n - &ENTITY명 으로 참조\r\n - DTD 안에 정의\r\n - 내장 ENTITY (<, >, & '' ") => 가독성 떨어지므로 CDATA 사용 권장\r\n\r\n\r\n5. CDATA Section\r\n - 파서가 해석하지 않고 응용프로그램에 전달\r\n - 특수문자 보호를 위함\r\n   <![CDATA[ 절달하고자 하는 문장 ]]>\r\n\r\n\r\n6. Comment : 사람을 위한 부분\r\n - <!-- 주석 -->', '', '', 10, 0),
(715, '', '서대영', '', '2010-02-01 12:11:22', 'XML', 'XML 문서의 Whitespace (공백)', '모든 공백이 보존됨 (브라우져에서 안 보이더라도)\r\n\r\ncf. HTML은 다중공백, New Line, Tab 을 무시', '', '', 1, 0),
(716, '', '서대영', '', '2010-02-01 12:12:55', 'XML', '데이터 표현 시 Element와 Attribute의 선택', '- Element : 반복되는 데이터, 순서가 중요한 데이터\r\n- Attribute : Metadata, 생략해도 기본값을 가져야 할 데이터', '', '', 1, 0),
(717, '', '서대영', '', '2010-02-01 14:26:03', 'XML', 'Oracle에서 XML형식으로 데이터 가져오기', 'http://www.adp-gmbh.ch/ora/sql/xmlelement.html\r\nhttp://www.adp-gmbh.ch/ora/sql/xmlforest.html\r\nhttp://www.adp-gmbh.ch/ora/sql/xmlsequence.html\r\n\r\nXMLElement: 관계형 값을 XML 요소로 변형시키는 함수(형식: value) \r\nXMLAttributes: SQL 질의에 의해 반환된 XML 요소에 특성을 설정하는 데 사용되는 함수 \r\n\r\nXMLElement (element-name)\r\nXMLElement (element-name, value-expr)\r\nXMLElement (element-name, XMLAttributes( (value-expr))\r\nXMLElement (element-name, XMLAttributes( (value-expr), value-expr)\r\n\r\n\r\n[예제]\r\n\r\ncreate table xml_element_test (\r\n  some_id    number   primary key,\r\n  some_col_1 varchar2(10),\r\n  some_col_2 date,\r\n  some_col_3 number(5)\r\n);\r\n\r\nalter session set nls_date_format=''dd-mon-yyyy'';\r\n\r\ninsert into xml_element_test values( 1, ''one''  , ''15-jan-1974'', 74);\r\ninsert into xml_element_test values( 2, ''two''  , ''28-mar-1891'', 18);\r\ninsert into xml_element_test values( 3, ''three'', '' 7-sep-1599'', 59);\r\ninsert into xml_element_test values( 4, ''four'' , ''10-aug-1616'', 16);\r\ninsert into xml_element_test values( 5, ''five'' , ''19-oct-1904'', 19);\r\n\r\nselect XMLElement ("SomeElementName", some_col_1) from xml_element_test;\r\n\r\nXMLELEMENT("SOMEELEMENTNAME",SOME_COL_1)\r\n----------------------------------------------------\r\n<SomeElementName>one</SomeElementName>\r\n<SomeElementName>two</SomeElementName>\r\n<SomeElementName>three</SomeElementName>\r\n<SomeElementName>four</SomeElementName>\r\n<SomeElementName>five</SomeElementName>\r\n\r\nset long 1000\r\n\r\nselect XMLElement ("SomeElementName", \r\n  XMLAttributes(some_id as "SomeAttrName"),\r\n  XMLElement("col-1", some_col_1),\r\n  XMLElement("col-2", some_col_2),\r\n  XMLElement("col-3", some_col_2)\r\n) "Elem"\r\nfrom \r\n  xml_element_test\r\nwhere \r\n  some_id=4;\r\n\r\nElem\r\n---------------------------------------------------------------------------------------------------------------------------------\r\n<SomeElementName SomeAttrName="4"><col-1>four</col-1><col-2>10-aug-1616</col-2><col-3>10-aug-1616</col-3></SomeElementName>\r\n\r\n\r\n\r\n--------------------------------------------------------------------------------------------\r\nXMLForest: 관계형 값 목록으로부터 XML 요소의 목록(일명: "포리스트(forest)")을 생성하는 함수 \r\nXMLForest (value-expr)\r\nXMLForest (value-expr as alias-name)\r\nXMLForest (value-expr as alias-name, value-expr as alias-name [,...])\r\n\r\n[예제]\r\ncreate table xml_forest_test (\r\n  some_id    number   primary key,\r\n  some_col_1 varchar2(10),\r\n  some_col_2 date,\r\n  some_col_3 number(5)\r\n);\r\n\r\n\r\nalter session set nls_date_format=''dd-mon-yyyy'';\r\n\r\ninsert into xml_forest_test values( 1, ''one''  , ''15-jan-1974'', 74);\r\ninsert into xml_forest_test values( 2, ''two''  , ''28-mar-1891'', 18);\r\ninsert into xml_forest_test values( 3, ''three'', '' 7-sep-1599'', 59);\r\ninsert into xml_forest_test values( 4, ''four'' , ''10-aug-1616'', 16);\r\ninsert into xml_forest_test values( 5, ''five'' , ''19-oct-1904'', 19);\r\n\r\n\r\nselect XMLForest (some_col_1 as "col-1", some_col_2 as "col-2", some_col_3 as "col-3") "Forest" \r\nfrom xml_forest_test\r\nwhere some_id = 4;\r\n\r\n\r\nForest\r\n--------------------------------\r\n<col-1>four</col-1>\r\n<col-2>10-aug-1616</col-2>\r\n<col-3>16</col-3>\r\n\r\n\r\n\r\n \r\n\r\n--------------------------------------------------------------------------------------------\r\n\r\n\r\nXMLSequence (xml-type-instance)\r\nXMLSequence (sys-refcursor-instance\r\nXMLSequence (sys-refcursor-instance, ''format'')\r\n\r\n[예제]\r\nselect\r\n  value(tab).getStringVal() "Some Col"\r\nfrom\r\n  table (\r\n    XMLSequence(extract (\r\n     XMLType(''<things><item>car</item><item>bottle</item><item>chair</item></things>''),\r\n     ''/things/item'')\r\n    ) \r\n  ) tab;\r\n\r\n\r\nSome Col\r\n-----------------------------\r\n<item>car</item>\r\n<item>bottle</item>\r\n<item>chair</item>\r\n\r\n\r\n', '', '', 0, 0),
(718, '', '서대영', '', '2010-02-01 15:23:24', 'XML', 'Data Island 기술', 'html에서 간단하게 바로 xml로 접근할 수 있는 기술\r\n\r\n\r\n\r\n============================== FILE ==============================\r\ndatailand.html|booklist4장실습.xml|datailand3.html|Booklist_작가여러명.xml', '', 'datailand.html|booklist4장실습.xml|datailand3.html|Booklist_작가여러명.xml', 3, 0),
(719, '', '서대영', '', '2010-02-01 21:47:07', 'XML', 'DTD 개념', 'XML 문서의 문법 및 구조를 정의\r\n', '', '', 4, 0),
(720, '', '서대영', '', '2010-02-01 21:52:01', 'XML', 'DTD 선언법', '★ 모든 엘리먼트에 대한 정의가 있어야 한다.\r\n※ DTD 문서도 XML의 일종이므로 맨 위에 PI가 있어야 함\r\n※ 순서는 중요하지 않음\r\n\r\n\r\n* 외부 DTD를 참조하는 경우\r\n\r\n<!DOCTYPE 루트요소태그명 SYSTEM "파일명.dtd">\r\n\r\n* 내부 DTD\r\n\r\n<!DOCTYPE 루트요소태그명 [\r\n\r\n...\r\n\r\n]>\r\n\r\n* 혼합\r\n\r\n<!DOCTYPE 루트요소태그명 SYSTEM "파일명.dtd" [\r\n\r\n\r\n...\r\n\r\n]>\r\n\r\n- 내부 DTL이 외부 DTL을 우선한다.\r\n\r\n* 매우 알려진 DTL\r\n\r\n<!DOCTYPE 루트요소태그명 PUBLIC "식별자">\r\n\r\nex) \r\n<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">', '', '', 11, 0),
(721, '', '서대영', '', '2010-02-01 22:05:11', 'XML', 'DTD 구성요소 1 - ELEMENT', '* 형식 : <!ELEMENT ele-name (content model) >\r\n\r\n* 내용\r\n\r\n1) 문자열 : (#PCDATA)\r\n - Leaf Node 일 경우\r\n\r\n2) 자식태그 : (자식태그명...)\r\n - 출현방법 : 순서 (,), 선택 (|)\r\n - 출현횟수 : 태그명 (1번), 태그명? (0, 1), 태그명+ (1개 이상), 태그명* (0개 이상)\r\n\r\n3) 혼합 : (#PCDATA | 자식태그명1 | 자식태그명2...)*\r\n\r\n4) Empty : EMPTY\r\n - <성별 type="남" />\r\n\r\n5) Any : 선언한 ELEMENT 중 아무거나\r\n', '', '', 5, 0),
(722, '', '서대영', '', '2010-02-01 22:50:02', 'XML', 'xmlvalidator 사용하기', 'C: 아래 압축을 푼다. (반드시)\r\n\r\nEditPlus에서 도구 > 사용자 도구 구성\r\n\r\n명령 : C:XMLSWbinxmlvalidator.bat\r\n인수 : $(FileName)\r\n디렉토리 : $(FileDir)\r\n\r\n\r\n\r\n============================== FILE ==============================\r\nXMLValidator.JPG', '', 'XMLValidator.JPG', 6, 0),
(723, '', '서대영', '', '2010-02-02 09:08:15', 'XML', 'XML 개념', '1. XML문법 : 다른 XML문서를 만드는 사용됨 (XSL, XSD, MathML, VoiceML)\r\n2. XML문서 (*.xml)', '', '', 1, 0),
(724, '', '서대영', '', '2010-02-02 09:34:07', 'XML', 'DTD 구성요소 2 - ATTLIST', '<!ATTLIST 태그명 속성명 타입 기본값 >\r\n\r\n\r\n\r\n* type (자료형) 10가지\r\n - CDATA : 단순 문자열\r\n - Enumeration : 열거형 (문자열1, 문자열2, ...)\r\n - NMTOKEN(S) : 공백없는 문자열 (들)\r\n - ID : 문서내의 유일값 (숫자로 시작 X)\r\n - IDREF(s) : ID 참조값 (들)\r\n - ENTITY(IES) : dtd내에 ENTITY로 선언된 값들 중 하나를 취함 \r\n - NOTATION : non-XML data 처리 or 외부 개체 참조\r\nParser에게 Parsing을 하지 않고 helper 프로그램을 지정해줌\r\n\r\n* default-decl (기본값 선언) 4가지\r\n - #REQUIRED : 필수\r\n - #IMPLIED : 선택\r\n - #FIXED "고정값" : 고정\r\n - "기본값" : default\r\n\r\n\r\n----------------------------------------------------------\r\n\r\n\r\n\r\n* ENTITY를 속성의 타입으로 사용\r\n\r\nDTD 선언)\r\n\r\n<!ENTITY samsung "http://www.samsung.co.kr" >\r\n<!ENTITY hyundai "http://www.hyundai.co.kr" >\r\n<!ENTITY lg "http://www.lg.co.kr" >\r\n<!ELEMENT 회사 (#PCDATA) >\r\n<!ATTLIST 회사 href ENTITY #IMPLIED >\r\n\r\nXML 사용)\r\n\r\n<회사 href="samsung">삼성</회사>\r\n\r\n\r\n* NOTATION을 속성의 타입으로 사용\r\n\r\nDTD 선언)\r\n\r\n<!NOTATION gif SYSTEM "file://application/gifEdit.exe" >\r\n<!NOTATION jpg SYSTEM "file://application/jpgEdit.exe" >\r\n<!ELEMENT clipart (#PCDATA) >\r\n<!ATTLIST clipart format NOTATION (gif|jpg) #REQUIRED) >\r\n\r\nXML 사용)\r\n\r\n<clipart format="gif">campus.gif</clipart>', '', '', 17, 0),
(725, '', '서대영', '', '2010-02-02 11:08:03', 'XML', '설정값을 저장할 때 properties 와 xml 장단점', '간단한 거는 properties 가 유리하고,\r\n구조적인 게 들어가면 xml이 유리\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://kin.naver.com/qna/detail.nhn?d1id=1&dirId=1040201&docId=71676549&qb=7ISk7KCV6rCSIHByb3BlcnRpZXMgeG1s&enc=utf8&section=kin&rank=1&sort=0&spq=0&pid=f2Pamz331zssscZ0jxsssv--056641&sid=S2eFh7ldZ0sA', 'http://kin.naver.com/qna/detail.nhn?d1id=1&dirId=1040201&docId=71676549&qb=7ISk7KCV6rCSIHByb3BlcnRpZXMgeG1s&enc=utf8&section=kin&rank=1&sort=0&spq=0&pid=f2Pamz331zssscZ0jxsssv--056641&sid=S2eFh7ldZ0sA', '', 1, 0),
(726, '', '서대영', '', '2010-02-02 12:03:26', 'Tomcat', 'tomcat 가상디렉토리(디렉토리 리스팅) 설정', 'Apache , 톰켓 가상디렉토리 설정\r\n\r\n \r\n\r\n<아파치>\r\n\r\nIIS에서 사용하는 가상디렉토리 와 같은 역할을 하는 것이\r\n아파치에서는 Alias로 구현가능하다\r\n\r\nhttpd.conf 에 아래와 같이 기술합니다\r\n\r\n \r\n\r\nAlias /aaa "/home/aaa/www"\r\n\r\n<Directory "/home/aaa/www">\r\n\r\nOptions FollowSymLinks\r\n\r\nDirectoryIndex index.html index.htm index.jsp *.jsp *.php\r\n\r\nOrder allow,deny\r\n\r\nAllow from all\r\n\r\n</Directory>\r\n\r\n \r\n\r\nAlias /aaa 는 가상디렉토리명이 됩니다 http://주소/aaa  이런식으로 표현됩니다\r\n\r\n그뒤에 “/home/aaa/www” 는 실제 경로를 기술합니다\r\n\r\n \r\n\r\n그밑에 <Directory “/home/aaa/www”> 부분은 그디렉토리에 관한 설정이 들어갑니다\r\n\r\n설정후 아파치를 재시작하고 접속하면 위치에 들어있는 index.html이나 php가 읽힙니다\r\n\r\n \r\n\r\n<톰켓>\r\n\r\n아파치와 톰켓이 톰켓커넥터(mod_jk.so)를 이용하여 연동되어있다고 하면\r\n\r\n아파치와 톰켓 둘다 설정을 해야합니다 아파치는 위와같이 설정하면 되고\r\n\r\n톰켓은 5.5버전부터 추천하는 것은 server.xml에 context path를 기술하지말고\r\n\r\n따로 파일을 만들어서 context path를 기술하라는 것입니다 이에대한자료는\r\n\r\n따로 찾아보시길..\r\n\r\n \r\n\r\n위치는  $CATALINA_HOME/conf/[enginename]/[hostname]/    입니다\r\n\r\n쉽게 말하면\r\n\r\n/usr/local/tomcat/conf/Catalina/localhost/  정도가 되겠죠\r\n\r\n이위치에 aaa.xml 을 만들어줍니다(위의 아파치 내용과 연계해서 말하겠습니다)\r\n\r\n<Context path="/aaa" docBase="/home/aaa/www"\r\n        debug="0" privileged="true" reloadable="true">\r\n\r\n<Logger className="org.apache.catalina.logger.FileLogger"\r\n                 directory="logs"  prefix="localhost_log." suffix=".txt"\r\n            timestamp="true"/>\r\n\r\n</Context>\r\n\r\n \r\n\r\n위의 형식으로 저장하고 톰켓 내렷다가 올려주면 http://주소/aaa  로도 jsp 작동하는것을 보실수있습니다\r\n\r\n\r\napache와 톰켓을 연동하고나서 아파치를 건들여야 할지\r\n톰켓에서 설정해줘야 할지 검색을 해봤지만 원하는 답변이 없어서\r\n쫌 삽질은 했습니다 암튼 apache+톰켓을 연동하신분들은\r\n위와같이 둘다 설정해주시면 되겟습니다\r\n\r\nAPM으로 세팅되어있다면 apache설정부분으로 적용되니\r\n아파치로 설정하면 되겠습니다\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/aladdin76?Redirect=Log&logNo=40046618639', 'http://blog.naver.com/aladdin76?Redirect=Log&logNo=40046618639', '', 9, 0),
(727, '', '서대영', '', '2010-02-02 14:15:36', 'XML', 'DTD 구성요소 3 - ENTITY', '재 사용 가능한 개체\r\n단순 문자열이나 개체를 미리 정의 해놓고 사용\r\n\r\n[ 문자열 참조 ]\r\n\r\n* XML에서\r\n\r\n- 정의 : <!ENTITY ent-name ent-value >\r\n- 참조 : &ent-name;\r\n\r\n* DTD에서\r\n\r\n- 정의 : <!ENTITY % ent-name ent-value >\r\n- 참조 : %ent-name;\r\n\r\n\r\n[ 다른 xml 또는 dtd 파일 참조 ]\r\n\r\n* XML에서\r\n\r\n- 정의 : <!ENTITY ent-name SYSTEM "common.xml" >\r\n- 참조 : &ent-name;\r\n\r\n* DTD에서\r\n\r\n- 정의 :  <!ENTITY % ent-name SYSTEM "common.dtd" >\r\n- 참조 : %ent-name;\r\n\r\n\r\n[ Non-XML 외부 data ]\r\n: NDATA (Notation Data) 키워드를 사용하여 Parser에게 Parsing을 하지 않고 helper 프로그램을 지정해줌\r\n\r\n- DTD 정의 :\r\n<!NOTATION GIF87A SYSTEM "gifeditor.exe" >\r\n<!ENTITY logo SYSTEM "logo.gif" NDATA GIF87A >\r\n<!ELEMENT company (#PCDATA) >\r\n<!ATTLIST company image ENTITY #IMPLIED>\r\n\r\n- XML 사용 : \r\n<company image="logo">삼성멀티 캠퍼스</company>', '', '', 15, 0),
(728, '', '서대영', '', '2010-02-02 15:41:01', 'XML', 'DTD 구성요소 4 - NOTATION', 'XML 문서 처리를 위해 사용될 외부의 응용 프로그램(helper)이나 이진 데이터에 간략한 기호를 부여하여, 문서의 다른 곳에서 사용하도록 표기를 제공\r\n\r\n* 형식\r\n\r\n<!NOTATION not-name SYSTEM "URI">\r\n<!NOTATION not-name PUBLIC "식별자">\r\n\r\n* 사용처\r\n\r\n1) PI\r\n\r\n선언 : <!NOTATION HandleThis SYSTEM "file://application/handlers.exe" >\r\n사용 : <?HandleThis source="xyz.xml" ?>\r\n\r\n=> 응용 프로그램에게 xyz.xml을 handler.exe 파일이 처리하도록 지시\r\n\r\n2) Attribute Type\r\n\r\n선언 :\r\n<!NOTATION gif SYSTEM "gifEdit.exe" >\r\n<!NOTATION jpg SYSTEM "jpgEdit.exe" >\r\n<!ELEMENT clipart (#PCDATA) >\r\n<!ATTLIST clipart file.format NOTATION (gif|jpg) #REQUIRED >\r\n사용 :\r\n<clipart file.format="gif" >campus.gif</clipart>\r\n\r\n3) ENTITY\r\n\r\n- DTD 정의 :\r\n<!NOTATION GIF87A SYSTEM "gifeditor.exe" >\r\n<!ENTITY logo SYSTEM "logo.gif" NDATA GIF87A >\r\n<!ELEMENT company (#PCDATA) >\r\n<!ATTLIST company image ENTITY #IMPLIED>\r\n\r\n- XML 사용 :\r\n<company image="logo">삼성멀티 캠퍼스</company> ', '', '', 7, 0),
(729, '', '서대영', '', '2010-02-02 16:32:25', 'XML', 'Namespace', '- 응용프로그램이 XML문서를 사용할 때 요소와 속성 이름이 충돌나지 않게 하기 위함\r\n- 윈도우의 폴더, 유닉스의 디렉터리, 자바의 패키지와 같은 개념\r\n- 같은 범주의 Element와 Attribute를 그룹화\r\n- Namespace가 필요한 Element에서 xmlns라는 Attribute를 통해 선언\r\n- Root요소와 그 하위노드에서 선언 가능.\r\n\r\n- 형식\r\n\r\n<tag-name xmlns:prefix-name="URI" >\r\n\r\n- Prefix : 인간을 위한 간단한 기호\r\n- URI : Paser가 사용하는 고육 식별자\r\n\r\n\r\n\r\n* Default Namespace\r\n - prefix 생략 후, xmlns 뒤에 바로 정의\r\n - 하위 element에는 적용되지만, attribute에는 적용되지 않음\r\n\r\n\r\n* 표준 Namespace\r\n - Parser가 문법을 기억하고 있는 Namespace\r\n ex) xslt\r\n<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" >', '', '', 5, 0),
(730, '', '서대영', '', '2010-02-03 21:19:16', 'XML', 'XSL 개념', 'XML 문서 변환과 표현을 정의하기 위한 권고안의 집합\r\n\r\n1. XSL Transformation (XSLT) : XML 문서의 변환을 위한 언어\r\n2. XML Path Language (XPath) : XML 문서의 구성 요소들에 대한 경로를 지정하기 위한 언어 (XSLT, XPointer, DOM에서 사용)\r\n3. XSL Formatting Objects (XSL-FO) : 서식 의미 체계를 지정하기 위한 XML 어희 (잘 사용 안 함)', '', '', 1, 0),
(731, '', '서대영', '', '2010-02-03 21:20:31', 'XML', 'XPath 스펙', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.w3.org/TR/xpath/', 'http://www.w3.org/TR/xpath/', '', 2, 0),
(732, '', '서대영', '', '2010-02-03 21:46:03', 'XML', 'XPath 표현식', '\r\naxis::node-test[predicate]\r\n\r\n1) axis::  => 방향성을 나타남, 보통 단축 기호 사용\r\nchild:: => (디폴트)\r\nattribute:: => @\r\nparent::node() => ..\r\nself::node() => .\r\ndescendant-or-self::node() => //\r\n\r\n2) node-test : 노드 이름\r\n특정노드 : tag-name\r\n모든노드 : *\r\n특정속성 : @att-name\r\n모든속성 : @*\r\nnode() : 모든노드선택\r\ntext() : 리프노드의 텍스트 선택\r\ncomment() : 모든주석노드\r\nprocessing-instruction() : 모든PI노드\r\n\r\n3) predicate : 노드집합을 필터링\r\n- 위치필터링 : tagname[1], tagname[last()]\r\n- 컨텐츠필터링 : tagname[@id=''1'']\r\n- 존재필터링 : tagname[name], tagname[@id]\r\n\r\n\r\nLocation Path\r\n\r\n항상 노드 집합 (node-set)을 반환\r\n절대 위치 경로와 상대 위치 경로가 있음', '', '', 2, 0),
(733, '', '서대영', '', '2010-02-03 21:50:54', 'XML', 'XPath 연산자', '| : 합집합\r\nand, or : 논리\r\n=, &lt, %gt : 비교\r\n+, _, *, div, mod : 산술', '', '', 2, 0),
(734, '', '서대영', '', '2010-02-03 21:54:33', 'XML', 'XPath 함수', 'position()\r\nlast()\r\ncount(node-set)\r\n\r\nnumber(object?)\r\nsum(node-set)\r\nfloor(number)\r\nceiling(number)\r\nround(number)\r\n\r\nconcat(string*)\r\nstart-with(string, string)\r\ncontains(stirng, stirng)\r\nsubstring(string, number, number?)', '', '', 3, 0),
(735, '', '서대영', '', '2010-02-03 22:01:59', 'XML', 'XSLT 스펙', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.w3.org/1999/XSL/Transform', 'http://www.w3.org/1999/XSL/Transform', '', 1, 0),
(736, '', '서대영', '', '2010-02-03 22:18:26', 'XML', 'XHTML 개념', 'XML문서에 XSLT 스타일시트를 적용하여 HTML로 변환', '', '', 0, 0),
(737, '', '서대영', '', '2010-02-03 22:20:27', 'XML', 'XSLT 사용법', '* XML 문서에 XSLT 스타일시트 적용\r\n : PI로 기술\r\n<?xml-stylesheet type="text/xsl" href="product.xsl"?>\r\n\r\n* XSLT 스타일스트 작성\r\n : version, xmlns 속성 필수\r\n\r\n<?xml version="1.0" encoding="UTF-8"?>\r\n<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSTL/Transform">\r\n\r\n    <xsl:output method="html"/>\r\n    <xsl:template match="XPath">\r\n        <xsl:value-of select="XPath"/>\r\n        <xsl:apply-templates select="XPath" />\r\n    </xsl:template>\r\n\r\n</xsl:stylesheet>', '', '', 3, 0),
(738, '', '서대영', '', '2010-02-03 22:40:59', 'XML', 'XSLT 요소 정리', '* Template Rule : XSLT 기본구조, output template 즉 변환된 문서 내용을 포함\r\n\r\n- 템플릿 반복 적용\r\n<xsl:template match="pattern" mode="QName" priority"3"> 로 정의\r\n <xsl:value-of select=... >\r\n=>\r\n<xsl:apply-templates select="pattern" mode="QName"> 에서 사용\r\n    <xsl:sort....>\r\n\r\n- 템플릿 단순 호출\r\n<xsl:template ="QName"> 로 정의\r\n=>\r\n<xsl:call-template select="QName"> 에서 사용\r\n\r\n- 출력 종류\r\n<xsl:value-of select= : 내용\r\n<xsl:copy-of select= : 자식요소의 태그명 + 내용\r\n<xsl:copy></xsl:copy> : 자기 요소 태그명\r\n\r\n\r\n- match 또는 name 속성 중 하나는 반드시 지정\r\n\r\n-----------------------------------------------------------------------\r\n1.template에 포함되지 않으면 내장template에 의해 모두 출력된다.\r\n2.해당 template가 존재하지 않으면 내장template에 의해 모두 출력된다.\r\n3.파서는 가장 상위의 template만 수행한다. \r\n4.같은template가 여러개 있는 경우 나중것을 수행한다. \r\n5.같은template가 여러개 있는 경우 더 상세한 것이 수행한다. \r\n6.같은template가 여러개 있는 경우 priority가 높은것이 수행한다. \r\n7.같은template가 여러개 있는 경우 상황에따라 선택 수행하고자하는 경우\r\n  mode를 이용한다.\r\n\r\n8.template는 name또는 match속성이 반드시 하나만 정의되어야한다.\r\nmatch는 파서가 시작시 진입점 찾을때(가장상위것만수행)\r\nmatch는 apply-templates가 select=""의 return값(node-set)과 같은\r\n        match를 찾는다.\r\nname은 call-template에 의해서만 사용된다. \r\n', '', '', 4, 0),
(739, '', '서대영', '', '2010-02-04 11:27:43', 'XML', 'XSLT 동적요소', '<xsl:element name="{XPath}" use-attribute-sets="속성집합명">\r\n    요소내용\r\n</xsl:element>\r\n\r\n<xsl:attribute name="속성명">\r\n    속성값\r\n</xsl:attribute>\r\n\r\n<xsl:attribute-set="속성집합명">\r\n    <xsl:attribute ...\r\n    <xsl:attribute ...\r\n</xsl:attribute-set>\r\n\r\n<xsl:text disable-output-escaping="yes">\r\n    문서&nbsp;&nbsp;&nbsp;제목\r\n</xsl:text>\r\n\r\n<xsl:processing-instruction name="stylesheet">\r\n    type="text/xsl" href="~~.dtd"\r\n</xsl:processing-instruction>\r\n\r\n<xsl:comment>\r\n    주석\r\n</xsl:comment>', '', '', 3, 0),
(740, '', '서대영', '', '2010-02-04 12:41:36', 'XML', 'XSLT 조건, 반복문', '<xsl:if test="boolean-expression">\r\n</xsl:if>\r\n\r\n\r\n<xsl:choose>\r\n    <xsl:when test="boolean-expression">\r\n    </xsl:when>\r\n    <xsl:otherwise>\r\n    </xsl:otherwise>\r\n</xsl:choose>\r\n\r\n\r\n<xsl:for-each select="XPath">\r\n    <xsl:sort ...>\r\n    반복할 내용\r\n</xsl:for-each>', '', '', 0, 0),
(741, '', '서대영', '', '2010-02-04 12:49:24', 'XML', 'XSLT 변수, 인자', '로컬 : Template 내에 선언\r\n전역 : top-level 에 선언\r\n\r\n\r\n변수선언\r\n<xsl:variable name="변수명" select="변수값"/>\r\n\r\n변수호출\r\n<xsl:value-of select="$변수명"/>\r\n\r\n\r\n인자전달\r\n: apply-templates나 call-template 내용에서 전달\r\n<xsl:apply-templates select="price">\r\n    <xsl:with-param name="r_price" select="round(price)"/>\r\n</xsl:apply-templates>\r\n\r\n인자사용\r\n<xsl:template match="price">\r\n    <xsl:param name="r_price" select="''''"/>\r\n    <xsl:value-of select="concat($r_price, ''-'', .)"/>\r\n</xsl:template>', '', '', 1, 0),
(742, '', '서대영', '', '2010-02-04 12:53:32', 'XML', 'XSLT 출력포멧, 구조화', '1. 출력포멧\r\n: top-level에서 함\r\n<xsl:output method="xml"|"htm"|"text" intent="yes>\r\n\r\n2. 외부스타일시트 포함\r\n\r\n1) <xsl:import href="external.xsl"/>\r\ntop-level의 최상단에 와야함.\r\n<xsl:apply-imports/>를 사용하여 강제 적용 가능\r\n\r\n2) <xsl:include href="external.xsl"/>\r\ntop-level에 아무데나 와도됨.\r\n가장 아래있는 것이 우선됨.', '', '', 0, 0),
(743, '', '서대영', '', '2010-02-04 14:28:56', 'XML', 'XHTML 샘플', '모든 기술 총집합 (XPath, XSTL, XML)\r\n\r\n\r\n\r\n============================== FILE ==============================\r\nbooklist_final.xml|booklist_final.xsl', '', 'booklist_final.xml|booklist_final.xsl', 4, 0),
(744, '', '서대영', '', '2010-02-04 16:06:21', 'XML', 'XML Schema 사용법 (W/O Target Namespace)', '* XML 문서\r\n\r\n<?xml version="1.0" encoding="UTF-8"?>\r\n<products xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="products.xsd">\r\n\r\n: xsi 이름공간을 사용한다고 선언 후 noNamespaceSchemaLocation 속성을 통해 사용할 XSD 파일 경로 지정\r\n\r\n\r\n* XSD 문서\r\n\r\n<?xml version="1.0" encoding="UTF-8"?>\r\n<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">\r\n\r\n: xs 이름공간을 사용하여 XML Schema 문법으로 구조를 작성\r\n\r\n\r\n※ Target Namespace를 활용하면 더 복잡', '', '', 10, 0),
(745, '', '서대영', '', '2010-02-04 21:50:06', 'XML', 'XML Schema 사용법 (With Target Namespace)', 'XSD를 만들 때 XML 문서에서 사용할 Namespace의 URL을 지정해준다.\r\ntargetNamespace 속성을 이용하여 문법을 선언 및 정의하고,\r\nxmlns 속성을 이용하여 그 문법을 참조한다.\r\n\r\n* XML 문서\r\n\r\n<?xml version="1.0" encoding="UTF-8"?>\r\n<products xmlns="http://www.dale.pe.kr" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.dale.pe.kr DBConnections.xsd ">\r\n\r\n: xsi 이름공간을 사용한다고 선언 후 noNamespaceSchemaLocation 속성을 통해 사용할 XSD 파일 경로 지정\r\n\r\n\r\n* XSD 문서\r\n\r\n<?xml version="1.0" encoding="UTF-8"?>\r\n<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" targetNamespace="http://www.dale.pe.kr" xmlns="http://www.dale.pe.kr">\r\n\r\n: xs 이름공간을 사용하여 XML Schema 문법으로 구조를 작성', '', '', 11, 0),
(746, '', '서대영', '', '2010-02-05 09:13:59', 'XML', 'XSLT 태그정리', '<xsl:stylesheet>\r\n\r\n1) <xsl:input\r\n2) <xsl:include\r\n3) <xsl:output\r\n4) <xsl:template name= match= priority= mode=\r\n a. param\r\n b. value-of\r\n c. copy-of\r\n d. call-template / with-param\r\n e. apply-template / with-param, sort\r\n f. for-each / sort\r\n5) <xsl:variable number\r\n\r\n</stylesheet>', '', '', 0, 0),
(747, '', '서대영', '', '2010-02-05 15:44:28', 'XML', 'DOM 응용프로그램 활용 예제', '\r\n\r\n\r\n\r\n============================== FILE ==============================\r\nXML class.zip', '', 'XML class.zip', 7, 0),
(748, '', '서대영', '', '2010-02-10 20:00:15', 'iPlanet', 'server.xml', '어떤 conf 파일을 쓰는지 나와있음.\r\n\r\n<VSCLASS id="defaultclass" objectfile="obj.conf" rootobject="default" acceptlanguage="off">', '', '', 5, 0),
(749, '', '서대영', '', '2010-02-10 20:03:07', 'Weblogic', 'stop.sh 파일로 부터 weblogic 콘솔 로그인 정보 알아내기', './setEnv.sh\r\njava weblogic.Admin FORCESHUTDOWN -url 127.0.0.1:2188 -username eagspn -password tlwkd123', '', '', 1, 0),
(750, '', '서대영', '', '2010-02-10 20:08:19', 'Weblogic', 'BEA WebLogic Server and WebLogic Express 8.1 Documentation', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nl', 'l', '', 0, 0),
(751, '', '서대영', '', '2010-02-13 12:56:16', 'Tomcat', 'Directory Listings 가능하게 하기', '웰컴 파일이 없을 경우 데렉토리 목록이 나온다.\r\n\r\nconf/web.xml 파일의 listings을 true로 세팅\r\n\r\n    <servlet>\r\n        <servlet-name>default</servlet-name>\r\n        <servlet-class>org.apache.catalina.servlets.DefaultServlet</servlet-class>\r\n        <init-param>\r\n            <param-name>debug</param-name>\r\n            <param-value>0</param-value>\r\n        </init-param>\r\n        <init-param>\r\n            <param-name>listings</param-name>\r\n            <param-value>true</param-value>\r\n        </init-param>\r\n        <load-on-startup>1</load-on-startup>\r\n    </servlet>', '', '', 1, 0),
(752, '', '서대영', '', '2010-02-14 00:33:46', 'Log4j', '<log4j:configuration> 하위 요소 : appender, logger, root', '<< appender >> \r\n로그를 출력하는 위치이다. 콘솔에 출력할 수 있으며, 텍스트 파일에 기록할 수도 있다.\r\n\r\n* 종류\r\nConsoleAppender\r\nFileAppender\r\nRollingFileAppender\r\nDailyRoliingFileAppender\r\nJDBCAppender\r\n\r\n<< logger >> \r\n로그의 주체이다. 애플리케이션을 작성할 때 로깅을 시작하기 전에 어떤 로거를 사용할지를 결정하다. \r\n\r\n* 소스\r\nstatic Logger logger = Logger.getLogger(SimpleLog.class); \r\n\r\n* 설정 파일\r\n<logger name="seo.dale"...\r\n이면 seo.dale 로 시작하는 모든 logger 가 해당 설정을 쓴다.\r\n\r\n<< root >>\r\n해당하는 logger 나 상위 logger 가 존재하지 않을 경우\r\nroot logger 의 정책에 따라 로깅됨', '', '', 27, 0),
(1149, '', '서대영', '', '2012-08-16 23:12:21', 'Log4j', 'Log4jdbc 세팅 방법', '1) dependency를 추가\r\n2) logger 추가\r\n3) DataSource를 Log4jdbcProxyDataSource로 감싸기\r\n\r\n\r\n# 사용가능한 Logger\r\n * jdbc.sqlonly\r\n * jdbc.sqltiming : 보통 많이씀\r\n * jdbc.audit : 너무 방대해서 비권장\r\n * jdbc.resultset : 방대함\r\n\r\n\r\n# Maven\r\n		<dependency>\r\n		    <groupId>org.lazyluke</groupId>\r\n		    <artifactId>log4jdbc-remix</artifactId>\r\n		    <version>0.2.7</version>\r\n		</dependency>\r\n\r\n# Logj4.xml\r\n================================================================\r\n    <appender name="jdbcConsole" class="org.apache.log4j.ConsoleAppender">\r\n        <param name="Target" value="System.out" />\r\n        <layout class="org.apache.log4j.PatternLayout">\r\n            <param name="ConversionPattern" value="%m%n" />\r\n	    </layout>\r\n	</appender>	\r\n	<!-- JDBC -->\r\n		<!-- JDBC -->\r\n	<logger name="jdbc.sqlonly">\r\n		<level value="info" />\r\n	</logger>\r\n	<logger name="jdbc.resultsettable">\r\n		<level value="info" />\r\n	</logger>\r\n	<logger name="jdbc.audit">\r\n		<level value="warn" />\r\n	</logger>\r\n	<logger name="jdbc.resultset">\r\n		<level value="warn" />\r\n	</logger>\r\n	<logger name="jdbc.sqltiming">\r\n		<level value="warn" />\r\n	</logger>', NULL, '', 37, 0),
(1875, 'dale.seo', '', '', '2016-04-25 15:53:37', '', '@Qualifier를 이용하여 스프링 자바 설정 ', '동일한 타입의 빈을 여러 개 등록 후 다른 빈 등록 메소드의 인자로 넘기고 싶을 때는,\r\n빈 등록 메소드 파라미터에 @Qualifier를 선언해주면 된다.\r\n\r\n============================================================================================\r\n/**\r\n * SAC DB 접근을 위한 DataSource 스프링 설정\r\n * @author 서대영/Store기술개발팀/SKP\r\n */\r\n@Configuration\r\npublic class DataSourceConfigSac {\r\n\r\n	@Value("${sac.jdbc.driver}")\r\n	private String sacJdbcDriver;\r\n\r\n	@Value("${sac.jdbc.url}")\r\n	private String sacJdbcUrl;\r\n\r\n	@Value("${sac.jdbc.username}")\r\n	private String sacJdbcUsername;\r\n\r\n	@Value("${sac.jdbc.password}")\r\n	private String sacJdbcPassword;\r\n\r\n	@Value("${sac.jdbc.jndi.lookup}")\r\n	private String sacJdbcJndiLookup;\r\n\r\n	@Bean\r\n	public Log4jdbcProxyDataSource sacDataSource(@Qualifier("rawDataSource") DataSource dataSource) {\r\n		Log4JdbcCustomFormatter log4JdbcCustomFormatter = new Log4JdbcCustomFormatter();\r\n		log4JdbcCustomFormatter.setLoggingType(LoggingType.MULTI_LINE);\r\n\r\n		Log4jdbcProxyDataSource log4jdbcProxyDataSource = new Log4jdbcProxyDataSource(dataSource);\r\n		log4jdbcProxyDataSource.setLogFormatter(log4JdbcCustomFormatter);\r\n\r\n		return log4jdbcProxyDataSource;\r\n	}\r\n\r\n	@Bean\r\n	@Qualifier("rawDataSource")\r\n	@Profile({"dev", "qa", "prod"})\r\n	public JndiObjectFactoryBean sacJndiDataSource() {\r\n		JndiObjectFactoryBean jndiObjectFactoryBean = new JndiObjectFactoryBean();\r\n		jndiObjectFactoryBean.setJndiName(sacJdbcJndiLookup);\r\n		jndiObjectFactoryBean.setResourceRef(true);\r\n		jndiObjectFactoryBean.setProxyInterface(DataSource.class);\r\n		return jndiObjectFactoryBean;\r\n	}\r\n\r\n	@Bean(destroyMethod = "close")\r\n	@Qualifier("rawDataSource")\r\n	@Profile("local")\r\n	public BasicDataSource sacBasicDataSource() {\r\n		BasicDataSource basicDataSource = new BasicDataSource();\r\n		basicDataSource.setDriverClassName(sacJdbcDriver);\r\n		basicDataSource.setUrl(sacJdbcUrl);\r\n		basicDataSource.setUsername(sacJdbcUsername);\r\n		basicDataSource.setPassword(sacJdbcPassword);\r\n		basicDataSource.setValidationQuery("select 1 from dual");\r\n		basicDataSource.setConnectionProperties("autoReconnect=true;");\r\n		basicDataSource.setPoolPreparedStatements(true);\r\n		basicDataSource.setInitialSize(1); // 풀의 초기에 생성되는 커넥션의 개수\r\n		basicDataSource.setMaxActive(10); // 커넥션 풀이 제공할 최대 커넥션의 개수\r\n		basicDataSource.setMaxIdle(10); // 최대 커넥션의 개수\r\n		basicDataSource.setMinIdle(1); // 최소 커넥션의 개수\r\n		basicDataSource.setMaxWait(10000); // 커넥션이 존재하지 않을 때, 커넥션을 얻기까지 대기하는 최대 대기시간\r\n		basicDataSource.setRemoveAbandoned(true); // 유효하지 않는 커넥션의 제거 여부\r\n		basicDataSource.setRemoveAbandonedTimeout(60); // 유효하지 않는 커넥션의 삭제시의 타임아웃\r\n		return basicDataSource;\r\n	}\r\n\r\n	@Bean\r\n	@Profile("local_no_db")\r\n	public EmbeddedDatabase embeddedDatabase() {\r\n		return new EmbeddedDatabaseBuilder()\r\n				.setType(EmbeddedDatabaseType.HSQL)\r\n				.addScript("classpath:/hsql/schema.sql")\r\n				.addScript("classpath:/hsql/data.sql")\r\n				.build();\r\n	}\r\n\r\n}\r\n', NULL, '', 4, 0),
(753, '', '서대영', '', '2010-02-14 13:05:52', 'Log4j', 'Log4j 초간단 사용법', 'log4j-1.2.15.jar를 복사해서 eclipse/workspace/<프로젝트명>/WEB-INF/lib에 붙여넣기\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://mudchobo.tomeii.com/tt/251', 'http://mudchobo.tomeii.com/tt/251', '', 34, 0),
(754, '', '서대영', '', '2010-02-14 13:36:53', 'Log4j', 'log4j.properties 파일 위치', '클래스패스 폴더의 루트\r\n\r\nWEB-INF/build/\r\n\r\n이클립스\r\n\r\nsrc/', '', '', 22, 0),
(755, '', '서대영', '', '2010-02-14 14:54:34', 'ANT', 'ANT FTP Task', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://juglae.tistory.com/53', 'http://juglae.tistory.com/53', '', 1, 0),
(756, '', '서대영', '', '2010-02-14 19:29:40', 'Cafe24', 'Tomcat Datasource 설정법', '안녕하세요. \r\n카페24호스팅입니다. \r\n\r\n아래 소스를 참고해 보시면 될 듯 합니다.\r\n\r\n[server.xml]\r\n<Context path="" docBase="ROOT" debug="0">\r\n<Resource name="jdbc/mytc5"\r\nauth="Container"\r\ntype="javax.sql.DataSource"\r\ndriverClassName="com.mysql.jdbc.Driver"\r\nurl="jdbc:mysql://localhost/dbname"\r\nusername="dbuser"\r\npassword="dbpasswd"\r\nmaxActive="20"\r\nmaxIdle="30000"\r\nmaxWait="100"/>\r\n</Context>\r\n\r\n[web.xml]\r\n<resource-ref>\r\n<res-ref-name>ref-name</res-ref-name>\r\n<res-type>javax.sql.DataSource</res-type>\r\n<res-auth>Container</res-auth>\r\n</resource-ref>\r\n\r\n[jdbctest.jsp]\r\n<html>\r\n<head>\r\n<%@ page errorPage="errorpg.jsp"; \r\nimport="java.sql.*, \r\njavax.sql.*, \r\njava.io.*,\r\njavax.naming.InitialContext,\r\njavax.naming.Context" %>\r\n</head>\r\n<body>\r\n<h1>JDBC JNDI Resource Test</h1>\r\n\r\n<%\r\nInitialContext initCtx = new InitialContext();\r\nDataSource ds = (DataSource) initCtx.lookup("java:comp/env/ref-name");\r\nConnection conn = ds.getConnection();\r\nStatement stmt = conn.createStatement();\r\nResultSet rset = stmt.executeQuery("query");\r\nwhile (rset.next()) { \r\n결과물 처리 \r\n}\r\nrset.close();\r\nstmt.close();\r\nconn.close();\r\ninitCtx.close();\r\n%>\r\n</body>\r\n</html>\r\n\r\n감사합니다.\r\n\r\n----------------------- 원본 메세지 --------------------------\r\n\r\n제가 자바호스팅을 받았는데요\r\njdbc 설정을 어떻게 해야하는지 모르겠네요\r\n설정하는 방법좀 알려주세요\r\n너무 뭉뚱그려서 문의하는건지 모르겠지만\r\ndb pool 관련 자바소스\r\n특히 mysql과 카페24에서 맞춰야 하는 세팅에 관한게 \r\n있으시면 좀 부탁드립니다.', '', '', 7, 0),
(757, '', '서대영', '', '2010-02-14 19:32:00', 'Cafe24', 'MySQL JDBC 설정', '소스중 DBNAME, DBUSER, DBPASSWORD부분만 변경하고 실행을 한후 에러가 발생안하고 JDBC Test라는 문제가 출력되면 성공 \r\n\r\n<html> \r\n<head> \r\n\r\n<%@ page errorPage="errorpg.jsp" \r\nimport="java.sql.*, \r\njavax.sql.*, \r\njava.io.*" %> \r\n\r\n</head> \r\n<body> \r\n<h1>JDBC Test</h1> \r\n<% \r\nClass.forName("com.mysql.jdbc.Driver"); \r\nConnection conn = DriverManager.getConnection("jdbc:mysql://localhost/DBNAME", "DBUSER" , "DBPASSWORD"); \r\nStatement stmt = conn.createStatement(); \r\nResultSet rset = stmt.executeQuery("select version()"); \r\n\r\nwhile (rset.next()) { \r\n} \r\nrset.close(); \r\nstmt.close(); \r\nconn.close(); \r\n%> \r\n\r\n</body> \r\n</html> ', '', '', 2, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(758, '', '서대영', '', '2010-02-14 22:07:51', 'Tomcat', 'DataSource 등록 (MySQL) ★', '테스트는 DAO에서 바로 할 수 없고, 서블릿에서 해야 한다.\r\n\r\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\r\n\r\n■ server.xml\r\n\r\n	<Resource \r\n		auth="Container"\r\n		name="jdbc/MySQL"\r\n		type="javax.sql.DataSource"\r\n		driverClassName="com.mysql.jdbc.Driver"\r\n		url="jdbc:mysql://localhost/gomgil"\r\n		username="root"\r\n		password=""\r\n		maxActive="20"\r\n		maxIdle="10"\r\n		maxWait="-1"\r\n	/>\r\n\r\n──────────────────────────────────\r\n\r\n■ context.xml\r\n\r\n<ResourceLink global="jdbc/MySQL" name="jdbc/MySQL" type="javax.sql.DataSource" />\r\n\r\n──────────────────────────────────\r\n\r\n■ JDBC 라이브러리\r\n\r\ncommon/lib/mysql-connector-java-5.1.6-bin.jar\r\n\r\n\r\n\r\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\r\n\r\n■ DAO.java\r\n\r\n	public Connection getConnection() throws Exception{\r\n\r\n		Connection conn = null;\r\n		\r\n		try {\r\n\r\n			Context initCxt = new InitialContext();\r\n			Context envCxt = (Context) initCxt.lookup("java:/comp/env");\r\n			DataSource ds = (DataSource) envCxt.lookup("jdbc/MySQL");\r\n\r\n			conn = ds.getConnection();\r\n\r\n		} catch (Exception e) {\r\n			\r\n			e.printStackTrace();\r\n			throw new RuntimeException("Unable to get a connection.");\r\n			\r\n		}\r\n\r\n		return conn;\r\n\r\n	}\r\n\r\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\r\n\r\n■ 서블릿\r\n\r\npublic class ViewAction extends Action {\r\n	\r\n	public String execute(HttpServletRequest request, HttpServletResponse response) {\r\n	\r\n		String page = "/bbs/jsp/view.jsp";\r\n	\r\n		DAO dao = new DAO();\r\n\r\n		Connection conn = null;\r\n		PreparedStatement stmt = null;\r\n		ResultSet rs = null;\r\n		\r\n		String sql = \r\n			" SELECT 12345 " +\r\n			" FROM dual ";\r\n		\r\n		try {\r\n			\r\n			conn = dao.getConnection();\r\n			stmt = conn.prepareStatement(sql);\r\n			rs = stmt.executeQuery();\r\n			\r\n			if (rs.next())\r\n				\r\n				System.out.println(rs.getObject(1));\r\n\r\n			\r\n		} catch (Exception e) {\r\n			\r\n			e.printStackTrace();\r\n			\r\n		} finally {\r\n			\r\n			dao.close(rs, stmt, conn);\r\n			\r\n		}\r\n		\r\n		return page;\r\n		\r\n	}\r\n\r\n}', '', '', 15, 0),
(759, '', '서대영', '', '2010-02-15 10:38:23', 'Eclipse', '기본 캐릭터셋 바꾸기', 'Preferences > General > ContentType\r\n : Txt 에 놓고 Default Encoding 을 UTF-8 로 변경 후 Update 버튼을 클릭 \r\nPreferences > General > Workspace\r\n\r\nText file encoding > Other > UTF-8', '', '', 4, 0),
(760, '', '서대영', '', '2010-02-18 08:53:14', 'APM', 'GC', 'GC 정책은 현재 설치된 IBM JDK에서 수행됩니다. 프로그램 자체에서 시스템 GC를 호출할 수 있지만 그것은 Full GC이며 인스턴스에 큰 문제를 일으킬 수 있습니다. 프로그램상에서 인위적인 GC를 수행하지 않습니다.\r\n\r\n프로그램상에서 GC의 영향을 미칠 수 있는 부분은 여러가지입니다.\r\n\r\n1. 파일 객체를 연결하고 close 를 하지 않는 경우 - JDK가 GC를 수행해도 회수되지 않고 메모리를 차지하게 됩니다.\r\n\r\n2. 업로드/다운로드 시 객체 스트림을 연결하고 close 를 하지 않는 경우 - 이 또한 JDK가 GC를 수행해도 회수되지 않고 메모리를 차지하게 됩니다.\r\n\r\n3. 원격 호출시 연결한 후 close 를 하지 않는 경우 - 이 또한 JDK가 GC를 수행해도 회수되지 않고 메모리를 차지하게 됩니다.\r\n\r\n4. 배열객체(Map/List 등)에 생성한 후 객체 참조를 끊지 않는 경우(배열객체 내부 Clear후 NULL 참조로 만드는 경우) - JDK가 GC를 수행하는 경우 회수가 될 수도 안 될수도 있습니다. 언제 회수될 지 모른다는 얘기입니다.\r\n\r\n \r\n\r\n대표적인 것들이 위 사항이며 이런 프로그램이 많은 경우 GC가 수행되어도 메모리가 회수되지 않고 메모리 점유가 올라가게 되면 인스턴스의 메모리 한계에 이르게 되면 결국에는 CoreDump를 일으키고 다운되는겁니다.\r\n\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://wmp.kr/70', 'http://wmp.kr/70', '', 2, 0),
(763, '', '서대영', '', '2010-02-20 02:23:31', 'Network', 'NAT [Network Address Translation]', '사설 IP주소를 공인 IP주소로 바꿔주는데 사용하는 통신망의 주소 변환기이다.\r\nNAT를 사용하는 목적에는 2가지가 있는데, 첫째는 인터넷의 공인 IP주소를 절약할 수 있다는 점이고 둘째는 인터넷이란 공공망과 연결되는 사용자들의 고유한 사설망을 침입자들로부터 보호할 수 있다는 점이다.\r\n\r\n인터넷의 공인 IP주소는 한정되어 있기 때문에 가급적 이를 공유할 수 있도록 하는 것이 필요한데 NAT를 이용하면 사설 IP주소를 사용하면서 이를 공인 IP주소와 상호변환할 수 있도록 하여 공인 IP주소를 다수가 함께 사용할 수 있도록 함으로써 이를 절약할 수 있는 것이다.\r\n\r\n공개된 인터넷과 사설망 사이에 방화벽(Firewall)을 설치하여 외부 공격으로부터 사용자의 통신망을 보호하는 기본적인 수단으로 활용할 수 있다. 이때 외부 통신망 즉 인터넷망과 연결하는 장비인 라우터에 NAT를 설정할 경우 라우터는 자신에게 할당된 공인 IP주소만 외부로 알려지게 하고, 내부에서는 사설 IP주소만 사용하도록 하여 필요시에 이를 서로 변환시켜 준다. 따라서 외부 침입자가 공격하기 위해서는 사설망의 내부 사설 IP주소를 알아야 하기 때문에 공격이 불가능해지므로 내부 네트워크를 보호할 수 있다.\r\n[네이버 지식백과] NAT [Network Address Translation] (두산백과)\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://100.naver.com/100.nhn?docid=717874', 'http://100.naver.com/100.nhn?docid=717874', '', 8, 0),
(764, '', '서대영', '', '2010-02-20 02:34:44', 'Unix', 'NFS (Network File System)', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/cafca23?Redirect=Log&logNo=90080943872', 'http://blog.naver.com/cafca23?Redirect=Log&logNo=90080943872', '', 0, 0),
(765, '', '서대영', '', '2010-02-20 04:43:04', 'Unix', '디스크 여유/사용 공간 체크', '## df -- display free disk space\r\n\r\n전체 디스크 사용/여유 공간을 사람이 읽기 쉽게 GB로 표시\r\n```\r\ndf -h\r\n```\r\n\r\n## du -- display disk usage statistics\r\n\r\n현재 디렉토리 내부 1레벨에 있는 모든 디렉토리와 파일의 다스크 사용량을 오름차순으로 정렬\r\n```\r\ndu -sh * |sort -n\r\n```\r\n\r\n오직 기가나 테라 바이트 단위로 용량을 자치하는 파일이나 디렉토리만 보여줌\r\n```\r\ndu -sh * |egrep ''^[0-9.]+[GT]''\r\n```\r\n\r\n## bdf\r\n물리적 디스크 별 디렉토리 사용량\r\n\r\nbdf .\r\n현재 디렌토리만...', NULL, '', 33, 0),
(766, '', '서대영', '', '2010-02-20 04:45:09', 'Unix', 'set line 라인 칼럼수 설정', 'set line 30 \r\n한 라인에 30문자 보이게 설정', '', '', 3, 0),
(767, '', '서대영', '', '2010-02-20 07:51:09', 'Network', 'Virtual IP, Service IP, External IP, Internal IP', '< L4 >\r\nVirtual IP : DNS에 도메인 네임과 맵핑되어 있는 공인 IP\r\nReal IP : 연결된 서버의 공인 IP, 서버의 내부 IP로 NAT 된다.\r\n\r\n< DB HA >\r\nVirtual IP : 실제 클라이언트가 접속할 때 사용하는 IP\r\nReal IP : 연결된 Active, Stand-by 서버의 실제 IP\r\n\r\n일반적으로 Virtual IP는 여러 Real IP로 로드 밸런싱 및 Fail Over 를 위해서 사용하는 개념이라서,\r\nVIP 대 RIP 는 보통 1 대 다 이다.\r\n\r\n하지만 External IP 와 Internal IP 는 보통 DMZ 에 위치한 장비의 LAN 카드에 두 개의 IP 를 세팅해놓은 경우에 쓴다. 즉 일 대 일 관계이다.', '', '', 13, 0),
(768, '', '서대영', '', '2010-02-23 00:15:18', 'Unix', '/dev/null', '출력 내용을 버리고 싶을 ㅤㄸㅒㅤ 사용\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://shakii.tistory.com/94', 'http://shakii.tistory.com/94', '', 1, 0),
(769, '', '서대영', '', '2010-02-24 22:29:43', 'Tuning', 'JVM GC 튜닝', '5) -server와 ?client 옵션\r\nJVM에는 일반적으로 server와 client 두가지 옵션을 제공한다.\r\n결론만 말하면 server 옵션은 WAS와 같은 Server환경에 최적화된 옵션이고, client옵션은 워드프로세서와 같은 client application에 최적화된 옵션이다. 그냥 언뜻 보기에는 단순한 옵션 하나로보일 수 있지만, 내부에서 돌아가는 hotspot compiler에 대한 최적화 방법과 메모리 구조자체가 아예 틀리다.\r\n\r\n○ -server 옵션\r\n\r\nserver용 application에 최적화된 옵션이다. Server application은 boot up 시간 보다는 user에 대한 response time이 중요하고, 많은 사용자가 동시에 사용하기 때문에 session등의 user data를 다루는게 일반적이다. 그래서 server 옵션으로 제공되는 hotspot compiler는 java application을 최적화 해서 빠른 response time을 내는데 집중되어 있다.\r\n\r\n또한 메모리 모델 역시, 서버의 경우에는 특정 사용자가 서버 운영시간동안 계속 서버를 사용하는게 아니기 때문에 (Login하고, 사용한 후에는 Logout되기 때문에..) 사용자에 관련된 객체들이 오래 지속되는 경우가 드물다. 그래서 상대적으로 Old영역이 작고 New 영역이 크게 배정된다. <그림 7. 참조 >\r\n\r\n○ -client 옵션\r\n\r\nclient application은 워드프로세서 처럼 혼자 사용하는 application이다. 그래서 client application은 response time보다는 빨리 기동되는데에 최적화가 되어 있다. 또한대부분의 client application을 구성하는 object는GUI Component와 같이 application이 종료될때까지 남아있는 object의 비중이 높기 때문에 상대적으로 Old 영역의 비율이 높다.\r\n\r\n\r\n\r\n<그림 7. ?server와 ?client 옵션에 따른 JVM Old와 New영역>\r\n\r\n\r\n이 두옵션은 가장 간단한 옵션이지만, JVM의 최적화에 아주 큰부분을 차지하고 있는 옵션이기 때문에, 반드시 Application의 성격에 맞춰서 적용하기 바란다.\r\n(※ 참고로, SUN JVM은 default가 client, HPJVM는 default가 server로 세팅되어 있다.)\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://javarush.com/entry/%ED%8E%8C-GC-%EA%B4%80%EB%A0%A8-Parameter-JVM-GC-%ED%8A%9C%EB%8B%9D', 'http://javarush.com/entry/%ED%8E%8C-GC-%EA%B4%80%EB%A0%A8-Parameter-JVM-GC-%ED%8A%9C%EB%8B%9D', '', 3, 0),
(770, '', '서대영', '', '2010-02-27 19:20:17', 'MySQL', 'MySQL Server5.0 한글 깨짐 현상', 'MySQL Server Instance Configuration Wizard\r\n\r\nManual Selected Default Character Set / Collation : UTF8\r\n\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://cafe.naver.com/tonkjsp.cafe?iframe_url=/ArticleRead.nhn%3Farticleid=366', 'http://cafe.naver.com/tonkjsp.cafe?iframe_url=/ArticleRead.nhn%3Farticleid=366', '', 5, 0),
(772, '', '서대영', '', '2010-03-04 15:54:34', 'Weblogic', 'Weblogic 서버 Thread 및 DB Connection Pool 설정', '참고로 Weblogic 8.X 이상에서 Thread 설정은 다음과 같이 한다.\r\n\r\nWeblogic 콘솔에 로그인(보통 http://url/console 로 접근하면됨.)\r\n-> domain 명에서 servers 를 확장후 해당 서버이름을 선택\r\n-> Configuration 의 General tab 선택 -> 화면의 하단에 있는 Advanced의 show를 선택\r\n-> 가장 하단의 Configure Execute Queues 를 선택\r\n하면 Thread 관련 설정 화면으로 이동된다.\r\n\r\n혹시 모르실 수도 있으니, DB Connection 관련 설정은 다음과 같이 한다.\r\n\r\nWeblogic 콘솔에 로그인\r\n-> Services 의 JDBC의 Connection Pools 에서 설정. (관련 설정이 없으면 새로 맹근다. ㅋㅋ)', '', '', 5, 0),
(1084, '', '서대영', '', '2012-03-19 11:36:29', 'iPlanet', 'Session ID 맞추기 (iPlanet, Weblogic)', '디폴트 Session ID (JSESSIONID) 를 사용하면 다른 사이트와 세션 충돌이 발생할 수 있다.\r\n\r\nWebserver의 obj.conf 파일의 WLCookieName 값과 WAS의 weblogic.xml의 cookie-name이 동일해야 합니다.\r\n\r\n예) CHOPGSPNSESSIONID 로 Session ID 를 맞춰줌\r\n\r\n[ iPlanet ]\r\nService method="(GET|HEAD|POST|PUT)" type="text/jsp" fn="wl_proxy" WebLogicCluster="109.10\r\n.1.55:6002,109.10.1.55:6003,109.10.1.55:6004,109.10.1.55:6005,109.10.1.56:6002,109.10.1.56\r\n:6003,109.10.1.56:6004,109.10.1.56:6005" ConnectTimeoutSecs="20" ConnectRetrySecs="2" Dyna\r\nmicServerList="ON" Idempotent="OFF" KeepAliveEnabled="true" WLIOTimeoutSecs="3600" WLCooki\r\neName="CHOPGSPNSESSIONID"\r\n\r\n[ Weblogic ]\r\n <session-descriptor>\r\n  <timeout-secs>3600</timeout-secs>\r\n  <cookie-name>CHOPGSPNSESSIONID</cookie-name>\r\n  <persistent-store-type>replicated_if_clustered</persistent-store-type>\r\n </session-descriptor>\r\n\r\n', '', '', 3, 0),
(1085, '', '서대영', '', '2012-03-28 13:52:19', 'Weblogic', 'Weblogic 튜닝 파라미터', '1) Production Mode = TRUE\r\n. setDomainEnv.sh 와 config.xml에서 확인\r\n. 운영 모드일 경우 True 설정  (PRODUCTION_MODE=“true”)\r\n\r\n2) Enable NativeIO = TRUE\r\n. Server(WLS Intance)에서 Native IO를 사용하는지 여부\r\n. 반드시 사용하도록 설정\r\n. <native-io-enabled>true</native-io-enabled>\r\n\r\n3) Accept Backlog\r\n. 해당 서버의 일반 및 SSL 포트에서 허용하는 new TCP Connection 연결\r\n   요청에 대한 Backlog 개수\r\n. 수치가 작은 경우 최대값에 도달하여 Connection refused 발생\r\n. WAS Console > 서버 > 백로그 허용 칼럼\r\n\r\n4) Self-tuning Thread min/max\r\n. WLS 인스턴스 별 동시 처리할 수 있는 개수\r\n. 업무 부하량에 따라 사용량 상이\r\n. 최소한 “Self-tuning Thread min” 값은 설정하도록 권고 \r\n. config.xml\r\n    <self-tuning-thread-pool-size-min>70</self-tuning-thread-pool-size-min>\r\n    <self-tuning-thread-pool-size-max>100</self-tuning-thread-pool-size-max>', '', '', 1, 0),
(773, '', '서대영', '', '2010-03-04 23:26:28', 'Library', '자바 페이징 클래스', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://theeye.pe.kr/82', 'http://theeye.pe.kr/82', '', 6, 0),
(774, '', '서대영', '', '2010-03-08 15:44:17', 'Swing', '타이틀이 있는 테두리 입히기', 'jComponent.setBorder(BorderFactory.createTitledBorder("Destination Information"));', '', '', 3, 0),
(775, '', '서대영', '', '2010-03-08 15:56:28', 'Swing', 'Layout', 'BorderLayout : 동서남북, 중간 배치, JFrame 디폴트\r\n\r\nFlowLayout : 수평나열, 왼쪽 정렬, JPanle 디폴트\r\n\r\nBoxLayout : 수직나열, 강제 줄바꿈\r\n		setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));\r\n\r\nGridLayout : 같은 간격으로 컴포넌트를 배치할 때\r\n\r\nnew GridLayout(행수, 열수) : \r\nnew GridLayout(0, 1) : 새로로 일렬로 ', '', '', 4, 0),
(777, '', '서대영', '', '2010-03-10 13:25:34', 'Weblogic', '장기수행 로직 킬설정', '우선 PLC를 적용하실지 Thread Kill 기능을 활용하실지에 대해 잘 판단하시기 바랍니다.\r\n아래에 대략적인 설명을 넣겠습니다만.. 몇가지 주의사항이 있거든요, 주의사항은 메일 하단에 첨부하도록 하겠습니다.\r\n\r\n말씀하신 장기적으로 비정상적인 Thread에 대해 자동으로 제니퍼를 통해 Thread를 제어할 수 있습니다.\r\n물론 웹로직도 가능하지만, 제가 알기론 최신버전에서 가능한 것으로 알고 있습니다.\r\n이를 간편하게 제니퍼에서 하는 방법은 다음과 같습니다.\r\n\r\n제니퍼 에이전트 설정파일(터미널 혹은 제니퍼 콘솔 > 구성관리 > 해당에이전트 선택 후 우측의 설정화면에\r\n옵션을 추가하세요.(WAS를 재가동 할 필요가 없습니다.)\r\n\r\nenable_active_thread_kill = true\r\nenable_long_running_thread_auto_kill = true\r\nlong_running_thread_auto_kill_timeout = 300000\r\n* 얼마동안 지속적으로 서비스가 큐잉이 발생됐을때 중지시킬지 시간을 정하는 부분입니다.\r\n* 단위는 밀리 세컨드(ms)입니다.\r\n\r\n대충 옵션의 의미는 아시겠죠?^^\r\n\r\n다음으로 PLC(Peak Load Control)입니다.\r\nPLC의 의미/사용용도는 운영중인 시스템의 서비스 가용수준을 알고 있다는 전제하에 어느정도의 서비스가\r\n들어오면 잘 처리되다가 일정수준 이상의 서비스가 들어올경우 기존에 잘 돌아가던 서비스와 이후의 서비스가\r\n비정상적으로 돌아갈때 일정 서비스 수준을 유지하고자 할때 많이들 사용합니다.\r\n말을 어렵게 쓴것 같은데요.. 쉽게말해 보험사나 월마감때 일이 많이 몰리는 고객들이 많이 고민하는 문제입니다.\r\n평상시에서 서비스가 별로 없다가 월마감때 폭주하여 시스템이 장애가 발생하는 유형들이죠\r\n\r\n이럴때 예를들어 100개의 임계치를 설정해 놓으면 100개 이상의 서비스가 들어오면 그 이상의 요청들은 reject 하는\r\n기능입니다.\r\nreject의 유형은 일반그룹, 성능저하그룹, 업무중요그룹으로 분류할 수 있는데 각각의 역할에 대해선 전화를 주시기\r\n바랍니다. 글로써 설명하기엔 좀 복잡합니다.^^\r\n\r\n옵션 적용방법은 위와 같으며, 관련 옵션은 아래와 같습니다.\r\n\r\nset_limit_active_service = true\r\nmax_num_of_active_service = 100\r\n* 임계치 설정\r\n\r\nrequest_reject_type = [message|redirect]\r\n* reject 유형입니다. 메시지를 보여줄지 다른 페이지로 이동할지 정하는\r\n\r\nrequest_reject_message = Workload so high. Please, try again later!\r\n* 유형을 messages 로 했을때 어떤 메시지를 보여줄지 기입합니다.\r\n\r\nrequest_reject_redirect_url = /error.htm\r\n* 유형을 redirect 로 했을때 보여줄 페이지입니다.\r\n\r\n역시 WAS를 재가동 할 필요가 없습니다.\r\n\r\n다음은 쓰레드 중지기능에 관한 주의사항입니다.\r\n(참고하시고 잘 반영하시기 바랍니다.)\r\n\r\n아시는 것과 같이 공식적으로 Thread를 중지하는 메소드를 사용하지 말것을 Sun은 말하고 있습니다.\r\n\r\n아래 사이트를 참고 하시면 해당내용에 대해 좀더 자세한 내용을 보실 수 있습니다.\r\n\r\nhttp://pllab.kw.ac.kr/j2seAPI/guide/misc/threadPrimitiveDeprecation.html\r\n\r\n해당 메소드가 추천되지 않음에도 불구하고 제니퍼에 해당 기능을 넣은 것은 다양한 운영상황중 불가피하게 \r\n\r\n스레드를 중지해야만 하는 경우가 발생할 수 있고 이 부분에 도움을 드리고자 해서 추가된 기능입니다.\r\n\r\n그러나 저희 역시도 해당 기능사용을 가급적 말것을 권고해 드리고 있습니다.\r\n\r\n그 이유는 각 웹애플리케이션 서버가 관리하고 있는 스레드들에 대해(스레드풀) 외부에서 갑자기 \r\n\r\n스레드를 죽였을때 WAS가 어떻게 스레드풀을 관리하는지 정확히 알 수 없기때문 입니다.\r\n\r\n일부 WAS에서는 다운이 발생하는 사례가 있었습니다. \r\n\r\n그래서 해당 기능을 사용하지 못하도록 옵션 및 권한기능을 추가시켜 해당기능사용을 제한할 수 있도록 한 것입니다.\r\n\r\n스레드킬 기능은 웹애플리케이션서버의 종류와 버전, 애플리케이션 스레드 수행방식에 따라 정상적으로 작동하지 않을 수 있수 있습니다. (스레드가 Socket.read()상태일 경우는 100% 작동되지 않습니다.)\r\n\r\n실제 사용에 있어 가장 안전한 방법은 개발서버에서 제니퍼해당기능을 사용해 특별한 문제가 발생하지 않고 정상적으로\r\n \r\n작동할때 운영에 적용해서 사용하는 것입니다. 만약 그렇지 않다면 해당 기능을 사용할 수 없도록 옵션을 변경하고,\r\n \r\n고객에서 해당WAS에서는 이 기능이 정상적으로 작동되지 않는 것에 대해 알려드리는 것이 필요하다고 생각합니다.\r\n\r\n\r\n궁금하신 부분이 있으시면 연락주시기 바랍니다.\r\n\r\n수고하세요.\r\n\r\n강석인드림.', '', '', 3, 0),
(778, '', '서대영', '', '2010-03-10 13:56:43', 'Java', 'System.getProperty(String key) - JVM 옵션값 가져오기', '운영체제 별로 틀린 값들을 가져올 때 편리하다. (ex. file.separator, path.separator)\r\n\r\n\r\nJVM에서 사용하지 않는 옵션은 사용자가 지정해서 따로 사용할 수 있다.\r\n\r\n아래처럼....\r\n\r\n// Get the JVM option called (-Dregion.Name=XX)\r\n				Constants.REGION_NAME_PROP = System.getProperty("region.Name");\r\n\r\npublic static final String LINE_SEPARATOR = System.getProperty("line.separator");\r\n\r\n------------------------------------------------------------------------\r\n\r\nDeveloper/Java 2009/12/29 21:43\r\n\r\n클래스 : java.lang.System\r\npublic static String getProperty(String  key)\r\n지정된 키에 의해 나타나는 시스템 프로퍼티를 얻는다.\r\n\r\n파라미터:\r\nkey - 시스템 프로퍼티의 이름\r\n반환값:\r\n시스템 프로퍼티. 그 키에 프로퍼티가 없는 경우는 null.\r\n\r\njava.version                         Java Runtime Environment 버전 \r\njava.vendor                          Java Runtime Environment 벤더\r\njava.vendor.url                      Java 벤더의 URL\r\njava.home                            Java 인스톨처 디렉토리\r\njava.vm.specification.version  Java 가상 머신의 사양 버전 \r\njava.vm.specification.vendor   Java 가상 머신의 사양 벤더\r\njava.vm.specification.name    Java 가상 머신의 사양명\r\njava.vm.version                    Java 가상 머신의 구현 버전 \r\njava.vm.vendor                    Java 가상 머신의 구현 벤더\r\njava.vm.name                     Java 가상 머신의 구현명\r\njava.specification.version     Java Runtime Environment 사양 버전 \r\njava.specification.vendor      Java Runtime Environment 사양의 벤더\r\njava.specification.name        Java Runtime Environment 사양명\r\njava.class.version               Java 클래스의 형식의 버전 번호\r\njava.class.path                   Java 클래스 패스\r\njava.library.path                  라이브러리의 로드시에 검색하는 패스의 리스트\r\njava.io.tmpdir                     디폴트 임시 파일의 패스\r\njava.compiler                     사용하는 JIT 컴파일러의 이름\r\njava.ext.dirs                      확장 디렉토리의 패스\r\nos.name                           OS 명\r\nos.arch                            OS 의 아키텍쳐\r\nos.version                        OS 의 버전 \r\nfile.separator                    파일 단락 문자 (UNIX 에서는 「/」)\r\npath.separator                  패스 단락 문자 (UNIX 에서는 「:」)\r\nline.separator                   행 단락 문자 (UNIX 에서는 「n」)\r\nuser.name                       사용자 의 어카운트명\r\nuser.home                       사용자 의 홈 디렉토리\r\nuser.dir                           사용자 의 현재의 작업 디렉토리 \r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/sungback?Redirect=Log&logNo=90079586150', NULL, '', 15, 0),
(779, '', '서대영', '', '2010-03-18 10:37:21', 'Security', 'authentication(인증)과 authorization(인가)의 차이', 'authentication(인증) : 로그인 아웃 (verify identity)\r\nauthorization(인가) : 메뉴 사용 권한 (authenticated user의 resource access)\r\n\r\n일반적으로 Authentication 후에 Authorization 이 일어난다.\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/iq_up?Redirect=Log&logNo=100057746027', 'http://blog.naver.com/iq_up?Redirect=Log&logNo=100057746027', '', 4, 0),
(830, '', '서대영', '', '2010-06-08 20:08:48', 'Webservice', '웹서비스 서버 구축 (Axis 1)', '1) eclipse-jee-galileo-SR2-win32 설치\r\n : Axis 기본으로 내장\r\n\r\n2) Dynamic Project 생성 후, 클래스(서비스) 파일 작성\r\n\r\n3) 클래스 파일 위에 마우스 우측 버튼\r\n  : Webservices > Create Web Service\r\n\r\n4) 위의 그래프 최대, 아래 그래프 최소 세팅 후 계속 다음\r\n\r\n5) Web Services Explorer의 operations (매서드) 를 클릭해서 실행 해 본다.\r\n\r\n6) Webcontent/wsdl/클래스명.wsdl 이 잘 생성됐는지 확인 (아래부터 볼것)', '', '', 3, 0),
(780, '', '서대영', '', '2010-03-25 09:57:00', 'iPlanet', 'obj.conf 설정시 주의사항', '#아래부분은 불필요한 \r\n부분이며 차후 보안 점검에 \r\n걸릴 소지가 있음.\r\n\r\n#NameTrans fn="NSServletNameTrans" name="servlet"\r\n\r\n#NameTrans fn="pfx2dir" from="/servlet" dir="$docroot/servlet" \r\nname="ServletByExt"\r\n\r\n#NameTrans fn="pfx2dir" from="/mc-icons" \r\ndir="/opt/iPlanet/ns-icons" name="es-internal"\r\n\r\n#NameTrans fn="pfx2dir" from="/manual" \r\ndir="/opt/iPlanet/manual/https" name="es-internal"\r\n\r\n####################################################\r\n\r\n\r\n#아래부분은 Web단에서 \r\n서블릿을 처리할 경우만 \r\n사용함.\r\n\r\n#Service type="magnus-internal/jsp" fn="NSServletService"\r\n\r\n######################################################', '', '', 12, 0),
(781, '', '서대영', '', '2010-03-25 11:18:34', 'Unix', 'chown/chgrp : 파일/디렉토리의 오너/그룹 바꾸기', 'chown [Option] [UID:GID] [파일 또는 디렉토리 이름]\r\n\r\n-R : 하위 디렉토리까지\r\n\r\nex)\r\n\r\n이전 => -rw-r--r--   1 root       sys           2156 Mar 25 03:03 cisvms.obj.conf\r\n\r\n실행 => chown cisskp:users cisvms.obj.conf\r\n\r\n이후 => -rw-r--r--   1 cisskp     users         2156 Mar 25 03:03 cisvms.obj.conf\r\n\r\n\r\n# dale-algorithm 디렉토리와 그 안 모든 파일의 소유자를 현재 사용자로 변경\r\nsudo chown -R $(whoami) dale-algorithm\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/zzogling?Redirect=Log&logNo=40089047591', NULL, '', 17, 0),
(782, '', '서대영', '', '2010-03-26 00:21:30', 'Java', 'command 실행', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.exampledepot.com/egs/java.lang/Exec.html', 'http://www.exampledepot.com/egs/java.lang/Exec.html', '', 1, 0),
(783, '', '서대영', '', '2010-03-29 16:18:11', 'License', 'LGPL', 'LGPL 대상 라이브러리와 링크만 해서 사용한 경우 실행 프로그램에 대한 공개 의무가 없다. 즉 GPL 라이센스 적용을 받지 않는다.\r\n\r\n\r\n-------------------------------------------------------------------------\r\n단지 차이점으로 접근한다면 GPL, LGPL 나눠있듯이 다른 라이센스 입니다.\r\n\r\nLGPL은 초기에 Library GPL 이라고 불리웠습니다. LGPL 로 되어 있는 것들을 보면 대부분 라이브러리입니다.(glibc, gtk+ 등등)\r\n\r\nGPL은 개작이든 GPL에 라이브러리 링크가 되어도 제작된 프로그램은 자동으로 GPL이 됩니다. \r\n\r\n이런 경우에는(LGPL이 없을경우) GPL 이외의 개발은 이루어 지지 않겠죠?\r\n\r\n그래서 나온것이 LGPL입니다. GPL 원본 개작이 아닌 자신이 개발을 했으나 LGPL 라이브러리 링크된것에 대해서는 GPL 적용을 받지 않는다.\r\n\r\n자신의 라이센스를 붙일 수 있는 것이지요.\r\n\r\n리눅스에서도 상용 어플(GPL을 따르지 않는)이 나올수 있는 이유가 이런 연유 입니다.\r\n\r\n여러 가지 경우의 수가 나오는데 자신이 A라는 프로그램을 개발 했했는데 이 A때문에 glbc를 개작 했다면 glibc의 개작 부분은 GPL로 공개 되어야 합니다. \r\n\r\nA는 GPL로 하지 않아도 되겠지요. 물론 GPL 코드를 포함하지 않고 LGPL 링크만 한경우입니다.\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.gnu.org/licenses/lgpl.html', 'http://www.gnu.org/licenses/lgpl.html', '', 4, 0),
(784, '', '서대영', '', '2010-03-29 17:14:27', 'License', 'Open Source License', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://totb.tistory.com/451', 'http://totb.tistory.com/451', '', 2, 0),
(785, '', '서대영', '', '2010-03-30 18:27:49', 'Swing', 'Clipboard 복사하기, 붙여넣기', 'Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();\r\nclipboard.setContents(new StringSelection(문자열), null);\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/zeroscience?Redirect=Log&logNo=120038953862', 'http://blog.naver.com/zeroscience?Redirect=Log&logNo=120038953862', '', 0, 0),
(786, '', '서대영', '', '2010-04-01 15:32:43', 'Servlet', 'getInitParameter', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/purelyworld?Redirect=Log&logNo=100009231470', 'http://blog.naver.com/purelyworld?Redirect=Log&logNo=100009231470', '', 0, 0),
(787, '', '서대영', '', '2010-04-01 22:22:26', 'Log4j', 'ConversionPattern 설정법', '%d : 시간\r\n%p : 레벨\r\n%c : 클래스 이름\r\n%F : 소스 파일 이름\r\n%M : 메서드 이름\r\n%L : 호출지의 라인수\r\n%m : 로그 메세지\r\n%n : 개행\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.voiceportal.co.kr/849', 'http://www.voiceportal.co.kr/849', '', 17, 0),
(788, '', '서대영', '', '2010-04-02 10:30:13', 'JavaScript', 'location.replace location.href 의 차이', 'replace 는 기록이 남지않아. 뒤로가 비활성화 됩니다!! \r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/lvtlvt?Redirect=Log&logNo=80102701920', 'http://blog.naver.com/lvtlvt?Redirect=Log&logNo=80102701920', '', 8, 0),
(790, '', '서대영', '', '2010-04-05 15:51:57', 'Commons', 'fileUpload 사용법', '	HashMap<String, String> paramMap = new HashMap<String, String>();\r\n\r\n	// 파일 저장 경로\r\n	// String uploadPath = "C:/Tmp/";\r\n	String uploadPath = "E:/04. 소스/Dale/Security/WebContent/file/";\r\n	\r\n	DiskFileItemFactory factory = new DiskFileItemFactory();\r\n	factory.setRepository(new File(uploadPath));\r\n	ServletFileUpload upload = new ServletFileUpload(factory);\r\n	\r\n	List<FileItem> fileItemList = upload.parseRequest(request);\r\n	\r\n	for (FileItem fileItem : fileItemList) {\r\n		\r\n		String paramName = fileItem.getFieldName();\r\n		\r\n		// 파일이 아닌 경우\r\n		if (fileItem.isFormField()) {\r\n			\r\n			// 파라미터 값을 map에 저장\r\n			String paramValue = fileItem.getString("euc-kr");\r\n			\r\n			paramMap.put(paramName, paramValue);\r\n			\r\n		}\r\n		\r\n		// 파일인 경우\r\n		else {\r\n			\r\n			// 전체 파일 경로로 부터 파일 이름만 추출 \r\n			String filePath = fileItem.getName();\r\n			int idx = filePath.lastIndexOf("/") == -1 ? filePath.lastIndexOf("\\\\") : filePath.lastIndexOf("/");\r\n			String fileName = filePath.substring(idx + 1);\r\n			filePath = uploadPath + fileName;\r\n			\r\n			// 파일 저장\r\n			File file = new File(filePath);\r\n			fileItem.write(file);\r\n			\r\n			paramMap.put(paramName, fileName);\r\n			\r\n		}\r\n		\r\n	}\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/satanic8?Redirect=Log&logNo=96470753', 'http://blog.naver.com/satanic8?Redirect=Log&logNo=96470753', '', 5, 0),
(791, '', '서대영', '', '2010-04-07 11:10:09', 'JCE', '암호화란', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/icaros1213?Redirect=Log&logNo=41387337', 'http://blog.naver.com/icaros1213?Redirect=Log&logNo=41387337', '', 3, 0),
(792, '', '서대영', '', '2010-04-07 11:10:41', 'JCE', 'Java에 의한 암호화', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/icaros1213?Redirect=Log&logNo=41387337', 'http://blog.naver.com/icaros1213?Redirect=Log&logNo=41387337', '', 6, 0),
(793, '', '서대영', '', '2010-04-07 11:11:16', 'JCE', '암호화 프로그램예', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/icaros1213?Redirect=Log&logNo=41387337', 'http://blog.naver.com/icaros1213?Redirect=Log&logNo=41387337', '', 5, 0),
(794, '', '서대영', '', '2010-04-07 11:13:12', 'JCE', 'AES 암호화 알고리즘 매뉴얼', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://java.sun.com/developer/technicalArticles/Security/AES/AES_v1.html', 'http://java.sun.com/developer/technicalArticles/Security/AES/AES_v1.html', '', 12, 0),
(795, '', '서대영', '', '2010-04-07 11:17:38', 'JCE', '암호화 방식 종류 (DES/3DES/AES/SEED)', '\r\n이 JCE를 사용하지 않아도, 자체적으로 구현해서 마음껏 암호학의 세계를 여행할 수 있지만, 시간에 쫓기는 분들을 위해서 간단히 사용법을 알아보도록 하자.\r\n\r\n암호화에는 크게 블럭 암호화(block encryption)와 스트림 암호화(stream encryption)가 있는데, 여기서는 가장(?) 많이 쓰이는 블럭 암호화에 대해서 알아보도록 하겠다.\r\n블럭 암호화는 말 그대로 데이터를 정해진 블럭으로 나눈후 해당 블럭을 암호화하는것이다. \r\n대표적으로 DES/3DES/AES/SEED 등이 있다.\r\n\r\nDES(Data Encryption Standard)는 Lucifer를 보완하여 IBM에서 개발한 블럭암호 알고리즘이다.\r\n64비트 입력 블럭을 56비트 비밀키를 사용하여 암호화하는 알고리즘이다.\r\n전세계적으로 널리 사용되었다가, 56비트라는 짧은 키(key)로 인해 안전하지 않다고 보는 견해가 많아져서, 요즘은  AES한테 밀리는 추세이다.\r\n\r\n3DES(Triple Data Encryption Standard)는 DES의 단점을 보완하기 위해서 기존의 DES 방식을 3번 적용(암호화->복호화->암호화)시킨것으로 그 과정에 따라서 56비트의 배수로 암호화 복잡도가 증가한다고 한다.\r\n이 3번의 암복호화 즉, Encryption->Decryption->Encryption을 첫글자를 따서 DESede라 명칭하기도한다.\r\n\r\nAES(Advanced Encryption Standard)는 현재 미국 정부 표준으로 지정된 블럼 암호화 알고리즘으로서, DES를 대체하고 있다.\r\n키(key)의 크기는 128, 160, 190, 224, 256비트를 사용할 수 있으며, 현재 미국 표준으로 인정받은 것은 128비트이다.\r\n(JCE에서 제공하는것도 128비트밖에 안될지도...)\r\n\r\nSEED는 한국정보보호진흥원을 중심으로 국내 암호 전문가들이 참여하여 만든, 순수 국내기술 블럭암호화 알고리즘이다.\r\n(SEED는 다음에 한번 구현에해보기도 하고 오늘은 다루지 않겠다.)\r\n', '', '', 8, 0),
(796, '', '서대영', '', '2010-04-07 11:59:30', 'JCE', 'JCE 알고리즘 별 암호화 구현방법 ★', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.kangwoo.kr/44', 'http://blog.kangwoo.kr/44', '', 10, 0),
(797, '', '서대영', '', '2010-04-09 16:37:39', 'Security', 'XSS (Cross Site Scripting) 사용자 악성 스크립트', 'XSS 취약 지적 사이트의 점검 Tip을 공유하자면\r\n\r\nINPUT 태그의 style에 아래의 형식으로 세팅되도록 파라미터값 변조를 통해 취약 지적을 했더군요. 무려 15개의 취약점을..참고하세요.\r\n\r\n \r\n\r\n~~?cmd=&menu_code=&menu_group="style%3d"x:expression(alert(1))"&menu_path=\r\n\r\n \r\n\r\n <input type="hidden" name="cm-d" value=""style="x:expression(alert(1))">\r\n <input type="text" name="sch_txt" value=""style="x:expression(alert(2))">\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://ghlee.tistory.com/107', 'http://ghlee.tistory.com/107', '', 5, 0),
(798, '', '서대영', '', '2010-04-09 17:28:25', 'Security', 'SQL injection', '< SQL Injjection (My SQL) >\r\n\r\n * 소스\r\n$id = $_GET[''id''];\r\n$getid = "SELECT first_name, last_name FROM users WHERE user_id = ''$id''"; \r\n\r\n * Injection 가능 여부 확인\r\n  '' OR 1 = 1 #\r\n * 테이블 목록 조회\r\n  '' UNION ALL SELECT table_name, ''abc'' FROM information_schema.tables #\r\n * 칼럼 목록 조회\r\n  '' UNION ALL SELECT table_name, column_name FROM information_schema.columns where table_name = ''users'' #\r\n * 유저 목록 조회\r\n  '' UNION ALL SELECT user_id, password FROM users #\r\n\r\n드랍다운 버튼으로 입력값을 받는 경우 그 값 자체가 WHERE 절의 칼럼 명일 수 가 있으므로 그 부분을 1 = 1 OR 로 치환하면\r\n'' 없이 SQL 인젝션 가능하다.\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://ghlee.tistory.com/99', 'http://ghlee.tistory.com/99', '', 3, 0),
(799, '', '서대영', '', '2010-04-12 17:24:07', 'Security', 'SSL에 대한 오해', 'SSL은 네트웍단에서 구간 암호화만 한다. (터널 개념)\r\n즉, 클라이언트나 서버 말단에서는 암호화하지 않는다.\r\n\r\n따라서 hjjecking 같은  중간에서 파라미터를 가로채기하는 것은 막을 수 있지만,\r\n원래 평문으로 된 파라미터 값을 암호화 시키지는 않는다.\r\n\r\n그래서 SSL을 적용하더라도 클라이언트 프록시 툴을 이용한 파라미터 변조는 막을 수가 없다.\r\n이는 평문 파라미터를 Client-side 기술로 암호화하여 Server로 넘기는 방법 밖에 없다.', '', '', 3, 0),
(800, '', '서대영', '', '2010-04-13 23:28:03', 'Editor', 'TinyMCE 설정', '* <head></head> 사이에 아래 추가\r\n\r\n<script type="text/javascript" src="js/tiny_mce/tiny_mce.js"></script>\r\n<script type="text/javascript">\r\ntinyMCE.init({\r\n	theme : "advanced",\r\n	mode : "textareas",\r\n	plugins : "safari,spellchecker,pagebreak,style,layer,table,save,advhr,advimage,advlink,emotions,iespell,inlinepopups,insertdatetime,preview,media,searchreplace,print,contextmenu,paste,directionality,fullscreen,noneditable,visualchars,nonbreaking,xhtmlxtras,template,imagemanager,filemanager",\r\n	theme_advanced_buttons3_add : "fullpage",\r\n	theme_advanced_toolbar_location : "top"\r\n});\r\n</script>\r\n\r\n* 이렇게 하면 모든 textarea에 TinyMCE 에디터가 설치됨', '', '', 2, 0),
(801, '', '서대영', '', '2010-04-13 23:34:41', 'Editor', 'CKEditor 설정', '<html>\r\n<head>\r\n	<title>Sample - CKEditor</title>\r\n	<script type="text/javascript" src="/ckeditor/ckeditor.js"></script>\r\n</head>\r\n<body>\r\n	<form method="post">\r\n		<p>\r\n			My Editor:<br />\r\n			<textarea name="editor1">&lt;p&gt;Initial value.&lt;/p&gt;</textarea>\r\n			<script type="text/javascript">\r\n				CKEDITOR.replace( ''editor1'' );\r\n			</script>\r\n		</p>\r\n		<p>\r\n			<input type="submit" />\r\n		</p>\r\n	</form>\r\n</body>\r\n</html>\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://docs.cksource.com/CKEditor_3.x/Developers_Guide/Integration', 'http://docs.cksource.com/CKEditor_3.x/Developers_Guide/Integration', '', 1, 0),
(802, '', '서대영', '', '2010-04-20 13:54:13', 'SQL', 'NOT IN 사용시 주의 사항', 'NOT IN () 안에 NULL 이 있다면 아무것도 리턴하지 않으므로 주의\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.phpschool.com/gnuboard4/bbs/board.php?bo_table=tipntech&wr_id=45337', 'http://www.phpschool.com/gnuboard4/bbs/board.php?bo_table=tipntech&wr_id=45337', '', 1, 0),
(803, '', '서대영', '', '2010-04-27 19:47:35', 'Security', '해쉬함수의 종류와 특징', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/entireyn/40046461987', 'http://blog.naver.com/entireyn/40046461987', '', 3, 0),
(804, '', '서대영', '', '2010-04-27 19:52:29', 'Security', 'Javascript MD5', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://pajhome.org.uk/crypt/md5/index.html', 'http://pajhome.org.uk/crypt/md5/index.html', '', 6, 0),
(805, '', '서대영', '', '2010-04-29 10:00:15', 'HTML', 'HTML 예약어', 'Reserved Characters in HTML\r\nSome characters are reserved in HTML and XHTML. For example, you cannot use the greater than or less than signs within your text because the browser could mistake them for markup.\r\n\r\nHTML and XHTML processors must support the five special characters listed in the table below:\r\n\r\nCharacter Entity Number Entity Name Description \r\n" " " quotation mark \r\n'' '' &apos; (does not work in IE) apostrophe  \r\n& & & ampersand \r\n< < < less-than \r\n> > > greater-than \r\nNote: Entity names are case sensitive!\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.w3schools.com/tags/ref_entities.asp', 'http://www.w3schools.com/tags/ref_entities.asp', '', 5, 0),
(806, '', '서대영', '', '2010-04-29 15:19:09', 'Java', 'JDK 1.4 에서 String 클래스의 contains 매서드 대용', 'str.indexOf("aaa") != -1', '', '', 2, 0),
(807, '', '서대영', '', '2010-04-29 16:16:12', 'Servlet', 'HttpServletRequest 클래스', '□ URL 관련\r\n\r\n- request.getRequestURL().toString();\r\nhttp://localhost:8080/GomGil/rest/board/list.do\r\n\r\n- request.getRequestURI();\r\n/GomGil/board/list.do\r\n\r\n- request.getContextPath();\r\n/GomGil\r\n\r\n- request.getServletPath();\r\n/rest\r\n\r\n- request.getPathInfo(); // Context Path와 Servlet Path를 제외한 나머지 Path 부분\r\n/list.do', NULL, '', 32, 0),
(808, '', '서대영', '', '2010-05-03 10:24:08', 'Security', 'Javascript 암호화 (AES)', 'http://www.movable-type.co.uk/scripts/aes.html\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.hanewin.net/encrypt/', 'http://www.hanewin.net/encrypt/', '', 4, 0),
(809, '', '서대영', '', '2010-05-04 18:46:20', 'Security', '블럭 암호화 모드의 종류와 특징', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://huikyun.tistory.com/73', 'http://huikyun.tistory.com/73', '', 5, 0),
(810, '', '서대영', '', '2010-05-04 19:05:17', 'JavaScript', 'Javascript 소스코드 암호화', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://towons.kr/blog/3', 'http://towons.kr/blog/3', '', 0, 0),
(811, '', '서대영', '', '2010-05-10 14:22:23', 'Eclipse', 'SVN 설치', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://heny2kawmi.tistory.com/62', 'http://heny2kawmi.tistory.com/62', '', 8, 0),
(812, '', '서대영', '', '2010-05-10 16:33:10', 'Tomcat', 'DataSource 등록 방법 2', 'server.xml 의 </Host> 바로위에 \r\n<Context> 내용만 아래와 같이 대체한다.\r\n-------------------------------------------------------------------------\r\n\r\n	<Context docBase="gspn_portal" path="/" reloadable="true" source="org.eclipse.jst.j2ee.server:gspn_portal">\r\n		<Resource auth="Container" driverClassName="oracle.jdbc.OracleDriver" maxActive="20" maxIdle="10" maxWait="-1" name="basisDataSource" password="GSPNUSER" type="javax.sql.DataSource" url="jdbc:oracle:thin:@10.240.57.174:1521:PORTALDB" username="GSPNUSER"/>       \r\n	</Context>\r\n\r\n\r\n\r\nweb.xml 의 가장 아래 아래 내용을 추가한다. (JNDI 등록)\r\n--------------------------------------------------------------------\r\n	<resource-ref>\r\n      <description>DB Connection</description>\r\n      <res-ref-name>basisDataSource</res-ref-name>\r\n      <res-type>javax.sql.DataSource</res-type>\r\n      <res-auth>Container</res-auth>\r\n  	</resource-ref>\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://tomcat.apache.org/tomcat-5.5-doc/jndi-datasource-examples-howto.html', 'http://tomcat.apache.org/tomcat-5.5-doc/jndi-datasource-examples-howto.html', '', 10, 0),
(813, '', '서대영', '', '2010-05-11 19:35:11', 'Tomcat', '웹루트 설정', 'server.xml 의 <HOST> 태그 아래 <Context>를 등록하면 된다.\r\n\r\n<!--  DMC Context -->\r\n<Context docBase="DMC" path="/DMC" reloadable="true" source="org.eclipse.jst.j2ee.server:DMC"/>\r\n<!--  Securty Context -->\r\n<Context docBase="Security" path="/Security" reloadable="true" source="org.eclipse.jst.j2ee.server:Security"/>\r\n<!--  WebTest Context -->\r\n<Context docBase="WebTest" path="/WebTest" reloadable="true" source="org.eclipse.jst.j2ee.server:WebTest"/></Host>', '', '', 2, 0),
(814, '', '서대영', '', '2010-05-11 19:36:35', 'Tomcat', '/를 컨텍스트 루트로 사용하기', 'server.xml 에서 해당 컨텍스트의 path를 / 로 수정\r\n\r\n<Context docBase="gspn_portal" path="/" reloadable="true" source="org.eclipse.jst.j2ee.server:gspn_portal">', '', '', 3, 0),
(815, '', '서대영', '', '2010-05-11 23:49:24', 'Struts', 'Struts Documentation. 주의사항', '\r\n\r\n\r\n\r\nThe framework architecture is flexible enough to support most any approach to accessing the Model, but we strongly recommend that you separate the business logic ("how it''s done") from the role that Action classes play ("what to do"). ''nuff said.\r\n\r\n\r\n\r\n In addition, the framework lets you define logical "names" to which control should be forwarded so that an action method can ask for the "Main Menu" page (for example), without knowing the location of the corresponding JSP page. These features greatly assist you in separating the control logic (what to do) with the view logic (how it''s rendered). \r\n\r\nFor the simplest applications, an Action object may sometimes handle the business logic associated with a request. However, in most cases, an Action object should invoke another object, usually a JavaBean, to perform the actual business logic. This lets the Action focus on error handling and control flow, rather than business logic. To allow reuse on other platforms, business-logic JavaBeans should not refer to any Web application objects. The Action object should translate needed details from the HTTP request and pass those along to the business-logic beans as regular Java variables.\r\n\r\n', '', '', 3, 0),
(816, '', '서대영', '', '2010-05-13 18:57:46', 'Java', 'Javadoc 태그 정리', '@author text: Identifies each author (one per line) for a class.\r\n@throws exceptionName description: Identifies an error condition that is signaled by this method (see Section 2.4).\r\n@param parameterName description: Identifies a parameter accepted by this method.\r\n@return description: Describes the return type and its range of values for a method.\r\n\r\n\r\n\r\n\r\nhttp://blog.naver.com/benelife?Redirect=Log&logNo=6570168\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://java.sun.com/j2se/1.4.2/docs/tooldocs/windows/javadoc.html#javadoctags', NULL, '', 6, 0),
(817, '', '서대영', '', '2010-05-13 19:47:51', 'Pattern', '싱글턴 언제 사용', '싱글톤, 비싱글톤 언제 써야 할까?\r\n\r\n참고:  Pro Spring 2.5 3장\r\n\r\n \r\n\r\n싱글톤이 적절한 경우\r\n- 상태가 없는 공유 객체\r\n- 읽기 전용 상태를 가지고 있는 공유 객체\r\n- 상태를 공유하는 공유 객체\r\n- 쓰기가 가능한 상태를 약간 가지고 있으면서 매우 빈번하게 사용하는 객체\r\n\r\n비싱글톤이 적절한 경우\r\n- 쓰기가 가능한 상태를 가진 객체\r\n- private 상태를 가지고 있는 객체\r\n\r\n여기서 주목해야 할 것은 같은 쓰기 가능한 상태를 가진 객체인데 어느것은 싱글톤 어느 것은 비싱글톤이 적절하다는 부분인데 동기화 비용과 객체 생성 비용을 가지고 나누더군요.\r\n\r\n자세한 내용은 프로 스프링 2.5 번역서를 참고하세요~ ㅋㅋㅋ\r\n\r\n \r\n\r\n[출처] [패턴] 싱글톤, 비싱글톤 언제 써야 할까?|작성자 포크맨\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/rchani?Redirect=Log&logNo=40097941535', 'http://blog.naver.com/rchani?Redirect=Log&logNo=40097941535', '', 4, 0),
(818, '', '서대영', '', '2010-05-18 15:22:51', 'SQL', 'NOT IN 과 NOT EXISTS 의 차이', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/tyboss?Redirect=Log&logNo=70051601411', 'http://blog.naver.com/tyboss?Redirect=Log&logNo=70051601411', '', 3, 0),
(819, '', '서대영', '', '2010-05-18 20:03:15', 'Term', 'Log in과 Sign in', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://legendre.tistory.com/entry/Log-in%EA%B3%BC-Sign-in', 'http://legendre.tistory.com/entry/Log-in%EA%B3%BC-Sign-in', '', 1, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(820, '', '서대영', '', '2010-05-22 11:26:30', 'Log4j', 'Log Level 및 Option', '# Log Level\r\n# TRACE : 가장 상세한 정보를 나타낼 때 사용한다.\r\n# DEBUG : 일반 정보를 상세히 나타낼 때 사용한다.\r\n# INFO  : 일반 정보를 나타낼 때 사용한다.\r\n# WARN  : 에러는 아니지만 주의할 필요가 있을 때 사용한다.\r\n# ERROR : 일반 에러가 일어 났을 때 사용한다.\r\n# FATAL : 가장 크리티컬한 에러가 일어 났을 때 사용한다.\r\n\r\n# Options\r\n# %d : 로깅 이벤트가 일어난 날자(date)\r\n# %p : 로깅 이벤트의 priority\r\n# %t : 로깅 이벤트를 생성한 스레드 이름\r\n# %c : 로깅 이벤트의 category\r\n# %F : 로깅요청을 일으킨 파일 이름\r\n# %L : 로깅요청을 일으킨 파일의 행번호\r\n# %x : 로깅이벤트를 발생시킨 스레드에 관련된 내포검사항목\r\n#      (Nested Diagnostic Context : NDC)을 출력\r\n# %C : 로깅요청을 일으킨 호출자의 완전한 클래스이름\r\n# %M : 로깅요청을 일으킨 메소드\r\n# %m : 메세지\r\n# %n : 플랫폼 독립적인 개행문자\r\n# %l : 소스코드의 위치정보를 출력한다. %C. %M(%F:%L) 의 축약형', '', '', 6, 0),
(821, '', '서대영', '', '2010-05-22 11:52:37', 'Struts', 'web.xml 에 Action Serlvlet 등록', '	<servlet>\r\n		<servlet-name>action</servlet-name>\r\n		<servlet-class>\r\n			org.apache.struts.action.ActionServlet\r\n		</servlet-class>\r\n		<init-param>\r\n	        <param-name>config</param-name>\r\n	        <param-value>\r\n	         	/WEB-INF/struts-config.xml\r\n	        </param-value>\r\n   		</init-param>\r\n		<load-on-startup>1</load-on-startup>\r\n	</servlet>\r\n	<servlet-mapping>\r\n		<servlet-name>action</servlet-name>\r\n		<url-pattern>*.do</url-pattern>\r\n	</servlet-mapping>', '', '', 2, 0),
(822, '', '서대영', '', '2010-05-25 13:22:17', 'Oracle', '코멘트 사용방법', '- TABLE COMMENT 추가\r\n\r\n   comment ON TABLE 테이블명 IS ''설명''\r\n\r\n\r\n- 컬럼 COMMENT 추가\r\n\r\n   comment ON COLUMN 테이블명.필드명 IS ''설명''\r\n\r\n\r\n- TABLE COMMENT 삭제 \r\n\r\n   comment ON TABLE 테이블명 IS ''''\r\n\r\n\r\n- TABLE COMMENT 확인\r\n\r\n   SELECT * FROM ALL_COL_COMMENTS WHERE TABLE_NAME = ''테이블명'';\r\n\r\n\r\n테이블 이나 컬럼 생성시 COMMENT를 달아놓으면\r\n\r\n처음에는 귀찮아도 나중에는 편리할때가 있죠...^^\r\n\r\n[출처] [ORACLE] 오라클에서 COMMENT 추가 & 확인!|작성자 자꾸만또또\r\n\r\n\r\n', '', '', 5, 0),
(823, '', '서대영', '', '2010-05-31 16:10:31', 'Log4j', 'log4j.xml 샘플', 'log4j.xml\r\n\r\n_______________________________________________________________________________________\r\n<?xml version="1.0" encoding="UTF-8"?>\r\n<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">\r\n<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/"\r\n    debug="false">\r\n\r\n    <appender name="console" class="org.apache.log4j.ConsoleAppender">\r\n        <layout class="org.apache.log4j.PatternLayout">\r\n            <param name="ConversionPattern" value="[%-5p] [%d] [%c] : %m%n" />\r\n        </layout>\r\n    </appender>\r\n\r\n    <appender name="logfile" class="org.apache.log4j.RollingFileAppender">\r\n        <param name="Threshold" value="DEBUG" />\r\n        <param name="Append" value="true" />\r\n        <param name="MaxFileSize" value="1024KB" />\r\n        <param name="MaxBackupIndex" value="5" />\r\n        <param name="ImmediateFlush" value="true" />\r\n        <param name="File" value="logs/logfile.log" />\r\n        <layout class="org.apache.log4j.PatternLayout">\r\n            <param name="ConversionPattern" value="[%-5p] [%d] [%c] : %m%n" />\r\n        </layout>\r\n    </appender>\r\n\r\n    <logger name="org.apache.catalina">\r\n        <level value="WARN" />\r\n    </logger>\r\n\r\n    <logger name="org.apache.commons">\r\n        <level value="WARN" />\r\n    </logger>\r\n\r\n    <logger name="org.springframework">\r\n        <level value="INFO" />\r\n    </logger>\r\n\r\n    <logger name="org.aspectj.weaver">\r\n        <level value="INFO" />\r\n    </logger>\r\n\r\n    <root>\r\n        <priority value="DEBUG" />\r\n        <appender-ref ref="console" />\r\n        <appender-ref ref="logfile" />\r\n    </root>\r\n\r\n</log4j:configuration> \r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://sloverjb.egloos.com/5179266', 'http://sloverjb.egloos.com/5179266', '', 31, 0),
(824, '', '서대영', '', '2010-05-31 18:38:00', 'JDBC', 'resultset.execute()', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/magefister?Redirect=Log&logNo=50016701205', 'http://blog.naver.com/magefister?Redirect=Log&logNo=50016701205', '', 0, 0),
(825, '', '서대영', '', '2010-06-03 10:04:24', 'Unix', '유저 전환 su / sudo', 'http://brownbears.tistory.com/227\r\n\r\n\r\n## 다른 사용자로 전환하지 않고 커맨드만 실행하기\r\n\r\n```\r\n$ sudo -u gfs-clvn id\r\nuid=226701(gfs-clvn) gid=100(amazon) groups=100(amazon),552(apolloop),2133(gfs-calvin),22569(apolloop-misc)\r\n```\r\n\r\n\r\n\r\n==================================\r\nsudo 권한이 있는 계정으로 로그인\r\n예를 들어 slee/dxbb1111 라고 치면 로긴 하고 \r\nsudo su - 라고 입력하고 원래 자기 패스워드 치면 root 로 로긴된다\r\n\r\n$ sudo su -\r\npassword : dxbb1111\r\ngspnweb1:/>\r\n\r\n\r\n\r\n\r\n\r\n\r\n===========================\r\n\r\n\r\n\r\n\r\n-> sudo su -\r\nj73BdQ6GNf\r\n\r\nsu - portal', NULL, '', 12, 0),
(826, '', '서대영', '', '2010-06-03 10:14:13', 'Unix', '네트워크 설정 보기', '$ ifconfig -a\r\nen7: flags=5e080863,c0<UP,BROADCAST,NOTRAILERS,RUNNING,SIMPLEX,MULTICAST,GROUPRT,64BIT,CHECKSUM_OFFLOAD(ACTIVE),PSEG,LARGESEND,CHAIN>\r\n        inet 10.41.131.173 netmask 0xffffff00 broadcast 10.41.131.255\r\n         tcp_sendspace 131072 tcp_recvspace 65536 rfc1323 0\r\nlo0: flags=e08084b<UP,BROADCAST,LOOPBACK,RUNNING,SIMPLEX,MULTICAST,GROUPRT,64BIT>\r\n        inet 127.0.0.1 netmask 0xff000000 broadcast 127.255.255.255\r\n        inet6 ::1/0\r\n         tcp_sendspace 131072 tcp_recvspace 131072 rfc1323 1', '', '', 4, 0),
(827, '', '서대영', '', '2010-06-03 10:22:00', 'Unix', 'AIX 명령어', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/sonmap?Redirect=Log&logNo=80001754363', 'http://blog.naver.com/sonmap?Redirect=Log&logNo=80001754363', '', 7, 0),
(828, '', '서대영', '', '2010-06-03 14:57:20', 'Unix', '사용자 계정 관련', '모든 사용자 계정 및 홈디렉토리 보기\r\n# vi /etc /passwd\r\n\r\n\r\n# passwd [id]\r\n사용자 비밀번호 지정\r\n(사용자 최초 접속 시 비밀번호 재지정 요망)', '', '', 10, 0),
(829, '', '서대영', '', '2010-06-03 16:53:28', 'iPlanet', 'Weblogic 과 iPlanet 연결 유지', ' [웹로직]웹애플리케이션에서 세션이 너무 일찍 끊어진다.  웹로직  \r\n2008/12/11 15:49\r\n\r\n http://blog.naver.com/sugyoo/20058367583 \r\n\r\n\r\n \r\n웹로직 서버를 사용하는 웹애플리케이션의 세션이 너무 일찍 끊어지는 것 같다.\r\n\r\n \r\n\r\n대상 시스템: EUS(160.60.*.123:7001)\r\n\r\n제품: weblogic 10 MP1 + aix 5.3 + Java 1.5 (build pap32dev-20080315 (SR7))\r\n\r\n \r\n\r\n증상:\r\n\r\n 단순한 웹애플리케이션에서 세션에 데이터를 저장하여 사용하고 있는데 idle시간이 1분도 되지않아서 세션이 끊어지는 현상이 있다. \r\n\r\n \r\n\r\n결론:\r\n\r\n 웹로직과 웹서버에 KeepAliveEnabled와 KeepAliveSecs옵션을 설정하면 해결 가능.\r\n\r\n \r\n\r\n분석:\r\n\r\n* KeepAliveEnabled & KeepAliveSecs를 설정한다.\r\n\r\n옵션의 정의:\r\n\r\nKeepAliveEnabled 옵션은 요청이 들어와서 WEBLOGIC 서버와 연결하고 처리한 후에 연결을 닫아버릴 것인지 혹은 연결된 상태로 두었다가 다음 요청이 들어왔을 때 재사용할 것인지를 지정하는 것이고, KeepAliveSecs는 그러한 연결을 얼마 동안 유지할 것인지를 지정하는 옵션이다.\r\n\r\n \r\n\r\n설정 방법:\r\n\r\nWEBLOGIC 서버에서도 이와 동일한 옵션이 있는데, 그 이유는 웹로직 서버도 웹서버로 사용하거나 혹은 클라이언트가 웹서버 없이 바로 접속하는 경우를 고려하여야 하기 때문이다.\r\n\r\n따라서 WEBLOGIC 서버의 KeepAlive 기능은 WEBLOGIC 서버입장에서 client(브라우저 혹은 플러그인)와의 연결을 유지하는 옵션으로 웹서버의 옵션과 동일하다고 봐도 된다.\r\n\r\n \r\n\r\n시간의 설정 기준은 웹로직 서버에서 지정한 시간이 플러그인에서 설정한 시간보다 같거나 조금 크게 준다.\r\n\r\n \r\n\r\nl  웹로직에서 설정은 아래와 같다.\r\n\r\n콘솔에서 {managed 서버} --- Protocols --- HTTP에서 아래와 같이 설정한다.\r\n\r\n \r\n\r\n\r\n\r\n \r\n\r\n \r\n\r\nEnable Keepalives옵션을 체크하고 바로 밑에있는 Duration 시간을 적당히 준다.\r\n\r\n \r\n\r\n \r\n\r\nl  웹서버에서 설정은 아래와 같다.(sunone웹서버 기준)\r\n\r\nObj.conf에서도 설정이 가능하지만 magnus.conf에서 설정하면 한 번에 적용이 가능하므로 아래와 같이 설정하였다.\r\n\r\n…중략..\r\n\r\nInit fn="load-modules" funcs="wl-proxy,wl-init" shlib=/sunone/ws61/bin/https/lib/libproxy_61.so\r\n\r\nInit fn="wl-init" KeepAliveEnabled="true" KeepAliveSecs="120"\r\n\r\n 참고:\r\n\r\n웹서버와 WEBLOGIC 서버 사이에 firewall을 두는 경우가 많은데 firewall에서 일정 시간 동안 통신이 없을 때 연결을 끊어버리는 기능을 사용한다면 그 시간을 조절할 필요가 있다. \r\n\r\nfirewall에서의 idle timeout 시간보다는 플러그인의 KeepAliveSecs 시간을 짧게 주는 것이 좋다. 그렇지 않으면 플러그인은 연결이 되어있다고 생각해서 통신을 시도하려는데 firewall이 이미 연결을 끊어버려서 에러가 날 수도 있기 때문이다.\r\n\r\n 아울러 요즘은 Apache 1.3.x버전을 사용하진 않겠지만 KeepAliveEnabled옵션이 Apache에서는 true/false가 아니라 ON/OFF(기본값 OFF)로 지정하며,  iPlanet과 IIS에서는 true/false로 지정한다.(기본값 true). KeepAliveSecs(sec단위)옵션의 기본값은 20초이다.\r\n[출처] [웹로직]웹애플리케이션에서 세션이 너무 일찍 끊어진다.|작성자 부탄가스\r\n\r\n \r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/sugyoo?Redirect=Log&logNo=20058367583', 'http://blog.naver.com/sugyoo?Redirect=Log&logNo=20058367583', '', 7, 0),
(831, '', '서대영', '', '2010-06-08 20:32:20', 'Webservice', '웹서비스 클라이언트 구축 (Axis 1)', '1) 웹서비스 서버와 다른 포트를 사용하는 WAS 추가\r\n (이클립스의 Servers 서버를 추가하고 그 서버를 더블클릭하면 포트 쉽게 수정 가능)\r\n\r\n2) Dynamic Project 생성\r\n\r\n3) WebContent/wsdl 에 서버의 wsdl 파일 복사\r\n\r\n4) wsdl 위에서 마우스 우측 버튼 > Webservices > Generate Client\r\n\r\n5) 그래프 최대로, Configuration에서 Sever 클라이언트로 지정\r\n\r\n6) 계속 다음\r\n\r\n7) Test\r\n\r\npublic class CalculatorProxyTestDrive {\r\n	\r\n	public static void main(String[] args) throws Exception {\r\n		\r\n		CalculatorProxy proxy = new CalculatorProxy();\r\n		int result = proxy.plus(3, 5);\r\n		System.out.println(result);\r\n			\r\n	}\r\n\r\n}', '', '', 1, 0),
(832, '', '서대영', '', '2010-06-09 09:15:51', 'XML', 'XPath를 활용한 DOM 자바 프로그램', 'org.w3c.dom 인터페이스로 편리하게 작업\r\n\r\n\r\n\r\n============================== FILE ==============================\r\nMyDom.java', '', 'MyDom.java', 5, 0),
(833, '', '서대영', '', '2010-06-09 10:33:00', 'Webservice', '웹서비스 엔진 비교', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://wiki.apache.org/ws/StackComparison', 'http://wiki.apache.org/ws/StackComparison', '', 0, 0),
(834, '', '서대영', '', '2010-06-09 10:37:38', 'Webservice', 'JAX-RPC VS JAX-WS', 'JAX-WS 2.0은 JAX-RPC 1.1의 후속이다. 변하지 않은 부분들도 있지만, 프로그래밍 모델 대부분은 어느 정도는 변했다. 이 글에서 다룬 주제들은 후속 시리즈에서 계속 설명해 나갈 것이다. 다음 글에서는 JAX-RPC에서 JAX-WS로 옮겨야 하는 이유 또는 옮기지 말아야 하는 이유를 상세하게 비교 분석하겠다.\r\n\r\nJAX-RPC 1.1을 고수해야 하는 이유:\r\n\r\n    * 당분간 계속 유지하고 싶다면, 당분간은 JAX-RPC도 지원된다.\r\n    * Java 5로 전향하기 싫을 경우\r\n    * SOAP 인코딩 메시지를 보내거나 RPC/encoded 스타일의 WSDL을 보내야 하는 경우\r\n\r\nJAX-WS 2.0으로 전향해야 하는 이유:\r\n\r\n    * 새로운 메시지 지향 API를 사용해야 할 경우\r\n    * MTOM을 사용하여 어태치먼트 데이터를 보내야 하는 경우\r\n    * JAXB를 통해 XML 스키마를 더욱 잘 지원하기 위해\r\n    * 웹 서비스 클라이언트에 비동기식 프로그래밍 모델을 사용하고 싶을 경우\r\n    * SOAP 1.2 메시지를 핸들 할 수 있는 클라이언트나 서비스가 있어야 하는 경우\r\n    * 웹 서비스에서 SOAP을 배제하고 XML/HTTP 바인딩만 사용하고 싶을 경우\r\n    * 최신 기술을 사용하고 싶을 때\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.ibm.com/developerworks/kr/library/ws-tip-jaxwsrpc.html', 'http://www.ibm.com/developerworks/kr/library/ws-tip-jaxwsrpc.html', '', 3, 0),
(835, '', '서대영', '', '2010-06-09 11:03:27', 'Webservice', 'AXIS 2 사용법', '1.5 버젼은 이클립스와 호환버그 있음...\r\n\r\n1) AXIS 2 다운로드\r\nhttp://ws.apache.org/axis2/download.cgi\r\n\r\n2) C:axis2-1.4.1 에 압축풀기\r\n\r\n3) Eclipse 세팅\r\nWindow > Preferences > Web Services > AXIS2 Preferences > Axis2 Runtime\r\n에 C:axis2-1.4.1 설정 후 "Axis2 runtime loaded successfully" 확인 후 OK\r\n\r\n4) Axis1 하고 똑같은 Webservice Generate 하되 Configuration에서 Axis2 Runtime 세팅', '', '', 5, 0),
(836, '', '서대영', '', '2010-06-09 15:49:40', 'Webservice', 'WSDL 방식', 'document/literal wrapped 방식이 주로 쓰이는데,\r\nWSDL이 복잡하지만 SOAP Message가 단순하기 때문이다.\r\n\r\n-------------------------------------------------------------------------\r\n   1.  RPC/encoded\r\n   2. RPC/literal\r\n   3. Document/encoded\r\n   4. Document/literal\r\n\r\n이 컬렉션 외에도 document/literal wrapped\r\n\r\n네 가지 바인딩 유형이 있다. (실제로는 5개 지만 document/encoded는 의미가 없다.) 각 스타일마다 장단점이 있지만 대부분의 경우 최상의 스타일은 document/literal wrapped이다. \r\n\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.ibm.com/developerworks/kr/library/ws-whichwsdl/', 'http://www.ibm.com/developerworks/kr/library/ws-whichwsdl/', '', 2, 0),
(837, '', '서대영', '', '2010-06-10 20:50:13', 'Web', 'Korean Web Services - 국내 웹 서비스 목록', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://krweb.xiles.net/', 'http://krweb.xiles.net/', '', 0, 0),
(838, '', '서대영', '', '2010-06-11 00:47:23', 'Eclipse', '이클립스 플러그인 (Install New Software)', '* Oracle Enterprise Pack (Weblogic Web Service 만들 때 필요)\r\nhttp://download.oracle.com/otn_software/oepe/galileo\r\n\r\n* SVN (subclipse)\r\nhttp://subclipse.tigris.org/update_1.10.x\r\n(마켓에서 subclipse 로 조회해도 나옴)\r\n\r\n* FindBugs (자바 정적분석기)\r\nhttp://findbugs.cs.umd.edu/eclipse\r\n\r\n* SQL Explorer\r\nhttp://eclipsesql.sourceforge.net/\r\n\r\n* Maven\r\n마켓에서 m2e-wtp 로 검색\r\n\r\n* JRebel (소스 변경 내용 WAS 바로 적용)\r\nhttp://www.zeroturnaround.com/update-site/\r\n\r\n* EclEmma\r\nTest Converage 를 구해줌 (소스가 얼마나 테스트 되었는지)\r\nhttp://update.eclemma.org\r\nProject 잡고 오른 쪽 버튼 Converage AS 선택\r\n\r\n* Infinitest (소스 저장만 하면 Unit Test 까지 자동으로 해줌)\r\nhttp://infinitest.github.com\r\n\r\n* Zen Coding (HTML 초고속 작성)\r\nhttp://zen-coding.ru/eclipse/updates/ \r\n\r\n* Properties Editor\r\nhttp://propedit.sourceforge.jp/eclipse/updates/\r\n\r\n* SonarQube (정적분석)\r\nhttp://docs.codehaus.org/display/SONAR/SonarQube+in+Eclipse', NULL, '', 62, 0),
(839, '', '서대영', '', '2010-06-11 09:00:47', 'Weblogic', 'Weblogic WSDL 샘플', 'WebLogic Test Client 수행시켜 볼 것\r\nhttp://localhost:7001/Userinfo/Abc?WSDL\r\n\r\n\r\n-----------------------------------------------------------------------\r\n<?xml version=''1.0'' encoding=''UTF-8''?>\r\n<s0:definitions name="UserWSServiceDefinitions" targetNamespace="http://com/sds/user/ws" xmlns="" xmlns:s0="http://schemas.xmlsoap.org/wsdl/" xmlns:s1="http://com/sds/user/ws" xmlns:s2="http://schemas.xmlsoap.org/wsdl/soap/">\r\n  <s0:types>\r\n    <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://com/sds/user/ws" xmlns:xs="http://www.w3.org/2001/XMLSchema">\r\n      <xs:import namespace="java:com.sds.model"/>\r\n      <xs:element name="getUser">\r\n        <xs:complexType>\r\n          <xs:sequence>\r\n            <xs:element name="userId" type="xs:string"/>\r\n          </xs:sequence>\r\n        </xs:complexType>\r\n      </xs:element>\r\n      <xs:element name="getUserResponse">\r\n        <xs:complexType>\r\n          <xs:sequence>\r\n            <xs:element name="return" type="java:User" xmlns:java="java:com.sds.model"/>\r\n          </xs:sequence>\r\n        </xs:complexType>\r\n      </xs:element>\r\n    </xs:schema>\r\n    <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="java:com.sds.model" xmlns:xs="http://www.w3.org/2001/XMLSchema">\r\n      <xs:complexType name="User">\r\n        <xs:sequence>\r\n          <xs:element minOccurs="1" name="UserId" nillable="true" type="xs:string"/>\r\n          <xs:element minOccurs="1" name="UserNm" nillable="true" type="xs:string"/>\r\n        </xs:sequence>\r\n      </xs:complexType>\r\n    </xs:schema>\r\n  </s0:types>\r\n  <s0:message name="getUser">\r\n    <s0:part element="s1:getUser" name="parameters"/>\r\n  </s0:message>\r\n  <s0:message name="getUserResponse">\r\n    <s0:part element="s1:getUserResponse" name="parameters"/>\r\n  </s0:message>\r\n  <s0:portType name="UserWS">\r\n    <s0:operation name="getUser" parameterOrder="parameters">\r\n      <s0:input message="s1:getUser"/>\r\n      <s0:output message="s1:getUserResponse"/>\r\n    </s0:operation>\r\n  </s0:portType>\r\n  <s0:binding name="UserWSServiceSoapBinding" type="s1:UserWS">\r\n    <s2:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>\r\n    <s0:operation name="getUser">\r\n      <s2:operation soapAction="" style="document"/>\r\n      <s0:input>\r\n        <s2:body parts="parameters" use="literal"/>\r\n      </s0:input>\r\n      <s0:output>\r\n        <s2:body parts="parameters" use="literal"/>\r\n      </s0:output>\r\n    </s0:operation>\r\n  </s0:binding>\r\n  <s0:service name="UserWSService">\r\n    <s0:port binding="s1:UserWSServiceSoapBinding" name="UserWSSoapPort">\r\n      <s2:address location="http://localhost:7001/Userinfo/UserWS"/>\r\n    </s0:port>\r\n  </s0:service>\r\n</s0:definitions>', '', '', 2, 0),
(840, '', '서대영', '', '2010-06-11 10:01:42', 'Webservice', '웹서비스 WSDL 사이트', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://xmethods.com', 'http://xmethods.com', '', 1, 0),
(841, '', '서대영', '', '2010-06-11 13:14:52', 'Webservice', 'Metro Developing with Eclipse', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttps://jax-ws.dev.java.net/guide/Developing_with_Eclipse.html', 'https://jax-ws.dev.java.net/guide/Developing_with_Eclipse.html', '', 1, 0),
(842, '', '서대영', '', '2010-06-11 13:56:02', 'Webservice', 'Weblogic 웹서비스', '1) 이클립스에 Oracle Enterprise Pack 플러그인 설치\r\n\r\n2) New > Weblogic Web Webservices > Web Service Project 추가\r\n\r\n3) 일반 Service 클래스 (업무 비지니스 처리) 생성\r\n\r\n4) 그 클래스 위에 마우스 우버튼 New > Weblogic Web Service \r\n\r\n5) 생성된 Web Service 클래스의 @Method 부분을 Service 클래스를 이용하여 코딩\r\n\r\n6) Run on Server 통해 Web Service 클래스를 실행시키면 Weblogic Test Client로 실행 가능\r\n\r\n7) wsdl URL을 이용해서 클라이언트 Stub 생성 (Axs1, Asix2, Metro)', '', '', 5, 0),
(843, '', '서대영', '', '2010-06-12 01:26:31', 'Java', '자바 Enum 사용법', 'http://bluepoet.me/2012/07/18/%EB%B2%88%EC%97%AD%EC%9E%90%EB%B0%94-enum%EC%9D%98-10%EA%B0%80%EC%A7%80-%EC%98%88%EC%A0%9C/\r\n\r\n\r\nEnum 특징 및 사용법\r\n\r\nEnum 특징\r\n\r\n-         enum 키워드로 정의함\r\n\r\n-         인스턴트화 될 수 없음\r\n\r\n-         아무것도 상속받지도 상속하지도 않음\r\n\r\n-         switch문의 argument가 될 수 있음\r\n\r\n-         기본으로 (built-in된) name() 및 toString() 메서드 제공 (현재 인스턴스 이름을 반환). name()은 final이므로 override 불가. toString()은 가능.\r\n\r\n \r\n\r\nEnum 사용법\r\n\r\n-         첫번째 문장은 comma로 구분되는 구분자(identifier) 목록. 목록은 세미콜론(;)으로 끝나야 함\r\n\r\n-         enum이 로드되면(class-loaded) 각 구분자 별로 인스턴스가 하나씩 생성됨\r\n\r\n-         구분자명이 public static final 멤버변수가 되므로, LightState.GREEN과 같이 참조할 수 있음\r\n\r\n-         멤버변수, 메서드, 생 성자를 enum에 추가할 수 있음\r\n\r\n-----------------------------------------------------------------------\r\n\r\nenum Suit {\r\n\r\nDIAMOND(true), HEART(true), CLUB(false), SPADE(false);\r\n\r\n \r\n\r\nprivate boolean red;\r\n\r\n \r\n\r\nSuit(boolean b) {\r\n\r\nred = b;\r\n\r\n}\r\n\r\n \r\n\r\npublic boolean isRed() {\r\n\r\nreturn red;\r\n\r\n}\r\n\r\n \r\n\r\npublic String toString() {  // override toString()\r\n\r\nString s = name();\r\n\r\ns += red ? ":red" : ":black";\r\n\r\n      return s;\r\n\r\n   }\r\n\r\n}\r\n\r\n----------------------------------------------------------------------- \r\n\r\n \r\n\r\nFrom: SCJP & SCJD - Complete Java 2 Certification Study Guide &#8211; Sybex\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.daum.net/bellosogno/17', 'http://blog.daum.net/bellosogno/17', '', 25, 0),
(844, '', '서대영', '', '2010-06-15 23:37:47', 'Spring', '[MVC] Spring MVC 개념', '1) DispatcherServlet\r\n - Front Controller\r\n - web.xml 에 등록해야 함\r\n - 빈 설정파일은 web.xml에 등록된 이름 + -servlet.xml\r\n - 사용자는 아무 코딩도 안 함\r\n \r\n2) HandlerMapping\r\n - 요청에 따라 어떤 Controller를 사용할지 DispatcherServlet 에게 알려줌\r\n - 주로 BeanNameUrlHandlerMapping을 사용하여 servlet.xml 에 등록된 name과 컨트롤러를 맵핑\r\n\r\n3) Controller\r\n - 실질적으로 사용자 요청을 처리\r\n - 비지니스 서비스에게 작업을 위임\r\n - ModelAndView를 리턴\r\n - DispatcherServlet에서 해당 Controller에 handleRequest() 매서드를 호출\r\n\r\n4) ModelAndView\r\n - View이 논리적인 이름과 Model의 이름과 객체 맵핑\r\n\r\n5) ViewResolver\r\n - view의 논리적인 이름에 실제 페이지 경로와 확장자를 붙여줌\r\n - 주로 InternalResourceViewResolver를 사용\r\n\r\n6) View\r\n - 실제 최종 html을 그려주는 페이지\r\n - ModelAndView에서 세팅해준 model를 사용할 수 있음', '', '', 13, 0),
(845, '', '서대영', '', '2010-06-16 23:33:50', 'Java', 'UnsupportedOperationException', '인터페이스를 구현할 때 해당 매서드의 구현이 필요없을 때 사용한다.\r\n\r\n\r\npackage springapp.service;\r\n\r\nimport java.util.List;\r\n\r\nimport springapp.domain.Product;\r\n\r\npublic class SimpleProductManager implements ProductManager {\r\n\r\n    public List<Product> getProducts() {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n\r\n    public void increasePrice(int percentage) {\r\n        throw new UnsupportedOperationException();        \r\n    }\r\n\r\n    public void setProducts(List<Product> products) {\r\n        throw new UnsupportedOperationException();        \r\n    }\r\n\r\n}', '', '', 2, 0),
(846, '', '서대영', '', '2010-06-21 22:57:17', 'Java', 'Java 5의 빌트인 어노테이션을 사용하는 방법', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.ibm.com/developerworks/kr/library/j-annotate1/index.html', 'http://www.ibm.com/developerworks/kr/library/j-annotate1/index.html', '', 0, 0),
(847, '', '서대영', '', '2010-06-21 22:58:09', 'Java', '커스텀 어노테이션', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.ibm.com/developerworks/kr/library/j-annotate2.html', 'http://www.ibm.com/developerworks/kr/library/j-annotate2.html', '', 0, 0),
(848, '', '서대영', '', '2010-06-28 10:01:25', 'Java', 'finally문 안에 return문 선언', '1) fianlly문에 안에 return은 deprecated 되었기 때문에 try나 catch 문에서 return해야 한다.\r\n2) try문이나 catch문에서 return을 수행하더라도 finally문이 수행된 후에 return된다.\r\n3) tary문이나 catch문에서 return 해놓고 finally에서 또 return하면 finally의 return이 최종 적용된다.\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.cyworld.com/as_yet/3830530', 'http://www.cyworld.com/as_yet/3830530', '', 1, 0),
(849, '', '서대영', '', '2010-06-28 19:31:03', 'SQL', 'DCL 정리', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/darkelfand?Redirect=Log&logNo=90073963941', 'http://blog.naver.com/darkelfand?Redirect=Log&logNo=90073963941', '', 2, 0),
(850, '', '서대영', '', '2010-06-29 09:47:00', 'SQL', '다른 사용자에게 테이블 조회 권한 부여', 'GRANT SELECT ON login_user TO ptl_guest;\r\nptl_guest 사용자에게 login_user 테이블에 대한 조회 권한 부여\r\n\r\nGRANT SELECT ON login_auth_user TO ptl_guest;\r\n\r\n\r\n\r\n\r\n---------------------------------------------------------------\r\n\r\n자주 쓰이는 Oracle Grant(사용자 권한) 옵션 모음\r\n\r\n  \r\nGRANT CONNECTO TO mazing;\r\nGRANT RESOURCE TO mazing;\r\nGRANT CREATE VIEW TO mazing;\r\nGRANT CREATE SYNONYM TO mazing;\r\nGRANT CREATE PROCEDURE TO mazing;\r\nGRANT UNLIMITED TABLESPACE TO mazing;\r\n   ※  ALTER USER mazing QUOTA UNLIMITED ON tablespace_name;\r\nGRANT EXCUTE ON function TO mazing;\r\n\r\n-- 모든 권한..\r\nGRANT CONNECT, DBA, RESOURCE TO mazing;\r\n\r\n-- 특정 테이블에 대한..\r\nGRANT select, insert, update, delete references, alter, index ON table_name TO mazing WITH GRANT OPTION;\r\nGRANT ALL ON table_name TO mazing WITH GRANT OPTION;\r\n\r\n-- 권한 제거...\r\nREVOKE  xxxx~~', '', '', 4, 0),
(851, '', '서대영', '', '2010-07-01 14:23:55', 'Unix', 'Putty 설정', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://hajadc.tistory.com/65', 'http://hajadc.tistory.com/65', '', 0, 0),
(852, '', '서대영', '', '2010-07-02 11:24:42', 'Weblogic', '유닉스에서 Weblogc10.3 설치방법', 'WL_HOME/common/bin/config.sh\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://rajalo.tistory.com/77', 'http://rajalo.tistory.com/77', '', 3, 0),
(853, '', '서대영', '', '2010-07-06 09:29:05', 'Log4j', 'JCL (Jakarta Commons Logging)', 'http://blog.naver.com/jsy4you?Redirect=Log&logNo=40045214046\r\n\r\nhttp://blog.naver.com/tyy04?Redirect=Log&logNo=40009592662', '', '', 6, 0),
(854, '', '서대영', '', '2010-07-07 14:13:10', 'Struts', 'Weblogic에서 Struts 사용 시 주의점', 'struts-faces-1.3.10.jar 파일은 lib 에서 뺄 것!', '', '', 1, 0),
(855, '', '서대영', '', '2010-07-08 13:26:39', 'Unix', '라우팅 경로 체크', 'gspnwas2:/> traceroute 203.254.223.156\r\ntrying to get source for 203.254.223.156\r\nsource should be 106.10.1.3\r\ntraceroute to 203.254.223.156 (203.254.223.156) from 106.10.1.3 (106.10.1.3), 30\r\n hops max\r\noutgoing MTU = 1500\r\n 1  106.10.1.5 (106.10.1.5)  1 ms  0 ms  0 ms\r\n 2  106.10.14.14 (106.10.14.14)  0 ms  1 ms  0 ms\r\n 3  106.10.7.11 (106.10.7.11)  2 ms  2 ms  1 ms\r\n 4  106.30.251.2 (106.30.251.2)  2 ms  1 ms  1 ms\r\n 5  104.129.16.101 (104.129.16.101)  245 ms  245 ms  245 ms\r\n 6  104.129.16.1 (104.129.16.1)  245 ms  245 ms  245 ms\r\n 7  104.211.1.11 (104.211.1.11)  246 ms  245 ms  245 ms\r\n 8  203.254.223.156 (203.254.223.156)  246 ms  246 ms  246 ms', '', '', 6, 0),
(856, '', '서대영', '', '2010-07-12 15:55:32', 'iPlanet', 'APP 연동 방법 2가지', 'WAS 쪽에 으로 보내는 방식이 2가지가 있습니다.\r\n\r\n\r\n1. 웹 서버 쪽의 mime.types 에 정의한 후 확장자로 구분하여 보내는 방법\r\nService method="(GET|HEAD|POST|PUT)" type="text/jsp" fn="wl_proxy" WebLogicCluster="106.10.1.112:6002,106.10.1.112:6003,106.10.1.112:6004,106.10.1.3:6002,106.10.1.3:6003,106.10.1.3:6004,106.10.1.4:6002,106.10.1.4:6003,106.10.1.4:6004" ConnectTimeoutSecs=10 ConnectRetrySecs=2 DynamicServerList=OFF Idempotent=OFF KeepAliveEnabled=falseS WLIOTimeoutSecs="1800"\r\nService method="(GET|HEAD|POST|PUT)" type="text/do" fn="wl_proxy" WebLogicCluster="106.10.1.112:6002,106.10.1.112:6003,106.10.1.112:6004,106.10.1.3:6002,106.10.1.3:6003,106.10.1.3:6004,106.10.1.4:6002,106.10.1.4:6003,106.10.1.4:6004" ConnectTimeoutSecs=10 ConnectRetrySecs=2 DynamicServerList=OFF Idempotent=OFF KeepAliveEnabled=falseS WLIOTimeoutSecs="1800"\r\n\r\n이렇게 Service method 부분을 이용해서 해당 type의 확장자만 WAS쪽으로 보내게 됩니다.\r\n\r\n\r\n2. ppath를 이용해서 WAS로 보내는 방법\r\n여기서 ppath는 physical path를 의미합니다.\r\nppath="*/*" 이것은 http://url:port/*  이렇게 url 다음 오는 것은 모두 WAS로 보내라는 설정입니다.(이후에오는 html이나 이미지 jsp 모두 다 WAS로 넘어가는 것 입니다.)\r\n"*/*" 이렇게 설정할 경우 모두 다 웹로직 쪽으로 파일을 넘겨서 처리하게 됩니다.\r\n \r\n(예)ppath="*/jsppage/*"  --> http://ip:port/jsppage/  이렇게 해서 불려지는 파일은 모두 WAS쪽에서 처리 하게 됨.\r\n\r\n\r\n\r\n이것을 확장자를 넣어서 응용해서 사용하기도 하는데요..\r\nppath="*.jsp" 이런 식으로 1번처럼 Service method 를 사용하지 않고 이렇게 넣어서 사용할 수 있습니다.', '', '', 2, 0),
(857, '', '서대영', '', '2010-07-14 15:28:10', 'J2EE', 'Filter 에서 포워드 시키기', '    /**\r\n     * 페이지 이동 함수 \r\n     * @param request ServletRequest Instance\r\n     * @param response ServletResponse Instance\r\n     * @param url 이동 페이지 URL\r\n     * @throws Exception\r\n     */\r\n    private void forwardPage(ServletRequest request, ServletResponse response, String url) throws IOException, ServletException{\r\n    	ServletContext servletContext = filterConfig.getServletContext();\r\n    	RequestDispatcher reqDispatcher = null;\r\n\r\n    	reqDispatcher = servletContext.getRequestDispatcher(url);\r\n		reqDispatcher.forward(request, response);\r\n    }', '', '', 9, 0),
(858, '', '서대영', '', '2010-07-15 10:55:02', 'Eclipse', 'Project Facet 를 바꿀 수 없을  때', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/tyboss?Redirect=Log&logNo=70053511077', 'http://blog.naver.com/tyboss?Redirect=Log&logNo=70053511077', '', 0, 0),
(859, '', '서대영', '', '2010-07-16 10:07:04', 'Unix', 'topas - AIX 모니터링', '[ Disk ]\r\n * Busy% : 디스크 I/O\r\n\r\n[ MEMORY ]\r\n * Rela, MB : 총용량\r\n * % Compp + Client : 사용량\r\n\r\n[ PAGING SPACE ]\r\n * SIZE, MB : 가상 메모리를 위해 잡힌 디스크 총용량\r\n * Used : 현재 사용량', '', '', 10, 0),
(860, '', '서대영', '', '2010-07-16 10:08:09', 'SQL', 'SELECT를 이용한 INSERT', 'insert into login_auth_user(\r\nselect\r\n''0103'' as auth_id,\r\nb.login_no as login_no,\r\nb.reg_user_no as reg_user_no,\r\nb.reg_dt as reg_dt\r\nfrom login_user a\r\njoin login_auth_user b\r\non a.login_no=b.login_no\r\nwhere \r\na.login_corpname =''SEGR'' and\r\nb.auth_id=''0102''\r\n)', '', '', 12, 0),
(861, '', '서대영', '', '2010-07-16 16:59:20', 'Weblogic', '세션 타임아웃 설정', '아래 두가지 web.xml 또는 weblogic.xml 중에 한군데에만 설정해도 된다.만약 두군데 모두 정의되어있다면 우선순위는 web.xml 에게 있다.\r\n\r\n[ web.xml ]\r\n* 분 단위\r\n\r\n<session-config>\r\n  <session-timeout>30</seesion-timeout>\r\n</seesion-config>\r\n\r\n[ webloic.xml ]\r\n* 초 단위\r\n\r\n<session-descriptor>\r\n  <timeout-secs>1800</timeout-secs>\r\n</session-descriptor>\r\n\r\n\r\n[ weblogic 어드민 콘솔 ]\r\n콘솔 > 배치 > 선택 > 구성 탭 > 세션 시간 초과\r\n\r\n\r\n\r\n', '', '', 8, 0),
(862, '', '서대영', '', '2010-07-16 20:24:13', 'Swing', 'JList 와 DefaultListModel 사용', '\r\n\r\n\r\n\r\n============================== FILE ==============================\r\nIPListerListener.java|IPListerPanel.java', '', 'IPListerListener.java|IPListerPanel.java', 1, 0),
(863, '', '서대영', '', '2010-07-19 10:41:19', 'Term', 'HA(High Availability)', 'HA(High Availability)는 고가용성을 의미한다. HA와 클러스터(Cluster)라는 용어는 엄밀히 말하면 다르지만, 고가용성이라는 의미로 혼용해 사용하고 있다. 아마도 몇몇 HA 제품들의 명칭에 클러스터라는 단어가 사용되고 있기 때문일 것이다. \r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://kin.naver.com/open100/detail.nhn?d1id=1&dirId=10802&docId=173311&qb=SEEg7YG065+s7Iqk7YSw&enc=utf8&section=kin&rank=1&sort=0&spq=0&pid=gZMVAg331xosstCTRbsssv--319278&sid=TEOsc0uIQ0wAACEcFI8', 'http://kin.naver.com/open100/detail.nhn?d1id=1&dirId=10802&docId=173311&qb=SEEg7YG065+s7Iqk7YSw&enc=utf8&section=kin&rank=1&sort=0&spq=0&pid=gZMVAg331xosstCTRbsssv--319278&sid=TEOsc0uIQ0wAACEcFI8', '', 0, 0),
(864, '', '서대영', '', '2010-07-19 13:32:17', 'HTTP', 'no-cache 설정', '아래 설정을 하면 캐쉬가 모두 사라져서 캐쉬를 불러오는 뒤로가기도 방지됨 (POST에서만)\r\n만료된 페이지라고 나옴\r\n\r\n가끔 jsp페이지를 클릭했는데 \r\n삭제 하였음에도 불구하고 \r\n기존에 존재했던 데이터가 그대로 보여지는  경우가 있다 \r\n\r\n이같은 경우  기존에 가지고 있던 페이지를 그대로 보여주기 때문인데 \r\n아래내역을  JSP나 HTML에 삽입 하면 변경된 데이터를 보여주게 된다 \r\n\r\n\r\n-jsp 에서\r\n<% \r\nresponse.setHeader("Cache-Control","no-store"); // http 1.1   \r\nresponse.setHeader("Pragma","no-cache"); // http 1.0, https\r\nresponse.setDateHeader("Expires",0); // proxy server 에 cache방지.   \r\n%>\r\n\r\n-html에서\r\n<head>\r\n<meta http-equiv="Cache-Control" content="no-cache"/> \r\n<meta http-equiv="Pragma" content="no-cache"/>\r\n<meta http-equiv="Expires" content="0"/>\r\n</head>\r\n\r\n\r\n==============================================================\r\n* Expires 헤더\r\n\r\n모든 웹 서버는 모든 웹 페이지의 만료 구성을 사용하는 것이 좋다. 웹 서버가 요청 클라이언트에 반환되는 모든 리소스에 대해 HTTP Expires 응답 헤더를 통해 만료 정보를 제공하지 않는 것은 좋지 않은 구성이다. 대부분의 브라우저와 중간 프록시는 현재 이 만료 정보를 고려하고 이 정보를 이용하여 네트워크 상의 통신 효율을 향상시킨다.\r\n\r\nExpires 헤더는 항상 서버의 특정 파일을 클라이언트가 업데이트해야 할 시간을 지정하는 데 사용된다. 페이지가 정기적으로 업데이트될 때 다음 업데이트 기간이 가장 효율적인 응답이다. 인터넷에서 매일 새벽 5시에 업데이트되는 일간 뉴스 페이지를 예로 들어 보자. 이 뉴스 페이지의 웹 서버는 다음날 새벽 5시 값으로 Expires 헤더를 반환해야 한다. 이 값이 반환되면 브라우저는 페이지가 실제로 변경될 때까지 웹 서버에 다시 연결할 필요가 없다.\r\n\r\n변경될 것 같지 않은 페이지에는 대략 1년의 만료 날짜가 표시된다.\r\n\r\n많은 경우에, 웹 서버는 서버에 바로 변경될 정보가 들어 있는 휘발성 페이지를 하나 이상 가지고 있다. 이 페이지는 Expires 헤더에 대해 서버에서 값 "-1"로 표시한다. 사용자가 이후에 요청하면 Internet Explorer는 대개 조건부 If-Modified-Since 요청을 통해 해당 페이지를 업데이트하기 위해 웹 서버에 연결한다. 그러나, 해당 페이지는 디스크 캐시("임시 인터넷 파일")에 남아 있고, 뒤로와 앞으로 단추로 열어본 페이지 목록을 액세스할 경우 또는 브라우저가 오프라인 모드에 있을 경우에 원격 웹 서버에 연결하지 않고 적절한 상황에서 사용된다.\r\n \r\n\r\n* Cache-Control 헤더\r\n\r\n그러나 어떤 페이지는 휘발성이거나 제한적이어서 디스크 캐싱이 필요없다. 이를 위해 Internet Explorer는 HTTP 1.1 Cache-Control 헤더를 지원한다. 이것은 HTTP 1.1 서버가 캐시값을 지정하지 않았을 경우 특정 웹 리소스의 모든 캐싱을 방지한다.\r\n\r\n브라우저가 웹 서버에 다시 연결할 수 있을 때까지 캐시에 없는 페이지는 액세스할 수 없기 때문에 서버는 Cache-Control 헤더를 절약하여 사용해야 한다. 대부분의 경우에 "Expires: -1"을 사용하는 것이 좋다.\r\n\r\n \r\n\r\n* Pragma 헤더\r\n\r\n불행히도, 레거시 HTTP 1.0 서버는 Cache-Control 헤더를 사용할 수 없다. 이전 버전과 HTTP 1.0 서버와의 호환을 위해 Internet Explorer는 HTTP Pragma: no-cache 헤더의 특수한 사용을 지원한다. 클라이언트가 보안 연결(https://)을 통해 서버와 통신하고 서버가 응답과 함께 Pragma: no-cache 헤더를 반환하면 Internet Explorer는 응답을 캐시하지 않는다.\r\n\r\n그러나, Pragma: no-cache 헤더는 이를 위해 만들어진 것은 아니다. HTTP 1.0과 1.1 사양에 따라 이 헤더는 응답이 아니라 요청 컨텍스트에서만 정의되고 실제로 프록시 서버에 맞게 만들어져 몇몇 중요한 요청이 대상 웹 서버에 도달하지 못하도록 할 수 있다. 이후의 응용 프로그램에서는 Cache-Control 헤더가 캐싱을 제어하는 적절한 수단이 될 것이다.\r\n\r\nPragma: no-cache는 보안 연결을 통해 사용될 때만 캐싱을 방지한다. Pragma: no-cache META 태그는 비 보안 페이지에서 사용될 경우 Expires: -1과 동일하게 처리된다. 페이지는 캐싱되지만 즉시 만료되는 것으로 표시된다.\r\n\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://hompy.us/programming_study/12055', 'http://hompy.us/programming_study/12055', '', 13, 0),
(865, '', '서대영', '', '2010-07-21 14:28:40', 'jMeter', 'jMeter 간단 사용법', '[ 다운로드 ]\r\nhttp://jmeter.apache.org/download_jmeter.cgi\r\n\r\n[ 실행 ]\r\nbin/jmeterw.cmd\r\n\r\n[ 간단한 실행 순서 ]\r\n\r\n * Thread Group 추가\r\nTest Plan 우클릭 Add > Threads > Thread Group\r\n\r\n * HTTP request 추가\r\nRight click the thread group and select Add->Sampler->HTTP Request. \r\n\r\n * View Results 추가\r\nRight click the Thread Group and select Add->Listener->View Results in Table.\r\n\r\n * Test 실행\r\nSelect Run from top-level menu and then select Start.\r\n\r\n[ Sampler ]\r\n * HTTP Request : 하나의 요청을 의미함\r\n\r\n[ Config Element ]\r\n몇가지 Config Element 를 추가해놓으면 모든 Sampler 에가 편리하게 적용할 수 있다.\r\n * HTTP Request Defaults\r\n  : URL/IP 일괄 적용\r\nRight click the Thread Group, and select Add->Config Element->HTTP Request Defaults. \r\n * HTTP Cookie Manager\r\n\r\n[ Assertion ]\r\n * Response Assertion\r\n  : 리턴 코드가 200 인지 아닌지 검증\r\n\r\n[ Listener ]\r\n * Response 결과를 보여줌\r\n * View Results in Table\r\n * View Results Tree\r\n * Graph Results\r\n\r\n\r\n\r\n------------------------------------\r\nWorkBench 에 Proxy Server 를 추가하며\r\n브라우져의 요청을 캡쳐해서 Test Case 로 만들 수 있는 놀라운 기능이 있다.\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://jnylove.tistory.com/316', 'http://jnylove.tistory.com/316', '', 22, 0),
(866, '', '서대영', '', '2010-07-30 20:33:13', 'Security', '로그인시만 SSL 적용방법', '1. 클릭시 스크립트로 https로 submit (post)\r\n \r\n2. 로그인 체크, refer url값 획득\r\n \r\n3. http로 redirect, return url및 세션정보 제공\r\n \r\n4. http 로그인 요청페이지에서 로그인상태로 view', '', '', 0, 0),
(867, '', '서대영', '', '2010-07-30 20:57:40', 'Security', 'http VS https 뭐가 다른가?', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/turbo1117?Redirect=Log&logNo=30057782405', 'http://blog.naver.com/turbo1117?Redirect=Log&logNo=30057782405', '', 2, 0),
(868, '', '서대영', '', '2010-07-31 20:41:06', 'Browser', 'https 와 http 혼합 페이지에서 확인 메세지 안 뜨기', '도구 > 인터넷 옵션 > 보안탭\r\n\r\n"혼합된 컨텐츠 표시" 사용', '', '', 1, 0),
(869, '', '서대영', '', '2010-08-03 10:52:15', 'Unix', 'set filec 자동 채우기 설정', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/beahey?Redirect=Log&logNo=90087913925', 'http://blog.naver.com/beahey?Redirect=Log&logNo=90087913925', '', 2, 0),
(870, '', '서대영', '', '2010-08-04 14:16:01', 'jMeter', 'jMeter를 사용한 Stress Test 방법', '1)\r\nhttp://blog.naver.com/jmhan92?Redirect=Log&logNo=140053308548\r\n\r\n2)\r\nhttp://blog.naver.com/jmhan92?Redirect=Log&logNo=140053308567\r\n\r\n3)\r\nhttp://blog.naver.com/jmhan92?Redirect=Log&logNo=140053308590', '', '', 13, 0),
(871, '', '서대영', '', '2010-08-04 18:12:35', 'Unix', 'NAS vs NFS', '보통 마운트라는 용어를 사용\r\n\r\nNAS(Network Added Storage) : 한 Disk를 여러 Unix 서버에게 공유 시켜 줌\r\n\r\nNFS(Network File System) : 한 Unix 서버가 다른 Unix 서버에게 디스크 공유시켜줌', '', '', 3, 0),
(872, '', '서대영', '', '2010-08-05 12:57:18', 'Weblogic', 'Thread, Heap Dump 보관장소', '/bea/domains/`서비스네임`Domain/javacore.yyyymmdd.HHMMSS.pid.txt\r\n/bea/domains/`서비스네임`Domain/heapdump.yyyymmdd. HHMMSS.pid.txt\r\n', '', '', 3, 0),
(873, '', '서대영', '', '2010-08-13 09:25:39', 'Explorer', '현재의 웹 페이지에서 신뢰할 수 있는 사이트 목록에 포함되어 있는 사이트를 열려고 합니다. 해당 사이트를 열도록 허용하시겠습니까?', '1) 인터넷 옵션 > 보안 탭 > 신뢰할 수 있는 사이트 선택\r\n\r\n : 아래 바를 움직여 "보통"의 보안 수준을 적용\r\n\r\n2) 사용자 지정 수준 버튼 클릭\r\n\r\n : "낮은 권한의 웹 콘텐츠 영역에 있는 웹 사이트에서 이 영역을 탐색" 옵션을 "사용" 으로 설정\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://wintip.tistory.com/35', 'http://wintip.tistory.com/35', '', 0, 0),
(874, '', '서대영', '', '2010-08-15 11:53:11', 'Servlet', '초기화 파라미터 (컨텍스트 VS 서블릿) ★', '[ 컨텍스트 초기화 파라미터 ]\r\n* DD 정의\r\n----------------------------------------------------------\r\n<web-app>\r\n  <context-param>\r\n    <param-name>name</param-name>\r\n    <param-value>value</param-value>\r\n  </context-param>\r\n</web-app>\r\n----------------------------------------------------------\r\n* 호출\r\nServletContext application = getServletContext();\r\napplication.getInitParameter("name");\r\n\r\n[ 서블릿 초기화 파라미터 ]\r\n* DD 정의\r\n----------------------------------------------------------\r\n<web-app>\r\n  <servlet>\r\n    <servlet-name></servlet-name>\r\n    <servlet-class></servlet-class>\r\n    <init-param>\r\n      <param-name>name</param-name>\r\n      <param-value>value</param-value>\r\n    </init-param>\r\n  </servlet>\r\n</web-app>\r\n----------------------------------------------------------\r\n* 호출\r\nServletConfig config = getServletConfig();\r\nconfig.getInitParameter("name");', '', '', 4, 0),
(875, '', '서대영', '', '2010-08-15 12:20:19', 'Servlet', 'ServletContext 인터페이스', '웹 어플리케이션마다 오직 하나의 ServletContext 객체 존재\r\ngetServletContext() 매서드를 통해 호출\r\n\r\n[ 주요 메서드 ]\r\ngetInitParameterNames()\r\ngetInitParameter(String)\r\n\r\ngetAttributeNames()\r\ngetAttribute(String)\r\nsetAttribute(String, Object)\r\nremoveAttribute(String)\r\n\r\ngetRequestDispathcer(String)\r\n\r\ngetResourceAsStream(String)\r\n', '', '', 2, 0),
(876, '', '서대영', '', '2010-08-15 13:07:43', 'Java', '현재 시각 구하기', 'DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");\r\n\r\nString dateText = dateFormat.format(new Date());\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://docs.oracle.com/javase/6/docs/api/java/text/SimpleDateFormat.html', 'http://docs.oracle.com/javase/6/docs/api/java/text/SimpleDateFormat.html', '', 7, 0),
(877, '', '서대영', '', '2010-08-15 13:16:32', 'Servlet', 'ServletContextListener 인터페이스', '[ DD등록 ]\r\n<web-app>\r\n	<listener>\r\n		<listener-class>dale.servlet.listener.DaleContextListener</listener-class>\r\n	</listener>\r\n</web-app>\r\n\r\n[ 구현 ]\r\npublic class DaleContextListener implements ServletContextListener {\r\n\r\n  public void contextInitialized(ServletContextEvent event) {\r\n    System.out.println("WebApp Start");\r\n  }\r\n\r\n  public void contextInitialized(ServletContextEvent event) {\r\n    System.out.println("WebApp End");\r\n  }\r\n\r\n}', '', '', 2, 0),
(878, '', '서대영', '', '2010-08-15 15:56:44', 'Servlet', 'RequestDispathcer를 얻을 때 주의점', '1) request에서 얻는게 낫군 !\r\n\r\n// 컨텍스트에서 얻는 경우 절대경로만 사용해야함\r\nRequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/view.jsp");\r\n\r\n// Request에서 얻는 경우 상대경로도 사용 가능\r\nRequestDispatcher dispatcher = request.getRequestDispatcher("view.jsp");\r\n\r\ndispatcher.forward(request, response);\r\n\r\n2) flush() 후 Forward() 할 수 없다\r\n\r\nIllegalStateException을 발생시킴\r\n\r\n------------------------------------------------------------\r\nOutputStream os = response.getOutputStream();\r\nos.flush()\r\n\r\nRequestDispatcher dispatcher = request.getRequestDispatcher("view.jsp");\r\ndispatcher.forward(request, response);', '', '', 10, 0),
(879, '', '서대영', '', '2010-08-15 21:05:58', 'Servlet', 'HttpSession 메커니즘 ★', '응답의 Set-Cookie에 의해 요청의 Cookie 헤더가 한 번 정해지면 다음 Set-Cookie를 보낼 때 까지 계속 그 Cookie를 요청에 실어보낸다 (getSession을 하던 말던)\r\n\r\n[ 세션 얻기 ]\r\n\r\n1) request.getSession();\r\n\r\n요청 Cookie 해더에 세션ID(디폴트 : JSESSIONID)를 보내지 않았거나 컨테이너에 일치하는 세션ID가 없으면, 컨테이너는 새 세션을 생성하여 리턴하고 응답 Set-Cookie 해더에 그 세션의 ID를 보낸다.\r\n그 다음 요청부터는 컨테이너로 부터 받은 세션ID를 던져서 일치하는 세션을 얻는다.\r\n\r\nsession.isNew() 를 통해 새 세션인지 여부를판단\r\n\r\n2) request.getSession(false);\r\n\r\n일치하는 세션ID가 없으면 세 세션을 생성하지 않고 null을 리턴한다.\r\n\r\nsession == null 를 통해 세션을 얻었는지 판단', '', '', 17, 0),
(880, '', '서대영', '', '2010-08-15 21:23:23', 'Servlet', 'HttpSession 인터페이스 ★', '- 속성 등록 : session.setAttribute(String name, Object value);\r\n- 속성 호출 : Object value = (Object)session.getAttribute(String name);\r\n- 속성 삭제 : session.removeAttribute("test");\r\n- 세션 소멸 : session.invalidate();\r\n\r\n- setMaxInactiveInterval(int); 세션 유효 기간 (s) 설정\r\n- getMaxInactiveInterval(int); 세션 유효 기간 (s) 호출\r\n\r\n- getCreationTime(); 세션 생성 시각 (ms)\r\n- getLastAccessedTime(); 세션 최근 접근 시각 (ms)', '', '', 9, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(1118, '', '서대영', '', '2012-06-21 10:12:11', 'Weblogic', 'weblogic.xml', '[ JSP precomfile ]\r\n    <wls:jsp-descriptor>\r\n        <wls:precompile>true</wls:precompile> // 프리 컴파일 여부\r\n        <wls:precompile-continue>true</wls:precompile-continue> // 프리 컴파일 도중 에러가 나더라도 서버 구동을 계속 진행할지 여부\r\n    </wls:jsp-descriptor>\r\n\r\n\r\n[ Container Descriptor ]\r\n    <wls:container-descriptor>\r\n    	<wls:prefer-web-inf-classes>true</wls:prefer-web-inf-classes>\r\n - bea/module 과 WEB-INF/lib 의 라이브러리가 충돌날 때 사용한다. (e.g. comons-lang)\r\nhttp://joke00.tistory.com/251', '', '', 5, 0),
(882, '', '서대영', '', '2010-08-15 23:17:16', 'Servlet', 'javax.servlet.http.Cookie 인터페이스 ★', '쿠키는 응답에 등록하고 요청에서 호출\r\n루프를 돌려야 원하는 쿠키를 얻을 수 있음\r\n\r\n* API : interface javax.servlet.http.Cookie\r\n* 쿠키 생성 : Cookie cookie = new Cookie(name, value);\r\n* 만료 설정 (초) : cookie.setMaxAge(expiry);\r\n* 응답에 쿠키 등록 : response.addCookie(cookie);\r\n - 응답 Set-Cookie 헤더에 name=value 로 추가\r\n* 요청으로부터 쿠기 호출 : Cookie[] cookies = request.getCookies();\r\ncookies[i].getName(); \r\ncookies[i].getValue();', '', '', 1, 0),
(883, '', '서대영', '', '2010-08-15 23:21:41', 'Servlet', 'HttpSession이 소멸되는 경우', 'invalidate()를 호출당했을 때\r\n타임아웃\r\n컨테이너 정지', '', '', 2, 0),
(885, '', '서대영', '', '2010-08-18 09:30:08', 'Unix', 'OS 버전 확인', '제일 위에 것이 최신으로 fix\r\n\r\n<gspn:wasadm_g[2]/home/wasadm_g>oslevel -qs\r\n알려진 서비스 팩\r\n-------------------\r\n6100-06-04-1112\r\n6100-06-03-1048\r\n6100-06-02-1044', '', '', 7, 0),
(886, '', '서대영', '', '2010-08-19 13:10:24', 'Weblogic', '세션이 너무 일찍 끊어질 때', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/sugyoo/20058367583', 'http://blog.naver.com/sugyoo/20058367583', '', 2, 0),
(887, '', '서대영', '', '2010-08-19 17:00:49', 'Weblogic', '세션 클러스터링에 대해', '클라이언트가 WAS에 세션을 요청하게 되면 WAS는 세션을 생성하고 세션ID를 응답해준다.\r\n이 세션ID에는 클라이언트와 WAS 정보가 들어있어서 웹서버가 여러 개의 WAS 인스턴스 중에서 항상 클라이언트가 보낸 세션ID를 갖고있는 WAS서버로 보내준다.\r\n하지만 만약 그 WAS 인스턴스 문제가 생겼을 경우 웹서버는 다른 WAS 인스턴스로 보내게 되고 다른 WAS는 자신의 세션ID를 먼저 체크하고 없으면 클러스터링 내의 다른 WAS 인스턴스들에게 이 세션ID를 가지고 있냐고 물어봐서 그 세션을 넘겨받게 된다.', '', '', 1, 0),
(888, '', '서대영', '', '2010-08-21 23:21:50', 'JSTL', 'EL 내장 객체 ★', '* page > request > session > application 순으로 속성 검색\r\n${name} \r\n\r\n\r\n[ Attribute 관련 ]\r\n* pageScope\r\n${pageScope.name} : <%= pageContext.getAttribute("name", PageContext.PAGE_SCOPE) %>\r\n\r\n* requestScope\r\n${requestScope.list} : <%= request.getAttribute("list") %>\r\n\r\n* sessionScope\r\n${sessionScope.user} : <%= session.getAttribute("user") %>\r\n\r\n* applicationScope\r\n${sessionScope.email} : <%= application.getAttribute("email") %>\r\n\r\n\r\n[ Parameter 관련 ]\r\n* param\r\n${param.id} : <%= request.getParamter("id") %>\r\n\r\n* paramValue\r\n${paramValues.hobby[1]} : <%= request.getParameterValues("hobby")[1] %>\r\n\r\n\r\n[ Header 관련 ]\r\n\r\n* header\r\n${header.host} : <%= request.getHeader("host") %>\r\n\r\n* headerValues\r\n\r\n* cookie\r\n${header.JSESSIONID.value} :\r\n-------------------------------------------\r\n<% Cookie[] cookies = request.getCookies();\r\nfor (int i = 0; i < cookies.length; i++) {\r\n  if ((cookies[i].getName()).equals("JSESSIONID")) {\r\n    out.println(cookies[i].getValue());\r\n  }\r\n}\r\n-------------------------------------------\r\n\r\n[ 컨텍스트 초기화 파라미터 ]\r\n* initParam\r\n${inintParam.email} : <%= application.getInitParameter("email") %>\r\n\r\n\r\n[ ServletContext ]\r\n* pageContext : 유일하게 맵이 아님\r\n${pageContext.request.method} : <%= request.getMethod() %>\r\n : http 매서드 출력\r\n${pageContext.request.contextPath} " <%= request.getContextPath() %>\r\n : 컨텍스트 패스 출력 (css, js 경로 앞에 붙임)\r\n${pageContext.request.requestURI}\r\n : 컨텍스트 패스 부터 나옴\r\n${pageContext.request.requestURL}\r\n : 프로토콜 부터 풀로 주소가 나옴', '', '', 50, 0),
(889, '', '서대영', '', '2010-08-21 23:27:25', 'JSTL', 'EL 도트/대괄호 연산자 ★', '배열과 리스트에서만 대괄호 연산자를 쓰면 좋겠군.\r\n\r\n[ 도트 연산자 . ]\r\n* 도트 연산자의 왼쪽은 반드시 맵 또는 빈\r\n* 도트 연산자의 오른쪽은 반드시 맵의 키 또는 빈의 프로퍼티\r\n\r\n[ 대괄호 연산자 [] ]\r\n* 대괄호 연산자의 왼쪽은 맵, 빈, 배열, 리스트\r\n* 대괄호 연산자의 오른쪽이 ""로 묶여 있으면 맵의 키, 빈의 프로퍼티, 벼열과 리스트의 인덱스\r\n* 대괄호 연산자의 오른쪽이 ""로 묶여 있지 않으면 또 다른 EL', '', '', 11, 0),
(891, '', '서대영', '', '2010-08-22 22:52:30', 'Servlet', '[DD] Servlet', '[ 서블릿 실제 경로 ]\r\n\r\n<servlet>\r\n  <servlet-name>action</servlet-name>\r\n  <servlet-class>com.sds.fw.mvc.ActionServlet</servlet-class>\r\n  or\r\n  <jsp-file>/test.jsp</jsp-file>\r\n  <init-param>\r\n    <param-name>email</param-name>\r\n    <param-value>dale.seo@gmail.com</param-value>\r\n  </init-param>\r\n</servlet>\r\n\r\n[ 서블릿 url 패턴 맵핑 ]\r\n\r\n<servlet-mapping>\r\n        <servlet-name>servletName</servlet-name>\r\n        <url-pattern>servletURL</url-pattern>\r\n</servlet-mapping>\r\n\r\n* 디렉토리만 일치\r\n<url-pattern>/test/*</url-pattern>\r\n* 확장자만 일치\r\n<url-pattern>*.do</url-pattern>', '', '', 1, 0),
(890, '', '서대영', '', '2010-08-22 17:28:24', 'Servlet', '[DD] Filter', '[ 필터 정의 ]\r\n<filter>\r\n  <filter-name>BasicFilter</filter-name>\r\n  <filter-class>com.gspn.BaisicFilter</filter-class>\r\n  <init-param>\r\n    <param-name>extention</param-name>\r\n    <param-value>exe</param-value>\r\n  </init-param>\r\n</filter>\r\n\r\n[ 필터 매핑 ]\r\n<fiter-mapping>\r\n  <filter-name>BasicFilter</filter-name>\r\n  <url-pattern>*.do</url-pattern>\r\n  또는\r\n  <servlet-name>AdviceServlet</servlet-name>\r\n  <dispatcher>REQUEST/INCLUDE/FORWARD/ERROR</dispather>\r\n</filter-mapping>\r\n\r\n※ URL 패턴이 서블릿 이름보다 우선\r\n\r\n<dispatcher>FORWARD</dispatcher> : 다른 서블릿에서 포워드 당했을 때만 필터링', '', '', 11, 0),
(892, '', '서대영', '', '2010-08-23 21:33:53', 'Servlet', '[Session] 중복 로긴 방지', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/korekiss?Redirect=Log&logNo=20038228350', 'http://blog.naver.com/korekiss?Redirect=Log&logNo=20038228350', '', 2, 0),
(893, '', '서대영', '', '2010-08-24 23:14:06', 'Servlet', '[MVC] 컨트롤러의 주요임무', '1) 요청 파라미터를 읽고 다루는 작업 (폼 검증)\r\n\r\n2) 모델을 호출하는 작업 (비지니스 로직)\r\n\r\n3) 뷰로 디스패치하는 작업', '', '', 1, 0),
(894, '', '서대영', '', '2010-08-26 13:10:50', 'JSP', '[액션태그] include 를 이용해 title 설정', '[ header.jsp ]\r\n<tilte>${param.pageTitle}</title>\r\n\r\n[ welcome.jsp ]\r\n<jsp:include page=''/WEB-INF/jsp/header.jsp''>\r\n  <jsp:param name=''pageTitle'' value=''Welcome Page'' />\r\n</jsp:include>', '', '', 2, 0),
(895, '', '서대영', '', '2010-08-27 17:41:10', 'Servlet', '[Listener] HttpSessionBindingListener와 HttpSessionAttributeListener', 'HttpSessionAttributeListener는 세션에 어떤 속성이 추가, 제거, 수정되는 이벤트가 발생하는지 알고 싶을 때 사용한다. 반면에 HttpSessionBindingListener는 자신이 세션에 속성으로 추가되었는지, 제거 되었는지 알기 위하여 사용한다.\r\n\r\n\r\npackage com.example;\r\n\r\nimport javax.servlet.http.HttpSessionBindingEvent;\r\nimport javax.servlet.http.HttpSessionBindingListener;\r\n\r\npublic class Dog implements HttpSessionBindingListener {\r\n    private String breed;\r\n    \r\n    public Dog(String breed) {\r\n        this.breed = breed;\r\n    }\r\n    \r\n    public String getBreed() {\r\n        return breed;\r\n    }\r\n\r\n    @Override\r\n    public void valueBound(HttpSessionBindingEvent arg0) {\r\n        // TODO Auto-generated method stub\r\n        \r\n    }\r\n\r\n    @Override\r\n    public void valueUnbound(HttpSessionBindingEvent arg0) {\r\n        // TODO Auto-generated method stub\r\n        \r\n    }\r\n}\r\n\r\n\r\nvalueBound는 세션에 추가 되었을 때 실행되는 메소드이며, valueUnbound는 세션에서 제거 되었을 때 실행되는 메소드이다.\r\nDog 객체가 세션에 추가 되거나 제거 될 때를 위와 같이 구성하게 되면 알 수 있게 된다.\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.4te.co.kr/549', 'http://www.4te.co.kr/549', '', 1, 0),
(896, '', '서대영', '', '2010-08-29 12:16:35', 'Spring', '[DI] Spring DI 개념 (종속객체 주입 / dependency injection)', '객체가 스스로 종속객체를 획득하는 것이 아니라, (new 연산자, JNDI, lookup)\r\n다른 방법에 의해 객체에 종속객체가 부여되는 것을 의미.\r\n\r\n객체간의 느슨한 결합을 만들 수 있어서 훨씬 유연하게 프로그래밍 할 수 있다.\r\n\r\n스프링 컨테이너에서는 xml 파일을 통해 DI를 제공한다.', '', '', 6, 0),
(898, '', '서대영', '', '2010-08-29 15:10:40', 'Spring', '[DI] Spring DI 문법', '<?xml version="1.0" encoding="UTF-8"?>\r\n<beans xmlns="http://www.springframework.org/schema/beans"\r\n	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\r\n	xsi:schemaLocation="http://www.springframework.org/schema/beans \r\n    http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">\r\n\r\n	<bean id="hank" class="springinaction.chapter02.idol.OneManBand">\r\n		<property name="instruments">\r\n			<list>\r\n				<ref bean="piano" />\r\n				<ref bean="saxophone" />\r\n			</list>\r\n		</property>\r\n	</bean>\r\n\r\n	<bean id="kenny" class="springinaction.chapter02.idol.Instrumentalist">\r\n		<property name="song" value="Jingle Bells" />\r\n		<property name="instrument">\r\n			<bean class="springinaction.chapter02.idol.SaxoPhone" />\r\n		</property>\r\n	</bean>\r\n\r\n	<bean id="piano" class="springinaction.chapter02.idol.Piano" />\r\n\r\n	<bean id="saxophone" class="springinaction.chapter02.idol.SaxoPhone" />\r\n\r\n	<bean id="duke" class="springinaction.chapter02.idol.PoeticJuggler">\r\n		<constructor-arg value="15" />\r\n		<constructor-arg ref="sonnet29" />\r\n	</bean>\r\n\r\n	<bean id="sonnet29" class="springinaction.chapter02.idol.Sonnet29" />\r\n\r\n</beans>', '', '', 8, 0),
(897, '', '서대영', '', '2010-08-29 12:42:09', 'Spring', '[DI] Spring DI 방법', '[ 스프링 컨테이너 구현체 ]\r\n1) 빈팩토리\r\nBeanFactory factory = new XmlBeanFactory(new FileSystemResource("c:/beans.xml));\r\n\r\n2) 애플리케이션 컨텍스트 ★ (빈팩토리 + 국제화 + 프리로딩)\r\nApplicationContext ctx = new ClassPathXmlApplicationContext("springinaction/chapter02/idol/spring-idol.xml");\r\n\r\n[ 빈 객체 얻기 ]\r\nPerformer performer = (Performer) ctx.getBean("kenny");\r\n\r\n[ 객체 주입 방법 ]\r\n1) 생성자 주입 : constructor-arg 태그 사용\r\n	<bean id="duke" class="springinaction.chapter02.idol.PoeticJuggler">\r\n		<constructor-arg value="15" />\r\n		<constructor-arg ref="sonnet29" />\r\n	</bean>\r\n	\r\n	<bean id="sonnet29" class="springinaction.chapter02.idol.Sonnet29" />\r\n\r\n2) 세터 주입 ★ : property 태그 사용\r\n    <bean id="kenny" class="springinaction.chapter02.idol.Instrumentalist">\r\n    	<property name="song" value="Jingle Bells" />\r\n    	<property name="instrument" ref="piano" />\r\n    </bean>\r\n    \r\n    <bean id="piano" class="springinaction.chapter02.idol.Piano" />\r\n\r\n----------------------------------------------------------------------\r\n\r\n아래처럼 속성으로 지정해줄 수도 있음\r\n<?xml version="1.0" encoding="UTF-8"?>\r\n<beans xmlns="http://www.springframework.org/schema/beans"\r\n	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\r\n	xmlns:p="http://www.springframework.org/schema/p"\r\n	xsi:schemaLocation="\r\n		http://www.springframework.org/schema/beans	\r\n		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">\r\n    \r\n    <!-- declare "person" bean and inject "address" bean -->\r\n    <bean id="person" class="com.javapassion.examples.Person"\r\n          p:address-ref="address"/>\r\n    \r\n    <!-- injected object -->\r\n    <bean id="address" class="com.javapassion.examples.Address"/>\r\n    \r\n</beans>', '', '', 35, 0),
(899, '', '서대영', '', '2010-08-29 20:37:53', 'Spring', '[AOP] AOP 개념', 'AOP : Aspect-oriented Programming\r\n비지니스 로직으로 부터 횡단 괌심사를 모듈화하여 분리하기 위함\r\n횡단관심사와 이에 영향받는 객체 간의 결합도를 떨어뜨림\r\n\r\n횡단관심사 : cross-cutting concerns\r\n로깅, 보안, 트랜잭션, 캐싱\r\n\r\n애스펙트 : Aspect\r\n여러 객체에 걸치는 횡단관심사를 모듈화한다\r\n\r\n용도: 로깅, 익셉션 처리, 프로파일링\r\n\r\n1) Advice\r\n애플리케이션의 여러 객체에 적용해야할 공통동작\r\n\r\n2) Pointcut\r\n어디에 어드바이스가 적용돼야 하는지...', '', '', 4, 0),
(900, '', '서대영', '', '2010-08-29 21:25:38', 'Spring', '[AOP] AOP 설정', '다음과 같이 XML 파일에 Aspect를 등록한다.\r\n\r\n	<aop:config>\r\n		<aop:aspect ref="audience">\r\n			<aop:pointcut id="performance" expression="execution(* *.perform(..))" />\r\n			<aop:before method="takeSeats" pointcut-ref="performance" />\r\n			<aop:before method="turnOffCellPhones" pointcut-ref="performance" />\r\n			<aop:after-returning method="applaud"\r\n				pointcut-ref="performance" />\r\n			<aop:after-throwing method="demandRefund"\r\n				pointcut-ref="performance" />\r\n		</aop:aspect>\r\n	</aop:config>\r\n\r\n	<bean id="audience" class="springinaction.chapter04.Audience" />\r\n', '', '', 4, 0),
(901, '', '서대영', '', '2010-08-30 17:32:50', 'Weblogic', '클러스터링 환경에서 컨텍스트, 세션 객체 관련', '질문 1. 컨텍스트 객체는 각 WAS 인스턴스의 메모리에 생성되나요?\r\n\r\n예를 들어, 8개의 WAS 인스턴스가 있다면 8개의 컨텍스트 객체가 각각 생성되나요?\r\n\r\n만약 그렇다면 클러스터링 환경에서 8개의 WAS가 컨텍스트 객체의 내용을 어떻게 관리되는지 알고 싶습니다.\r\n\r\n(서로 공유하는지, 따로 관리하는지...)\r\n\r\n&agrave; 따로 생성됩니다. 공유되지 않습니다.\r\n\r\n \r\n\r\n질문 2. 세션에 대해서도 컨텍스트와 동일한 질문입니다. \r\n\r\n인스턴스 마다 각자 메모리에 각자 생성되는지 그리고 어떻게 관리되고 공유되는지 알려주세요.\r\n\r\n&agrave; 따로 생성됩니다. 하지만Secondary 서버로만 복제 됩니다.\r\n\r\n \r\n\r\n개인적인 생각으로는.. 중복로그인 방지 솔루션을 도입하시는 것이 좋을 것 같습니다..\r\n\r\n저희 회사제품 중에 GTWorks 라는 제품이 있습니다. 관련 브로셔가 있는데.. 찾아보고 보내드릴께요..\r\n\r\n \r\n\r\n수고하세요.\r\n', '', '', 2, 0),
(902, '', '서대영', '', '2010-09-01 14:31:57', 'Servlet', '브라우저 세션 원리 ★', 'URL을 입력하면 브라우져는 PC에 저장된 ', '', '', 2, 0),
(903, '', '서대영', '', '2010-09-15 18:00:51', 'Commons', 'public static String trimToEmpty(String str)', 'String의 trim()을 쓰면 NullPointerException이 나는데,\r\n그 걸 방지해주고, null이면 빈문자열을 리턴한다.', '', '', 0, 0),
(904, '', '서대영', '', '2010-09-20 15:48:01', 'JCo', 'JCo 관련 링크', 'SAP 에 접속하는 외부 프로그램을 짤려면 반드시 써야 하는게 SAP Java Connector 입니다.\r\n이 위에 올라간 여러가지 형태의 Connector 들이 있는데, 그 최저 기반은 SAP Java Connector 입니다.\r\n이놈이 2009년 들어 v2 에서 v3 로 바뀌었습니다. J2EE 쪽 JCA 규격에 맞게 JCO를 한번 감싸서 만든 JRA라는 놈도 등장합니다.\r\nSAP Web Application Server 에 바로 붙을 수 있도록 SAP Business Connector라는 놈도 있고, .NET에서 사용할 수 있는 .NET Connector도 있게 됩니다.\r\n\r\nSAP Java Connector 나 SAP .NET Connector를 보면 결론적으로 RFC SDK 를 호출하게 되어 있습니다.\r\nSAP에 외부 프로그램으로 연결하려면 이러한 SAP 전반의 연결기술을 살펴볼 필요가 있습니다.\r\n\r\nComponents of SAP Communication Technology \r\nhttp://help.sap.com/saphelp_nw70ehp1/helpdata/en/b4/3f9e64bff38c4f9a19635f57eb4248/frameset.htm\r\n... SAP 연결을 위한 여러가지 기술들을 정리됨. C/C++로 직접 SAP에 연결하려면 RFC SDK를 사용해야 함.\r\n\r\nHow can I down SAP RFC SDK?\r\nhttps://forums.sdn.sap.com/thread.jspa?threadID=950318\r\n... Netweaver(이하 NW. SAP ECC 6.0 또는 R3 4.7 이후 웹프레임워크가 포함된 버전)와 SAP R3 (SAP 4.6 이전, C/S 버전)용 두가기가 있습니다.\r\n--\r\nSAP NetWeaver RFC SDK (SAP note 1025361):\r\nhttp://service.sap.com/swdc\r\n-> Download\r\n-> Support Packages and Patches\r\n-> Entry by Application Group\r\n-> Additional Components\r\n-> SAP NW RFC SDK\r\n-> SAP NW RFC SDK 7.10\r\n-> SAP NW RFC SDK 7.10\r\n\r\nSAP RFC SDK:\r\nhttp://service.sap.com/swdc\r\n-> Download\r\n-> Support Packages and Patches\r\n-> Entry by Application Group\r\n-> Additional Components\r\n-> SAP RFC SDK UNICODE\r\n\r\nDifference between SAP JCo3 and JCo 2  \r\nhttp://forums.sdn.sap.com/thread.jspa?threadID=1516816&tstart=0\r\n\r\nSAP Java Connector 3\r\nhttp://help.sap.com/saphelp_nwpi711/helpdata/en/48/707c54872c1b5ae10000000a42189c/frameset.htm\r\n\r\nThe SAP Java Connector (SAP JCo) is a middleware component that enables the development of SAP-compatible components and applications in Java. SAP JCo supports communication with the SAP Server in both directions: inbound (Java calls ABAP) and outbound calls (ABAP calls Java).\r\n\r\nSAP JCo can be implemented with Desktop applications and with Web server applications.\r\n\r\nSAP JCo is used as an integrated component in the following applications:\r\n\r\n&#8226;SAP Business Connector, for communication with external Java applications\r\n\r\n&#8226;Application Server, for connecting the integrated Java EE server with the ABAP environment.\r\n\r\nSAP JCo can also be implemented as a standalone component, for example to establish communication with the SAP system for individual online (web) applications.\r\n\r\n\r\n\r\n\r\n\r\nSAP JCO 3 Example by Vogell\r\nhttp://www.vogella.de/articles/SAPJCo/article.html\r\n\r\n\r\n\r\nBAPI and JCO\r\n\r\nhttp://www.scribd.com/doc/6769667/BAPI-JCO\r\n\r\n... SAP의 BAPI와 JCO에 대한 기술 세미나 자료. \r\n\r\n\r\nTomcat 에서 JCO를 이용해 BAPI를 호출하는 방법을 설명함.\r\n\r\n\r\n\r\n\r\nRFC Connector (3rd Party SAP RFC Connector, 독일)\r\n\r\n\r\nhttp://rfcconnector.com/\r\n\r\nHIBERSAP\r\nhttp://hibersap.sourceforge.net/\r\n\r\nHibersap is a small framework that offers an abstraction layer on top of the SAP Java Connector (JCo). It maps Java classes to SAP function modules using Java Annotations and reduces the technical code to call a function in a SAP back-end system to a minimum. Hibersap''s API is very similar to Hibernate, thus offering a familiar programming interface to developers.\r\n\r\n\r\nSAP Transport for Mule 2\r\nhttp://www.mulesoft.org/display/SAPCPAL/Home\r\n\r\nThe SAP Transport for Mule 2 allows to communicate SAP ERP Systems. You can send a XML message that is equivalent to a BAPI function request and receive a XML message that is equivalent to a BAPI function response. The SAP Transport uses SAP JCo library to invoke SAP BAPI funciton.\r\n\r\n\r\nSAP JCO Connector for Macinoths\r\nhttp://fuller.mit.edu/spring/jco_install.html\r\n... JCO 2.18 기준이므로 JCO 3 유저는 참고해서 설정을 바꾸어 볼 것.\r\n\r\nSAP JCO 리눅스 환경세팅 문제\r\nhttp://www.okjsp.pe.kr/seq/125449\r\n\r\n\r\nJCO 접속오류 유형별 해결책\r\nhttp://www.pobiz.net:8080/tnd/tnd-view.do?tnd_id=84&menu_top=home&menu_cate_id=0&menu_group_id=0&tnd_menu_type=ntnd&tnd_menu_date=0&tnd_menu_value=&tnd_menu_file_yn=&user_id=\r\n\r\n\r\nSAP JCO는 퍼블릭하게 다운로드가 제공되지 않습니다.\r\nSAP 를 사용하는 고객사, 파트너에게만 제공됩니다.\r\n\r\n[출처] SAP JCO3 (멀티즘연합-디렉터) |작성자 버그픽스\r\n', '', '', 4, 0),
(905, '', '서대영', '', '2010-09-20 15:49:10', 'JCo', 'JCo 공식 매뉴얼', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://help.sap.com/saphelp_nwpi711/helpdata/en/48/707c54872c1b5ae10000000a42189c/frameset.htm', 'http://help.sap.com/saphelp_nwpi711/helpdata/en/48/707c54872c1b5ae10000000a42189c/frameset.htm', '', 5, 0),
(906, '', '서대영', '', '2010-09-25 15:27:56', 'JSON', 'JSON(제이슨, JavaScript Object Notation) 개요', 'JSON (JavaScript Object Notation)은 경량의 DATA-교환 형식이다. 이 형식은 사람이 읽고 쓰기에 용이하며, 기계가 분석하고 생성함에도 용이하다. JavaScript Programming Language, Standard ECMA-262 3rd Edition - December 1999의 일부에 토대를 두고 있다. JSON은 완벽하게 언어로 부터 독립적이지만 C-family 언어 - C, C++, C#, Java, JavaScript, Perl, Python 그외 다수 - 의 프로그래머들에게 친숙한 관습을 사용하는 텍스트 형식이다. 이러한 속성들이 JSON을 이상적인 DATA-교환 언어로 만들고 있다.\r\n\r\nJSON은 두개의 구조를 기본으로 두고 있다:\r\n\r\n\r\n\r\nhttp://ko.wikipedia.org/wiki/JSON\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.json.org/json-ko.html', 'http://www.json.org/json-ko.html', '', 9, 0),
(907, '', '서대영', '', '2010-10-13 17:51:00', 'SQL', '로그성 쿼리 속도 개선 방법', '안녕하세요 황상진입니다.\r\n\r\n \r\n\r\nDB에 데이터를 입력하는 문장(insert/update/delete)을 실행한 후에 데이터베이스로부터 입력이 정상적으로 되었음을 응답을 받은 후에 화면에 입력이\r\n\r\n정상적으로 되었음을 알려주게 됩니다.\r\n\r\n그러나, 데이터 형태를 보게되면 데이터가 정상적으로 입력이 되었음을 확인할 필요가 없는 데이터(손실이 나도 괜찮은 데이터)들이 있습니다.\r\n\r\n포탈에서 로그인시 사용자의 로그인 시간을 입력하는 문장이더라던지 비즈니스에서 거래로그를 쌓는 일이 그렇습니다.\r\n\r\n \r\n\r\n다음 예시에서 마지막 문장은 데이터베이스로부터 응답 시그럴을 받지 않고 입력만 한 후 바로 리턴하는 예시입니다.\r\n\r\n데이터를 DB에 남기는것이 중요하지 않지 않을 경우 사용하시기 바랍니다.\r\n\r\n=================================================================================================================\r\n\r\n  Connection conn = null;\r\n  PreparedStatement pstmt = null;\r\n  Statement stmt = null;\r\n  try {\r\n   //1) DB Connection을 얻어온다.\r\n   conn = jdbcTemplate.getDataSource().getConnection();\r\n   conn.setAutoCommit(false);\r\n\r\n \r\n\r\n   //2) query를 실행한다.\r\n   String query = "select to_char(''1'') from dual"\r\n   pstmt = conn.prepareStatement(query);\r\n   \r\n   pstmt.setString(0, "");\r\n   \r\n   result = pstmt.executeUpdate();\r\n\r\n \r\n\r\n   //3) nowait commit을 실행한다.\r\n   stmt = conn.createStatement();\r\n   stmt.executeUpdate("commit write nowait");\r\n\r\n=================================================================================================================\r\n', '', '', 4, 0),
(908, '', '서대영', '', '2010-10-20 09:57:42', 'Unix', 'allias 단축명령어 보기', '', '', '', 1, 0),
(909, '', '서대영', '', '2010-10-27 16:51:07', 'SVN', 'SVN 사용법', '[ Conflict 대처법 ]\r\n1) Local1 에서 프로젝트 생성하고 Check-in(Share) (1회)\r\n2) Local2 에서 프로젝트 Check-out (1회)\r\n3) Local1 에서 파일수정 후 Update (버젼 업)\r\n4) Local2 에서 파일수정 후 Update 시 Conflict 발생\r\n5) Local2 는 두 가지 액션 선택 가능\r\n5-1) Overide Update : 내가 수정한 내용 포기하고 SVN 내용을 Update\r\n5-2) Mark as Merged : Merge 로 표시해 놓고 나의 내용으로 Commit 가능\r\n\r\n\r\n[ Ecipse Tip ]\r\nWindow > Show View 메뉴를 통해 Synchronize 와 SVN Repositories 를 추가해놓으면 편리하다.\r\nSynchronize : 수시로 SVN 과 차이를 확인하고 동기화를 맞추어준다. \r\nSVN Repositories : Repository 목록을 확인하다.\r\n\r\n\r\n[ 비밀번호 대화상자 다시 나오게 하기 ]\r\n이클립스에서 SVN을 사용할때 checkout 받아 놓은 계정의 비밀변호가 변경 되면 svn에 접근할 수 없다는 인증 오류만 계속 콘솔에 찍어낼뿐 계정 정보를 수정하는 팝업 따위는 보이지 않는다. 이럴 때는 인증 파일을 삭제 해줌으로써 계정과 비밀번호를 새로 입력하는 창을 띄울 수 있다. \r\n\r\n인증파일 위치\r\nwin xp\r\nC:\\Documents and Settings\\{username}\\Application Data\\Subversion\\auth\\svn.simple\r\nvista 이상\r\nC:\\Users\\{username}\\AppData\\Roaming\\Subversion\\auth\\svn.simple\r\n\r\n위의 경로에 들어가면 821408a365d2268ace50acf028261149 이렇게 생긴 파일이 있고 이를 열어 보면 어떤 계정에 대한 인증파일인지 계정이름이 써있다. 계정을 확인하고 재인증이 필요한 파일을 삭제 하면 된다.\r\n\r\n파일을 삭제하고 이클립스에 들어가서 SVN Repository Explorer 등에서 SVN 경로 정보를 연결해보면 계정을 입력할 수 있는 팝업이 뜬다.', '', '', 14, 0),
(910, '', '서대영', '', '2010-10-28 10:08:03', 'Eclipse', 'Eclipse Tip', '패키지와 클래스가 너무 많아 복잡한 경우\r\nProject Explorer 뷰 우측 상단에 구슬 버튼을 클릭하면,\r\nActive Task 만 활성화된다.', '', '', 2, 0),
(911, '', '서대영', '', '2010-10-28 15:33:36', 'Hudson', 'Hudson 사용법', '[ Hudson ]\r\nCI(continuous Integration, 자동빌드) 툴\r\n형상관리(SVN)과 연계하여 자동으로 소스를 빌드하고 테스트까지 해줌\r\n\r\n[ 설치 방법 ]\r\nzip을 압축풀거나 jar를 톰켓 webapp 경로에 복사하고 구동만 하면 됨\r\n\r\n[ Dashboard 화면 ]\r\n * http://localhost:8080/hudson/\r\n 1) 새 작업 : 새 프로젝트 생성\r\n 2) Hudson 관리 : 설정\r\n 화면 중앙) Project 리스트 \r\n\r\n[ Project 화면 ]\r\n * Hudson Home 중아의 Workplace 중 하나를 클릭하면 전환\r\n 1) Status 메뉴 : 전체적인 상황, Test Result 그래프\r\n 2) Changes 메뉴 : 전체 소스변경 이력\r\n 3) Workpalce 메뉴 : Hudson이 SVN으로 부터 Check-out한 소스의 디렉토리 구조 ★\r\n (C:Documents and Settingsstudent.hudsonjobsej-ps-serviceworkspace)\r\n 4) Build Now 메뉴 : 수동으로 빌드를 수행 ★\r\n 5) Delete Project 메뉴 : Project 삭제\r\n 6) Configure : Project 설정 (JAVA, ANT, SVN) ★\r\n 7) Build History 박스 : Build 내역이 나오고 하나를 클릭하면 Build 상세화면으로 전환\r\n\r\n[ Build 화면 ]\r\n 1) Status 메뉴 : 전체적인 상황\r\n 2) Changes 메뉴 : 빌드내 소스변경 이력\r\n 3) Console Output : Check-out, Build 로그 확인 ★\r\n 4) Tag this build : 빌드에 코맨트\r\n 5) Test Result : JUnit 테스트 결과', '', '', 13, 0),
(912, '', '서대영', '', '2010-10-28 15:39:41', 'Hudson', 'Hudson Project 설정법', '/hudsonworkplace/servcieConfiguration 에 설ㅈ어 파일 다 있음\r\nweb.xml\r\nweblogic.xml\r\nlog4j.xml\r\nSVN 에서 체크아웃 받은 파일들을 오버롸이트 함\r\n\r\nDoc 정적파일\r\nApp 동적파일\r\n\r\n.hudson/jobs/ 아래 프로젝트 위치\r\n\r\n\r\n* Project name 입력\r\n\r\n* Description\r\n\r\n* Source Code Management\r\n - Subversion 선택\r\n - Repository URL : svn://10.41.131.173/gspn_portal\r\n - Enter credential 클릭 : SVN ID/PW 입력\r\n\r\n* Build Triggers\r\n - Poll SCM 선택\r\n - Schedule 등록 : 00 * * * * (매 정시)\r\n\r\n* Build\r\n - Ant Version\r\n - Targets : build.xml 파일 내의 target 이름 (ex : all)\r\n - Build File : build.xml (빌드 시나리오)\r\n - Properties : 환경변수 등록\r\n\r\n* Post-build Actions\r\n - Publish JUnit test result report 선택\r\n  : ej-ps-service/report/*.xml', '', '', 4, 0),
(913, '', '서대영', '', '2010-10-28 15:42:31', 'Hudson', 'Hudson 서버 설정법', '데쉬보드 > Hudson 관리 > Configure System\r\n\r\n* JDK\r\n - name : JDK_1.5_19\r\n - JAVA_HOME : C:\\Java\\jdk1.5.0_19\r\n\r\n* ANT\r\n - name : ANT_1.7.0\r\n - ANT_HOME : ', '', '', 4, 0),
(915, '', '서대영', '', '2010-11-17 11:35:53', 'JCo', 'SAPJco3.0 Tutorial', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.vogella.de/articles/SAPJCo/article.html#overview', 'http://www.vogella.de/articles/SAPJCo/article.html#overview', '', 5, 0),
(916, '', '서대영', '', '2010-11-21 13:14:28', 'ANT', 'Ant 경로 패턴', '? : 1개의 문자와 매칭\r\n* : 0개 이상의 문자와 매칭\r\n** : 0개 이상의 디렉토리와 매칭', '', '', 4, 0),
(917, '', '서대영', '', '2010-11-22 14:24:52', 'JCo', '코딩 순서', '1) JCoDestinationManager 정적 객체로 부터 destination 획득\r\n\r\nJCoDestination destination = JCoDestinationManager.getDestination(ABAP_AS);\r\n\r\n\r\n2) destination 의 repository 로 부터 펑션명 주고 function 획득\r\n\r\nJCoFunction function = destination.getRepository().getFunction("ZIF_GSPN_BP_ENGR_INFO"); \r\n\r\n\r\n3) 펑션에 Import 파라미터 세팅\r\n\r\nfunction.getImportParameterList().setValue("IV_ASC_CODE", "2200034");\r\nfunction.getImportParameterList().setValue("IV_COMPANY", "C560");\r\n\r\n4) 펑션에 Ouput 파라미터, structure, table 추출\r\n\r\nJCoTable codes = function.getTableParameterList().getTable("ET_ENGR_INFO");\r\n                \r\n        for (int i = 0; i < codes.getNumRows(); i++) \r\n        {\r\n            codes.setRow(i);\r\n            System.out.println(codes.getString("ENGINEER") + ''t'' + codes.getString("ENGINEER_NAME"));\r\n        }', '', '', 2, 0),
(918, '', '서대영', '', '2010-11-22 16:19:35', 'JCo', 'JCoFunction 인터페이스', '* 펑션 실행\r\n void execute(JCoDestination destination) \r\n          Starts the execution of the function on the given destination \r\n\r\n* Export 파라미터 반환\r\n JCoParameterList getExportParameterList() \r\n          Returns the list of export parameters \r\n\r\nex)\r\nString echoText = function.getExportParameterList().getString("ECHOTEXT"));\r\nJCoStructure exportStructure = function.getExportParameterList().getStructure("RFCSI_EXPORT");\r\n\r\n* Import 파라미터 반환\r\n JCoParameterList getImportParameterList() \r\n          Returns the list import parameters \r\n\r\n* Table 파라미터 반환\r\n JCoParameterList getTableParameterList() \r\n          Returns the list of table parameters \r\n\r\nex)\r\nJCoTable codes = function.getTableParameterList().getTable("ET_ENGR_INFO");', '', '', 5, 0),
(919, '', '서대영', '', '2010-11-22 17:06:22', 'JCo', 'JCo 3 에서 개선된 점', '하나의 커넥션으로 여러 RFC 호출 가능 (Stateful Call Sequence)\r\n\r\n\r\n* Jco 3\r\n\r\nJCoContext.begin(dest);\r\n\r\nincrementCounterTemplate = destination.getRepository().getFunctionTemplate("Z_INCREMENT_COUNTER");\r\ngetCounterTemplate = destination.getRepository().getFunctionTemplate("Z_GET_COUNTER");\r\n\r\n// 하나의 커넥션으로 연속 콜\r\nJCoFunction incrementCounter = incrementCounterTemplate.getFunction();\r\nincrementCounter.execute(dest);\r\nJCoFunction getCounter = getCounterTemplate.getFunction();\r\ngetCounter.execute(dest);\r\n\r\nJCoContext.end(dest);\r\n\r\n* Jco 2\r\n\r\n// 매번 커넥션 필요\r\nJCoFunction function1 = destination.getRepository().getFunction("ZIF_GSPN_BP_ENGR_INFO1");\r\nfunction1.execute(destination);\r\n\r\nJCoFunction function2 = destination.getRepository().getFunction("ZIF_GSPN_BP_ENGR_INFO2");\r\nfunction2.execute(destination);\r\n\r\n', '', '', 0, 0),
(920, '', '서대영', '', '2010-11-26 10:52:44', 'HTML', '다른 URL로 Refresh', '<html>\r\n<head>\r\n<META HTTP-EQUIV= "Refresh" CONTENT= "0; URL=http://csp1.sec.samsung.net/index.jsp;">\r\n<head>\r\n<body>\r\n</body>\r\n</html>', '', '', 1, 0),
(921, '', '서대영', '', '2010-12-03 23:44:55', 'Spring', '어떤 Controller를 사용할 것인가', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.theeye.pe.kr/entry/Spring-%EC%96%B4%EB%96%A4-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC-%ED%95%98%EB%8A%94%EA%B0%80?category=7', 'http://www.theeye.pe.kr/entry/Spring-%EC%96%B4%EB%96%A4-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC-%ED%95%98%EB%8A%94%EA%B0%80?category=7', '', 3, 0),
(922, '', '서대영', '', '2010-12-06 14:34:26', 'Prototype', '프레임워크 구분방법', '$ : prototype\r\n\r\n\r\n $(''searchForm'') == document.getElementById("searchForm") \r\n\r\n\r\n\r\n\r\n\r\n$j : jQuery\r\n\r\n\r\n\r\n\r\n', '', '', 6, 0),
(923, '', '서대영', '', '2010-12-07 10:16:31', 'JCo', '[JCo 3] Stateful Connection', '[ Stateless ]\r\n\r\n* JCoRepository 에서 바로 JcoFunction 을 획득 후,\r\n   JCoDestionation 을 넘겨 바로 펑션 호출\r\n\r\nJCoFunction function = destination.getRepository().getFunction("ZIF_GSPN_BP_ENGR_INFO");\r\n// Set the import parameters\r\nfunction.execute(destination);\r\n\r\n[ Statefull ]\r\n\r\n* JCoRepository 에서 일단 JCoFunctionTemplate 을 획득 후,\r\n   JCoFunctionTemplate 으로부터 JcoFunction \r\n   JCoContext.begin/end 사이에서 펑션 호출\r\n\r\nJCoFunction function =  destination.getRepository().getFunctionTemplate("ZIF_GSPN_BP_ENGR_INFO").functionTemplate.getFunction();\r\n// Set the import parameters\r\nJCoContext.begin(CAQDestination);\r\nfunction.execute(CAQDestination);			\r\nJCoContext.end(CAQDestination);\r\n\r\n\r\n\r\n[ 용도 ]\r\n * SAP과 연결을 Pool을 안쓸때 유용 (ex. XI Gateway 방식)\r\n * 해당 SAP JCo server 에서도 지원해줘야 가능함 (G-ERP 지원 X)', '', '', 6, 0),
(924, '', '서대영', '', '2010-12-07 16:14:02', 'SVN', '소스 변경 이력 보기', '이클립스에서 해당 파일을 잡고 team > show history', '', '', 3, 0),
(925, '', '서대영', '', '2010-12-08 13:23:53', 'Java', 'statc(정적) 변수의 개념', '자바에서 static 이란 java 애플리케이션(main)에서 한 번 메모리에 로드되면\r\n애플리케이션이 끝날 때 까지 메모리에서 사라지지 않는 객체를 일컫는다.\r\n\r\n클래스 자체는 한 번 로드되면 메모리에서 사라지지 않고,\r\nstatic 변수들도 영원히 사라지지 않는다. (Perm 영역)', '', '', 1, 0),
(926, '', '서대영', '', '2010-12-08 13:31:36', 'Prototype', 'Prototype 주 사용 용도', 'DOM 컨트롤, 멀티 브라우징 Ajax', '', '', 1, 0),
(927, '', '서대영', '', '2010-12-08 13:32:31', 'JQuery', 'JQuery UI 용도', '달력, 시간, 출력', '', '', 0, 0),
(928, '', '서대영', '', '2010-12-09 11:07:38', 'J2EE', '[JMS] Java Message Queue 개념', '비동기 작업을 처리할 때 사용. (ex : 로그)\r\nJNDI 에 등록 해놓 고 사용\r\n\r\nJMS 를 사용하려면 \r\n1) JMS 를 지원하는 WAS가 필요하고\r\n2) Data 를 Message 로 감싸서 Queue 로 보내는 Sender 가 필요하가\r\n3) Queue 로 부터 Mesage 를 받아 Data 를 처리하는 Receiver 가 필요하다 \r\n\r\n\r\n\r\n그리고 JMS 참고할 만한 소스는 java.sun.com 에 가서\r\n\r\nJMSChat 을 검색해 봐요. 그럼 좀 나올겁니다.', '', '', 2, 0),
(929, '', '서대영', '', '2010-12-10 21:18:47', 'Spring', 'Spring JDBC 예제', '\r\n\r\n\r\n\r\n============================== FILE ==============================\r\nRfcFuncDtDAOImpl.java', '', 'RfcFuncDtDAOImpl.java', 8, 0),
(930, '', '서대영', '', '2010-12-11 10:28:46', 'Java', 'isAssignableFrom 메서드', '부르는 클래스로 주어진 클래스를 받을 수 있느냐?\r\n부르는 클래스의 주어진 클래스의 상위 클래스이냐?\r\n\r\n\r\nboolean java.lang.Class.isAssignableFrom(Class<?> cls)\r\n\r\nDetermines if the class or interface represented by this Class object is either the same as, or is a superclass or superinterface of, the class or interface represented by the specified Class parameter.\r\n', '', '', 0, 0),
(931, '', '서대영', '', '2010-12-13 19:48:11', 'JCo', 'JCoRespository 인터페이스', '모든 펑션의 입출력 파라미터 메타정보를 저장', '', '', 1, 0),
(932, '', '서대영', '', '2010-12-13 23:27:14', 'Commons', 'commons lang 활용', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/ruly2001?Redirect=Log&logNo=70069240400', 'http://blog.naver.com/ruly2001?Redirect=Log&logNo=70069240400', '', 1, 0),
(933, '', '서대영', '', '2010-12-14 19:51:17', 'Java', '[Collection] TreeMap', 'TreeMap은 key값으로 orderBy 되었다고 보면 돼..\r\n\r\n일반맵은 key값이 중복되면 나중에 들어온 데이터로 overwrite되는데\r\n\r\nTreeMap은 key값으로 정렬되면서 Overwrite가 안된다..중복허용안함\r\n\r\n\r\nimport java.util.TreeMap;\r\n\r\n\r\nTreeSet 은 value 값을 항상 오름차순 정렬되어 잇음', '', '', 8, 0),
(934, '', '서대영', '', '2010-12-15 20:33:58', 'JUnit', 'Expected Exceptions', 'Expected Exceptions\r\nHow do you verify that code throws exceptions as expected?\r\n\r\nVerifying that code completes normally is only part of programming. Making sure the code behaves as expected in exceptional situations is part of the craft of programming too. For example:\r\n\r\n    new ArrayList<Object>().get(0); \r\n\r\nThis code should throw an IndexOutOfBoundsException. The @Test annotation has an optional parameter "expected" that takes as values subclasses of Throwable. If we wanted to verify that ArrayList throws the correct exception, we would write:\r\n\r\n    @Test(expected= IndexOutOfBoundsException.class) public void empty() { \r\n        n', '', '', 7, 0),
(935, '', '서대영', '', '2010-12-16 10:20:34', 'JCo', 'JCoDestination 인터페이스', '[ 설명 ]\r\n * SAP 서버의 접속 정보를 담고 있음\r\n * JDBC 의 Connection 과 비슷한 개념\r\n * JCoFunction 을 수행할 때 인자로 넘겨줌\r\n  - jCoFunction.execute(desination);\r\n * JCoDestinationManager 에서 getDestination 을 통해 받아옴\r\n  - GMQDestination = JCoDestinationManager.getDestination("GMQ");', '', '', 2, 0),
(936, '', '서대영', '', '2010-12-16 11:22:10', 'JCo', 'DestinationDataProvider 인터페이스', 'implements 해서 사용자 전용 DestinationProvider 를 정의해야함 \r\n\r\n\r\n사용할 때는 아래처럼 Environment 에 등록해야함\r\n\r\nDestinationProvider destinationProvider = new DestinationProvider();\r\n\r\ncom.sap.conn.jco.ext.Environment.registerDestinationDataProvider(destinationProvider);', '', '', 1, 0),
(938, '', '서대영', '', '2010-12-19 22:51:31', 'Spring', '[Spring MVC] 빈설정 파일 경로 설정', '[ 디폴트 ]\r\n/WEB-INF/applicationConetext.xml\r\n\r\n[ 지정 ]\r\n\r\n1) 웹경로\r\n	<context-param>\r\n		<param-name>contextConfigLocation</param-name>\r\n		<param-value>\r\n  		/WEB-INF/gomgil-security.xml\r\n  		/WEB-INF/gomgil-service.xml\r\n  		/WEB-INF/gomgil-persistence.xml\r\n  	</param-value>\r\n	</context-param>\r\n\r\n2) 클래스패스\r\n	<context-param>\r\n		<param-name>contextConfigLocation</param-name>\r\n		<param-value>\r\n  			classpath:spring/gomgil-service.xml\r\n  			classpath:spring/gomgil-persistence.xml\r\n  		</param-value>\r\n	</context-param>\r\n', '', '', 9, 0),
(939, '', '서대영', '', '2010-12-20 14:44:56', 'Java', '자바코딩 시 잘못된 습관 및 해결점', '안녕하세요 황상진입니다.\r\n\r\n \r\n\r\n요 머칠 근래 참 많은 일이 있었습니다. 서버의 물리적인 용량은 한정적인데 반해 GSPN과 기타 S-B2B, GSPS, Portal의 사용자수는 급증하고 있습니다.\r\n\r\n한정된 리소스를 가지고 효율적인 애플리케이션을 동작시키기 위해서 노력하고 계시고 있는데, 제한된 시간내에 소스를 수정하고 만들다가 보면\r\n\r\n다음과 같은 경우를 잊어버리고 무심결에 소스를 수정하게 됩니다.\r\n\r\n========================================================================\r\n\r\nCase1: Stream 객체를 지역변수내에서 생성 후 close() 호출없이 끝나는 경우\r\n\r\n========================================================================\r\n\r\n[수정되어야할 소스]\r\n\r\n========================================================================\r\n\r\n  try {\r\n   // XML 도큐먼트 생성\r\n   Document doc = new SAXBuilder().build(new File(xmlFilePath));\r\n   FileInputStream in = new FileInputStream(xlsFilePath);\r\n\r\n----------------------------- 중략 --------------------------------------\r\n\r\n  } catch (Exception e) {\r\n   e.printStackTrace();\r\n  } \r\n========================================================================\r\n\r\n[수정된 소스]\r\n\r\n========================================================================\r\n\r\n  FileInputStream in = null;\r\n\r\n  try {\r\n   // XML 도큐먼트 생성\r\n   Document doc = new SAXBuilder().build(new File(xmlFilePath));\r\n   in = new FileInputStream(xlsFilePath);\r\n\r\n----------------------------- 중략 --------------------------------------\r\n\r\n  } catch (Exception e) {\r\n   e.printStackTrace();\r\n  } finally {\r\n   if (in != null) {\r\n    try {\r\n     in.close();\r\n    } catch (Exception e) {\r\n    } finally {\r\n     in = null;\r\n    }\r\n   }\r\n  }\r\n\r\n \r\n\r\n========================================================================\r\n\r\nFileInputStream 객체를 XML 파일과 스트림 연결을 하여 사용한 후 스트림 객체를\r\n\r\n반환하여 하는데 어느 줄에도 스트림 객체를 반환하는 코드가 보이지 않습니다.\r\n\r\n이러한 경우에는 FileInputStream 객체의 메모리는 시스템을 재시작하지 않는 이상\r\n\r\n회수가 되지 않습니다.\r\n\r\n========================================================================\r\n\r\n \r\n\r\n========================================================================\r\n\r\nCase2: Stream 객체를 지역변수내에서 생성 후 close()를 호출했지만, \r\n\r\nException이 발생하는 경우, Stream 객체를 회수하지 못하는 경우\r\n\r\n========================================================================\r\n\r\n[수정되어야할 소스]\r\n\r\n========================================================================\r\n\r\n     OutputStream out = response.getOutputStream();   \r\n \r\n        try {\r\n\r\n         String XML_FILE_PATH = FileUtil.getXmlFilePath(request);\r\n            String XML_DIR = "/xml";\r\n\r\n----------------------------- 중략 --------------------------------------\r\n\r\n       out.close();\r\n\r\n\r\n      }\r\n      catch (Exception e) {\r\n       e.printStackTrace();\r\n      }\r\n \r\n            \r\n        } catch (Exception e) {\r\n         log.error("DownLoad fail !!! Exception = " + e.toString());\r\n         response.sendRedirect("/error.jsp");             \r\n        }\r\n        finally {\r\n            try {\r\n                if (out != null) {\r\n                 out.close();\r\n                }\r\n            }\r\n            catch (Exception e) {\r\n             log.error("DownLoad file close!! Exception = " + e.toString());\r\n             response.sendRedirect("/error.jsp"); \r\n             }\r\n \r\n        }\r\n\r\n========================================================================\r\n\r\n[수정된 소스]\r\n\r\n========================================================================\r\n\r\n     OutputStream out = response.getOutputStream();   \r\n \r\n        try {\r\n\r\n         String XML_FILE_PATH = FileUtil.getXmlFilePath(request);\r\n            String XML_DIR = "/xml";\r\n\r\n----------------------------- 중략 --------------------------------------\r\n\r\n       out.close();\r\n\r\n\r\n      }\r\n      catch (Exception e) {\r\n       e.printStackTrace();\r\n      }\r\n \r\n            \r\n        } catch (Exception e) {\r\n         log.error("DownLoad fail !!! Exception = " + e.toString());\r\n         response.sendRedirect("/error.jsp");             \r\n        }\r\n        finally {\r\n           if (out != null) {\r\n             try {\r\n                 out.close();\r\n             } catch (Exception e) {\r\n              log.error("DownLoad file close!! Exception = " + e.toString());\r\n              response.sendRedirect("/error.jsp"); \r\n             } finally {\r\n              out = null;\r\n             }\r\n            }\r\n        }\r\n\r\n========================================================================\r\n\r\nOutputStream 객체를 XML 파일과 스트림 연결을 하여 사용한 후 스트림 객체를\r\n\r\nFinally 에서 close()를 호출하는 경우입니다. 여기까지는 괜찮은데 close()에서\r\n\r\nException이 발생되는 경우에는 또 다시 스트림 객체가 해제가 되지 않고 시스템을\r\n\r\n재시작하지 않는 이상 회수가 되지 않습니다.\r\n\r\n========================================================================\r\n\r\n \r\n\r\n이외에도 여러가지가 있을 수 있지만, 반드시 객체를 해제시켜야 하는 Stream 객체에 대해서 먼저\r\n\r\n말씀드립니다.\r\n\r\n많이 사용하시는 List와 Map 객체는 사용이 완료되면 언젠가는 회수는 되지만(시간이 걸릴 수 있습니다), 위에 언급한 Stream 객체는 올바른 close와 객체참조를\r\n\r\n없애주어야 GC(Garbase Collection)에 의해서 회수가 되며 명시적으로 close를 되지 않으며 시스템상태 메모리를 떠돌아다니는 좀비 프로세스가 됩니다. GC로도 회수가 안되기 때문에 요즘처럼 동시 사용자수가 급증하고 있을때는 다음과 같은 코딩을 조심하셔야 합니다.\r\n\r\n \r\n\r\n감사합니다.\r\n\r\n', '', '', 8, 0),
(940, '', '서대영', '', '2010-12-20 16:50:12', 'Oracle', 'MERGE INTO', 'http://blog.naver.com/jadin1?Redirect=Log&logNo=70018086104\r\n\r\n\r\n두 개의 테이블을 합칠 때 사용한다.\r\n\r\nMREGE INTO target_table\r\nUSING source_table\r\nON condition\r\nWHEN NOT MATCHED THEN \r\n  INSERT\r\nWHEN MATCHED THEN \r\n  UPDATE\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n-- S02,에게 S01이 사용하고 있는 전체 API에 대한 권한 부여\r\nMERGE INTO TB_FW_INTERFACE_AUTH T\r\nUSING (\r\n  SELECT ''S03'' AS tenant_id, INTERFACE_ID FROM TB_FW_INTERFACE_AUTH\r\n  WHERE TENANT_ID = ''S01''\r\n) S\r\nON (S.TENANT_ID = T.TENANT_ID AND S.INTERFACE_ID = T.INTERFACE_ID)\r\nWHEN NOT MATCHED THEN\r\n  INSERT VALUES (S.TENANT_ID, S.INTERFACE_ID, ''dale.seo'', sysdate, ''dale.seo'', sysdate);', NULL, '', 16, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(941, '', '서대영', '', '2010-12-22 09:22:46', 'SVN', 'svn update 상태값', 'svn update 의 출력을 좀 더 자세하게 봅시다. 서버가 변경점을 작업 복사에 보낼 때 문자 코드가 각각의 파일 의 옆에 표시되어 당신의 작업 카피를 최신으로 하기 위해서 어떠한 동작을 했는지를 알립니다: \r\n\r\nU foo \r\n파일 foo 는 갱신되었습니다(서버로부터 변경을 받아들였습니다). \r\n\r\n\r\nA foo \r\n파일이나 디렉토리 foo 는 당신의 작업 복사에 추가되었습니다. \r\n\r\n\r\nD foo \r\n파일이나 디렉토리인 foo 는 당신의 작업 복사로부터 삭제되었습니다. \r\n\r\n\r\nR foo \r\n파일이나 디렉토리인 foo 는 치환되었습니다. 즉 foo 는 삭제되어 같은 이름의 새로운 파일 또는 디렉토리가 추가되었습니다. 양쪽 모두는 같은 이름이지만 저장소(repository)는 그것들을 다른 히스토리를 가진 다른 개체(object)로 간주합니다. \r\n\r\n\r\nG foo \r\n파일 foo 는 새로운 변경점을 저장소(repository)로부터 받았습니다만 그 파일은 로컬 카피에서도 수정이 있었습니다. 그러나 양쪽의 수정은 겹치지 않기 때문에 Subversion 이 저장소에서 온 변경점을 로컬 카피에 문제없이 합쳤습니다(merge). \r\n\r\n\r\nC foo \r\n파일 foo는 서버로부터 충돌이 있는 변경을 받았습니다. 서버로부터의 변경은 당신 자신의 변경과 직접 겹치고 있습니다. 그렇지만 걱정할 필요는 없습니다. 이 충돌은 사람(즉 당신)이 해소하지 않으면 안됩니다. 이 장의 다음에 이 상황에 대해 논의합니다.\r\n \r\n\r\n\r\n------------------------------------------------------------\r\n\r\nsvn help update \r\nFor each updated item a line will start with a character reporting the\r\naction taken.  These characters have the following meaning: \r\n\r\n  A  Added\r\n  D  Deleted\r\n  U  Updated\r\n  C  Conflict\r\n  G  Merged\r\n \r\n', '', '', 5, 0),
(944, '', '서대영', '', '2010-12-24 09:11:07', 'Unix', 'OS 타임존/로케일 확인', '/etc/environment \r\n\r\n\r\nPATH=/usr/bin:/etc:/usr/sbin:/usr/ucb:/usr/bin/X11:/sbin:/usr/java5/jre/bin:/usr/java5/bin\r\nTZ=CST6CDT\r\nLANG=en_US\r\n\r\n\r\n\r\n\r\n\r\n$ locale -a', '', '', 18, 0),
(942, '', '서대영', '', '2010-12-22 15:21:14', 'Eclipse', 'Eclipse 성능 향상 팁', '단위 테스트할 때 응답없음이 나오면\r\n\r\nPreferences > Console > Limit Console Output 을 Uncheck 한다.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n====================================================================\r\n\r\nEclipse 성능 높이기\r\n\r\nEclipse는 SWING으로 개발된 다른 IDE 툴보다 빠른 속도를 보장한다. 그러나 Eclipse 또한 점점 더 많은 기능을 가지게 되면서 실행속도가 느려지는 것이 사실이다. 따라서 Eclipse의 속도를 보장하기 다양한 방법에 대하여 알아볼 필요가 있다. 이 강좌 또한 Eclipse를 사용하는 무수히 많은 개발자들과 더불어 만들어질 것이다. 많은 개발자들의 유용한 정보가 있기를 바란다.\r\n메모리 Heap사이즈를 설정한다.\r\n\r\n주절주절 있지만 간단히 말해 이클립스에 최소한의 메모리 사이즈를 지정해서 실행하게 한다.\r\n\r\n방식은 이클립스 바로가기의 대상에 -vmargs -Xmx256m 을 추가해준다.\r\n\r\n즉, 256의 메모리를 사용한다는 것이다.\r\n자동 폴딩기능을 죽인다.\r\n\r\nWindow->Preferences->Java->Editor->Folding tab 에서 모든것의 체크를 없애면 자동 폴딩 기능을 죽일수 있다.\r\n코드 인사이트 기능을 죽인다.\r\n\r\nWindow->Preferences->Java->Editor->Code Assist tab에서 Enable auto activation의 체크를 없앤다. 이는 control-space버튼을 누름으로써 그냥 쓰면 된다. 자동으로 하면 괜히 귀찮고 리소스만 더 먹는다.\r\n당장에 사용하지 않는 프로젝트는 닫아둔다.', '', '', 3, 0),
(943, '', '서대영', '', '2010-12-22 17:05:47', 'Spring', '[Spring JDBC] RowMapper VS ResultSetExtractor', 'RowMapper는 여러건(LIST)로 리턴 ResultSetExtractor는 단건(Object)로 리턴\r\n\r\n ResultSetExtractor은 단건만 리턴하고 첫번째 데이터만 리턴해\r\n', '', '', 4, 0),
(945, '', '서대영', '', '2010-12-27 11:07:51', 'JavaScript', 'style.display= ''block/none'' 화면에서 보여주고 감추기', '', '', '', 0, 0),
(946, '', '서대영', '', '2011-01-03 10:47:39', 'Eclipse', 'Java Project → Dynamic Web Project', '1..project 파일을 연다.\r\n\r\n2.natures 안에다가 아래 내용을 삽입한다.\r\n\r\n\r\n&#9702;<nature>org.eclipse.wst.common.project.facet.core.nature</nature>\r\n&#9702;<nature>org.eclipse.wst.common.modulecore.ModuleCoreNature</nature>\r\n\r\n3.(eclipse 가 열려 있었다면 새로고침을 해서 변경내용을 적용한다.)\r\n\r\n4.eclipse 에서 project 의 properties 를 열어서 project facets 에 들어간다.\r\n\r\n5.Java 와 Dynamic Web Modules 를 추가해 준다.\r\n\r\n6.완성\r\n\r\n', '', '', 0, 0),
(947, '', '서대영', '', '2011-01-04 21:45:16', 'MySQL', 'AUTO_INCREMENT = 1', 'ALTER TABLE  `users` AUTO_INCREMENT =1', '', '', 4, 0),
(948, '', '서대영', '', '2011-01-04 23:11:30', 'MySQL', 'innoDB vs MyISAM', 'MyISAM 은 rollback 및 foreign key 지원 안함', '', '', 1, 0),
(949, '', '서대영', '', '2011-01-11 10:32:17', 'Spring', 'ServletRequestUtils', '		Long id = ServletRequestUtils.getRequiredLongParameter(request, "id", 0);\r\n		Double amount = ServletRequestUtils.getRequiredDoubleParameter(request, "amount", 0);\r\n\r\n\r\ngetParameter 시 null 값 처리에 사용\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://theeye.pe.kr/176', NULL, '', 15, 0),
(950, '', '서대영', '', '2011-01-12 10:42:56', 'JavaScript', 'javascript 에서 if 의 역할', 'Java 에서는 꼭 boolean 타입의 true/false 를 판단하지만,\r\nJavascript 에서는 null, undefined, "" 의 경우에도 false 이고\r\n나머지 경우는 다 true 이다.', '', '', 2, 0),
(951, '', '서대영', '', '2011-02-08 20:22:14', 'Unix', 'CPU 코어수 확인', '리눅스\r\ncat /proc/cpuinfo|grep processor|wc -l\r\n \r\n솔라리스\r\npsrinfo -v|grep "Status of processor"|wc -l\r\n \r\nIBM-AIX\r\nlsdev -C|grep Process|wc &#8211;l\r\n \r\nHP/UX\r\nioscan -C processor | grep processor | wc -l ', '', '', 2, 0),
(952, '', '서대영', '', '2011-02-08 20:24:20', 'APM', 'Java 덤프 분석 툴', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://naver.aceofguru.wo.tc/100109428691', 'http://naver.aceofguru.wo.tc/100109428691', '', 1, 0),
(953, '', '서대영', '', '2011-02-08 20:32:42', 'APM', 'Javacore 분석방법', '[ IBM 매뉴얼 ]\r\nhttp://publib.boulder.ibm.com/infocenter/javasdk/v5r0/index.jsp?topic=/com.ibm.java.doc.diagnostics.50/html/interpretjavadump.html\r\n\r\nhttp://publib.boulder.ibm.com/infocenter/javasdk/v6r0/index.jsp?topic=/com.ibm.java.doc.diagnostics.60/diag/tools/javadump_tags_info.html\r\n\r\n\r\n\r\n\r\n[ 메모리 ]\r\n * 16진수로 나오니 주의\r\n\r\n0SECTION       MEMINFO subcomponent dump routine\r\nNULL           =================================\r\n1STHEAPFREE    Bytes of Heap Space Free: B07DB8 --> 남은 용량\r\n1STHEAPALLOC   Bytes of Heap Space Allocated: 80000000 -> 사용 용량', '', '', 3, 0),
(954, '', '서대영', '', '2011-02-09 08:26:14', 'Unix', 'AIX 메모리 사용량', 'nmon 들어가서 m, t 누르면 됨\r\n\r\nCommand	Description\r\nvmstat	충분한 Free memory가 있는지 확인하고 paging in, out 여부를 파악하여 Memory 의 병목 여부 판단.\r\nlsps	Paging 공간의 사용률을 파악하여 메모리 병목 판단에 활용\r\ntopas	Memory의 caching 사용여부와 사용률을 파악\r\nps aux	프로세스 별로 메모리 사용률 파악\r\nsvmon	프로세스 사용률 순 또는 Memory 사용률에 따른 순서로 상세한 사용에 대한 세부 내역파악.\r\n\r\n\r\n------------------------------------------------------------------------\r\n\r\n안녕하십니까? 한국IBM 김대원입니다. \r\n\r\n김병운 수석님 \r\n\r\n각 시스템에서 아래 명령을 수행 부탁드립니다. \r\n\r\n1. 시스템의 모니터링을 nmon 명령을 통해서 수행하는 것으로 24시간 수행되도록 하였습니다. \r\n    시스템 접속 명령창에서 아래 4줄을 그대로 copy & paste 부탁드립니다.\r\n\r\nexport DATE=`date +"%y%m%d_%H%M"` \r\necho $DATE"_"$1 \r\nexport LOG=$DATE"_"$1 \r\nnmon -fdt -F /home/$(hostname -s)_$LOG.nmon -s 300 -c 288 \r\n\r\n2. 아래 명령어로 위의 명령어가 제대로 수행되는지 확인할 수 있습니다. \r\n\r\nps -ef | grep nmon | grep -v grep | wc -l \r\n결과값이 1이 나오면 정상 수행되는 것입니다. \r\nor \r\n/home 밑에 xxx.nmon이라는 파일이 생기고 size가 변경되면 정상 수행되는 것입니다. \r\n\r\n3. 수행하신지 24시간후에 /home 밑에 xxx.nmon이라는 파일이 생겼을 겁니다. \r\n각 시스템의 xxx.nmon 파일을 제 메일로 보내주시면 감사하겠습니다.\r\n\r\n감사합니다.\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.daum.net/iamsiri/7087497', 'http://blog.daum.net/iamsiri/7087497', '', 14, 0),
(955, '', '서대영', '', '2011-02-09 08:28:00', 'Unix', 'AIX 시스템 모니터링 명령어 총정리', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/hmsong95?Redirect=Log&logNo=130016074708', 'http://blog.naver.com/hmsong95?Redirect=Log&logNo=130016074708', '', 5, 0),
(956, '', '서대영', '', '2011-02-09 10:05:09', 'Weblogic', '적정 쓰레드, 커넥션 풀 개수', '인스턴스 당 적정 쓰레드 개수 : 100 ~ 150개\r\n최대 커넥션 풀 개수가 쓰레드 최소 개수 정도는 되야 Wating Thread 가 생기지 않음', '', '', 11, 0),
(957, '', '서대영', '', '2011-02-10 16:44:24', 'Prototype', 'Element 의 insert, update, remove', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.outsider.ne.kr/358', 'http://blog.outsider.ne.kr/358', '', 0, 0),
(958, '', '서대영', '', '2011-02-17 13:12:34', 'Weblogic', '데이터소스', '[ 세팅 ]\r\n콘솔 > 서비스 > JDBC > 데이터소스\r\n\r\n구성 > 접속풀\r\n\r\n* 초기 용량 : 커넥션 초기 개수\r\n* 최대 용량 : 커넥션 최대 개수\r\n* 용량 증가분 : 커넥션 증가 개수 (개수가 2자리이면 2를 권장)\r\n* 명령문 캐시 크기 (Statement Cash Size)\r\n - PrepStmt 캐시적중률이 떨어지면 올려줘야 함\r\n - Sql 문을 reloading 하는 부하가 감소됨\r\n* 접속대기수상한 : 남는 커넥션이 없어서 대기하고 있던 쓰레드의 최대 개수\r\n* 고급 > 최대 접속 대기\r\n : 쓰레드가 커넥션을 받기까지 기다리는 시간 (이 시간이 넘어가면 500 Server Unavailble 에러 발생)\r\n\r\n\r\n\r\n[ 모니터링 ]\r\n콘솔 > 배치 > 모니터링 > JDBC\r\n\r\n* 활성화된 최대 접속수\r\n : 커넥션개수의 초기값을 이값 이상으로 세팅해줘야 함\r\n\r\n* PrepStmt 캐시적중/실패수\r\n : 실패수가 높을 경우 명령문 캐시 크기를 증가시켜 준다\r\n\r\n* 접속대기수상한 \r\n : 활성화된 최대 접속수에 접속대기수상한수를 더한 값 이상으로 커낵션 최대값을 설정해줘야 한다.\r\n\r\n\r\n\r\n[ 데이터소스 재구동 ]\r\n\r\n콘솔 > 서비스 > JDBC > 데이터소스 > 원하는 데이터소스 선택 > 콘트롤\r\n\r\n\r\n', '', '', 9, 0),
(959, '', '서대영', '', '2011-02-17 13:13:42', 'Weblogic', '쓰레드', '$domain/config/confix.xml 에 쓰레드 개수 설정 있음\r\n\r\n\r\n\r\n\r\n사용자가 사용할 쓰레드가 없으면 쓰레드큐에 대기한다.\r\n(쓰레듀큐 개수 45,586)\r\n쓰레드큐까지 Full 나면 503 Service Unavailiable 에러 발생\r\n쓰레드가 있는데 커넥션이 없이 10초가 경과하면\r\n500 Server Unavaliable 에러 발생', '', '', 10, 0),
(960, '', '서대영', '', '2011-02-25 01:46:39', 'Unix', '모든 파일 touch', 'include 로 사용되는 공용 파일을 수정했을 경우 매우 유용함\r\n\r\nfind ./ -name ''*.jsp'' | xargs touch', '', '', 1, 0),
(961, '', '서대영', '', '2011-02-25 14:22:54', 'Eclipse', 'task list 활용', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://babtingdev.tistory.com/146', 'http://babtingdev.tistory.com/146', '', 1, 0),
(962, '', '서대영', '', '2011-04-04 10:53:53', 'SQL', '특수문자 검색', 'SELECT *\r\nFROM t_user_mt\r\nWHERE corpcode = ''C820''\r\nAND userid LIKE ''%#_0'' ESCAPE ''#''\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://yeppni.blog.me/50052018142', 'http://yeppni.blog.me/50052018142', '', 2, 0),
(963, '', '서대영', '', '2011-04-11 16:45:16', 'Oracle', 'Redo, Undo', '[ Redo 로그 파일 ]\r\n * SQL 처리 이력 스택처럼 저장\r\n * DB Backup 시 활용 가능\r\n\r\n[ Undo Tablespace ]\r\n * Commit 하기 전까지 처리 내용을 저장\r\n * Commit 주기가 너무 적으면 Full 발생 위험\r\n\r\n---------------------------------------------------------------------\r\n원인 #1\r\n\r\n- 오라클 DB단에서 Check point가 끝나지 않아 Redo log를 재사용 못함\r\n\r\n- 현재 G-SPN DB는 3개의 Redo log파일을 가지고 있으며 각각 100MB의 사이즈 임.\r\n\r\n- 장애당시 3개의 Redo log파일 모두 사용상태(Active)로 재사용할 Redo log파일이 없어서 발생한것으로 추정\r\n\r\n해결책 #1\r\n\r\n- 3개의 Redo log파일을 추가\r\n\r\n- 수행시기 : 즉시\r\n\r\n \r\n\r\n원인 #2\r\n\r\n- UNDO Tablesapce 부족\r\n\r\n- Commit되지 않은 데이터들이 모두 UNDO에 저장되어있어 현재 32GB의 UNDO Tablespace사이즈로 처리를 못함\r\n\r\n해결책 #2\r\n\r\n- UNDO Tablespace를 현 32GB에서 64GB로 늘림\r\n\r\n- 프로그램내에서 가능하다면 commit을 찍는 행위를 여러번 수행 (HQ 검토사항)\r\n\r\n- 수행시기 : 즉시\r\n', '', '', 0, 0),
(964, '', '서대영', '', '2011-05-02 15:48:30', 'Jennifer', 'Jennifer Thread Kill', '각각의 에이전트 구성파일에 아래의 파란색으로 표시된 옵션을 추가하시기 바랍니다.\r\n* 재가동이 필요없을겁니다. 잘 쓰지않는 기능이라, 가물가물 합니다. 적용이 안되면 재가동 해주세요^^\r\n\r\nenable_long_running_thread_auto_kill = true\r\n기본값 : false\r\n\r\n옵션설명 : 쓰레드 경과시간이 지정한 일정 시간을 초과할 경우, 해당 서비스를 자동으로 강제중단 시킬지를 지정\r\n\r\nlong_running_thread_auto_kill_timeout = 300000\r\n(ms 기준으로 시간을 입력하세요)\r\n\r\n옵션설명 : 사용자의 요청을 처리하는 쓰레드의 경과시간이 해당 옵션값을 초과한 경우에 중단 \r\n\r\n그리고 웹로직에서 40분 동안 처리가 안되었음에도 불구하고 kill이 안되는 thread는 셋중에 하나입니다.\r\n1) 다른 동일한 Thread로 변경된 시작시간만 다른 thread\r\n2) 웹로직 버그\r\n3) 쓰레드가 Socket Read 상태에서 멈추어 있으면 Socket Read 상태가 해제되기 전까지 중단이 안되는 경우\r\n\r\n쉽게 테스트를 하기위해 웹로직에서 못죽이는 쓰레드를 제니퍼 액티브 서비스 목록상에 중지로 죽을경우 2번에\r\n해당합니다.\r\n\r\n수고하세요.\r\n', '', '', 2, 0),
(965, '', '서대영', '', '2011-05-23 15:04:11', 'Weblogic', 'Eclipse 에서 Console 한글 깨지는 문제해결', '227 라인 정도 부분에 JAVA_PROPERTIES 환경 변수에 추가해줍니다.\r\n\r\nset JAVA_PROPERTIES=-Dplatform.home=%WL_HOME% -Dwls.home=%WLS_HOME% -Dweblogic.home=%WLS_HOME%\r\n -Dfile.encoding=UTF8 -Dfile.client.encoding=UTF8\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://antop.tistory.com/95', 'http://antop.tistory.com/95', '', 1, 0),
(966, '', '서대영', '', '2011-05-26 11:05:35', 'Window', '숨은공유 C$, D$, ADMIN$, IPC$등 컨트롤하기', '숨은공유 제거\r\n1. Registry를 살짝 건드린다.\r\n              HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\lanmanServer\\Parameters\r\n              Parameters > 새로만들기 > DWORD\r\n              OS 의 종류에 따라\r\n                     Windows2000 Professional : 이름 - AutoShareWks, 값 = 0\r\n                     Windows2000 Server series : 이름 - AutoShareServer, 값 = 0\r\n \r\n 자.. 이렇게 Registry를 건드림으로 인해서 서버를 Reboot시키면 공유는 사라질 것이다.\r\n \r\n 그럼 Reboot 시키기 전에는? 당연히 공유가 존재한다.\r\n 이걸 그대로 놔둬?  공유하나 없앨라구 서버를 Rebooting 시켜? 땡~\r\n \r\n2.  Command Line 명령어로 다음과 같이 없애는것이 가능하다.\r\n\r\n         net share C$ /delete\r\n         net share D$ /delete\r\n         net share Admin$ /delete\r\n \r\n 이런식으로...\r\n 어라.. 근데 갑자기 다시 필요하게 됐어.. (관리하다보면 필요해지는게 당연하다.)\r\n \r\n3. 숨은공유를 다시 만들자..\r\n \r\n         net share C$=C:\\ /grant:administrator,full\r\n \r\nadministrator 에게 모든접근권한을 준것이다.\r\n쓰고나서 숨은공유는 반드시 지우자!!\r\n \r\nnet share 에 대한 사용법은 도움말을 보자!!\r\n \r\nNET SHARE\r\n                      공유이름=드라이브:경로 [/GRANT:사용자,[READ | CHANGE | FULL]]\r\n                                                        [/USERS:번호 | /UNLIMITED]\r\n                                                        [/REMARK:"문자열"]\r\n                                                        [/CACHE:Manual | Documents| Programs | None ]\r\n                      공유이름 [/USERS:번호 | /UNLIMITED]\r\n                                                        [/REMARK:"문자열"]\r\n                                                        [/CACHE:Manual | Documents | Programs | None]\r\n                      {공유이름 | 장치이름 | 드라이브:경로} /DELETE\r\n[출처] 숨은공유 C$, D$, ADMIN$, IPC$등 컨트롤하기|작성자 카라\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/PostView.nhn?blogId=moranjp&logNo=150035224555', 'http://blog.naver.com/PostView.nhn?blogId=moranjp&logNo=150035224555', '', 0, 0),
(967, '', '서대영', '', '2011-05-26 16:16:28', 'Weblogic', '웹로직 10.3 패스워드 초기화 방법', '# 1. CLASSPATH 세팅\r\n\r\n$DOMAIN/bin/setDomainEnv.sh \r\n또는 \r\n$WL_HOME/server/bin/setWLSEnv.sh\r\n\r\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\r\n\r\n# 2. DefaultAuthenticatorInit.ldift 파일 갱신\r\n\r\ncd $DOMAIN/security\r\njava weblogic.security.utils.AdminAccount 유저네임 패스워드 .\r\n\r\nex)\r\njava weblogic.security.utils.AdminAccount weblogic weblogic .\r\n\r\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\r\n\r\n# 3. ldap 폴더 삭제\r\n \r\nrm $DOMAIN/servers/어드민서버명/data/ldap \r\n \r\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\r\n\r\n# 4. boot.properties 파일 갱신\r\n\r\ncd $DOMAIN/servers/어드민서버명/security\r\nvi boot.properties\r\n\r\n   username=adminuser\r\n   password=weblogic\r\n\r\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\r\n\r\n# 5. 웹로직 구동', '', '', 9, 0),
(968, '', '서대영', '', '2011-05-27 12:52:17', 'Window', '윈도우 7 팁', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://arch7.net/category/Windows%207/%EC%9C%88%EB%8F%84%EC%9A%B0%20%EC%84%B8%EB%B8%90%20%ED%8C%81', 'http://arch7.net/category/Windows%207/%EC%9C%88%EB%8F%84%EC%9A%B0%20%EC%84%B8%EB%B8%90%20%ED%8C%81', '', 0, 0),
(969, '', '서대영', '', '2011-06-22 22:28:54', 'JavaScript', 'setTimeout &  setInterval', 'setTimeout(a, b) : b초 후 a함수를 한번 수행\r\nsetInterval(a, b) : b 초 마다 a함수를 반복 수행\r\n둘다 리턴값을 타이머ID, clearTimeout 이나 clearInterval 로 타이머를 끌 때 사용\r\n\r\n 	var cnt = 0;\r\n	\r\n 	a();\r\n 	\r\n	function a() {\r\n		\r\n		if (cnt < 10) {\r\n			\r\n			cnt ++;\r\n			alert(cnt);\r\n			tid = setTimeout(a, 1000);\r\n		\r\n		} else {\r\n			\r\n			clearTimeout(tid);\r\n			\r\n		}\r\n		\r\n	}\r\n	\r\n----------------------------------------------------------------------\r\n\r\n	var cnt = 0;\r\n	\r\n	tid = setInterval(a, 1000);\r\n	\r\n	function a() {\r\n		\r\n		if (cnt < 10) {\r\n			\r\n			cnt ++;\r\n			\r\n			alert (cnt);\r\n			\r\n		} else {\r\n			\r\n			clearInterval(tid);\r\n			\r\n		}\r\n	\r\n	}', '', '', 3, 0),
(970, '', '서대영', '', '2011-06-23 06:38:58', 'Prototype', '이벤트에 호출된 펑션 동적 바인딩', '엘리먼트.이벤트 = 호출펑션.bind(엘리먼트, 펑션인자);\r\n\r\nfunction specializeC310 () {\r\n	\r\n	 $(''REQ_VALUE'').onkeyup = keyInAmount.bind($(''REQ_VALUE''));\r\n	\r\n}\r\n\r\nfunction keyInAmount() {\r\n	\r\n	if ($(''REQ_CATEGORY'').value == ''SRC01'') { \r\n	\r\n		var amount;\r\n		\r\n		var distance = $(''REQ_VALUE'').getValue();\r\n		\r\n		try {\r\n			\r\n			amount = computeAmount(distance);\r\n			\r\n		} catch (e) {\r\n			\r\n			alert(e);\r\n			\r\n		}\r\n		\r\n		$(''REQ_AMT'').setValue(amount); \r\n	\r\n	}\r\n	\r\n}', '', '', 0, 0),
(971, '', '서대영', '', '2011-06-26 06:04:11', 'Prototype', 'Prototype 사용 시 for in 구문 주의', 'for ... in 루프는 배열을 순회하기 위한 것이 아니라 객체의 속성을 순회하기 위한 것이다.\r\n\r\n\r\n프로토 타입을 사용하면\r\n정수 인덱스 뿐만 아니라 each, eachSlice, all, some 으로 다 돈다.\r\n\r\n따라서 순서 배열을 순회하다면 다음이 정다빈다.\r\n\r\nfor (var i = 0; index < arr.lengh; i++)\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/westlee25?Redirect=Log&logNo=150036668855', 'http://blog.naver.com/westlee25?Redirect=Log&logNo=150036668855', '', 2, 0),
(972, '', '서대영', '', '2011-06-27 08:52:10', 'JavaScript', '새창으로 submit', '	function googleMaps() {\r\n\r\n		mapWindow = window.open(''about:blank'', ''google_maps'');\r\n		\r\n		$(''formGoogle'').target = ''google_maps'';\r\n		$(''formGoogle'').submit();\r\n\r\n	} // function googleMap()', '', '', 2, 0),
(973, '', '서대영', '', '2011-06-28 07:07:08', 'JSP', 'jsp:include 예제', '--- 부모 파일 ---\r\n<jsp:include page="/common/googleMaps.jsp">\r\n	<jsp:param name="groupId" value="<%=userVO.getGroupId()%>" />\r\n	<jsp:param name="fromAddress" value="<%=userVO.getStreet()%>" />\r\n	<jsp:param name="fromCity" value="<%=userVO.getCity()%>" /> \r\n	<jsp:param name="fromState" value="<%=userVO.getState()%>" /> \r\n	<jsp:param name="fromZipcode" value="<%=userVO.getPostalCd()%>" /> \r\n	<jsp:param name="toAddress" value="<%=bp.getSTREET1()%>" /> \r\n	<jsp:param name="toCity" value="<%=bp.getCITY()%>" /> \r\n	<jsp:param name="toState" value="<%=bp.getREGION()%>" /> \r\n	<jsp:param name="toZipcode" value="<%=bp.getPOST_CODE()%>" />\r\n</jsp:include>\r\n\r\n--- 자식 파일 ---\r\n<form id="formGoogle" name="formAddress" action="/svctracking/svcorder/ServiceGoogleMaps.jsp">\r\n	<input type="hidden" id="fromAddress" name="fromAddress" value="${param.fromAddress}" />\r\n	<input type="hidden" id="fromCity" name="fromCity" value="${param.fromCity}" /> \r\n	<input type="hidden" id="fromState" name="fromState" value="${param.fromState}" /> \r\n	<input type="hidden" id="fromZipcode" name="fromZipcode" value="${param.fromZipcode}" /> \r\n	<input type="hidden" id="toAddress"	name="toAddress" value="${param.toAddress}" /> \r\n	<input type="hidden" id="toCity" name="toCity" value="${param.toCity}" /> \r\n	<input type="hidden" id="toState" name="toState" value="${param.toState}" /> \r\n	<input type="hidden" id="toZipcode" name="toZipcode" value="${param.toZipcode}" />\r\n</form>\r\n---------------------------------------------------------------\r\n\r\n', '', '', 7, 0),
(974, '', '서대영', '', '2011-07-01 01:09:48', 'JSTL', 'EL null값일때 대체문', '<c:out value="${값}" default="null일경우 대체">\r\n또는\r\n<c:choose>\r\n<c:when test="${not empty 값} >\r\n<c:out value="${값}" />\r\n</c:when>\r\n<c:others>\r\n대체할값\r\n</c:others>\r\n</c:choose> ', '', '', 6, 0),
(975, '', '서대영', '', '2011-07-01 06:42:59', 'Servlet', '접속자 IP 획득 방법', 'request.getRemoteAddr() 함수를 이용해서 client IP를 얻으려고 할때\r\n웹서버가 was를 통해 들어온다면 was서버의 ip가 가져온다\r\n실제 client IP를 얻으려면\r\n \r\nrequest.getHeader 를 통해 얻을 수 있다\r\nrequest.getHeader("WL-Proxy-Client-IP");     <- 웹로직 9.x 이상부턴 default 로 누락 \r\nrequest.getHeader("Proxy-Client-IP");  <-  얜 다됨\r\nrequest.getHeader("X-Forwarded-For");   <- 얜 ms 환경에서 블라블라\r\n\r\n\r\n\r\nclientIP 로 뭔가 설정하는건 안좋은것 같다. \r\n\r\n하지만 꼭 써야 된다면 이런식으로 써야겠지..???\r\n\r\nclientIP = request.getHeader("Proxy-Client-IP");\r\n        if(clientIP == null){\r\n         clientIP = request.getHeader("WL-Proxy-Client-IP");\r\n         if(clientIP == null){\r\n          clientIP = request.getHeader("X-Forwared-For");\r\n        if(clientIP == null){\r\nclientIP = request.getClientIP();\r\n} \r\n}\r\n}\r\n\r\n\r\n웹로직의 경우\r\n 로직콘솔에서 서버 > 구성 > 일반 > 고급옵션 표시를 선택후\r\n ‘WebLogic 플러그인 사용 가능’ 에 체크를 하면 getRemoeteAddr() 하면 자동으로 clientIP 를 가져온다\r\n하지만 default 는 false!! \r\nwas IP 도 가져와야 하는 경우 때문에.. \r\n헤더를 이용하는게 좋을듯..\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/ksign007?Redirect=Log&logNo=30110425089', 'http://blog.naver.com/ksign007?Redirect=Log&logNo=30110425089', '', 6, 0),
(976, '', '서대영', '', '2011-07-02 06:58:31', 'Prototype', 'Event.observe(element, eventName, handler) → Element', 'element 의 event 에 function 연결\r\n\r\n\r\n\r\nEvent.observe(window, ''load'', function() {\r\n    var clickElement = $(''mouseClick'');\r\n    Event.observe(clickElement, ''click'', Purchase.dcAmtCalc, false);\r\n    Event.observe(clickElement, ''click'', Purchase.salesAmtCalc);\r\n    Event.observe(clickElement, ''click'', Purchase.pointCalc);\r\n});\r\nvar Purchase = {\r\n    listPrice: 10000, dcRate: 10, pointRate: 7, dcAmount: 0, count: 0,\r\n    dcAmtCalc: function(event) {\r\n        Purchase.dcAmount = Purchase.listPrice * Purchase.dcRate / 100;\r\n        $(''show1'').innerHTML = ''실행순서: '' + ++Purchase.count\r\n                                      + '', 할인 금액: '' + Purchase.dcAmount;\r\n    },\r\n    salesAmtCalc: function(event) {\r\n        $(''show2'').innerHTML = ''실행순서: '' + ++Purchase.count\r\n                                          + '', 판매가: '' + (Purchase.listPrice - Purchase.dcAmount);\r\n    },\r\n    pointCalc: function(event) {\r\n        var point = Purchase.listPrice * Purchase.pointRate / 100\r\n        $(''show3'').innerHTML = ''실행순서: '' + ++Purchase.count\r\n                                          + '', 포인트: '' + point;\r\n    }\r\n}', '', '', 4, 0),
(977, '', '서대영', '', '2011-08-08 20:37:32', 'Unix', 'Network 설정', '/etc/hosts\r\n: 도메인과 IP 맵핑정보\r\n \r\n/etc/services\r\n: 서비스와 Port 맵핑정보\r\n This file contains port numbers for well-known services defined by IANA\r\n\r\n/etc/resolv.conf \r\n: dns 서버 지정\r\n\r\n/etc/netsvc.conf\r\n: IP Lookup 순서 지정 (1차 Local Host, 2차 DNS Server)\r\nex) hosts=local, bind\r\n\r\n---------------------------------------------------------\r\n\r\ndns 에 대해서 전반적으로 질문하신듯한데요..\r\n\r\n/etc/resolv.conf 는 해당 호스트에서\r\n\r\n인터넷상의 도메인을 찾아갈때 도메인주소로 질의하면 ip 주소로 반환해주는\r\n\r\ndns 서버를 지정해주는 설정 파일입니다.\r\n\r\n그런데 매번 dns 서버에 질의를 해서 받아오게 좀 번거롭다 싶어서\r\n\r\n자주쓰는 ip는 직접 가지고 있는 파일이 /etc/hosts 입니다.\r\n\r\n먼저 /etc/hosts 에서 해당 도메인의 ip를 확인해보고 없는경우 \r\n\r\nresolv.conf 에 지정된 dns 서버로 도메인네임을 물어봅니다..\r\n\r\nresolv.conf 에 지정된 dns 서버가 ip주소를 제대로 알려주면\r\n\r\n해당 홈페이지가 보여지겠지요..', '', '', 10, 0),
(978, '', '서대영', '', '2011-08-09 16:31:12', 'JavaScript', '새 창 대신 새 탭으로 팝업 뛰우기', 'IE, FF, CR 에서만 됨\r\n\r\nGive the window a ''specs'' parameter with width/height. See here for all the possible options.\r\n\r\nwindow.open(url, windowName, "height=200, width=200");\r\nWhen you specify a width/height, it opens it in a new window instead of a tab.\r\n\r\n\r\n\r\n\r\n================================\r\nvar win = window.open(''http://stackoverflow.com/'', ''_blank'');\r\nif(win){\r\n    //Browser has allowed it to be opened\r\n    win.focus();\r\n}else{\r\n    //Broswer has blocked it\r\n    alert(''Please allow popups for this site'');\r\n}\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://stackoverflow.com/questions/19851782/how-to-open-a-url-in-a-new-tab-using-javascript-or-jquery', 'http://stackoverflow.com/questions/19851782/how-to-open-a-url-in-a-new-tab-using-javascript-or-jquery', '', 1, 0),
(979, '', '서대영', '', '2011-08-11 12:34:36', 'APM', 'IBM JDK 4가지 Garbage Collection', '\r\n구분\r\n설명\r\n옵션 예\r\n-Xgcpolicy:optthruput\r\n설명\r\n이 옵션은 default GC 알고리즘 이다.\r\n특징으로는, 작동 시 ‘일시적으로 정지’하는 현상이 발생한다는 점이다.\r\nObject할당을 시도할 때, Allocation Failure가 발생하게 되면, Garbage Collector는 reference가 끊긴 Object를 수집하여 삭제하게 된다.\r\n이때, 필연적으로 JVM이 Lock이 걸리면서 멈추는 현상이 발생하게 된다.\r\nApplication이 복잡해지고, 그에 따라 Heap이 커지게 되면, 역시 GC발생시 멈추게 되는 시간도 증가하게 된다.\r\n장점\r\nThroughput이 향상될 수 있다.\r\n(General GC, Disable concurrent mark)\r\n단점\r\n작동 시 ‘일시적으로 정지’하는 현상이 발생한다.\r\n\r\n-----------------------------------------------\r\n\r\n\r\n구분\r\n설명\r\n옵션 예\r\n-Xgcpolicy:optavgpause\r\n설명\r\n위에서 설명한 ‘optthruput’ GC 알고리즘의 단점인 ‘JVM 정지시간’을 보완하기 위한 GC 알고리즘 중 하나이다.\r\n이는, Application이 수행 중 일 때, Garbage Collection을 위한 Thread를 추가적으로 생성하고 기동시켜서, reference가 끊긴 Object들에 대한 scavenge 작업을 수행시켜서, 실제 Garbage Collector가 수행될 때, 전체 Heap영역에 대한 Object선별작업을 수행할 필요 없이 reference가 끊긴 Object들만을 수거해 갈 수 있도록 돕는다.\r\n장점\r\n전반적인 응답속도(Response Time)가 향상하는 효과를 가져올 수 있다.\r\n(Enables concurrent mark)\r\n단점\r\nConcurrent한 Thread 기동에 의한, 실제 Application 수행에 있어서의\r\nThroughput이 감소한다.\r\n\r\n\r\n-----------------------------------------------------------\r\n\r\n\r\n옵션 예\r\n-Xgcpolicy:gencon\r\n설명\r\n해당 옵션이 설정되면, JVM은 할당된 Heap을 ‘세대(Generation)’기준으로 분류한다. 이는 위에서 살펴보았듯이, ‘Nursery Space’와 ‘Tenured Space’를 말한다.\r\nJVM이 Logic을 처리하는 동안, 새로운 Object들은 당연히 ‘Nursery’영역에 생기게 된다. 만일, 새로운 Object가 할당되는데 필요한 연속된 메모리 영역이\r\n부족하게 되면 객체는 Tenured 영역으로 옮겨지게 된다.\r\n또한, Garbage collection 발생시 옮겨지기도 한다.\r\nNursery 영역은 ‘Allocate Space’와 ‘Survivor Space로 나뉘게 된다.\r\nObject는 최초 Allocate Space에 생기게 된다. 만일, Space가 부족하게 되는 경우, Allocation Failure가 발생되면, Garbage Collector가 작동되고, Scavenge가 시작된다.\r\nScavenge가 진행되는 동안 reference가 살아있는 Object들은 Survivor Space로 이동되고, 이때 reference가 없는 Object들은 건들지 않는다.\r\nReference가 살아있는 Object들의 이동작업이 다 끝나게 되면, Allocate Space와 Survivor Space 는 그 역할을 순간적을 바꾸게 된다.\r\n이때, 기존의 reference가 없는 Object들은 순간적으로 비워지게 된다. 그리고 다음 Scavenge가 발생할 때 까지는 Survivor Space가 Object를 위한 Allocate 공간 업무를 수행하게 된다.\r\n장점\r\n전반적인 응답속도(Response Time)와, Throughput이 동시에 평균적으로 향상하는 효과를 가져올 수 있다.\r\n(Enable concurrent mark + General GC)\r\n단점\r\nCPU overhead가 상대적으로 발생할 수 있다.\r\n\r\n\r\n\r\n---------------------------------------------------------\r\n\r\n\r\n\r\n구분\r\n설명\r\n옵션 예\r\n-Xgcpolicy:subpool\r\n설명\r\nHeap 공간을 다수의 sub pool로 할당하여 Object를 관리하는 기법이다.\r\n여기에 LOA(Large Object Area)와 SOA(Small Object Area)의 개념이 들어간다.\r\n장점\r\n상대적으로 높은 성능을 발휘한다.\r\n단점\r\n16 CPU 이상의 고 사양 서버 환경에서 사용해야 한다.\r\n또한, AIX, z/OS, Linux PPC 등 특정 플랫폼에서만 사용할 수 있다.\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://javagosu.tistory.com/5', 'http://javagosu.tistory.com/5', '', 1, 0),
(981, '', '서대영', '', '2011-09-11 17:39:04', 'HTML', 'div 레이아웃', 'float:left\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/asus1984?Redirect=Log&logNo=120054473147', 'http://blog.naver.com/asus1984?Redirect=Log&logNo=120054473147', '', 10, 0),
(982, '', '서대영', '', '2011-09-12 13:17:48', 'JQuery', '열을 번갈아 하이라이트', 'function alternateTableRows() {\r\n\r\n		$(''tbody tr:odd td'').css(''background-color'', ''#eee'');\r\n		\r\n	}', '', '', 1, 0),
(983, '', '서대영', '', '2011-09-15 22:59:47', 'MySQL', 'SELECT 후 바로 행카운트 하기', 'mysql> SELECT SQL_CALC_FOUND_ROWS * FROM tbl_name WHERE id > 100 LIMIT 10;\r\nmysql> SELECT FOUND_ROWS();\r\n이렇게 하면 첫번째 쿼리로 10 rows의 데이터가 나오고\r\n두번째 쿼리로 where절을 만족하는 개수가 나온다.  \r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://kin.naver.com/knowhow/detail.nhn?d1id=8&dirId=8&docId=488786&qb=Rk9VTkRfUk9XUw==&enc=utf8&section=kin&rank=1&search_sort=0&spq=0&pid=gFc97F5Y7tCsstX%2B2Psssc--400159&sid=TnH9LiLAcU4AABu@o6s', 'http://kin.naver.com/knowhow/detail.nhn?d1id=8&dirId=8&docId=488786&qb=Rk9VTkRfUk9XUw==&enc=utf8&section=kin&rank=1&search_sort=0&spq=0&pid=gFc97F5Y7tCsstX%2B2Psssc--400159&sid=TnH9LiLAcU4AABu@o6s', '', 4, 0),
(984, '', '서대영', '', '2011-09-25 19:53:04', 'JQuery', '폼 유효성 검증', '$(''.submit'').click(function(event) {\r\n  if ($(''#userid'').val().length < 1) {\r\n    $(''#error'').show();\r\n    event.preventDefault(); // 서버로 데이터 전송 방지\r\n  } else {\r\n    $(''#error'').hide();\r\n  }\r\n});\r\n\r\n\r\n========================================================================\r\n<< Combobox 유효성 >>\r\n\r\n	function search() {\r\n		if (!validates()) return;\r\n		displaySearch(0, 0);\r\n	}\r\n\r\n	function validates() {\r\n		if ($j(''select[name="ASC_ACCTNO"]'').val() == '''') {\r\n			alert(''Please select the ASC code'');\r\n			$j(''select[name="ASC_ACCTNO"]'').focus();\r\n			return false;\r\n		}\r\n		\r\n		if ($j(''select[name="ASC_CODE"]'').val() == '''') {\r\n			alert(''Please select the ASC ship-to'');\r\n			$j(''select[name="ASC_CODE"]'').focus();\r\n			return false;\r\n	 	}\r\n\r\n		if ($j(''select[name="SHIP_METHOD_CD"]'').val() == '''') {\r\n			alert(''Please select the Transport method'');\r\n			$j(''select[name="SHIP_METHOD_CD"]'').focus();\r\n			return false;\r\n	 	}	\r\n		return true;\r\n	}', '', '', 9, 0),
(987, '', '서대영', '', '2011-09-25 20:12:45', 'JavaScript', '문자 유효성 확인', 'function validate_phoneno(ph) {\r\nvar pattern = new RegExp(/^[a-z0-9_]+$/);\r\nreturn pattern.text(ph);\r\n} ', '', '', 1, 0),
(985, '', '서대영', '', '2011-09-25 20:06:19', 'JavaScript', '숫자 필드 유효성 (음수값 허용)', '$(''.submit'').click(function(event) {\r\n  var data = $(''#age'').val();\r\n  for (var i = 0; i < data.lenght; i++) {\r\n    var c = data.charAt(i).charCodaeAt(0);\r\n    if (c == 45 && i == 0) {\r\n      continue;\r\n    }\r\n    if (c < 48 || c > 57) {\r\n      $(''#error'').show();\r\n      event.prventDefault();\r\n      break;\r\n    }\r\n    else {\r\n      $(''#error'').hide();\r\n    }\r\n  }\r\n});', '', '', 2, 0),
(986, '', '서대영', '', '2011-09-25 20:09:49', 'JavaScript', '전화번호 유효성', 'function validate_phoneno(ph) {\r\n  var pattern = new RegExp(/^[0-9-+]+$/);\r\n  return pattern.text(ph);\r\n}', '', '', 2, 0),
(988, '', '서대영', '', '2011-09-29 09:57:39', 'Weblogic', '배치 (Deployment)', '* 모니터링 방법\r\n - 전체 : 콘솔 > 배치 > 모니터링 탭\r\n - 인스턴스별 : 콘솔 > 배치 > 소스 클릭 > 모니터링 탭\r\n \r\n* 배치 계획\r\n - 콘솔 > 환경 > 서버 > 어드민 서버 > 구성 > 배치 > 준비모드 : 스테이지 아님 or 스테이지\r\n - Stage 모드\r\n  -- 소스 파일을 한 서버에만 놓고 모든 인스턴스가 네트워크로 공유\r\n  -- 소스 업로드는 한 번만하면 되니 편하지만 소스변경 후 배치할 때 소스복사본을 찾아서 모두 지워줘야 함\r\n  -- stage 경로 : /bea/domains/<도메인 이름>/servers/<인스턴스 이름>/stage/gspn_portal\r\n - No Stage 모드\r\n  -- 소스 파일을 모든 서버에 업로드\r\n  -- 소스 업로드를 여러 번해야 되서 불편하지만 소스변경 후 배치는 단순함 (그냥 각 인스턴스 재구동) \r\n  -- 지정된 경로를 직접 엑세스 하겠습니다.\r\n  -- WAS 엔지니어가 권장\r\n\r\n\r\n* stage 복사본 삭제\r\nrm -rf /bea/domains/portalDomain/servers/portalManaged1_1/stage/*\r\nrm -rf /bea/domains/portalDomain/servers/portalManaged2_2/stage/*\r\nrm -rf /bea/domains/portalDomain/servers/portalManaged3_3/stage/*', '', '', 4, 0),
(989, '', '서대영', '', '2011-09-29 17:39:52', 'HTML', 'GET Method 길이 제한 (최대 URL 길이)', '2048 바이트\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://techbug.tistory.com/132', 'http://techbug.tistory.com/132', '', 0, 0),
(990, '', '서대영', '', '2011-10-18 22:36:57', 'JDBC', 'java.sql.Date 과 java.util.Date 간 형변환', 'jsva.util.Date 는 날짜 + 시간이고,\r\njava.sql.Date 는 날짜 밖에 없다.\r\njava.sql.Time 이 별도로 있음.\r\n\r\n\r\n\r\nJava 로 DB 에서 데이터를 가져올때\r\n#### 1. java.sql.Date ==> java.util.Date\r\njava.util.Date utilDate = new java.util.Date(rs.getDate("regdate").getTime());\r\njava.util.Date utilDate = rs.getTimestamp("regdate");    //->java.sql.Timestamp가  Date을 상속하기 때문에 이렇게 쓸 수 있음\r\n\r\n#### 2. java.util.Date ==> java.sql.Date\r\npstmt.setDate(4, new java.sql.Date(java.util.Date.getTime()) );\r\npstmt.setTimestamp(4, new java.sql.Timestamp(java.util.Date.getTime()) );\r\n \r\n \r\n//밀리초로 바꿔주는 cal.getTimeInMillis()  함수를 이용해 다양한 방식?으로 넣을 수 있습니다.\r\npstmt.setDate(int parameterIndex, java.sql.Date(cal.getTimeInMillis()))\r\npstmt.setTime(int parameterIndex, java.sql.Time(cal.getTimeInMillis()))\r\npstmt.setTimestamp(int parameterIndex, java.sql.Timestamp(cal.getTimeInMillis()))\r\n[출처] java.sql.Date <==> java.util.Date|작성자 뻘맨\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/tinenie?Redirect=Log&logNo=110038870008', 'http://blog.naver.com/tinenie?Redirect=Log&logNo=110038870008', '', 0, 0),
(991, '', '서대영', '', '2011-10-24 23:17:39', 'Spring', '캐릭터 인코딩 일괄 처리', 'response.setCharacterEncoding("UTF-8");\r\n\r\n모든 페이지 마다 위를 할필요 없이 web.xml 에 등록만 하면됨.\r\n\r\n\r\n\r\n------------------------ web.xml ----------------------\r\n\r\n	<filter>\r\n        <filter-name>CharacterEncodingFilter</filter-name>\r\n        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>\r\n        <init-param>\r\n            <param-name>encoding</param-name>\r\n            <param-value>UTF8</param-value>\r\n        </init-param>\r\n        <init-param>\r\n            <param-name>forceEncoding</param-name>\r\n            <param-value>true</param-value>\r\n        </init-param>\r\n    </filter>\r\n    <filter-mapping>\r\n        <filter-name>CharacterEncodingFilter</filter-name>\r\n        <url-pattern>*.do</url-pattern>\r\n    </filter-mapping>', '', '', 6, 0),
(992, '', '서대영', '', '2011-10-27 19:42:28', 'Network', 'DMZ 에 있는 서버 라우팅', 'DMZ 에 있는 서버는 담당자의 IP 를 라우팅에 등록해줘야 telnet/ftp 접속이 가능하다.\r\n대신 이렇게 하면 virtual IP 는 사용할 수 없다.\r\n\r\n\r\n\r\n&#8206;&#8206;CHEE KWANG CHAN(Senior Consultant/Senior Consultant/SDSAP (Samsung SDS Asia Pacific Pte. Ltd))&#8206;&#8206; [오후 1:31]:\r\n  wait ..let me chk one more thing\r\n&#8206;&#8206;서대영(선임/삼성SDS)&#8206;&#8206; [오후 1:31]:\r\n  which I usually saw before.\r\n&#8206;&#8206;CHEE KWANG CHAN(Senior Consultant/Senior Consultant/SDSAP (Samsung SDS Asia Pacific Pte. Ltd))&#8206;&#8206; [오후 1:31]:\r\n  maybe route\r\n&#8206;&#8206;서대영(선임/삼성SDS)&#8206;&#8206; [오후 1:31]:\r\n  Please...\r\n&#8206;&#8206;CHEE KWANG CHAN(Senior Consultant/Senior Consultant/SDSAP (Samsung SDS Asia Pacific Pte. Ltd))&#8206;&#8206; [오후 1:34]:\r\n  can you try again pls\r\n&#8206;&#8206;서대영(선임/삼성SDS)&#8206;&#8206; [오후 1:41]:\r\n  Unbelievable!!\r\n  I can connect now\r\n  Thx  so much !\r\n  Question...\r\n  Whenever after I apply for firewall regstration.\r\n  Do I have to ask you for routing setting?\r\n&#8206;&#8206;CHEE KWANG CHAN(Senior Consultant/Senior Consultant/SDSAP (Samsung SDS Asia Pacific Pte. Ltd))&#8206;&#8206; [오후 1:47]:\r\n  depend, most of our servers have security control\r\n  for DMZ servers like asiagspnx, need a route on the IP\r\n  but\r\n  once we put your route in the server, you can not use the URL \r\n  this is because URL from internet but route force to come in from intranet\r\n  so, you can only choose 1 from\r\n  ftp/telnet or url\r\n  access\r\n&#8206;&#8206;CHEE KWANG CHAN(Senior Consultant/Senior Consultant/SDSAP (Samsung SDS Asia Pacific Pte. Ltd))&#8206;&#8206; [오후 1:51]:\r\n  unless you hardcode the internal IP (89.x) on the browser may probably work\r\n&#8206;&#8206;서대영(선임/삼성SDS)&#8206;&#8206; [오후 1:54]:\r\n  But I often need to browse iPlanet & Weblogic console.\r\n  Such as...\r\n  http://107.10.89.144:6001/console\r\n&#8206;&#8206;CHEE KWANG CHAN(Senior Consultant/Senior Consultant/SDSAP (Samsung SDS Asia Pacific Pte. Ltd))&#8206;&#8206; [오후 1:54]:\r\n  as long you use the internal ip \r\n  is ok\r\n&#8206;&#8206;서대영(선임/삼성SDS)&#8206;&#8206; [오후 1:54]:\r\n  Oh, you mean.\r\n&#8206;&#8206;CHEE KWANG CHAN(Senior Consultant/Senior Consultant/SDSAP (Samsung SDS Asia Pacific Pte. Ltd))&#8206;&#8206; [오후 1:54]:\r\n  if you use domain name, then problem\r\n&#8206;&#8206;서대영(선임/삼성SDS)&#8206;&#8206; [오후 1:56]:\r\n  You mean I cannot use public IP (2xx.xxx.~) anymore?\r\n&#8206;&#8206;CHEE KWANG CHAN(Senior Consultant/Senior Consultant/SDSAP (Samsung SDS Asia Pacific Pte. Ltd))&#8206;&#8206; [오후 1:56]:\r\n  yes\r\n&#8206;&#8206;서대영(선임/삼성SDS)&#8206;&#8206; [오후 1:56]:\r\n  put private IP is okay to use.\r\n&#8206;&#8206;CHEE KWANG CHAN(Senior Consultant/Senior Consultant/SDSAP (Samsung SDS Asia Pacific Pte. Ltd))&#8206;&#8206; [오후 1:56]:\r\n  correct\r\n&#8206;&#8206;서대영(선임/삼성SDS)&#8206;&#8206; [오후 1:56]:\r\n  Now I''m clear \r\n  Thanks for your explanation.', '', '', 7, 0),
(993, '', '서대영', '', '2011-10-27 23:09:30', 'JSTL', 'el substring 사용법', '참고 사이트 http://blog.daum.net/question0921/665\r\n \r\n<%@ taglib prefix = "c" uri="http://java.sun.com/jsp/jstl/core" %> \r\n<%@ taglib prefix= "fn" uri="http://java.sun.com/jsp/jstl/functions" %>\r\n<-- 페이지 상단에 설정\r\n \r\n<c:set var="posting_date" value="${article.posting_date}" />\r\n--> 변수 설정후\r\n \r\n 변수를 사용\r\n<td align="center">${fn:substring(posting_date, 0, 11)}</td>\r\n\r\n<script type="text/javascript"> </script>\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/q1q3q5?Redirect=Log&logNo=10102015848', 'http://blog.naver.com/q1q3q5?Redirect=Log&logNo=10102015848', '', 6, 0),
(994, '', '서대영', '', '2011-11-02 10:09:07', 'Library', 'CronExpression', 'Field Name	 	Allowed Values	 	Allowed Special Characters\r\nSeconds	 	0-59	 	, - * /\r\nMinutes	 	0-59	 	, - * /\r\nHours	 	0-23	 	, - * /\r\nDay-of-month	 	1-31	 	, - * ? / L W\r\nMonth	 	1-12 or JAN-DEC	 	, - * /\r\nDay-of-Week	 	1-7 or SUN-SAT	 	, - * ? / L #\r\nYear (Optional)	 	empty, 1970-2199	 	, - * /\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.quartz-scheduler.org/api/2.0.0/org/quartz/CronExpression.html', 'http://www.quartz-scheduler.org/api/2.0.0/org/quartz/CronExpression.html', '', 2, 0),
(995, '', '서대영', '', '2011-11-02 11:14:42', 'Weblogic', '로깅 설정', '도메인디렉토리/servers/인스턴스이름/logs 아래에 \r\nWeblogic 자체 로그인 access.log 와 인스턴스이름.log 로그가 남는다.\r\n\r\n로깅 순환 주기 및 파일 수 제한을 통해 File System 이 풀나는 것을 막을 수 있다.\r\n\r\n[ 설정법 ]\r\n환경 > 서버 > 인스턴스 선택 > 로깅탭 > 일반 or HTTP 탭\r\n* 순환 유형 : 크기 기준\r\n* 순환 파일 크기 : 5000\r\n* 유지되는 파일 수 제한 : 체크\r\n* 유지할 파일 수 : 7\r\n\r\n\r\n\r\n============================== FILE ==============================\r\nLogConfig.jpg', '', 'LogConfig.jpg', 4, 0),
(997, '', '서대영', '', '2011-11-03 20:15:13', 'JCo', 'IBM / HP 장비 JCo DDL 잡는 방법 ★', ' IBM 장비는 LIBPATH를 설정해야 하지만, HP는 SHLIB_PATH를 설정해야 합니다. 참고바랍니다.\r\n\r\n[ IBM ]\r\n\r\n1) 라이브러리 디렉토리에 Dynamic Link 파일 업로드\r\nlibrfccm.o\r\nlibsapjco3.so\r\nlibsapjcorfc.so\r\n\r\n2) WAS 구동 쉘에 LIBPATH 추가\r\nexport LIBPATH=${LIBPATH}:/bea/applications/cscApplication2/lib\r\n \r\n\r\n[ HP ]\r\nlibrfccm.sl\r\nlibsapjco3.sl\r\nlibsapjcorfc.sl\r\n를 클래스패스에 놓고...\r\n\r\n와스 구동쉘에 SHLIB 추가\r\n\r\nexport SHLIB_PATH=/gspn/lib:${SHLIB_PATH}', '', '', 14, 0),
(998, '', '서대영', '', '2011-11-04 11:06:41', 'JCo', 'SAP PORT 규칙', '\r\n\r\n* Dialog : 32 + System No\r\n* RFC : 33 + System No\r\n* Message Server : 36 + System No (그룹 로긴)\r\n\r\n\r\n\r\n\r\n"* SAP PORT :    위의 SYSTEM NO 앞에. PORT 구분자를 붙이면 됨.\r\n    (   DIA :  32XX,  RFC : 33XX ,  MSG : 36XX  )     예를 들어  INSTANCE NO 40 번의 RFC 포트는  3340  번이 됨."							\r\n', '', '', 7, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(999, '', '서대영', '', '2011-11-18 20:45:21', 'Java', '[Java5] Annotation', '0.  Marker annotation\r\n\r\n필드가 없음...\r\n\r\n@Retention(RetentionPolicy.RUNTIME)\r\npublic @interface BetaVersion {\r\n}\r\n\r\n\r\n1. Single-member annotation\r\n\r\n변수명을 value 라고 할 때만 필드명 생략 가능\r\n\r\n[ 정의 ]\r\npublic @interface Mutator1_value {\r\n    String value();\r\n}\r\n\r\n[ 활용 ]\r\n@Mutator1_value("xyz")\r\npublic void setName(String name) {\r\n    this.name = name;\r\n}\r\n\r\n\r\n2. Multiple member (Normal) annotation\r\n\r\ndefault 값을 준 필드는생략 가능\r\n\r\n[ 정의 ]\r\npublic @interface Accessor {\r\n\r\n    String variableName();\r\n    String variableType() default "String";;\r\n    //String value();\r\n}\r\n\r\n[ 활용 ]\r\n    @Accessor(variableName = "name", variableType = "int")\r\n    public int getId() {\r\n        return id;\r\n    }\r\n\r\n    @Accessor(variableName = "xyz")\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n\r\n3. Multiple member annotation\r\n\r\n어노테이션의 필드 타입을 또 다른 어노테이션으로 할 수 있음\r\n\r\n[ 정의 ]\r\npublic @interface Name {\r\n  String firstName();\r\n  String lastName();\r\n}\r\n\r\npublic @interface Reviewer {\r\n    Name my_name();\r\n}\r\n\r\n[ 활용 ]\r\n@Reviewer(my_name = @Name(firstName = "James", lastName = "Gosling"))\r\npublic class Main {\r\n        public static void main(String[] args) {\r\n        System.out.println("No compiler error");\r\n    }\r\n}\r\n\r\n\r\n4. Meta annotation\r\n\r\nAnnotation 자체를 제한하기 위한 Annotation 을  위한 Annotation\r\n\r\nAnnotation types designed for annotating annotation type declarations are called meta-annotation types.  The package java.lang.annotation provides several of these.  The meta-annotation types can be used to restrict the annotation types they annotate.\r\n\r\n@Target(ElementType.FIELD) \r\n@Retention(RetentionPolicy.RUNTIME) \r\nThe Target meta-annotation is used to specify where the annotation is to be applied.  The possible choices include the following:\r\n\r\nFIELD \r\nTYPE (Class, interface or enum definition) \r\nMETHOD \r\nPARAMETER \r\nCONSTRUCTOR \r\nLOCAL_VARIABLE \r\nANNOTATION_TYPE \r\nPACKAGE\r\n\r\nThe Retention meta-annotation is used to specify how long an annotation is retained.  The possible choices include the following:\r\n\r\nSOURCE: This annotation information is only retained in the source code and is not recorded in the generated class file. \r\nCLASS:  This annotation is recorded in the class file by the compiler, but need not be retained by the virtual machine at runtime.  This is the default if @Retention is not specified. \r\nRUNTIME:  Annotations are recorded in the class file by the compiler and retained by the virtual machine at runtime and can be read reflectively.\r\n\r\n[ 정의 ]\r\n@Target(ElementType.FIELD)\r\n@Retention(RetentionPolicy.RUNTIME)\r\npublic @interface Exposed {\r\n	String value();\r\n}\r\n\r\n[ 활용 ]\r\n	@Exposed("name");\r\n	private String name;\r\n	\r\n	// @Exposed("name"); ---> Error\r\n	public void setName(String name) {\r\n		this.name = name;\r\n	}\r\n\r\n아래처럼 고쳐주면 에러 안남\r\n@Target({ElementType.FIELD, ElementType.METHOD})\r\n\r\n\r\n[ 클래스 내 어노테이션 모두 출력 ]\r\n    public void printAnnotations() {\r\n        \r\n        Class c = ac.getClass();\r\n        Annotation[] annotations = c.getAnnotations();\r\n        System.out.println("Class " + c.getName() + "has " + annotations.length + " annotations.");\r\n        \r\n        for (Annotation a : annotations) {\r\n            System.out.println("* " + a);\r\n        }\r\n        \r\n    }\r\n\r\n\r\n', '', '', 7, 0),
(1000, '', '서대영', '', '2011-11-19 10:58:27', 'Java', '[Java5] Reflection 으로 Runtime Annotation 받아오기', 'Exercise 7: Reflection\r\n\r\nAs explained earlier, it is possible to specify that annotations are maintained in the classfile and made available via the runtime environment of the JVM.  To access the runtime information you need to use the reflection APIs which have been modified in J2SE 5.0 to include support for Metadata.\r\n\r\nThe Class class now has two additional methods: \r\ngetAnnotations() which returns an array of all annotations for the class\r\ngetAnnotation(Class c) which returns the information about the annotation of type c passed as a parameter. \r\nThe Method, Constructor and Field classes also have two new methods:\r\ngetAnnotation(Class c) which is the same as for Class\r\ngetDeclaredAnnotations() which returns an array of annotations declared for the Method, Constructor or Field.\r\n\r\n\r\n(7.1) Build and run the application\r\n\r\n1. Open annotation_reflection NetBeans project.  \r\nSelect File->Open Project (Ctrl+Shift+O). The Open Project dialog box appears.\r\nBrowse down to <LAB_UNZIPPED_DIRECTORY>/javase5_annotation/samples directory.  \r\nSelect annotation_reflection. \r\nClick Open Project.  \r\nObserve that the annotation_reflection project node appears under Projects tab window.\r\n2. Build and run annotation_reflection project. \r\nRight-click annotation_reflection project and select Run. \r\nObserve the result in the Output window as shown below. \r\nisBeta = true\r\ncopyright = 2011 JPassion.com\r\nfirstName = Sang, lastName = Shin\r\n\r\n                                                                                                              return to top of the exercise\r\n\r\n\r\n\r\n(7.2) Study the code\r\n\r\n1.  Marker annotation - BetaVersion.java\r\n\r\nimport java.lang.annotation.Retention;\r\nimport java.lang.annotation.RetentionPolicy;\r\n\r\n// Marker annotation\r\n@Retention(RetentionPolicy.RUNTIME)\r\npublic @interface BetaVersion {\r\n}\r\n\r\n2. Single value annotation - Copyright .java\r\n\r\niimport java.lang.annotation.Retention;\r\nimport java.lang.annotation.RetentionPolicy;\r\n\r\n@Retention(RetentionPolicy.RUNTIME)\r\npublic @interface Copyright {\r\n    String value();\r\n}\r\n\r\n3. Multi-value regular annotation - Author .java\r\n\r\nimport java.lang.annotation.Retention;\r\nimport java.lang.annotation.RetentionPolicy;\r\n\r\n// Multi-member (normal) annotation\r\n@Retention(RetentionPolicy.RUNTIME)\r\npublic @interface Author {\r\n  String firstName();\r\n  String lastName();\r\n}\r\n\r\n\r\n4. Main.java\r\n\r\n@BetaVersion\r\n@Copyright("2011 JPassion.com")\r\n@Author(firstName="Sang", lastName="Shin")\r\npublic class MyClass {\r\n\r\n    public static void main(String[] args) {\r\n\r\n        // Market annotation reflection\r\n        boolean isBeta = MyClass.class.isAnnotationPresent(BetaVersion.class);\r\n        System.out.println("isBeta = " + isBeta);\r\n\r\n        // Single value annotation reflection\r\n        String copyright = MyClass.class.getAnnotation(Copyright.class).value();\r\n        System.out.println("copyright = " + copyright);\r\n\r\n        // Normal annotation reflection\r\n        String firstName = MyClass.class.getAnnotation(Author.class).firstName();\r\n        String lastName = MyClass.class.getAnnotation(Author.class).lastName();\r\n        System.out.println("firstName = " + firstName + ", lastName = " + lastName);\r\n\r\n    }\r\n}\r\n', '', '', 6, 0),
(1015, '', '서대영', '', '2012-01-07 11:58:25', 'Java', 'Serialization', '[ 사용법 ]\r\nSerializable 를 구현\r\nstatic final long serialVersionUID 값을 지정해 줘야 \r\nserialize 할 당시에 class 구조가 추후 바뀌어도 익셉션(InvalidClassException)이 발생하지 않는다.\r\n위 값을 안 지정해주면 class 가 구조가 변경될 때 마다 자동으로 UID 값이 할당되기 때문이다.\r\n\r\n\r\n\r\n[ Serialize ]\r\n객체를 스트링으로 변환\r\nObjectOutputStream 클래스의 writeObject 매서드를 이용\r\n\r\n\r\n[ Deserialize ]\r\n스트링을 객체로 변환\r\nObjectInputStream 클래스의 readObject 매서드를 이용\r\n\r\n\r\n\r\n============================== FILE ==============================\r\nPersistentTime.java|SerializeTime.java|DeserializeTime.java', '', 'PersistentTime.java|SerializeTime.java|DeserializeTime.java', 9, 0),
(1001, '', '서대영', '', '2011-11-28 15:59:46', 'Java', '[Java5] Generics', '[ 개념 ]\r\n * Type Parameter 를 통해 클래스를 생성할 수 있음\r\n\r\n[ 사용법 ]\r\n * 클래스 뒤에 <> 안에 type Parameter 를 쓰면 됨\r\n\r\n[ 용도 ]\r\n * Collection 의 Element 타입 제한\r\n * Compile 단에서 ClassCastException 방지\r\n\r\n[ 주의사항 ]\r\n * Type Parameter 끼리는 상속이 안되고 무조건 같아야함\r\n\r\n[ Wildcard ]\r\nimport java.util.ArrayList;\r\nimport java.util.Collection;\r\n\r\npublic class GenericsWildcard {\r\n    \r\n    static void printCollection(Collection<?> c){\r\n        for (Object o: c)\r\n            System.out.println(o);\r\n    }\r\n    \r\n    public static void main(String[] args) {\r\n        // TODO code application logic here\r\n        \r\n        ArrayList<Integer> a = new ArrayList<Integer>(10);\r\n        printCollection(a);\r\n        ArrayList<Long> l = new ArrayList<Long>(10); \r\n        printCollection(l);\r\n        ArrayList<String> s = new ArrayList<String>(10);\r\n        printCollection(s);\r\n    }\r\n    \r\n} \r\n\r\n\r\n[ Bounded Wildcard ]\r\n    static void printCollection(Collection<? extends Number> c){      // Bounded wildcard\r\n        for (Object o: c)\r\n            System.out.println(o);\r\n    }\r\n   \r\n    public static void main(String[] args) {\r\n       \r\n        ArrayList<Integer> a = new ArrayList<Integer>(10);\r\n        printCollection(a);\r\n        ArrayList<Long> l = new ArrayList<Long>(10);\r\n        printCollection(l);\r\n        ArrayList<String> s = new ArrayList<String>(10); \r\n        printCollection(s);                                                    // Now compile error should occur\r\n       \r\n    }\r\n\r\n\r\n[ Define your own Generic class ]\r\n* Pair.java\r\npublic class Pair<F, S> {\r\n    F first;  S second;\r\n    \r\n    public Pair(F f, S s) {\r\n        first = f;  second = s;\r\n    }\r\n    \r\n    public void setFirst(F f){\r\n        first = f;\r\n    }\r\n    \r\n    public F getFirst(){\r\n        return first;\r\n    }\r\n    \r\n    public void setSecond(S s){\r\n        second = s;\r\n    }\r\n    \r\n    public S getSecond(){\r\n        return second;\r\n    }\r\n} \r\n\r\n* MyOwnGenericClass.java\r\npublic class MyOwnGenericClass {\r\n\r\n    /**\r\n     * @param args the command line arguments\r\n     */\r\n    public static void main(String[] args) {\r\n        Number n1 = new Integer(5);\r\n        String s1 = new String("Sun");\r\n        Pair<Number, String> p1 = new Pair<Number, String>(n1, s1);\r\n        Pair<Number, String> p2 = new Pair<Number, String>(new Integer(4), new String("3"));\r\n        \r\n        System.out.println("First of p1 = " + p1.getFirst());\r\n        System.out.println("Second of p1 =" + p1.getSecond()); \r\n        \r\n        p1.setFirst(new Long(6L));\r\n        p1.setSecod(new String("rises"));\r\n     \r\n        System.out.println("First of p1 = " + p1.getFirst());\r\n        System.out.println("Second of p1 =" + p1.getSecond()); \r\n        \r\n    }', '', '', 9, 0),
(1002, '', '서대영', '', '2011-12-06 02:23:58', 'Unix', 'AIX Java 6 64bit Fixes URL', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.ibm.com/developerworks/java/jdk/aix/j664/Java6_64.fixinfo.html', 'http://www.ibm.com/developerworks/java/jdk/aix/j664/Java6_64.fixinfo.html', '', 1, 0),
(1003, '', '서대영', '', '2011-12-08 14:13:01', 'Unix', 'Send Mail 세팅', '/etc/mail/sendmail.cf', '', '', 2, 0),
(1004, '', '서대영', '', '2011-12-11 02:26:49', 'Java', 'Java의 synchronized 키워드', '하나의 객체를 여러 쓰레드가 동시에 접근하지 못하도록 차단할 때 쓰인다.\r\n\r\n1) Thread 에 이해서 사용될 Class 의 Static method 앞에 synchronized 키워드를 붙이면 Class 가 lock 이 걸림.\r\n즉, 해당 클래스에서 synchronized 키워드가 붙은 모든 static 메소드들이 상호 동기화 됨\r\n\r\n2) Thread 에 이해서 사용될 Class 의 Instance method 앞에 synchronized 키워드를 붙이면 instance 가 lock 이 걸림.\r\n즉, 해당 클래스에서 synchronized 키워드가 붙은 모든 메소드들이 상호 동기화 됨\r\n\r\n3) Thread 의 run() method 안에 synchronized(obj) {} 코드 블록을 사용하면 해당 obj에 lock 이 걸림\r\n하나의 클래스 내에서 좀 더 정교한 동기화 제어를 위해서 쓰이면, 1, 2 방법 대비 lock 걸리는 시간을 최소화 하기 때문에 권장됨\r\n\r\nhttp://noesse.tistory.com/27\r\nhttp://www.xenomity.com/entry/Synchronized%EC%9D%98-%EB%8F%99%EC%9E%91-%EC%9B%90%EB%A6%AC\r\nhttp://egloos.zum.com/iilii/v/4071694\r\n=================================================================\r\nhttp://ohgyun.com/5\r\n=================================================================\r\npublic synchronized void methodA() { ... } 는\r\npublic void methodA() { synchronized(this) { ... } } 과 동일하며,\r\n\r\npublic static synchronized void methodA() {  ... } 는\r\npublic static void methodA() { synchronized(TargetClass.class()) { ... } } 과 동일합니다.', NULL, '', 16, 0),
(1005, '', '서대영', '', '2011-12-11 03:17:40', 'Java', 'Inter-thread Communication', 'Thread 에 의해 사용될 Class 의 Instance Method 에 synchronized 키워드를 주고 wait(), notifyAll() 로 Thread 들을 제어한다.\r\n\r\nwait 를 하면 현재 사용권을 가진 Thread 입장에서는 이 메소드를 사용하기 위해서 Object 에 lock 을 해재하는 것이고, 다른 Thread 들 입장에서 기다리는 것이다. 햇갈리지 말것.\r\n\r\npublic class CubbyHole {\r\n\r\n	private int contents;\r\n	private boolean available = false;\r\n	\r\n	public synchronized int get() {\r\n		while(available == false) {\r\n			try {\r\n				wait();\r\n			} catch (Exception e) {\r\n				// TODO: handle exception\r\n			}\r\n		}\r\n		available = false;\r\n		notifyAll();\r\n		return contents;\r\n	}\r\n	\r\n	public synchronized void put(int value) {\r\n		while(available == true) {\r\n			try {\r\n				wait();\r\n			} catch (Exception e) {\r\n				// TODO: handle exception\r\n			}\r\n		}\r\n		contents = value;\r\n		available = true;\r\n		notifyAll();\r\n	}\r\n}', '', '', 4, 0),
(1006, '', '서대영', '', '2011-12-13 01:50:58', 'iPlanet', 'Directory Indexing 설정', '* Directory Indexing Disable\r\n : 웹서버 콘솔 > 인스턴스 선택 > 버쳐 클래스 선택\r\n   Content Mgmt 탭 > Document Preferences 메뉴\r\n - Directory Indexing: None\r\n - File to use for error response\r\nwhen indexing is none : error.html ', '', '', 5, 0),
(1007, '', '서대영', '', '2011-12-14 04:28:15', 'JQuery', '새창으로 Form Submit', '--------------------------- Get 방식 ------------------------------\r\n\r\nfunction openModels() {\r\n	var url = ''/master/part/AuthorizedModelListPop.jsp?b2bId='' + ''<%=myInformation.getB2bId()%>'';\r\n	var name = ''model_list'';\r\n	var specs = ''toolbar=no,location=no,directories=no,status=yes,menubar=no,resizable=yes,copyhistory=no,scrollbars=yes,top=150,left=200,width=600,height=550'';\r\n	window.open(url, name, specs);\r\n}\r\n\r\n\r\n--------------------------- Post 방식 ------------------------------\r\n\r\n	function openStaDetail(soNo, itemNo) {\r\n		var pop = window.open(''about:blank'', ''ship_detail'', ''toolbar=no,location=no,directories=no,status=yes,menubar=no,resizable=yes,copyhistory=no,scrollbars=yes,top=150,left=200,width=800,height=500'');\r\n		pop.focus();\r\n		\r\n		var form = $j(''<form>'').attr(''method'', ''post'').attr(''target'', ''ship_detail'').attr(''action'', ''/order/po/ShipSTADetail.jsp'');\r\n		$j(''<input>'').attr(''type'', ''hidden'').attr(''name'', ''soNo'').val(soNo).appendTo(form);\r\n		$j(''<input>'').attr(''type'', ''hidden'').attr(''name'', ''itemNo'').val(itemNo).appendTo(form);\r\n		form.appendTo($j(''body''));\r\n		form.submit();\r\n		form.remove();\r\n	}', '', '', 9, 0),
(1008, '', '서대영', '', '2011-12-16 15:34:42', 'Java', '[Java5] Concurrency', '그냥 실행하는 execute 와 Future 를 반환하는 submit 의 차이를 잘 알아야됨\r\n\r\n[ 주요 API ]\r\n\r\n* ExecutorService : 여러 쓰레드를 동시에 관리할 수 있는 쓰레드풀\r\n - execute(Runnable) : 쓰레드를 실행시킴\r\n - shodown() : 더 이상 쓰레드를 받지않고 남아있는 쓰레드를 모두 종료시킴\r\n - Future<?> submit(Runnable task) : Submits a Runnable task for execution and returns a Future representing that task. The Future''s get method will return null upon successful completion. 미래에 어떤 쓰레드가 리턴할 값\r\n \r\n* Executors : ExecutorService 를 만들어 내는 팩토리이자 기본 execute 매서드를 가짐\r\n - newFixedThreadPool(int) : 고정된 수의 쓰레드풀 생성\r\n - newCachedThreadPool()\r\n    // newCachedThreadPool() creates a thread pool that creates \r\n    // new threads as needed, but will reuse previously constructed \r\n    // threads when they are available.\r\n - newSingleThreadScheduledExecutor()\r\n        // newSingleThreadScheduledExecutor() creates a single-threaded \r\n        // executor that can schedule commands to run after a given delay, \r\n        // or to execute periodically.\r\n - void execute(Runnable command) : Executes the given command at some time in the future. ', '', '', 20, 0),
(1009, '', '서대영', '', '2011-12-25 20:36:18', 'Java', 'JVM arguments', '-XX:+HeapDumpOnOutOfMemoryError\r\nOutOfMemoryError 발생 시 HeapDump 떨어뜨림', '', '', 4, 0),
(1010, '', '서대영', '', '2011-12-26 19:39:36', 'Weblogic', 'Weblogic 파라미터', '* StuckThreadMaxTime(600) : \r\n\r\nwhich is more than the configured time (StuckThreadMaxTime) of "600" seconds. Stack trace:\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/dangtong76?Redirect=Log&logNo=140111715020', 'http://blog.naver.com/dangtong76?Redirect=Log&logNo=140111715020', '', 4, 0),
(1011, '', '서대영', '', '2012-01-05 20:07:48', 'JavaScript', 'JavaScript 로깅', '첫번 째 인자에 %s 를 여러 개 쓰고 인자를 여러 개 넘길 수 있음\r\n\r\n        <script src="http://java.com/js/deployJava.js"></script>\r\n        <script>\r\n            console.log("JREs installed = %s", deployJava.getJREs());\r\n            \r\n            console.log("JRE 1.6.0_14installed = %s", deployJava.versionCheck("1.6.0_14"));\r\n            console.log("JRE 1.6.0_13 installed = %s", deployJava.versionCheck("1.6.0_13"));\r\n            console.log("JRE 1.6.0_2 installed = %s", deployJava.versionCheck("1.6.0_2"));\r\n            console.log("JRE 1.5.0_09 installed = %s", deployJava.versionCheck("1.5.0_09"));\r\n            console.log("JRE 1.4.0_12 installed = %s", deployJava.versionCheck("1.4.0_12"));\r\n        </script>', '', '', 3, 0),
(1012, '', '서대영', '', '2012-01-05 21:07:58', 'JavaScript', 'prompt(msg,defaultText) 텍스트 입력받기 ★', '<html>\r\n<head>\r\n<script type="text/javascript">\r\nfunction show_prompt()\r\n{\r\nvar name=prompt("Please enter your name","Harry Potter");\r\nif (name!=null && name!="")\r\n  {\r\n  document.write("Hello " + name + "! How are you today?");\r\n  }\r\n}\r\n</script>\r\n</head>\r\n<body>\r\n\r\n<input type="button" onclick="show_prompt()" value="Show prompt box" />\r\n\r\n</body>\r\n</html>\r\n', '', '', 2, 0),
(1013, '', '서대영', '', '2012-01-06 14:12:41', 'APM', '어플리케이션 성능 분석 개녕', '성능 테스트란 어플리케이션의 속도, 확장성, 안정성을 결정하거나 검증하는 것이다\r\n성능 테스트는 응답 시간, 처리량, 자원 활용률을 확보하는데 목적을 둔다\r\n모니터링 : 성능 데이터를 어플리케이션에 영향 없이 수집하는 작업\r\n프로파일링 : 성능 데이터를 어플리케이션에 영향을 주면서 수집하는 작업\r\n튜닝 : 어플리케이션의 속도나 처리량을 개선시키는 작업\r\n성능 기준 : 사용자 &#8211; 응답 시간 / 업무 &#8211; 처리량 / 시스템 &#8211; 자원 활용률\r\n\r\nIn general, response time is a user concern, throughput is a\r\nbusiness concern, and resource utilization is a system\r\nconcern.', '', '', 1, 0),
(1014, '', '서대영', '', '2012-01-06 14:21:59', 'APM', 'Heap Memory 구조', '\r\n\r\n\r\n\r\n============================== FILE ==============================\r\nHeap.jpg', '', 'Heap.jpg', 3, 0),
(1016, '', '서대영', '', '2012-01-09 19:55:06', 'APM', 'JDK 5 Tools', '[ jps ]\r\nVM 프로세스 나열\r\n\r\n[ jconsole ]\r\n이 것 저 것 할 수 있는 종합 툴\r\n\r\n[ jmap ]\r\n힙덤프 뜨기\r\njsp 로 얻은 vm 번호를 인자로 넘김\r\njmap -dump:format=b,file=c:\\tmp\\myheap.bin 320\r\n\r\n[ jhat ]\r\n힙덤프 분석\r\njmap 으로 만든 덤프 파일을 사용\r\njhat c:\\tmp\\myheap.bin\r\n\r\n[ jstat]\r\n각종 통계\r\n\r\n[ jstack ]\r\n스택 분석', '', '', 4, 0),
(1017, '', '서대영', '', '2012-01-10 11:12:52', 'ANT', 'javac Task', '[ includeantruntime="false" ]\r\n\r\n  <javac debug="true" debuglevel="${debuglevel}" destdir="classes" source="${source}" target="${target}" includeantruntime="false">\r\n\r\n위와 같이 javac 태그에 includeantruntime="false" 를 추가 해 주면 된다.\r\n위 옵션은 ant의 클래스 패스를 클래스패스에 포함시킨다는 내용이므로 전혀 쓸데가 없으므로\r\nfalse 처리함(default=yes)\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://shonm.tistory.com/entry/warning-includeantruntime-was-not-set-defaulting-to-buildsysclasspathlast-set-to-false-for-repeatable-builds', 'http://shonm.tistory.com/entry/warning-includeantruntime-was-not-set-defaulting-to-buildsysclasspathlast-set-to-false-for-repeatable-builds', '', 1, 0),
(1018, '', '서대영', '', '2012-01-13 22:39:52', 'Window', '[cmd] 파일 내용 보기', 'type HelloImpl_Stub.java|more', '', '', 1, 0),
(1019, '', '서대영', '', '2012-01-18 14:42:52', 'Unix', 'ulimt', '하나의 유저(쉘,프로세스)가 사용할 수 있는 리소스의 한계를 정해주는 명령어\r\n\r\n다중 프로그램/사용자를 기본으로하는 리눅스 시스템에서 과부하를 막아주는\r\n(한프로세스가 미쳐도 다른것에 영향이 덜가도록)\r\n\r\nulimit 은 제한기능을 지원하는 시스템 상에서 \r\n쉘과 쉘이 실행한 프로세스에 대하여 사용자원을 제한할 수 있도록 해 줍니다.\r\n \r\nulimit -a 는 현재 로그인한 사용자가 사용할 수 있는 자원제한상태를 표시합니다.\r\nex)\r\ntime(seconds)        unlimited 초 단위의 최대 CPU 시간\r\nfile(blocks)         unlimited 쉘이 만들 수 있는 파일의 최대 크기\r\ndata(kbytes)         65536 프로세스의 데이터 세그먼트의 최대 크기\r\nstack(kbytes)        8192 최대 스택 크기\r\nmemory(kbytes)       unlimited 상주 설정(resident size) 최대 크기\r\ncoredump(blocks)     4194303 코어 파일의 최대 크기\r\nulimit -a 대신에\r\n아래와 같은 옵션을 사용해서 각각의 정보를 확인할 수도 있습니다.\r\nulimit -t\r\nulimit -f\r\nulimit -d\r\nulimit -s\r\nulimit -m\r\nulimit -c\r\n(옵션이 없을 때는 -f와 같습니다)\r\n \r\n각 옵션 뒤에 값을 지정하면 제한값을 변경할 수 있습니다.\r\n제한을 주지 않을 때는 값 대신에 unlimited 를 주면 됩니다.\r\n\r\n\r\n설정파일 : /etc/security/limits.conf\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://ziugae80.blog.me/86467244', 'http://ziugae80.blog.me/86467244', '', 6, 0),
(1020, '', '서대영', '', '2012-01-18 14:47:35', 'Weblogic', 'Too many open files 문제 해결', '[ WAS 로그 ]\r\n<2012. 1. 17 오전 11시 42분 17초 GMT+00:00> <Critical> <Server> <BEA-002616> \r\n<Failed to listen on channel "Default" on 106.10.1.112:6302, failure count: 1, failing for 0 seconds, java.net.SocketException: Too many open files>\r\n\r\n[ 해결책 ]\r\n * WAS 프로세스가 동시에 열수 있는 파일(소켓 포함)의 개수의 한계치를 엔지니어의 권고치로 올려줘야 함 (기본 1024)\r\n * WAS 구동환경 설정파일 (/bea/wlserver_10.3/common/bin/commEnv.sh) 을 아래와 같이 수정\r\n\r\n# limit the number of open file descriptors\r\nresetFd() {\r\n  if [ ! -n "`uname -s |grep -i cygwin || uname -s |grep -i windows_nt || \\\r\n              uname -s |grep -i HP-UX`" ]\r\n  then\r\n    maxfiles=`ulimit -H -n`\r\n    if [ "$?" = "0" -a  `expr ${maxfiles} : ''[0-9][0-9]*$''` -eq 0 -a "$maxfiles" != "unlimited" ]; then\r\n        ulimit -n 8192\r\n    fi\r\n  fi\r\nulimit -n 8192\r\n}', '', '', 8, 0),
(1021, '', '서대영', '', '2012-01-20 13:38:51', 'JavaScript', 'typeof 연산자', 'https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/typeof\r\n\r\n# typeof 연산자에 배열을 넘겼을 때 ''object''가 반환됨을 주의 \r\n\r\n// Objects\r\ntypeof {a:1} === ''object'';\r\n\r\n// use Array.isArray or Object.prototype.toString.call\r\n// to differentiate regular objects from arrays\r\ntypeof [1, 2, 4] === ''object'';\r\n\r\n=====================================================================================================\r\ntypeof 연산자는 변수나 데이터의 타입 이름을 문자열로 돌려준다.\r\n\r\n데이터 타입에는 string, number,boolean, function, undefined, object가 있다. (꼭 소문자)\r\n\r\nString객체, number객체, Boolean객체, Array객체, Function객체, Date객체, Object객체에 대해서 typeof 연산을 하면object를 돌려준다.\r\n값이 Null인 변수에 typeof를 하면 object를 돌려준다.\r\n값이 없는변수에 typeof를 하면 undefined를 돌려준다.\r\n \r\n<html>\r\n<head>\r\n<script language="JavaScript">\r\n<!--\r\nfunction chkVal(){\r\n if(typeof(frm.W_auth) == "undefined"){  //객체가 존재하지 않을때\r\n  alert("해당 객체가 존재하지 않습니다.");\r\n  return false;\r\n }\r\n \r\n var chkBoxLen = frm.W_auth.length;\r\n \r\n if(typeof(chkBoxLen) == "undefined"){ //객체는 존재하지만 W_auth가 1개일때(배열로 인식되지 않았을때)\r\n  if(frm.W_auth.checked)\r\n   alert(frm.W_auth.value);\r\n }else{         //객체도 존재하고, W_auth가 2개이상일때(배열로 인식되었을때)\r\n  for(var i = 0; i < chkBoxLen; i++){\r\n   if(frm.W_auth[i].checked)\r\n    alert(frm.W_auth[i].value);\r\n  }\r\n }\r\n}\r\n//-->\r\n</script>\r\n</head>\r\n<body>\r\n<form name = ''frm'' >\r\n <input type=''checkbox'' name=''W_auth'' value="W:0001">1\r\n <input type=''checkbox'' name=''W_auth'' value="W:0002">2\r\n <input type=''checkbox'' name=''W_auth'' value="W:0003">3\r\n <input type=''checkbox'' name=''W_auth'' value="W:0004">4\r\n <input type=''button'' value=''확인'' onclick= ''chkVal()''>\r\n</form>\r\n</body>\r\n</html>\r\n[출처] typeof 사용법.|작성자 크리니티\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/civan?Redirect=Log&logNo=150038497264', NULL, '', 5, 0),
(1023, '', '서대영', '', '2012-01-21 19:42:37', 'Maven', 'Maven 기본', '[ Why??? ]\r\n * 개발자들이 IDE 에 구해받지 않고, Maven Prject 만 Import 하면 사용가능\r\n * Ant 를 사용하면 모든 개발자 PC의 디렉토리 경로로 다 바꿔줘야 함\r\n\r\n\r\n[ Local Repository ]\r\n라이브러리들이 다운로드 받아지는 위치\r\n최초에 한번만 원격으로 다운받으면 계속 Maven 이 재활용\r\n<home_directory>/.m2/repository', '', '', 9, 0),
(1022, '', '서대영', '', '2012-01-20 20:23:09', 'Java', 'JMX (Java Management Extention)', '어플리케이션 모니터링, 설정변경\r\njConsole 을 통해 사용할 수 있음\r\nJDK5 부터 Mean Server 가 내장되어 있음\r\n\r\nMBean Agent 을 생성하여 MBean Server 에 등록만 해주면 끝\r\nMBean 은 Attributes, Opeartions, Notifications 로 구성됨\r\n\r\n1) MBean interface 작성\r\n  * getter 매서드는 MBean 의 attributes 가 되고,\r\n  * 일반 메서드는 MBean 의 oerations 가 됨.\r\n------------------------------------------\r\npublic interface CelsiusConverterStatsMBean {\r\n    \r\n    public int getLastThinkingTime();\r\n    \r\n    public int getMaxThinkingTime();\r\n    \r\n    public int getMinThinkingTime();\r\n    \r\n    public long getAverageThinkingTime();\r\n\r\n    public void resetThinkingTimes();\r\n\r\n}\r\n------------------------------------------\r\n\r\n2) MBean class 작성\r\n  * 인터페이스를 그냥 구현하면 됨\r\n\r\n3) MBean Server 에 Mbean Class 등록\r\n------------------------------------------\r\n        CelsiusConverterStats mbean = new CelsiusConverterStats();\r\n        \r\n        ObjectName mbeanName = new ObjectName("dale.seo:type=CelsiusConverterStats");\r\n        ManagementFactory.getPlatformMBeanServer().registerMBean(mbean, mbeanName);   \r\n------------------------------------------\r\n\r\n4) 호출자 매서드에서 호출\r\n\r\n\r\n\r\n============================== FILE ==============================\r\nCelsiusConverter.java|CelsiusConverterStats.java|CelsiusConverterStatsMBean.java|JMXAgent.java', '', 'CelsiusConverter.java|CelsiusConverterStats.java|CelsiusConverterStatsMBean.java|JMXAgent.java', 20, 0),
(1024, '', '서대영', '', '2012-01-21 19:50:11', 'Maven', 'Maven 커맨드', '아래 거를 실행하면 위에게도 무두 실행됨\r\n\r\n[ 옵션 ]\r\n-X : DEBUG 로그 표시\r\nex) mvn -X compile : JDK 버젼을 알 수 있음\r\n\r\n[ 커맨드 ]\r\n- mvn archetype:generate : Maven Project 생성\r\n\r\n- mvn clean : class, jar 파일 삭제하고 소스만 남김\r\n\r\n- mvn validate : pom.xml 문법 체크\r\n- mvn complie : *.java → *.class\r\n- mvn test\r\n- mvn package : *.class → jar\r\n- mvn verify\r\n- mvn install : jar → local repository\r\n 나중에 다른 프로젝트의 디펜던시로 사용될 수 있도록\r\n- mvn deploy : jar → remote repository  \r\n', NULL, '', 21, 0),
(1025, '', '서대영', '', '2012-01-22 10:15:24', 'Maven', 'pom.xml', 'Maven 에서는 모든 라이브러리를 하나의 프로젝트로 친다.\r\n프로젝트는 적어도 다음 3개의 값을 가져야 한다.\r\n\r\n* groupId : 조직, reverse domain name\r\n* artifactId : 프로젝트 , 조직 아래에서의 구분자\r\n* version : 버젼', '', '', 1, 0),
(1026, '', '서대영', '', '2012-01-22 10:41:24', 'Servlet', '가장 간단한 Servlet 예제', '	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n		PrintWriter out = response.getWriter();\r\n		out.println("MyServlet is invoked");\r\n		out.flush();\r\n		out.close();\r\n	}', '', '', 6, 0),
(1027, '', '서대영', '', '2012-01-22 22:11:25', 'Java', 'JMX 원격 접속 방법', 'JVM Arguments 에 다음 추가\r\n\r\n-Dcom.sun.management.jmxremote=true \r\n-Dcom.sun.management.jmxremote.port=9090 \r\n-Dcom.sun.management.jmxremote.ssl=false \r\n-Dcom.sun.management.jmxremote.authenticate=false', '', '', 7, 0),
(1028, '', '서대영', '', '2012-01-24 15:59:23', 'Window', 'Windows7 USB 설치', '매우 쉬움\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://bhgaa.tistory.com/191', 'http://bhgaa.tistory.com/191', '', 0, 0),
(1030, '', '서대영', '', '2012-01-25 14:20:33', 'JCo', 'Stuck Thread 관련 조치', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.saptechno.com/sap-notes.html?view=sapnote&id=1298438', 'http://www.saptechno.com/sap-notes.html?view=sapnote&id=1298438', '', 0, 0),
(1031, '', '서대영', '', '2012-01-26 10:52:54', 'Window', 'where 명령어 : 해당 명령어의 디렉토리 알려줌', 'C:\\Users\\Dale>where java\r\nC:\\Windows\\System32\\java.exe\r\nD:\\Java\\jdk1.6.0_30\\bin\\java.exe', '', '', 0, 0),
(1032, '', '서대영', '', '2012-01-26 12:33:20', 'Eclipse', 'STS.ini', '1) JVM 못 찾는다\r\nvm 추가\r\n2) Code = 1 에러\r\nXmx512m 로 조정\r\nXmx 가 남은 메모리 양보다 클 떄 발생함\r\n\r\n\r\n-------------------------------------------------------------\r\n-vm\r\nD:/Java/jdk1.6.0_30/bin/javaw.exe\r\n-startup\r\nplugins/org.eclipse.equinox.launcher_1.2.0.v20110502.jar\r\n--launcher.library\r\nplugins/org.eclipse.equinox.launcher.win32.win32.x86_1.1.100.v20110502\r\n-product\r\ncom.springsource.sts.ide\r\n--launcher.defaultAction\r\nopenFile\r\n--launcher.XXMaxPermSize\r\n384M\r\n-vmargs\r\n-Dosgi.requiredJavaVersion=1.5\r\n-Xmn128m\r\n-Xms256m\r\n-Xmx512m\r\n-Xss1m\r\n-XX:PermSize=128m\r\n-XX:MaxPermSize=384m\r\n\r\n3) Code = 13 에러\r\nJDK를 64bit 깔고, Eclipse를 32bit 실행할 때 발생', '', '', 3, 0),
(1033, '', '서대영', '', '2012-01-26 14:16:24', 'JavaScript', '금액에서 쉼표 제거', '[^d.] : 숫자 + . 형태가 아닌 것\r\n\r\n.(소수점) 은 놔두고 ,(3자리 표시) 만 제거 해줌\r\n\r\n\r\n	function removeComma(input) {\r\n		return input.replace(/[^d.]/g, '''');\r\n	}\r\n	\r\n	function testRemoveComma() {\r\n		var input = ''123,450.00'';\r\n		console.log(''input : '' + input);\r\n		var output = removeComma(input);\r\n		console.log(''output : '' + output);			\r\n	};', '', '', 1, 0),
(1034, '', '서대영', '', '2012-01-26 14:23:58', 'JavaScript', '정규식 사용법', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://nomasumer.egloos.com/9328413', 'http://nomasumer.egloos.com/9328413', '', 3, 0),
(1035, '', '서대영', '', '2012-01-27 23:39:56', 'Window', 'dir /s 파일 검색', 'C:\\osgi_projects\\t2_dictionary_service>dir/s *.jar\r\n Volume in drive C has no label.\r\n Volume Serial Number is 16A9-7F9A\r\n\r\n Directory of C:\\osgi_projects\\t2_dictionary_service\\target\r\n\r\n12/06/2011  10:25 AM             4,600 t2_dictionary_service-1.0-SNAPSHOT.jar\r\n               1 File(s)          4,600 bytes\r\n\r\n     Total Files Listed:\r\n               1 File(s)          4,600 bytes\r\n               0 Dir(s)  52,796,403,712 bytes free', '', '', 0, 0),
(1036, '', '서대영', '', '2012-01-30 20:31:40', 'Unix', '[쉘프로그램] 다른 서버에 접속해서 쉠파일 실행', '#!/bin/sh\r\ntpipe() {\r\nsleep 10;echo ''wasadm''\r\nsleep 1;echo ''qhaqha123''\r\nsleep 1;echo ''gobiz''\r\nsleep 1;echo ''/bea/domains/businessDomain/startAll.sh''\r\nsleep 1;echo ''exit''\r\nsleep 5\r\n}\r\ntpipe | telnet 107.10.89.145\r\ntpipe | telnet 107.10.89.146\r\ntpipe | telnet 107.10.89.147', '', '', 2, 0),
(1037, '', '서대영', '', '2012-02-03 17:23:34', 'JQuery', 'select 컨트롤', 'jQuery로 선택된 값 읽기\r\n$("#myselect option:selected").val();\r\n$("select[name=name]").val();\r\n \r\njQuery로 선택된 내용 읽기\r\n$("#myselect option:selected").text();\r\n \r\n선택된 위치\r\nvar index = $("#test option").index($("#test option:selected"));\r\n-------------------------------------------------------------------\r\n\r\n// option 항목 추가\r\n$("#myselect").append("<option value=''1''>Apples</option>");\r\n$("#myselect").append("<option value=''2''>After Apples</option>");\r\n \r\n// option 항목 맨 첫 위치에 추가\r\n$("#myselect").prepend("<option value=''0''>Before Apples</option>");\r\n \r\n// 전체 option 변경\r\n$("#myselect").html("<option value=''1''>Some oranges</option><option value=''2''>More Oranges</option><option value=''3''>Even more oranges</option>");\r\n \r\n// 지정된 index 위치의 option 변경\r\n$("#myselect option:eq(1)").replaceWith("<option value=''2''>Some apples</option>");\r\n$("#myselect option:eq(2)").replaceWith("<option value=''3''>Some bananas</option>");\r\n \r\n// 지정된 index 값으로 select 하기\r\n$("#myselect option:eq(2)").attr("selected", "selected");\r\n \r\n// text 값으로 select 하기\r\n$("#myselect option").text("학생").attr("selected", "selected");\r\n \r\n// value 값으로 select 하기\r\n$("#myselect").val("2");\r\n \r\n// 지정된 인덱스 값의 item 삭제\r\n$("#myselect option:eq(0)").remove();\r\n \r\n// 첫번째 item 삭제\r\n$("#myselect option:first").remove();\r\n \r\n// 마지막 item 삭제\r\n$("#myselect option:last").remove();\r\n \r\n// 선택된 옵션의 text 구하기\r\nalert($("#myselect option:selected").text());\r\n \r\n// 선택된 옵션의 value 구하기\r\nalert($("#myselect option:selected").val());\r\n \r\n// 선택된 옵션 index 구하기\r\nalert($("#myselect option").index($("#myselect option:selected")));\r\n \r\n// SelecBox 아이템 갯수 구하기\r\nalert($("#myselect option").size());\r\n \r\n// 선택된 옵션 앞의 아이템 갯수\r\nalert($("#myselect option:selected").prevAll().size());\r\n \r\n// 선택된 옵션 후의 아이템 갯수\r\nalert($("#myselect option:selected").nextAll().size());\r\n \r\n// 지정된 index 위치 바로 다음에 option 추가\r\n$("#myselect option:eq(0)").after("<option value=''4''>Some pears</option>");\r\n \r\n// 지정된 index 위치 바로 앞에 option 추가\r\n$("#myselect option:eq(3)").before("<option value=''5''>Some apricots</option>");\r\n \r\n// Getting values when item is selected\r\n$("#myselect").change(function() {\r\nalert($(this).val());\r\nalert($("> option:selected", this).text());\r\n});\r\n[출처] jquery - select box|작성자 아람조\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/PostView.nhn?blogId=aramjo&logNo=120123064957&beginTime=0&jumpingVid=&from=search&redirect=Log&widgetTypeCall=true&topReferer=http%3A%2F%2Fsearch.naver.com%2Fsearch.naver%3Fsm%3D', 'http://blog.naver.com/PostView.nhn?blogId=aramjo&logNo=120123064957&beginTime=0&jumpingVid=&from=search&redirect=Log&widgetTypeCall=true&topReferer=http%3A%2F%2Fsearch.naver.com%2Fsearch.naver%3Fsm%3D', '', 5, 0),
(1038, '', '서대영', '', '2012-02-03 21:02:51', 'JQuery', 'each 문의 break & continue', '  $.each($("#"+formId).find(''input''), function (i) {\r\n    return false; //break\r\n    return true; // continu\r\n  });', '', '', 3, 0),
(1039, '', '서대영', '', '2012-02-06 22:29:43', 'Spring', '[Spring DI] Autowire', '@Value 어노테이션은 Bean 대신 값을 Injet 시킨다.\r\n<property name="song" value="Jingle Bells" /> 대신 아래 사용\r\n----------------------------------------------------------\r\n	@Value("Live your life with Passion!")\r\n	private String somewords;\r\n	\r\n	@Value("25")\r\n	private int someNumber;\r\n------------------------------------------------------------\r\n\r\n설정 파일에 아래만 추가하고 맵버변수에 @Autowired 만 달아주면,\r\nDI Container 로 부터 자식 클래스의 인스턴스를 자동 대입해준다.\r\n<context:annotation-config />\r\n\r\n\r\npublic class Person {\r\n	private String name = "Sang Shin";\r\n	private int age = 77;\r\n	private float height = 1.99f;\r\n	private boolean isProgrammer = true;\r\n	\r\n	@Autowired\r\n	private Address address;\r\n\r\n----------------------------------------------------------------------\r\n<?xml version="1.0" encoding="UTF-8"?>\r\n<beans xmlns="http://www.springframework.org/schema/beans"\r\n	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"\r\n	xsi:schemaLocation="\r\n		http://www.springframework.org/schema/beans	\r\n		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\r\n		http://www.springframework.org/schema/context \r\n		http://www.springframework.org/schema/context/spring-context.xsd">\r\n\r\n	<!-- enable the usage of annotations -->\r\n	<context:annotation-config />\r\n\r\n	<!-- declare "person" bean -->\r\n	<bean id="person" class="com.javapassion.examples.Person" />\r\n\r\n	<!-- injected object -->\r\n	<bean id="address" class="com.javapassion.examples.Address" />\r\n\r\n</beans>', '', '', 17, 0),
(1040, '', '서대영', '', '2012-02-06 22:35:41', 'Spring', '[Spring DI] Autoscan', 'DI 설정 파일에 아래만 추가하면 Autoscan 에 Autowire 까지 해준다.\r\n클래스 파일에 @Component 어노테이션만 달아주면\r\nDI Container 에 해당 객체가 생성된다.\r\n    <context:component-scan base-package="com.javapassion.examples"/>\r\n\r\n<context:annotation-config> 까지 포함하는 설정 \r\n\r\n----------------------------------------------------------------------\r\n\r\n@Component\r\npublic class Address {\r\n	\r\n	private int streetNumber = 111;\r\n	private String streetName = "Kennedy street";\r\n	private String city = "Boston";\r\n	private String country = "U.S.A.";\r\n\r\n----------------------------------------------------------------------\r\n\r\n<?xml version="1.0" encoding="UTF-8"?>\r\n<beans xmlns="http://www.springframework.org/schema/beans"\r\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\r\n    xmlns:context="http://www.springframework.org/schema/context"\r\n    xsi:schemaLocation="\r\n        http://www.springframework.org/schema/beans    \r\n        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\r\n        http://www.springframework.org/schema/context \r\n        http://www.springframework.org/schema/context/spring-context.xsd">\r\n    \r\n    <!-- autoscan components, no need declare "address" anymore -->\r\n    <context:component-scan base-package="com.javapassion.examples"/>\r\n    \r\n    <!-- declare "person" bean -->\r\n    <bean id="person" class="com.javapassion.examples.Person"/>\r\n    \r\n</beans>\r\n\r\n\r\n----------------------------------------------------------------------\r\nNote that any classes that are annotated with @Component and its stereotypes (@Service, @Repository, @Controller) will be automatically scanned and detected -', '', '', 30, 0),
(1041, '', '서대영', '', '2012-02-09 17:20:14', 'Google', '[Google Maps] Zip Code 로 위경도 구하기', '\r\n1\r\ndown vote\r\naccepted\r\nUse the Google geolocating API (try it out on google.com/maps):\r\n\r\nInput for a Swiss ZIP code for example: CH-9014\r\n\r\nor a french one: FR-34000\r\n\r\nor german: de-12101\r\n\r\nor US: us-90210\r\n\r\nor canada: ca-J5Z 1A1\r\n\r\nor china: cn-100000\r\n\r\nfor example: http://maps.google.com/maps/api/geocode/json?address=ch-9014&sensor=false yields\r\n\r\n{\r\n  "status": "OK",\r\n  "results": [ {\r\n    "types": [ "postal_code" ],\r\n    "formatted_address": "9014 St Gallen, Switzerland",\r\n    "address_components": [ {\r\n      "long_name": "9014",\r\n      "short_name": "9014",\r\n      "types": [ "postal_code" ]\r\n    }, {\r\n      "long_name": "St Gallen",\r\n      "short_name": "St Gallen",\r\n      "types": [ "locality", "political" ]\r\n    }, {\r\n      "long_name": "Sankt Gallen",\r\n      "short_name": "SG",\r\n      "types": [ "administrative_area_level_1", "political" ]\r\n    }, {\r\n      "long_name": "Switzerland",\r\n      "short_name": "CH",\r\n      "types": [ "country", "political" ]\r\n    } ],\r\n    "geometry": {\r\n      "location": {\r\n        "lat": 47.4082855,\r\n        "lng": 9.3323890\r\n      },\r\n      "location_type": "APPROXIMATE",\r\n      "viewport": {\r\n        "southwest": {\r\n          "lat": 47.3991076,\r\n          "lng": 9.3180504\r\n        },\r\n        "northeast": {\r\n          "lat": 47.4199564,\r\n          "lng": 9.3543340\r\n        }\r\n      },\r\n      "bounds": {\r\n        "southwest": {\r\n          "lat": 47.3991076,\r\n          "lng": 9.3180504\r\n        },\r\n        "northeast": {\r\n          "lat": 47.4199564,\r\n          "lng": 9.3543340\r\n        }\r\n      }\r\n    }\r\n  } ]\r\n}\r\nSo the swiss ZIP code 9014 corresponds appx. to this location:\r\n\r\n"lat": 47.4082855,\r\n"lng": 9.3323890\r\nSee my answer on the geolocating API here:\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://stackoverflow.com/questions/4646155/find-latitude-longitude-from-zipcode', 'http://stackoverflow.com/questions/4646155/find-latitude-longitude-from-zipcode', '', 1, 0),
(1042, '', '서대영', '', '2012-02-11 10:20:39', 'Spring', 'annotation-based configuration', '@Autowired : 스프링 버젼\r\n@Inject : 자바 버젼 (JSR330)\r\n필드나 매서드의 파라미터에 하위 클래스의 bean 을 자동으로 주입\r\n\r\n@Required\r\n해당 필드 및 매서드에 객체 주입이 불가능하면 Runtime 에러 발생\r\n\r\n@Qualifier("aBeanId")\r\nAutowiring 할 때 주입 대상 빈이 여러 개인 경우 에러가 발생하기 때문에\r\nQulifier 로 어떤 빈을 사용할지 지정해줌\r\n\r\n@Resource(name="aBeanId")\r\nAutowired 와 똑같은 기능을 가지는 자바 표준 어노테이션 (JSR 250)\r\n\r\n----------------------------------------------------------------------\r\n@PostConstruct and @PreDestroy annotations offer an alternative to initialization callbacks and destruction callbacks\r\n\r\n@PostContruct\r\n인스턴스 생성 후에 실행되는 매서드\r\n\r\n@PreDestroy\r\n인스터늣 소뮬 후에 생행됐으면 하는 매서드\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n----------------------------------------------------------\r\nxml 설정 파일을 다음과 같이 class 로 작성할 수도 있다.\r\n@Configuration, @Bean 을 이용하여 ...\r\n', '', '', 26, 0),
(1043, '', '서대영', '', '2012-02-13 00:39:20', 'Spring', 'Java-based container configuration', 'XML 대신에 Java 파일로 DI 설정을 할 수가 있다.\r\n\r\n@Configuration\r\npublic class AppConfig {\r\n\r\n	@Bean(name="person")\r\n	public Person person() {\r\n		Person person = new Person();\r\n		person.setAddress(address());\r\n		return person;\r\n	}\r\n	\r\n	@Bean\r\n	public Address address() {\r\n		return new Address();\r\n	}\r\n	\r\n}\r\n\r\n\r\n--------------  Bean 호출 ----------------------------\r\nBeanFactory factory = new AnnotationConfigApplicationContext(AppConfig.class);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nhttp://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-java\r\n\r\n\r\npublic static void main(String[] args) {\r\n    ApplicationContext ctx = new AnnotationConfigApplicationContext(MyServiceImpl.class, Dependency1.class, Dependency2.class);\r\n    MyService myService = ctx.getBean(MyService.class);\r\n    myService.doStuff();\r\n}', NULL, '', 18, 0),
(1044, '', '서대영', '', '2012-02-13 23:24:18', 'Java', 'Servlet3.0', 'Asynchronous Servelet 을 지원해주므로\r\nReverse Ajax 를 사용할 수 있음.\r\n\r\n\r\n\r\n\r\n[ 기존 Ajax ]\r\nClient 가 Request 후 Server 에서 Response 가 오면 Callback 매소드로 처리\r\nServlet 는 Back 단 Business Logic  을 처리할 때 까지 리턴을 못함\r\n\r\n[ Reverse Ajax ]\r\nServlet 이 AsyncContext 에 request 와 response 를 묶어서 일단 리턴을 하고, 나중에 Event Handler 가 Response 를 해줄 수 잇음', '', '', 3, 0),
(1045, '', '서대영', '', '2012-02-13 23:29:14', 'Network', 'Http 커넥션과 Thread 의 관계', 'Http 는 TCP 위에서 돌아가므로 Http 를 TCP 와 1:1 이라고 봐도 무방\r\n\r\nClient 로 부터 Request 가 들어오려면 \r\nClient 가 Http Request 를 만들어 TCP Connection 을 통해 보면면,\r\n웹서버에서 이 TCP Connection 이 Thread Pool 로 부터 Thread 를 하나 점유하여 비니니스 로직을 수행 후 Response 를 만든 후 Thread 를 반납한다.\r\n마지막으로 웹서버가 Client 로 TCP Conneciton 을 통해 Response 를 응답한다.\r\n\r\nAschnchronose Servlet 에서는 TCP Connection 이 Thread  를 계속 잡지 않고 필요할 때만 쓸 수도 있음', '', '', 0, 0),
(1046, '', '서대영', '', '2012-02-14 08:07:11', 'J2EE', '[Servlet3.0] Annotation', '[ Servlet ]\r\n@WebServlet(name="mytest",\r\n        urlPatterns={"/"},\r\n        initParams={ @WebInitParam(name="message", value="my servlet") } )\r\n\r\n[ Filter ]\r\n@WebFilter(urlPatterns={"/"}, initParams={ @WebInitParam(name="mesg", value="my filter") })\r\n\r\n[ Listner ]\r\n@javax.servlet.annotation.WebListener', '', '', 4, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(1047, '', '서대영', '', '2012-02-14 08:25:49', 'J2EE', '[Servlet3.0] AsyncContext', 'Asynch. Servlet 을 사용할 때 쓰이는 핵심 클래스\r\n기존처럼 하나의 Servlet 이 Request 를 받고 Business, Persistence, Remote 백단 작업이 끝날 때 까지 기다리는게 아니라 \r\nRequest 와 Response 를 감싸는 쓰레드를 생성하여 Response 는 이 쓰레드를 통해서 응답되도록 함\r\nHTTP Connection 이 Thread (Servlet 도 하나으 쓰레드) 를 Request 받았을 떄 부터 Response 할 때까지 Waiting 시키는 것을 방지\r\n\r\n1) 요청받은 HttpReqeust 객체에서 reqeuest  와 response 를 인자로 받는 startAsync 매서드를 실행하여 AsyncContext 생성 \r\n\r\n2) AsyncContext 객체에 Timount 및 Listener 등록\r\n\r\n3) AsyncContext 객체를 인자로 받는 Runnable 쓰레드를 생성하여 Executor 를 이용해 실행시킴 (getRequest() 와 getResponse() 를 이용)\r\n\r\n--------------------- Request 받는 Servlet ----------------------------\r\n@WebServlet(urlPatterns = "/AsyncServlet", asyncSupported = true)\r\npublic class AsyncServlet extends HttpServlet {\r\n\r\n    @Override\r\n    protected void doGet(HttpServletRequest request, HttpServletResponse response)\r\n            throws ServletException, IOException {\r\n\r\n        AsyncContext aCtx = request.startAsync(request, response);\r\n\r\n        // Add timeout less than the duration of Asynch call\r\n        aCtx.setTimeout(500);\r\n\r\n        aCtx.addListener(new AsyncListener() {\r\n\r\n            public void onComplete(AsyncEvent event) throws IOException {\r\n                System.out.println("----onComplete() is called");\r\n            }\r\n\r\n            public void onTimeout(AsyncEvent event) throws IOException {\r\n                System.out.println("----onTimeout() is called");\r\n\r\n            }\r\n\r\n            public void onError(AsyncEvent event) throws IOException {\r\n                System.out.println("----onError() is called");\r\n\r\n            }\r\n\r\n            public void onStartAsync(AsyncEvent event) throws IOException {         \r\n                System.out.println("----onStartAsync() is called");\r\n            }\r\n        });\r\n\r\nScheduledThreadPoolExecutor executor = new ScheduledThreadPoolExecutor(10);\r\n        executor.execute(new AsyncRunnable(aCtx));\r\n    }\r\n}\r\n\r\n---------------------- Response 해주는 Thread -----------------------\r\npublic class AsyncRunnable implements Runnable {\r\n\r\n    AsyncContext ctx;\r\n\r\n    public AsyncRunnable(AsyncContext ctx) {\r\n        this.ctx = ctx;\r\n    }\r\n\r\n    public void run() {\r\n        // 비지니스, DB, EJB, Webservice 로직\r\n        // Simulate a long-running task such as\r\n        // calling a webservice, performing database\r\n        // operation, or waiting for a server side\r\n        // event (such as receiving a message in\r\n        // Comet-enabled environment).\r\n        try {\r\n            // Sleep for 2000 ms\r\n            Thread.sleep(2000);\r\n        } catch (Exception ie) {\r\n        }\r\n\r\n        ctx.complete();\r\n        // ctx.dispatch("/response.jsp");\r\n    }\r\n}\r\n', '', '', 1, 0),
(1048, '', '서대영', '', '2012-02-14 10:56:11', 'Webservice', 'REST', 'CRUD 를 HTTP 로 표현할 수 있음\r\n일반 Pulbic Service (Google) 이런데는 REST 가 훨씬 적합\r\n\r\nCreate : POST\r\nRead : GET\r\nUpdate : PUT\r\nDelete : DELETE', '', '', 1, 0),
(1049, '', '서대영', '', '2012-02-15 00:38:00', 'Webservice', 'Apache HttpClient 사용법', 'public class GoogleMaps {\r\n\r\n	public Location findLocation(String address) throws ClientProtocolException, IOException {\r\n		String uri = "http://maps.googleapis.com/maps/api/geocode/json?sensor=false&address=";\r\n		HttpClient client = new DefaultHttpClient();\r\n		// HttpHost proxy = new HttpHost("168.219.61.250", 8080);\r\n		                // client.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY, proxy);\r\n		HttpGet request = new HttpGet(uri + address);\r\n		HttpResponse response = client.execute(request);\r\n		StatusLine stauts = response.getStatusLine();\r\n		System.out.println("stauts : " + stauts);\r\n		HttpEntity entity = response.getEntity();\r\n		String result = null;\r\n		if (entity != null) {\r\n			result = EntityUtils.toString(entity);\r\n		}	\r\n		System.out.println("result : " + result);\r\n		return null;\r\n	}\r\n\r\n}\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://bluejames77.blog.me/80124862451', 'http://bluejames77.blog.me/80124862451', '', 15, 0),
(1050, '', '서대영', '', '2012-02-15 09:29:17', 'Java', 'Comment 주석 남기는 팁', 'Why 또는 Purpose 에 대해서 남길 것,\r\nHow 는 소스 자체랑 겹치므로 남기지 말 것.', '', '', 0, 0),
(1051, '', '서대영', '', '2012-02-15 17:35:34', 'Test', 'Test 툴 종류', '[ Light ]\r\nMockito : Mock 프레임 웍 (JUnit 가 함께 단위 테스트 및 TDD 수행)\r\nSelenuum : UI Tester (Firefox 내용 녹화)\r\n\r\n[ Heavy ]\r\nArquillian : 플랫폼별 (WAS) Interation Test 가능\r\nFitNesse : Collaboration (Developer VS Tester VS Customer)', '', '', 7, 0),
(1052, '', '서대영', '', '2012-02-16 16:03:47', 'Maven', 'Proxy 설정', '콘솔 : D:/Maven/apache-maven-3.0.4/conf/server.xml\r\n이클립스 : C:/Users/Dale/.m2/settings.xml\r\n\r\n<?xml version="1.0" encoding="UTF-8"?>\r\n<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0" \r\n          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" \r\n          xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">\r\n  <proxies>\r\n    <proxy>\r\n      <id>optional</id>\r\n      <active>true</active>\r\n      <protocol>http</protocol>\r\n      <username />\r\n      <password />\r\n      <host>168.219.61.250</host>\r\n      <port>8080</port>\r\n      <nonProxyHosts />\r\n    </proxy>\r\n  </proxies>\r\n</settings>\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://maven.apache.org/guides/mini/guide-proxies.html', 'http://maven.apache.org/guides/mini/guide-proxies.html', '', 7, 0),
(1053, '', '서대영', '', '2012-02-18 16:38:04', 'Spring', '[Spring MVC] web.xml 등록', '<web-app id="WebApp_ID" version="2.4"\r\n    xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\r\n    xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee\r\n    http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">\r\n\r\n    <display-name>Spring MVC Helloworld Application</display-name>\r\n\r\n    <servlet>\r\n        <servlet-name>helloworld</servlet-name>\r\n        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\r\n        <load-on-startup>1</load-on-startup>\r\n    </servlet>\r\n\r\n    <servlet-mapping>\r\n        <servlet-name>helloworld</servlet-name>\r\n        <url-pattern>/</url-pattern>\r\n    </servlet-mapping>\r\n\r\n    <context-param>\r\n        <param-name>contextConfigLocation</param-name>\r\n        <param-value>/WEB-INF/helloworld-servlet.xml</param-value>\r\n    </context-param>\r\n\r\n    <listener>\r\n        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\r\n    </listener>\r\n\r\n</web-app>', '', '', 12, 0),
(1054, '', '서대영', '', '2012-02-18 16:38:39', 'Maven', 'Spring Dependencies', '       <!-- Spring framework -->\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-context</artifactId>\r\n            <version>${org.springframework-version}</version>\r\n        </dependency>\r\n\r\n        <!-- Spring MVC framework -->\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-webmvc</artifactId>\r\n            <version>${org.springframework-version}</version>\r\n        </dependency>', '', '', 0, 0),
(1055, '', '서대영', '', '2012-02-18 17:05:57', 'Spring', '[Spring MVC] Request Handler Annotation', 'spring-context.xml 파일에 아래를 추가해야 mvc 관련 annotation 을 인식함\r\n<mvc:annotation-driven />\r\n\r\n\r\n@Controller\r\n컨트롤러 클래스에 선언\r\n\r\n@RequestMapping("/helloworld")\r\n컨트롤러 클래스나 매서드에 URL 맵핑\r\n1) value : url itself\r\n2) method : url method\r\n3) params : url parameter\r\n4) headers : http header\r\n\r\n@RequestMapping(method = RequestMethod.GET)\r\n컨트롤러 클래스나 매서드에 Http Method 맵핑\r\n컨트롤러 매서드는 Model 객체를 인자로 받아서 사용할 수 있다.\r\n\r\n@RequestMapping(value="/sayspring2", method = RequestMethod.GET)\r\nURL 과 Http Method 동시에 맵핑\r\n\r\n@PathVariable("name")\r\n컨트롤러 매서드의 파라미터 앞에 붙이면 {} 값을 사용할 수 있다.\r\n\r\n@RequestMapping(value = "/hello/{helloId}", method = RequestMethod.GET, params = "myCity=Boston")\r\n파라미터까지 맵핑\r\n\r\n@RequestParam("myCity")\r\n컴트롤러 메서드의 파라미타 앞에 붙이면 그 파라미터가 해당 URL 파라미터 받음\r\n\r\n이 밖에 @RequestHeader("name"), @RequestBody 등 사용가능\r\n\r\n@SessionAttributes("name")\r\nname 파라미터는 세션에 저장함\r\n\r\n@ModelAttribute\r\n두 가지 기능으로 쓰이는 데, 첫번째는 Mapper 매서드의 매개변수 앞에 사용하여 form 의 name 을 command object 와 연결해주는 역할을 하고,\r\n(form name 과 command class 이름이 동일 할 경우 생략 가능)\r\n\r\n두번째는 아얘 매서드 위에 쓰여서 spirng2 의 referenceData 처럼 쓰일 수 있다.\r\nex) 아래와 같이 컨트롤러 내에서 항상 매서드들에 공통으로 세팅되는 Model을 선언해줄 수 있음\r\n@ModelAttribute("itemList2")\r\n	public List<Item> populateSubjectList() {\r\n\r\n		List<Item> cartItems = new ArrayList<Item>();\r\n		cartItems.add(new Item("Apple iPad", 150.0));\r\n		cartItems.add(new Item("SamSung Galaxy", 200.0));\r\n\r\n		return cartItems;\r\n	}\r\n\r\n\r\n----------------------------------------------------------------------\r\npackage com.javapassion.examples;\r\n \r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.ui.Model;\r\nimport org.springframework.web.bind.annotation.PathVariable;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RequestMethod;\r\n\r\n@Controller\r\n@RequestMapping("/helloworld")\r\npublic class MyController{\r\n	\r\n	// Handle URI template, receive it as a String type\r\n	@RequestMapping(value="/helloString/{helloId}", method = RequestMethod.GET)\r\n	public String helloURITemplate(@PathVariable String helloId, Model model){\r\n \r\n		model.addAttribute("message"+helloId, "message"+helloId + " is selected!");\r\n		return "mypage"+helloId;\r\n	}\r\n	\r\n	// Handle URI template, receive it as a int type\r\n	@RequestMapping(value="/helloint/{helloId}", method = RequestMethod.GET)\r\n	public String helloURITemplate2(@PathVariable int helloId, Model model){\r\n		\r\n		model.addAttribute("message"+helloId, "message"+helloId + " is selected!");\r\n		return "mypage"+helloId;\r\n	}\r\n	\r\n	// Handle URI template, receive it as a int type\r\n	@RequestMapping(value="/helloint/{helloId}/{number}", method = RequestMethod.GET)\r\n	public String helloURITemplate3(@PathVariable int helloId, @PathVariable int number, Model model){\r\n		\r\n		int result = helloId+number;\r\n		model.addAttribute("message"+helloId, "message"+helloId + " is selected!");\r\n		model.addAttribute("mynumber", result);\r\n		return "mypage"+helloId;\r\n	}\r\n	\r\n}\r\n\r\n----------------------------------------------------------------------\r\n\r\n\r\n	@RequestMapping(value = "/hello/{helloId}", method = RequestMethod.GET, params = "myCity=Boston")\r\n	public String helloURIparams(@PathVariable int helloId, @RequestParam("myCity") String city, Model model) {\r\n\r\n		model.addAttribute("message" + helloId, "I live in " + city);\r\n		return "mypage" + helloId;\r\n	}', '', '', 52, 0),
(1056, '', '서대영', '', '2012-02-18 17:10:56', 'Spring', '[Spring MVC] View Resolver', 'view 의 아이디와 실제 구현을 맵핑해줌\r\nbean 으로 spring-servlet.xml 에 등록해주면 됨\r\n\r\n----------------------------------------------------------------------\r\n\r\n    <bean id="viewResolver"\r\n        class="org.springframework.web.servlet.view.InternalResourceViewResolver">\r\n        <property name="prefix">\r\n            <value>/WEB-INF/pages/</value>\r\n        </property>\r\n        <property name="suffix">\r\n            <value>.jsp</value>\r\n        </property>\r\n    </bean>\r\n\r\n----------------------------------------------------------------------\r\n\r\n	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">\r\n		<beans:property name="prefix" value="/WEB-INF/views/" />\r\n		<beans:property name="suffix" value=".jsp" />\r\n	</beans:bean>', '', '', 2, 0),
(1057, '', '서대영', '', '2012-02-19 02:40:53', 'Spring', '[Spring MVC] Request Handler Arguments & Return Type', '[ Arguments ]\r\ninterface Model\r\nclass ModelMap\r\nclass java.util.Map\r\n\r\naddAttribute("name", value) 해주면\r\nview 에서 el  로 받아 쓸 수 있음\r\n\r\n[ Return Type ]\r\nModelAndView\r\nString : Local View Name\r\nvoid : URI = View Name\r\n@ResponseBody String : View  없이 자체 출력 (Json 이나 XML 출력)', '', '', 14, 0),
(1058, '', '서대영', '', '2012-02-19 17:46:22', 'Spring', '[Spring MVC] Automatic key or view generation', '[ Key ]\r\nmodelMap.addAttribute() 나 ModelAndView.addObejct() 에 value 밖에 안 주는 경우\r\n단순 클래스는 클래스 이름이 Model 의 Key 가 되고\r\n컬랙션은 Colleciton<name> 이면 nameList 가 Key 가 됨\r\n\r\n[ View ]\r\nhandlerMethod 의 return type 이 void 이거나 ModelAndView 인데 view 가 세팅되지 않은 경우\r\n@RequestMapping(value = "name") 에서 name 값이 value 가 됨\r\n\r\n\r\n----------------------------------------------------------------------\r\npackage com.javapassion.examples;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.ui.ModelMap;\r\nimport org.springframework.web.bind.annotation.ModelAttribute;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RequestMethod;\r\nimport org.springframework.web.servlet.ModelAndView;\r\n\r\n@Controller\r\n@RequestMapping("/helloworld")\r\npublic class MyController {\r\n\r\n	// Automatic key generation for ModelMap attribute\r\n	@RequestMapping(value = "/automaticKeyGeneration_ModelMap", method = RequestMethod.GET)\r\n	public String handleRequest1(ModelMap modelMap) {\r\n\r\n		List<Item> cartItems = new ArrayList<Item>();\r\n		cartItems.add(new Item("Apple", 10.0));\r\n		cartItems.add(new Item("Orange", 20.0));\r\n\r\n		User user = new User("Sang Shin");\r\n\r\n		// This is the same as modelMap.addAttribute("itemList", cartItems);\r\n		modelMap.addAttribute(cartItems); // "itemList" is\r\n														// automatically\r\n														// generated as a key\r\n\r\n		// This is the same as modelMap.addAttribute("user", user);\r\n		modelMap.addAttribute(user); // "user" is automatically generated as a\r\n										// key\r\n\r\n		return "shoppingCart";\r\n	}\r\n\r\n	// Automatic key generation for ModelAndView attribute\r\n	@RequestMapping(value = "/automaticKeyGeneration_ModelAndView", method = RequestMethod.GET)\r\n	// Return type is ModelAndView\r\n	// ModelAndView object is created inside the handler method\r\n	public ModelAndView handleRequest2() {\r\n\r\n		List<Item> cartItems = new ArrayList<Item>();\r\n		cartItems.add(new Item("Apple", 10.0));\r\n		cartItems.add(new Item("Orange", 20.0));\r\n\r\n		User user = new User("Sang Shin");\r\n\r\n		// &#65533;displayShoppingCart&#65533; is logical view\r\n		ModelAndView mav = new ModelAndView("shoppingCart2");\r\n\r\n		// This is the same as mav.addObject(&#65533;itemList&#65533;, cartItems);\r\n		mav.addObject(cartItems); // &#65533;itemList&#65533; is automatically generated as a\r\n									// key\r\n\r\n		// This is the same as mav.addObject(&#65533;user&#65533;, user);\r\n		mav.addObject(user); // &#65533;user&#65533; is automatically generated as a key\r\n\r\n		return mav;\r\n	}\r\n\r\n	// Automatic view generation on ModelandView\r\n	@RequestMapping(value = "/automaticViewGeneration", method = RequestMethod.GET)\r\n	// Return type is ModelAndView\r\n	// ModelAndView object is created inside the handler method\r\n	public ModelAndView handleRequest3() {\r\n\r\n		List<Item> cartItems = new ArrayList<Item>();\r\n		cartItems.add(new Item("Apple", 10.0));\r\n		cartItems.add(new Item("Orange", 20.0));\r\n\r\n		User user = new User("Sang Shin");\r\n\r\n		// "automaticViewGenerationis" is the logical view because\r\n		// view was not set explicitly\r\n		ModelAndView mav = new ModelAndView();\r\n\r\n		// This is the same as mav.addObject(&#65533;itemList&#65533;, cartItems);\r\n		mav.addObject(cartItems); // &#65533;itemList&#65533; is automatically generated as a\r\n									// key\r\n\r\n		// This is the same as mav.addObject(&#65533;user&#65533;, user);\r\n		mav.addObject(user); // &#65533;user&#65533; is automatically generated as a key\r\n\r\n		return mav;\r\n	}\r\n\r\n	// Another way of creating model attribute of collection object\r\n	@ModelAttribute("itemList2")\r\n	public List<Item> populateSubjectList() {\r\n\r\n		List<Item> cartItems = new ArrayList<Item>();\r\n		cartItems.add(new Item("Apple iPad", 150.0));\r\n		cartItems.add(new Item("SamSung Galaxy", 200.0));\r\n\r\n		return cartItems;\r\n	}\r\n\r\n}', '', '', 5, 0),
(1059, '', '서대영', '', '2012-02-19 17:48:38', 'JSTL', '이상적인 list Model 을 Table 에 출력하기', 'empty 를 사용한다.\r\n\r\n----------------------------------------------------------------------\r\n	<table border="1">\r\n		<thead>\r\n			<tr>\r\n				<th>Shopper''s Name</th>\r\n				<th>Item''s Name</th>\r\n				<th>Item''s Price</th>\r\n			</tr>\r\n		</thead>\r\n		<tbody>\r\n			<c:forEach var="item" items="${itemList}">\r\n				<tr>\r\n					<td>${user.name}</td>\r\n					<td>${item.itemName}</td>\r\n					<td>${item.price}</td>\r\n				</tr>\r\n			</c:forEach>\r\n			<c:if test="${empty itemList}">\r\n				<tr>\r\n					<td colspan="5">No items found</td>\r\n				</tr>\r\n			</c:if>\r\n		</tbody>\r\n	</table>', '', '', 14, 0),
(1060, '', '서대영', '', '2012-02-20 19:35:03', 'Spring', '[Spring MVC] XML Setting', '[ Spring MVC 관련 Anotation 활성화 ]\r\n	<!-- Enables the Spring MVC @Controller programming model -->\r\n	<annotation-driven />\r\n\r\n[ Controller 없이 바로 View 로 표시 ]\r\n<!-- The url /myhome immediately maps to myhome view -->\r\n<view-controller path="/myhome" view-name="myhome" />\r\n\r\n[ URI 와 Static 파일 경로 맵핑 ]\r\n	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->\r\n	<resources mapping="/resources/**" location="/resources/" />', '', '', 4, 0),
(1061, '', '서대영', '', '2012-02-21 12:25:21', 'JUnit', 'BDD Best Pratice implemeting Stack', 'import static org.junit.Assert.*;\r\n\r\nimport org.junit.Before;\r\nimport org.junit.Ignore;\r\nimport org.junit.Test;\r\n\r\npublic class StackShould {\r\n	\r\n	private Stack stack;\r\n	\r\n	@Before\r\n	public void setUp() {\r\n		stack = new Stack();\r\n	}\r\n\r\n	@Test\r\n	public void beInstantiable() {\r\n		assertNotNull(stack);\r\n		assertEquals("Stack Size.", 0, stack.size());\r\n	}\r\n	\r\n	@Test\r\n	public void notBeEmptyAfterPush() {\r\n		stack.push(2);\r\n		assertEquals("Stack Size.", 1, stack.size());\r\n	}\r\n	\r\n	@Test\r\n	public void popWhatwasLastPushed() {\r\n		stack.push(2);\r\n		assertEquals("Pushed Value.", 2, stack.pop());\r\n		\r\n	}\r\n	\r\n	@Test\r\n	public void popInReversOrderOfPushed() {\r\n		stack.push(2);\r\n		stack.push(4);\r\n		assertEquals("Last pushed", 4, stack.pop());\r\n		assertEquals("First pushed", 2, stack.pop());\r\n	}\r\n	\r\n	@Test\r\n	//@Ignore\r\n	public void knowHowManyElementItHolds() {\r\n		assertEquals(0, stack.size());\r\n		stack.push(2);\r\n		assertEquals(1, stack.size());\r\n		stack.push(4);\r\n		assertEquals(2, stack.size());\r\n		stack.pop();\r\n		assertEquals(1, stack.size());\r\n		stack.pop();\r\n		assertEquals(0, stack.size());\r\n	}\r\n	\r\n	@Test(expected=StackPushedWhenFull.class)\r\n	public void throwWhenPushedWhenFull() {\r\n		fillStack();\r\n		\r\n		stack.push(99);\r\n	}\r\n	\r\n	@Test\r\n	public void throwWhenPushedWhenFullTheOldWay() {\r\n		fillStack();\r\n		\r\n		try {\r\n			stack.push(99);\r\n			fail("should be thrown");\r\n		} catch (StackPushedWhenFull expected) {\r\n		}\r\n	}\r\n\r\n	private void fillStack() {\r\n		for(int i = 0; i< Stack.MAX_SIZE; i++) {\r\n			stack.push(i);			\r\n		}\r\n	}\r\n\r\n}\r\n------------------------------------------------------------\r\n\r\n\r\npublic class Stack {\r\n	\r\n	public static final int MAX_SIZE = 10;\r\n	\r\n	private int[] data = new int[MAX_SIZE];\r\n	private int top;\r\n\r\n	public int size() {\r\n		return top;\r\n	}\r\n\r\n	public void push(int value) {\r\n		if(top < MAX_SIZE) \r\n			data[top++] = value;\r\n		else\r\n			throw new StackPushedWhenFull();\r\n	}\r\n	\r\n	public int pop() {		\r\n		return data[--top];\r\n	}\r\n\r\n}\r\n------------------------------------------------------------\r\n\r\npublic class StackPushedWhenFull extends RuntimeException {\r\n\r\n}\r\n', '', '', 4, 0),
(1398, 'dale.seo', '', '', '2015-04-24 22:16:59', '', 'Regular Expressions 정규식', 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Using_parenthesized_substring_matches', NULL, '', 5, 0),
(1063, '', '서대영', '', '2012-02-21 21:31:32', 'Spring', '[Spring MVC] Tag Libraray', '[ Library 로드 ]\r\n<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>\r\n\r\n[ 종류 ]\r\nmodelAttribute : commandName 하고 동일\r\n\r\n\r\n[ 예 ]\r\n		<form:form modelAttribute="account" action="account" method="post">\r\n		  	<fieldset>		\r\n				<legend>Account Fields</legend>\r\n				<p>\r\n					<form:label	for="name" path="name" cssErrorClass="error">Name</form:label><br/>\r\n					<form:input path="name" /> <form:errors path="name" />			\r\n				</p>\r\n				<p>	\r\n					<form:label for="balance" path="balance" cssErrorClass="error">Balance</form:label><br/>\r\n					<form:input path="balance" /> <form:errors path="balance" />\r\n				</p>\r\n				<p>\r\n					<form:label for="equityAllocation" path="equityAllocation" cssErrorClass="error">Equity Allocation</form:label><br/>\r\n					<form:input path="equityAllocation" /> <form:errors path="equityAllocation" />\r\n				</p>\r\n				<p>	\r\n					<form:label for="renewalDate" path="renewalDate" cssErrorClass="error">Renewal Date</form:label><br/>\r\n					<form:input path="renewalDate" /> <form:errors path="renewalDate" />\r\n				</p>\r\n				<p>	\r\n					<input type="submit" />\r\n				</p>\r\n			</fieldset>\r\n		</form:form>', '', '', 9, 0),
(1064, '', '서대영', '', '2012-02-21 22:59:21', 'JSP', '항상 쓰는 tag library', '<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>\r\n<%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt" %>\r\n<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>', '', '', 1, 0),
(1065, '', '서대영', '', '2012-02-22 11:30:16', 'Refactoring', 'Code Smell & Refactoring', '1) Poor name → Change name\r\n2) Comments → Make superfluous\r\n3) Large (multi-responsiblity) method → Extract method\r\n4) Feature envy → Move method\r\n5) Duplicate code acroos classes → Extract superclass\r\n6) Switch-class → Replace conditional with polymorphism\r\n7) Multi-responsibility loop → Splirt loop\r\n8) Large (multi-responsiblity) class → Extract class\r\n ', '', '', 2, 0),
(1066, '', '서대영', '', '2012-02-22 12:28:48', 'JUnit', 'Tricks to write tests for Legacy Code', 'Dependency Injection 은 잘 활용한다. (setXXXforTesting)\r\n\r\n1) Extract Interface\r\n - Best Refactoring\r\n - Imporves design by decoupling class under tset from source of pain\r\n - Let the test implement the interface you have created\r\n\r\n2) Subclass and override\r\n - When the test target has depengencies on Singletons\r\n - Inherit a new class from the Singleton and overide the method the test target calls\r\n - Let the test create the inherited class\r\n - Let the test target use the inherited class by seting it to the tset target\r\n\r\n3) Introduce Instance Delegator\r\n - When the test target has dependencies on Utitlities made of all static methods\r\n - Create a not-static method which has same function as the static method by calling it insdie\r\n - Inherit a new class from the Utility and override the non-static method to return whatever a test wants it to return\r\n - Inject a the inherited class into the test target and make it use the not-static method instaed of the static method\r\n', '', '', 0, 0),
(1067, '', '서대영', '', '2012-02-22 16:42:28', 'Pattern', 'Pattterns I learn from AJP', 'Abstract Server : Stick to interface\r\nState Pattern\r\nStrategy Paattern\r\nAdaptor Pattern : Interface 할 메서드 명과 implemet 할 클래스 메서드명이 상이할 때', '', '', 0, 0),
(1068, '', '서대영', '', '2012-02-23 11:13:21', 'Refactoring', 'Reusable 한 모듈 만드는 방법', '그 Class 가 가지는 모든 dependencis 를 Interface 로 만들면 된다.\r\n그러면 사용하는 측에서 interface 만 구현해서 사용하면 됨.', '', '', 0, 0),
(1069, '', '서대영', '', '2012-02-23 15:10:01', 'Spring', '[Spring MVC] Validation', 'http://blog.naver.com/PostView.nhn?blogId=clotho95&logNo=140150162578\r\nSpring 3.1 부터 @Valid 대신 @Validated 사용\r\n\r\n[ Annotation 종류 ]\r\n@NotNull\r\n@Size(min=1, max=25)\r\n@NumberFormat(style=Style.CURRENCY)\r\n@NumberFormat(style=Style.PERCENT)\r\n@Future\r\n@Past\r\n\r\n[ Annotation 활용 ]\r\n* Dependency\r\n		<!-- JSR 303 with Hibernate Validator -->\r\n		<dependency>\r\n			<groupId>javax.validation</groupId>\r\n			<artifactId>validation-api</artifactId>\r\n			<version>1.0.0.GA</version>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.hibernate</groupId>\r\n			<artifactId>hibernate-validator</artifactId>\r\n			<version>4.0.2.GA</version>\r\n		</dependency>\r\n* Bean(Domain) 클래스에 Annotation 추가\r\n	@NotNull\r\n	@Size(min=1, max=25)\r\n	private String name;\r\n* Controller 클래스의 Request Handler 매서드의 form 파라미터에 Annotation 추가\r\n	@RequestMapping(method=RequestMethod.POST)\r\n	public String create(@Valid Account account, BindingResult result) {\r\n		\r\n		if (result.hasErrors()) {\r\n			return "account/createForm";\r\n		}\r\n		this.accounts.put(account.assignId(), account);\r\n		return "redirect:/account/" + account.getId();\r\n	}\r\n* jsp 에 Spring from tag 추가\r\n<form:errors path="*" />\r\n\r\n[ InitBinder 이용]\r\n* Validator 클래스 작성\r\npublic class AccountValidator implements Validator{\r\n\r\n	public boolean supports(Class clazz) {\r\n		//just validate the Account instances\r\n		return Account.class.isAssignableFrom(clazz);\r\n\r\n	}\r\n\r\n	public void validate(Object target, Errors errors) {\r\n		\r\n		ValidationUtils.rejectIfEmptyOrWhitespace(errors, "name",\r\n				"required.userName", "Field name is required.");\r\n\r\n		Account account = (Account)target;\r\n		\r\n		if(account.getRenewalDate().before(new Date())){\r\n			errors.rejectValue("renewalDate", 			// field name\r\n							   "value.renewalDate"); // error code\r\n		}\r\n		\r\n	}\r\n	\r\n}\r\n\r\n* Validation 클래스를 만들고 Request Handler 매서드에서 바로 사용하기\r\npublic class UserValidator implements Validator {\r\n\r\n	public boolean supports(Class clazz) {\r\n		return User.class.isAssignableFrom(clazz);\r\n	}\r\n\r\n	public void validate(Object target, Errors errors) {\r\n		User user = (User) target;\r\n		List<String> hobbyOptions = Arrays.asList("swimming", "golf", "walking");\r\n		if (!hobbyOptions.contains(user.getHobby().toLowerCase())) {\r\n			errors.rejectValue("hobby", "value.hobby", "Invalid Hobby!");\r\n		}\r\n	}\r\n\r\n}\r\n---------------------------------------------------------------------\r\n	@RequestMapping(method = RequestMethod.POST)\r\n	public String post(@Valid User user, BindingResult result) {\r\n		new UserValidator().validate(user, result);\r\n		if (result.hasErrors()) {\r\n			System.out.println(result.getErrorCount());\r\n			user = new User();\r\n			return "home";\r\n		}\r\n		return "home";\r\n	}	\r\n\r\n\r\n* Controller 클래스에 initBinder 매서드 추가\r\n   @InitBinder\r\n    protected void initBinder(WebDataBinder binder) {\r\n        binder.setValidator(new AccountValidator());\r\n    }\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://dev.anyframejava.org/docs/anyframe/plugin/foundation/4.6.1/reference/html/ch13.html', 'http://dev.anyframejava.org/docs/anyframe/plugin/foundation/4.6.1/reference/html/ch13.html', '', 38, 0),
(1070, '', '서대영', '', '2012-02-24 16:49:52', 'Spring', '[Spring MVC] Exception Handling', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://stewie38.tistory.com/59', 'http://stewie38.tistory.com/59', '', 4, 0),
(1071, '', '서대영', '', '2012-02-26 01:17:21', 'Spring', '[Spring MVC] Locale 국제화 (메시지 소스)', 'MessageSourceAware 나 이를 상속한 ApplicationContextAware 를 구현하면 context.getMessage 매서드를 이용하여 메세지를 받아올 수 있따.\r\n\r\n------------------ JSTL 로 JSP 에서 불러오기 ----------------------------\r\n\r\n<fmt:message key="category.name"/>\r\n\r\n----------------------------------------------------------------------\r\nmessages.properties\r\nmessages_ko.properties\r\n를 사용할 수 있음\r\n----------------------------------------------------------------------\r\n\r\n	<!-- Application Message Bundle -->\r\n	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">\r\n		<property name="basename" value="/WEB-INF/messages/messages" />\r\n		<property name="cacheSeconds" value="0" />\r\n	</bean>\r\n\r\n아래까지 추가하면 파라미터로 로케일을 받을 수 있다.\r\n----------------------------------------------------------------------\r\n\r\n	<!-- Configures Handler Interceptors -->\r\n	<mvc:interceptors>\r\n		<!-- Changes the locale when a ''locale'' request parameter is sent; e.g. \r\n			/?locale=de -->\r\n		<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" />\r\n	</mvc:interceptors>\r\n\r\n	<!-- Saves a locale change using a cookie -->\r\n	<bean id="localeResolver"\r\n		class="org.springframework.web.servlet.i18n.CookieLocaleResolver" />', '', '', 26, 0),
(1072, '', '서대영', '', '2012-03-03 00:15:03', 'Spring', '[Spring MVC] Tiles', '1. pop.xml\r\n--------------------------------------------------------------------\r\n\r\n        <!-- Tiles -->\r\n        <dependency>\r\n            <groupId>org.apache.tiles</groupId>\r\n            <artifactId>com.springsource.org.apache.tiles</artifactId>\r\n            <version>2.1.2.osgi</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.apache.tiles</groupId>\r\n            <artifactId>com.springsource.org.apache.tiles.core</artifactId>\r\n            <version>2.1.2.osgi</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.apache.tiles</groupId>\r\n            <artifactId>com.springsource.org.apache.tiles.jsp</artifactId>\r\n            <version>2.1.2</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.apache.tiles</groupId>\r\n            <artifactId>com.springsource.org.apache.tiles.servlet</artifactId>\r\n            <version>2.1.2</version>\r\n        </dependency>\r\n\r\n\r\n        <repository>\r\n            <id>com.springsource.repository.bundles.release</id>\r\n            <name>SpringSource Enterprise Bundle Repository - SpringSource Releases</name>\r\n            <url>http://repository.springsource.com/maven/bundles/release</url>\r\n        </repository>\r\n        <repository>\r\n            <id>com.springsource.repository.bundles.external</id>\r\n            <name>SpringSource Enterprise Bundle Repository - External Releases</name>\r\n            <url>http://repository.springsource.com/maven/bundles/external</url>\r\n        </repository>\r\n        <repository>\r\n            <id>com.springsource.repository.bundles.snapshot</id>\r\n            <name>SpringSource Enterprise Bundle Repository - Snapshot Releases</name>\r\n            <url>http://repository.springsource.com/maven/bundles/snapshot</url>\r\n        </repository> \r\n--------------------------------------------------------------------\r\n\r\n2. Tiles definition file  - /WEB-INF/tiles.xml\r\n--------------------------------------------------------------------\r\n<?xml version="1.0" encoding="UTF-8"?>\r\n<!DOCTYPE tiles-definitions PUBLIC "-//Apache Software Foundation//DTD Tiles Configuration 3.0//EN" "http://tiles.apache.org/dtds/tiles-config_3_0.dtd">\r\n<tiles-definitions>  \r\n	<definition name=".page" template="/WEB-INF/views/template/default/template.jsp">\r\n		<put-attribute name="header" value="/WEB-INF/views/template/default/header.jsp" />	\r\n		<put-attribute name="content" value="/WEB-INF/views/template/default/content.jsp" />	\r\n		<put-attribute name="footer" value="/WEB-INF/views/template/default//footer.jsp" />	 \r\n	</definition>   \r\n   	<definition name="*" extends=".page">  \r\n		<put-attribute name="content" value="/WEB-INF/views/{1}.jsp" />\r\n	</definition> \r\n	<definition name="*/*" extends=".page"> \r\n		<put-attribute name="content" value="/WEB-INF/views/{1}/{2}.jsp" />\r\n	</definition>  \r\n	<definition name="*/*/*" extends=".page">  \r\n		<put-attribute name="content" value="/WEB-INF/views/{1}/{2}/{3}.jsp" />\r\n	</definition>  \r\n</tiles-definitions> \r\n--------------------------------------------------------------------\r\n\r\nspring-context.xml\r\n----------------------------------------------------------------------\r\n    <!-- Tiles view resolver -->\r\n	<beans:bean id="viewResolver"\r\n		class="org.springframework.web.servlet.view.UrlBasedViewResolver">\r\n		<beans:property name="order" value="1" />\r\n		<beans:property name="viewClass">\r\n			<beans:value>\r\n				org.springframework.web.servlet.view.tiles2.TilesView\r\n			</beans:value>\r\n		</beans:property>\r\n	</beans:bean>\r\n\r\n    <!-- Tiles view configurer -->\r\n	<beans:bean id="tilesConfigurer"\r\n		class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">\r\n		<beans:property name="definitions">\r\n			<beans:list>\r\n				<beans:value>/WEB-INF/tiles.xml</beans:value>\r\n			</beans:list>\r\n		</beans:property>\r\n	</beans:bean>\r\n\r\n	<!-- Resolves views selected for rendering by @Controllers to .jsp resources \r\n		in the /WEB-INF/views directory -->\r\n	<beans:bean\r\n		class="org.springframework.web.servlet.view.InternalResourceViewResolver">\r\n		<beans:property name="order" value="2" />\r\n		<beans:property name="prefix" value="/WEB-INF/views/" />\r\n		<beans:property name="suffix" value=".jsp" />\r\n	</beans:bean>\r\n-------------------------------------------------------------------\r\n\r\n4. 템플릿 파일 작성\r\nheader - /tiles/header.jsp\r\nfooter - /tiles/footer.jsp\r\nmenu - /tiles/menu.jsp\r\n\r\n5. Controller 는 tiles.xml 에 있는 definition name 를 Logical View 이름으로 사용함', '', '', 3, 0),
(1073, '', '서대영', '', '2012-03-03 17:55:17', 'Spring', '[Spring MVC] ContentNegotiatingViewResolver', '3.2 이후로는 ContentNegotiatingViewResolver에서 직접 세부 사항을 세팅하지 않고,\r\nContentNegotiationManager에게 세팅을 위함하므로 다음 방식은 더 이상 사용하지 않는다.\r\n\r\n=========================================================================\r\n\r\n\r\nMediaType(확장자 or Accept 헤더)에 따라 다른 View를 제공할 수 있다.\r\nmediaTypes 프라퍼티에 맵에 등록된 확장자나 Accept 헤더값이 들어왔을 경우에만 작동한다.\r\ndefaultViews 프라퍼티에 등록된 View 중 최적의 View를 제공한다.\r\ndefaultViews 에서 적절한 View를 찾지 못하면 viewResolvers 프라퍼티에 등록된 다른 ViewResolver를 통해 View를 제공한다.\r\n\r\n====================================================================\r\n	<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">\r\n		<property name="order" value="0" />\r\n		<property name="mediaTypes">\r\n			<map>\r\n				<entry key="atom" value="application/atom+xml" />\r\n				<entry key="html" value="text/html" />\r\n				<entry key="pdf" value="application/pdf" />\r\n				<entry key="xsl" value="application/vnd.ms-excel" />\r\n				<entry key="xml" value="application/xml" />\r\n				<entry key="json" value="application/json" />\r\n			</map>\r\n		</property>\r\n		<property name="viewResolvers">\r\n			<list>\r\n				<!-- Tiles view resolver -->\r\n				<bean class="org.springframework.web.servlet.view.UrlBasedViewResolver">\r\n					<property name="order" value="1" />\r\n					<property name="viewClass">\r\n						<value>\r\n							org.springframework.web.servlet.view.tiles2.TilesView\r\n						</value>\r\n					</property>\r\n				</bean>\r\n				<bean class="org.springframework.web.servlet.view.BeanNameViewResolver">\r\n					<property name="order" value="2" />\r\n				</bean>\r\n				<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">\r\n					<property name="order" value="3" />\r\n					<property name="prefix" value="/WEB-INF/views/" />\r\n					<property name="suffix" value=".jsp" />\r\n				</bean>\r\n			</list>\r\n		</property>\r\n		<property name="defaultViews">\r\n			<list>\r\n				<bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView">\r\n					<property name="objectMapper" ref="customObjectMapper" />\r\n				</bean>\r\n			</list>\r\n		</property>\r\n	</bean>\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://stove99.tistory.com/19', NULL, '', 26, 0),
(1074, '', '서대영', '', '2012-03-04 09:31:33', 'Spring', '[Spring MVC] Resttemplate', 'Rest Server 가 아닌 Rest Client 프로그램을 만들 때 사용하므로 주의\r\n\r\nHttpClient 보다 편리하게 REST 서비스를 호출해서 객체에 맵핑할 수 있다\r\n\r\n-------------------------------------------------------------------\r\npackage com.javapassion.examples.restclient;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\nimport org.springframework.web.client.RestTemplate;\r\n\r\npublic class Main {\r\n	\r\n	private static RestTemplate restTemplate = new RestTemplate();\r\n\r\n	public static void main(String[] args) {\r\n\r\n		String testURL = "http://localhost:8080/mvc_rest_json/accounts/{id}.json";\r\n		\r\n		Map<String, String> variables = new HashMap<String, String>(1);\r\n		variables.put("id", "1");\r\n		String jsonResult = restTemplate.getForObject(testURL,\r\n				String.class, // response type\r\n				variables);	  // variables for URI template\r\n		System.out.println("Result " + jsonResult);\r\n		\r\n	}\r\n\r\n}', '', '', 10, 0),
(1075, '', '서대영', '', '2012-03-05 20:14:39', 'Library', 'MultipartRequest', '생성자로 객체를 생성하는 순간 파일을 디스크에 업로드 시켜버림\r\n\r\n		MultipartRequest multipartRequest = new MultipartRequest(request, "D:/tmp/", 1024*100, "UTF-8", new DefaultFileRenamePolicy());\r\n			\r\n		for (String param : (List<String>) Collections.list(multipartRequest.getFileNames())) {\r\n			String fileSystemName = multipartRequest.getFilesystemName(param);\r\n			String OriginalFileName = multipartRequest.getOriginalFileName(param);\r\n			File file = multipartRequest.getFile(param);\r\n			// file.delete();\r\n		}\r\n\r\n\r\n[ Doumantation ]\r\nhttp://www.servlets.com/cos/javadoc/com/oreilly/servlet/MultipartRequest.html\r\n\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/callzone?Redirect=Log&logNo=140055259392', 'http://blog.naver.com/callzone?Redirect=Log&logNo=140055259392', '', 10, 0),
(1076, '', '서대영', '', '2012-03-06 21:55:23', 'Java', 'How to interate a Map', '	Map <Integer,String> map = new HashMap<Integer, String>();\r\n		map.put(0, "Value1");map.put(1, "Value2");\r\n		\r\n		for (Map.Entry<Integer, String> entry : map.entrySet()) {\r\n			\r\n		}\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/johnforstar?Redirect=Log&logNo=30132183829', 'http://blog.naver.com/johnforstar?Redirect=Log&logNo=30132183829', '', 10, 0),
(1077, '', '서대영', '', '2012-03-06 22:05:02', 'Servlet', 'How to interate parameters', '		System.out.println("----------------------------------------------");\r\n		SortedMap<String, String[]> sMap = Collections.synchronizedSortedMap(new TreeMap<String, String[]>(request.getParameterMap()));\r\n		synchronized (sMap) {\r\n			for (String key : sMap.keySet()) {\r\n				String[] values = sMap.get(key);\r\n				for (String value : values) {\r\n					System.out.println(key + " : " + value);\r\n				}\r\n			}\r\n		}\r\n		System.out.println("----------------------------------------------");\r\n\r\n\r\n---------------------------------------------------------------\r\nSortedMap<String,String[]> sMap = Collections.synchronizedSortedMap(new TreeMap<String,String[]>(request.getParameterMap()));\r\n\r\n synchronized(sMap)\r\n {\r\n     for(String key : sMap.keySet())\r\n     {\r\n         String[] value = sMap.get(key);\r\n         for(int i=0; i<value.length; i++)\r\n        {\r\n            out.println(key + " : " + value[i] + "<br>");\r\n         }\r\n      }\r\n  }\r\n\r\n--------------------------\r\n\r\n원시 웹페이지에서 체크박스 또는 라디오 버튼, 그리고 입력상자의 이름을 같은 이름으로 하여\r\n다른 웹페이지로 전달하고자 할 때,\r\n전달 받는 웹페이지에서 처리하는 방법으로,\r\n\r\n1. request.getQueryString() 으로 전달받는 방법\r\n\r\n    String queryString = request.getQueryString();\r\n    out.print(queryString + "<br><br>----<br><br>");\r\n\r\n2. Enumeration 객체를 통해 전달 받는 방법.\r\n\r\n    Enumeration e = request.getParameterNames();\r\n    while( e.hasMoreElements())\r\n    {\r\n        String   name   = (String)e.nextElement();\r\n        String[] values = request.getParameterValues(name);\r\n        for(int i=0; i<values.length; i++)\r\n        {\r\n            out.println(name + " : " + values[i] + "<br>");\r\n         }\r\n     }\r\n\r\n3. request.getParameterMap()을 통해 전달 받는 방법.\r\n\r\n   SortedMap<String,String[]> sMap = Collections.synchronizedSortedMap\r\n                           ( new TreeMap<String,String[]>(request.getParameterMap()));\r\n\r\n   synchronized(sMap)\r\n   {\r\n          for(String key : sMap.keySet())\r\n         {\r\n               String[] value = sMap.get(key);\r\n               for(int i=0; i<value.length; i++)\r\n               {\r\n                     out.println(key + " : " + value[i] + "<br>");\r\n                }\r\n           }\r\n     }\r\n\r\n---------------\r\n\r\n3.번 항목은 request.getParameterMap() 메소드를 통해 전달받은 파라메터 리스트를\r\nTreeMap 객체를 통해 SortedMap 인터페이스를 구현하여, 전달받은 파라메터 리스트의\r\n파라메터 이름순으로 정렬하는 기능까지 한다.\r\n<String, String[]> Generic은 전달받는 파라메터이름과 값들이 모두 String 타입으로 전달\r\n되기 때문에 설정했으며, 특히 <String[]> 제너릭은, SortedMap.get(key) 메소드가\r\nSortedMap에 담겨있는 [값]을 읽어 반환할 때 벡터타입으로 반환하기 때문에 사용했다.\r\n\r\n전달되는 파라메터가 String paramertName = String parameterValue 형식이기 때문에\r\n(ex:http://xxx.yyy.zzz?AAA=BBB&CCC=DDD&............)\r\n<String, String> 형태의 제너릭을 사용했었는데, ClassCastException을 발생시켰다.\r\n\r\n제너릭과 for(Type variable : Object){}는 JDK 5 이상의 버전에서만 동작한다.\r\n\r\nCollections.synchronizedSortedMap, synchronized() 는 객체의 직렬화(멀티 쓰레드간 충돌\r\n방지)를 위해 사용했다.\r\n\r\n특히, for( in ) 문장을 통해 Map의 특징인 중복불가에 대한 문제도 함께 해결 할 수 있다.\r\n\r\n-------------------\r\n\r\n이 외로, 전통적인 방법으로 Iterator 객체를 사용하는 방법도 있다.\r\n\r\nMap paramMap = new SortedMap(request.getParameterMap());\r\nIterator it = paramMap.keySet().iterator();\r\nString key = null;\r\nString[] value = null;\r\nwhile(it.haNext())\r\n{\r\n    key = it.next();\r\n    value = paramMap.get(key);\r\n    for(int i=0; i<value.length; i++)\r\n    {\r\n        out.println(key + " : " + value[i] + "<br>");\r\n    }\r\n}\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://citrus.tistory.com/284', 'http://citrus.tistory.com/284', '', 15, 0),
(1078, '', '서대영', '', '2012-03-07 16:47:14', 'Java', '정규식', '<< 문법 >>\r\n\r\n   정규표현식은 다음과 같은 문법으로 되어 있습니다. \r\n\r\n       ^ : 문자열의 시작을 나타냅니다. \r\n   \r\n       $ : 문자열의 종료를 나타냅니다. \r\n\r\n       . : 임의의 한 문자를 나타냅니다. (문자의 종류는 가리지 않습니다)\r\n \r\n      | : or를 나타냅니다.\r\n\r\n      ? : 앞 문자가 없거나 하나있음을 나타냅니다. \r\n  \r\n      + : 앞 문자가 하나 이상임을 나타냅니다. \r\n \r\n      * : 앞 문자가 없을 수도 무한정 많을 수도 있음을 나타냅니다.\r\n\r\n\r\n            만약, .* 으로 정규식이 시작한다면 시작하는 문자열과 같은 문자열이 뒤에 없거나 많을 수도 있는 경우에만 일치를 시킵\r\n            니다. 즉, abc 일 경우 시작문자인 a를 기준으로 a가 없을경우와 a가 무한정 많은 경우에도 true를 반환하기 때문에 abc의\r\n           경우는 true를 반환합니다. \r\n\r\n     [] : 문자 클래스를 지정할 때 사용합니다. 문자의 집합이나 범위를 나타내면 두 문자 사이는 ''-'' 기호로 범위를 나타냅니다.\r\n            []내에서 ^ 가 선행하여 나타나면 not 를 나타냅니다. \r\n\r\n     {} : 선행문자가 나타나는 횟수 또는 범위를 나타냅니다. \r\n\r\n           a{3} 인 경우 a가 3번 반복된 경우를 말하며, a{3,}이면 a가 3번 이상 반복인 경우를 말합니다. 또한 a{3,5}인 경우 a가 3번\r\n           이상 5번 이하 반복된 경우를 나타냅니다.\r\n\r\n\r\n\r\n<< 예제 >>\r\n\r\n     이메일 : ^[a-zA-Z0-9]+@[a-zA-Z0-9]+$  or  ^[_0-9a-zA-Z-]+@[0-9a-zA-Z-]+(.[_0-9a-zA-Z-]+)*$ \r\n    \r\n     휴대폰 :  ^01(?:0|1|[6-9]) - (?:\\d{3}|\\d{4}) - \\d{4}$ \r\n \r\n     일반전화 : ^\\d{2,3} - \\d{3,4} - \\d{4}$\r\n\r\n    주민등록번호 : \\d{6} \\- [1-4]\\d{6}\r\n\r\n    IP 주소 : ([0-9]{1,3}) \\. ([0-9]{1,3}) \\. ([0-9]{1,3}) \\. ([0-9]{1,3})\r\n\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/phcs1219?Redirect=Log&logNo=140092773115', NULL, '', 7, 0),
(1079, '', '서대영', '', '2012-03-08 11:35:18', 'Security', 'Burp Suite', '\r\n\r\n* Burp Download URL\r\n : http://portswigger.net/burp/downloadfree.html\r\n\r\n* 실행법\r\n : 커맨드 창에서 아래를 입력하거나 bat 파일로 만들기\r\n java -jar -Xmx256m burpsuite_free_v1.5.jar\r\n\r\n* 기본 세팅\r\n\r\n- Optins 탭 > Display 탭 > Http Message Disply > Font\r\n : 한글 폰트로 바꿔주기\r\n\r\n- Proxy 탭 > Options 탭 > Intercept Server Responses\r\n : 체크 Intercept responses based on the following rules.\r\n\r\n- Options > Connections > Upstream Proxy Servers > Add\r\n : 위에 프록시 서버 정보 추가 (인터넷 사이트 점검할 때만...)\r\n . 168.219.61.252:8080\r\n\r\n\r\n\r\n고급 Tip 1.\r\n\r\nProxy > History Tap 에서 원하는 url 에 오른쪽 버튼 놓고 Send to Repeater 를 선택하면\r\n\r\nRepeater 탭에서 같은 Request 를 반복해서 parameter 값을 변조하면서 테스트해볼 수 있다. (브라우져에서 매번 안해서 편리함)\r\n\r\n\r\n고급 Tip 2.\r\n\r\nProxy > Options 가서 Response 까지 캡쳐하도록 체크하면 Client 단 모든 스크립트를 우회하도록 조작할 수 있다.\r\n\r\n\r\n고급 Tip 3.\r\n\r\nDecoder 탭에 가면 Base64 등으로 인코딩, 디코딩이 가능함\r\n\r\n고급 Tip 4.\r\n\r\n- 비교하고 싶은 Request 를 Send to Comparer 로 보내면,\r\nComparer 에서 쉽게 차이점을 알려준다.\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.portswigger.net/burp/proxy.html', 'http://www.portswigger.net/burp/proxy.html', '', 10, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(1080, '', '서대영', '', '2012-03-11 18:22:21', 'Spring', '[Spring Test] DAO Unit Test Sample', 'package com.javapassion.examples.bank.dao;\r\n\r\nimport static org.junit.Assert.*;\r\n\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\n\r\nimport com.javapassion.examples.bank.services.AccountNotFoundException;\r\nimport com.javapassion.examples.bank.services.DuplicateAccountException;\r\nimport com.javapassion.examples.bank.domain.Account;\r\n\r\npublic class InMemoryAccountDaoTests {\r\n\r\n    private static final int EXISTING_ACCOUNT_NO = 1234;\r\n    private static final int NEW_ACCOUNT_NO = 5678;\r\n\r\n    private Account existingAccount;\r\n    private Account newAccount;\r\n    private InMemoryAccountDao accountDao;\r\n\r\n    @Before\r\n    public void init() {\r\n        existingAccount = new Account(EXISTING_ACCOUNT_NO, 100);\r\n        newAccount = new Account(NEW_ACCOUNT_NO, 200);\r\n        accountDao = new InMemoryAccountDao();\r\n        accountDao.createAccount(existingAccount);\r\n    }\r\n\r\n    @Test\r\n    public void accountExists() {\r\n        assertTrue(accountDao.accountExists(EXISTING_ACCOUNT_NO));\r\n        assertFalse(accountDao.accountExists(NEW_ACCOUNT_NO));\r\n    }\r\n\r\n    @Test\r\n    public void createNewAccount() {\r\n        accountDao.createAccount(newAccount);\r\n        assertEquals(accountDao.findAccount(NEW_ACCOUNT_NO), newAccount);\r\n    }\r\n\r\n    @Test(expected = DuplicateAccountException.class)\r\n    public void createDuplicateAccount() {\r\n        accountDao.createAccount(existingAccount);\r\n    }\r\n\r\n    @Test\r\n    public void updateExistedAccount() {\r\n        existingAccount.setBalance(150);\r\n        accountDao.updateAccount(existingAccount);\r\n        assertEquals(accountDao.findAccount(EXISTING_ACCOUNT_NO), existingAccount);\r\n    }\r\n\r\n    @Test(expected = AccountNotFoundException.class)\r\n    public void updateNotExistedAccount() {\r\n        accountDao.updateAccount(newAccount);\r\n    }\r\n\r\n    @Test\r\n    public void removeExistedAccount() {\r\n        accountDao.removeAccount(existingAccount);\r\n        assertFalse(accountDao.accountExists(EXISTING_ACCOUNT_NO));\r\n    }\r\n\r\n    @Test(expected = AccountNotFoundException.class)\r\n    public void removeNotExistedAccount() {\r\n        accountDao.removeAccount(newAccount);\r\n    }\r\n\r\n    @Test\r\n    public void findExistedAccount() {\r\n        Account account = accountDao.findAccount(EXISTING_ACCOUNT_NO);\r\n        assertEquals(account, existingAccount);\r\n    }\r\n\r\n    @Test(expected = AccountNotFoundException.class)\r\n    public void findNotExistedAccount() {\r\n        accountDao.findAccount(NEW_ACCOUNT_NO);\r\n    }\r\n}\r\n', '', '', 6, 0),
(1081, '', '서대영', '', '2012-03-11 22:27:48', 'JUnit', 'Mockito Tutorial', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://docs.mockito.googlecode.com/hg/latest/org/mockito/Mockito.html', 'http://docs.mockito.googlecode.com/hg/latest/org/mockito/Mockito.html', '', 3, 0),
(1082, '', '서대영', '', '2012-03-11 22:29:19', 'JUnit', 'Mockito VS EasyMock', 'package com.javapassion.examples.bank.controller;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\nimport static org.mockito.Mockito.*;\r\nimport org.junit.*;\r\nimport org.springframework.ui.ModelMap;\r\n\r\nimport com.javapassion.examples.bank.services.AccountService;\r\n\r\npublic class WithdrawControllerMockitoTests {\r\n\r\n	private static final int TEST_ACCOUNT_NO = 1234;\r\n	private static final double TEST_AMOUNT = 50;\r\n	private AccountService mockAccountService;\r\n	private WithdrawController controller;\r\n	\r\n	@Before\r\n	public void setUp() {\r\n		mockAccountService = mock(AccountService.class);\r\n		controller = new WithdrawController(mockAccountService);\r\n	}\r\n	\r\n	@Test\r\n	public void testWithdraw() {\r\n		when(mockAccountService.getBalance(TEST_ACCOUNT_NO)).thenReturn(50.0);		\r\n		\r\n		ModelMap model = new ModelMap();\r\n		String viewName = controller.withdraw(TEST_ACCOUNT_NO, TEST_AMOUNT, model);\r\n	\r\n		verify(mockAccountService).withdraw(TEST_ACCOUNT_NO, TEST_AMOUNT);\r\n		verify(mockAccountService).getBalance(TEST_ACCOUNT_NO);\r\n		\r\n		assertEquals(viewName, "success");\r\n		assertEquals(model.get("accountNo"), TEST_ACCOUNT_NO);\r\n		assertEquals(model.get("balance"), 50.0);\r\n	}\r\n\r\n}\r\n\r\n-----------------------------------------------------------------\r\n-----------------------------------------------------------------\r\n\r\n\r\npackage com.javapassion.examples.bank.controller;\r\n\r\nimport static org.junit.Assert.*;\r\n\r\nimport org.easymock.EasyMock;\r\nimport org.junit.*;\r\nimport org.springframework.ui.ModelMap;\r\n\r\nimport com.javapassion.examples.bank.services.AccountService;\r\n\r\npublic class WithdrawControllerEasyMockTests {\r\n\r\n	private static final int TEST_ACCOUNT_NO = 1234;\r\n	private static final double TEST_AMOUNT = 50;\r\n	private AccountService accountServiceMock;\r\n	private WithdrawController controller;\r\n	\r\n	@Before\r\n	public void setUp() {\r\n		accountServiceMock = EasyMock.createMock(AccountService.class);\r\n		controller = new WithdrawController(accountServiceMock);\r\n	}\r\n	\r\n	@Test\r\n	public void testWithdraw() {\r\n		accountServiceMock.withdraw(TEST_ACCOUNT_NO, TEST_AMOUNT);\r\n		accountServiceMock.getBalance(TEST_ACCOUNT_NO);\r\n		EasyMock.expectLastCall().andReturn(50);\r\n		EasyMock.replay(accountServiceMock);\r\n		\r\n		ModelMap model = new ModelMap();\r\n		String viewName = controller.withdraw(TEST_ACCOUNT_NO, TEST_AMOUNT, model);\r\n		\r\n		EasyMock.verify(accountServiceMock);\r\n		\r\n		assertEquals(viewName, "success");\r\n		assertEquals(model.get("accountNo"), TEST_ACCOUNT_NO);\r\n		assertEquals(model.get("balance"), 50.0);\r\n	}\r\n\r\n}\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://code.google.com/p/mockito/wiki/MockitoVSEasyMock', 'http://code.google.com/p/mockito/wiki/MockitoVSEasyMock', '', 5, 0),
(1083, '', '서대영', '', '2012-03-13 21:44:29', 'JQuery', 'Ajax JSon', '[ JSon Get ]\r\n		function checkAvailability() {\r\n			$.getJSON("account/availability", { name: $(''#name'').val() }, function(availability) {\r\n				if (availability.available) {\r\n					fieldValidated("name", { valid : true });\r\n				} else {\r\n					fieldValidated("name", { valid : false, message : $(''#name'').val() + " is not available, try " + availability.suggestions });\r\n				}\r\n			});\r\n		}\r\n\r\n\r\n\r\n[ JSon Post ]\r\n			$("#account").submit(function() {\r\n				var account = $(this).serializeObject();\r\n				$.postJSON("account", account, function(data) {\r\n					$("#assignedId").val(data.id);\r\n					showPopup();\r\n				});\r\n				return false;				\r\n			});', '', '', 16, 0),
(1086, '', '서대영', '', '2012-03-28 14:03:49', 'Java', 'JVM 튜닝', '[ 공통 ]\r\n-Xms2048m\r\n. Heap 최소 Size정의\r\n-Xmx2048m\r\n. Heap 최대 Size정의 \r\n. 최소 , 최대를 동일하게 설정하여 Memory가 가변적으로 변하는것을 방지하는 것을 권고함\r\n-Dweblogic.SocketReaders=3\r\n. WebLogic Muxer Thread가 시스템 CPU 개수만큼 생성되며 3개 정도면 충분함으로 필요 이상으로 Muxer Thread 생성을 방지\r\n"-Dweblogic.Chunksize=사이즈\r\n(default 4096)"\r\n. Chunk 는 클라이언트와 서버사이드에서 소켓으로부터 데이터를 읽고, 소켓으로 데이터를 쓰는데 사용하는 웹로직 서버 Network Layer 의 메모리 단위로 MTU or MTU 배수로 튜닝\r\n-D_Offline_FileDataArchive=true\r\n. WebLogic9 이상에서 기본적으로 행하는 diagnostic 방지를 위해 옵션 추가 권고.(성능 개선을 위함)\r\n-Djava.net.preferIPv4Stack=true\r\n. IP 버전 4로만 수행하여 Network 성능 향상을 위해서 적용\r\n-verbosegc\r\n. GC 발생시에 로그를 남도록 설정함.(모니터링 용)\r\nexport IBM_HEAPDUMP=true \r\nexport IBM_HEAP_DUMP=true \r\nexport IBM_HEAPDUMP_OUTOFMEMORY=true \r\nexport IBM_JAVADUMP_OUTOFMEMORY=true\r\n. AIX의 경우 thread dump, heap dump에 대한 옵션을 명시적으로 설정이 가능하다.\r\n\r\n[ HP ]\r\n-XX:NewSize=768m\r\n-XX:MaxNewSize=768m\r\n-XX:SurvivorRatio=8\r\n-XX:PermSize=256m\r\n-XX:MaxPermSize=512m\r\n-XX:MaxTenuringThreshold=15\r\n-XX:ParallelGCThreads=4\r\n-XX:+DisableExplicitGC\r\n-XX:-UseAdaptiveSizePolicy\r\n->>>모니터링\r\n-XX:+PrintHeapAtGC \r\n-XX:+PrintGCDetails \r\n-XX:+PrintGCTimeStamps\r\n-XX:+HeapDumpOnOutOfMemoryError\r\n-XX:+HeapDumpOnly \r\nexport _JAVA_BINARY_HEAPDUMP=1 ', '', '', 2, 0),
(1087, '', '서대영', '', '2012-04-01 12:45:41', 'CSS', 'TABLE안에 FORM 삽입시 빈공간 삽입 문제', '<style> form {display:block;} </style>\r\n<style> form {display:inline;} </style>\r\n<style> form {margin:0px;} </style> 같은효과라고 한다.\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://tear230.blog.me/100005122411', 'http://tear230.blog.me/100005122411', '', 3, 0),
(1088, '', '서대영', '', '2012-04-06 12:31:47', 'SVN', 'svn:ignore Commit, Update 방지', '이클립스\r\nhttp://blog.naver.com/whitefre?Redirect=Log&logNo=140100874828\r\n\r\nhttp://pantarei.tistory.com/1783', '', '', 3, 0),
(1089, '', '서대영', '', '2012-04-06 15:05:57', 'JQuery', '.prop() VS .attr()', '$(''.control'').prop(''readOnly'', true);\r\n\r\n또는 속성 선택자를 이용해서 ... $(''div[readOnly]'');\r\n\r\n1.6 부터 값이 없는 속상값(ture or false)은 prop을 사용\r\n\r\nhttp://otamot.com/108\r\n\r\nhttp://api.jquery.com/prop/', '', '', 8, 0),
(1090, '', '서대영', '', '2012-04-06 21:03:28', 'JQuery', 'ReadOnly select 만들기', '$j(''#tbodyResult'').find(''select option:not(:selected)'').prop(''disabled'', true);', '', '', 6, 0),
(1091, '', '서대영', '', '2012-04-18 06:59:10', 'CSS', 'input 글자수 지정', '디자인적인 요소이기 때문에 size 보다는 width 가 권장되며,\r\nem 단위로 저장하면 그나마 잘 먹는다.\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://stackoverflow.com/questions/1480588/input-size-vs-width', 'http://stackoverflow.com/questions/1480588/input-size-vs-width', '', 0, 0),
(1092, '', '서대영', '', '2012-04-21 23:56:56', 'JQuery', 'checkbox 관련', '# 체크된 체크박스의 인덱스 구하기\r\nvar checkboxes = $j(''input[name="chk"]'');\r\nvar index = checkboxes.index(checkboxes.filter('':checked''));', '', '', 3, 0),
(1093, '', '서대영', '', '2012-04-24 12:47:32', 'JQuery', 'key 스트링으로 Object 의 value 값 알아내기', 'var value = obj[''key''];\r\n\r\n\r\n------------------------------------------------------------------\r\n	function appendResultToTable(list) {\r\n		for (var i = displayBeginRow; i < list.length; i++) {\r\n			if (i >= displayFinishRow) break;\r\n			\r\n			var obj = list[i];\r\n			var keys = [''MWSKZ'', ''TAX_RATE'', ''VALID_FR_DT'', ''VALID_TO_DT''];\r\n			\r\n			var $tr = $j(''<tr/>'');\r\n			$j.each(keys, function(key, val) {\r\n				$j(''<td class="td_ac"/>'').append(obj[val]).appendTo($tr);\r\n			});\r\n			$tr.appendTo($j(''#tbodyResult''));\r\n		}\r\n	}', '', '', 2, 0),
(1094, '', '서대영', '', '2012-05-02 15:13:08', 'Java', 'BigDecimal', '정확한 연산을 할 때는 BigDecimal 을 사용할 것.\r\n주의할 점은 생성자에 반드시 문자열을 넘길 것\r\n\r\n\r\n----------------------------------------\r\n	@Test\r\n	public void test() {\r\n		\r\n		String[] amtArr = {"27.48", "45.15", "328.65", "38.86", "10.83"};\r\n		BigDecimal subTotal = new BigDecimal("0");\r\n		\r\n		for (String amt : amtArr) {\r\n			subTotal = subTotal.add(new BigDecimal(amt));\r\n		}\r\n		\r\n		System.out.println(subTotal);\r\n		\r\n	}\r\n------------------------------------------\r\n\r\n\r\nhttp://sjk3736.tistory.com/5\r\n\r\nhttp://cafe.naver.com/ssui.cafe?iframe_url=/ArticleRead.nhn%3Farticleid=171', '', '', 4, 0),
(1095, '', '서대영', '', '2012-05-04 13:03:21', 'Maven', 'Oracle JDBC Driver', '\r\n\r\n<dependencies>\r\n        <dependency>\r\n 	     <groupId>com.oracle</groupId>\r\n	     <artifactId>ojdbc14</artifactId>\r\n	     <version>10.2.0.4.0</version>\r\n        </dependency>\r\n<dependencies> \r\n\r\n <repositories>\r\n	<repository>\r\n		<id>mesir-repo</id>\r\n		<url>http://mesir.googlecode.com/svn/trunk/mavenrepo</url>\r\n	</repository>\r\n</repositories> ', '', '', 1, 0),
(1096, '', '서대영', '', '2012-05-07 11:12:26', 'Unix', 'locale (언어) 관련', '※ LC_ALL 이 LANG 을 우선하므로 반드시 LC_ALL 도 같이 세팅한다.\r\n\r\n* 세션의 locale 확인\r\necho $LANG\r\n\r\n* 설정 가능한 locale 확인\r\nlocale -a\r\n\r\n* 세션에 locale 일시 세팅\r\nexport LANG=KO_KR.UTF-8\r\n\r\n* 유저에 locale 세팅 (.profile)\r\n# Language setting\r\nLANG=EN_US.UTF-8\r\nLC_ALL=EN_US.UTF-8\r\nexport LANG LC_ALL\r\n\r\n\r\nhttp://soodiy.com/270\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://coffeenix.net/doc/misc/locale.html', 'http://coffeenix.net/doc/misc/locale.html', '', 8, 0),
(1097, '', '서대영', '', '2012-05-10 17:22:09', 'Unix', '파일 내용 비우기', '$ > file1.ext\r\n\r\n매우 쉬움', '', '', 1, 0),
(1098, '', '서대영', '', '2012-05-14 16:58:37', 'JUnit', '내가 만든 첫번째 Mockito', 'package gspn.common.resource;\r\n\r\nimport static org.junit.Assert.*;\r\nimport static org.mockito.Mockito.*;\r\nimport gspn.common.Constants;\r\nimport gspn.sys.vo.GlobalSessionVO;\r\n\r\nimport org.junit.*;\r\nimport org.junit.runner.RunWith;\r\nimport org.springframework.mock.web.*;\r\nimport org.springframework.test.context.ContextConfiguration;\r\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\r\n\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(locations = {"classpath:test-code-beans.xml"})\r\npublic class DistyResourceTests {\r\n	\r\n	private DistyResource resource;\r\n	private GlobalSessionVO user;\r\n	\r\n	@Before\r\n	public void setUp() {\r\n		user = mock(GlobalSessionVO.class);\r\n		when(user.getCorpCode()).thenReturn("C810");\r\n		when(user.getLocale()).thenReturn("en");\r\n				\r\n		MockHttpSession session = new MockHttpSession();\r\n		session.setAttribute(Constants.SESSION_KEY_USER, user);\r\n		\r\n		MockHttpServletRequest request = new MockHttpServletRequest();\r\n		request.setSession(session);\r\n		\r\n		resource = new DistyResource(request);\r\n	}\r\n	\r\n	@Test\r\n	public void testGetShipMethodSelectHtml() {\r\n		String html = resource.getShipMethodCodeSelectHtml("SHIP_METHOD_CD");\r\n		verifyUser();\r\n		System.out.println(html);\r\n		assertTrue(html.contains("Customer Pick Up") && html.contains("class=''selectSN''"));\r\n	}\r\n	\r\n	@Test\r\n	public void testGetOrderTypeSelectHtml() {\r\n		String html = resource.getOrderTypeCodeSelectHtml("SHIP_METHOD_CD");\r\n		verifyUser();\r\n		System.out.println(html);\r\n		assertTrue(html.contains("Normal") && html.contains("class=''selectSN''"));\r\n	}\r\n	\r\n	private void verifyUser() {\r\n		verify(user).getCorpCode();\r\n		verify(user).getLocale();\r\n	}\r\n	\r\n}\r\n', '', '', 43, 0),
(1099, '', '서대영', '', '2012-05-15 08:21:03', 'JUnit', 'BDD 샘플 (계산기)', '\r\n\r\n\r\n\r\n============================== FILE ==============================\r\nCalculator.zip', '', 'Calculator.zip', 1, 0),
(1100, '', '서대영', '', '2012-05-15 18:48:41', 'HTML', 'HTML5 가 안먹는 브라우져에서 편법', '<!-- Load jQuery Here -->\r\n<!--[if lt IE 9]>\r\n<script src="//ie7-js.googlecode.com/svn/version/2.1(beta4)/IE9.js"></script>\r\n<script src="//ie7-js.googlecode.com/svn/version/2.1(beta4)/ie7-squish.js"></script>\r\n<script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>\r\n<![endif]-->\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://ejnahc.tistory.com/144', 'http://ejnahc.tistory.com/144', '', 1, 0),
(1101, '', '서대영', '', '2012-05-23 09:48:25', 'Unix', 'env 환경변수 보기', '', '', '', 8, 0),
(1102, '', '서대영', '', '2012-05-24 09:06:27', 'JUnit', 'Spring 통합 테스트 어노테이션', '@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(locations = {"classpath:sap.xml"})', '', '', 17, 0),
(1103, '', '서대영', '', '2012-05-24 09:13:12', 'JUnit', 'Spring 통합 테스트 시 트렌젝션 처리', '@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(locations = {"classpath:jdbc.xml"})\r\n@TransactionConfiguration(transactionManager="transactionManager", defaultRollback=true)\r\n@Transactional\r\n : 트레젝션으로 묵기 위해서 클래스 전체에 선언하거나 메서드 위에 선언\r\n\r\n@Rollback(false)\r\n : 롤백 안할 매서드 위에 선언', '', '', 22, 0),
(1104, '', '서대영', '', '2012-05-25 10:27:32', 'Log4j', 'Category VS Logger, Priority VS Level', 'Loger 와 Level 를 사용할 것\r\n\r\nFor 99.99% of users, this translates to the following string find-and-replace operations:\r\nReplace the string "Category.getInstance" with the string "Logger.getLogger".\r\nReplace the string "Category.getRoot" with the string "Logger.getRootLogger".\r\nReplace the string "Category" with the string "Logger".\r\nReplace the string "Priority" with the string "Level".\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://hanuska.blogspot.com/2007/02/log4j-logger-vs-category.html', 'http://hanuska.blogspot.com/2007/02/log4j-logger-vs-category.html', '', 4, 0),
(1105, '', '서대영', '', '2012-05-26 20:33:42', 'Maven', 'How to reference javadocs to dependencies in Maven''s eclipse plugin when javadoc not attached to dependency', '이클립스에서 프로젝트에서 우클릭 후\r\nMaven > Download Java Doc\r\n\r\n\r\n      <plugin>\r\n        <groupId>org.apache.maven.plugins</groupId>\r\n        <artifactId>maven-eclipse-plugin</artifactId>\r\n        <configuration>\r\n          <downloadSources>true</downloadSources>\r\n          <downloadJavadocs>true</downloadJavadocs>\r\n        </configuration>\r\n      </plugin>\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://stackoverflow.com/questions/44396/how-to-reference-javadocs-to-dependencies-in-mavens-eclipse-plugin-when-javadoc', 'http://stackoverflow.com/questions/44396/how-to-reference-javadocs-to-dependencies-in-mavens-eclipse-plugin-when-javadoc', '', 2, 0),
(1106, '', '서대영', '', '2012-05-28 17:02:47', 'Spring', 'Spring Tool Suite 에 JRebel 세팅', '1) JRebel 플러그인 설치\r\n2) JRebel 라이센스 등록 (jRebel Social)\r\n3) WAS 세팅 변경 (Server 탭에서 해당 Server 더브클릭하면 Overview 나옴)\r\n - Publishing : Never Publish Automatically\r\n - JRebel Integration : Enable JRebel agent\r\n4) 프로젝트에서 우클릭 > JRebel > generate rebel.xml\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://umsh86.tistory.com/category/eclipse-plugin', 'http://umsh86.tistory.com/category/eclipse-plugin', '', 6, 0),
(1107, '', '서대영', '', '2012-05-29 13:13:04', 'Java', 'reflection 을 이용한 Setter Mapper 구현', 'package gspn.disty.common.repository;\r\n\r\nimport gspn.disty.common.domain.T_DISTY_MT;\r\n\r\nimport java.lang.reflect.*;\r\nimport java.sql.*;\r\n\r\nimport org.springframework.jdbc.core.RowMapper;\r\n\r\npublic class T_DISTY_MT_RowMapper implements RowMapper {\r\n\r\n	@Override\r\n	public T_DISTY_MT mapRow(ResultSet rs, int no) throws SQLException {\r\n		T_DISTY_MT record = new T_DISTY_MT();\r\n		\r\n		for (Method method : T_DISTY_MT.class.getMethods()) {\r\n			String methodName = method.getName();\r\n			if (methodName.startsWith("set")) {\r\n				String fieldName = methodName.substring(3);\r\n				String fieldValue = rs.getString(fieldName);\r\n				try {\r\n					method.invoke(record, fieldValue);\r\n				} catch (Exception e) {\r\n					throw new SQLException("Reflection Exception", e);\r\n				}\r\n			}\r\n		}\r\n		\r\n		return record;\r\n	}\r\n\r\n}', '', '', 2, 0),
(1108, '', '서대영', '', '2012-05-31 13:12:48', 'Unix', 'bz2 압축', '압축 하기\r\n\r\nbzip2 -k foo.txt\r\n\r\n압축 풀기\r\n\r\nbzip2 -kd foo.txt.bz2\r\n\r\nk 옵션을 빼면 원본/압축 파일 사라짐\r\n\r\nbzless\r\nbzcat\r\n\r\n입축하지 않고 내용 보기\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.seroot.com/102?category=0', 'http://www.seroot.com/102?category=0', '', 13, 0),
(1109, '', '서대영', '', '2012-06-12 19:39:28', 'Network', '소켓의 CLOSE_WAIT 상태 고찰', '1) 영문 정의 : 프로그램 문제라고 함\r\nCLOSE_WAIT means that the local end of the connection has received a FIN from the other end, but the OS is waiting for the program at the local end to actually close its connection. The problem is your program running on the local machine is not closing the socket. It is not a TCP tuning issue. A connection can (and quite correctly) stay in CLOSE_WAIT forever while the program holds the connection open. \r\n\r\n2) 한글 정의 : 서버 문제라고 함\r\nCLOSE_WAIT는 보통 서버에서 나타나고 client에서 보낸 FIN을 처리하고\r\n이 FIN에 대한 ACK를 전송한 상태입니다. 이때 client는 FIN_WAIT2상태\r\n에 있고 서버에서 FIN이 전송되기를 기다리게 됩니다.\r\n(즉 client에서 server로 보내는 방향만 close되었고, server에서 client\r\n로 보내는 부분은 가능합니다.)\r\n정상적인 경우는 서버에서 close(2)를 수행하면 FIN이 전송되고 server\r\n의 상태는 LAST_ACK상태가 됩니다. 이때 서버의 FIN을 받은 client는\r\nTIME_WAIT상태로 들어갑니다.\r\n\r\n말씀하신 CLOSE_WAIT는 없앨수있는게 아니고 server에서 close(2)하지\r\n않았기 때문입니다. 이런 half-close는 ssh/rsh등으로 client에서\r\nserver의 프로그램을 실행했을때 서버에서 요청한 프로그램이 종료될때까지\r\n흔히 나타나는 겁니다.\r\n\r\n3) CLOSE_WAIT 죽이는 방법\r\nHow to kill the CLOSE_WAIT sections on AIX \r\n\r\nroot@server />netstat -a | grep CLOSE\r\ntcp4 104 0 server.49196 server.43787 CLOSE_WAIT\r\ntcp4 104 0 server.49195 server.41383 CLOSE_WAIT\r\n\r\nroot@server />netstat -Aan | grep CLOSE\r\nf10000f30cd08358 tcp4 104 0 162.87.218.139.491 162.87.218.139.437 CLOSE_WAIT\r\nf10000f305e8fb58 tcp4 104 0 162.87.218.139.491 162.87.218.139.413 CLOSE_WAIT\r\n\r\nroot@server />rmsock f10000f30cd08358 tcpcb\r\nsocket 0xcd08000 is removed.\r\n\r\nroot@server />rmsock f10000f305e8fb58 tcpcb\r\nsocket 0x5e8f800 is removed.\r\n\r\nroot@server />netstat -a | grep CLOSE\r\nroot@server /> ', '', '', 1, 0),
(1110, '', '서대영', '', '2012-06-12 20:35:35', 'iPlanet', 'obj.conf - j2ee 옵션 제거', '웹서버 전용으로 사용할 경우 와스 기능은 끄는게 좋다.\r\nobj.conf 에서 아래를 삭제한다.\r\n\r\n\r\n<Object name="j2ee">\r\nService fn="service-j2ee" method="*"\r\n</Object>', '', '', 1, 0),
(1111, '', '서대영', '', '2012-06-12 20:42:10', 'iPlanet', 'iPlanet 모니터링 툴 perf 세팅/사용법', '[ 세팅법 ]\r\nobj.conf 안에 다음과 같이 세팅\r\n\r\n* NameTrans 중에 맨위에 아래 추가\r\n\r\nNameTrans fn="assign-name" from="/.perf" name="perf"\r\n\r\n* Object 중에 맨위에 아래 추가\r\n\r\n<Object name="perf">\r\nService fn="service-dump"\r\n</Object>\r\n\r\n[ 사용법 ]\r\n웹서버IP/.perf\r\nVirtualClass 로 나누었을 경우 host 세팅 후 도메인으로 호출\r\n   1) Portal : http://107.10.89.146/.perf\r\n   2) Business : http://biz2.samsungcsportal.com/.perf\r\n   (hosts 파일에 추가 : 107.10.89.146  biz2.samsungcsportal.com)', '', '', 1, 0),
(1112, '', '서대영', '', '2012-06-14 10:59:10', 'Spring', 'Spring quartz 사용시 cronExpression', 'Spring quartz 사용시 cronExpression 입니다.\r\n\r\n월~금요일만 실행하고 싶어서 day-of-week 옵션을 설정했지만\r\nday-of-week 를 잘못설정하면  이런 오류가 나더군요.\r\nSupport for specifying both a day-of-week AND a day-of-month parameter is not implemented.\r\n변경전 : 0 0 20 * * MON-FRI\r\n변경후 : 0 0 20 ? * MON-FRI\r\n\r\n\r\n\r\n아래는 기본 설정방법입니다.\r\n\r\n\r\n초 0-59 , - * / \r\n분 0-59 , - * / \r\n시 0-23 , - * / \r\n일 1-31 , - * ? / L W\r\n월 1-12 or JAN-DEC , - * / \r\n요일 1-7 or SUN-SAT , - * ? / L # \r\n년(옵션) 1970-2099 , - * /\r\n\r\n* 모든 값\r\n? 특정 값 없음\r\n- 범위 지정에 사용\r\n, 여러 값 지정 구분에 사용\r\n/ 초기값과 증가치 설정에 사용\r\nL 지정할 수 있는 범위의 마지막 값\r\nW 월~금요일 또는 가장 가까운 월/금요일\r\n# 몇 번째 무슨 요일 2#1 => 첫 번째 월요일\r\n\r\n예제) \r\nExpression Meaning \r\n초분시일월주(년)\r\n"0 0 12 * * ?" 아무 요일, 매월, 매일 12:00:00\r\n"0 15 10 ? * *" 모든 요일, 매월, 아무 날이나 10:15:00 \r\n"0 15 10 * * ?" 아무 요일, 매월, 매일 10:15:00 \r\n"0 15 10 * * ? *" 모든 연도, 아무 요일, 매월, 매일 10:15 \r\n"0 15 10 * * ? 2005" 2005년 아무 요일이나 매월, 매일 10:15 \r\n"0 * 14 * * ?" 아무 요일, 매월, 매일, 14시 매분 0초 \r\n"0 0/5 14 * * ?" 아무 요일, 매월, 매일, 14시 매 5분마다 0초 \r\n"0 0/5 14,18 * * ?" 아무 요일, 매월, 매일, 14시, 18시 매 5분마다 0초 \r\n"0 0-5 14 * * ?" 아무 요일, 매월, 매일, 14:00 부터 매 14:05까지 매 분 0초 \r\n"0 10,44 14 ? 3 WED" 3월의 매 주 수요일, 아무 날짜나 14:10:00, 14:44:00 \r\n"0 15 10 ? * MON-FRI" 월~금, 매월, 아무 날이나 10:15:00 \r\n"0 15 10 15 * ?" 아무 요일, 매월 15일 10:15:00 \r\n"0 15 10 L * ?" 아무 요일, 매월 마지막 날 10:15:00 \r\n"0 15 10 ? * 6L" 매월 마지막 금요일 아무 날이나 10:15:00 \r\n"0 15 10 ? * 6L 2002-2005"\r\n2002년부터 2005년까지 매월 마지막 금요일 아무 날이나 10:15:00 \r\n"0 15 10 ? * 6#3" 매월 3번째 금요일 아무 날이나 10:15:00\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://dakccom.tistory.com/entry/Support-for-specifying-both-a-day-of-week-AND-a-day-of-month-parameter-is-not-implemented', 'http://dakccom.tistory.com/entry/Support-for-specifying-both-a-day-of-week-AND-a-day-of-month-parameter-is-not-implemented', '', 3, 0),
(1113, '', '서대영', '', '2012-06-15 22:27:58', 'Maven', '[Maven Plugin] Tomcat6', '1) pom.xml 에 다음 추가\r\n===============================================================\r\n	<build>\r\n		<plugins>\r\n			<plugin>\r\n				<groupId>org.codehaus.mojo</groupId>\r\n				<artifactId>tomcat-maven-plugin</artifactId>\r\n				<version>1.0</version>\r\n				<configuration>\r\n          			<path>/</path>\r\n        		        </configuration>\r\n			</plugin>\r\n		</plugins>\r\n	</build>\r\n===============================================================\r\n\r\n2) tomcat manager 기능 세팅\r\nCATALINA_HOME/conf/tomcat-users.xml 파일 수정\r\n===============================================================\r\n<tomcat-users>\r\n	<role rolename="manager" />\r\n	<user username="admin" password="" roles="manager" />\r\n</tomcat-users>\r\n===============================================================\r\n\r\n3) mvn 빌드 실행\r\n===============================================================\r\nmvn clean package tomcat:deploy\r\n===============================================================\r\n', NULL, '', 10, 0),
(1114, '', '서대영', '', '2012-06-16 20:35:17', 'MySQL', 'MySQL noinstall 사용법', '1) Server 구동\r\n - Path 환경변수에 %MYSQL_HOME%\\bin 등록\r\n - mysqld --console\r\n\r\n2) Clinet 실행\r\n - mysql -u root\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www3.ntu.edu.sg/home/ehchua/programming/sql/MySQL_HowTo.html', 'http://www3.ntu.edu.sg/home/ehchua/programming/sql/MySQL_HowTo.html', '', 6, 0),
(1115, '', '서대영', '', '2012-06-16 20:58:23', 'MySQL', 'SQL Txt File 로 실행', '-- You can store SQL commands in a text file (called SQL script) and run the \r\n--   script, instead of entering each of the SQL commands from the prompt.\r\n-- For example, use a text editor to create a SQL script called "mycommands.sql" \r\n--   containing the following three SQL statements. Save the file under "d:\\myproject".\r\ninsert into class101 values (33, ''Kumar'', 4.8);\r\ninsert into class101 values (44, ''Kevin'', 4.6);\r\nSelect * from class101;\r\n\r\n-- Use the following "source" command to run the SQL script.\r\n-- You need to provide the full path to the script.\r\n-- Use Unix-style forward slash ''/'' as directory separator, \r\n--   instead of Windows-style back slash ''\\''.\r\n\r\nmysql> source d:/myproject/mycommands.sql\r\nQuery OK, 1 row affected (0.00 sec)   // INSERT command output\r\nQuery OK, 1 row affected (0.00 sec)   // INSERT command output\r\n+------+-------------+------+         // SELECT command output\r\n| id   | name        | gpa  |\r\n+------+-------------+------+\r\n|   11 | Tan Ah Teck |  4.4 |\r\n|   33 | Kumar       |  4.8 |\r\n|   44 | Kevin       |  4.6 |\r\n+------+-------------+------+\r\n3 rows in set (0.00 sec)\r\n', '', '', 2, 0),
(1119, '', '서대영', '', '2012-06-23 16:23:46', 'MySQL', 'INSERT 후 바로 Sequence Number 구하기', '\r\n\r\nSELECT LAST_INSERT_ID();\r\n-----------------------------------------------------------------\r\n\r\nINSERT INTO CUSTOMER_ADDRESS (ADD_ID, ADD_TEXT) VALUES(NULL, ''some address value'');\r\n \r\nINSERT INTO CUSTOMER_DETAILS (NAME, ADD_ID, GENDER, PHONE_NO)\r\nVALUES (''James Bond'', LAST_INSERT_ID(), ''MALE'', 007);\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://viralpatel.net/blogs/get-autoincrement-value-after-insert-query-in-mysql/', 'http://viralpatel.net/blogs/get-autoincrement-value-after-insert-query-in-mysql/', '', 4, 0),
(1116, '', '서대영', '', '2012-06-17 12:16:32', 'HTML', 'HTML5 기본 요소', '<!DOCTYPE html>\r\n<html lang="ko">\r\n    <head>\r\n        <meta charset="utf-8">\r\n        <title>제목</title>\r\n    </head>\r\n    <body>\r\n\r\n     </body>\r\n</html>', '', '', 10, 0),
(1117, '', '서대영', '', '2012-06-19 10:17:39', 'Oracle', 'DB Link 추가 방법', 'Parts_history 새로운 법인 추가 방법\r\n\r\n \r\n\r\n1. DB 쪽 tnsname.ora 파일에 아래 내용 추가 ( Unix OR ftp 이용)\r\n\r\n \r\n\r\n< SERK_VD 디비링크 추가 > (= serk는 법인명)\r\n\r\n□ /oracle/network/admin/tnsnames.ora에 추가\r\n\r\nSERK_VD =\r\n\r\n  (DESCRIPTION =\r\n\r\n    (ADDRESS = (PROTOCOL = TCP)(HOST = 106.109.80.14)(PORT = 1521))\r\n\r\n    (CONNECT_DATA = (SID = ORCL))\r\n\r\n)\r\n\r\n \r\n\r\n2.  DB 쪽 DBlink 생성 (오라클 admin 계정 로그인 필요)\r\n\r\n \r\n\r\nCREATE DATABASE LINK "SERK_VD"\r\n\r\nCONNECT TO QINGS_DIS\r\n\r\nIDENTIFIED BY  "IFDNSDUD01"\r\n\r\nUSING ''TNS:SERK_VD'';\r\n\r\n \r\n\r\n생성 확인은 오라클의 시스템 테이블 중 user_db_links  에서 확인\r\n\r\nselect *\r\n\r\nfrom user_db_links\r\n\r\n \r\n\r\n3. DB쪽에서 바로 붙어서 해당 법인에 해당하는 시리얼등으로 확인\r\n\r\n-. 접속 테스트\r\n\r\ntelnet 106.109.80.14 1521\r\n\r\ntnsping SERK_VD\r\n\r\n=. Golden으로 바로 붙어서 테스트\r\n\r\nSELECT *\r\n\r\nFROM vdmes.v_if_serial_part_no@serk_vd\r\n\r\nWHERE serial_number = ''00663LCS600931''\r\n\r\n \r\n\r\n4. AP의 KM -> km_was -> web에서 part_history.jsp 와 plant_code_inc.jsp 파일에 해당 법인 정보 첨가\r\n\r\n   (참고 : 해당 페이지 비지니스 로직은 km_was -> km -> classes 에 존재)\r\n\r\n \r\n\r\n5. 해당 법인 웹 페이지에서 붙는지 확인\r\n', '', '', 6, 0),
(1120, '', '서대영', '', '2012-06-23 19:42:55', 'HTML', 'HTML5 섹션/제목관련 요소', '<section>\r\n절, 비독립적 내용\r\n\r\n<header>\r\n해더\r\n\r\n<footer>\r\n풋터\r\n\r\n<article>\r\n독립적인 내용\r\n\r\n<address>\r\n주소\r\n\r\n<nav>\r\n네비게이션\r\n\r\n\r\n- 제목 관련\r\n\r\n<h1~6>\r\n\r\n<hgroup>\r\n\r\n제목 관련요소는 반드시 섹션 관련요소로 아웃라인을 만들고 쓸 것', '', '', 7, 0),
(1121, '', '서대영', '', '2012-06-24 11:13:44', 'HTML', 'HTML5 그룹 및 시맨틱 마크업을 위한 요소', '<del>삭제</del> : 수평줄\r\n\r\n<ins>삽입<ins> : 밑줄', '', '', 0, 0),
(1122, '', '서대영', '', '2012-06-24 11:39:11', 'HTML', 'img 태그', '이미지 링크가 깨졌을 때 대체 텍스트를 제공하기 위해 alt 속성을 반든시 사용할 것', '', '', 0, 0),
(1123, '', '서대영', '', '2012-06-24 11:54:58', 'HTML', 'HTML5 테이블 및 삽입 관련 요소', 'table 의 열은 thaed, tobdy(복수), tfoot 으로 그룹화\r\n\r\nth 요소는 scope 속성으로 "col" 인지 "row" 표기 (열 헤더, 행 헤더)', '', '', 1, 0),
(1124, '', '서대영', '', '2012-06-27 13:13:10', 'iPlanet', '확장자 추가 방법', ' 1) mime.typs\r\ntype=text/gspn                                   exts=gspn\r\n\r\n 2) obj.conf\r\nService method="(GET|HEAD|POST|PUT)" type="text/gspn" fn="wl_proxy" WebLogicCluster="106.\r\n10.1.3:6302,106.10.1.3:6303,106.10.1.3:6304,106.10.1.3:6305,106.10.1.4:6302,106.10.1.4:63\r\n03,106.10.1.4:6304,106.10.1.4:6305,106.10.1.112:6302,106.10.1.112:6303,106.10.1.112:6304,\r\n106.10.1.112:6305" ConnectTimeoutSecs="24" ConnectRetrySecs="2" DynamicServerList="ON" Id\r\nempotent="OFF" KeepAliveEnabled="true" WLIOTimeoutSecs="3600" WLCookieName="EUOBGSPNSESSI\r\nONID"', '', '', 1, 0),
(1125, '', '서대영', '', '2012-06-27 17:03:52', 'HTML', 'title 속성 : 말풍선, 툴팁', '<!DOCTYPE html>\r\n<html lang="ko">\r\n<head>\r\n<meta charset="utf-8">\r\n<title>title 속성</title>\r\n</head>\r\n<body>\r\n	<h1>title 속성 사용 예</h1>\r\n	<form action="member.php" name="memberForm">\r\n		<label for="jumin01">주민등록번호</label>\r\n		<input type="text" id="jumin01" title="주민등록번호 앞자리"> -\r\n		<input type="text" id="jumin02" title="주민등록번호 뒷자리">\r\n		<input type="submit" value="전송">\r\n	</form>\r\n	<p><a href="find.html" title="아이디/비밀번호 찾기 페이지가 새창으로 제공됩니다.">아이디/비밀번호 찾기</a></p>\r\n</body>\r\n</html>\r\n', '', '', 0, 0),
(1126, '', '서대영', '', '2012-06-30 16:51:48', 'IT', 'Pool 과 Push 방식의 차이', '<< Pool >>\r\nClient 가 주기적으로 Server 에 요청을 보내서 Server 의 Event 를 감지하는 방법\r\n불필요한 트랙픽 발생, Server 부담 가중, 빠른 응답을 요구하는 애플리케이션에 부적합\r\n\r\n<< Push >>\r\nServer 아 Event 가 발생했을 때 Client 로 보내는 방식', '', '', 0, 0),
(1127, '', '서대영', '', '2012-06-30 21:49:23', 'Eclipse', 'Zen Coding 사용법', 'Zen Coding(젠 코딩)을 이클립스에서 사용 하는 방법. &#8211; 1\r\nhttp://yaioyaio.wordpress.com/2012/06/17/zen-coding%ec%a0%a0-%ec%bd%94%eb%94%a9%ec%9d%84-%ec%9d%b4%ed%81%b4%eb%a6%bd%ec%8a%a4%ec%97%90%ec%84%9c-%ec%82%ac%ec%9a%a9-%ed%95%98%eb%8a%94-%eb%b0%a9%eb%b2%95-1/\r\n \r\nZen Coding(젠 코딩)을 이클립스에서 사용 하는 방법. &#8211; 2 \r\nhttp://yaioyaio.wordpress.com/2012/06/17/zen-coding%ec%a0%a0-%ec%bd%94%eb%94%a9%ec%9d%84-%ec%9d%b4%ed%81%b4%eb%a6%bd%ec%8a%a4%ec%97%90%ec%84%9c-%ec%82%ac%ec%9a%a9-%ed%95%98%eb%8a%94-%eb%b0%a9%eb%b2%95-2/\r\n[출처] 젠 코딩(zen-coding) |작성자 ITseeker', '', '', 1, 0),
(1128, '', '서대영', '', '2012-07-02 11:52:09', 'jMeter', 'Proxy 를 이용한 Request Record 방법', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://jmeter.apache.org/usermanual/jmeter_proxy_step_by_step.pdf\r\n\r\n\r\n\r\n============================== FILE ==============================\r\njmeter_proxy_step_by_step.pdf', 'http://jmeter.apache.org/usermanual/jmeter_proxy_step_by_step.pdf', 'jmeter_proxy_step_by_step.pdf', 3, 0),
(1129, '', '서대영', '', '2012-07-02 23:17:31', 'CSS', '다른 스타일 파일 임포트', '@charset "utf-8";\r\n@import "reset.css";\r\n', '', '', 1, 0),
(1471, 'dale.seo', '', '', '2015-06-18 21:51:36', '', 'HATEOAS (Hypermedia as the Engine of Application State)', '- Rest API 설계의 마지막 모습이라고 함\r\n- Client 에게 다음에 취할 수 있는 모든 Resource의 link 들 까지 제공함\r\n- Server와 Client가 Loose Coupling 하게 만듬\r\n- Less Efficient 하기 때문에 간단한 어플리케이션에는 부적합\r\n- 스프링에서 구현체를 제공하고 있음', NULL, '', 2, 0),
(1472, 'dale.seo', '', '', '2015-06-19 10:06:50', '', '알고리즘 공부자료', 'http://stackoverflow.com/questions/313527/simple-algorithm-tutorials', NULL, '', 4, 0),
(1473, 'dale.seo', '', '', '2015-06-19 10:15:13', '', 'Base Types', 'Base Types\r\nFor the most commonly used data types, Java provides the following base types (also called primitive types):\r\nboolean	a boolean value: true or false\r\nchar	16-bit Unicode character\r\nbyte	8-bit signed two''s complement integer\r\nshort	16-bit signed two''s complement integer\r\nint	32-bit signed two''s complement integer\r\nlong	64-bit signed two''s complement integer\r\nfloat	32-bit floating-point number (IEEE 754-1985)\r\ndouble	64-bit floating-point number (IEEE 754-1985)\r\nA variable having one of these types simply stores a value of that type. Integer constants, like 14 or 195, are of type int, unless followed immediately by an ‘L’ or ‘l’, in which case they are of type long. Floating-point constants, like 3.1416 or 6.022e23, are of type double, unless followed immediately by an ‘F’ or ‘f’, in which case they are of type float. Code Fragment 1.1 demonstrates the declaration, and initialization in some cases, of various base-type variables.\r\nimages\r\nCode Fragment 1.1: Declarations and initializations of several base-type variables.\r\n\r\nNote that it is possible to declare (and initialize) multiple variables of the same type in a single statement, as done on lines 2, 6, and 9 of this example. In this code fragment, variables verbose, debug, i, and j remain uninitialized. Variables declared locally within a block of code must be initialized before they are first used.\r\nA nice feature of Java is that when base-type variables are declared as instance variables of a class (see next section), Java ensures initial default values if not explicitly initialized. In particular, all numeric types are initialized to zero, a boolean is initialized to false, and a character is initialized to the null character by default.', NULL, '', 2, 0),
(1131, '', '서대영', '', '2012-07-08 12:07:20', 'Spring', 'jdbc.xml', 'SingleConnectionDataSource 을 이용하면 된다.\r\n\r\n\r\n	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">\r\n	    <property name="dataSource" ref="dataSource"/>\r\n	</bean>\r\n	\r\n	<bean id="dataSource" class="org.springframework.jdbc.datasource.SingleConnectionDataSource">\r\n		<property name="driverClassName" value="com.mysql.jdbc.Driver" />\r\n		<property name="url" value="jdbc:mysql://localhost/dale" />\r\n		<property name="username" value="root" />\r\n		<property name="password" value="" />\r\n	</bean>', '', '', 6, 0),
(1132, '', '서대영', '', '2012-07-15 13:18:37', 'Spring', 'XML 에 Bean 등록 방법', '<< attribute >>\r\nid : 유일한 식별자\r\nclass : 클래스 명 풀네임 ★\r\ninit-method : 객체 생성 후 실행될 메소드 ★\r\ndestroy-method : 객체 소멸 전 실행될 메소드 ★\r\nfactory-method : 펙토리로 객체를 생성할 때 사용 (static 이어야 함)\r\nfactory-bean : 펙토리 자체도 빈으로 등록해놨을 경우 참조값\r\ndepends-on : 어떤 빈이 초기화 되기 전에 먼저 초기화 되야 하는 빈들을 나열\r\nlazy-init : 빈의 최조 사용 시점에 동적으로 객채화\r\nscope : singleton(기본), prototype\r\n\r\nsingleton : true / flase (2.0 때 쓰이던 속성으로 스콥이 많아져서 이제 안 쓰임)\r\n\r\n<< property >>\r\nvalue : Primitive 값, 문자열\r\nref : 다른 빈 참조값\r\nbean : inner bean\r\nnull : 널값\r\nlist, set, map, props, string 배열', '', '', 6, 0),
(1133, '', '서대영', '', '2012-07-16 16:26:18', 'HTML', 'HTML DOCTYPE 종류', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://hooney.net/2007/08/21/438/', 'http://hooney.net/2007/08/21/438/', '', 2, 0),
(1134, '', '서대영', '', '2012-07-16 23:12:23', 'Spring', '*Aware 인터페이스', 'http://www.journaldev.com/2637/spring-bean-life-cycle-methods-initializingbean-disposablebean-postconstruct-predestroy-aware-interfaces\r\n\r\n\r\n\r\n# ApplicationContextAware\r\n스프링의 빈 컨테이너를 세터로 받아서 사용할 수 있다.\r\n\r\n\r\npublic class MovieServiceImpl implements MovieService, ApplicationContextAware {\r\n        GenreService genreService;\r\n        public void setApplicationContext (ApplicationContext context){\r\n            genreService  = (GenreService) context.getBean(“genreService”);\r\n        }\r\n}', NULL, '', 22, 0),
(1135, '', '서대영', '', '2012-07-18 21:01:14', 'HTML', 'Cross Brower Test', '<< 설치형 >>\r\n\r\n* IE Tester\r\n\r\nhttp://www.my-debugbar.com/wiki/IETester/HomePage\r\n\r\n* Super Preview\r\n\r\n마이크로 소프트\r\n\r\n<< 온라인 >>\r\n\r\n* Browser Sandbox\r\n\r\n* Adobe Browser Lab\r\n\r\n* Browser Shots', '', '', 0, 0),
(1136, '', '서대영', '', '2012-07-20 19:43:07', 'Spring', 'Bean Scope', 'Bean Look-up 및 Injection 시\r\n* 어노테이션 사용 : \r\n@Component 또는 @Bean\r\n@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE) \r\n* xml 사용 : scope="prototype"\r\n\r\n1) singleton (default)\r\n  : 항상 동일한 인스턴스를 얻게 됨\r\n\r\n2) prototype\r\n  : 매번 다른 인스턴스\r\n\r\n3) request\r\n  : Http Rquest 때 마다 다른 인스턴스 (MVC 에서만 사용)\r\n\r\n4) session\r\n  : Http Session 때 마다 다른 인스턴스 (MVC 에서만 사용)', NULL, '', 9, 0),
(1137, '', '', '', '2012-07-21 09:32:36', 'Spring', 'SpEL (Spirng Expression Language)', '런타임시 특정 객체의 정보에 접근하거나 조작하도록 지원\r\n\r\n[[ 프라퍼티즈 파일 사용 ]]\r\n<util:properties id="contextProperties" location="classpath:context.properties"/> \r\n\r\n<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"> \r\n        <property name="driverClassName" value="#{contextProperties.driver}"/> \r\n        <property name="url" value="#{contextProperties.url}"/> \r\n        <property name="username" value="#{contextProperties.username}"/> \r\n        <property name="password" value="#{contextProperties.password}"/> \r\n</bean>\r\n\r\n[[ 시스템 변수 사용 ]]\r\n<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"> \r\n         <property name="driverClassName" value="#{systemProperties[''Driver'']}"/> \r\n         <property name="url" value="#{systemProperties[''URL'']}"/> \r\n         <property name="username" value="#{systemProperties[''UserName'']}"/> \r\n         <property name="password" value="#{systemProperties[''Password'']}"/> \r\n</bean>\r\n\r\n[[ 어노테이션 사용 ]]\r\n@Repository(“movieDao") \r\npublic class MovieDao extends SimpleJdbcDaoSupport { \r\n       @Value("#{contextProperties[''pageSize''] ?: 10}") \r\n       int pageSize; \r\n       @Value("#{contextProperties[''pageUnit''] ?: 10}") \r\n       int pageUnit; \r\n       @Inject \r\n       public void setJdbcDaoDataSource(DataSource dataSource) throws Exception { \r\n                 super.setDataSource(dataSource); \r\n       } \r\n   ... \r\n}', NULL, '', 25, 0),
(1477, 'dale.seo', '', '', '2015-06-20 17:35:41', '', '[Spring Context] Properties', 'Spring 에서 Properties 를 이해하려면 반드시 읽어봐야하는 Article\r\n\r\nhttp://www.baeldung.com/2012/02/06/properties-with-spring/', NULL, '', 11, 0),
(1478, 'dale.seo', '', '', '2015-06-20 19:55:25', '', '@Bean annotation', 'http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-java-bean-annotation', NULL, '', 2, 0),
(1138, '', '서대영', '', '2012-07-21 09:35:50', 'Spring', 'DI 어노테이션 비교 (@Inject, @Autowired, @Resource)', '@Inject\r\n * JSR-330 표준으로 특정 FrameWork 에 종속되지 않음\r\n * @Named 를 이용하여 특정 Bean 지정 가능\r\n * required 옵션이 없어서 inject 할 Bean 을 찾지 못해도 에러가 안남\r\n * javax.inject.xxx.jar 파일이 필요\r\n * 권장하는 방법\r\n\r\n@Autowired\r\n * Spring Framework 에 종속적\r\n * Type 기반\r\n * @Qualifier 를 이요항여 특정 Bean 지정 가능\r\n * required 옵션를 이용하여 필수 지정 가능\r\n\r\n@Resource\r\n * ID 기반\r\n * name-drive injection 이라서 구림, 사용하지 말것\r\n', '', '', 9, 0),
(1139, '', '서대영', '', '2012-07-22 21:56:34', 'Spring', 'Bean Lifecyle Callback 어노테이션', '* JSR-250 표준으로써 Bean 초기화 및 소멸시 필요한 작업을 구현\r\n* InitializingBean 과 DisposableBean 구현 방법이나 xml 의 init-mehtod 와 destory-method 세팅 방법보다 우선한다.\r\n\r\n@PostConstruct\r\n// 메소드명은 자유롭게 정의할 수 있다.\r\npublic void initialize() {\r\n &nbsp;// ...\r\n}\r\n\r\n@PreDestroy\r\n// 메소드명은 자유롭게 정의할 수 있다.\r\npublic void dispose() {\r\n // ...\r\n}', '', '', 5, 0),
(1140, '', '서대영', '', '2012-07-23 11:34:33', 'Unix', '명령어 실제 디렉토리 확인', 'http://webdir.tistory.com/158\r\n=======================================\r\nwhich나 whereis 명령어를 사용하면 된다.\r\n\r\n$ whereis mysql\r\nmysql: /usr/bin/mysql /etc/mysql /usr/share/mysql /usr/share/man/man1/mysql.1.gz\r\n\r\n\r\n\r\n<gspn:wasadm[724]/usr/java6_64/bin>which java\r\n/usr/java6_64/jre/bin/java\r\n\r\n[tomcat@qasp-ec ~]$ which jstack\r\n/app/java/bin/jstack\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://tama7.tistory.com/392', NULL, '', 11, 0),
(1141, '', '서대영', '', '2012-07-29 00:10:49', 'Java', 'Socket 사용 시 타임아웃 주는 방법', 'new Socket(host, name) 대신에 아래처럼 InetSocketAddress 를 사용하고,\r\nsocket 의 connect 메서드를 사용한다.\r\n\r\n========================================================================\r\nInetSocketAddress socketAddress = new InetSocketAddress(host, port);\r\nSocket socket = new Socket();\r\nsocket.connect(socketAddress, 5000);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nhttp://msinterdev.org/blog/365\r\n\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/PostView.nhn?blogId=mogulist&logNo=10433862', 'http://blog.naver.com/PostView.nhn?blogId=mogulist&logNo=10433862', '', 3, 0),
(1142, '', '서대영', '', '2012-07-29 00:27:53', 'Java', 'Java 로 Ping 테스트', 'JDK 1.5 Spec에서 지원하는 isReachable(int timeout)을 이용하여 Ping Check를 할 수 있다.\r\n- Ping이 성공일 경우 ''True''를 Return\r\n- Ping이 실패할 경우 ''False''를 Return\r\n \r\n다음은 Sample Code이다.\r\n \r\nimport java.net.*;\r\n \r\npublic class PingCheck {\r\n   public static void main(String [] args) {\r\n  \r\n   try {\r\n         InetAddress target = InetAddress.getByName("111.111.111.111");\r\n         System.out.println(target.isReachable(1000));\r\n   } catch(Exception e){\r\n   }\r\n}\r\n}\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/PostView.nhn?blogId=nneat&logNo=60063718338', 'http://blog.naver.com/PostView.nhn?blogId=nneat&logNo=60063718338', '', 1, 0),
(1143, '', '서대영', '', '2012-08-03 20:48:11', 'Spring', 'Spring Excel View', '<< AbstractJExcelView >>\r\n * JExcel 라이브러리 사용\r\n * xls 밖에 안됨\r\n\r\n<< AbstractExcelView >>\r\n * Apcah POI 라이브러리 사용\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://snoopy81.tistory.com/archive/20120522?page=1', 'http://snoopy81.tistory.com/archive/20120522?page=1', '', 4, 0),
(1144, '', '서대영', '', '2012-08-04 23:29:45', 'Framework', 'POI 로 엑셀 파일 만들기', '	@Test\r\n	public void testMock() throws IOException {\r\n		HSSFWorkbook workbook = new HSSFWorkbook();\r\n		System.out.println(workbook);\r\n		\r\n		HSSFSheet sheet = workbook.createSheet();\r\n				\r\n		for (int j = 0; j < 5; j++) {\r\n			HSSFRow row = sheet.createRow(j);\r\n			for (int i = 0; i < 10; i++) {\r\n				HSSFCell cell = row.createCell(i);\r\n				cell.setCellValue("row #" + j + " / cell #" + i);\r\n			}\r\n		}\r\n		\r\n		FileOutputStream fileOut = new FileOutputStream("D:/Workspace/gspn_biz/GSPNRes/download/test.xls"); \r\n		workbook.write(fileOut);\r\n		fileOut.close();\r\n	}', '', '', 5, 0),
(1145, '', '서대영', '', '2012-08-06 16:39:58', 'Java', 'java.lang.reflect 패키지', '<< Class >>\r\nField[] getFields();\r\n: public 필드만 가져온다.\r\nField[] getDeclaredFields();\r\n: private 필드까지 모두 가져올 수 있다.', '', '', 3, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(1146, '', '서대영', '', '2012-08-06 17:00:48', 'Framework', 'BeanUtils & PropertyUtils', 'BeanUtils 는 String 으로 리턴해주고, PropertyUtils 은 Object 로 리턴해준다.\r\n이 거보다는 Jackson의 ObjectMapper 쓰는 게 좋을 것 같음\r\n\r\n\r\n	@Test\r\n	public void testDescribe() throws Exception {\r\n		Bean bean = new Bean(1L, "Dale Seo");\r\n		bean.setList(Arrays.asList(2, 4, 6, 8));\r\n		Map<String, Object> map = PropertyUtils.describe(bean);\r\n		System.out.println(map);\r\n		assertEquals(1L, map.get("no"));\r\n		assertEquals("Dale Seo", map.get("name"));\r\n		assertEquals(Arrays.asList(2, 4, 6, 8), map.get("list"));\r\n	}\r\n\r\n	@Test\r\n	public void testPopulate() throws Exception {\r\n		Map<String, Object> map = new HashMap<>();\r\n		map.put("no", 1L);\r\n		map.put("name", "Dale Seo");\r\n		map.put("date", new Date());\r\n		map.put("list", Arrays.asList(2, 4, 6, 8));\r\n\r\n		Bean bean = new Bean();\r\n		BeanUtils.populate(bean, map);\r\n\r\n		System.out.println(bean);\r\n\r\n		assertEquals(1L, bean.getNo());\r\n		assertEquals("Dale Seo", bean.getName());\r\n		assertEquals(Arrays.asList(2, 4, 6, 8), bean.getList());\r\n	}\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://belling.egloos.com/7304896', NULL, '', 21, 0),
(1147, '', '서대영', '', '2012-08-10 21:32:04', 'JSON', 'Jackson 라이브러리를 이용한 Object Json 간 변환', 'jackson-core-asl-1.9.8.jar 와 jackson-mapper-asl-1.9.8.jar 필요\r\n\r\n\r\nObjectMapper mapper = new ObjectMapper();\r\nmapper.writeValueAsStirng(object);\r\n\r\n=> 이 방법은 \\\\r\\\\n, \\\\"과 같은 값이 붙으므로 로그 찍을 때만 사용한다.\r\n\r\n@Service\r\npublic class ConvertService {\r\n\r\n	@Autowired\r\n	private Jaxb2Marshaller marshaller;\r\n	\r\n	private ObjectMapper mapper = new ObjectMapper();\r\n	\r\n    public String convertToXml(Object object) {\r\n        final StringWriter out = new StringWriter();\r\n        marshaller.marshal(object, new StreamResult(out));\r\n        return out.toString();\r\n    }\r\n	\r\n	public String convertToJson(Object object) throws JsonGenerationException, JsonMappingException, IOException {\r\n		Writer strWriter = new StringWriter();\r\n		mapper.writeValue(strWriter, object);\r\n		return strWriter.toString();\r\n	}\r\n	\r\n}', '', '', 13, 0),
(1150, '', '서대영', '', '2012-08-20 15:02:22', 'iPlanet', 'SSL 적용', '[ CSR 생성 ]\r\n\r\n* 웹콘솔 접속 > 인스턴스 선택 > Security 탭\r\n\r\n* Create Database 메뉴 > 패스워드 입력\r\n\r\n* /sunweb/sun6.1/alias에 파일 생성 확인\r\n https-<instance>-<hostname>-key3.db\r\n https-<instance>-<hostname>-cert8.db\r\n\r\n* CSR 요청\r\n - Request a Certifiate 메뉴\r\n - CA Email Address: cs@crosscert.com\r\n - Cryptographic Module: internal\r\n - Key Pair File Password: 패스워드\r\n - Requestor name: Daeyoung Seo\r\n - Telephone number: +82-031-200-2648	\r\n - Common name: gspn1.samsungcsportal.com ★\r\n - Email address: daeyoung.seo@samsung.com\r\n - Organization: Samsung SDS\r\n - Organizational Unit: GSPN\r\n - Locality: Yeongtong-Gu	\r\n - State or Province: Suwon-City\r\n - Country: KR 	\r\n\r\n* -----BEGIN NEW CERTIFICATE REQUEST----- 부터 -----END NEW CERTIFICATE REQUEST----- 까지 복사해서\r\n  한국전자인증에 인증서 발급 신청하도록 MI한테 전달\r\n\r\n\r\n[ 인증서 설치 ]\r\n\r\n* 웹콘솔 접속 > 인스턴스 선택 > Security 탭\r\n\r\n* 서버 인증서 설치 \r\n - Install Certificate 메뉴\r\n - Certificate For: This Server\r\n - Cryptographic Module: internal\r\n - Key Pair File Password: 패스워드\r\n - Key Pair File Password: 한국전자인증에서 발급받은 서버 인증서(cert.txt) 붙여넣기\r\n-----BEGIN NEW CERTIFICATE REQUEST----- 부터 -----END NEW CERTIFICATE REQUEST----- 까지 붙여넣기\r\n\r\n* 체인 인증서 설치\r\n - Install Certificate 메뉴\r\n - Certificate For: Server Certificate Chain\r\n - Cryptographic Module: internal\r\n - Key Pair File Password: 패스워드\r\n - Certificate Name: intermediate ★\r\n - Key Pair File Password: 한국전자인증에서 발급받은 체인 인증서(intermediate.txt) 붙여넣기\r\n-----BEGIN NEW CERTIFICATE REQUEST----- 부터 -----END NEW CERTIFICATE REQUEST----- 까지 붙여넣기\r\n\r\n\r\n[ SSL 설정 ]\r\n\r\n* 웹콘솔 접속 > 인스턴스 선택 > Preferences 탭\r\n\r\n*Add Listen Sockets 메뉴 \r\n\r\n - Listen Socket ID: ls2\r\n - IP Address: any	\r\n - Port: 443\r\n - Server Name: portal\r\n - Default Virtual Server ID: https-portal\r\n - Security: Enabled\r\n\r\n', '', '', 6, 0),
(1151, '', '서대영', '', '2012-08-24 15:02:14', 'Commons', 'lang 의 DateUtils, DateFormatUtils', 'DateFormatUtils 예제\r\nhttp://commons.apache.org/lang/api-release/org/apache/commons/lang/time/DateFormatUtils.html\r\nDateFormatUtils을 이용하면 java.text.SimpleDateFormat을 이용하여 일자를 포맷하던 것을 아래와 같이 쉽게 할 수 있다.\r\nDate today = new Date();\r\n\r\n//yyyy-MM-dd HH:mm:ss\r\nString dateFormat = DateFormatUtils.format(today, "yyyy-MM-dd HH:mm:ss");\r\nSystem.out.println("yyyy-MM-dd HH:mm:ss = " + dateFormat);\r\n\r\n// yyyy-MM-dd.\r\ndateFormat = DateFormatUtils.ISO_DATE_FORMAT.format(today);\r\nSystem.out.println("ISO_DATE_FORMAT = " + dateFormat);\r\n\r\n// EEE, dd MMM yyyy HH:mm:ss Z in US locale.\r\ndateFormat = DateFormatUtils.SMTP_DATETIME_FORMAT.format(today);\r\nSystem.out.println("SMTP_DATETIME_FORMAT = " + dateFormat);\r\n \r\n\r\n// 실행 결과\r\nyyyy-MM-dd HH:mm:ss = 2010-11-05 16:57:49\r\nISO_DATE_FORMAT = 2010-11-05\r\nSMTP_DATETIME_FORMAT = Fri, 05 Nov 2010 16:57:49 +0900\r\nDateUtils 예제\r\nhttp://commons.apache.org/lang/api-release/org/apache/commons/lang/time/DateUtils.html\r\nDateUtils을 사용하면 날짜 관련 계산을 쉽게 할 수 있다. 아래는 round를 이용하여 가장 최근의 시, 분,초를 구하는 예제이다.\r\nDate now = new Date();\r\nSystem.out.println("now = " + DateFormatUtils.format(now, "yyyy-MM-dd HH:mm:ss"));\r\n\r\n// Get nearest second\r\nDate nearestSecond = DateUtils.round(now, Calendar.SECOND);\r\nSystem.out.println("nearest Second = " + DateFormatUtils.format(nearestSecond, "yyyy-MM-dd HH:mm:ss"));\r\n\r\n// Get nearest minute\r\nDate nearestMinute = DateUtils.round(now, Calendar.MINUTE);\r\nSystem.out.println("nearest Minute = " + DateFormatUtils.format(nearestMinute, "yyyy-MM-dd HH:mm:ss"));\r\n\r\n// Get nearest hour\r\nDate nearestHour = DateUtils.round(now, Calendar.HOUR);\r\nSystem.out.println("nearest Hour = " + DateFormatUtils.format(nearestHour, "yyyy-MM-dd HH:mm:ss"));\r\n\r\n// 실행 결과\r\nnow = 2010-11-05 17:02:08\r\nnearestSecond = 2010-11-05 17:02:09\r\nnearestMinute = 2010-11-05 17:02:00\r\nnearestHour = 2010-11-05 17:00:00\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.gurubee.net/pages/viewpage.action?pageId=6260184', 'http://www.gurubee.net/pages/viewpage.action?pageId=6260184', '', 11, 0),
(1152, '', '서대영', '', '2012-08-26 11:28:49', 'Spring', '[Spring MVC] @RequestMapping 의 속성', '@RequestMapping 의 속성\r\n\r\n* value={"addMovie.do", "updateMovie.do"}\r\n : value 혼자 정의할 때는 value= 는 생략 가능\r\n\r\n* method={RequestMethod.GET, RequestMethod.POST}\r\n : HTTP Reqeust Method 가 GET 이거나 POST 일 때 호출\r\n\r\n* params={"param1=a", "param2", "!myParam"}\r\n : param1 값은 a 이고, param2 값은 존재하고, myParam 값이 없을 때 실행\r\n\r\n* headers="content-type=text/*"\r\n : Content-Type 헤더 값이 text/html, text/plan 모두 매칭', '', '', 3, 0),
(1153, '', '서대영', '', '2012-08-26 11:36:47', 'Spring', '[Spring MVC] @RequestMapping 의 입력, 리턴 타입', '# Input Type : 순서는 상관이 없으나, BindingResult 는 command 객체 바로 다음\r\n * Request, Response, Session\r\n * Locale\r\n * inputStream, Reader\r\n * @RequestParam\r\n * Map, Model, ModelMap\r\n * Command, From 객체\r\n * Errors, BindingResult\r\n * SEssionStatus\r\n\r\n\r\n# Return Type\r\n * void : RequestURL 값과 logical view 가 같을 때\r\n * Stirng : view 이름 (model 은 Model 객체에 넣은 경우)\r\n * Model : model 이름\r\n * ModelAndView : view 와 Model 동시에 리턴\r\n * Map', '', '', 6, 0),
(1154, '', '서대영', '', '2012-08-26 11:43:29', 'Spring', '[Spring MVC] @RequestParam 의 사용', 'HTTP Request 파라미터 값을 핸들러 매소드의 입력인자에 바로 맵핑하기 위해 사용\r\n\r\n@RequestMapping(method=RequestMethod.GET)\r\npublic String get(@RequestParam("cityid") String cityid, Model model) {\r\n City city = cityService,get(cityid);\r\n Model,addAtribute(city);\r\n return "/city/form";\r\n}\r\n\r\n해당 파라미터으 값이 존재하지 않을 경우, MissingServletRequestParameterException 발생', '', '', 2, 0),
(1155, '', '서대영', '', '2012-08-26 11:49:49', 'Spring', '[Spring MVC] @ModelAttribute 사용', '1) View 에서 사용할 객체를 세팅\r\n\r\n@ModelAttribute("genreList")\r\npublic Collection<Genre> getGenreList() {\r\n  return genreService.getList();\r\n}\r\n\r\n====================================\r\n\r\n<form:select path="genre.gernreId">\r\n  <form:options items="${genreList}" itemValue="genreId" itemNam="name" />\r\n</form>\r\n\r\n====================================\r\n\r\npublic class Genre {\r\n  private String genreId;\r\n  private String name;\r\n}\r\n\r\n2) jsp 의 form 의 modelAttribute 값과 도메인 클래스 이름이 틀릴 경우 사용\r\npublic Stirng addModel(@ModelAttribute("command") Movie movie) {\r\n\r\n}', '', '', 16, 0),
(1156, '', '서대영', '', '2012-08-26 11:59:36', 'Spring', '[Spring MVC] Business Layer 와 연계', 'ContextLoaderListener 를 통해 여러 개의 DispacherServlet 이 공유할 수 있는 Business Layer 의 Bean 들을 로드함\r\n\r\n	<context-param>\r\n		<param-name>contextConfigLocation</param-name>\r\n		<param-value>\r\n			/WEB-INF/spring/root-context.xml\r\n			classpath:spring/*.xml\r\n		</param-value>\r\n	</context-param>\r\n	<listener>\r\n		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\r\n	</listener>', '', '', 2, 0),
(1157, '', '서대영', '', '2012-08-26 12:07:08', 'Spring', '[Spring MVC] @PathVariable 사용', 'HTTP Request URL 에 {} 를 사용하여 묶은 값을, 입력 인자로 바로 받아올 수 있다.\r\n@RequestParam 보다 더 많이 쓰이는 것 같다.\r\n\r\n\r\n	@RequestMapping(value = "/{no}", method = RequestMethod.GET)\r\n	public String get(@PathVariable int no, Model model) {\r\n		model.addAttribute("note", service.find(no));\r\n		return "note/modify";\r\n	}', '', '', 5, 0),
(1158, '', '서대영', '', '2012-08-26 12:58:14', 'Spring', '[Spring MVC] 파라미터를 통해 Locale 변경', '<bean id="localeResolver"\r\n     class="org.springframework.web.servlet.i18n.CookieLocaleResolver"/>\r\n<mvc:interceptors> \r\n <mvc:interceptor> \r\n    <mvc:mapping path=“/**/*.view "/> \r\n    <bean \r\n       class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"> \r\n       <property name=”paramName” value=”locale”/>\r\n    </bane>\r\n </mvc:interceptor> \r\n</mvc:interceptors>', NULL, '', 18, 0),
(1159, '', '서대영', '', '2012-08-26 18:29:14', 'Webservice', 'SOAP vs. REST', '# SOAP\r\n * SOAP Request, SOAP Response 를 통해 메세지를 전달\r\n * 송수신 시 SOAP 메세지 헤더와 바디의 인코딩/디코딩 과정이 필수\r\n\r\n# REST\r\n * 기본 프로토콜인 HTTP 를 이용하여 단순한 메시지 전달\r\n * 클라이언트들이 쉽게 접근할 수 있음', '', '', 1, 0),
(1160, '', '서대영', '', '2012-08-26 19:24:45', 'Spring', '[Spring MVC] Exception 처리', 'http://www.baeldung.com/2013/01/31/exception-handling-for-rest-with-spring-3-2/\r\n\r\n핸들러 예외 리졸버\r\n예외가 발생했을때 로그를 남기거나 관리자에게 통보 하는 등의 작업은 HandlerInterceptor중 afterCompletion() 메소드에서 하는것이 좋다.\r\n1. AnnotationMethodHandlerExceptionResolver : default\r\n예외가 발생한 컨트롤러 내의 메소드 중에서 @ExceptionHandler 어노테이션이 붙은 메소드를 찾아 예외처리를 맡겨 주는 핸들러 예외 리졸버.\r\n    @ExceptionHandler(Exception.class)\r\n    public ModelAndView exceptionHandler(Exception e) {\r\n        return new ModelAndView("/error/404").addObject("msg", e.getMessage());\r\n    }\r\n \r\n2. ResponseStatusExceptionResolver : default\r\nRuntimeException을 확장하여 @ResponseStatus 어노테이션을 붙여서 만든다.\r\n@ResponseStatus(value = HttpStatus.SERVICE_UNAVAILABLE, reason = "서비스를 사용할 수 없습니다.")\r\npublic class NotServiceException extends RuntimeException { }\r\n \r\n3. DefaultHandlerExceptionResolver\r\n스프링 내부에서 사용하는 예외처리 방법. 다른 핸들러 예외 처리를 등록해서 작동하지않을때는 등록 시켜 준다.\r\n \r\n4. SimpleMappingExceptionResolver\r\n    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">\r\n        <property name="exceptionMappings">\r\n            <props>\r\n                <prop key="Exception">/error/exception</prop>\r\n            </props>\r\n        </property>\r\n    </bean>\r\n\r\n\r\n====================================================================\r\n\r\n\r\n<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver" />\r\n\r\n\r\n\r\n<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">\r\n &#160;&#160;&#160;<property name="exceptionMappings">\r\n &#160;&#160;&#160;&#160;&#160;&#160;&#160;<props>\r\n &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<prop key="org.anyframe.exercise.common.NotFoundException">notFoundError</prop>\r\n &#160;&#160;&#160;&#160;&#160;&#160;&#160;</props>\r\n &#160;&#160;&#160;</property>\r\n &#160;&#160;&#160;<property name=”statusCodes”>\r\n &#160;&#160;&#160;&#160;&#160;&#160;&#160;<props>\r\n &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<prop key="notFoundError">404</prop>\r\n &#160;&#160;&#160;&#160;&#160;&#160;&#160;</props>\r\n &#160;&#160;&#160;</property>\r\n &#160;&#160;&#160;<property name="defaultErrorView" value="error"/>\r\n</bean>', '', '', 23, 0),
(1161, '', '서대영', '', '2012-08-28 18:36:51', 'Spring', '[Spring AOP] Point Cut', 'Join Point 중에서 Advice 를 삽입할 Join Point\r\n\r\n<< Pattern Matching >>\r\n메소드명이 main 이고, retun type 이 any type 이고, 0개 이상의 any type parameter 를 가진 모든 메서드의 실행 시점\r\nexecution(* main(..))', '', '', 5, 0),
(1162, '', '서대영', '', '2012-08-28 18:43:25', 'Spring', '[Spring AOP] Advice', 'Pointcut 에 Matching 되는 JointPoint 전, 후에 동작하는 코드\r\n\r\n* Beofre\r\n\r\n* After\r\n\r\n* Around', '', '', 3, 0),
(1163, '', '서대영', '', '2012-08-28 18:58:34', 'Spring', '[Spring AOP] Annotation Based AOP', '별도의 XML 파일에 대한 정의 불필요 하므로, Aspect 적용이 간편함 (Java 5 이상)\r\n\r\n[[ Configuration ]]\r\n<beans xmlns=http://www.springframework.org/schema/beans\r\n     xmlns:xsi=http://www.w3.org/2001/XMLSchema-instance\r\n     xmlns:aop=http://www.springframework.org/schema/aop\r\n     xsi:schemaLocation="http://www.springframework.org/schema/beans   \r\n     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\r\n     http://www.springframework.org/schema/aop   \r\n     http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">\r\n     <aop:aspectj-autoproxy/>\r\n</beans> \r\n\r\n[[ Anotation ]]\r\n@Aspect\r\n\r\n@Pointcut()\r\n\r\n@Before\r\n@Before("getMethods()")\r\npublic void beforeExecuteGetMethod(JoinPoint thisJoinPoint) {\r\n       Class targetClass = thisJoinPoint.getTarget().getClass();\r\n       Signature signature = thisJoinPoint.getSignature();\r\n       String opName = signature.getName();\r\n       System.out.println("Before Advice of PrintStringUsingAnnotation");\r\n       System.out.println("***" + targetClass + "." + opName + "()" + "***");\r\n}\r\n\r\n@After 류도 3개 있는데 잘 안 쓰임\r\n\r\n@Around\r\n : proceed() 매서드를 통해 pointcut 실행 시점을 결정할 수 있으며,\r\n  리턴값도 바꿀 수 있다 (매우 Powerful)\r\n1.  @Around("updateMethods()")\r\n2.  public Object aroundExecuteUpdateMethod(ProceedingJoinPoint thisJoinPoint)\r\n3.        throws Throwable {\r\n4.        Class targetClass = thisJoinPoint.getTarget().getClass();\r\n5.        Signature signature = thisJoinPoint.getSignature();\r\n6.        String opName = signature.getName();\r\n7.        System.out.println("Around Advice of PrintStringUsingAnnotation");\r\n8.        System.out.println("***" + targetClass + "." + opName + "()" + "***");\r\n9.        // before logic\r\n10.      Object retVal = thisJoinPoint.proceed();\r\n11.      // after logic\r\n12.      return retVal;\r\n13.  }\r\n', NULL, '', 12, 0),
(1428, 'dale.seo', '', '', '2015-05-20 21:36:51', '', '[Spring MVC] mvc:view-controller', '컨트롤러에서 뷰이름을 세팅하는 거 외에 특별한 로직이 없는 경우, (ex. welcome page)\r\nmvc:view-controller를 이용해서 viewname을 세팅해줄 수 있다.\r\n\r\n\r\n=========================================================\r\n	<mvc:view-controller path="/index" view-name="index" />\r\n	<mvc:view-controller path="/about" view-name="about" />\r\n=========================================================\r\n\r\nSince Spring 3.0, you can use the following tag in your XML configuration:\r\n\r\n<mvc:view-controller path="/" view-name="home"/>\r\n\r\n\r\nThat’s an example of a view-controller definition that forwards to a home page without any custom backing controller. The Spring 3.0 documentation describes the tag as follows:\r\n\r\nThis tag is a shorcut for defining a ParameterizableViewController that immediately forwards to a view when invoked. Use it in static cases when there is no Java Controller logic to execute before the view generates the response.\r\nFollowing is an example of the full dispatcher-servlet.xml file that I’m using at the moment. You can see at the very bottom that I’ve mapped two of these. The path ‘/index’ routes to a FreeMarker view I’ve defined in an index.ftl file and the path ‘/about’ routes to another FreeMarker view defined in the file, about.ftl.\r\n', NULL, '', 6, 0),
(1164, '', '서대영', '', '2012-08-29 17:54:51', 'Spring', '[Spring AOP] 라이브러리', '<dependency>\r\n	<groupId>org.springframework</groupId>\r\n	<artifactId>spring-core</artifactId>\r\n	<version>${spring.version}</version>\r\n</dependency>         \r\n\r\n<dependency>\r\n	<groupId>org.springframework</groupId>\r\n	<artifactId>spring-context</artifactId>\r\n	<version>${spring.version}</version>\r\n</dependency>\r\n\r\n<dependency>            \r\n	<groupId>org.springframework</groupId>            \r\n	<artifactId>spring-aop</artifactId>            \r\n	<version>${spring.version}</version>        \r\n</dependency>         \r\n\r\n<dependency>            \r\n	<groupId>org.aspectj</groupId>            \r\n	<artifactId>aspectjrt</artifactId>            \r\n	<version>1.6.12</version>        \r\n</dependency>         \r\n\r\n<dependency>            \r\n	<groupId>org.aspectj</groupId>            \r\n	<artifactId>aspectjweaver</artifactId>            \r\n	<version>1.6.12</version>        \r\n</dependency>\r\n\r\n# 아래는 에러 나면 추가\r\n\r\n<dependency>\r\n	<groupId>aopalliance</groupId>\r\n	<artifactId>aopalliance</artifactId>\r\n	<version>1.0</version>\r\n</dependency>\r\n            \r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://camelcode.org/tutorial/Spring-AOP-@Around-annotation-example.htm', 'http://camelcode.org/tutorial/Spring-AOP-@Around-annotation-example.htm', '', 10, 0),
(1165, '', '서대영', '', '2012-09-01 18:38:00', 'Spring', 'Jackson1 으로 Json 변환 시 날짜 포멧팅 하기', 'http://www.baeldung.com/jackson-serialize-dates\r\n\r\n기본적으로는 timestamp로 변환되는데 아래 처럼 세팅하면 날짜 포멧팅 된다.\r\n\r\n\r\npackage dale.web.core.json;\r\n\r\nimport javax.annotation.PostConstruct;\r\n\r\nimport org.codehaus.jackson.map.*;\r\nimport org.springframework.stereotype.Component;\r\n\r\n@Component\r\npublic class CustomObjectMapper extends ObjectMapper {\r\n\r\n	@PostConstruct\r\n	public void afterPropertiesSet() throws Exception {\r\n		configure(SerializationConfig.Feature.WRITE_DATES_AS_TIMESTAMPS, false);\r\n	}\r\n}\r\n\r\n\r\n====================================================================\r\n		<property name="defaultViews">\r\n			<list>\r\n				<bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView">\r\n					<property name="objectMapper" ref="customObjectMapper" />\r\n				</bean>\r\n			</list>\r\n		</property>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nhttp://stackoverflow.com/questions/4442966/how-to-make-jsongenerator-pretty-print-date-and-datetime-values\r\n\r\nhttp://loianegroner.com/2010/09/how-to-serialize-java-util-date-with-jackson-json-processor-spring-3-0/comment-page-1/#comment-408\r\n\r\nhttp://starplatina.tistory.com/344', NULL, '', 23, 0),
(1166, '', '서대영', '', '2012-09-14 17:56:23', 'WAS', 'iPlanet Weblogic 연계 플러그인 파라미터', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://docs.oracle.com/cd/E11035_01/wls100/plugins/plugin_params.html#wp1143055', 'http://docs.oracle.com/cd/E11035_01/wls100/plugins/plugin_params.html#wp1143055', '', 0, 0),
(1167, '', '서대영', '', '2012-11-01 10:20:30', 'SVN', 'G-SPN Subversion 세팅', '* 설치 디렉토리\r\n/opt/subversion\r\n \r\n* 설치 계정\r\nroot\r\n \r\n* 리파지토리\r\n/opt/subversion/SVN/repository 내 위치\r\n - Portal\r\ngspn_portal\r\n - Business\r\nCommonApp\r\nGSPNRes\r\nGSPNWebApp\r\n \r\n * 이클립스에 등록할 주소\r\nsvn://10.41.131.173/gspn_portal\r\n \r\n \r\n* 구동 방법\r\n - Startup\r\n# /opt/subversion/bin/start.sh\r\n \r\n* 정지 방법\r\n$ ps -ef | grep subversion\r\nroot 2203692       1   0  7월 21일      -  0:03 /opt/subversion/bin/svnserve -d -r /opt/subversion/SVN/repository\r\n$ kill -9 2203692\r\n \r\n* 계정 추가 \r\nvi /opt/subversion/SVN/repository/CommonApp/passwd \r\nvi /opt/subversion/SVN/repository/GSPNRes/passwd \r\nvi /opt/subversion/SVN/repository/GSPNWebApp/passwd \r\nvi /opt/subversion/SVN/repository/GSPSWebApp/passwd \r\nvi /opt/subversion/SVN/repository/GspsiWebService/passwd \r\nvi /opt/subversion/SVN/repository/GspsiWebServiceClient/passwd \r\nvi /opt/subversion/SVN/repository/gspn_portal/passwd \r\n맨아래 다음 한줄 추가 \r\nub01 = ub01\r\n \r\n* 권한 설정 \r\nvi /opt/subversion/SVN/repository/CommonApp/authz\r\nvi /opt/subversion/SVN/repository/GSPNRes/authz\r\nvi /opt/subversion/SVN/repository/GSPNWebApp/authz\r\nvi /opt/subversion/SVN/repository/GSPSWebApp/authz \r\nvi /opt/subversion/SVN/repository/GspsiWebService/authz\r\nvi /opt/subversion/SVN/repository/GspsiWebServiceClient/authz\r\nvi /opt/subversion/SVN/repository/gspn_portal/authz \r\n맨아래 다음 한줄 추가 \r\nub01 = rw\r\n \r\n \r\n \r\n \r\n=================== DC 요청 =====================\r\nvi /opt/subversion/SVN/repository/CommonApp/passwd\r\nvi /opt/subversion/SVN/repository/GSPNRes/passwd\r\nvi /opt/subversion/SVN/repository/GSPNWebApp/passwd\r\nvi /opt/subversion/SVN/repository/GSPSWebApp/passwd\r\nvi /opt/subversion/SVN/repository/GspsiWebService/passwd\r\nvi /opt/subversion/SVN/repository/GspsiWebServiceClient/passwd\r\nvi /opt/subversion/SVN/repository/gspn_portal/passwd\r\n \r\n맨아래 추가\r\ndale = dale\r\ntim = tim\r\n \r\n \r\n \r\n\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n* 간단한 설명 블로그\r\nhttp://www.lovelgw.com/Blog/182\r\n \r\n \r\nSVN 계정\r\n 실사용자\r\n 비고\r\n \r\ndale\r\n 서대영\r\n  \r\npcs73.park\r\n 박창순\r\n  \r\ntim.kim\r\n 김규철\r\n \r\n \r\nis.jun\r\n 김정은\r\n (구) 전인성\r\n \r\njaehun\r\n 권혁상\r\n (구) 이재훈\r\n \r\njiyoung\r\n 심락중\r\n (구) 배지영\r\n \r\ninQkang\r\n 김학\r\n 신규\r\n \r\npmh\r\n TBD\r\n 신규\r\n \r\nssw\r\n 배재석\r\n \r\n \r\ncci\r\n 이현정\r\n \r\n \r\nub01\r\n 김덕환\r\n \r\n \r\n', '', '', 4, 0),
(1168, '', '서대영', '', '2012-11-02 15:10:46', 'Weblogic', 'Directory Listing 설정', 'weblogic.xml\r\n\r\nindex-directory-enabled 를 true 로 세팅하면 Directory Listing 이 됨\r\n\r\n <container-descriptor>\r\n  <index-directory-enabled>false</index-directory-enabled>\r\n  <servlet-reload-check-secs>5</servlet-reload-check-secs>\r\n  <resource-reload-check-secs>-1</resource-reload-check-secs>\r\n  <show-archived-real-path-enabled>true</show-archived-real-path-enabled>\r\n  <prefer-web-inf-classes>true</prefer-web-inf-classes>\r\n </container-descriptor>', '', '', 0, 0),
(1169, '', '서대영', '', '2012-11-11 05:08:27', 'JQuery', 'Synchronous Ajax', 'Shourcut 매소드는 사용할 수 없고 ajax 매소드를 사용한다.\r\n아래 예제에서 async 값을 true 로 주면 validateDateByStatus 펑션이 먼저 수행 되고, false 주면 callback 이 먼저 수행된다.\r\n\r\n	function validateDateByStatus() {\r\n		var isValid = true;\r\n		$j.ajax({\r\n			type: ''post'',\r\n			dataType: ''json'',\r\n			url: ''/svctracking/svcorder/dateByStatusValidate.gspn'',\r\n			data: {},\r\n			async: false,\r\n			success: function(data) {\r\n				alert(data);\r\n				isValid = false;\r\n			},\r\n			error : function(jqXHR, textStatus, errorThrown) {\r\n				alert(textStatus);\r\n			}\r\n		});\r\n		return isValid;\r\n	}', '', '', 1, 0),
(1170, '', '서대영', '', '2012-11-11 06:51:52', 'Java', 'SimpleDateFormat 를 이용한 Date 와 String 간 변환', 'Date date = SimpleDateFormat.parse(dateText);\r\n\r\nString dateText = SimpleDateFormat.format(dateText, dateFormat);\r\n\r\n\r\nsetLenient(true/false); 를 통해 format 을 엄격하게 할지 안할지 결정한다.\r\n\r\n\r\n\r\n\r\n\r\n----------------------------------------------------------------------\r\n\r\n	public static boolean isDateValid(String dateText, String datePattern) {\r\n		if (StringUtils.isBlank(dateText)) \r\n			return false;\r\n				\r\n		SimpleDateFormat dateFormat = new SimpleDateFormat(datePattern);\r\n		dateFormat.setLenient(false);\r\n		\r\n		if (dateText.trim().length() != dateFormat.toPattern().length())\r\n			return false;		\r\n		\r\n		try {\r\n			dateFormat.parse(dateText);\r\n		} catch (Exception e) {\r\n			return false;\r\n		}\r\n		\r\n		return true;\r\n	}', '', '', 3, 0),
(1171, '', '서대영', '', '2012-11-13 06:11:09', 'Java', 'Exception Trace 에서 Unkown Source 경우', '[ Java ]\r\njavac -g *.java\r\n\r\n[ 이클립스 ]\r\n : 컴파일러를 JDK 가 아닌 JRE 를 사용하면 Unknown Source 라고 나온다.\r\n\r\n[ Ant ]\r\n : debug 옵션을 true 로 주면 Unkown Source 가 안 나옴\r\n<javac verbose="false" srcdir="${src}" destdir="${classdir}" debug="true" includes="**/*.java">\r\n        <classpath refid="compile.classpath" />\r\n    </javac>\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://haywe.tistory.com/71', 'http://haywe.tistory.com/71', '', 4, 0),
(1172, '', '서대영', '', '2012-11-21 08:30:40', 'Weblogic', 'Weblogic 이 의존하는 라이브러리 확인', 'D:\\Oracle\\Middleware\\modules', '', '', 0, 0),
(1173, '', '서대영', '', '2012-11-25 06:27:53', 'Weblogic', 'weblogic.Name 시스템 변수 사용', '<WLS_DONMAIN_HOME>/config/config.xml 에 보면 인스턴스 이름을 세팅해줄 수 있다.\r\n\r\n------------------------------\r\n\r\n<name>gspn3Domain</name>\r\n\r\n------------------------------\r\n\r\n애플리케이션에서 다음과 같이 꺼내 쓸 수 있다.\r\n클러스터링 구성에서 인스턴스별로 구별할 때 유용.\r\n\r\nSystem.getProperty("weblogic.Name");', '', '', 0, 0),
(1174, '', '서대영', '', '2012-11-29 15:53:47', 'Unix', 'chmod 권한 설정', 'http://ohgyun.com/327\r\n\r\n\r\n□ 권한 설정\r\nchmod 777 파일(폴더)명\r\n\r\nchmod -R 755 *\r\n: 현재 폴더 및 하위 폴더 모든 파일의 권한 변경\r\n\r\n\r\n예를 들어, 밑에 따라오는 명령어는 sample라는 이름의 파일 혹은 디렉터리의 사용자나 그룹 크래스들에게 쓰기나 읽기 허가들을 추가해 주는 데 사용된다:\r\n\r\n$ chmod ug+rw sample\r\n$ ls -ld sample\r\ndrw-rw----   2 unixguy  unixguy       96 Dec  8 12:53 sample\r\n이 명령어는 모든 허가들을 지움으로써 어떠한 사람도 sample이라는 이름의 파일을 실행시키거나 읽거나 쓰게 허용하지 않는다.\r\n\r\n$ chmod a-rwx sample\r\n$ ls -l sample\r\n----------   2 unixguy  unixguy       96 Dec  8 12:53 sample', NULL, '', 16, 0),
(1175, '', '서대영', '', '2012-12-02 08:17:25', 'CSS', 'display 속성', 'CSS display 속성 - inline과 block\r\n\r\nCSS 속성에서 display는 잘 알아두면 여러모로 유용하게 사용되지만 헤메이게 되는 속성 중 하나인거 같다.\r\n \r\n \r\n- inline : width와 height 값을 설정할 수 없으며, margin과 padding값의 설정도 불가능하다.\r\n               주로 [span], [img] 태그에 이용된다.\r\n              \r\n- block : width와 height의 설정이 가능하며, 인라인과 반대로 margin과 padding도 사용가능하다.\r\n               주로 [div], [p], [form] 요소들이 있고 블록단위로 개행이 된다.\r\n\r\n★ inline과 block의 차이점을 요약하자면 아래와 같습니다.\r\n    1. inline으로 설정하면 줄바꿈이 되지 않지만, block으로 설정하면 줄바꿈 된다.\r\n    2. inline으로 설정하면 width, height 속성을 사용할 수 없지만, block으로 설정하면 width, height 속성을 사용할 수 있다.\r\n    3. inline으로 설정하면 상/하 margin과 padding 속성을 사용할 수 없지만, block으로 설정하면\r\n         상/하 margin과 padding 속성을 사용할 수 있다.\r\n[출처] css display 속성 - inline과 block|작성자 Smile', '', '', 1, 0),
(1176, '', '서대영', '', '2012-12-02 10:11:44', 'Framework', '모바일 클라이언트 프레임워크 jQuery Mobile vs. Sencha Touch', '', '', '', 0, 0),
(1177, '', '서대영', '', '2012-12-04 08:08:15', 'HTML', 'HTTP-EQUIV META 태그', '\r\nHTML 페이지는 HTML 문서에서 특정 HTTP 헤더를 지정하는 META 태그의 특수한 HTTP-EQUIV 폼을 허용한다. 다음은 두 가지 Pragma: no-cache와 Expires: -1을 사용하는 간단한 HTML 페이지 예이다.\r\n\r\n\r\n<HTML><HEAD> \r\n<META HTTP-EQUIV="Pragma" CONTENT="no-cache"> \r\n<META HTTP-EQUIV="Expires" CONTENT="-1"> \r\n</HEAD> \r\n<BODY> \r\n</BODY> \r\n</HTML>\r\n', '', '', 1, 0),
(1178, '', '서대영', '', '2012-12-04 08:12:00', 'HTTP', 'Web Cache 란 ..', 'What is a web cache?\r\nA web cache stores temporary copies of web pages to improve performance and reduce bandwidth consumption.\r\n\r\nDo I have a web cache?\r\nYou probably have several. Every web browser has a built in cache. Internet accelerators that you can buy in the store and install on your PC are usually web caches. Many internet service providers offer an internet accelerator as part of their service.\r\n\r\nSome schools, organizations and internet service providers operate their own web caches that do not require software to be installed on your PC. These are used not only to improve performance, but sometimes to filter out objectionable material, or to ensure privacy.\r\n\r\nAt any given time, you may be browsing the web through several layers of caches.\r\n\r\nAre your web caches properly configured?\r\nCaches are supposed to perform their function behind the scenes, offering their benefits without changing how web pages work. This is known as semantic transparency.\r\n\r\nThe HTTP 1.1 specification gives a set of rules regarding transparency "because non-transparent operation may confuse non-expert users, and might be incompatible with certain server applications (such as those for ordering merchandise)"\r\n\r\nSometimes web caches break these rules in order to offer improved performance. Sometimes web caches can be improperly configured to break these rules. Breaking the semantic transparency rules of the HTTP specification can also break the expected behavior of web applications.\r\n\r\nThe following tests check to see if the web caches you are using have semantic transparency.\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.procata.com/cachetest/', 'http://www.procata.com/cachetest/', '', 1, 0),
(1179, '', '서대영', '', '2012-12-04 10:05:03', 'JavaScript', '뒤로가기 방지, 새로고침 방지, 복사 방지  [출처] Javascript 뒤로가기 방지, 새로고침 방지, 복사 방지|작성자 니키아', ' // 뒤로가기 방지\r\nwindow.history.forward(1);\r\n\r\n// 우클릭방지\r\noncontextmenu=''return false'' \r\n\r\n // 드래그 방지\r\nondragstart=''return false''\r\n\r\n// 선택복사 방지\r\nonselectstart=''return false''\r\n\r\n//새로고침, 뒤로가기 막기\r\ndocument.onkeydown = function(e) {\r\n key = (e) ? e.keyCode : event.keyCode;\r\n if(key==8 || key==116) {\r\n  if(e) {\r\n   e.preventDefault();\r\n  } else {\r\n   event.keyCode = 0;\r\n   event.returnValue = false;\r\n  }\r\n }\r\n}\r\n//오른쪽마우스 막기\r\ndocument.oncontextmenu = function(e){\r\n if(e){\r\n  e.preventDefault();\r\n }\r\n else{\r\n  event.keyCode = 0;\r\n  event.returnValue = false;\r\n }\r\n}\r\n[출처] Javascript 뒤로가기 방지, 새로고침 방지, 복사 방지|작성자 니키아\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/kpetera?Redirect=Log&logNo=70136836778', 'http://blog.naver.com/kpetera?Redirect=Log&logNo=70136836778', '', 1, 0),
(1180, '', '서대영', '', '2012-12-05 05:50:10', 'JQuery', '[jQuery-UI] Datepicker', '날짜 입력 필드에 달력을 날아줌\r\n\r\n[[ 전체 세팅 ]]\r\n   : 나중에 덮어쓸 수 있음\r\n	$j.datepicker.setDefaults({\r\n		showOn: ''both'', \r\n		buttonImage: ''/img/ico_calendar_s.gif'',\r\n		buttonImageOnly: true,\r\n		buttonText: ''Calandar'',\r\n		changeMonth: true,\r\n		changeYear: true,\r\n		dateFormat: dateFormat,\r\n		showAnim: ''fadeIn'',\r\n		duration: ''fast''\r\n	});\r\n\r\n[[ 부분 세팅 ]]\r\n		$j("#datepicker").datepicker({\r\n			changeMonth: false,\r\n			changeYear: false,\r\n			showOtherMonths: true,\r\n	                selectOtherMonths: true,\r\n\r\n			onChangeMonthYear: function(year, month, inst) {\r\n				var sMonth;\r\n				\r\n				if (month < 10) {\r\n					sMonth	= "0" + month;\r\n				} else {\r\n					sMonth	= "" + month;\r\n				}	\r\n			 	$j(''#MONTH_DAY'').val(year + sMonth + "01");\r\n			 	$j(''#IV_TODAY'').val(year + sMonth + "01");\r\n			 	\r\n			 	if (selIdx == 2) {\r\n			 		searchHoliday();\r\n			 	}\r\n			 	\r\n			   },\r\n			   \r\n			 onSelect: function(dateText, inst) {\r\n				 $j(''#DAY'').val(dateText);\r\n				 $j(''#IV_TODAY'').val(dateText);\r\n				 $j(''#WEEK_DAY'').val(dateText);\r\n				\r\n				if (selIdx == 0 || selIdx == 1) {\r\n					//clickSubTab(selIdx);\r\n					if(selIdx == 0){\r\n						$j(''#CAL_TYPE'').val("DAY");\r\n						searchHoliday();	\r\n					}\r\n					if(selIdx == 1){\r\n						$j(''#CAL_TYPE'').val("WEEK");\r\n						searchHoliday();\r\n					}\r\n					\r\n				}\r\n				\r\n			}\r\n		});\r\n\r\n[[ 활성화/비활성화 ]]\r\n/**\r\n * Always initialize Datepicker.\r\n */\r\ninitialDatePicker();\r\n\r\n/**\r\n * Initialize jQuery Datepicker.\r\n */\r\nfunction initialDatePicker() {\r\n	$j(''body'').css(''font-size'', ''10px'');\r\n\r\n	$j.datepicker.setDefaults({\r\n		showOn: ''both'', \r\n		buttonImage: ''/img/ico_calendar_s.gif'',\r\n		buttonImageOnly: true,\r\n		buttonText: ''Calandar'',\r\n		showAnim: ''fadeIn'',\r\n		duration: ''fast''\r\n	});\r\n}	\r\n\r\nvar defaultDatePickerOption = {\r\n	changeMonth: true,\r\n	changeYear: true,\r\n	dateFormat: dateFormat\r\n};\r\n\r\n/**\r\n * set a date input read only.\r\n */\r\nfunction setDateReadOnly(obj, isReadOnly) {\r\n	$j(obj).prop(''readOnly'', isReadOnly);\r\n	if (isReadOnly) {\r\n		disableDatepicker(obj);\r\n	} else\r\n		enableDatepicker(obj);\r\n}\r\n\r\n/**\r\n * set a datepicker to elements.\r\n */\r\nfunction setDatepicker(obj) {\r\n	$j(obj).attr(''maxlength'', 10);\r\n	$j(obj).datepicker(defaultDatePickerOption);\r\n}\r\n\r\n/**\r\n * enable a datepicker from elements.\r\n */\r\nfunction enableDatepicker(obj) {\r\n	$j(obj).datepicker(''enable'');\r\n}\r\n\r\n/**\r\n * disable a datepicker from elements.\r\n */\r\nfunction disableDatepicker(obj) {\r\n	$j(obj).datepicker(''disable'');\r\n}\r\n\r\n/**\r\n * Validates a field regarding date. (Event Call-back Function)\r\n */\r\nfunction validateDate() {\r\n	if($j(this).val().length >= 10) {\r\n		alert(''Input the date in the right format.'');\r\n		$j(this).val($j(this).val().substring(0, 10));\r\n		return false;\r\n	}\r\n}', '', '', 5, 0),
(1181, '', '서대영', '', '2012-12-07 10:30:17', 'Spring', '[AOP] Spring-AOP 예제', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.mkyong.com/spring3/spring-aop-aspectj-annotation-example/\r\n\r\n\r\n\r\n============================== FILE ==============================\r\nAOPTest.java|CustomerBo.java|CustomerBoImpl.java|LoggingAspect.java', 'http://www.mkyong.com/spring3/spring-aop-aspectj-annotation-example/', 'AOPTest.java|CustomerBo.java|CustomerBoImpl.java|LoggingAspect.java', 3, 0),
(1182, '', '서대영', '', '2012-12-08 04:05:16', 'Spring', '[AOP] Pointcut Expression 문법', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/aop.html#aop-pointcuts', 'http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/aop.html#aop-pointcuts', '', 1, 0),
(1183, '', '서대영', '', '2012-12-08 05:49:16', 'Spring', '[AOP] ControllerLoggingAspect', '@Aspect\r\npublic class ControllerLoggingAspect {\r\n\r\n	@Pointcut("within(@org.springframework.stereotype.Controller *)")\r\n	public void controller() {}\r\n\r\n	@Pointcut("execution(public * *(..))")\r\n	public void method() {}\r\n	\r\n	@Around("controller() && method()")\r\n	public void logAround(ProceedingJoinPoint joinPoint) throws Throwable {\r\n\r\n		System.out.println("###################### START #############################");\r\n		joinPoint.proceed(); // continue on the\r\n		System.out.println("###################### STOP #############################");\r\n\r\n	}\r\n	\r\n}', '', '', 4, 0),
(1184, '', '서대영', '', '2012-12-08 06:12:10', 'Java', 'Arrays 유틸', 'Arrays.toString(배열)\r\n : 배열을 String 형태로 보여줌\r\n\r\n\r\nList<Integer> expectedList = Arrays.asList(6, 28, 496, 8128);\r\n : [Collection] Add elements at once with a line\r\n\r\n\r\n다음 처럼 <>를 사용할 수도 있음\r\n	this.converts = Arrays.<HttpMessageConverter<?>> asList(new MappingJacksonHttpMessageConverter());\r\n\r\n		this.storePlatformResponseErrorHandler.setMessageConverters(this.converts);', NULL, '', 11, 0),
(1185, '', '서대영', '', '2012-12-20 14:03:01', 'Framework', '[POI] Cell 루프 돌릴 때 null 값 처리', 'foreach 로 row 를 루프돌리면 null 인 cell 들은 건너 뛰므로 주의한다.\r\n\r\n\r\n	public List<List<String>> readList() {\r\n		List<List<String>> rowList = new ArrayList<List<String>>();\r\n		for (Row row : sheet) {\r\n			List<String> cellList = new ArrayList<String>();\r\n			for (Cell cell : row) {\r\n				String cellValue = getCellValueAsTrimmedString(cell);\r\n				cellList.add(cellValue);\r\n			}\r\n			rowList.add(cellList);\r\n		}\r\n		return rowList;\r\n	}\r\n\r\n다음과 같이 getLastCellNum() 기준으로 index 루프를 돌리면 null 값을 안 빼먹을 수 있다\r\n\r\n	public List<List<String>> readList() {\r\n		List<List<String>> rowList = new ArrayList<List<String>>();\r\n		for (Row row : sheet) {\r\n			List<String> cellList = new ArrayList<String>();\r\n			for (int i = 0 ; i < row.getLastCellNum(); i ++) {\r\n				String cellValue = getCellValueAsTrimmedString(row.getCell(i));\r\n				cellList.add(cellValue);\r\n			}\r\n			rowList.add(cellList);\r\n		}\r\n		return rowList;\r\n	}', '', '', 4, 0),
(1186, '', '서대영', '', '2012-12-21 10:07:41', 'Weblogic', '[Troubleshooting] Unable to obtain lock on', 'When you try to start weblogic server and if this fails with error message that “Unable to obtain lock on *.lok Server may already be running”\r\n\r\n________\r\nweblogic.management.ManagementException: Unable to obtain lock on /u01/oid_domain/servers/wls_ods1/tmp/wls_ods1.lok. Server may already be running at weblogic.management. internal.ServerLocks. getServerLock (ServerLocks.java:159)\r\n________\r\n\r\nThis could be because of two reasons\r\n\r\n1) WebLogic Server (which you are trying to start) is already running.\r\n2) WebLogic Server (which you are trying to start) did not stop cleanly.\r\n\r\nWhen weblogic server starts, it creates two lock files\r\na) $DOMAIN_HOME/servers/<server_name>/tmp/<servermame>.lok\r\nb) $DOMAIN_HOME/servers/<server_name>/data/ldap/ldapfiles/EmbeddedLDAP.lok\r\n\r\nWhen WebLogic server stops, it removes these two files.\r\n\r\nIf you hit problem, first identifty if server is running on port configured for WebLogic Server by using netstat.\r\n\r\nnetstat -an | grep <WebLogic_Server_Port>\r\n\r\nIf server is running then you should see output like\r\n\r\ntcp        0      0 ::ffff:<IP>:<weblogic_port>      :::* LISTEN  \r\n\r\n(Listen here identifies that it is listening)\r\n\r\nNote: There could be other process using this port\r\n\r\nHow to identify which port is configured for weblogic server?\r\nTo identify port configured for weblogic server open weblogic configuration file\r\n$DOMAIN_HOME/config/config.xml and serach for listen-port\r\n\r\nYou should see entry like\r\n<listen-port>8001</listen-port>\r\n\r\nNote: There is one listen-port for every weblogic server (Admin & Managed)\r\n\r\nIf server is not running then you can safely remove these lok files under WebLogic server.\r\n\r\nNote: If this is weblogic managed server (not Admin Server) then you can safely remove entire managed server directory (including sub directories) $DOMAIN_HOME/servers/<serverName> . When you start managed server again, Admin Server will create these directories.\r\n\r\nHitting any problem in Oracle WebLogic Server or Fusion Middleware ? Put them under comments section for reply. ', '', '', 0, 0),
(1187, '', '서대영', '', '2012-12-22 08:39:54', 'JSTL', 'JSTL 날짜 형식 바꾸기 (fmt:parseDate & fmt:formatDate)', '<fmt:formatDate value="${category.date}" pattern="yyyy/MM/dd"/>\r\n\r\n\r\n예제\r\n<fmt:formatDate pattern="yyyy-MM-dd" value="${apiTest.regDt}"/>\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://lbiryu.blog.me/30037958388', 'http://lbiryu.blog.me/30037958388', '', 5, 0),
(1188, '', '서대영', '', '2012-12-26 22:34:58', 'Spring', '[Spring JDBC] INSERT 후 KEY 값 얻기', '1) SimpleJdbcInsert 이용 시\r\n	private SimpleJdbcInsert insert;\r\n	\r\n	@Autowired\r\n	public CategoryRepositoryJdbc_AUTO_INCREMENT(DataSource dataSource) {\r\n		mapper = new BeanPropertyRowMapper<Category>(Category.class);\r\n		template = new NamedParameterJdbcTemplate(dataSource);\r\n		insert = new SimpleJdbcInsert(dataSource);\r\n		insert.withTableName("categories");\r\n		insert.usingGeneratedKeyColumns("categoryNo");\r\n	}\r\n\r\n	public void insert(Category category) {\r\n		SqlParameterSource param = new BeanPropertySqlParameterSource(category);\r\n		int key = insert.executeAndReturnKey(param).intValue();\r\n		if (key < 1) throw new RuntimeException("No rows were inserted."); \r\n		category.setCategoryNo(key);\r\n	}\r\n\r\n====================================================================\r\n2) KeyHolder 이용\r\n\r\n	@Override\r\n	public int insert(Note note) {\r\n		SqlParameterSource param = new BeanPropertySqlParameterSource(note);\r\n		KeyHolder keyHolder = new GeneratedKeyHolder();\r\n		getNamedParameterJdbcTemplate().update(INSERT, param, keyHolder, new String[]{"categoryNo"));\r\n		return keyHolder.getKey().intValue();\r\n	}', '', '', 10, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(1189, '', '서대영', '', '2012-12-28 16:46:29', 'Linux', '리눅스 콘솔에서 sendmail 보내는 방법', '\r\nSimple Help\r\nCommon Questions, Simple Answers\r\nHow to send email from the Linux command line\r\n\r\nThe Linux command line can be very powerful once you know how to use it. You can parse data, monitor processes, and do a lot of other useful and cool things using it. There often comes a need to generate a report and mail it out. It could be as simple a requirement as a notification that the day’s backup went through fine, or did not. I’ll help you get started with sending mails from the Linux command line and in shell scripts. We will also cover sending attachments from the command line. We will begin with the “mail” command.\r\n\r\nMAIL\r\n\r\nFirst run a quick test to make sure the “sendmail” application is installed and working correctly. Execute the following command, replacing “you@youremailid.com” with your e-mail address.\r\n\r\n# mail -s “Hello world” you@youremailid.com\r\n\r\nHit the return key and you will come to a new line. Enter the text “This is a test from my server”. Follow up the text by hitting the return key again. Then hit the key combination of Control+D to continue. The command prompt will ask you if you want to mark a copy of the mail to any other address, hit Control+D again. Check your mailbox. This command will send out a mail to the email id mentioned with the subject, “Hello world”.\r\n\r\nTo add content to the body of the mail while running the command you can use the following options. If you want to add text on your own:\r\n\r\n# echo “This will go into the body of the mail.” | mail -s “Hello world” you@youremailid.com\r\n\r\nAnd if you want mail to read the content from a file:\r\n\r\n# mail -s “Hello world” you@youremailid.com < /home/calvin/application.log\r\n\r\nSome other useful options in the mail command are:\r\n\r\n-s subject (The subject of the mail)\r\n-c email-address (Mark a copy to this “email-address”, or CC)\r\n-b email-address (Mark a blind carbon copy to this “email-address”, or BCC)\r\n\r\nHere’s how you might use these options:\r\n\r\n# echo “Welcome to the world of Calvin n Hobbes” | mail -s “Hello world” calvin@cnh.com -c hobbes@cnh.com -b susie.derkins@cnh.com\r\n\r\nMUTT\r\n\r\nOne of major drawbacks of using the mail command is that it does not support the sending of attachments. mutt, on the other hand, does support it. I’ve found this feature particularly useful for scripts that generate non-textual reports or backups which are relatively small in size which I’d like to backup elsewhere. Of course, mutt allows you to do a lot more than just send attachments. It is a much more complete command line mail client than the “mail” command. Right now we’ll just explore the basic stuff we might need often. Here’s how you would attach a file to a mail:\r\n\r\n# echo “Sending an attachment.” | mutt -a backup.zip -s “attachment” calvin@cnh.com\r\n\r\nThis command will send a mail to calvin@cnh.com with the subject (-s) “attachment”, the body text “Sending an attachment.”, containing the attachment (-a) backup.zip. Like with the mail command you can use the “-c” option to mark a copy to another mail id.\r\n\r\nSENDING MAIL FROM A SHELL SCRIPT\r\n\r\nNow, with the basics covered you can send mails from your shell scripts. Here’s a simple shell script that gives you a reading of the usage of space on your partitions and mails the data to you.\r\n\r\n#!/bin/bash\r\ndf -h | mail -s “disk space report” calvin@cnh.com\r\n\r\nSave these lines in a file on your Linux server and run it. You should receive a mail containing the results of the command. If, however, you need to send more data than just this you will need to write the data to a text file and enter it into the mail body while composing the mail. Here’s and example of a shell script that gets the disk usage as well as the memory usage, writes the data into a temporary file, and then enters it all into the body of the mail being sent out:\r\n\r\n#!/bin/bash\r\ndf -h > /tmp/mail_report.log\r\nfree -m >> /tmp/mail_report.log\r\nmail -s “disk and RAM report” calvin@cnh.com < /tmp/mail_report.log\r\n\r\nNow here’s a more complicated problem. You have to take a backup of a few files and mail then out. First the directory to be mailed out is archived. Then it is sent as an email attachment using mutt. Here’s a script to do just that:\r\n\r\n#!/bin/bash\r\ntar -zcf /tmp/backup.tar.gz /home/calvin/files\r\necho | mutt -a /tmp/backup.tar.gz -s “daily backup of data” calvin@cnh.com\r\n\r\nThe echo at the start of the last line adds a blank into the body of the mail being set out.\r\n\r\nThis should get you started with sending mails form the Linux command line and from shell scripts. Read up the “man page” for both mail and mutt for more options.\r\n\r\n\r\n 	\r\n28\r\n16\r\n8\r\n0\r\n0\r\n Share2157\r\n\r\n\r\nSearch\r\n\r\n  \r\n\r\nSimple Help on Google+\r\n\r\n\r\nCategories\r\n\r\nBittorrent\r\nBlogging\r\nBlu-ray\r\nBoxee\r\nCable Modems\r\nChrome\r\nEee PC\r\nEmail\r\nFacebook\r\nFirefox\r\nFlip Video\r\nGaming\r\nGiveaways and Contests\r\nHome Networking\r\nHP TouchPad\r\nInternet Explorer\r\niPad\r\niPod\r\nKindle\r\nLinks\r\nLinux\r\nMac\r\nMobile Phones\r\nAndroid\r\nBlackBerry\r\niPhone\r\nSymbian\r\nWindows Mobile\r\nMultimedia\r\nOffice\r\nOther\r\nReviews\r\nSafari\r\nScreenshot Sims\r\nSecurity\r\nTwitter\r\nWeb Design & Dev\r\nWindows\r\nWireless\r\n\r\nBookmark via QR Code\r\n\r\nWhat is this image?\r\n .\r\nSharing Successful!\r\nShare again!\r\nYou''ve successfully shared using Po.st!\r\nWelcome to po.st!\r\nPowered by Po.stPrivacy\r\n\r\nRead more at http://www.simplehelp.net/2008/12/01/how-to-send-email-from-the-linux-command-line/#LrokyMYMRmiEVOeA.99 \r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.simplehelp.net/2008/12/01/how-to-send-email-from-the-linux-command-line/', 'http://www.simplehelp.net/2008/12/01/how-to-send-email-from-the-linux-command-line/', '', 6, 0),
(1190, '', '서대영', '', '2012-12-28 21:51:20', 'HTML', 'Beginner’s Guide To: Building HTML5/CSS3 Webpages', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.hongkiat.com/blog/building-html5-css-webpages/', 'http://www.hongkiat.com/blog/building-html5-css-webpages/', '', 1, 0),
(1191, '', '서대영', '', '2012-12-28 22:03:27', 'HTML', 'HTML5 Doctor', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://html5doctor.com', 'http://html5doctor.com', '', 2, 0),
(1192, '', '서대영', '', '2013-01-04 16:47:22', 'iPlanet', 'Custom Error Response 설정', '해당 Virtual Server 에 들어가서\r\n\r\nContent Mgmt > Error Responses\r\n\r\nFile 에 커스텀 에러 파일의 절대 경로를 넣어주면 된다.\r\n\r\n주의 사항 : 파일이 4K 이상이여야 한다.\r\n', '', '', 1, 0),
(1193, '', '서대영', '', '2013-01-10 23:16:28', 'MySQL', 'Managing Hierarchical Data in MySQL', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://web.archive.org/web/20110606032941/http://dev.mysql.com/tech-resources/articles/hierarchical-data.html', 'http://web.archive.org/web/20110606032941/http://dev.mysql.com/tech-resources/articles/hierarchical-data.html', '', 0, 0),
(1194, '', '서대영', '', '2013-01-11 11:09:23', 'Pattern', '옵져버 패턴', '일다대 관계에서 일이 다로 동시에 알려줘야할 때 사용 (신문 - 구독자 모델)\r\n\r\npush 방식 : 데이터를 직접 보내줌 (데이터 바뀔 때 마다 매소드 변경이 일어나서 비권장)\r\npull 방식 : 주제를 그대로 보내서 옵져버에서 필요한 것만 꺼내 쓰게 함 (권장)\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://warmz.tistory.com/751', 'http://warmz.tistory.com/751', '', 1, 0),
(1195, '', '서대영', '', '2013-01-21 11:13:16', 'JUnit', 'Java multi-threaded unit testing 쓰레드 단위테스트', 'java concurrency API 를 이용함\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://garygregory.wordpress.com/2011/09/09/multi-threaded-unit-testing/', 'http://garygregory.wordpress.com/2011/09/09/multi-threaded-unit-testing/', '', 0, 0),
(1196, '', '서대영', '', '2013-01-22 10:44:18', 'Pattern', '팩토리 패턴', '* 객체 생성을 캡슐화함\r\n\r\n1) 추상 팩토리 패턴\r\n  * 팩토리 인터페이스를 만들고 서브 팩토리 구현을 만듬\r\n  * 하나 뿐만 아니라 여러개의 Product 을 생산할 때\r\n  * 구성을 이용\r\n\r\n2) 팩토리 매서드 패턴\r\n  * 클라이언트에 abstract 팩토리 매서드를 만들고 서브 클래스에서 구현\r\n  * 하나의 Product 을 생상할 때\r\n  * 상속을 이용\r\n  * LSP 를 위반하기 때문에 추천되지 않음\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://stackoverflow.com/questions/4209791/design-patterns-abstract-factory-vs-factory-method', 'http://stackoverflow.com/questions/4209791/design-patterns-abstract-factory-vs-factory-method', '', 5, 0),
(1197, '', '서대영', '', '2013-01-22 10:45:46', 'Pattern', 'Dependency Inversion Principle (DIP)', '외존성 뒤집기 법칙\r\n\r\n\r\n클라이언트 클래스가 구현 클래스들에 의존하는 방법에서,\r\n역으로 클리언트 클래스는 추상 클래스 하나에 의존하고,\r\n구현 클래스들이 이 추상 클래스에 의존(구현) 하게 하는 방법', '', '', 0, 0),
(1198, '', '서대영', '', '2013-01-24 13:25:35', 'JUnit', 'How to access Spring context in JUnit', '@Autowired\r\nApplicationContext context;\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://stackoverflow.com/questions/2425015/how-to-access-spring-context-in-junit-tests-annotated-with-runwith-and-context', 'http://stackoverflow.com/questions/2425015/how-to-access-spring-context-in-junit-tests-annotated-with-runwith-and-context', '', 3, 0),
(1221, '', '서대영', '', '2013-03-13 11:22:00', 'Java', '기본 RuntimeException', 'IllegalStateException\r\nIlleaalArgumentException\r\nUnsupportedOperationException', '', '', 4, 0),
(1222, '', '서대영', '', '2013-03-13 11:25:49', 'Regex', 'IP 정규식', '		Pattern pattern = Pattern.compile("^((2[0-4][0-9]|25[0-5]|1[0-9]{2}|[0-9]{1,2})\\\\.){3}(2[0-4][0-9]|25[0-5]|1[0-9]{2}|[0-9]{1,2})$");\r\n		Matcher matcher = pattern.matcher(host);\r\n		\r\n		if (!matcher.matches())\r\n			throw new IllegalArgumentException("Invalid Host");	\r\n		if (port <= 0)\r\n			throw new IllegalArgumentException("Invalid Port");', '', '', 3, 0),
(1199, '', '서대영', '', '2013-01-27 18:57:33', 'Pattern', '데코레이터, 어댑터, 퍼사드 패턴', '* 데코레이터 패턴\r\n - 인터페이스는 유지한 체로 매서드의 기능을 추가할 때\r\n\r\n* 어댑터 패턴\r\n  - 인터페이스를 변경할 때\r\n\r\n* 퍼사드 패턴\r\n  - 여러 개의 인터페이스를 통합해서 편리한 인터페이스 제공', '', '', 3, 0),
(1200, '', '서대영', '', '2013-01-29 14:31:53', 'Network', 'IDC 에서 telent 과 URL 접속이 동시에 안되는 이유', '서버의 internal IP로 telnet을 하려면 서버에 static route에 내 IP를 등록하는데,\r\n이러면 IDC내에서 URL 접속이 불가능해진다.\r\n즉 internal IP telnet 과 URL open 중 둘 중에 하나만 선택해야 한다.\r\n해결책으로는 service IP로 telnet 을 하면 된다.\r\n\r\n서대영(선임/삼성SDS)&#8206;&#8206; [오후 1:16]:\r\n  Since I released the firewalls to telnet 109.10.1.55 & 109.10.1.56,\r\n  I haven''t been able to connect to the system by its URL which is http://gspn4.samsungcsportal.com from my PC.\r\n  But others who didn''t release the firewalls can connect by the url.\r\n  Do you have any clue?\r\n&#8206;&#8206;zhi liu(Assistant Manager/Samsung SDS China)&#8206;&#8206; [오후 1:18]:\r\n  yes\r\n  If you telnet 1.55&1.56,you can not open URL  http://gspn4.samsungcsportal.com\r\n  Because the static route is different\r\n----------------------------------\r\n안녕하세요.\r\n\r\n북경센터 김영환입니다.\r\n\r\n \r\n\r\n본 건 관련 확인한 바, 아래와 같이 회신드립니다.\r\n\r\n \r\n\r\n해당 서버에 랜카드가 두개 있는데, 하나는 공인ip 접속/하나는 내부ip 접속 입니다.\r\n\r\n\r\n동일 서버에 대하여 27대역과 109대역 동시 접속이 불가한 상황입니다.\r\n\r\n이유는 URL로 접속시 서버에서 서비스 법인의 IP에 대하여 내부망으로 reply하는 구조(비대칭라우팅)이기 때문입니다. \r\n\r\nIP로 접속시는 전자 내부망으로 접속되는 구조입니다.\r\n\r\n \r\n\r\n[ URL 접속 ] request : 서비스법인 -> 인터넷방화벽 ->DMZ 스위치 -> 서버\r\n\r\n                 reply : 서버 -> SAP_DMZ 스위치 -> SAP_DMZ 방화벽 -> SAP 방화벽 ->전자백본 -> 서비스법인\r\n\r\n \r\n\r\n\r\n조치방안.\r\n\r\n 서버에서 SBSC 출장자향 라우팅은 109.10.10.1로 하지 말고, default gateway로 nexthop을 지정하시고\r\n\r\n 아래 메일에 있는 출장자 IP(109.52.4.71 .X)에 대해서 서버에서 라우팅 설정바랍니다.\r\n\r\n 아울러, 27.x.x.x로 telnet 접속을 위해 방화벽 신청바랍니다.\r\n\r\n \r\n\r\n감사합니다.\r\n\r\n\r\n\r\n\r\n-------------------------------------\r\n2013년 3월 6일 업데이트!!\r\n서비스법인 라우터에서 url로 방문하는 경로를 잡아줬떠니 해결이 가능했다.\r\n서버 telnet 접속과 사이트url 접속이 모두 가능해졌따!!', '', '', 5, 0),
(1201, '', '서대영', '', '2013-01-29 16:03:25', 'Java', '쓰레드 덤프 남기기', 'jstack -l <pid>\r\n\r\n----------------\r\nkill -3 <pid>\r\n를 하면\r\n\r\njavacore.~~.txt 라고 남음', '', '', 4, 0),
(1202, '', '서대영', '', '2013-01-31 14:57:39', 'JCo', '그룹 로그온 (메세지서버) 사용시 /etc/services 세팅', '/etc/services\r\n\r\nsapmsWYT         3600/tcp\r\nsapmsWYP         3600/tcp\r\nsapmsGJD         3600/tcp\r\nsapmsGJQ         3600/tcp\r\nsapmsGJP         3600/tcp\r\nsapmsGMQ         3600/tcp\r\nsapmsGXP         3600/tcp\r\nsapmsGMP         3600/tcp\r\nsapmsGFP         3600/tcp\r\nsapmsGIP         3600/tcp\r\nsapmsCAP         3600/tcp\r\n\r\n\r\n규칙 sapms + SIS(SAPR3NAME)', '', '', 2, 0),
(1203, '', '서대영', '', '2013-02-04 19:55:50', 'Spring', 'Spring Form 으로 Multiple Model 다루기', '여러 개의 Model 을 감싸는 Wrapper Command Object 를 만들면 됨\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://forum.springsource.org/showthread.php?82306-Spring-form-Tags-and-Multiple-Models', 'http://forum.springsource.org/showthread.php?82306-Spring-form-Tags-and-Multiple-Models', '', 0, 0),
(1204, '', '서대영', '', '2013-02-06 13:24:07', 'Window', '윈도우 단축키', '컴퓨터 종료\r\nWin → Enter\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://lam01.tistory.com/224', 'http://lam01.tistory.com/224', '', 0, 0),
(1205, '', '서대영', '', '2013-02-06 16:06:43', 'Spring', '[Spring JDBC] SqlParameterSource 합치기', 'How to combine multiple parameter sources in Spring JDBC?\r\n\r\nYou can extend AbstractSqlParameterSource and aggregate both BeanProperty and Map versions:\r\n\r\npublic class MixedSqlParameterSource extends AbstractSqlParameterSource {\r\n	  private MapSqlParameterSource mapParam = new MapSqlParameterSource();\r\n	  private BeanPropertySqlParameterSource beanParam;\r\n\r\n	  public MixedSqlParameterSource(Object object) {\r\n	    this.beanParam = new BeanPropertySqlParameterSource(object);\r\n	  }\r\n\r\n	  public void addValue(String paramName, Object value) {\r\n	    mapParam.addValue(paramName, value);\r\n	  }\r\n\r\n	  public boolean hasValue(String paramName) {\r\n	    return beanParam.hasValue(paramName) || mapParam.hasValue(paramName);\r\n	  }\r\n\r\n	  public Object getValue(String paramName) {\r\n	    return beanParam.hasValue(paramName) ? beanParam.getValue(paramName) : mapParam.getValue(paramName);\r\n	  }\r\n\r\n	  public int getSqlType(String paramName) {\r\n	    return beanParam.hasValue(paramName) ? beanParam.getSqlType(paramName) : mapParam.getSqlType(paramName);\r\n	  }\r\n}\r\nAnd now use it like this:\r\n\r\nSqlParameterSource mySource = new CombinedSqlParameterSource(myOrder);\r\nmySource.addValue("recordModificationTime", time);\r\nmySource.addValue("accessLevel", level);\r\n\r\njdbcTemplate.update(sql, mySOurce);', '', '', 7, 0),
(1208, '', '서대영', '', '2013-02-09 16:22:00', 'Java', 'StringBuilder VS StirngBuffer', 'StringBuidler : 빠름, 싱글쓰레드\r\nStringBuffer :  느림, 멀티쓰레드\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://stackoverflow.com/questions/355089/stringbuilder-and-stringbuffer-in-java', 'http://stackoverflow.com/questions/355089/stringbuilder-and-stringbuffer-in-java', '', 2, 0),
(1206, '', '서대영', '', '2013-02-07 10:42:25', 'Spring', 'Spring Bean XML 파일 임포트', '<import resource="classpath:config/spring/that-other-xml-conf.xml"/>\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://stackoverflow.com/questions/7711750/how-to-reference-a-bean-of-another-xml-file-in-spring', 'http://stackoverflow.com/questions/7711750/how-to-reference-a-bean-of-another-xml-file-in-spring', '', 0, 0),
(1207, '', '서대영', '', '2013-02-09 12:38:55', 'Spring', '[Spring JDBC] Enum 필드 맵핑하기', 'ParamSource  만 아래 철머 강제로 DB Data Type 세팅해주면 된다.\r\n(RowMapper 는 자동으로 됨)\r\n\r\nRowMapper<Zervice> mapper = new BeanPropertyRowMapper<Zervice>(Zervice.class);\r\n		SqlParameterSource param = new BeanPropertySqlParameterSource(interfac);\r\n((AbstractSqlParameterSource) param).registerSqlType("bound", Types.VARCHAR);', '', '', 7, 0),
(1209, '', '서대영', '', '2013-02-13 10:39:36', 'Linux', 'Linux Library 이해 (so, sl)', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/xogml_blog?Redirect=Log&logNo=130138049704', 'http://blog.naver.com/xogml_blog?Redirect=Log&logNo=130138049704', '', 0, 0),
(1210, '', '서대영', '', '2013-02-13 17:38:20', 'Spring', 'JNDI Lookoup 하여 Bean 등록', '<beans>\r\n\r\n  <jee:jndi-lookup id="myDataSource" jndi-name="java:comp/env/jdbc/myds"/>\r\n\r\n</beans>', '', '', 0, 0),
(1211, '', '서대영', '', '2013-02-13 19:40:34', 'Hibernate', 'Hibernate Annotation 세팅', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.mkyong.com/spring/maven-spring-hibernate-annotation-mysql-example/', 'http://www.mkyong.com/spring/maven-spring-hibernate-annotation-mysql-example/', '', 2, 0),
(1212, '', '서대영', '', '2013-02-15 11:41:17', 'Hibernate', 'HibernateTemplate 의 find 시리즈', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://stackoverflow.com/questions/5508426/spring3-hibernate-how-do-i-use-hibernatetemplate', 'http://stackoverflow.com/questions/5508426/spring3-hibernate-how-do-i-use-hibernatetemplate', '', 0, 0),
(1213, '', '서대영', '', '2013-02-15 18:35:24', 'JQuery', 'jQuery File Upload', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blueimp.github.com/jQuery-File-Upload/', 'http://blueimp.github.com/jQuery-File-Upload/', '', 0, 0),
(1214, '', '서대영', '', '2013-02-20 20:32:41', 'Security', 'Open Redirect', 'http://msbang.co.kr/80180861230\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://i-bada.blogspot.kr/2013/01/10-redirectforward.html', 'http://i-bada.blogspot.kr/2013/01/10-redirectforward.html', '', 9, 0),
(1215, '', '서대영', '', '2013-02-22 13:29:18', 'Hibernate', 'Hibernate Spring 통합', '<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">\r\n    	<property name="sessionFactory" ref="sessionFactory"/>\r\n  	</bean>\r\n\r\n	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">\r\n		<property name="dataSource" ref="dataSource" />\r\n		<property name="hibernateProperties">\r\n	       <props>\r\n	         <prop key="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</prop>\r\n	         <prop key="hibernate.show_sql">true</prop>\r\n	         <prop key="hibernate.format_sql">true</prop>\r\n	       </props>\r\n		</property>\r\n		<!-- property name="annotatedPackages" value="sds.cs.mjs.domain" / -->\r\n		<property name="packagesToScan">\r\n			<list>\r\n				<value>sds.cs.mjs.domain</value>\r\n			</list>\r\n    	</property>\r\n	</bean>\r\n	\r\n	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">\r\n		<property name="driverClassName" value="net.sf.log4jdbc.DriverSpy"></property>\r\n		<property name="url" value="jdbc:log4jdbc:oracle:thin:@10.41.131.173:1521/gspnd"></property>\r\n		<property name="username" value="mjs"></property>\r\n		<property name="password" value="dlatl123"></property>\r\n	</bean>	', '', '', 2, 0),
(1216, '', '서대영', '', '2013-02-22 21:17:33', 'Hibernate', 'Hibernate DAO 구현', '\r\n\r\nhttp://blog.patouchas.net/technology/hibernate-dao-java-tutorial/\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://singgihpraditya.wordpress.com/2010/02/13/spring-3-0-and-hibernate-tutorial-part-1/', 'http://singgihpraditya.wordpress.com/2010/02/13/spring-3-0-and-hibernate-tutorial-part-1/', '', 0, 0),
(1217, '', '서대영', '', '2013-02-22 21:18:13', 'Hibernate', 'Hibernate ManyToOne 구현', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.mkyong.com/hibernate/hibernate-one-to-many-relationship-example-annotation/', 'http://www.mkyong.com/hibernate/hibernate-one-to-many-relationship-example-annotation/', '', 0, 0),
(1218, '', '서대영', '', '2013-02-27 10:13:03', 'Unix', 'startAll.sh', 'chk=`ps -ef |grep businessAdmin |grep -v grep| wc -l`\r\nchk1=`ps -ef |grep businessSvr1_01 |grep -v grep| wc -l`\r\nchk2=`ps -ef |grep businessSvr1_02 |grep -v grep| wc -l`\r\nchk3=`ps -ef |grep businessSvr1_03 |grep -v grep| wc -l`\r\nchk4=`ps -ef |grep businessSvr1_04 |grep -v grep| wc -l`\r\nchk5=`ps -ef |grep businessSvr1_05 |grep -v grep| wc -l`\r\n\r\necho "businessAdmin : " $chk\r\necho "businessSvr1_01 : " $chk1\r\necho "businessSvr1_02 : " $chk2\r\necho "businessSvr1_03 : " $chk3\r\necho "businessSvr1_04 : " $chk4\r\necho "businessSvr1_05 : " $chk5\r\n\r\nif [ $chk == 0 ]\r\nthen\r\n        echo "businessAdmin was already stopped.";\r\n        /gspn/bea/domains/businessDomain/startA.sh\r\n        sleep 60\r\nelse\r\n        echo "businessAdmin was already started.";\r\nfi\r\n\r\nif [ $chk1 == 0 ]\r\nthen\r\n        echo "businessSvr1_01 was already stopped.";\r\n        /gspn/bea/domains/businessDomain/startM1_jenn.sh\r\nelse\r\n        echo "businessSvr1_01 was already started.";\r\nfi\r\n\r\nif [ $chk2 == 0 ]\r\nthen\r\n        echo "businessSvr1_02 was already stopped.";\r\n        /gspn/bea/domains/businessDomain/startM2_jenn.sh\r\nelse\r\n        echo "businessSvr1_02 was already started.";\r\nfi\r\n\r\nif [ $chk3 == 0 ]\r\nthen\r\n        echo "businessSvr1_03 was already stopped.";\r\n        /gspn/bea/domains/businessDomain/startM3_jenn.sh\r\nelse\r\n        echo "businessSvr1_03 was already started.";\r\nfi\r\n\r\nif [ $chk4 == 0 ]\r\nthen\r\n        echo "businessSvr1_04 was already stopped.";\r\n        /gspn/bea/domains/businessDomain/startM4_jenn.sh\r\nelse\r\n        echo "businessSvr1_04 was already started.";\r\nfi\r\n\r\nif [ $chk5 == 0 ]\r\nthen\r\n        echo "businessSvr1_05 was already stopped.";\r\n        /gspn/bea/domains/businessDomain/startM5_jenn.sh\r\nelse\r\n        echo "businessSvr1_05 was already started.";\r\nfi', '', '', 0, 0),
(1219, '', '서대영', '', '2013-02-27 10:13:38', 'Unix', 'stopAll.sh', './stopM5.sh&\r\n./stopM4.sh&\r\n./stopM3.sh&\r\n./stopM2.sh&\r\n./stopM1.sh&\r\n./stopA.sh&', '', '', 0, 0),
(1220, '', '서대영', '', '2013-03-04 17:47:10', 'Network', 'IP 충돌 확인', 'C:\\Users\\Dale>nbtstat -A 109.52.4.64\r\n\r\n로컬 영역 연결:\r\n노드 IpAddress: [109.52.4.65] 범위 ID: []\r\n\r\n           NetBIOS 원격 컴퓨터 이름 테이블\r\n\r\n       이름               유형         상태\r\n    ---------------------------------------------\r\n    PBS            <20>  UNIQUE      등록됨\r\n    PBS            <00>  UNIQUE      등록됨\r\n    WORKGROUP      <00>  GROUP       등록됨\r\n\r\n    MAC 주소 = E8-03-9A-E8-5A-5D\r\n\r\n\r\n무선 네트워크 연결:\r\n노드 IpAddress: [0.0.0.0] 범위 ID: []\r\n\r\n    호스트를 찾을 수 없습니다.\r\n\r\n무선 네트워크 연결 2:\r\n노드 IpAddress: [0.0.0.0] 범위 ID: []\r\n\r\n    호스트를 찾을 수 없습니다.', '', '', 0, 0),
(1223, '', '서대영', '', '2013-03-13 12:40:46', 'Maven', 'Local Repository 등록', '* ojdbc6 (Oracal 11g)\r\nmvn install:install-file -Dfile=D:\\Library\\oracle\\ojdbc6.jar \r\n-DgroupId=com.oracle -DartifactId=ojdbc6 -Dversion=11.2.0.3 -Dpackaging=jar\r\n\r\n* Opencsv\r\n\r\nmvn install:install-file -Dfile=D:workspacegspngspn_swinglibopencsv-2.0.jar -DgroupId=net.sf.opencsv -DartifactId=opencsv -Dversion=2.0 -Dpackaging=jar -DgeneratePom=true\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.mkyong.com/maven/how-to-add-oracle-jdbc-driver-in-your-maven-local-repository/', 'http://www.mkyong.com/maven/how-to-add-oracle-jdbc-driver-in-your-maven-local-repository/', '', 2, 0),
(1224, '', '서대영', '', '2013-03-13 17:27:49', 'Maven', 'jar 파일에 dependency 포함시키기', '1) pom.xml 에 아래 추가\r\n\r\n<project>\r\n  <build>\r\n    <plugins>\r\n      <plugin>\r\n        <groupId>org.apache.maven.plugins</groupId>\r\n        <artifactId>maven-assembly-plugin</artifactId>\r\n        <version>2.2.1</version>\r\n        <configuration>\r\n          <descriptorRefs>\r\n            <descriptorRef>jar-with-dependencies</descriptorRef>\r\n          </descriptorRefs>\r\n        </configuration>\r\n      </plugin>\r\n    </plugins>\r\n  </build>\r\n</project>\r\n\r\n2) mvn assembly:assembly\r\n\r\ntarget 경로에 jar 파일이 2개 생성된다. 하나는 dependency가 없는 파일이고, 하나는 dependency가 포함된 파일이다.\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://entireboy.egloos.com/4615383', 'http://entireboy.egloos.com/4615383', '', 3, 0),
(1225, '', '서대영', '', '2013-03-13 17:36:31', 'Maven', 'Executable Jar 만들기', 'maven-jar-plugin 를 이용하여 manifest 파일을 수정해준다.\r\n\r\n	<build>\r\n		<plugins>\r\n			<plugin>\r\n				<groupId>org.apache.maven.plugins</groupId>\r\n				<artifactId>maven-jar-plugin</artifactId>\r\n				<configuration>\r\n					<archive>\r\n						<manifest>\r\n							<mainClass>CsvFirewallPrinterRunner</mainClass>\r\n							<packageName>seo.dale.gspn.firewall.print</packageName>\r\n						</manifest>\r\n					</archive>\r\n				</configuration>\r\n			</plugin>', '', '', 0, 0),
(1226, '', '서대영', '', '2013-03-15 09:45:14', 'Eclipse', 'Context Root 바꾸기', 'Project Properties > Web Project Setting > Context Root', '', '', 0, 0),
(1227, '', '서대영', '', '2013-03-19 22:17:56', 'CSS', 'CSS3 로 Form 꾸미기', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://24ways.org/2009/have-a-field-day-with-html5-forms/', 'http://24ways.org/2009/have-a-field-day-with-html5-forms/', '', 1, 0),
(1228, '', '서대영', '', '2013-03-21 15:23:59', 'JSTL', 'c:if', '값이 같은가? 에 대한 비교로 보통 "== ", "!=" 을 많이 사용한다\r\n\r\n \r\n\r\n이는 jstl에서도 마찬가지면 숫자와 문자 구분은 따움표로 구만해서 사용하는데 이대신 eq, ne를 사용하는것과 \r\n\r\n \r\n\r\nlist, map 같은 객체가 값이 있느냐 없느냐의 구분하는 용도로 empty 를 사용 할 수 있다.\r\n\r\n \r\n\r\n사용법은 아래와 같다\r\n\r\n \r\n\r\n=============================================== Sample =============================================\r\n\r\nEx) eq (==)\r\n\r\n1. <c:if test="${ null eq test_column }"> // null\r\n\r\n2. <c:if test="${ 0 eq test_column }"> // 숫자\r\n\r\n3. <c:if test="${ ''0'' eq test_column }"> // 문자\r\n\r\n \r\n\r\nEx) empty  \r\n\r\n= <c:if test="${ empty  test_columnMap }"> // list, map 객체 등\r\n\r\n= <c:if test="${ !empty  test_columnMap }"> // 비어 있지 않은 경우\r\n\r\n \r\n\r\nEx) ne (!=)\r\n\r\n1. <c:if test="${ null ne test_column }"> // null\r\n\r\n2. <c:if test="${ 0 ne test_column }"> // 숫자\r\n\r\n3. <c:if test="${ ''0'' ne test_column }"> // 문자\r\n\r\n\r\n\r\n', '', '', 10, 0),
(1229, '', '서대영', '', '2013-03-21 15:47:40', 'JSTL', 'jstl 로 dropdown box 구현', '				<form:select path="user_status">\r\n					<c:forEach var="status" items="${statusList}">\r\n						<option ${status == portalUser.user_status ? ''selected'' : ''''}><c:out value="${status}" /></option>						\r\n					</c:forEach>\r\n				</form:select>', '', '', 5, 0),
(1230, '', '서대영', '', '2013-03-21 21:03:21', 'Spring', '[MVC] @DateTimeFormat 사용법', 'Stirng -> Date 바인딩 에러가 날 떄 사용\r\n\r\n\r\n1. spring context 등록\r\n\r\n<mvc:annotation-driven />\r\n\r\n2. maven 등록\r\n<dependency>\r\n  <groupId>joda-time</groupId>\r\n  <artifactId>joda-time</artifactId>\r\n  <version>1.6.2</version>\r\n  <scope>runtime</scope>\r\n </dependency>\r\n\r\n3. bean 파일에 선언\r\n   @DateTimeFormat(pattern="yyyy-MM-dd h:mm:ss")\r\n   private Date regDt;\r\n   public Date getRegDt() {\r\n  return regDt;\r\n    }\r\n   public void setRegDt(Date regDt) {  \r\n  this.regDt = regDt;\r\n   }\r\n\r\n4. jsp 페이지에서 아래와 같이 사용하면  \r\n   <spring:eval expression="board.regDt"/>\r\n5. 결과\r\n 2012-08-23 12:00:00\r\n[출처] spring 3에서 @DateTimeFormat(pattern="yyyy-MM-dd h:mm:ss") 어노테이션 사용법|작성자 나쁜천사\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n===================================================\r\n날짜가 페이지마다 다른 포멧으로 나와야 한다면 위 방법보다는\r\nJSTL 을 쓰는게 유리하다.\r\n<fmt:formatDate pattern="yyyy-MM-dd" value="${apiTest.regDt}"/>\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/ksy79792000?Redirect=Log&logNo=130145457935', 'http://blog.naver.com/ksy79792000?Redirect=Log&logNo=130145457935', '', 17, 0),
(1231, '', '서대영', '', '2013-03-29 14:45:30', 'Network', 'ICMP', 'ping 이나 tracert 때 사용되면 보통 포트 1을 사용한다.\r\n\r\nICMP\r\n[ Internet control message protocol ]\r\n\r\nInternet control message protocol의 약어. TCP/IP 프로토콜에서 IP 네트워크의 IP 상태 및 오류 정보를 공유하게 하며 핑(ping)에서 사용된다.\r\n\r\nInternet control message protocol 인터넷 통제 메시지 프로토콜.', '', '', 1, 0),
(1246, '', '서대영', '', '2013-09-05 15:43:48', 'Mac', '키보드 세팅', 'shift + space 로 한영 전환 세팅하면 편리\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://macnews.tistory.com/297', 'http://macnews.tistory.com/297', '', 0, 0),
(1232, '', '서대영', '', '2013-04-08 15:50:18', 'Java', 'String.format VS System.out.printf', '* String.format() : 문자열 리턴\r\n* System.out.printf() : 콘솔 출력\r\n= System.out.format()\r\n\r\nprivate static final String URL = "http://%s.samsungcsportal.com/gspn/operate.do?cmd=loginUserCmd&search_corpCode=%s&search_userId=%s";\r\n	\r\n	public static String url(SystemID systemID, String subsidiary, String userID) {\r\n		String url = String.format(URL, systemID.getDomain(), subsidiary, userID);\r\n		return url;\r\n	}', '', '', 12, 0),
(1233, '', '서대영', '', '2013-04-08 17:27:19', 'CSS', '버튼 왼쪽 정렬', 'button {\r\n	float: right;\r\n	position: relative;\r\n}', '', '', 0, 0),
(1234, '', '서대영', '', '2013-04-25 18:00:31', 'HTML', 'HTML5 Form samples & tutorials', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://spyrestudios.com/22-useful-html5-css3-form-tutorials/', 'http://spyrestudios.com/22-useful-html5-css3-form-tutorials/', '', 1, 0),
(1235, '', '서대영', '', '2013-04-25 18:59:52', 'HTTP', 'textarea 내의 엔터값 처리', 'source 라는 textarea 에 다음과 같이 입력하면,\r\n\r\n10.240.54.53\r\n10.240.48.157\r\n180.236.228.157\r\n\r\nurl query string 은 다음과 같이 들어가고,\r\n\r\nsource=10.240.54.53%0D%0A10.240.48.157%0D%0A180.236.228.157\r\n\r\njava 단에서는 다음과 같이 인식한다.\r\n\r\n		String sourceIP = \r\n				"10.240.54.53\\r\\n" +\r\n				"10.240.48.157\\r\\n" +\r\n				"180.236.228.157";', '', '', 1, 0),
(1236, '', '서대영', '', '2013-05-06 15:09:14', 'Security', 'URL Encoding', 'XSS 공격할 때 많이 사용함\r\n\r\nhttp://biz4q.samsungcsportal.com/svctracking/common/SVCPopMyModelSearch.jsp?model_p=%0aalert(1)//&ASC_CODE_p=&stock_sts=U&prod=NOHHP&funcName=setModelInfo\r\n\r\n예를 들어 위의 URL을 실행시킬 경우,\r\n화면에 model_p 파라미터를 그대로 출력하는 자바스크립트가 있다면,\r\n"엔터 + alert(1)//" 가 실행될 수 있으므로 주의\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.w3schools.com/tags/ref_urlencode.asp', 'http://www.w3schools.com/tags/ref_urlencode.asp', '', 3, 0),
(1237, '', '서대영', '', '2013-05-14 16:06:59', 'Tuning', 'Code Inspection 툴 (PMD & FireBugs)', 'http://jongsi.tistory.com/221\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/palfuni?Redirect=Log&logNo=120154871711', 'http://blog.naver.com/palfuni?Redirect=Log&logNo=120154871711', '', 1, 0),
(1238, '', '서대영', '', '2013-05-14 21:55:28', 'Tuning', 'PMD 사용법', '이클립스에 플러그인 설치해서 코딩하면서 점검할 수도 있고,\r\n바이너리 파일을 받아서 console 에서 실행할 수도 있다.\r\n\r\nconsole 실행 방법을 보면,\r\n\r\nType "pmd -d [filename|jar or zip file containing source code|directory] -f [report format] -R [ruleset file]", i.e:\r\n\r\nD:\\pmd\\pmd-bin-5.0.4\\bin>pmd -d D:\\workspace\\gspn_biz\\GSPNRes\\src -f text -R rulesets/java/unusedcode.xml > pmd_gspn_unused.txt\r\n\r\nD:\\pmd\\pmd-bin-5.0.4\\bin>pmd -d D:\\workspace\\gspn_biz\\GSPNRes\\src -f xml -R rulesets/java/basic.xml > pmd_gspn_basic.xml', '', '', 2, 0),
(1239, '', '서대영', '', '2013-05-21 10:43:41', 'Unix', '[AIX] PS1 프롬프트 포멧 세팅', '* 유저네임 : 디렉토리\r\nexport PS1=''$LOGNAME:$PWD> ''\r\n\r\n* 최하위 디렉토리만 표시\r\nexport PS1="${USER}@${HOSTNAME}:/${PWD##*/} > "\r\n\r\n* 명령어 실행횟수까지 표시\r\nexport PS1="<gspn"'':$LOGNAME[!]$PWD>''\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttps://www.ibm.com/developerworks/community/forums/html/topic?id=77777777-0000-0000-0000-000014014972', 'https://www.ibm.com/developerworks/community/forums/html/topic?id=77777777-0000-0000-0000-000014014972', '', 2, 0),
(1240, '', '서대영', '', '2013-05-22 14:03:15', 'JCo', 'Message Server 역할', 'Client 를 부하가 적은 AP 서버로 안내해줌.\r\n\r\n\r\n중국 (AP) -> G-ERP (Message Server) -> G-ERP (AP) 이렇게 안가요..\r\n\r\n\r\n중국 AP -> G-ERP (3600)\r\nG-ERP -> 중국 (AP) 여유로운 AP 정보 송신\r\n중국 AP -> G-ERP (AP) 여유로운 AP 접속\r\n  이런식으로 접속 할거에요..\r\n  Message Server 가 AP 중에 부하가 낮은 AP 정보를 알려주면 중국에서 다시 부하가 낮은 AP 의 33XX 번대의 포트로 접속을 할거에요..\r\n', '', '', 1, 0),
(1241, '', '서대영', '', '2013-06-29 10:50:47', 'Unix', 'too many open files 관련 O/S 조치', '수신 : 장호림 차장 외\r\n\r\n참조 : 수신처 참조\r\n\r\n \r\n\r\n현재 109.10.1.60 서버에서 구동되는 일부프로그램에서 소켓 과다사용으로 인한 장애가 인지되고있습니다.\r\n\r\n해당 서버의 관련 Parameter를 조회해보았습니다.\r\n\r\n\r\nwasadm@bjgspnpa4:[/bea/domains/cmscnDomain] no -a | grep rto\r\n                 rto_high = 64\r\n               rto_length = 13\r\n                rto_limit = 7\r\n                  rto_low = 1\r\n              tcp_low_rto = 0\r\n\r\n \r\n\r\nwasadm@bjgspnpa4:[/bea/domains/cmscnDomain] no -a | grep tcp\r\n                    hstcp = 0\r\n       tcp_bad_port_limit = 0\r\n        tcp_cwnd_modified = 0\r\n                  tcp_ecn = 0\r\n       tcp_ephemeral_high = 65535\r\n        tcp_ephemeral_low = 32768\r\n               tcp_fastlo = 0\r\n     tcp_fastlo_crosswpar = 0\r\n             tcp_finwait2 = 1200\r\n           tcp_icmpsecure = 0\r\n          tcp_init_window = 0\r\n    tcp_inpcb_hashtab_siz = 24499\r\n              tcp_keepcnt = 8\r\n             tcp_keepidle = 14400\r\n             tcp_keepinit = 40\r\n            tcp_keepintvl = 10\r\n     tcp_limited_transmit = 1\r\n              tcp_low_rto = 0\r\n             tcp_maxburst = 0\r\n              tcp_mssdflt = 1460\r\n          tcp_nagle_limit = 1\r\n        tcp_nagleoverride = 0\r\n               tcp_ndebug = 100\r\n              tcp_newreno = 1\r\n           tcp_nodelayack = 1\r\n        tcp_pmtu_discover = 1\r\n            tcp_rand_port = 0\r\n       tcp_rand_timestamp = 0\r\n            tcp_recvspace = 655360\r\n            tcp_sendspace = 655360\r\n            tcp_tcpsecure = 0\r\n             tcp_timewait = 1\r\n                  tcp_ttl = 60\r\n           tcprexmtthresh = 3\r\n             tcptr_enable = 0\r\n\r\n \r\n\r\nFIN_WAIT_1 : rto_high(64)+(rto_high(64)/rto_limit(7))*(rto_length(13)-rto_limit(7)) = 118.8 sec\r\n\r\nFIN_WAIT_2 : tcp_keepintvl(10)/2 * tcp_keepcnt(8) + tcp_keepidle(14400)/2 = 7240 sec\r\n\r\nTIME_WAIT  : tcp_timewait(1) *15 = 15 sec\r\n\r\n \r\n\r\n하나의 세션이 끊기는데는  FIN_WAIT_1 + FIN_WAIT_2 + TIME_WAIT 이 걸리는것으로 알고있습니다.\r\n\r\n현재 해당서버는 CTI 장비에서 콜이발생할때마다, 접속하여 소켓통신을 하고있습니다.\r\n\r\n따라서, 접속횟수가 빈번하게 발생함에 따라, TIME_WAIT이나, FIN_WAIT으로 빠지는 소켓이 많은것으로 보입니다.\r\n\r\n일단 CLOSE 상태로 빠지기 전까지 소켓을 잡고있는 것들이 과다하게 발생하는 증상이 보이고 있구요\r\n\r\n \r\n\r\n현재 해당서버가 일반적인 웹시스템(GSPN)과  동시에 사용중이기때문에, CMS를 위한 세팅만을 제공할수는 없으나\r\n\r\nFile Descripter가 unlimited 로 구성되어있음에도 불구하고,  부하가 걸렸을시 CMS 프로그램에서 \r\n\r\ntoo many open files 가 발생하고있는 상황입니다.\r\n\r\n \r\n\r\n따라서, 상기 값은 어느정도는 짧게 가져가야 할것 같은데\r\n\r\n다른 값보다 tcp_keepidle 값이 14400이 너무커서 짧게 가져가도 되지 않을까 합니다.\r\n\r\nOS 엔지니어 측에서 해당의견을 검토해보시고 적용바랍니다.\r\n\r\n \r\n\r\n지급으로 검토바랍니다.\r\n\r\n감사합니다.\r\n', '', '', 7, 0),
(1242, '', '서대영', '', '2013-07-24 00:37:21', 'SQL', '[Oracle] EXTRACT 년/월/일 출력', 'SELECT sysdate, EXTRACT(YEAR FROM sysdate), EXTRACT(MONTH FROM sysdate), EXTRACT (DAY FROM sysdate) FROM dual', '', '', 0, 0),
(1243, '', '서대영', '', '2013-07-24 00:47:20', 'SQL', 'CASE Expression', '* Simple Case Expression\r\n - CASE 다음에 바로 조건식을 표현하고 \r\n   WHEN 절 다음에서 = 조건만 체크\r\n - Oracle 에서는 DECODE 로 간단히 표현 가능\r\n\r\nex) \r\nSELECT LOC,\r\nCASE LOC\r\nWHEN ''NEW YORK'' THEN ''EAST''\r\nWHEN ''BOSTON'' THEN ''EAST''\r\nWHEN ''CHICAGO'' THEN ''CENTER''\r\nWHEN ''DALLAS'' THEN ''CENTER''\r\nELSE ''ETC''\r\nEND AS AREA\r\nFROM DEPT;\r\n\r\n\r\n* Searched Cse EXpression\r\n - CASE 절 다음에 바로 조건식을 표현하지 않고,\r\n   WHEN 절에 디테일한 조건식을 표현\r\n\r\nex)\r\nSELECT ename,\r\nCASE \r\nWHEN SAL >= 3000 THEN ''HIGH''\r\nWHEN SAL >= 1000 THEN ''MID''\r\nELSE ''LOW''\r\nEND AS salary_grade\r\nFROM emp;', '', '', 4, 0),
(1244, '', '서대영', '', '2013-07-30 22:52:01', 'Oracle', '계층적 질의', 'SELECT \r\n	LEVEL, \r\n	MENUID, \r\n	MENUNAME, \r\n	PGMID, \r\n	MENUTYPE, \r\n	MENULEVEL, \r\n	MENUPID, \r\n	ORDERBY, \r\n	MENUURL, \r\n	HELPURL, \r\n	DESCRIPTION, \r\n	REGID, \r\n	FSTREGDATE, \r\n	FNLREGDATE \r\nFROM \r\n	( \r\n	SELECT \r\n		/*+ RULE */ \r\n		MENUID, \r\n		MENUNAME, \r\n		PGMID, \r\n		MENUTYPE, \r\n		MENULEVEL, \r\n		NVL(MENUPID,''-1'') AS MENUPID, \r\n		ORDERBY, \r\n		MENUURL, \r\n		HELPURL, \r\n		DESCRIPTION, \r\n		REGID, \r\n		FSTREGDATE, \r\n		FNLREGDATE 		\r\nFROM \r\n	 T_MENU_MT \r\n	) \r\n	START WITH MENUID = ''GSPN_ROOT'' \r\n	CONNECT BY PRIOR MENUID = MENUPID\r\norder by menuname	', '', '', 0, 0),
(1245, '', '서대영', '', '2013-08-06 22:25:10', 'Spring', 'Bean Validation 비교', 'JSR-303 와 Spring Validator 같이 사용하기\r\n\r\nimport java.util.Set;\r\n\r\nimport javax.validation.*;\r\n\r\nimport org.springframework.beans.factory.InitializingBean;\r\nimport org.springframework.stereotype.Component;\r\nimport org.springframework.validation.Errors;\r\n\r\n@Component\r\npublic class BeanValidator implements org.springframework.validation.Validator, InitializingBean {\r\n    private Validator validator;\r\n    public void afterPropertiesSet() throws Exception {\r\n        ValidatorFactory validatorFactory = Validation.buildDefaultValidatorFactory();\r\n        validator = validatorFactory.usingContext().getValidator();\r\n    }\r\n \r\n    public boolean supports(Class<?> clazz) {\r\n        return true;\r\n    }\r\n\r\n    public void validate(Object target, Errors errors) {\r\n        Set<ConstraintViolation<Object>> constraintViolations = validator.validate(target);\r\n        for (ConstraintViolation<Object> constraintViolation : constraintViolations) {\r\n            String propertyPath = constraintViolation.getPropertyPath().toString();\r\n            String message = constraintViolation.getMessage();\r\n            errors.rejectValue(propertyPath, "", message);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.trifork.com/2009/08/04/bean-validation-integrating-jsr-303-with-spring/', 'http://blog.trifork.com/2009/08/04/bean-validation-integrating-jsr-303-with-spring/', '', 9, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(1247, '', '서대영', '', '2013-09-19 11:48:47', 'Spring', 'web.xml url-pattern / 와 /* 의 차이점', '\r\njava/spring 2012/12/06 19:25\r\n[*.do에서 /* 로 바꾸게 된 이유]\r\n스프링 3.1 샘플 프로젝트의 web.xml(DD) 구성 시 url-pattern을 *.do와 같이 설정하였다.\r\n이유는 단순하다.\r\n프로젝트를 진행할 때 항상 *.do를 사용했기 때문이다.\r\n\r\n하지만 REST 방식의 웹 어플리케이션을 구성하기 위해서는 다음과 같은 URL 형식을 제공해야 하는데 현재는 *.do와 같이 되어 있기 때문에 pattern을 /* 와 같이 변경해야만 했다.\r\nhttp://localhost:8080/user/list\r\n\r\n\r\n[현상]\r\n이제 내가 만들어 놓은 프로젝트는 REST 방식을 지원하는 spring web application이 되었다.\r\n허나 controller mapping url을 호출하면 404 에러가 발생하면서 아래와 같은 로그가 찍힌다.\r\nNo mapping found for HTTP request with URI [/WEB-INF/view/common/layout/default/layout.jsp] in \r\nDispatcherServlet with name ''dispatcher''\r\n\r\n\r\n[원인]\r\ncontroller mapping url을 못 찾아서 발생하는 404가 아닌 /WEB-INF/view/common/layout/default/layout.jsp 의 매핑 URL을 찾을 수 없어서 발생하는 오류였다.\r\n\r\n이 오류가 발생하는 원인을 알기 위해서는 서블릿 컨테이너와 웹 어플리케이션간의 연동 방법을 알아야 한다.\r\n일단 url-pattern에 등록할 수 있는 URL은 다음과 같다.\r\n"/"로 시작하고 "/*"로 끝나는 패턴은 path로 인식\r\n"*."으로 시작하는 경우 확장자 매칭\r\n"/"만 정의한 경우 디폴트 서블릿 의미\r\n그 외의 경우 동치 매칭\r\n\r\n위의 패턴 매칭에 존재하지는 않지만 /*는 요청 받는 모든 URL을 처리한다는 의미다. (아래와 같은 유형의 패턴 모두)\r\n/user/list\r\n/user/list.do\r\n/user/userList.jsp\r\n/img/test.png\r\n\r\n결국 모든 요청을 DispatcherServlet에서 처리하겠다고 지정했으니 jsp에 대한 호출도 DispatcherServlet이 처리를 하려고 했던 것이다.\r\n이로 인하여 jsp에 해당하는 mapping url을 찾을 수 없어 HTTP 404 오류가 발생하게 된 것이다.\r\n\r\n\r\n[해결 방안]\r\n그럼 해결 방법은 뭘까?\r\n결론적으로 말하자면 url-pattern을 "/" 로 지정하면 된다.\r\n해결 방법은 간단하지만 왜 이렇게 설정하면 잘 되는지 궁금해 졌다.\r\n\r\n위에서 언급했지만 "/"로 정의한 경우 디폴트 서블릿을 의미한다고 하였다.\r\n\r\n이게 뭔 말인가?\r\n이 말의 의미를 찾아 보니 디폴트 서블릿은 서블릿 매핑 URL에 걸리지 않는 요청들을 처리한다고 한다.\r\n\r\n또 의문이 생긴다.\r\n난 서블릿 매핑을 "/" 와 같이 한 개만 만들었는데...결국 거르는 작업 없이 내가 만들어 놓은 서블릿 매핑에 모두 걸리는 것 아닌가?\r\n그리고 디폴트 서블릿은 뭔가?\r\n\r\n위의 의문들을 해결하기 위해서 이제 tomcat 서블릿 컨테이너에 대해서 언급할 때가 왔다.\r\n${TOMCAT_HOME}/conf/web.xml 파일을 열어 보면 다음과 같이 세 개의 서블릿 매핑이 존재한다.\r\n<servlet-mapping>\r\n	<servlet-name>default</servlet-name>\r\n	<url-pattern>/</url-pattern>\r\n</servlet-mapping>\r\n\r\n\r\n<servlet>\r\n	<servlet-name>default</servlet-name>\r\n	<servlet-class>org.apache.catalina.servlets.DefaultServlet</servlet-class>\r\n	<init-param>\r\n		<param-name>debug</param-name>\r\n		<param-value>0</param-value>\r\n	</init-param>\r\n	<init-param>\r\n		<param-name>listings</param-name>\r\n		<param-value>false</param-value>\r\n	</init-param>\r\n	<load-on-startup>1</load-on-startup>\r\n</servlet>\r\n\r\n\r\n\r\n<servlet-mapping>\r\n	<servlet-name>jsp</servlet-name>\r\n	<url-pattern>*.jsp</url-pattern>\r\n</servlet-mapping>\r\n\r\n<servlet-mapping>\r\n	<servlet-name>jsp</servlet-name>\r\n	<url-pattern>*.jspx</url-pattern>\r\n</servlet-mapping>\r\n\r\n<servlet>\r\n	<servlet-name>jsp</servlet-name>\r\n	<servlet-class>org.apache.jasper.servlet.JspServlet</servlet-class>\r\n	<init-param>\r\n		<param-name>fork</param-name>\r\n		<param-value>false</param-value>\r\n	</init-param>\r\n	<init-param>\r\n		<param-name>xpoweredBy</param-name>\r\n		<param-value>false</param-value>\r\n	</init-param>\r\n	<load-on-startup>3</load-on-startup>\r\n</servlet>\r\n\r\n*.jsp, *.jspx와 같은 url 패턴은 JspServlet이 처리하고, DefaultServlet은 spring Controller mapping과 jsp 패턴에 걸리지 않는 요청 들을 처리한다는 결론이 나온다.\r\n즉, DefaultServlet은 png, jpg, js, html등 정적인 content를 처리한다는 말이다.\r\n\r\n정리하면 \r\nhttp://localhost:8080/user/userList.jsp <- JspServlet 요청 처리\r\nhttp://localhost:8080/img/button.jpg <- DefaultServlet 요청 처리\r\nhttp://localhost:8080/user/list <- DispatcherServlet 요청 처리\r\n\r\n\r\n[스프링에서 정적 content 호출 시 404 에러 발생]\r\n문제가 생겼다.\r\nhttp://localhost:8080/user/list 는 정상적으로 동작하는데 \r\nhttp://localhost:8080/img/button.jpg 로 호출 할 때 404 에러가 발생한다.\r\n\r\nDispatcherServlet with name ''dispatcher'' processing GET request for [/img/button.jpg]\r\n\r\n로그를 보면 *.jpg 호출 시 DefaultServlet이 처리하는 것이 아닌 DispatcherServlet이 처리를 하게 되는 것을 볼 수 있다.\r\n당연히 DispatcherServlet이 처리를 하게 되면 controller mapping URL이 존재하지 않으니 404 오류가 발생한다.\r\n\r\nDispatcherServlet은 url-pattern을 "/" 와 같이 설정하게 되면서 tomcat의 server.xml에 정의되어 있는 url-pattern "/"을 무시하기 때문이다.\r\n결국 DispatcherServlet url-pattern을 재정의하게 되어서 DefaultServlet은 더이상 동작할 수 없게 된 것이다.\r\n\r\n스프링에서는 이를 해결하기 위해서 <mvc:default-servlet-handler /> 설정을 지원한다.\r\n\r\n<mvc:default-servlet-handler /> 설정은 내부적으로 DefaultServletHttpRequestHandler가 담당하게 되고, 이 핸들러(컨트롤러)는 /**로 매핑되어 있다고 한다. (아래 토비님 글 참고)\r\n[토스3] 스프링 3.0.4 <mvc:default-servlet-handler/>를 이용해서 UrlRewriteFilter없이 깔끔한 URL을 만들기\r\n\r\nDefaultServletHttpRequestHandler가 하는 역할은 DispatcherServlet이 처리 못하는 매핑 url을 DefaultServlet으로 넘기는 것이다.\r\n\r\n드디어 정리 끝...\r\n이라고 생각하면 오산.\r\n<mvc:default-servlet-handler /> 설정을 추가하니 http://localhost:8080/user/list 호출 시 404에러가 발생한다.\r\n로그를 확인해 보니 이상한 부분이 있었다. \r\n아래와 같이 SimpleUrlHandlerMapping에서 처리를 하고 있는 것이다.\r\nSimpleUrlHandlerMapping - Matching patterns for request [/user/list] are [/**]\r\n\r\n디폴트 핸들러 매핑인 DefaultAnnotationHandlerMapping이 처리해야 하는데 왜 SimpleUrlHandlerMapping이 처리를 하게 된 것일까?\r\n이유는 두 개 이상의 핸들러 매핑이 등록되었을 경우에는 디폴트 전략이 무시되기 때문이다.\r\n\r\n결국 <mvc:annotation-driven /> 설정을 통해 DefaultAnnotationHandlerMapping이 자동 등록되게 설정하였고, 이로써 모든 요청이 정상적으로 동작하였다.\r\n\r\n단지 url-pattern만 정리하려고 했는데 꼬리에 꼬리를 물어서 스프링까지 설정까지 오게 되었다.\r\n\r\n지금까지 url-pattern에 대해서 대수롭지 않게 생각했는데 까면 깔수록 공부해야 할 것들이 산더미이다.\r\n그래도 오늘 하루 내가 뭔가를 배울 수 있었다는 것에 보람을 느낀다.\r\n\r\n저작자 표시\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://lng1982.tistory.com/97', 'http://lng1982.tistory.com/97', '', 7, 0),
(1248, '', '서대영', '', '2013-09-19 12:33:42', 'Spring', 'Spring MVC 의 Default', '# 핸들러 어댑터 : SimpleControllerHanderAdapter\r\n * Controller 인터페이스를 구현하면 됨\r\n * 인자 : HttpServletRequest, HttpServletReponse\r\n * 리턴 : ModelAndView\r\n\r\n# 핸들러 매핑 : BeanNameUrlHanderMapping\r\n * bean name 에 URL 을 명시해서 등록\r\n * 예 : <beans:bean name="/hello" class="springbook.temp.HelloController" />\r\n\r\n# 뷰 리졸버 : InternalResourceViewResolver\r\n * ModelAndView 에 새팅한 경로에 있는 파일을 뷰로 사용', '', '', 2, 0),
(1249, '', '서대영', '', '2013-09-19 12:45:16', 'Spring', 'Spring MVC 의 Context ★', '루트 애플리케이션 컨텍스트와 서블릿 애플리케이션 컨텍스트에 적당히 빈들을 분배시켜놔야 단위 테스트 및 디버깅이 유리해진다.\r\n\r\n# 루트 애플리케이션 컨텍스트\r\n * ContextLoaderListener 에 의해서 초기화\r\n * 여러 서블릿 애플리케이션들의 유일한 부모 컨텍스트\r\n * 서블릿 애플리케이션들이 공통으로 사용하는 Bean 을 등록\r\n * 주로 Service, Repository 등 POJO 빈들을 등록한다.\r\n * 주의 : 서블릿 애플리케이션 컨텍스트레 등록될 만한 MVC 관련 Controller 등을 이곳에 등록하면 안된다.\r\n * 기본 설정 파일 경로는 /WEB-INF/applicationContext.xml\r\n * 설정 파일 경로를 바꾸려면 web.xml 에 context-param 으로 명시\r\n	<context-param>\r\n		<param-name>contextConfigLocation</param-name>\r\n		<param-value>/WEB-INF/spring/root-context.xml</param-value>\r\n	</context-param>\r\n * web.xml 에 listener 를 등록해놔야 서블릿 컨테이너가 올라갈 때 물고 올라감\r\n	<listener>\r\n		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\r\n	</listener>\r\n\r\n# 서블릿 애플리케이션 컨텍스트\r\n * DispatcherServlet 에 의해서 초기화\r\n * 루트 애플리케이션 컨텍스트 아래에서 다수개 존재 가능한 웹 컨텍스트\r\n * 루트 애플리케이션 컨텍스트에 등록된 Bean 을 얻어올 수 있음\r\n * 주로 Controller, ViewResolver 등 MVC 관련 Bean 을 등록\r\n * 기본 설정 파일 경로는 /WEB-INF/서블릿이름-servlet.xml\r\n * 설정 파일 경로를 바꾸려면 web.xml 의 servlet 아래 context-param 으로 명시\r\n	<servlet>\r\n		<servlet-name>appServlet</servlet-name>\r\n		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\r\n		<init-param>\r\n			<param-name>contextConfigLocation</param-name>\r\n			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>\r\n		</init-param>\r\n		<load-on-startup>1</load-on-startup>\r\n	</servlet>\r\n', '', '', 9, 0),
(1250, '', '서대영', '', '2013-10-02 15:06:58', 'Spring', 'Spring MVC Integration Test - MockMVC', '* Srping 3.2 부터 추가된 기능인데 Servlet Container 없이도 통합 테스트를 수행할 수 있어서 매우 편리함\r\n\r\n* andDo(print()) 를 사용하면 HTTP Request 와 Response 내용도 출력해줌\r\n\r\npackage seo.dale.study.user.controller;\r\n\r\n\r\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\r\nimport static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\r\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\r\n\r\nimport org.junit.*;\r\nimport org.junit.runner.RunWith;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.MediaType;\r\nimport org.springframework.test.context.ContextConfiguration;\r\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\r\nimport org.springframework.test.context.web.WebAppConfiguration;\r\nimport org.springframework.test.web.servlet.MockMvc;\r\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\r\nimport org.springframework.web.context.WebApplicationContext;\r\n\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@WebAppConfiguration\r\n@ContextConfiguration("classpath*:test-servlet-context.xml")\r\npublic class UserControllerTest {\r\n\r\n	@Autowired\r\n	private WebApplicationContext wac;\r\n\r\n	private MockMvc mockMvc;\r\n\r\n	@Before\r\n	public void setup() {\r\n			this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build();\r\n	}\r\n\r\n	@Test\r\n	public void getAccount() throws Exception {\r\n		this.mockMvc.perform(get("/user/detail/10003").accept(MediaType.parseMediaType("application/json;charset=UTF-8")))\r\n				.andDo(print())\r\n				.andExpect(status().isOk())\r\n				.andExpect(content().contentType("application/json;charset=UTF-8"))\r\n				.andExpect(jsonPath("$.name").value("Name_3"));\r\n	}\r\n}\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/testing.html#spring-mvc-test-framework', 'http://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/testing.html#spring-mvc-test-framework', '', 19, 0),
(1251, '', '서대영', '', '2013-10-03 12:02:58', 'Spring', 'Spring Integration', '# 개요\r\n  - ESB(Enterprise Service Bus) 구현체\r\n\r\n# 개념\r\n  - end Point : 비지니스 로직 처리 지점 (input channel 과 output channel 을 가짐)\r\n  - channel : End Point 간 연결 구간\r\n  - chain : Channel 없이 연결된 End Point 집합\r\n  - router : 여러 channel 중 한 channel 로 분기시켜주는 end point\r\n  - service-activator : 매서드 호출기\r\n  - inbound-gateway : 요청을 받아서 Message 로 만들어줌\r\n\r\n# 장점\r\n  - Message 객체만을 사용하여 통신하므로 시스템간 종속도가 떨어짐\r\n  - 코딩으로 구현하기 어려운 다양한 인터페이스를 설정으로 제공\r\n\r\n# Message<?>\r\n  - 시스템간 통신에 사용되는 DTO\r\n  - Header 와 Payload 로 이뤄짐\r\n    . Header : 매타성 정보, Map<String, Object>\r\n    . Paryload : 실 데이터, ?', '', '', 5, 0),
(1252, '', '서대영', '', '2013-10-06 22:14:46', 'Spring', 'Spring MediaType', '# JSON\r\n\r\n\r\nnew MediaType("application", "json", Charset.forName("UTF-8"))\r\n\r\nMediaType.parseMediaType("application/json;charset=UTF-8")\r\n\r\nMediaType.APPLICATION_JSON\r\n\r\n\r\n# Protobuf\r\n\r\nnew MediaType("application", "x-protobuf", Charset.forName("UTF-8"));\r\n\r\n# WWW Form Urlencoded\r\n\r\nnew MediaType("application", "x-www-form-urlencoded", StandardCharsets.UTF_8);\r\n', NULL, '', 4, 0),
(1253, '', '서대영', '', '2013-10-13 14:35:13', 'MySQL', 'UTF-8 테이블 만들기', 'DEFAULT CHARSET=utf8 을 붙여주면 된다.\r\n\r\n\r\nCREATE TABLE `bookmark` (\r\n  `no` int(11) NOT NULL auto_increment,\r\n  `id` varchar(31) NOT NULL default '''',\r\n  `name` varchar(31) NOT NULL default '''',\r\n  `pw` varchar(31) NOT NULL default '''',\r\n  `date` datetime NOT NULL default ''0000-00-00 00:00:00'',\r\n  `kind` varchar(31) NOT NULL default '''',\r\n  `title` varchar(255) NOT NULL default '''',\r\n  `memo` text NOT NULL,\r\n  `url` varchar(255) NOT NULL default '''',\r\n  `file` varchar(255) NOT NULL default '''',\r\n  `cmt` text NOT NULL,\r\n  `hit` int(11) NOT NULL default ''0'',\r\n  `tag` varchar(31) NOT NULL default '''',\r\n  `secret` tinyint(1) NOT NULL default ''0'',\r\n  `id_pw` varchar(31) NOT NULL default '''',\r\n  `password` varchar(31) NOT NULL default '''',\r\n  PRIMARY KEY  (`no`),\r\n  KEY `kind` (`kind`)\r\n) AUTO_INCREMENT=712 DEFAULT CHARSET=utf8;', '', '', 4, 0),
(1254, '', '서대영', '', '2013-10-17 17:25:49', 'Spring', 'Spring Custom Tags', '================\r\n<spring:url>\r\n================\r\n	<spring:url var="searchUrl" value="/admin/component/componentSearch"/>\r\n	<spring:url var="modifyUrl" value="/admin/component/componentModify/{id}">\r\n		<spring:param name="id" value="${componentVO.componentID}"></spring:param>\r\n	</spring:url>\r\n	<spring:url var="removeUrl" value="/admin/component/componentRemove/{id}">\r\n		<spring:param name="id" value="${componentVO.componentID}"></spring:param>\r\n	</spring:url>\r\n	<div>\r\n		[<a href="${searchUrl}"><span>TO SEARCH PAGE</span></a>|\r\n		<a href="${modifyUrl}"><span>MODIFY</span></a>|\r\n		<a href="${removeUrl}"><span>REMOVE</span></a>] \r\n	</div>', '', '', 3, 0),
(1255, '', '서대영', '', '2013-10-18 17:24:02', 'MyBatis', '세팅 방법', '* /src/main/resources/mybatis/mybatis-config.xml\r\n\r\n<?xml version="1.0" encoding="UTF-8"?>\r\n<!DOCTYPE configuration\r\n    PUBLIC "-//mybatis.org//DTD Config 3.0//EN" \r\n    "HTTP://mybatis.org/dtd/mybatis-3-config.dtd">\r\n<configuration> \r\n    <!-- Definition of myBatis Configuration -->\r\n    <settings>\r\n        <!-- 설정에서 각 mapper 에 설정된 캐시를 전역적으로 사용할지 말지에 대한 여부 -->\r\n        <setting name="cacheEnabled" value="true" />\r\n        <!-- 생성키에 대한 JDBC 지원을 허용 -->\r\n        <setting name="useGeneratedKeys" value="true" />\r\n        <!-- REUSE 실행자는 PreparedStatement 를 재사용한다. -->\r\n        <setting name="defaultExecutorType" value="REUSE" />\r\n        <setting name="safeResultHandlerEnabled" value="false" />\r\n        <!-- DB 칼럼의 언더바를 카멜케이스로 전화해줌 -->\r\n        <setting name="mapUnderscoreToCamelCase" value="true"/>\r\n    </settings> \r\n    <!-- Definition of MAPPER Alias -->\r\n    <typeAliases>\r\n    	<typeAlias alias="ChannelVO" type="com.skplanet.storeplatform.admin.channel.vo.ChannelVO"/>\r\n    	<typeAlias alias="ServiceVO" type="com.skplanet.storeplatform.admin.service.vo.ServiceVO"/>\r\n    </typeAliases>\r\n</configuration>\r\n', '', '', 5, 0),
(1256, '', '서대영', '', '2013-10-19 18:14:52', 'Spring', 'RedirectAttributes', '리다이렉트 시 파라미터를 편리하게 넘길 수 있다.\r\n\r\n첫번째 방법은 addAttribute 메소드로 값을 저장한다. 이 경우에 URL에 파라메터가 붙어 전달되게 된다. 그렇기 때문에 전달된 페이지에서 파라메터가 노출되게 된다.\r\n\r\n두번째 방법은 addFlashAttribute 메소드로 Redirect 동작이 수행되기 전에 Session에 값이 저장되고 전달 후 소멸된다.\r\nSession을 선언해서 집어넣고 사용후 지워주는 수고를 덜어주는 아주 유용한 기능이라고 볼 수 있다.\r\n다음은 사용 예이다.\r\n\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://redtrain.tistory.com/826', 'http://redtrain.tistory.com/826', '', 7, 0),
(1257, '', '서대영', '', '2013-10-21 19:51:51', 'MyBatis', 'MyBatis 사용자 가이드', 'http://mybatis.github.io/mybatis-3/ko/index.html\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://mybatis.github.io/mybatis-3/ko/index.html', 'http://mybatis.github.io/mybatis-3/ko/index.html', '', 8, 0),
(1258, '', '서대영', '', '2013-11-08 13:41:06', 'Security', '해킹툴 - Web Application Vulnerability Scanner', '# Full Set\r\n * Kali Linux\r\n * Open VAS\r\n * HDSI\r\n\r\n# Web Proxy\r\n * ZAP (OWASP Zed Attack Proxy)\r\n * Burp Suite\r\n * Acunetix Web Vulnerability Scanner\r\n\r\n# SQL Injection\r\n * Pangolin\r\n\r\n# Cross Site Scripting\r\n * XSSer', '', '', 4, 0),
(1259, '', '서대영', '', '2013-11-08 15:48:54', 'Security', '보안 라이브러리', 'ESAPI\r\n\r\n서블릿필터 만들 때 참고할 것\r\n\r\nhttps://www.owasp.org/index.php/Category:OWASP_Enterprise_Security_API', '', '', 3, 0),
(1260, '', '서대영', '', '2013-11-15 10:39:37', 'Quality', '정적 소스 분석툴', 'Code Quality Tools Review for 2013: \r\nSonar, Findbugs, PMD and Checkstyle\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://zeroturnaround.com/rebellabs/code-quality-tools-review-for-2013-sonar-findbugs-pmd-and-checkstyle/', NULL, '', 3, 0),
(1261, '', '서대영', '', '2013-11-19 11:18:55', 'Spring', '@NotNull 은 안 먹고 @NotEmpty 만 먹는 이유', 'http://stackoverflow.com/questions/7545231/notnull-notblank-and-notempty-bean-validation-does-not-work-in-jsf', '', '', 1, 0),
(1262, '', '서대영', '', '2013-11-19 11:37:10', 'Spring', '@SessionAttributes', '@Controller\r\n@RequestMapping("/경로")\r\n@SessionAttributes("세션에 저장할 모델명")\r\n\r\nGet 핸들러 메서드에서 Form 화면으로 Model 을 던지기 전에 Session 에 넣고,\r\nPost 핸드러 메서드에서 Form 화면으로 Model 을 받아오기 전에 Session 에 넣어두었던 Model에 Field 값들을 추가 맵핑함으로서 기존의 Model이 Filed 값이 Null이나 Empty로 세팅 됨을 방지한다.\r\n\r\nPost 처리가 성공적으로 완료되면 sessionStatus.setComplete(); 를 호출하여 세션에서 모델을 초기화한다.\r\n\r\n\r\n\r\n======================================================================\r\n	@RequestMapping(value= "/essayModify", method = RequestMethod.GET)\r\n	public Essay modify(@RequestParam Integer no) {\r\n		return service.detail(no);\r\n	}\r\n	\r\n	@RequestMapping(value= "/essayModify", method = RequestMethod.POST)\r\n	public String modify(@ModelAttribute @Valid Essay item, Errors errors, SessionStatus status, RedirectAttributes redirectAttributes) {\r\n		if (errors.hasErrors()) {\r\n			return "/essay/essayModify";\r\n		}\r\n		\r\n		if (service.modify(item) != 1) {\r\n			throw new RuntimeException("Nothing updated.");\r\n		}\r\n		\r\n		status.setComplete();\r\n		redirectAttributes.addFlashAttribute("msg", "Modified sucessfully.");\r\n		\r\n		return "redirect:/essay/essayDetail?no=" + item.getNo(); \r\n	}\r\n', '', '', 8, 0),
(1263, '', '서대영', '', '2013-11-21 14:56:11', 'Log4j', 'JCL 에서 SLF4J 로 갈아타기', 'http://whiteship.me/?p=12162', '', '', 1, 0),
(1264, '', '서대영', '', '2013-11-24 20:11:38', 'Spring', 'Bean Definition Profiles', 'http://sinihong.tistory.com/57\r\n# XML Configuration\r\nhttp://spring.io/blog/2011/02/11/spring-framework-3-1-m1-released/\r\n# Java-based Configuration\r\nhttps://spring.io/blog/2011/02/14/spring-3-1-m1-introducing-profile/\r\n\r\n\r\n* Default Profile\r\nhttp://stackoverflow.com/questions/14442075/how-to-specify-the-default-profile-that-beans-will-be-registered-under-in-spring\r\n\r\n\r\n# JVM\r\njava -Dspring.profiles.active="profile1,profile2"\r\n\r\n\r\n\r\n# 응용 단에서 쓰기\r\n	@Value("#{systemProperties[''spring.profiles.active'']}")\r\n	private String envServerLevel;', NULL, '', 25, 0),
(1265, '', '서대영', '', '2013-11-24 21:06:33', 'Spring', 'properties VS system environment', 'xml에 설정값 세팅할 때,\r\nProperties 를 불러올 때는 # 를 사용하고 System Environment 를 불러올 때는 $와 <context:property> 사용한다.\r\n\r\n\r\n# Properties\r\n\r\n<util:properties id="database" location="classpath:properties/persistence.properties"/>\r\n\r\n<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">\r\n		<property name="driverClassName" value="#{database.driverClassName}"/>\r\n		<property name="url" value="#{database.url}"/>\r\n		<property name="username" value="#{database.username}"/>\r\n		<property name="password" value="#{database.password}"/>\r\n	</bean\r\n\r\n# System Environment\r\n\r\n<context:property-placeholder location="classpath:properties/persistence.properties" />\r\n\r\n\r\n<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">\r\n		<property name="driverClassName" value="${database.driverClassName}"/>\r\n		<property name="url" value="${database.url}"/>\r\n		<property name="username" value="${database.username}"/>\r\n		<property name="password" value="${database.password}"/>\r\n	</bean>', '', '', 12, 0),
(1266, '', '서대영', '', '2013-11-27 21:18:24', 'Java', '디컴파일러 jad', '# 예시\r\njad -r -d D:jad -s java D:ROOTWEB-INFclassesdale***.class\r\n\r\n# 다운로드\r\nhttp://varaneckas.com/jad/\r\n\r\n# 사용법\r\nhttp://mine7.tistory.com/263\r\nhttp://heartcrack.tistory.com/57\r\nhttp://education-for-jinny.blogspot.kr/2012/03/eclipse-jad-decompile.html', '', '', 5, 0),
(1267, '', '서대영', '', '2013-11-30 21:29:55', 'Java', 'Exception 에 대한 이해', 'http://tutorials.jenkov.com/java-exception-handling/index.html\r\n\r\nhttp://www.journaldev.com/1696/', '', '', 3, 0),
(1268, '', '서대영', '', '2013-12-01 00:44:00', 'Pattern', 'Code Reuse: Action and Context Reuse', 'http://tutorials.jenkov.com/ood/code-reuse-action-and-context-reuse.html', '', '', 1, 0),
(1269, '', '서대영', '', '2013-12-01 12:55:57', 'Spring', '컴포넌트 스캔 대상되는 어노테이션 매뉴얼 설정', '서블릿컨텍스트에는 \r\n\r\n<context:component-scan base-package="com.kimddochi" use-default-filters="false">\r\n\r\n  <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>\r\n\r\n</context:component-scan>\r\n\r\n \r\n기본 패키지에서 @Conponent, @Service, @Repository와 같은 스트레오애노테이션을 제외하고(use-default-filters="false") @Controller로 표현된 클래스만 빈으로 등록하겠다.는 의미\r\n\r\n\r\n루트컨텍스트에서는 \r\n<context:component-scan base-package="com.kimddochi">\r\n\r\n  <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>\r\n\r\n</context:component-scan>\r\n\r\n \r\n서블릿컨텍스트와 반대의 의미.\r\n기본 패키지내에 모든 스트레오애노테이션으로 표현된 클래스를 빈으로 등록하되 @Controller로 표현된 클래스는 제외(context:exclude-filter)하겠다.는 의미\r\n\r\n\r\nhttp://ddoong2.com/946\r\nhttp://kimddochi.tistory.com/92', NULL, '', 8, 0),
(1270, '', '서대영', '', '2013-12-03 11:32:59', 'Spring', '[MVC] XmlView, JsonVIew', '데이터만 제공하는 Rest Service 개발 시 필요하다.\r\n\r\n==================================================================\r\n View Bean 등록 (BeanNameViewResolver는 디폴트로 등록되어 있음)\r\n==================================================================\r\n\r\n	<bean id="jsonView" class="org.springframework.web.servlet.view.json.MappingJacksonJsonView"/>\r\n		\r\n	<bean id="xmlView" class="org.springframework.web.servlet.view.xml.MarshallingView">\r\n		<constructor-arg ref="jaxb2Marshaller"/>	\r\n	</bean>\r\n\r\n	<bean id="jaxb2Marshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">\r\n		<property name="classesToBeBound">\r\n			<list>\r\n				<value>com.multi.contactweb.biz.vo.Contact</value>\r\n				<value>com.multi.contactweb.biz.vo.ContactList</value>\r\n				<value>com.multi.contactweb.biz.vo.Result</value>\r\n			</list>		\r\n		</property>\r\n	</bean>\r\n\r\n==================================================================\r\n Controller 에서 사용\r\n==================================================================\r\n@Controller\r\npublic class ContactSvcController {\r\n	\r\n	@Resource(name="xmlView")\r\n	private View xmlView;\r\n	\r\n	@Autowired\r\n	@Qualifier("jsonView")\r\n	private View jsonView;\r\n	\r\n	@Autowired\r\n	private ContactService service;\r\n	\r\n	@RequestMapping(value="contacts", method=RequestMethod.GET)\r\n	public ModelAndView getContactList(@RequestParam(required=false) String output) throws Exception {\r\n		List<Contact> list = service.getSelectAll();\r\n		ContactList cList = new ContactList(0, list.size(), list);\r\n		ModelAndView mav = new ModelAndView();\r\n		mav.addObject(cList);\r\n		\r\n		if (StringUtils.equalsIgnoreCase(output, "xml")) {\r\n			mav.setView(xmlView);\r\n		} else {\r\n			mav.setView(jsonView);\r\n		}\r\n		\r\n		return mav;\r\n	}\r\n}\r\n', '', '', 4, 0),
(1271, '', '서대영', '', '2013-12-03 11:59:08', 'Spring', '[MVC] Xml 및 Json 컨버팅을 위한 어노테이션', 'JAXB 와 Jakson 라이브러리의 어노테이션을 사용한다.\r\n\r\n=====================================================================\r\nimport javax.xml.bind.annotation.XmlAccessType;\r\nimport javax.xml.bind.annotation.XmlAccessorType;\r\nimport javax.xml.bind.annotation.XmlElement;\r\nimport javax.xml.bind.annotation.XmlRootElement;\r\n\r\nimport org.codehaus.jackson.annotate.JsonIgnoreProperties;\r\nimport org.codehaus.jackson.annotate.JsonProperty;\r\n\r\n@XmlRootElement(name="contactlist")\r\n@XmlAccessorType(XmlAccessType.FIELD)\r\n// @JsonIgnoreProperties({"pageno", "totalcount"})\r\npublic class ContactList {\r\n\r\n	private int pageno;\r\n	private int totalcount;\r\n	@XmlElement(name="contact")\r\n	private List<Contact> contacts;\r\n	\r\n	public ContactList() {\r\n	}\r\n\r\n	public ContactList(int pageno, int totalcount, List<Contact> contacts) {\r\n		this.pageno = pageno;\r\n		this.totalcount = totalcount;\r\n		this.contacts = contacts;\r\n	}\r\n\r\n	public int getPageno() {\r\n		return pageno;\r\n	}\r\n	public void setPageno(int pageno) {\r\n		this.pageno = pageno;\r\n	}\r\n	public int getTotalcount() {\r\n		return totalcount;\r\n	}\r\n	public void setTotalcount(int totalcount) {\r\n		this.totalcount = totalcount;\r\n	}\r\n	\r\n	@JsonProperty("items")\r\n	public List<Contact> getContacts() {\r\n		return contacts;\r\n	}\r\n	public void setContacts(List<Contact> contacts) {\r\n		this.contacts = contacts;\r\n	}\r\n\r\n}\r\n', '', '', 7, 0),
(1272, '', '서대영', '', '2013-12-03 14:46:54', 'Spring', '[MVC] MappingJacksonJsonView 관련', '※ How to return a single JSON list\r\n=====================================================================\r\n <bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView" >\r\n     <property name="objectMapper" ref="objectMapper" />\r\n     <property name="modelKey" value="result" />\r\n     <property name="extractValueFromSingleKeyModel" value="true" />\r\n    </bean>\r\n=====================================================================\r\n\r\n  * 3.1 이후\r\nhttp://sbcoba.tistory.com/12\r\n  * 3.1 이전\r\nhttp://lks21c.blogspot.kr/2011/12/mappingjacksonjsonview-json-how-to.html\r\n\r\n※ 여러가지 팁\r\nhttp://blog.naver.com/PostView.nhn?blogId=soaringmind&logNo=10137964956&viewDate=¤tPage=1&listtype=0&from=postList', '', '', 4, 0),
(1273, '', '서대영', '', '2013-12-03 15:14:51', 'Spring', '[MVC] @RequestBody 와 @ResponseBody 컨버팅', '다음과 같은 2개의 스프링 내장 컨버터를 사용하면 쉽게 json 이나 xml 로 컨버팅이 가능핟.\r\n\r\nMappingJacksonHttpMessageConverter\r\nMarshallingHttpMessageConverter\r\n\r\n주의 : 확장자 인식은 안되고 Accept Header에만 반응함.\r\n\r\n======================================================================\r\n	<bean\r\n		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">\r\n		<property name="messageConverters">\r\n			<list>\r\n				<ref bean="marshallingConverter" />\r\n				<ref bean="jsonConverter" />\r\n			</list>\r\n		</property>\r\n	</bean>\r\n\r\n	<bean id="marshallingConverter"\r\n		class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter">\r\n		<constructor-arg ref="jaxb2Marshaller" />\r\n		<property name="supportedMediaTypes" value="application/xml" />\r\n	</bean>\r\n\r\n	<bean id="jsonConverter"\r\n		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">\r\n		<property name="supportedMediaTypes" value="application/json" />\r\n	</bean>', '', '', 8, 0),
(1274, '', '서대영', '', '2013-12-03 17:15:11', 'JQuery', '항상 최신의 라이브러리 가져오기', '<script type="text/javascript" src="http://code.jquery.com/jquery.js"></script>', '', '', 0, 0),
(1275, '', '서대영', '', '2013-12-04 13:38:53', 'Ajax', '간단한 Consumer Server Proxy', '<%@ page import="org.apache.commons.httpclient.*, \r\n				org.apache.commons.httpclient.methods.*,\r\n				org.apache.commons.httpclient.*,\r\n				org.apache.commons.httpclient.params.*,\r\n				org.apache.commons.lang.*,\r\n				java.net.*,\r\n				java.io.*,java.util.*" %><%\r\n \r\n String queryString = request.getQueryString();\r\n //String url = URLDecoder.decode(request.getParameter("url"), "utf-8");\r\n String url = request.getParameter("url"); \r\n HttpClient client = new HttpClient();\r\n client.getParams().setParameter(HttpMethodParams.HTTP_CONTENT_CHARSET, "UTF-8");\r\n //method.setQueryString(queryString);\r\n HttpMethod method = null;\r\n \r\n try {\r\n\r\n     // Split this according to the type of request\r\n     if (request.getMethod().equals("GET")) {\r\n         method = new GetMethod(url);\r\n     } else if (request.getMethod().equals("POST")) {\r\n         method = new PostMethod(url);\r\n         \r\n         //釉뚮씪?곗?濡?遺???꾨떖??XML ?먮뒗 JSON??洹몃?濡?httpClient???붿껌 ?뺣낫??Body濡??꾨떖\r\n         ((PostMethod)method).setRequestBody(request.getInputStream());  \r\n         \r\n     } else if (request.getMethod().equals("PUT")) {\r\n         method = new PutMethod(url);\r\n         \r\n         //釉뚮씪?곗?濡?遺???꾨떖??XML ?먮뒗 JSON??洹몃?濡?httpClient???붿껌 ?뺣낫??Body濡??꾨떖\r\n         ((PutMethod)method).setRequestBody(request.getInputStream());         \r\n     } else if (request.getMethod().equals("DELETE")) {\r\n         method = new DeleteMethod(url);\r\n\r\n     } else {\r\n         throw new NotImplementedException(\r\n         	"This proxy only supports GET, PUT, DELETE and POST methods.");            	\r\n     }\r\n          \r\n     method.setRequestHeader("ACCEPT", request.getHeader("ACCEPT"));\r\n     method.setRequestHeader("CONTENT-TYPE", request.getHeader("CONTENT-TYPE"));\r\n     \r\n     // Execute the method\r\n     client.executeMethod(method);\r\n	 \r\n     \r\n     // Set the content type, as it comes from the server\r\n     Header[] headers = method.getResponseHeaders();\r\n     for (Header header : headers) {\r\n         if ("Content-Type".equalsIgnoreCase(header.getName())) {\r\n             response.setContentType(header.getValue());\r\n         }\r\n     }\r\n\r\n	 String result = method.getResponseBodyAsString();\r\n	 System.out.println(result);\r\n	 response.setStatus(HttpStatus.SC_OK);\r\n	 out.println(result); \r\n	 out.flush();\r\n	 //out.close();\r\n } catch (HttpException e) {\r\n\r\n     //log.error("Oops, something went wrong in the HTTP proxy", null, e);\r\n     //writer.write(e.toString());\r\n     e.printStackTrace();\r\n     throw e;\r\n\r\n } catch (IOException e) {\r\n\r\n     e.printStackTrace();\r\n     //writer.write(e.toString());\r\n     throw e;\r\n } finally {\r\n	 \r\n	 if (method != null) \r\n		 method.releaseConnection();\r\n }\r\n %>', '', '', 3, 0),
(1276, '', '서대영', '', '2013-12-04 17:17:50', 'Ajax', 'Cross Domain 해결 방법', '1->3 순으로 권장된다.\r\n\r\n1) CORS (Cross Orgin Resource Sharing)\r\n  : Provider 에서 Response 의 Access-Control-Allow-Oring 헤더에 * 나 자신의 도메인을 넣어서 응답한다.\r\n\r\n2) JSONP (JSON Padding)\r\n  : Provide 에서 Consumer 에서 보낸 Callback 함수로 json 데이터를 감싸준다.\r\n\r\n3) Consumer Proxy\r\n  : Consumer 에 서버단 Proxy 를 만들고 Browser 에서는 이 Proxy 를 호출한다.', '', '', 11, 0),
(1277, '', '서대영', '', '2013-12-04 17:21:50', 'Ajax', 'CORS 예제', 'Access-Control-Allow-Origin 값을 Provider의 도메인로 세팅해준다.\r\n컨트롤러 마다 하는 것보다 인터셉터에서 하면 좋다.\r\n\r\n====================================================================\r\npublic class OpenHandler extends HandlerInterceptorAdapter {\r\n\r\n	private static final Logger logger = Logger.getLogger(OpenHandler.class);\r\n\r\n	@Override\r\n	public boolean preHandle(HttpServletRequest request,\r\n			HttpServletResponse response, Object handler) throws Exception {\r\n		\r\n		boolean result = true;\r\n		response.setHeader("Cache-Control", "no-cache");\r\n		response.setHeader("Access-Control-Allow-Origin", "*");\r\n		return result;\r\n	}\r\n\r\n}', '', '', 5, 0),
(1278, '', '서대영', '', '2013-12-04 17:23:20', 'Algorithm', 'JSONP 예제', 'jQuery의 ajax 나 getJSON 함수를 이용하면 일반 Ajax 처럼 호출이 가능하다.\r\n단 Provider 에서 JSONP 를 제공해야한다.\r\n\r\n====================================================================\r\nfunction doJob() {\r\n	var mcode = $(''#mcode'').val();\r\n	$(''#mcodeSpan'').html(''Model List<br>'');\r\n	\r\n	if (mcode != ''ALL'') {\r\n		var url = ''http://tFactory.com:8000/tFactory/model/open/jsonp/'';\r\n		$.ajax({\r\n			type: ''get'',\r\n			url: url + mcode,\r\n			dataType: ''jsonp'',\r\n			jsonp: ''callback'',\r\n			error: function(xhr, status, error) {\r\n				alert(''error : '' + status);\r\n			},\r\n			success: function(data) {\r\n				$(''#mcodeSpan'').html(''- Model Code : '' + data.mcode + \r\n				''<br/> - Model Name : '' + data.mname);\r\n				$(''#mdesc'').text(data.mdesc);\r\n			}\r\n		});\r\n	} else {\r\n		var url = ''http://tFactory.com:8000/tFactory/model/open/jsonp/all?callback=?'';\r\n		$.getJSON(url, function(response) {\r\n			$(''#mcodeSpan'').html('''');\r\n			$(''#mdesc'').text('''');\r\n			$.each(response, function(i, data) {\r\n				$(''#mcodeSpan'').append(''- '' + data.mcode + ''<br>'');\r\n			});\r\n		});	\r\n	}\r\n}', '', '', 4, 0),
(1279, '', '서대영', '', '2013-12-05 19:48:23', 'REST', 'OAuth Consumer 개발', 'Consumer 와 Provider 가 Browser 에 서로 Redirect 하는 걸 잘 이해해야 한다.\r\n\r\n0 은 딱 한번\r\n1~3 은 인증 때만 필요\r\n\r\n0. 사전 작업\r\n  : Provider로 부터 Consumer Key와 Consumer Secret 발급\r\n  ex) 트위터\r\nConsumer key	9Coum1NDRACh2v7eoYxfaA\r\nConsumer secret	N1w0EfuCzwfCNjxPdvSHYjUjTtszi47I7rkpbeV0\r\nRequest token URL	https://api.twitter.com/oauth/request_token\r\nAuthorize URL	https://api.twitter.com/oauth/authorize\r\nAccess token URL	https://api.twitter.com/oauth/access_token\r\nCallback URL	http://jcornor.com:8000/callback\r\n\r\n=================================================================\r\n\r\n1. 컨슈머가 Request Token 요청 후 Provider 인증 페이지로 Redirect\r\n  : Consumer Key에 timestamp와 nonse(난수), callback url 등을 조합하여 암호화한 \r\nsignature를 만들어서 함께 보내면 Provider에서 Request Token을 응답함\r\n응답된 Request Token을 파라미터로 Provider 인증 페이지로 Redirect\r\n\r\n  ex) \r\n* 브라우저 요청\r\nhttp://jcornor.com:8000/twit/callback\r\n\r\n* 내부 컨슈머 요청 (HTTP Client)\r\nhttps://api.twitter.com/oauth/request_token?oauth_consumer_key=9Coum1NDRACh2v7eoYxfaA&oauth_signature_method=HMAC-SHA1&oauth_callback=http%3A%2F%2Fjcornor.com%2FTestOAuth%2F&oauth_version=1.0&oauth_timestamp=1386239696&oauth_nonce=75dzhA&oauth_signature=fsMsR%2FO46%2BvdopVpQYjK%2FfTd360%3D\r\n\r\n* 내부 프로바이더 응답 (HTTP Client)\r\noauth_token=qlY6XZu8SSWN8YIIqH4QPFJDQKUsSpG4EZUe8DKyu28&oauth_token_secret=q6uWcroe6SkPUZxD8ocw5kve9LuBvLbhSUL2GjA4FH0&oauth_callback_confirmed=true\r\n\r\n=================================================================\r\n\r\n2. 유저가 Authorize 요청/ 프로바이더가 Callback 페이지로 Redirect\r\n  : User가 id/pw 입력 후 인증 submit 하면 Provider의 authorize요청이 전달되고 그에 대한 응답으로 Consumer의 callback page로 rediect됨\r\n\r\n  ex) \r\n\r\n* 브라우져 요청 (브라우져의 Provider 인증 주소창이 아래임)\r\n\r\nhttps://api.twitter.com/oauth/authorize?oauth_token=qlY6XZu8SSWN8YIIqH4QPFJDQKUsSpG4EZUe8DKyu28\r\n\r\n3. 컨슈머가 Access Token 요청 후 Resource 페이지로 Redirect\r\n  : Request Token(1에서 확보) 과 Verifier(2에서 확보) 로 Access Token 요청 후 받아서 세션에 넣음. Signature 만드는 건 1번처럼 해야함\r\n\r\n ex) \r\n\r\n* 브라우저 요청\r\nhttp://jcornor.com:8000/twit/callback?oauth_token=NAJSwnUnAZN47nZ4Nq2OTqpstXhOmGFpbJJGCffM&oauth_verifier=0LTfUCqc89ARq2AUKVZavDNrDOwgLqNkKp7rnVRnE\r\n\r\n* 내부 컨슈머 요청\r\nhttps://api.twitter.com/oauth/access_token + Request Token\r\n\r\n* 내부 프로바이더 응답\r\noauth_token=165407408-Vn2DOR7KxIYriKs1lTTx0pBbiE2ElvHKKYveQRPe&oauth_token_secret=kemBOsNsJkpqvJg4u78HAyOG5PbitZLvXeUBa06Lc&user_id=165407408&screen_name=thinkingCookie\r\n\r\n4. 컨슈머가 Access Token 을 파라미터로 실제 Provider URL 을 호출하여 최종 Json 응답 받음\r\n\r\n ex)\r\nhttp://jcornor.com:8000/twit/hello\r\n\r\n* 내부 컨슈머 요청\r\nhttps://api.twitter.com/oauth/access_token + Access Token\r\n\r\n* 내부 프로바이더 응답\r\n실제 데이터 json\r\n\r\n\r\n\r\n', '', '', 9, 0),
(1280, '', '서대영', '', '2013-12-06 15:21:10', 'REST', 'OAuth 2.0', 'https://github.com/stepanowon/OAuth_20', '', '', 3, 0),
(1281, '', '서대영', '', '2013-12-30 16:29:45', 'Maven', 'Dependency Scope', ' - compile : 디폴트 (컴파일, 런타임 모두 필요)\r\n - provided : 컴파일 시에만 필요 (JDK, Servlet, JAVA EE 같이 WAS 단에서 제공 되는 것들)\r\n - runtime : 런타임 때에만 필요\r\n - test : 테스트 시에만 필요\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nhttp://devkkaok.tistory.com/208', '', '', 2, 0),
(1282, '', '서대영', '', '2013-12-30 18:36:46', 'Spring', '[RestTemplate] exchange로 디테일한 REST 호출', 'http://krams915.blogspot.kr/2011/02/spring-3-rest-web-service-provider-and_28.html', '', '', 9, 0),
(1283, '', '서대영', '', '2014-01-17 18:10:18', 'Maven', 'Maven Artifact의 RELEASE와 SNAPSHOT의 차이', 'RELEASE는 한번 배포하면 같은 버전으로 Overwrite가 불가하고 무조건 버전업을 해야하지만,\r\nSNAPSHOT은 같은 버전으로 계속 Overwrite가 가능하다.\r\n\r\n----------------------------------------\r\nMaven의 Artifact, Plugin, Archetype 등을 보면 pom.xml 파일에 버전을 설정할 수가 있다. 이 버전을 설정하는데 크게 두 가지 형태로 정의할 수 있다.\r\n바로 RELEASE와 SNAPSHOT~~~\r\n차이는 뭘까?\r\n이것저것 따지면 복잡할 듯 해서, 간단하게 정리해 보겠다.\r\nRELEASE 형식의 Artifact를 사용한다는 것은 <version> 태그안에 “1.2.3″과 같이 숫자로만 입력하면 된다.\r\n이럴경우에, 우선 빌드 시에 로컬 저장소부터 검색한다.\r\n즉, 로컬 저장소(보통 {사용자디렉터리}\\.m2\\repository)에 필요한 Artifact가 있으면 원격 저장소에서 다운로드 받지 않고 로컬에 있는 것을 사용한다. 물론 최하위 버전 숫자까지 동일해야 하면 로컬에 없으면 원격으로부터 다운로드 받는다.\r\n하지만 SNAPSHOT은 다르다. SNAPSHOT 설정은 <version> 태크안에 “1.2.3-SNAPSHOT”이라고 정의한다. 이러면 로컬 저장소에 있는 것을 사용하는 것이 아니라 원격 저장소에 있는것을 사용한다. 즉, 로컬에 이미 존재하더라도 원격에 최신의 Artiface가 있으면 그것을 다운로드 받아 사용한다. 그래서 SNAPSHOT을 사용할 때는 Artifact 파일 뒤에 시간과 빌드번호가 붙게된다. 아무리 똑같은 Artifact라고 해도 뒤에 붙은 번호가 다르다.\r\n“mvn deploy”를 이용하여 원격 저장소로 배포할 때도 마찬가지다. RELEASE는 동일한 버전이 존재하더라도 Artifact에 관련된 파일을 그냥 덮어쓴다. 하지만, SNAPSHOT은 파일 뒤에 시간과 빌드번호를 붙여서 차별화 한다. 물론 해당되는 POM 파일도 자동으로 수정해 준다.\r\n\r\n마지막으로 정리하여 특징을 살펴보면 다음과 같다.\r\nRELEASE는 말 그대로 최종 배포될 때 사용되는 것으로 Artifact의 수정이 거의 없을 때 사용한다.\r\nSNAPSHOT은 Artifact를 개발중에 다른곳에서도 자두 사용할 때 사용하는 것으로 Artifact의 수정이 빈번할 경우 사용한다.\r\n\r\n참고로 본인이 사용하는 저장소인 Nexus에는 SNAPSHOT 형태의 저장소는 직접 Artifact 업로드가 불가능하다. (물론 본인이 못하는 것일수도 있다.) “mvn deploy”를 이용해서 업로드해야한다.\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.hippolab.com/?p=210', NULL, '', 3, 0),
(1284, '', '서대영', '', '2014-01-23 10:04:38', 'Log4j', 'SQL 로깅', '정화수 매니저님 요청으로 ibatis에서 쿼리 로그 기록 하는 방법에 관해 알아봤는데요\r\nibatis에서 java.sql 패키지를 사용하고, log4j도 사용하고 있기 때문에\r\nlog4j 설정 변경 만으로 binding된 쿼리 로그를 볼 수 있습니다.\r\n\r\nAdmin 프로젝트에서는 log4j.xml 파일에 아래와 같이 설정 추가함으로써 메일 뒤에 붙여 넣은 것과 같은 로그를 볼 수 있습니다.\r\n“java.sql”로 범위를 넓히면 더 많은 로그를 볼 수 있지만 쿼리만 필요하면 “java.sql.Connection”으로 제한하면 됩니다.\r\n\r\n<logger name="java.sql.Connection">\r\n    <level value="DEBUG" />\r\n    <appender-ref ref="ASYNC" />\r\n</logger>\r\n', '', '', 5, 0),
(1285, '', '서대영', '', '2014-02-17 18:21:23', 'MyBatis', 'CustomTypeHandler 구현 및 등록', '# 구현\r\n======================================================================\r\npublic class InterfaceStatusTypeHandler implements TypeHandler<InterfaceStatus> {\r\n\r\n	@Override\r\n	public void setParameter(PreparedStatement ps, int i, InterfaceStatus parameter, JdbcType jdbcType) throws SQLException {\r\n		ps.setString(i, parameter.getCode());\r\n	}\r\n\r\n	@Override\r\n	public InterfaceStatus getResult(ResultSet rs, String columnName) throws SQLException {\r\n		return InterfaceStatus.fromCode(rs.getString(columnName));\r\n	}\r\n\r\n	@Override\r\n	public InterfaceStatus getResult(ResultSet rs, int columnIndex) throws SQLException {\r\n		return InterfaceStatus.fromCode(rs.getString(columnIndex));\r\n	}\r\n\r\n	@Override\r\n	public InterfaceStatus getResult(CallableStatement cs, int columnIndex) throws SQLException {\r\n		return InterfaceStatus.fromCode(cs.getString(columnIndex));\r\n	}\r\n\r\n}\r\n\r\n\r\n# 등록\r\n======================================================================\r\n    <typeHandlers>\r\n        <typeHandler javaType="com.skplanet.storeplatform.sac.runtime.acl.vo.InterfaceStatus" \r\n                handler="com.skplanet.storeplatform.sac.runtime.acl.vo.InterfaceStatusTypeHandler" /> \r\n    </typeHandlers>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://stackoverflow.com/questions/18182589/mybatis-retrieve-integer-as-enum-from-mysql-db', 'http://stackoverflow.com/questions/18182589/mybatis-retrieve-integer-as-enum-from-mysql-db', '', 5, 0),
(1286, '', '서대영', '', '2014-02-24 11:32:46', 'Java', '날짜 비교', 'import java.util.Date;\r\n\r\nlong curTime = System.currentTimeMillis();\r\nDate dt1 = new Date(curTime);		// 현재시간\r\nDate dt2 = new Date(curTime+10000); // 현재시간+10초\r\n\r\nassert dt1.compareTo(dt1) == 0;	// 같을 경우\r\nassert dt1.compareTo(dt2) < 0;		// dt1 < dt2\r\nassert dt2.compareTo(dt1) > 0;		// dt1 > dt2\r\n', '', '', 1, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(1287, '', '서대영', '', '2014-02-25 10:57:30', 'Java', 'InputStream 읽기', 'IOUtils.toString 을 쓰는게 가장 좋은 거 같음\r\n\r\n\r\n1) Most common way using BufferedReader (Basic)\r\n\r\nYou must have seen this code lots of time. Use it directly when you need it.\r\n\r\n?\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\npackage com.howtodoinjava.demo.io;\r\n \r\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\n \r\npublic class ReadStreamIntoStringUsingReader\r\n{\r\n    public static void main(String[] args) throws FileNotFoundException, IOException \r\n    {\r\n        InputStream in = new FileInputStream(new File("C:/temp/test.txt"));\r\n        BufferedReader reader = new BufferedReader(new InputStreamReader(in));\r\n        StringBuilder out = new StringBuilder();\r\n        String line;\r\n        while ((line = reader.readLine()) != null) {\r\n            out.append(line);\r\n        }\r\n        System.out.println(out.toString());   //Prints the string content read from input stream\r\n        reader.close();\r\n    }\r\n}\r\n\r\n\r\n2) Using apache commons IOUtils (Most readable)\r\n\r\nApache commons has a very classy facility for this purpose which makes code a lot cleaner and easy to read. It’s fast too.\r\n\r\n?\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\npackage com.howtodoinjava.demo.io;\r\n \r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.IOException;\r\nimport java.io.StringWriter;\r\n \r\nimport org.apache.commons.io.IOUtils;\r\n \r\npublic class ReadStreamIntoStringUsingIOUtils\r\n{\r\n    public static void main(String[] args) throws FileNotFoundException, IOException \r\n    {\r\n        //Method 1 IOUtils.copy()\r\n         \r\n        StringWriter writer = new StringWriter();\r\n        IOUtils.copy(new FileInputStream(new File("C:/temp/test.txt")), writer, "UTF-8");\r\n        String theString = writer.toString();\r\n        System.out.println(theString);\r\n         \r\n        //Method 2 IOUtils.toString()\r\n         \r\n        String theString2 = IOUtils.toString(new FileInputStream(new File("C:/temp/test.txt")), "UTF-8");\r\n        System.out.println(theString2);\r\n    }\r\n}\r\n\r\n\r\n3) Using java.util.Scanner (Most tricky)\r\n\r\nThis is something new. The reason it works is because Scanner iterates over tokens in the stream, and in this case we separate tokens using “beginning of the input boundary” (A) thus giving us only one token for the entire contents of the stream.\r\n\r\n?\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\npackage com.howtodoinjava.demo.io;\r\n \r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.IOException;\r\n \r\npublic class ReadStreamIntoStringUsingScanner\r\n{\r\n    @SuppressWarnings("resource")\r\n    public static void main(String[] args) throws FileNotFoundException, IOException \r\n    {\r\n        FileInputStream fin = new FileInputStream(new File("C:/temp/test.txt"));\r\n        java.util.Scanner scanner = new java.util.Scanner(fin,"UTF-8").useDelimiter("\\A");\r\n        String theString = scanner.hasNext() ? scanner.next() : "";\r\n        System.out.println(theString);\r\n        scanner.close();\r\n    }\r\n}\r\nThat’s all. The purpose of this post is to provide quick links for the very specific purpose i.e. to read input stream into string.\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://howtodoinjava.com/2013/10/06/how-to-read-data-from-inputstream-into-string-in-java/', 'http://howtodoinjava.com/2013/10/06/how-to-read-data-from-inputstream-into-string-in-java/', '', 18, 0),
(1288, '', '서대영', '', '2014-03-04 15:28:37', 'Java', 'How To Convert Java Object To / From JSON (Jackson)', '//1. Convert Java object to JSON format\r\nObjectMapper mapper = new ObjectMapper();\r\nmapper.writeValue(new File("c:\\\\user.json"), user);\r\n//2. Convert JSON to Java object\r\nObjectMapper mapper = new ObjectMapper();\r\nUser user = mapper.readValue(new File("c:\\\\user.json"), User.class);\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.mkyong.com/java/how-to-convert-java-object-to-from-json-jackson/', 'http://www.mkyong.com/java/how-to-convert-java-object-to-from-json-jackson/', '', 15, 0),
(1289, '', '서대영', '', '2014-03-04 16:19:24', 'SQL', 'DB 페이징', '안녕하세요, 문동선입니다.\r\n\r\n정화수 매니저님께서 아까 이야기 하신 ibatis 페이징 관련 내용 정리하여 메일 드립니다.\r\n\r\nibatis에서 많은 양의 데이터를 select할 때 메모리부족 방지를 위해 resultHandler를 사용할 수 있습니다.\r\n\r\n이전에\r\nList result = sqlMapClient.queryForList("selectList*****", parameter);\r\n이렇게 사용했다면\r\n\r\n아래처럼 사용하기\r\nResultRowHandler resultHandler = new ResultRowHandler() ;\r\nsqlMapClient.queryWithRowHandler("selectList*****", parameter, resultHandler);\r\nList result = resultHandler.getReturnList() ;\r\n(물론 resultHander 구현체를 구현해 줘야 합니다. 기본 핸들러를 교체하는 개념입니다.)\r\n\r\n그러나 여기에 함정이 있는게 DB에서 모두 다~ 가져와서 List 객체 만들기만 조금씩 하는 것입니다.\r\n메모리가 여전히 부족할 가능성이 있다는 거죠..\r\n그래서 fetch크기를 지정해줍니다.\r\n그럼 DB에서 가져오는 크기도 일정 크기로 줄어듭니다.\r\n\r\n페이징으로 구현하는게 더 직관적이고 바람직할 수 있습니다. (성능, 직관성)\r\nqueryForPaginatedList( )로 손쉽게 paging할 수 있습니다만 이녀석도 위와 같은 구조여서 메모리 문제로 2.3에서 deprecate…\r\n우리가 많이 쓰는 queryForList 함수도 3,4번 parameter를 사용해서 paging 구현 가능합니다.\r\nqueryForList(id, param, 시작, 끝);\r\n그런데 이 녀석도 같은 문제가 있습니다.\r\n\r\n물론 위의 세 방법 모두 fetch 크기를 잘 정해서 사용할 수도 있지만 예상치 못한 성능 저하나 outOfMemory의 위험은 있습니다.\r\n\r\n(결론)\r\n그래서 조금 귀찮고 코드가 복잡해지더라고 limit나 rownum같은 DB고유의 기능을 통해서 paging구현을 많이 하는듯 합니다.\r\n', '', '', 1, 0),
(1290, '', '서대영', '', '2014-03-04 18:22:17', 'REST', 'HttpClient 테스트', 'package com.skplanet.storeplatform.sac.client.rest.lib;\r\n\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.apache.http.Header;\r\nimport org.apache.http.HttpResponse;\r\nimport org.apache.http.NameValuePair;\r\nimport org.apache.http.client.ClientProtocolException;\r\nimport org.apache.http.client.HttpClient;\r\nimport org.apache.http.client.methods.HttpGet;\r\nimport org.apache.http.client.methods.HttpPost;\r\nimport org.apache.http.client.utils.URLEncodedUtils;\r\nimport org.apache.http.entity.StringEntity;\r\nimport org.apache.http.impl.client.HttpClientBuilder;\r\nimport org.apache.http.message.BasicNameValuePair;\r\nimport org.codehaus.jackson.map.ObjectMapper;\r\nimport org.junit.Test;\r\n\r\nimport com.skplanet.storeplatform.framework.core.exception.vo.ErrorInfo;\r\nimport com.skplanet.storeplatform.sac.client.other.vo.feedback.ListScorePaticpersSacRes;\r\nimport com.skplanet.storeplatform.sac.client.other.vo.feedback.ModifyFeedbackSacReq;\r\nimport com.skplanet.storeplatform.sac.client.other.vo.feedback.ModifyFeedbackSacRes;\r\n\r\npublic class HttpClientTest {\r\n\r\n	private final HttpClient client = HttpClients.createDefault();\r\n\r\n	private final ObjectMapper mapper = new ObjectMapper();\r\n\r\n	@Test\r\n	public void testGet() throws ClientProtocolException, IOException {\r\n		String scheme = "http";\r\n		String host = "devspweb1.sungsu.skplanet.com/sp_sac";\r\n		String path = "/other/feedback/listScorePaticpers/v1";\r\n\r\n		List<NameValuePair> urlParameters = new ArrayList<NameValuePair>();\r\n		urlParameters.add(new BasicNameValuePair("prodId", "0000647637"));\r\n\r\n		String query = URLEncodedUtils.format(urlParameters, "UTF-8");\r\n		String url = scheme + "://" + host + path + "?" + query;\r\n\r\n		HttpGet request = new HttpGet(url);\r\n\r\n		request.addHeader("Content-Type", "application/json;charset=UTF-8");\r\n		request.addHeader("Accept", "application/json;charset=UTF-8");\r\n\r\n		HttpResponse response = this.client.execute(request);\r\n\r\n		if (this.hasError(response)) {\r\n			System.out.println("has Error");\r\n			InputStream in = response.getEntity().getContent();\r\n\r\n			ErrorInfo resObj = this.mapper.readValue(in, ErrorInfo.class);\r\n			System.out.println(resObj);\r\n		} else {\r\n			System.out.println("no Error");\r\n			InputStream in = response.getEntity().getContent();\r\n			// String resTxt = IOUtils.toString(in);\r\n			// System.out.println(resTxt);\r\n\r\n			ListScorePaticpersSacRes resObj = this.mapper.readValue(in, ListScorePaticpersSacRes.class);\r\n			System.out.println(resObj);\r\n		}\r\n\r\n	}\r\n\r\n	@Test\r\n	public void testPost() throws ClientProtocolException, IOException {\r\n		String scheme = "http";\r\n		String host = "devspweb1.sungsu.skplanet.com/sp_sac";\r\n		String path = "/other/feedback/modify/v1";\r\n\r\n		String url = scheme + "://" + host + path;\r\n\r\n		HttpPost request = new HttpPost(url);\r\n\r\n		request.addHeader("Content-Type", "application/json;charset=UTF-8");\r\n		request.addHeader("Accept", "application/json;charset=UTF-8");\r\n\r\n		ModifyFeedbackSacReq req = new ModifyFeedbackSacReq();\r\n		req.setProdId("0000059641");\r\n		req.setUserKey("IW1023350238820110701120455");\r\n		req.setUserId("shop_7842");\r\n		req.setAvgScore("2");\r\n\r\n		String reqTxt = this.mapper.writeValueAsString(req);\r\n		System.out.println("# reqTxt : " + reqTxt);\r\n\r\n		request.setEntity(new StringEntity(reqTxt));\r\n\r\n		HttpResponse response = this.client.execute(request);\r\n\r\n		if (this.hasError(response)) {\r\n			System.out.println("has Error");\r\n			InputStream in = response.getEntity().getContent();\r\n\r\n			ErrorInfo resObj = this.mapper.readValue(in, ErrorInfo.class);\r\n			System.out.println(resObj);\r\n		} else {\r\n			System.out.println("no Error");\r\n			InputStream in = response.getEntity().getContent();\r\n			// String resTxt = IOUtils.toString(in);\r\n			// System.out.println(resTxt);\r\n\r\n			ModifyFeedbackSacRes resObj = this.mapper.readValue(in, ModifyFeedbackSacRes.class);\r\n			System.out.println(resObj);\r\n		}\r\n\r\n	}\r\n\r\n	private boolean hasError(HttpResponse response) {\r\n		try {\r\n			int statusCode = response.getStatusLine().getStatusCode();\r\n			System.out.println(statusCode);\r\n\r\n			if (statusCode >= 300) {\r\n				return true;\r\n			}\r\n\r\n			Header resultHeader = response.getHeaders("x-sac-result-code")[0];\r\n			System.out.println(resultHeader.getValue());\r\n\r\n			if (!StringUtils.equalsIgnoreCase(resultHeader.getValue(), "SUCC")) {\r\n				return true;\r\n			}\r\n		} catch (Exception e) {\r\n			return true;\r\n		}\r\n\r\n		return false;\r\n	}\r\n\r\n\r\n\r\n}\r\n', '', '', 9, 0),
(1291, '', '서대영', '', '2014-03-04 18:22:46', 'REST', 'RestTemplate 테스트', 'package com.skplanet.storeplatform.sac.client.rest.lib;\r\n\r\nimport java.util.Arrays;\r\n\r\nimport org.junit.Test;\r\nimport org.springframework.http.HttpEntity;\r\nimport org.springframework.http.HttpHeaders;\r\nimport org.springframework.http.HttpMethod;\r\nimport org.springframework.http.MediaType;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.client.RestTemplate;\r\n\r\nimport com.skplanet.storeplatform.sac.client.other.vo.feedback.ListScorePaticpersSacReq;\r\nimport com.skplanet.storeplatform.sac.client.other.vo.feedback.ListScorePaticpersSacRes;\r\nimport com.skplanet.storeplatform.sac.client.other.vo.feedback.ModifyFeedbackSacReq;\r\nimport com.skplanet.storeplatform.sac.client.other.vo.feedback.ModifyFeedbackSacRes;\r\n\r\npublic class RestTemplateTest {\r\n\r\n	private final RestTemplate restTemplate = new RestTemplate();\r\n\r\n	@Test\r\n	public void testGet() {\r\n		// String authKey = "9Coum1NDRACh2v7eoYxfaA";\r\n		// String secret = "9Coum1NDRACh2v7eoYxfaA";\r\n		// String interfaceId = "I04000013";\r\n\r\n		String scheme = "http";\r\n		String host = "devspweb1.sungsu.skplanet.com/sp_sac";\r\n		String path = "/other/feedback/listScorePaticpers/v1?prodId={prodId}";\r\n\r\n		String url = scheme + "://" + host + path;\r\n\r\n		HttpMethod method = HttpMethod.GET;\r\n\r\n		ListScorePaticpersSacReq req = new ListScorePaticpersSacReq();\r\n		req.setProdId("0000647637");\r\n\r\n		HttpHeaders headers = new HttpHeaders();\r\n		headers.setContentType(MediaType.APPLICATION_JSON);\r\n		headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));\r\n\r\n		HttpEntity<String> requestEntity = new HttpEntity<String>(headers);\r\n\r\n		Class<ListScorePaticpersSacRes> responseType = ListScorePaticpersSacRes.class;\r\n\r\n		ResponseEntity<ListScorePaticpersSacRes> responseEntitiy = this.restTemplate.exchange(url, method, requestEntity, responseType, req);\r\n\r\n		ListScorePaticpersSacRes res = responseEntitiy.getBody();\r\n\r\n		System.out.println(res);\r\n	}\r\n\r\n	@Test\r\n	public void testPost() {\r\n		// String authKey = "9Coum1NDRACh2v7eoYxfaA";\r\n		// String secret = "9Coum1NDRACh2v7eoYxfaA";\r\n		// String interfaceId = "I04000013";\r\n\r\n		String scheme = "http";\r\n		String host = "devspweb1.sungsu.skplanet.com/sp_sac";\r\n		String path = "/other/feedback/modify/v1";\r\n\r\n		String url = scheme + "://" + host + path;\r\n\r\n		HttpMethod method = HttpMethod.POST;\r\n\r\n		ModifyFeedbackSacReq req = new ModifyFeedbackSacReq();\r\n		req.setProdId("0000059641");\r\n		req.setUserKey("IW1023350238820110701120455");\r\n		req.setUserId("shop_7842");\r\n		req.setAvgScore("2");\r\n\r\n		HttpHeaders headers = new HttpHeaders();\r\n		headers.setContentType(MediaType.APPLICATION_JSON);\r\n		headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));\r\n\r\n		HttpEntity<ModifyFeedbackSacReq> requestEntity = new HttpEntity<ModifyFeedbackSacReq>(req, headers);\r\n\r\n		/*\r\n		Class<SacRestClientErrorInfo> responseType = SacRestClientErrorInfo.class;\r\n\r\n		ResponseEntity<SacRestClientErrorInfo> responseEntitiy = this.restTemplate.exchange(url, method, requestEntity, responseType);\r\n\r\n		SacRestClientErrorInfo res = responseEntitiy.getBody();\r\n		*/\r\n\r\n		Class<ModifyFeedbackSacRes> responseType = ModifyFeedbackSacRes.class;\r\n\r\n		ResponseEntity<ModifyFeedbackSacRes> responseEntitiy = this.restTemplate.exchange(url, method, requestEntity, responseType, req);\r\n\r\n		ModifyFeedbackSacRes res = responseEntitiy.getBody();\r\n\r\n		System.out.println(res);\r\n	}\r\n\r\n\r\n}\r\n', '', '', 14, 0),
(1292, '', '서대영', '', '2014-03-05 13:19:47', 'REST', 'SSL 인증 우회 방법', '    <beans profile="local"> \r\n        <bean class="com.skplanet.storeplatform.framework.core.helper.HttpsTrustSelfSigner"></bean> \r\n    </beans>\r\n\r\n\r\n\r\n\r\n#####################################################################\r\npackage com.skplanet.storeplatform.framework.core.helper;\r\n\r\nimport javax.annotation.PostConstruct;\r\nimport javax.net.ssl.HostnameVerifier;\r\nimport javax.net.ssl.HttpsURLConnection;\r\nimport javax.net.ssl.SSLContext;\r\nimport javax.net.ssl.SSLSession;\r\nimport javax.net.ssl.TrustManager;\r\nimport javax.net.ssl.X509TrustManager;\r\n\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\n/**\r\n * SSL 승인 클래스\r\n * \r\n * Updated on : 2014. 1. 15. Updated on : 2013-09-01 Updated by : 최현식, 에이엔비.\r\n */\r\npublic class HttpsTrustSelfSigner {\r\n\r\n	private static final Logger LOGGER = LoggerFactory.getLogger(HttpsTrustSelfSigner.class);\r\n\r\n	/**\r\n	 * <pre>\r\n	 * 스피링빈 초기화메소드.\r\n	 * </pre>\r\n	 */\r\n	@PostConstruct\r\n	public void initialize() {\r\n		this.enableSSL();\r\n	}\r\n\r\n	/**\r\n	 * <pre>\r\n	 * SSL 승인을 자동으로 하기 위한 설정.\r\n	 * </pre>\r\n	 */\r\n	private void enableSSL() {\r\n		TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {\r\n			@Override\r\n			public java.security.cert.X509Certificate[] getAcceptedIssuers() {\r\n				return null;\r\n			}\r\n\r\n			@Override\r\n			public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) {\r\n			}\r\n\r\n			@Override\r\n			public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) {\r\n			}\r\n		} };\r\n\r\n		try {\r\n			SSLContext sc = SSLContext.getInstance("SSL");\r\n			sc.init(null, trustAllCerts, new java.security.SecureRandom());\r\n			HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());\r\n\r\n			HttpsURLConnection.setDefaultHostnameVerifier(new HostnameVerifier() {\r\n				@Override\r\n				public boolean verify(String hostname, SSLSession session) {\r\n					return true;\r\n				}\r\n\r\n			});\r\n		} catch (Exception e) {\r\n			LOGGER.warn(e.toString());\r\n		}\r\n	}\r\n\r\n}', '', '', 6, 0),
(1293, '', '서대영', '', '2014-03-05 15:21:44', 'Java', 'How to convert Java Object to Map', '아래 처럼 Reflection 대신 Json을 이용하는 방법이 성능이 좋을 수도\r\n\r\nObjectMapper m = new ObjectMapper();\r\nMap<String,Object> props = m.convertValue(myBean, Map.class);\r\nMyBean anotherBean = m.convertValue(props, MyBean.class);\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://stackoverflow.com/questions/739689/how-to-convert-a-java-object-bean-to-key-value-pairs-and-vice-versa', 'http://stackoverflow.com/questions/739689/how-to-convert-a-java-object-bean-to-key-value-pairs-and-vice-versa', '', 1, 0),
(1294, '', '서대영', '', '2014-03-12 16:38:04', 'Spring', '[Spring Security] 기본 적용 방법', '의존성 추가하고 클래스 두개 생성하면 끝\r\n\r\n# Add the dependancy\r\n            <!-- Spring Security -->\r\n             < dependency>\r\n            < groupId> org.springframework.security </groupId >\r\n            < artifactId> spring-security-web </artifactId >\r\n            < version> 3.2.2.RELEASE </version >\r\n        </ dependency>\r\n        < dependency>\r\n            < groupId> org.springframework.security </groupId >\r\n            < artifactId> spring-security-config </ artifactId>\r\n            < version> 3.2.2.RELEASE </version >\r\n        </ dependency>\r\n\r\n# SecurityConfig \r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\r\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\r\n\r\n@Configuration\r\n@EnableWebSecurity\r\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\r\n\r\n    @Autowired\r\n    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {\r\n        auth\r\n            .inMemoryAuthentication()\r\n                .withUser("user").password("password").roles("USER");\r\n    }\r\n}\r\n\r\n# MessageSecurityWebApplicationInitializer\r\nimportorg.springframework.security.web.context.AbstractSecurityWebApplicationInitializer;\r\n\r\npublic class MessageSecurityWebApplicationInitializerextends AbstractSecurityWebApplicationInitializer {\r\n\r\n}\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://docs.spring.io/spring-security/site/docs/3.2.x/guides/', 'http://docs.spring.io/spring-security/site/docs/3.2.x/guides/', '', 18, 0),
(1295, '', '서대영', '', '2014-03-20 10:07:33', 'HTML', '뷰포트 메타 태그', '반응형 디자인을 만드는데 꼭 필요함\r\n다음 태그를 head 태그 안에 삽입\r\n\r\n<meta name="viewport" content="width=device-width, initial-scale=1">\r\n\r\n콘텐츠의 폭을 스크린 사이즈에 맞추고, 줌을 1로 하라...', '', '', 0, 0),
(1296, '', '서대영', '', '2014-03-20 16:30:00', 'Spring', 'Embedded Database 사용 (내장형 메모리 DB)', '데이터가 사라지므로 단위 테스트 용으로 사용하면 좋을 것 같음 (Default : HSQL)\r\n\r\n# Java based 설정\r\n@Before\r\npublic void setUp() {\r\n    database = new EmbeddedDatabaseBuilder()\r\n            .setType(EmbeddedDatabaseType.H2)\r\n            .addScript("schema.sql")\r\n            .addScript("init.sql")\r\n            .build();\r\n    ....\r\n}\r\n\r\n# XML 설정\r\n==================================================================\r\n<jdbc:embedded-database id="dataSource">\r\n    <jdbc:script location="classpath:schema.sql" execution="INIT"/>\r\n    <jdbc:script location="classpath:data.sql" execution="INIT"/>\r\n</jdbc:embedded-database>\r\n\r\n\r\n\r\n# 설정 필요없는 테스트 케이스\r\n==================================================================\r\npackage org.springframework.jdbc;\r\n\r\nimport static org.junit.Assert.assertNotNull;\r\n\r\nimport org.junit.After;\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\nimport org.springframework.jdbc.core.JdbcTemplate;\r\nimport org.springframework.jdbc.datasource.embedded.EmbeddedDatabase;\r\nimport org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;\r\nimport org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;\r\n\r\npublic class EmbeddedDatabaseTest {\r\n\r\n	private EmbeddedDatabase database;\r\n\r\n	@Before\r\n	public void setUp() throws Exception {\r\n		this.database = new EmbeddedDatabaseBuilder()\r\n							.setType(EmbeddedDatabaseType.HSQL)\r\n							.addScript("classpath:/sql/schema.sql")\r\n							.addScript("classpath:/sql/data.sql")\r\n							.build();\r\n		assertNotNull(this.database);\r\n	}\r\n\r\n	@After\r\n	public void tearDown() throws Exception {\r\n		this.database.shutdown();\r\n	}\r\n\r\n	@Test\r\n	public void shouldFindUserByUsername() {\r\n		JdbcTemplate jdbcTemplate = new JdbcTemplate(this.database);\r\n		int cnt = jdbcTemplate.queryForObject("select count(*) from Users", Integer.class);\r\n		System.out.println("# cnt : " + cnt);\r\n	}\r\n\r\n}\r\n\r\n# schema.sql\r\n=======================================================\r\nDROP TABLE IF EXISTS USERS;\r\nCREATE TABLE USERS(\r\n USER_ID INTEGER PRIMARY KEY,\r\n USER_NAME VARCHAR (75),\r\n PASSWORD VARCHAR (75));\r\nDROP TABLE IF EXISTS ROLES;\r\nCREATE TABLE ROLES(\r\n ROLE_ID INTEGER PRIMARY KEY,\r\n ROLE_NAME VARCHAR (20));\r\nDROP TABLE IF EXISTS USER_ROLES;\r\nCREATE TABLE USER_ROLES(\r\n USER_ID_FK INTEGER,\r\n ROLE_ID_FK INTEGER);\r\n\r\n# data.sql\r\n=======================================================\r\nINSERT INTO USERS\r\n VALUES(1,''admin'',''password'');\r\nINSERT INTO USERS\r\n VALUES(2,''csr'',''password'');\r\nINSERT INTO USERS\r\n VALUES(3,''guest'',\r\n ''{SSHA}zEWG/X8AzSdkHEFXE8pyCt0ddA321ktZz6bx1to9bFikZBS5wlAw3g=='');\r\nINSERT INTO ROLES\r\n VALUES(1,''everyone'');\r\nINSERT INTO ROLES\r\n VALUES(2,''csr'');\r\nINSERT INTO ROLES\r\n VALUES(3,''administrator'');\r\nINSERT INTO USER_ROLES\r\n VALUES(1,1);\r\nINSERT INTO USER_ROLES\r\n VALUES(1,2);\r\nINSERT INTO USER_ROLES\r\n VALUES(1,3);\r\nINSERT INTO USER_ROLES\r\n VALUES(2,1);\r\nINSERT INTO USER_ROLES\r\n VALUES(2,2);\r\nINSERT INTO USER_ROLES\r\n VALUES(3,1);\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://mail.cabsoftware.com/node/3', NULL, '', 25, 0),
(1297, '', '서대영', '', '2014-03-24 23:18:30', 'Spring', '[Spring Security] 기본 적용 방법 (xml)', '1) Dependency 추가\r\n\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>org.springframework.security</groupId>\r\n        <artifactId>spring-security-web</artifactId>\r\n        <version>3.2.2.RELEASE</version>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>org.springframework.security</groupId>\r\n        <artifactId>spring-security-config</artifactId>\r\n        <version>3.2.2.RELEASE</version>\r\n    </dependency>\r\n</dependencies>\r\n\r\n2) web.xml 에 필터 추가\r\n\r\n	<filter>\r\n		<filter-name>springSecurityFilterChain</filter-name>\r\n		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>\r\n	</filter>\r\n	<filter-mapping>\r\n		<filter-name>springSecurityFilterChain</filter-name>\r\n		<url-pattern>/*</url-pattern>\r\n	</filter-mapping>\r\n\r\n3) security.xml 스프링 설정 추가\r\n\r\n<beans xmlns="http://www.springframework.org/schema/beans"\r\n	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\r\n	xmlns:security="http://www.springframework.org/schema/security"\r\n	xsi:schemaLocation="http://www.springframework.org/schema/beans\r\n                                 http://www.springframework.org/schema/beans/spring-beans-3.2.xsd\r\n                                 http://www.springframework.org/schema/security\r\n                                 http://www.springframework.org/schema/security/spring-security-3.2.xsd">\r\n\r\n	<security:http auto-config="true">\r\n		<security:intercept-url pattern="/*" access="ROLE_USER"/>\r\n	</security:http>\r\n	\r\n	<security:authentication-manager alias="authenticationManager">\r\n		<security:authentication-provider>\r\n			<security:user-service>\r\n				<security:user name="guest" password="guest" authorities="ROLE_USER"/>\r\n			</security:user-service>\r\n		</security:authentication-provider>\r\n	</security:authentication-manager>\r\n                                 \r\n</beans>                              ', '', '', 10, 0),
(1298, '', '서대영', '', '2014-03-27 12:17:35', 'Spring', '[Spring Security] Security Database Schema', '# HSQL\r\nhttp://docs.spring.io/spring-security/site/docs/3.0.x/reference/appendix-schema.html\r\n\r\n\r\n# My SQL\r\nhttp://springinpractice.com/2010/07/06/spring-security-database-schemas-for-mysql', '', '', 4, 0),
(1299, '', '서대영', '', '2014-04-05 17:04:53', 'Java', 'PageNavigation, Pager', 'import java.util.HashMap;\r\n\r\npublic class PageNavigation {\r\n\r\n        private         boolean isPrevPage;     //이전페이지 존재여부\r\n        private         boolean isNextPage;     //다음페이지 존재여부\r\n        protected       int             nowPage;        //현재페이지\r\n        protected       int             rowTotal;       //총 게시물수\r\n        protected       int             blockList;      //한페이지에 표시될 리스트수\r\n        protected       int             blockPage;  //한 블럭에 표시될 페이지수\r\n        protected       int             blockSize;\r\n        private         int             totalPage;      //전체페이지수\r\n        private         int             startPage;  //시작페이지\r\n        private         int             endPage;        //마지막 페이지\r\n        private         int             startRow;       //데이타베이스의 쿼리에서 사용할 시작값\r\n        private         int             endRow;         //데이타베이스의 쿼리에서 사용할 종료값\r\n        private         int             startNum;       //리스트 표기시 처음 시작 숫자\r\n\r\n        /*\r\n        *       페이지를 계산하는 생성자\r\n        * nowPage:현재페이지\r\n        * rowTotal : 총게시물수\r\n        * blockList : 한페이지에 디스플레이될 게시물수\r\n        * blockPage: 한 블럭에 표시될 페이지수\r\n        */\r\n        public PageNavigation(int nowPage, int rowTotal, int blockList, int blockPage) {\r\n                super();\r\n\r\n\r\n                this.nowPage    = nowPage;\r\n                this.rowTotal   = rowTotal;\r\n                this.blockList  = blockList;\r\n                this.blockPage  = blockPage;\r\n\r\n                // 각종 플래그를 초기화\r\n                isPrevPage      = false;\r\n                isNextPage      = false;\r\n\r\n                // 입력된 전체 열의 수를 통해 전체 페이지 수를 계산한다\r\n                this.totalPage  = (int) Math.ceil((double)rowTotal / (double)blockList);\r\n\r\n                // 현재 페이지가 전체 페이지수보다 클경우 전체 페이지수로 강제로 조정한다\r\n                if(nowPage > this.totalPage) nowPage    = this.totalPage;\r\n\r\n                //상기와 같을경우 totalPage가 0이고 nowPage가 1일경우 에러발생\r\n                if(nowPage < 1)nowPage = 1;\r\n\r\n                // DB입력을 위한 시작과 종료값을 구한다\r\n                this.startRow   = (nowPage - 1) * blockList;\r\n                this.endRow             = this.startRow + blockList - 1;\r\n\r\n                // 시작페이지와 종료페이지의 값을 구한다\r\n                this.startPage  = ((nowPage - 1) / blockPage) * blockPage + 1;\r\n                this.endPage    = this.startPage + blockPage - 1;\r\n\r\n                //리스트의 최상의 숫자를 구한다.\r\n                this.startNum   = rowTotal - (blockList *( nowPage-1));//리스트될 경우 최상위 숫자\r\n\r\n\r\n                // 마지막 페이지값이 전체 페이지값보다 클 경우 강제 조정\r\n                if(this.endPage > this.totalPage)\r\n                {\r\n                        this.endPage    = totalPage;\r\n                }\r\n\r\n                // 시작 페이지가 1보다 클 경우 이전 페이징이 가능한것으로 간주한다\r\n                if(this.startPage > 1)\r\n                {\r\n                        this.isPrevPage = true;\r\n                }\r\n\r\n                // 종료페이지가 전체페이지보다 작을경우 다음 페이징이 가능한것으로 간주한다\r\n                if(this.endPage < this.totalPage)\r\n                {\r\n                        this.isNextPage = true;\r\n                }\r\n\r\n                // 기타 값을 저장한다\r\n                this.nowPage    = nowPage;\r\n                this.rowTotal   = rowTotal;\r\n                this.blockList  = blockList;\r\n                this.blockPage  = blockPage;\r\n        }\r\n\r\n        public void Debug()\r\n        {\r\n                System.out.println("input : nowPage :" + this.nowPage + " / rowTotal : " + this.rowTotal + " / blockList : " + this.blockList + " / blockPage : " + this.blockPage + " / totalPage : " + this.totalPage);\r\n                System.out.println("Total Page : " + this.totalPage + " / Start Page : " + this.startPage + " / End Page : " + this.endPage);\r\n                System.out.println("Total Row : " + this.rowTotal + " / Start Row : " + this.startRow + " / End Row : " + this.endRow);\r\n        }\r\n\r\n        // 전체 페이지 수를 알아온다\r\n        public int getTotalPage()\r\n        {\r\n                return totalPage;\r\n        }\r\n\r\n        // 시작 Row값을 가져온다\r\n        public int getStartRow()\r\n        {\r\n                return startRow;\r\n        }\r\n\r\n        // 마지막 Row값을 가져온다\r\n        public int getEndRow()\r\n        {\r\n                return endRow;\r\n        }\r\n\r\n        // Block Row 크기를 가져온다\r\n        public int getBlockSize()\r\n        {\r\n                return blockSize;\r\n        }\r\n\r\n        // 시작페이지값을 가져온다\r\n        public int getStartPage()\r\n        {\r\n                return startPage;\r\n        }\r\n\r\n        // 마지막 페이지값을 가져온다\r\n        public int getEndPage()\r\n        {\r\n                return endPage;\r\n        }\r\n\r\n        // 이전페이지의 존재유무를 가져온다\r\n        public boolean isPrevPage()\r\n        {\r\n                return isPrevPage;\r\n        }\r\n\r\n        // 다음페이지의 존재유무를 가져온다\r\n        public boolean isNextPage()\r\n        {\r\n                return isNextPage;\r\n        }\r\n\r\n        // 리스트 표기시 처음 시작 숫자를 가져온다.\r\n        public int getStartNum()\r\n        {\r\n                return startNum;\r\n        }\r\n\r\n        public HashMap<String, String> getParams(){\r\n\r\n                HashMap<String, String> params = new HashMap<String, String>();\r\n                params.put("isPrevPage",new Boolean(isPrevPage).toString());\r\n                params.put("isNextPage",new Boolean(isNextPage).toString());\r\n\r\n                params.put("nowPage",Integer.toString(nowPage));\r\n                params.put("rowTotal",Integer.toString(rowTotal));\r\n                params.put("blockList",Integer.toString(blockList));\r\n                params.put("blockPage",Integer.toString(blockPage));\r\n                params.put("blockSize",Integer.toString(blockSize));\r\n                params.put("totalPage",Integer.toString(totalPage));\r\n                params.put("startPage",Integer.toString(startPage));\r\n                params.put("endPage",Integer.toString(endPage));\r\n                params.put("startRow",Integer.toString(startRow));\r\n                params.put("endRow",Integer.toString(endRow));\r\n                params.put("startNum",Integer.toString(startNum));\r\n                return params;\r\n        }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttps://code.google.com/p/e-commerce-wizmall-java/source/browse/shop_ibatis/src/main/java/com/util/PageNavigation.java?r=101', 'https://code.google.com/p/e-commerce-wizmall-java/source/browse/shop_ibatis/src/main/java/com/util/PageNavigation.java?r=101', '', 1, 0),
(1300, '', '서대영', '', '2014-04-07 16:55:46', 'Spring', 'RequestContextHolder 사용 방법', '모든 scope의 Attribute들과 Raw Request를 가지고 있는 RequestAttributes 타입의 ThreadLocal을 접근하기 위한 클래스\r\n\r\nRequestContextHolder를 사용하면, Controller의 인자로 Request를 받지 않아도 다양한 레이어에서 HttpRequest, HttpResponse객체를 얻어올 수 있다.\r\n\r\n설정 원리 : RequestContextListener를 등록해주면 내부적으로 RequestContextFilter를 설정해준다.\r\n\r\n############## 사용법 ###################\r\n	private String getRemoteHost() {\r\n		HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();\r\n		String remoteAddr = request.getRemoteAddr();\r\n		return remoteAddr;\r\n	}\r\n\r\n\r\n############## 설정법 ###################\r\nweb.xml 에 추가...\r\n\r\n    <listener>\r\n        <listener-class>org.springframework.web.context.request.RequestContextListener\r\n        </listener-class>\r\n    </listener>', NULL, '', 39, 0),
(1301, '', '서대영', '', '2014-04-16 16:09:03', 'Maven', '로컬 라이브러리 Dependency 등록 방법', '<dependency>\r\n			<groupId>com.nhncorp.lucy</groupId>\r\n			<artifactId>lucy-xss</artifactId>\r\n			<version>1.1.2</version>\r\n			<scope>system</scope>\r\n			<systemPath>${basedir}/webapp/WEB-INF/lib/lucy-xss-1.1.2.jar</systemPath>\r\n		</dependency>', '', '', 1, 0),
(1302, '', '서대영', '', '2014-04-16 17:47:17', 'JQuery', 'jQuery Validation Plugin', '폼 검증에 쓰이는 플러그인\r\n나중에 따로 공부 요망\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://jqueryvalidation.org/', 'http://jqueryvalidation.org/', '', 0, 0),
(1303, '', '서대영', '', '2014-04-16 17:54:04', 'Bootstrap', 'Bootbox 플러그인', 'alert, confirm, prompt 를 손쉽게 만들 수 있음\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://bootboxjs.com/', 'http://bootboxjs.com/', '', 1, 0),
(1304, '', '서대영', '', '2014-04-17 16:40:59', 'Spring', '[Spring Security] StandardPasswordEncoder', '패스워드 단반향 암호화할 때 활용한다.\r\n\r\n\r\n<bean id="encoder" class="org.springframework.security.crypto.password.StandardPasswordEncoder" />\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\npackage org.springframework.security.crypto.password;\r\n\r\nimport static org.junit.Assert.assertTrue;\r\n\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\n\r\npublic class StandardPasswordEncoderTest {\r\n\r\n	private PasswordEncoder encoder;\r\n\r\n	@Before\r\n	public void setUp() {\r\n		this.encoder = new StandardPasswordEncoder();\r\n	}\r\n\r\n	@Test\r\n	public void test() {\r\n		String rawPassword = "admin";\r\n		String encodedPassword = this.encoder.encode(rawPassword);\r\n		assertTrue(this.encoder.matches(rawPassword, encodedPassword));\r\n	}\r\n\r\n}', '', '', 2, 0),
(1305, '', '서대영', '', '2014-04-18 17:20:44', 'Spring', '[Spring Security] Custom Tags', '### user id 받아오기 ###\r\n<security:authorize access="isAuthenticated()">\r\n	<security:authentication property="principal.username" var="sessionUserId"/>\r\n</security:authorize>\r\n\r\n\r\n### 권한에 따라 화면 보여주고 숨기기 ###\r\n<ul class="nav">\r\n                <security:authorize access="hasAnyRole(''ROLE_USER'', ''ROLE_ADMIN'') and isAuthenticated()">\r\n                    <li <%= tabActive.equals("tenant") ? "class=''active''" : "" %>><a href="${url_menu_tenant}">Tenant</a></li>\r\n                    <li <%= tabActive.equals("interface") ? "class=''active''" : "" %>><a href="${url_menu_interface}">Interface</a></li>\r\n                </security:authorize>\r\n                <security:authorize access="hasRole(''ROLE_ADMIN'') and isAuthenticated()">\r\n	                <li <%= tabActive.equals("cache") ? "class=''active''" : "" %>><a href="<c:url value="${url_menu_cache}"/>">Cache</a></li>\r\n	                <li <%= tabActive.equals("user") ? "class=''active''" : "" %>><a href="<c:url value="${url_menu_user}"/>">User</a></li>\r\n                </security:authorize>\r\n            </ul>', '', '', 4, 0),
(1306, '', '서대영', '', '2014-04-18 21:01:13', 'Tomcat', 'JNDI Test JSP 파일', '<%@ page language="java" pageEncoding="UTF-8" contentType="text/html;charset=utf-8" import="javax.naming.*" %>\r\n<html>\r\n<body>\r\n<% InitialContext initialContext = new InitialContext();\r\n   Object obj=initialContext.lookup("java:comp/env/jdbc/SPSACDB");\r\n   out.print("<b>"+obj+"</b>");\r\n %>\r\n</body>\r\n</html>', '', '', 0, 0),
(1307, '', '서대영', '', '2014-04-21 15:21:06', 'MyBatis', 'selectKey 엘리먼트 사용하여 MAX + 1 값으로 기본키 세팅', '	<insert id="insert" parameterType="Link">\r\n		<selectKey keyProperty="no" resultType="Integer" order="BEFORE">\r\n			SELECT NVL(MAX(no), 0) + 1 FROM link\r\n		</selectKey>\r\n		INSERT INTO link (no, id, date, kind, title, memo, hit) \r\n		VALUES (#{no}, ''dale.seo'', #{dateModified}, #{kind}, #{title}, #{content}, #{hit}) \r\n	</insert>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n######################################################################\r\n\r\n    <!-- 2. INSERT SQL-->\r\n    <insert id="insert" parameterType="InterfaceInfo">\r\n        /* InterfaceMapper.insert, 인터페이스 생성, 홍길동/SK플래닛, 2013-10-15 */\r\n        <selectKey keyProperty="interfaceId" resultType="String" order="BEFORE">\r\n			SELECT \r\n				CASE WHEN interface_id = '''' OR interface_id IS NULL \r\n				THEN\r\n					CASE WHEN ''${bypassYn}'' = ''Y'' \r\n					THEN \r\n					    CONCAT(CONCAT(''IB'', ''000001''), LPAD(''${version}'', 2, 0))\r\n					ELSE \r\n						CONCAT(CONCAT(''IS'', ''000001''), LPAD(''${version}'', 2, 0))\r\n					END\r\n				ELSE \r\n					CONCAT(CONCAT(SUBSTR(interface_id, 1, 2), LPAD(SUBSTR(interface_id, 3, 6) + 1, 6, 0)), LPAD(''${version}'', 2, 0))\r\n				END AS interface_id\r\n			FROM( SELECT MAX(interface_id) AS interface_id FROM tb_cm_interface WHERE bypass_yn = ''${bypassYn}'' )\r\n  		</selectKey>\r\n		INSERT INTO tb_cm_interface(\r\n			interface_id,\r\n			interface_type_cd,\r\n			url,\r\n			version,\r\n			interface_nm,\r\n			interface_desc,\r\n			bypass_yn,\r\n			status_cd,\r\n			reg_id,\r\n			reg_dt,\r\n			upd_id,\r\n			upd_dt\r\n		) VALUES (\r\n			#{interfaceId},\r\n			#{interfaceTypeCd},\r\n			#{url},\r\n			#{version},\r\n			#{interfaceNm},\r\n			#{interfaceDesc},\r\n			#{bypassYn},\r\n			#{statusCd},\r\n			#{regId},\r\n			#{regDt},\r\n			#{updId},\r\n			#{updDt}\r\n		)\r\n    </insert>', '', '', 3, 0),
(1308, '', '서대영', '', '2014-05-02 10:53:58', 'Spring', '[Spring Test] context 순서 정하기', '아래와 같이 세팅하면 운영과 동일한 순서로 root -> web 컨텍스트를 순차적ㅇ로 로딩할 수 있음\r\n\r\n@WebAppConfiguration\r\n@ContextHierarchy({\r\n    @ContextConfiguration(locations = { "classpath*:/META-INF/spring/applicationContext-*.xml" }),\r\n    @ContextConfiguration(locations = { "file:src/main/webapp/WEB-INF/spring/mmapp-servlet.xml" })\r\n})\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://stackoverflow.com/questions/15940941/how-to-setup-web-application-context-in-spring-mvc-test', 'http://stackoverflow.com/questions/15940941/how-to-setup-web-application-context-in-spring-mvc-test', '', 1, 0),
(1309, '', '서대영', '', '2014-05-02 16:13:30', 'JavaScript', '날짜 자바스크립트 라이브러리 (momentjs)', '최고임\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://momentjs.com/', 'http://momentjs.com/', '', 6, 0),
(1310, '', '서대영', '', '2014-05-08 14:03:04', 'Ajax', 'CORS 적용 (Servlet Filter)', '\r\n\r\n# 주의사항\r\nProvider에 CORS를 적용할 때는 Spring Interceptor가 아닌 Servlet Filter에 구현을 해야한다.\r\nBrowser에서 POST 매소드를 날리기 전에 OPTIONS로 사전 체크를 하는데 (Preflight 요청이라고 함), OPTIONS에서 막혀서 POST 메소드도 날릴 수가 없게 된다.\r\n\r\n===================================\r\n\r\npackage com.skplanet.storeplatform.external.core.filter;\r\n\r\nimport java.io.IOException;\r\n\r\nimport javax.servlet.Filter;\r\nimport javax.servlet.FilterChain;\r\nimport javax.servlet.FilterConfig;\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.ServletRequest;\r\nimport javax.servlet.ServletResponse;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\nimport com.skplanet.storeplatform.external.core.util.CorsUtils;\r\n\r\n/**\r\n * Store Platform Admin의 Swagger UI에서 호출되었을 경우,\r\n * Cross Domain 해결을 위해 Cors 적용해주는 필터\r\n *\r\n * Created on 2014. 5. 7. by 서대영, SK 플래닛\r\n */\r\npublic class CorsSupportFilter implements Filter {\r\n\r\n	@Override\r\n	public void init(FilterConfig filterConfig) throws ServletException {\r\n	}\r\n\r\n	@Override\r\n	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\r\n		HttpServletRequest httpRequest = (HttpServletRequest) request;\r\n		HttpServletResponse httpResponse = (HttpServletResponse) response;\r\n\r\n		String orgin = httpRequest.getHeader("Origin");\r\n		if (CorsUtils.isAccessFromSPAdmin(orgin)) {\r\n			httpResponse.setHeader("Access-Control-Allow-Origin", orgin);\r\n			httpResponse.setHeader("Access-Control-Allow-Methods", "GET, PUT, POST, OPTIONS, DELETE");\r\n			httpResponse.setHeader("Access-Control-Allow-Headers", "Content-Type");\r\n			httpResponse.setHeader("Access-Control-Max-Age", "86400");\r\n		}\r\n		chain.doFilter(httpRequest, httpResponse);\r\n	}\r\n\r\n	@Override\r\n	public void destroy() {\r\n	}\r\n\r\n}\r\n\r\n===================================\r\n안녕하세요. 임근대입니다.\r\n\r\n낮에 삽질하던… EC Swagger 에서 OPTIONS 를 날리던 부분에 대해 수정은 못했고 원인만 찾았습니다.\r\n\r\nCORS (Cross-Origin Resource Sharing) 처리 과정 중\r\n브라우저에서 서버로 실제 요청 전송을 위한 권한을 얻기 위해 \r\nPreflight 요청을 HTTP OPTIONS 로 전송하고 결과로 요청 처리 승인 정보를 내려 줘야 한다고 합니다. \r\n(알고 있었는지 모르겠지만.. 저는 몰랐던 사실을 알았네요.)\r\n\r\n자세한 내용은 아래 내용 참고 바랍니다.\r\n\r\n<정상 Preflight Request 샘플 >\r\nOPTIONS http://otherdomain.com/some-resource/ HTTP/1.1\r\nOrigin: http://mydomain.com\r\nAccess-Control-Request-Method: PUT\r\nAccess-Control-Request-Headers: X-Foo\r\n\r\n<정상 Preflight Reponse 샘플>\r\nHTTP/1.1 200 OK\r\nAccess-Control-Allow-Origin: http://mydomain.com\r\nAccess-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS\r\nAccess-Control-Allow-Headers: X-Foo\r\nAccess-Control-Max-Age: 3600\r\n\r\n<EC Swagger 호출 샘플>\r\n- 아래 정보는 Preflight 요청 이었고 결과를 내려줘야 실제 요청을 하는 Flow 인것으로 보입니다.\r\nRemote Address:172.21.236.61:80\r\nRequest URL:http://qa-ec.store.sungsu.skplanet.com//uaps/getDevice\r\nRequest Method:OPTIONS\r\nStatus Code:200 OK\r\n\r\nAccept:*/*\r\nAccept-Encoding:gzip,deflate,sdch\r\nAccept-Language:ko-KR,ko;q=0.8,en-US;q=0.6,en;q=0.4,it;q=0.2\r\nAccess-Control-Request-Headers:accept, content-type\r\nAccess-Control-Request-Method:POST\r\nConnection:keep-alive\r\nHost:qa-ec.store.sungsu.skplanet.com\r\nOrigin:http://qa-store.sungsu.skplanet.com\r\nReferer:http://qa-store.sungsu.skplanet.com/sp_admin/documentation/ecApiDocs\r\nUser-Agent:Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.131 Safari/537.36\r\n\r\n\r\n<참고 자료>\r\nhttp://www.w3.org/TR/cors/#resource-preflight-requests\r\n\r\n\r\n\r\n결론은 \r\nHTTP OPTIONS 를 호출하는 과정은 CORS 를 위한 정상 Flow 이고, \r\nOPTIONS 에 대한 응답을 내려줘야 처리할 수 있는 것 같습니다.\r\n\r\n왜 IE 는 정상 호출되는지? 파라미터 없는 POST 는 정상 처리되는지? 의문이 들겠지만 답은 모르겠네요. -_-a\r\n어쨌든 HTTP OPTIONS 는 보안상 허용을 잘 안해주는 Method 이기 때문에 다른 대안을 찾는게 좋을 것 같습니다.\r\n\r\n<대안>\r\n1.	Proxy 방식 : SP Admin 에서 Http Client 로 EC Swagger 를 호출하여 화면에 노출하는 방식\r\n\r\n감사합니다.\r\n', '', '', 5, 0),
(1311, '', '서대영', '', '2014-05-08 14:04:30', 'Ajax', 'Consumer Proxy 구현', '/**\r\n * EC 시스템으로 부터 API 규격 정보를 가져오는 서비스 인터페이스\r\n *\r\n * Created on 2014. 5. 8. by 서대영, SK 플래닛.\r\n */\r\n@Service\r\npublic class EcApiDocumentationServiceImpl implements EcApiDocumentationService {\r\n\r\n	private static Logger logger = LoggerFactory.getLogger(EcApiDocumentationServiceImpl.class);\r\n\r\n	@Autowired(required = false)\r\n	private RestTemplate restTemplate;\r\n\r\n	@Value("${ec.host}")\r\n	private String ecHost;\r\n\r\n	public EcApiDocumentationServiceImpl() {\r\n		if (this.restTemplate == null) {\r\n			this.restTemplate = new RestTemplate();\r\n		}\r\n	}\r\n\r\n	public void setRestTemplate(RestTemplate restTemplate) {\r\n		this.restTemplate = restTemplate;\r\n	}\r\n\r\n	public void setEcHost(String ecHost) {\r\n		this.ecHost = ecHost;\r\n	}\r\n\r\n	@Override\r\n	public Object getApiDocs(String resourcePath) {\r\n		Assert.notNull(this.restTemplate, "RestTemplate must not be null.");\r\n		Assert.hasText(this.ecHost, "EcHost must not be blank.");\r\n\r\n		Object response = this.invokeEc(resourcePath);\r\n		return response;\r\n	}\r\n\r\n	private Object invokeEc(String resourcePath) {\r\n		String url = this.formatUrl(this.ecHost);\r\n\r\n		HttpMethod method = HttpMethod.GET;\r\n\r\n		HttpHeaders headers = new HttpHeaders();\r\n		headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));\r\n\r\n		HttpEntity<String> requestEntity = new HttpEntity<String>(headers);\r\n\r\n		ResponseEntity<Object> responseEntity = this.restTemplate.exchange(url, method, requestEntity, Object.class, resourcePath);\r\n\r\n		Object response = responseEntity.getBody();\r\n		logger.debug("# response : " + response);\r\n\r\n		return response;\r\n	}\r\n\r\n	private String formatUrl(String host) {\r\n		String scheme = "http://";\r\n		String uriTemplate = "/api-docs{resourcePath}";\r\n		String url = scheme + host + uriTemplate;\r\n		logger.debug("# url : " + url);\r\n		return url;\r\n	}\r\n\r\n}', '', '', 7, 0),
(1312, '', '서대영', '', '2014-05-13 12:15:22', 'Spring', '[Spring MVC] 문자열 입력값 Enum으로 변환하기', 'PropertyEditorSupport를 확장 구현하고,\r\n@initBinder로 Controller에 등록해주면 됨\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://codeomitted.com/spring-mvc-enum-propertyeditorsupport/', 'http://codeomitted.com/spring-mvc-enum-propertyeditorsupport/', '', 3, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(1313, '', '서대영', '', '2014-05-19 19:28:05', 'HTTP', 'URL 인코딩/디코딩의 의의', 'HTML FORM 으로 Submit 할 경우 어떤 Method(GET/POST) 를 사용하든지 Field 이름과 값을 인코딩해서 서버에 전송한다. \r\nGET과 POST의 차이는 단지 이 인코딩 값을 어느 장소를 통해서 보내냐는 뿐이다. (GET은 QueryString으로, POST는 RequestBody)\r\n\r\n그래서 FORM이 아닌 직접 QueryString 을 만들어줄 때는 특별한 주의가 필요하다.\r\n서버에서 혼선이 없도록 특수문자와 한글들을 적절히 인코딩 해줘야 한다.\r\n\r\n예를 들어 특수 문자 &가 그대로 파라미터 값으로 전송이 될 경우, 서버에서는 파라미터 구분자로 인식하기 때문에 파라미터 값 뒷 부분이 유실되고 엉뚱한 파라미터가 추가되게 된다.\r\n\r\n하지만 &이 %26으로 URL 인코딩되어 서버에 전달되면 서버에서는 파라미터 값의 일부로 &을 인식하게 된다.\r\n\r\nURL 인코딩/인코딩을 이해할 때 제일 중요한게 인코딩/디코딩이 발생하는 타이밍이다.\r\n서버에서 URL을 인식할 때는 예약어 기준으로 Scheme, Host, Port, Path, Query, Fragment를 일단 분리한 후, 그 부분을 디코딩한다.\r\n따라서 서버에 보내기위해 인코딩할 때도 일단 예약어 기준으로 갈라 놓고 각 부분을 인코딩해야 한다. (각 부분별로 인코딩 방법도 약간씩 상이함. 예를 들어 + 처리)\r\n\r\n\r\n\r\nMost browsers nowadays display the URLs by decoding (converting percent-encoded bytes back to their original characters) them first, while keeping them encoded when fetching them for the network. This means users are almost never aware of such encoding.\r\n\r\nDevelopers, or web page authors on the other hand have to be aware of it, because there are many pitfalls.\r\n\r\n\r\n================================================================================\r\nURL encoding\r\n\r\nSome characters cannot be part of a URL (for example, the space) and some other characters have a special meaning in a URL: for example, the character # can be used to further specify a subsection (or fragment) of a document. In HTML forms the character = is used to separate a name from a value. The URI generic syntax uses URL encoding to deal with this problem, while HTML forms make some additional substitutions rather than applying percent encoding for all such characters. SPACE is encoded as ''+'' or "%20".[8]\r\nHTML 5 specifies the following transformation for submitting HTML forms with the "get" method to a web server:[1]\r\nCharacters that cannot be converted to the correct charset are replaced with HTML numeric character references[9]\r\nSPACE is encoded as ''+''\r\nLetters (A–Z and a–z), numbers (0–9) and the characters ''*'',''-'',''.'' and ''_'' are left as-is\r\nAll other characters are encoded as %HH hex representation with any non-ASCII characters first encoded as UTF-8 (or other specified encoding)\r\nThe octet corresponding to the tilde ("~") is permitted in query strings by RFC3986 but required to be percent-encoded in HTML forms to "%7E".\r\nThe encoding of SPACE as ''+'' and the selection of "as-is" characters distinguishes this encoding from RFC 3986.\r\n================================================================================\r\nhttps://en.wikipedia.org/wiki/Query_string', NULL, '', 16, 0),
(1314, '', '서대영', '', '2014-05-24 09:36:00', 'Tomcat', 'GET 방식으로 파라미터 보낼 때 한글 깨짐 문제', 'POST 방식은 web.xml에 스프링이 제공하는 CharacterEncodingFilter를 걸어주면 되고,\r\nGET 방식은 server.xml에 URIEncoding="UTF-8" 속성을 추가시켜 주면 된다.\r\n\r\n====================\r\n<< GET  방식 >>\r\ntomcat의 server.xml 파일을 열어 다음 2개의 Connector 세팅에 URIEncoding="UTF-8" 속성을 추가 시켜주면 됨\r\n\r\n\r\n    <Connector connectionTimeout="20000" port="8080" protocol="HTTP/1.1" redirectPort="8443" URIEncoding="UTF-8"/>\r\n\r\n    <Connector port="8009" protocol="AJP/1.3" redirectPort="8443" URIEncoding="UTF-8"/>\r\n\r\n\r\n============================\r\nGET에서 한글 처리는 POST와는 조금 다르다. 왜냐하면 POST에서는 헤더값으로 통해 데이터를 주고받기 때문에 서블릿에서 어느 정도 컨트롤이 가능하지만 GET은 URL에 직접 데이터를 추가하여 전송하는 방식이기 서블릿의 영역 밖에 존재한다. 그러므로 GET을 통해 한글을 데이터를 받고자 할 때는 서버에서 직접 URL을 UTF-8로 인코딩할 수 있게끔 설정해 주어야 한다.\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://springmvc.egloos.com/513986', 'http://springmvc.egloos.com/513986', '', 8, 0),
(1315, '', '서대영', '', '2014-05-28 15:56:42', 'Spring', 'properties 파일 내용 가져오는 방법', '1) @Value 어노테이션 사용\r\n  : 인스턴스 생성 전에 세팅이 된다.\r\n\r\n	@Value("#{propertiesForSac[''component.external.baseUrl'']}")\r\n	private String externalBaseUrl;\r\n\r\n2) @Resource 어노테이션 사용\r\n  : key를 변수로 하여 런타임에 세팅이 가능하다.\r\n\r\n	@Resource(name = "propertiesForSac")\r\n	private Properties properties;\r\n\r\n        String innerRequestURI = StringUtils.removeStart(requestURI, requestContextPath);\r\n\r\n	String bypassPath = this.properties.getProperty(innerRequestURI, "");', '', '', 9, 0),
(1316, '', '서대영', '', '2014-05-28 18:51:20', 'Spring', '쓰레드 로컬 How to mock RequestContextHolder', '다음과 같이 JUnit에 세팅하면 RequestContextHolder를 Mock할 수 있다.\r\n\r\n	@Before\r\n	public void before() {\r\n// Request 정보 세팅\r\n	    MockHttpServletRequest request = new MockHttpServletRequest();\r\n	    request.setContextPath("");\r\n	    request.setRequestURI("/example/sample/detail");\r\n	    request.setQueryString("no=1");\r\n\r\n// Attribute 세팅\r\n                SacRequestHeader sacRequestHeader = new SacRequestHeader();\r\n		TenantHeader tenant = new TenantHeader();\r\n		tenant.setTenantId("S02");\r\n		sacRequestHeader.setTenantHeader(tenant);\r\n		ServletRequestAttributes attributes = new ServletRequestAttributes(request);\r\n		attributes.setAttribute(SacRequestHeader.class.getName(), sacRequestHeader, RequestAttributes.SCOPE_REQUEST);\r\n\r\n// 쓰레드 로컬 세팅\r\n	    RequestContextHolder.setRequestAttributes(attributes);\r\n	}\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://stackoverflow.com/questions/9419606/unit-testing-a-method-dependent-to-the-request-context', 'http://stackoverflow.com/questions/9419606/unit-testing-a-method-dependent-to-the-request-context', '', 40, 0),
(1317, '', '서대영', '', '2014-05-30 16:22:30', 'Java', 'URI를 만드는 여러가지 방법', '스프링의 UriComponentsBuilder를 이용하는 게 가장 좋음\r\nhttp://docs.spring.io/spring/docs/3.1.x/spring-framework-reference/html/mvc.html#mvc-construct-encode-uri\r\n\r\n=============================================================\r\nStraight up Java\r\nUsing Jersey implementation\r\n\r\nConstruct URI\r\n@Test\r\npublic void construct_uri_jersey () {\r\n              \r\n    UriBuilder builder = UriBuilder\r\n            .fromPath("www.leveluplunch.com")\r\n            .scheme("http")\r\n            .path("java/examples/");\r\n    \r\n    URI uri = builder.build();\r\n    \r\n    assertEquals(\r\n            "http:/www.leveluplunch.com/java/examples/", \r\n            uri.toString());\r\n}\r\nConstruct URI encoded\r\n@Test\r\npublic void construct_uri_encoded_jersey () {\r\n\r\n    UriBuilder builder = UriBuilder\r\n            .fromPath("www.leveluplunch.com")\r\n            .scheme("http")\r\n            .path("java/examples/?sample=uri encode");\r\n    \r\n    URI uri = builder.build();\r\n    \r\n    assertEquals(\r\n            "http:/www.leveluplunch.com/java/examples/%3Fsample=uri%20encode", \r\n            uri.toString());\r\n}\r\nConstruct URI w/ template\r\n@Test\r\npublic void construct_uri_template_jersey () {\r\n    \r\n    UriBuilder builder = UriBuilder\r\n            .fromPath("www.leveluplunch.com")\r\n            .path("/{lanuage}/{type}/");\r\n    \r\n    URI uri = builder.build("java", "examples");\r\n    \r\n    assertEquals(\r\n            "www.leveluplunch.com/java/examples/", \r\n            uri.toString());\r\n}\r\nConstruct URI w/ query parameter\r\n@Test\r\npublic void construct_uri_parameter_jersey () {\r\n\r\n    UriBuilder builder = UriBuilder\r\n            .fromPath("www.leveluplunch.com")\r\n            .path("/{lanuage}/{type}/")\r\n            .queryParam("test", "a", "b");\r\n    \r\n    URI uri = builder.build("java", "examples");\r\n    \r\n    assertEquals(\r\n            "www.leveluplunch.com/java/examples/?test=a&test=b", \r\n            uri.toString());\r\n}\r\nGoogle Guava\r\nGuava currently doesn''t have support for a URI builder utility and there is an accepted feature request in the issues log.\r\n\r\nApache Commons\r\nApache commons with httpclient\r\n\r\nConstruct URI\r\n@Test\r\npublic void contruct_uri_apache () throws URISyntaxException {\r\n    \r\n    URIBuilder builder = new URIBuilder()\r\n            .setScheme("http")\r\n            .setHost("www.leveluplunch.com")\r\n            .setPath("/java/examples/");\r\n    \r\n    URI uri = builder.build();\r\n    \r\n    assertEquals(\r\n            "http://www.leveluplunch.com/java/examples/", \r\n            uri.toString());\r\n}\r\nConstruct URI encoded\r\n@Test\r\npublic void contruct_uri_encoded_apache () throws URISyntaxException {\r\n    \r\n    URIBuilder builder = new URIBuilder()\r\n            .setScheme("http")\r\n            .setHost("www.leveluplunch.com")\r\n            .setPath("/java/examples/?sample=uri encode");\r\n    \r\n    URI uri = builder.build();\r\n    \r\n    assertEquals(\r\n            "http://www.leveluplunch.com/java/examples/%3Fsample=uri%20encode", \r\n            uri.toString());\r\n}\r\nConstruct URI w/ query parameter\r\n@Test\r\npublic void contruct_uri_parameters_apache () throws URISyntaxException {\r\n    \r\n    List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(1);\r\n    nameValuePairs.add(new BasicNameValuePair("test","a"));\r\n    nameValuePairs.add(new BasicNameValuePair("test","b"));\r\n      \r\n    URIBuilder builder = new URIBuilder()\r\n            .setScheme("http")\r\n            .setHost("www.leveluplunch.com")\r\n            .setParameters(nameValuePairs);\r\n    \r\n    URI uri = builder.build();\r\n    \r\n    assertEquals(\r\n            "http://www.leveluplunch.com?test=a&test=b", \r\n            uri.toString());\r\n}\r\nSpring Framework\r\nUriComponents below is from the org.springframework.web.util package.There is also a URIBuilder in spring social.\r\n\r\nConstruct URI\r\n@Test\r\npublic void construct_uri_spring () {\r\n    \r\n    UriComponents uriComponents =\r\n            UriComponentsBuilder.newInstance()\r\n                .scheme("http").host("www.leveluplunch.com").path("/java/examples/")\r\n                .build();\r\n    \r\n    assertEquals("http://www.leveluplunch.com/java/examples/", uriComponents.toUriString());\r\n}\r\nConstruct URI encoded\r\n@Test\r\npublic void construct_uri_encoded_spring () {\r\n    \r\n    UriComponents uriComponents =\r\n            UriComponentsBuilder.newInstance()\r\n                .scheme("http").host("www.leveluplunch.com")\r\n                .path("/java/examples/?sample=uri encode")\r\n                .build()\r\n                .encode();\r\n    \r\n    assertEquals("http://www.leveluplunch.com/java/examples/%3Fsample=uri%20encode", \r\n            uriComponents.toUriString());\r\n}\r\nConstruct URI w/ template\r\n@Test\r\npublic void construct_uri_template_spring () {\r\n    \r\n    UriComponents uriComponents =\r\n            UriComponentsBuilder.newInstance()\r\n                .scheme("http")\r\n                .host("www.leveluplunch.com")\r\n                .path("/{lanuage}/{type}/")\r\n                .build()\r\n                .expand("java", "examples")\r\n                .encode();\r\n    \r\n    assertEquals("http://www.leveluplunch.com/java/examples/", \r\n            uriComponents.toUriString());\r\n}\r\nConstruct URI w/ query parameter\r\n@Test\r\npublic void construct_uri_queryparmeter_spring () {\r\n    \r\n    UriComponents uriComponents =\r\n            UriComponentsBuilder.newInstance()\r\n                .scheme("http")\r\n                .host("www.leveluplunch.com")\r\n                .path("/{lanuage}/{type}/")\r\n                .queryParam("test", "a", "b")\r\n                .build()\r\n                .expand("java", "examples")\r\n                .encode();\r\n    \r\n    assertEquals("http://www.leveluplunch.com/java/examples/?test=a&test=b", \r\n            uriComponents.toUriString());\r\n}\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.leveluplunch.com/java/examples/construct-build-uri/', 'http://www.leveluplunch.com/java/examples/construct-build-uri/', '', 12, 0),
(1318, '', '서대영', '', '2014-06-19 14:38:02', 'MyBatis', 'java.lang.NumberFormatException: For input string: “y” 에러 해결방법', '### Error querying database. Cause: java.lang.NumberFormatException: For input string: “y”\r\n### Cause: java.lang.NumberFormatException: For input string: “y”\r\n\r\nmyBatis 사용시 위와 같은 에러가 발생하는 경우가 있다.\r\n\r\n원인을 살펴보면 다음과 같은 형식의 문자열 비교 구문에서 에러가 발생하는 것을 확인할 수 있다.\r\n\r\n \r\n\r\n1\r\n2\r\n3\r\n<if test=”stringValue == ‘Y’”>\r\n  AND A.COLUMN1 = #{condition}\r\n</if>\r\nview rawgistfile1.xml hosted with &#10084; by GitHub\r\n\r\n분명 문자열 비교 구문인데 NumberFormatException이 발생하는 상황이다.\r\n\r\n결론적으로 위 현상은 myBatis 문제는 아니고 OGNL(Object Graph Navigation Language) 의 문제이다.\r\n\r\nOGNL 인터프리터에서는 위 구문의 ‘Y’를 char 형으로 인식하고, ‘YY’나 “Y”는 String으로 인식한다. (따옴표를 잘보자)\r\n\r\n그래서 <if test=”stringValue == ‘Y’”> 이와 같은 구문을 비교할 때  NumberFormat으로 비교를 시도하여 Exception이 발생한다.\r\n\r\n이유는 java의 char형은 실제로 문자의 코드값을 저장하기 때문이다. 그래서 아래와 같은 형변환이 가능하다.\r\n\r\n \r\n\r\n1\r\n2\r\nchar y = ''Y'';\r\nint code = (int)y; // code에는 Y의 코드값인 89가 저장된다.\r\nview rawgistfile1.java hosted with &#10084; by GitHub\r\n\r\n그래서 위와 같은 상황을 피하기 위해서는 다음과 같은 해결책이 존재한다.\r\n\r\n1. <if test=’stringValue == “Y”‘> &#8211; 쌍따옴표와 홑따옴표의 위치를 변경\r\n\r\n2. <if test=”stringValue == &quot;Y&quot;”> &#8211; 쌍따옴표를 HTML 코드로 변경\r\n\r\n3. <if test=”stringValue == ‘Y’.toString()”> &#8211; toString() 함수를 사용해 String 형으로 변환\r\n\r\n개인적으로는 1번 방법이 제일 깔끔하고 코드 읽기도 쉬운거 같아서 if 구문이 들어간 곳에 전부 적용해서 쓰고 있다.\r\n\r\n \r\n\r\n1\r\n2\r\n3\r\n<if test=''stringValue == "Y"''>\r\n  AND A.COLUMN1 = #{condition}\r\n</if>\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.naver.com/PostView.nhn?blogId=shavez&logNo=197493366&redirect=Dlog&widgetTypeCall=true', 'http://blog.naver.com/PostView.nhn?blogId=shavez&logNo=197493366&redirect=Dlog&widgetTypeCall=true', '', 1, 0),
(1319, '', '서대영', '', '2014-06-23 15:22:42', 'DB', '쿼리 실행 속도가 달라질 수 있는 이유', '안녕하세요, 문동선입니다.\r\n\r\n오늘 오전에 어드민 코드에서 특정 쿼리가 실행이 10분이나 걸리는 문제가 있었습니다.\r\nSql developer같은 툴로 실행하면 빠르게 실행되고 plan도 정상이였는데 말이죠..\r\n\r\n이와 관련해서 공유 드리고자 메일 드립니다.\r\n\r\nSQL에 변수를 사용하는 방법은 리터럴변수, 바인드변수가 있습니다.\r\nibatis같은 sql mapper에서도 이 두가지를 모두 지원합니다.\r\n\r\nSELECT * FROM TB_DP_LIST_PROD\r\nWHERE LIST_ID=#listId#\r\nORDER BY $orderCols$\r\n\r\n예를 들어 위와 같은 쿼리가 있다면,\r\n$orderCols$는 리터럴변수여서 해당 값이 바로 복사 됩니다.\r\n그 후에 #listId#는 바인딩 변수 처리가 되어 OraclePreparedStatment가 생성됩니다.\r\n#listId# = ‘RNK000000006’\r\n$orderCols$ = ‘EXPO_ORD,EXPO_ORD_SUB’\r\n위와 같이 쿼리를 ibatis에서 실행한다면 아래와 같이 실행됩니다.\r\n\r\n(1) \r\nSELECT * FROM TB_DP_LIST_PROD\r\nWHERE LIST_ID=#listId#\r\nORDER BY $orderCols$\r\n\r\n(2)\r\nSELECT * FROM TB_DP_LIST_PROD\r\nWHERE LIST_ID=#listId#\r\nORDER BY EXPO_ORD,EXPO_ORD_SUB\r\n\r\n(3)\r\nSELECT * FROM TB_DP_LIST_PROD\r\nWHERE LIST_ID=?\r\nORDER BY EXPO_ORD,EXPO_ORD_SUB\r\n\r\n(4)\r\noracle.jdbc.driver.OraclePreparedStatement 생성\r\n\r\n(5)\r\nSELECT * FROM TB_DP_LIST_PROD\r\nWHERE LIST_ID=’RNK000000006’\r\nORDER BY EXPO_ORD,EXPO_ORD_SUB\r\n\r\n(6)\r\noracle.jdbc.driver.OraclePreparedStatement.execute( ) 호출로 실행\r\n\r\n\r\n위와 같이 장황하게 설명하는 이유는 변수를 사용하는 방법에 따라서 실행계획이 달라지기 때문입니다.\r\n우리가 일반적으로 쿼리를 PC에서 실행하고 확인하는 경우는 하드코딩된 리터럴변수입니다.\r\n이 경우 DB는 플랜을 계획하는 시점에 정확한 상수 값을 알고 있기 때문에 최적의 플랜을 선택합니다.\r\n그러나 바인드 변수로 실행시 정확한 값을 모르기 때문에 범용적인 플랜을 선택하게 됩니다.\r\n따라서 PC에서 실행시에는 빠른데 ibatis에서 실행시 느리게 동작하는 쿼리가 있을 수 있습니다.\r\n이 경우 바인드 변수로 테스트해보는 것이 좋습니다.\r\n\r\n감사합니다.\r\n', '', '', 0, 0),
(1320, '', '서대영', '', '2014-07-05 18:00:25', 'MyBatis', '널 필드에서 1111 에러가 발생할 때', '메인 설정 파일에 아래를 추가한다.\r\n\r\n\r\n<configuration>\r\n    <properties resource="mybatis-config.properties" />\r\n    <settings>\r\n        <setting name="jdbcTypeForNull" value="NULL" />\r\n    </settings>\r\n\r\n    <environments default="development">\r\n    ....\r\n    </environments>\r\n\r\n    <mappers>\r\n    ....\r\n   </mappers>\r\n</configuration>\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://stackoverflow.com/questions/8455552/mybatis-error-setting-null-parameter', 'http://stackoverflow.com/questions/8455552/mybatis-error-setting-null-parameter', '', 0, 0),
(1321, '', '서대영', '', '2014-07-07 20:08:53', 'Spring', '[Spring Security] 컨트롤러에서 유저정보 가져오기', 'Principal 만 매개변수로 추가하면 됨...\r\n\r\n\r\n	@RequestMapping(value = "/save", method = RequestMethod.POST)\r\n	public @ResponseBody String save(@ModelAttribute ApiTest test, Principal principal) {\r\n		test.setRegId(principal.getName());\r\n		test.setRegDt(new Date());\r\n		this.service.save(test);\r\n		long testNo = test.getTestNo();\r\n		String format = "Successfully saved. (# %s)";\r\n		return String.format(format, testNo);\r\n	}', '', '', 4, 0),
(1322, '', '서대영', '', '2014-07-07 20:10:05', 'Ajax', 'json 객체를 통채로 from에 채우기', 'function setForm(data) {\r\n	alert(''setForm()'');\r\n	reset();\r\n	$(''#formRequest :input:not(button)'').each(function(index) {\r\n		var name = $(this).attr(''name'');\r\n	    $(this).val(data[name]);\r\n	});\r\n}', '', '', 0, 0),
(1323, '', '서대영', '', '2014-07-08 15:39:45', 'Network', 'L4 의 LB 방식', 'L4 의 LB (Load Balancing, 로드 밸런싱) 방식은 다음과 같다.\r\n\r\n[ 할당 방식 ]\r\n* Round-robin : 모든 서버에 순차적으로 할당\r\n* Hash : IP나 MAC 주소에 따라 항상 동일한 서버로 유지\r\n\r\n[ 유지 방식 ]\r\n* Sticky : 세션이 형성된 WAS에 유지\r\n* No sticky : 세션을 무시하고 새로운 WAS로 분배', '', '', 0, 0),
(1324, '', '서대영', '', '2014-07-08 19:07:44', 'Tomcat', '톰켓 세션 쿠키 이름 설정', '1.	TOMCAT - JSESSIONID 변경\r\n[tomcat home]/conf/catalina.properties 를 열고\r\n\r\n아래 항목을 추가시켜주면 된다. 변경하고자 하는 세션아이디 이름을 입력.\r\norg.apache.catalina.SESSION_COOKIE_NAME=neoguruJSESSIONID\r\n\r\n자세한 System Properties 의 항목은 아래 url을 참고하자.\r\nhttp://tomcat.apache.org/tomcat-6.0-doc/config/systemprops.html\r\n\r\n\r\n2.	Apache Worker 설정 - JSESSIONID 변경\r\nworker.serverB-lb.session_cookie=JSESSIONID2\r\n\r\n감사합니다.\r\n', '', '', 0, 0),
(1325, '', '서대영', '', '2014-07-15 10:13:23', 'MyBatis', 'Mapper에서 StringUtils 사용하기', '                                       <if test=''@org.apache.commons.lang3.StringUtils@endsWith(filteredBy, "+complete")''>\r\n                                         AND E.COMPT_YN = ''Y''\r\n                                       </if>\r\n\r\n\r\n\r\n\r\n1. Static Field declare format.\r\n    "@" + ''Class name include package'' + "@" + ''Field name''\r\n    Example) @package.class@property\r\n\r\n    <if test="@org.mybatis.utility.StringUtils@TRUE">\r\n        ORDER BY SHOP_NO\r\n    </if>\r\n\r\n2. Static Method declare format.\r\n    "@" + ''Class name include package'' + "@" + ''Method name(inline parameter)''\r\n    Example) @package.class@method(#{value})\r\n\r\n    <if test="@org.mybatis.utility.StringUtils@isBlank(#{shopStatus})">\r\n        AND SHOP_STATUS = #{shopStatus}\r\n    </if> \r\n\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://devyongsik.tistory.com/605', 'http://devyongsik.tistory.com/605', '', 7, 0),
(1326, '', '서대영', '', '2014-07-15 12:03:02', 'Regex', '정규식 예제', '\r\n# recent|count|lowpirce|highprice|recent+complete|count+complete|lowpirce+complete|highprice+complete 를 아래와 같이 줄일 수 있음\r\n	@Pattern(regexp = "(recent|count|lowprice|highprice)(\\\\+complete)?")', '', '', 0, 0),
(1327, '', '서대영', '', '2014-07-15 13:41:34', 'Regex', '자주 쓰이는 정규식', '# 휴대폰 :  ^01(?:0|1|[6-9]) - (?:\\d{3}|\\d{4}) - \\d{4}$ \r\n^01[016789]-\\d{3,4}-\\d{4}$\r\n \r\n# 일반전화 : ^\\d{2,3} - \\d{3,4} - \\d{4}$\r\n\r\n# 주민등록번호 : \\d{6} \\- [1-4]\\d{6}\r\n\r\n# Username\r\n/^[a-z0-9_-]{3,16}$/\r\n\r\n# Password\r\n/^[a-z0-9_-]{6,18}$/\r\n\r\n# Hex\r\n/^#?([a-f0-9]{6}|[a-f0-9]{3})$/\r\n\r\n\r\n# Email\r\n/^([a-z0-9_.-]+)@([da-z.-]+).([a-z.]{2,6})$/\r\n\r\n# URL\r\n/^(https?://)?([da-z.-]+).([a-z.]{2,6})([/w_.-]*)*/?$/\r\n\r\n\r\n# IP Address\r\n/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/\r\n\r\n\r\n# HTML Tag\r\n/^<([a-z]+)([^<]+)*(?:>(.*)</1>|s+/>)$/\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://blog.outsider.ne.kr/360', NULL, '', 6, 0),
(1328, '', '서대영', '', '2014-07-23 14:34:02', 'Library', 'ObjectMapper 사용 시 Json 요청 전문과 Java VO 데이터 구조 차이 무시', 'HttpMethod POST 로 Json 데이터를 보낼때 멤버변수로 정의되지 않은 필드를 보내면 아래와 같은 오류가 발생하고 있습니다.\r\n\r\nCould not read JSON: Unrecognized field "xxx"\r\n해당 오류를 검색해보니 아래 두가지 방법이 있는것 같습니다. 어떤 방법으로 처리 하면 될지 가이드 부탁 드립니다.\r\n\r\n1. ObjectMapper disable 처리\r\n\r\n\r\nObjectMapper mapper = new ObjectMapper();\r\nmapper.disable(DeserializationConfig.Feature.FAIL_ON_UNKNOWN_PROPERTIES);\r\n \r\n2. VO 클래스에 Annotation 선언 (Spring MVC 에서만 됨)\r\n\r\n\r\n@JsonIgnoreProperties(ignoreUnknown = true)\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://stackoverflow.com/questions/4486787/jackson-with-json-unrecognized-field-not-marked-as-ignorable', 'http://stackoverflow.com/questions/4486787/jackson-with-json-unrecognized-field-not-marked-as-ignorable', '', 8, 0),
(1329, '', '서대영', '', '2014-07-23 14:36:32', 'Library', '[Jackson1] VO 작성 시 유용한 어노테이션', '@JsonIgnoreProperties(ignoreUnknown = true)\r\n  : Deserialize 시 Json 요청 전문과 Req VO 간 필드 불일치 무시\r\n\r\n@JsonSerialize(include = Inclusion.NON_NULL)\r\n  : Serialize 시 Res VO 가 Null 일 시, Json 응답 전문에 미표시', NULL, '', 20, 0),
(1330, '', '서대영', '', '2014-07-23 15:48:58', 'Spring', '@ModelAttribute VS @RequestBody', '둘 다 POST 방식으로 요청 전문을 받는 다는 점을 동일하지만,\r\n@ModelAttribute는 application/x-www-form-urlencoded로 받고,\r\n@RequestBody는 컨버터로 등록된 content-type 만 처리한다는 점이 틀리다.\r\n\r\n일반적으로 웹어플리케이션은 @ModelAttribute, 인터페이스 서비는 @RequestBody를 사용하는 게 맞는 듯 하다.', '', '', 2, 0),
(1331, '', '서대영', '', '2014-08-19 10:48:09', 'License', 'PL로 끝나는 라이선스', 'GPL, LGPL, MPL, EPL과 같은 라이선스는 사용하게 될 시 소스 코드를 모두 공개해야 하므로 애초에 사용하지 않도록 주의해야 한다.', '', '', 0, 0),
(1332, '', '서대영', '', '2014-08-21 12:36:07', 'Spring', '[Spring MVC] 여러 Object를 Form에 맵핑하는 방법', '	                <th class="hbg">Sim Operator List</th>\r\n	                <td>\r\n	                	<c:forEach items="${sacService.simOperators}" var="s" varStatus="x">\r\n	                		<div class="input-append">\r\n		                		<form:input path="simOperators[${x.index}].simOperator"/>\r\n	                		</div>\r\n	                	</c:forEach>\r\n	                </td>\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.intertech.com/Blog/spring-mvc-command-beans-as-complex-as-you-need/', 'http://www.intertech.com/Blog/spring-mvc-command-beans-as-complex-as-you-need/', '', 1, 0),
(1333, '', '서대영', '', '2014-08-23 17:07:36', 'Java', '제네릭(Generic) 용어 정리', '* 매개변수화 타입 (Parameterized type) : List<String>\r\n* 실 타입 매개변수 (Actual type parameter) : String\r\n* 제네릭 타입/클래스 (Generic type) : List<E>\r\n* 형식 타입 매개변수 (Formal type parameter) : E\r\n* 언바운드 와일드 카드 타입 (Unbounded wildcard type) : List<?>\r\n* 원천 타입 (Raw type) : List\r\n* 바운드 타입 매개변수 (Bounded type parameter) : <E extends Number>\r\n* 재귀적 타입 바운드 (Recursive type bound) : <T extends Comparable<T>>\r\n* 바운드 와일드 카드 타입 (Bounded wildcard type) : List<? extends Number>\r\n* 제네릭 매소드 (Generic method) : static <E> List<E> asList(E[] a)\r\n* 타입 토큰 (Type token) : String.class', '', '', 2, 0),
(1334, '', '서대영', '', '2014-09-03 23:01:56', 'Algorithm', '알고리즘 복잡도 분석 자료', '* Analysis of algorithms\r\nhttp://en.wikipedia.org/wiki/Analysis_of_algorithms\r\n\r\n* Time complexity\r\nhttp://en.wikipedia.org/wiki/Time_complexity\r\n\r\n* Big-O Complexity Chart\r\nhttp://bigocheatsheet.com/\r\n\r\n* A Gentle Introduction to Algorithm Complexity Analysis\r\nhttp://discrete.gr/complexity/', '', '', 1, 0),
(1335, '', '서대영', '', '2014-09-07 15:47:43', 'Algorithm', '정렬 알고리즘 과정 에니메이션', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://www.sorting-algorithms.com/', 'http://www.sorting-algorithms.com/', '', 2, 0),
(1336, '', '서대영', '', '2014-09-08 13:41:34', 'Algorithm', '정렬(Sort) 알고리즘 종류', '# Selection Sort (선택 정렬)\r\n- 맨 앞 자리부터 작은 원소를 채워나가는 방식\r\n- 첫 패스에서는 0번째 원소와 1부터 마지막 원소까지를 비교해서 가장 작은 원소가 있는 위치를 찾아 0번째 원소랑 자리를 바꿈\r\n- 두번째 패스에서는 1번째 원소와 2부터 마지막 원소까지를 비교해서 가장 작은 원소가 있는 위치를 찾아 1번째 원소랑 자리를 바꿈\r\n- 일반화 하면, i번째 원소와 i+1 부터 n-1 원소까지 비교해서 가장 작은 원소가 있는 위치를 찾아 i번째 원소와 자리를 바꿈\r\n- 매 패스마다 SWAP이 딱 1번 일어난다. (비교는 여러 번 수행되지만...)\r\n- 0부터 n-1번째 위치를 차례로 찍어가면서 가장 작은 원소를 위치시키므로 선택정렬이라고 부름\r\n- 첫 패스에서는 n-1만큼 비교해야하지만, 매 패스마다 1씩 비교 횟수가 줄다가, 마지막 패스에서는 1번만 비교해도 됨\r\n- for i in [0, n-1]\r\n      for j in [i+1, n]\r\n- 시간 복잡도 : O(n^2) / 공간 복잡도 : O(1)\r\n- 시간복잡도는 높은 편이고, 데이터가 이미 부분적으로 정렬된 경우에도 불필요한 비교 작업을 해야한다.\r\n- Quadraic 복잡도를 가진 정렬 방법 중에서 가장 구현이 쉽지만, 최적화 여지가 없어서 성능이 가장 안 좋다.\r\n\r\n\r\n# Bubble Sort (거품 정렬)\r\n- 맨 뒷 자리부터 큰 원소를 채워나가는 방식\r\n- 큰 값을 계속해서 뒤로 보내는 모습이 방울이 이동하는 것 같아서 버블정렬 \r\n- 매 패스마다 0부터 시작해서 다음 원소들과 차례로 비교하면서 앞 원소가 더 크면 자리를 바꾼다.\r\n- 결국 첫번째 패스기 끝나면 가장 큰 원소가 제일 마지막 인덱스에 위치하게 된다.\r\n- 그럼 다음 반복에서는 가장 큰 원소가 있는 위치 전까지만 비교해도 된다.\r\n- for i in [0, n]\r\n      for j in [0, n-i]\r\n- 따라서 시간 Worst/Average 복잡도는 (n-1)*(n-2)*(n-3)*...*(1) = O(n^2) 이다.\r\n- 매 패스마다 SWAP이 엄청나게 많이 일어나는게 특징이다.\r\n- 버블 정렬의 장점은 부분적으로 정렬되어 있는 배열에 대해서는 선택 정렬보다 빠른 성능을 보인다는 것이다.\r\n- 특히, 이미 완전 정렬된 배열이 들어왔을 때는 패스를 한 번말 실행해도 되므로 Best Complexity는 O(1) 이다.\r\n- 또 하나의 장점은 In-place sorting이므로 Space Complexity는 O(1) 이다.\r\n\r\n\r\n# 삽입정렬 : O(n^2)\r\n- 매 패스 마다 정렬 범위를 1칸식 확장해나가면서, 새롭게 정렬 범위에 추가된 값보다 작은 값을 기존 범위에서 찾아서 그 뒤로 꼽는 모습 때문에 삽입 정렬이라고 부른다\r\n- 첫 패스에서는 0번째 원소와 1번째 원소를 비교해서 1번째 원소가 더 클 경우 0번째 원소와 자리를 바꾼다.\r\n- 두번째 패스에서는 2번째 원소보다 0번째와 1번째 중에 작은 값 뒤에 꼽는다.\r\n- N 번째 패스 : N 번째 원소보다 보다 앞에 있는 원소들을 뒤로 1칸씩 시프트 시키면서 N 번째 원소보다 작은 원소를 찾으면 그 뒤에 꼽는다.\r\n- 바깥 쪽 루프는 순방향, 안 쪽 루프는 역방향으로 탐색하는 특징을 가지고 있다.\r\n- 선택/거품 정렬은 반복이 진행될수록 탐색 범위가 줄어드는 반면에 삽입 정렬은 반복이 진행될수록 탐색 밤위가 넓어진다. \r\n- 매 패스마다 SWAP은 딱 한 번 일어나지만, SHIFT가 많이 일어나는 게 특징이다.\r\n- 삽입 정렬은 부분적으로 정렬된 경우, 패스의 수는 변함이 없지만 매 패스에서 필요한 비교의 수가 급감한다.\r\n- 따라서 정렬된 상태에 가까울수록 효율적이고, 추가적인 공간도 사용하지 않는 점이 장점이다.\r\n- 특징 : 완전 정렬된 리스트에 대해서는 O(n)을 보이기 때문에, 퀵소트나 머지 소트보다 성능이 좋다는 점\r\n\r\n\r\n# Quick Sort (퀵 정렬) : O(n*log n)\r\n- 분할 정복과 재귀 알고리즘 이용\r\n- 원소 중에 피벗을 선택하여 피벗보다 작은 값은 피벗 앞으로, 피벗보다 큰 값은 피벗 뒤에 위치시킨다.\r\n- 분할된 배열을 각각 또 다시 재귀적으로 퀵정렬한 결과를 피벗을 기준으로 다시 결합시킨다.\r\n- 기저 조건 : 배열의 원소 개수가 0또는 1\r\n- quci_sort(whole) = quick_sort(less) + pivot + quick_sort(greater)\r\n- 최고의 경우 O(n*log_n), 최악의 경우에는 O(n^2)의 시간을 필요로 하며, 평균복잡도는 O(n*log_n)이 된다는 것을 알 수 있다.\r\n- 어떻게 피벗을 선정하느냐에 따라 성능이 좌우된다. (맨 앞, 맨 뒤, 중간 ...)\r\n- 분할 비용 > 병합 비용\r\n\r\n# Merge Sort (합병정렬) : O(n*log n)\r\n- 분할 정복과 재귀 알고리즘 이용\r\n- 입력 리스트를 절반씩 나눠서 재귀적으로 각자 정렬 후 다시 합침\r\n- 두 개의 리스트를 합칠 때는 두 개의 리스트에서 제일 작은 값을 비교해서 더 작은 걸 먼저 사용한다.\r\n- 두 개의 리스트 중에 하나를 모두 소진하면 나머지 리스트는 그냥 붙여주기만 하면 된다.\r\n- 기저 조건 : 배열의 원소 개수가 0또는 1\r\n- 합병 정렬의 시간복잡도는 O(n*log_n)이 되며, 이 것은 최악, 평균, 최고의 경우에 모두 같은 성능을 보여준다.\r\n- 최악의 경우의 시간복잡도가 퀵 정렬보다 우수하여 합병 정렬의 성능이 더 좋아보이지만, 실제로는 퀵 정렬의 성능이 일반적으로 우수하다.\r\n- 공간 복잡도 : O(n)\r\n- 게다가 합병 정렬의 경우에는 합병하는 데 퀵 정렬보다 더 많은 공간을 필요로 하므로 메모리를 더 많이 사용하는 단점이 있다. \r\n- 분할 비용 < 병합 비용\r\n\r\n\r\n# 힙 정렬 :  O(n*log n)\r\n\r\n힙 정렬은 정렬할 원소들을 모두 힙에 차례차례 삽입한 후, 힙에 넣었떤 원소들을 삭제하는 과정을 거친다.\r\n최대 힙의 삭제는 큰 원소부터 작은 원소의 순으로 이루어지므로, 삭제되면서 반환된 값을 나열하면 내림차순으로 정렬된 결과를 얻을 수 있다.\r\n삽입과 삭제에 걸리는 시간은 각  원소당 O(log n)이고, 이 연산을 모든 원소에 대해 실행해야 하므로, 힙 정렬의 시간복잡도는 O(n*log n)이다.\r\n힙 정렬은 매우 안정적인 연산 속도를 보이지만, 평균적인 경우, 퀵 정렬보다는 조금 느린 것으로 알려져 있다.\r\n', NULL, '', 72, 0),
(1337, '', '서대영', '', '2014-09-08 13:44:30', 'Algorithm', '탐색(Search) 알고리즘 종류', '# 순차탐색 : O(N)\r\n  : 구현이 단순하지만 속도가 느리고 반복적인 연산을 피할 수 없다.\r\n\r\n# 이진탐색 : O(log N)\r\n  : 속도가 비교적 빠르지만, 사전 정렬되어 있어야 한다.\r\n    정렬되지 않은 데이터가 주어진다면 처음에 정렬을 하기 위해 O(n*log n)의 시간이 필요하다.\r\n\r\n# 해쉬 : O(1)\r\n  : 속도가 가장 빠르지만, 공간 낭비가 심하며, 충돌 위험이 있다.\r\n    그래서 해쉬 함수를 주의깊게 설계해야한다.', '', '', 7, 0),
(1338, '', '서대영', '', '2014-09-08 13:49:59', 'Algorithm', '재귀(Recursion) VS 반복(Iteration)', '같은 알고리즘을 두 가지 방법을 이용해서 구현할 수 있으며,\r\n각자 장단점이 있다.\r\n\r\n# 재귀(Recursion)\r\n - 코드가 명쾌하고 직관적으로 이해하기 쉽다.\r\n - 중복이 발생하는 치명적인 단점이 있다.\r\n - 내부 스택을 이용해서 함수가 호출된 지점을 정확하게 기억해야 하기 때문에,\r\n    메모리의 사용이나 프로그램의 처리 속도 면에서 추가적인 부하가 생긴다.\r\n\r\n\r\n# 반복 (Iteration)\r\n - 코드가 읽기 어렵고 멋이 없다.\r\n - 가볍고 빠르다.\r\n\r\n\r\n=================================================\r\n재귀와 귀납 ("프로그래머, 수학으로 생각하라" 중에서)\r\n\r\n재귀와 귀납은 방향만 다른 뿐입니다. ''큰 문제로부터 점점 작은 문제로''라는 방향으로 진행하는 것이 재귀적(Recursive) 사고방식입니다.\r\n한편, ''작은 문제에서 점점 큰 문제로''라는 방향으로 진행하는 것이 귀납적(Inductive) 사고방식입니다.', NULL, '', 8, 0),
(1339, '', '서대영', '', '2014-09-13 18:27:40', 'DataStructure', 'Data Structures vs. Objects', '자료 구조와 객체는 반대의 성질을 가지고 있다.\r\n\r\n# Data Structures\r\n - 데이터는 노출하고 기능적 의미는 없다.\r\n - 기존 자료 구조에 새로운 행위를 쉽게 추가 할 수 있다.\r\n - 기존 메소드에 새로운 자료 구조를 추가하는 것이 어렵다.\r\n\r\n# Objects\r\n - 행위를 노출하고 데이터를 숨긴다.\r\n - 기존 행위를 변경하지 않고 새로운 객체를 추가할 수 있다.\r\n - 기존 객체에 새로운 행위를 추가하는 것이 어렵다.', '', '', 0, 0),
(1340, '', '서대영', '', '2014-09-13 18:33:16', 'Java', 'Error Handling 일반', '# 오류의 근본 원인을 찾기 쉽게 작성하라.\r\n - 코드 가독성을 저해하면 안된다.\r\n - 코드의 복잡성을 높이면 안된다.\r\n - 논리코드와 뒤섞이지 않게 한다.\r\n\r\n# checked exception은 OCP(Open Closed Principle)을 위배한다.\r\n  : exception이 바뀌면 이를 throws 한 상위 단계의 코드도 바뀌어야 한다.', '', '', 0, 0),
(1341, '', '서대영', '', '2014-09-22 22:49:14', 'Commons', 'StopWatch 로직 속도 측정', '자바(java)에서 특정 로직이 얼마나 소요되는지 체크를 하는 방법을 소개한다.\r\n\r\n\r\n1. jdk에서 제공하는 System 클래스의 currentTimeMillis() 메소드를 이용해서 확인할 수 있다.\r\n\r\n예제\r\nlong startTime = System.currentTimeMillis();\r\nThread.sleep(1000);\r\nlong estimatedTime = System.currentTimeMillis() - startTime;\r\nSystem.out.println("took " + estimatedTime + " ms");\r\n\r\n결과값은 밀리세컨드(ms)로 다음과 같다.\r\ntook 1000 ms\r\n\r\n\r\n2. jdk에서 제공하는 System 클래스의 nanoTime() 메소드를 이용해서 확인할 수 있다. 아주 정확한 시간을 측정할 때 많이 활용한다.\r\n\r\n예제\r\nlong time1 = System.nanoTime();\r\nThread.sleep(1000);\r\nlong time2 = System.nanoTime();\r\nlong timeSpent = time2 - time1;\r\nSystem.out.println("took " + timeSpent + " ns");\r\n\r\n결과값은 nano 값으로 나온다.\r\ntook 1000232514 ns\r\n\r\n3. Common-lang의 StopWatch 클래스를 이용한다. (commons-lang 2.3)\r\n\r\n예제\r\nimport org.apache.commons.lang.time.StopWatch;\r\n\r\nStopWatch stopWatch = new StopWatch();\r\nstopWatch.reset();\r\nstopWatch.start();\r\nThread.sleep(2000);\r\nstopWatch.stop();\r\nSystem.out.println(stopWatch.toString());\r\n  \r\nstopWatch.reset();\r\nstopWatch.start();\r\nThread.sleep(5000);\r\nstopWatch.stop();\r\nSystem.out.println(stopWatch.toString());\r\n  \r\nstopWatch.reset();\r\nstopWatch.start();\r\nThread.sleep(3000);\r\nstopWatch.stop();\r\nSystem.out.println(stopWatch.toString());\r\n\r\n\r\nstart를 하기전에 반드시 reset()를 해야 한다. 그 이유는 Common-lang의 StopWatch 클래스는 내부적으로 status를 가지고 있다. 이 부분에 대해서 약간 신경써야 한다. 자세한 것은 뒤에서 다시 설명한다.\r\n\r\n결과값은 다음과 같다.\r\n\r\n0:00:02.000\r\n0:00:05.000\r\n0:00:03.000\r\n\r\n\r\n4. Spring core lib에 있는 util성 StopWatch 클래스를 이용한다. (Spring 3.0.x)\r\n\r\n예제\r\nimport org.springframework.util.StopWatch;\r\n\r\n...\r\nStopWatch stopWatch = new StopWatch("Stop Watch");\r\nstopWatch.start("initializing");\r\nThread.sleep(2000);\r\nstopWatch.stop();\r\nSystem.out.println("took " + stopWatch.getLastTaskTimeMillis() + " ms");\r\nstopWatch.start("processing");\r\nThread.sleep(5000);\r\nstopWatch.stop();\r\nSystem.out.println("took " + stopWatch.getLastTaskTimeMillis() + " ms");\r\n  \r\nstopWatch.start("finalizing");\r\nThread.sleep(3000);\r\nstopWatch.stop();\r\nSystem.out.println("took " + stopWatch.getLastTaskTimeMillis() + " ms");\r\n  \r\nSystem.out.println(stopWatch.toString());\r\nSystem.out.println();\r\nSystem.out.println(stopWatch.prettyPrint());\r\n\r\n결과 화면\r\ntook 2000 ms\r\ntook 5000 ms\r\ntook 3001 ms\r\nStopWatch ''Stop Watch'': running time (millis) = 10001; [initializing] took 2000 = 20%; [processing] took 5000 = 50%; [finalizing] took 3001 = 30%\r\nStopWatch ''Stop Watch'': running time (millis) = 10001\r\n-----------------------------------------\r\nms     %     Task name\r\n-----------------------------------------\r\n02000  020%  initializing\r\n05000  050%  processing\r\n03001  030%  finalizing\r\n\r\n\r\n얼마나 소요되었는지, 그동안의 관련정보를 계속 모아서, Task 별로 모아 정보를 출력한다.\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://knight76.tistory.com/entry/%ED%8A%B9%EC%A0%95-%EB%A1%9C%EC%A7%81%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C-%EC%84%B1%EB%8A%A5-%ED%99%95%EC%9D%B8-%EC%86%8D%EB%8F%84-%EC%B2%B4%ED%81%AC', 'http://knight76.tistory.com/entry/%ED%8A%B9%EC%A0%95-%EB%A1%9C%EC%A7%81%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C-%EC%84%B1%EB%8A%A5-%ED%99%95%EC%9D%B8-%EC%86%8D%EB%8F%84-%EC%B2%B4%ED%81%AC', '', 3, 0),
(1342, '', '서대영', '', '2014-09-26 19:25:51', 'Algorithm', '알고리즘 애니메이션', '\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://visualgo.net/', 'http://visualgo.net/', '', 7, 0),
(1343, '', '서대영', '', '2014-10-20 16:01:40', 'Unix', 'telnet과 traceroute 명령어가 막혀있을 때 꼼수', '# telnet\r\n : alias 사용\r\n$ alias T=‘telnet’\r\n$ telnet 172.22.206.21\r\n\r\n# traceroute\r\n : sudo 명령어 사용\r\n$ sudo traceroute -T -p 9100 172.22.206.21', '', '', 12, 0),
(1344, '', '서대영', '', '2014-11-01 12:08:06', 'REST', 'API Documentation 자동화 관련', 'Automated Documentation for REST APIs\r\n\r\n\r\n\r\n후보들\r\nhttp://www.mattsilverman.com/2013/02/tools-to-generate-beautiful-api-documentation.html\r\n\r\n\r\n\r\n구현기법\r\nhttp://blog.programmableweb.com/2012/03/28/automated-documentation-for-rest-apis/\r\n\r\n\r\n\r\nSwagger\r\nhttps://developers.helloreverb.com/swagger/\r\n\r\n\r\n\r\nHow to integrate Swagger with Spring MVC\r\nhttp://stackoverflow.com/questions/9188425/spring-rest-api-documentation-using-swagger\r\n\r\n\r\n\r\nhttps://github.com/martypitt/swagger-springmvc\r\n\r\n\r\n\r\nhttp://ufasoli.blogspot.kr/2013/06/spring-mvc-and-swagger-generating.html\r\n\r\n\r\n\r\nhttp://blog.zenika.com/index.php?post/2013/07/11/Documenting-a-REST-API-with-Swagger-and-Spring-MVC', '', '', 2, 0),
(1345, '', '서대영', '', '2014-11-05 13:59:17', 'Java', '비어있는 컬렉션 생성', 'null 대신 비어있는 배열이나 컬렉션을 반환하자.\r\n비어있는 배열이나 컬렉션 대신 null을 반화하는 메소드를 사용할 때는, 어쩔 수 없이 복잡하고 긴 형태(null 여부를 확인하는)로 코드를 작성을 해야한다.\r\n그러나 클라이언트 코드를 작성하는 프로그래머가 반환 값인 null을 처리하는 특별한 코드의 작성을 잊어버릴 수 있기 때문에 그런 식의 코드는 에러를 유발하기 쉽다.\r\n매번 빈 컬렉션을 반환할 필요가 있을 때마다 동일한 불편의 빈 컬렉션을 반환하는 메소드를 만들 수 있다.\r\nCollections.emptySet(), Collections.emptyList(), Collections.emptyMap() 메소드들이 바로 우리가 찾던 것을 제공한다.\r\n\r\nCollections.EMPTY_SET, Collections.EMPTY_LIST, Collections.EMPTY_MAP은 raw type을 리턴하므로 쓰지 말자.\r\nhttp://stackoverflow.com/questions/14870819/what-is-the-difference-between-collections-emptylist-and-collections-empty-lis)\r\n\r\n// 컬렉션의 복사본을 반환하는 올바른 방법\r\npublic List<Cheese> getCheeseList() {\r\n    if (cheeseInStock.isEmpty())\r\n        return Collections.emptyList(); // 항상 똑 같은 List를 반환\r\n    else\r\n        return new ArrayLsit<Cheese>(cheesesInStock);\r\n}\r\n\r\n\r\n\r\n\r\n==========================================================\r\n	public List<String> selectSimOperatorList(String serviceCd) {\r\n		List<String> list = commonDAO.queryForList("SacService.selectSimOperatorList", serviceCd, String.class);\r\n		if (list == null) {\r\n			list = Collections.emptyList();\r\n		}\r\n		return list;\r\n	}\r\n\r\n\r\n==========================================================\r\n	@Override\r\n	public List<StatLike> selectList(StatLike param) {\r\n		List<StatLike> list = this.commonDAO.queryForList("StatLike.selectList", param, StatLike.class);\r\n		return list != null ? list : Collections.<StatLike>emptyList();\r\n	}', NULL, '', 7, 0),
(1346, '', '서대영', '', '2014-11-07 11:33:50', 'XML', 'Terminal Commands', '# 네트워크 정보\r\n\r\n$ ifconfig\r\n\r\n# MAC 주소\r\n\r\n$ networksetup -listallhardwareports\r\n\r\n# 호스트네임\r\n\r\n$ hostname\r\n\r\n# host 파일 편집\r\n\r\n$ sudo vi /etc/hosts', '', '', 3, 0),
(1347, '', '서대영', '', '2014-11-17 11:24:09', 'Library', '[Jackson] How to convert from JSON Array to Java List', 'TypeFactory.defaultInstance().constructCollectionType 을 이용하는 게 관건\r\n\r\n\r\n\r\n\r\n	@Override\r\n	public List<PreferredCategoryRes> fromUserSegmentToPreferredCategoryRes(UserSegment userSegment) {\r\n		String jsonArray = userSegment.getCategoryPrefer();\r\n		List<PreferredCategoryRes> list;\r\n		try {\r\n			list = mapper.readValue(jsonArray, TypeFactory.defaultInstance().constructCollectionType(List.class, PreferredCategoryRes.class));\r\n		} catch (Exception e) {\r\n			return Collections.emptyList();\r\n		}\r\n		return list;\r\n	}', '', '', 5, 0),
(1348, '', '서대영', '', '2014-11-20 11:40:27', 'Security', '비대칭키 암호화 (공개키, 비밀키)', '최은봉 매니저가 설명해줌.\r\n\r\nA와 B가 비대칭키 암호화 방식으로 통신을 하려면,\r\n1) 둘 다 공개키와 비밀키를 생성\r\n2) 개인키는 자기가 가지고 비밀키는 상대에게 줌\r\n3) 송신할 데이터는 자신의 공개키로 암호화하고, 수신된 데이터를 상대방의 개인키로 복호화함\r\n\r\n즉, A는 B의 공개키로 암호화하여 데이터를 전송하고, 수신된 데이터를 A의 개인키로 복호화\r\n즉, B는 A의 공개키로 암호화하여 데이터를 전송하고, 수신된 데이터를 B의 개인키로 복호화', '', '', 0, 0),
(1349, '', '서대영', '', '2014-11-24 11:21:10', 'Mac', 'Mac에서 Java 경로 정리', '/usr/bin/java\r\n/usr/libexec/java_home\r\n/System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands/java_home\r\n/Library/Java/JavaVirtualMachines/jdk1.8.0_141.jdk/Contents/Home\r\n\r\n## SDKMAN 사용시\r\n/Users/daeyoung/.sdkman/candidates/java/current/bin/java', NULL, '', 10, 0),
(1350, '', '서대영', '', '2014-11-25 21:20:21', 'Java', '클래스패스 내의 파일 경로 알아내기', '# 클래스와 다른 패키지 내의 파일 경로 (/src/main/resources/security/keystore/)\r\nURL url = getClass().getResource("/security/keystore/dev.keystore");\r\nString filepath = url.getPath();\r\n\r\n# 클래스와 같은 패키지 내의 파일 경로\r\nURL url = getClass().getResource("test.txt");\r\nString filepath = url.getPath();', '', '', 7, 0),
(1351, '', '서대영', '', '2014-11-25 21:21:47', 'Java', 'byte 배열을 BASE64 스트링으로 출력', '		byte[] publicKey = keyLoader.getPublicKey(alias);\r\n		byte[] privateKey = keyLoader.getPrivateKey(alias);\r\n		\r\n		System.out.println("# publicKey : " + DatatypeConverter.printBase64Binary(publicKey));\r\n		System.out.println("# privateKey : " + DatatypeConverter.printBase64Binary(privateKey));', '', '', 0, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(1379, '', '서대영', '', '2015-04-03 15:41:21', 'REST', 'HttpClient 4.3 에서 커넥션풀과 타임아웃 설정', '<< Client 전체에 설정하기 : 하나의 Clietn를 계속 재사용할 때 >>\r\n	private static HttpClient client;\r\n\r\n	static {\r\n		PoolingHttpClientConnectionManager cm = new PoolingHttpClientConnectionManager();		 \r\n		cm.setMaxTotal(400); // connections in total \r\n		cm.setDefaultMaxPerRoute(400); // concurrent connections per given route\r\n		\r\n		RequestConfig config = RequestConfig.custom()\r\n				.setConnectTimeout(2 * 1000) // connect timeout = 2sec\r\n				.setConnectionRequestTimeout(10 * 1000) // connection request timeout = 10sec\r\n				.setSocketTimeout(10 * 1000) // socket timeout = 10sec\r\n			    .build();\r\n		\r\n		client = HttpClients.custom()\r\n				.setConnectionManager(cm)\r\n				.setDefaultRequestConfig(config)\r\n				.build();\r\n	}\r\n\r\n\r\n<< Request 마다 설정하기 : 매번 Client를 생성해서 사용하고 버릴 때 >>\r\n		HttpClient		client	= HttpClients.createDefault();\r\n		HttpGet			get		= new HttpGet(URL+CspUtil.getParms(paramLt));\r\n		\r\n		RequestConfig config = RequestConfig.custom()\r\n				.setConnectTimeout(2 * 1000) // connect timeout = 2sec\r\n				.setConnectionRequestTimeout(10 * 1000) // connection request timeout = 10sec\r\n				.setSocketTimeout(10 * 1000) // socket timeout = 10sec\r\n			    .build();\r\n		get.setConfig(config);\r\n		// responseHandler 설정\r\n		return client.execute(get, responseHandler);\r\n\r\n\r\n\r\n\r\n[ 타임아웃 ]\r\nhttp://stackoverflow.com/questions/21237391/apache-httpclient-4-3-setting-connection-idle-timeout\r\n\r\n[ 커넥션풀 - 2.3.3 ]\r\n디폴트로 최대 20개 접속 경로 당 2개 밖에 사용 안 하므로 상용 환경에서는 충분히 늘려줄 것\r\nhttp://hc.apache.org/httpcomponents-client-ga/tutorial/html/connmgmt.html', NULL, '', 17, 0),
(1352, '', '서대영', '', '2014-12-03 20:55:00', 'Eclipse', 'Conditional Breakpoint', 'Yes - What you need to setup is a ''Conditional Breakpoint'' - this gives you the ability to stop the program execution and step through the debugger when a certain state of the application is reached.\r\n\r\nSo, let''s say you want to jump into a particular point in the execution when a certain condition is fulfilled (as per the image attached), you can do this as follows:\r\n\r\nOpen your debugger perspective and select the ''BreakPoints'' tab\r\n\r\nAdd a new BreakPoint in the code file - at the appropriate place where you would like to observe the program execution\r\n\r\nThen go back to the ''Breakpoints'' tab, right-click on the newly added entry, and select ''Breakpoint Properties''\r\n\r\nSet the condition upon which it should be activated\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://stackoverflow.com/questions/2278447/break-when-a-variable-is-assigned-some-value', 'http://stackoverflow.com/questions/2278447/break-when-a-variable-is-assigned-some-value', '', 0, 0),
(1353, '', '서대영', '', '2014-12-11 16:48:57', 'Spring', '응용 단에서 Spring Profile 가져오기', 'MVC Annotation을 이용할 수 없는 클래스에스는 EnvironmentAware을 구현하면 된다.\r\n\r\n\r\n-----------------------------------------------------------------------------------------------------------\r\nimport static org.junit.Assert.assertEquals;\r\n\r\nimport java.util.Arrays;\r\n\r\nimport org.junit.Test;\r\nimport org.junit.runner.RunWith;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.core.env.Environment;\r\nimport org.springframework.test.context.ActiveProfiles;\r\nimport org.springframework.test.context.ContextConfiguration;\r\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\r\n\r\n@ActiveProfiles(value = "local")\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration({ "classpath*:/spring-test/context-environment.xml" })\r\npublic class EnvironmentTest {\r\n	\r\n	@Autowired\r\n	private Environment environment;\r\n\r\n	@Test\r\n	public void test() {\r\n		String[] currentProfiles = environment.getActiveProfiles();\r\n		System.out.println(Arrays.toString(currentProfiles));\r\n		assertEquals("local", currentProfiles[0]);\r\n	}\r\n\r\n}\r\n\r\n아래와 같이 할 수 도 있지만 static filed를 instance method로 write하는 것 Critical 위반 사항이다.\r\n===================================================================\r\n\r\n@Component\r\npublic class ActiveProfileProvider {\r\n	\r\n	private static String activeProfile = "";\r\n\r\n	@Autowired\r\n	public ActiveProfileProvider(Environment environment) {\r\n		String[] activeProfiles = environment.getActiveProfiles();\r\n		ActiveProfileProvider.activeProfile = activeProfiles[0];\r\n	}\r\n	\r\n	public static String getActiveProfile() {\r\n		return activeProfile;\r\n	}\r\n\r\n}', NULL, '', 10, 0),
(1354, '', '서대영', '', '2014-12-16 18:17:08', 'Java', '만 나이 구하는 법', 'http://howtodoinjava.com/2014/05/26/java-code-to-calculate-age-from-date-of-birth/\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://stackoverflow.com/questions/1116123/how-do-i-calculate-someones-age-in-java', 'http://stackoverflow.com/questions/1116123/how-do-i-calculate-someones-age-in-java', '', 0, 0),
(1355, '', '서대영', '', '2014-12-28 17:55:59', 'Web', 'favicon.ico', '# 스프링에서 favicon.ico 처리\r\n\r\nresources 루트 디렉토리에 올려놓고,\r\nservlet-context.xml 파일에 아래 추가하면 됨.\r\n<mvc:resources mapping="/favicon.ico" location="/resources/favicon.ico" />\r\n\r\n\r\n\r\n\r\n============================================================\r\n웹 사이트 루트 디렉터리에 favicon.ico라는 이름의 아이콘 파일을 올려두면, 사용자가 즐겨찾기(Favorites)에 추가할 때 아이콘이 자동으로 그 사이트의 로고로 바뀌도록 할 수 있다.\r\n\r\n \r\n\r\n다시 이야기하여 사용자가 어떤 페이지를 즐겨찾기에 추가하면 아이콘을 자동으로 다운로드하여 바꾸어 주는 기능이다.\r\n\r\n \r\n\r\n웹 사이트의 루트 디렉터리에 favicon.ico라는 이름의 아이콘 파일을 올려두기만 하면 됨.\r\n\r\n단, 이 기능은 Internet Explorer 5 이상에서 지원한다.\r\n\r\n \r\n\r\nfavicon.ico 파일을 직접 지정하기\r\n\r\n개인 홈페이지처럼 루트 디렉터리에 직접 favicon.ico 파일을 올려두기 곤란하거나 다른 이름 또는 다른 위치의 아이콘 파일을 지정하고 싶다면 다음과 같이 할 수 있다.\r\n\r\n<LINK REL="SHORTCUT ICON" href="/path/logo.ico">\r\n위와 같은 형식으로 LINK element를 사용할 수 있으며, 웹 페이지 Header(<head>...</head>)에 가볍게 적어줄 수 있다.\r\n\r\n<LINK REL="SHORTCUT ICON" href="./galaxy.ico"> \r\n<LINK REL="SHORTCUT ICON" href="http://www.i-biznet.com/favicon.ico">\r\n아이콘 파일은 비트맵 이미지이면서 고유의 파일 포맷을 가지고 있다. 16x16, 32x32 픽셀 등으로 크기를 선택할 수 있으며, 256 색상 이상을 사용할 수 있지만, 16 색상만 사용하는 것이 기본이다. favicon.ico 파일은 가능한 16x16 픽셀, 16 색상의 아이콘 파일로 만드는 것이 좋다.\r\n\r\n문제는 아이콘 파일을 직접 만드는 것인데, 아이콘 만들기 도구의 선택부터 생각만큼 쉽지 않다. Favicon.com에서는 Java로 구현한 아이콘 만들기 프로그램을 온라인에서 직접 실행할 수 있도록 하여 이러한 고민을 어느 정도 해결해주고 있다.\r\n\r\nFavicon Icon Generator는 16x16 픽셀의 아이콘을 16 색상으로 제작할 수 있는 간단한 도구이다. 색상 선택, 칠하기/지우기, Zoom In/Out 등 꼭 필요한 기능 정도만 제공하고 있지만, 아이콘 파일을 만드는데 크게 부족함이 없다.\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://linuxism.tistory.com/558', 'http://linuxism.tistory.com/558', '', 1, 0),
(1356, '', '서대영', '', '2014-12-29 11:24:06', 'Spring', '암호화 컨버터 구현', '요청, 응답 전문 전체가 한 번에 암복호화 되야 하는 경우 다음과 같이 컨버터를 구현해야 한다.\r\n\r\nwriteInternal 과 read 메소드 오버라이딩.\r\n\r\n\r\n\r\n\r\npackage com.skplanet.storeplatform.external.common.sap;\r\n\r\nimport java.io.IOException;\r\nimport java.lang.reflect.Type;\r\n\r\nimport org.apache.commons.io.IOUtils;\r\nimport org.codehaus.jackson.map.ObjectMapper;\r\nimport org.codehaus.jackson.type.JavaType;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.http.HttpInputMessage;\r\nimport org.springframework.http.HttpOutputMessage;\r\nimport org.springframework.http.converter.HttpMessageNotReadableException;\r\nimport org.springframework.http.converter.HttpMessageNotWritableException;\r\nimport org.springframework.http.converter.json.MappingJacksonHttpMessageConverter;\r\n\r\npublic class LgHttpMessageConverter extends MappingJacksonHttpMessageConverter {\r\n	\r\n	private static final Logger LOGGER = LoggerFactory.getLogger(LgHttpMessageConverter.class);\r\n	\r\n	private ObjectMapper mapper = new ObjectMapper();\r\n	\r\n	private SapCryptoService cryptoService;\r\n	\r\n	private boolean cryptoActive;\r\n	\r\n	public void setCryptoService(SapCryptoService cryptoService) {\r\n		this.cryptoService = cryptoService;\r\n	}\r\n	\r\n	public void setCryptoActive(boolean cryptoActive) {\r\n		this.cryptoActive = cryptoActive;\r\n	}\r\n\r\n	@Override\r\n	protected void writeInternal(Object object, HttpOutputMessage outputMessage) throws IOException, HttpMessageNotWritableException {\r\n		if (cryptoActive) {\r\n			String palinText = mapper.writeValueAsString(object);\r\n			String cyperText = cryptoService.encryptForLg(palinText);\r\n			\r\n			LOGGER.debug("# Plain Request : {}", palinText);\r\n			LOGGER.debug("# Cipher Request : {}", cyperText);\r\n			\r\n			IOUtils.write(cyperText.getBytes(), outputMessage.getBody());\r\n		} else {\r\n			super.writeInternal(object, outputMessage);\r\n		}\r\n	}\r\n	\r\n	@Override\r\n	public Object read(Type type, Class<?> contextClass, HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException {\r\n		if (cryptoActive) {\r\n			String cipherText = IOUtils.toString(inputMessage.getBody());\r\n			String plainText = cryptoService.decrypt(cipherText);\r\n			\r\n			LOGGER.debug("# Cipher Response : {}", cipherText);\r\n			LOGGER.debug("# Plain Response : {}", plainText);\r\n			\r\n			JavaType javaType = getJavaType(type, contextClass);\r\n			return mapper.readValue(plainText, javaType);\r\n		} else {\r\n			return super.read(type, contextClass, inputMessage);\r\n		}\r\n	}\r\n\r\n}\r\n', '', '', 7, 0),
(1357, '', '서대영', '', '2014-12-30 22:22:02', 'JavaScript', '전역 변수를 쓰고 싶은 욕구가 들 때', 'hidden input 에 저장하면 훨씬 좋다', '', '', 0, 0),
(1358, '', '서대영', '', '2015-01-05 18:38:26', 'Spring', '시스템 환경변수 가져오는 static 메소드 구현', '@Component\r\npublic class ActvieProfileProvider {\r\n	\r\n	private static String activeProfile = "";\r\n	\r\n	@Value("#{systemProperties[''spring.profiles.active'']}") \r\n	public void setActiveProfile(String activeProfile) {\r\n		ActvieProfileProvider.activeProfile = activeProfile;\r\n	}\r\n	\r\n	public static String getActiveProfile() {\r\n		return activeProfile;\r\n	}\r\n\r\n}', '', '', 5, 0),
(1359, '', '서대영', '', '2015-01-08 14:10:57', 'Library', 'Joda 라이브러리에서 Duration, Interval, Peroid 의 차이', 'To add to mikej''s answer:\r\n\r\nA Joda''s duration is a "physical" time interval; eg:\r\n\r\n12000 milliseconds <-- this is a duration\r\n\r\nA Joda''s interval is actually a pair of instants (start instant - end instant). An instant is, again, a "physical" concept, a point in the timeline. Eg (just a possible notation):\r\n\r\n(2010/3/3 19:00:00.000 UTC ; 2010/3/3 20:00:00.000 UTC) <-- this is an interval\r\n\r\nAn interval, then, can be converted to a duration, but not the reverse.\r\n\r\nConsider these two intervals:\r\n\r\nI1=(2010/3/3 19:00:00.000 UTC ; 2010/3/3 20:00:00.000 UTC)\r\n\r\nI2=(2010/3/3 21:00:00.000 UTC ; 2010/3/3 22:00:00.000 UTC)\r\n\r\nAs intervals, I1 and I2 are different, because the end-points are different; but if I convert them to durations, I get the same thing: 3600000 milliseconds.\r\n\r\nFinally, a period is a lapse of "civil time", expressed as a number of months, days, hours, etc. It does not -by itself- represent a "physical" interval, hence it can''t be directly converted to a duration (months have variable lengths...).\r\n\r\nThis answers question 3: you can only divide by two a physical time (a duration).\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://stackoverflow.com/questions/2653567/joda-time-whats-the-difference-between-period-interval-and-duration', 'http://stackoverflow.com/questions/2653567/joda-time-whats-the-difference-between-period-interval-and-duration', '', 2, 0),
(1360, '', '서대영', '', '2015-01-15 18:31:58', 'Servlet', 'ServletContextListener 활용', '어플리케이션이 올라가거나 내려갈 때 마다 필요한 작업이 있다면,\r\nServletContextListener 를 이용한다.\r\n\r\n# 리스너 개발\r\n\r\npublic class UapsConnectionInitializer implements ServletContextListener {\r\n	\r\n	public static final Logger LOGGER = LoggerFactory.getLogger(UapsConnectionInitializer.class);\r\n\r\n	@Override\r\n	public void contextInitialized(ServletContextEvent sce) {\r\n		LOGGER.info("##### UAPS Connection Initializer Starts #####");\r\n		ConnectionPoolMgr.getInstance();\r\n		LOGGER.info("##### UAPS Connection Initializer Ends #####");\r\n	}\r\n\r\n	@Override\r\n	public void contextDestroyed(ServletContextEvent sce) {\r\n		\r\n	}\r\n\r\n}\r\n\r\n# web.xml 에 리스너 등록\r\n<listener>\r\n        <listener-class>com.skplanet.storeplatform.external.core.listener.UapsConnectionInitializer</listener-class>\r\n    </listener> ', '', '', 1, 0),
(1361, '', '서대영', '', '2015-01-16 22:58:15', 'Spring', '[MVC] REST Exception Handling', '[ 서버단 ]\r\n	@ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)\r\n	@ExceptionHandler(Exception.class)\r\n	public @ResponseBody Error handle(Exception ex) {\r\n		ex.printStackTrace();\r\n		return new Error(ex.getClass().getName(), ex.getMessage());\r\n	}\r\n\r\n[ 클라이언트단 ]\r\n		$.getJSON(''${urlFind}'', {no: ''${param.no}''})\r\n		.done(function(data) {\r\n			data.dateCreated = moment(data.dateCreated).format("YYYY-MM-DD");\r\n			$.each([''title'', ''dateCreated'', ''content'', ''url''], function(idx, val) {\r\n				$(''#'' + val).text(data[val])\r\n			});\r\n		})\r\n		.fail(function(data) {\r\n			bootbox.alert(data.responseJSON.exception + '' ('' + data.responseJSON.message + '')'');\r\n		});\r\n\r\n\r\n아래 자료가 끝판왕\r\n\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc', 'http://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc', '', 8, 0),
(1362, '', '서대영', '', '2015-01-17 19:12:05', 'Log4j', 'Log4j 의 additivity 옵션', 'Log4j 는 Logger 들 끼리 패키지 명으로 상하관계를 갖는데,\r\n즉 a.b.c 는 a.b.c.d.e 의 상위 Logger 이다.\r\n\r\nadditivity 옵션은 상위 Logger 에도 중복되게 로그을 전달하겠느냐는 옵션인데 디폴트로 true 이다.\r\n즉, 최상위 Logger 를 포함한 모든 상위 Logger 에도 로그을 전달한다.\r\n\r\nadditivity 옵션을 아래와 깉이 flase 로 세팅하면 그 Logger 내에 세팅된 appender 에만 \r\n로깅을 하고 상위 Logger 에는 로그를 전달하지 않는다.\r\n\r\n===========================================================\r\n    <logger name="jdbc.sqlonly" additivity="false">\r\n        <level value="info" />\r\n        <appender-ref ref="console-log4jdbc"/>\r\n    </logger>\r\n\r\n	<root>\r\n		<priority value="info" />\r\n		<appender-ref ref="console" />\r\n	</root>', '', '', 7, 0),
(1363, '', '서대영', '', '2015-01-17 19:23:37', 'MyBatis', 'MyBatis 로깅', '다음과 같이 MyBatis Mapper 의 namespace 를 Log4j에 추가해주면 끝\r\n\r\n============ log4j.xml ============\r\n	<!-- MyBatis -->\r\n	<logger name="Link">\r\n		<level value="debug" />\r\n	</logger>\r\n\r\n============ LinkMapper.xml ============\r\n<mapper namespace="Link">\r\n', '', '', 0, 0),
(1364, '', '서대영', '', '2015-01-20 18:27:49', 'Python', 'Python 학습 사이트', 'Python 스터디 관련하여 제가 알고 있는 자료들을 공유합니다.\r\n\r\nhttp://www.codeskulptor.org\r\nCoursera에서 교육하고 있는 RICE대학 교수가 만든 웹 기반의 Python 인터프리터 입니다. \r\n(관련URL: https://www.coursera.org/course/interactivepython)\r\nDemos를 누르면 학생들이 만든 Final Project들의 코드를 보고 직접 실행도 가능합니다.\r\n\r\nhttp://www.codecademy.com/tracks/python\r\n혼자서 파이썬을 배울 수 있도록 구성된 사이트 입니다.', '', '', 2, 0),
(1365, '', '서대영', '', '2015-02-04 19:37:39', 'Window', 'Cygwin 기본', '# Cygwin 이란\r\nWindow 를 Unix 처럼 사용할 수 있게 해준다.\r\nvi 에디터  등을 사용가능하다.\r\n\r\n\r\n# cygrunsrv 명령어\r\ncygrunsrv -I sshd : sshd 서비스 설치\r\ncygrunsrv -S sshd : sshd 서비스 실행 (= net start sshd)\r\ncygrunsrv -E sshd : sshd 서비스 중지\r\ncygrunsrv -R sshd : sshd 서비스 제거\r\n\r\nCygwin 완전히 지우기\r\nhttp://cygwin.com/faq/faq.html#faq.setup.uninstall-all\r\n', '', '', 5, 0),
(1366, '', '서대영', '', '2015-02-04 19:45:22', 'Window', 'Cygwin으로 윈도우에 SSHD 설치', '1) Cygwin 설치할 때 openssh, spenssl 추가\r\n2) ssh-host-config 로 기본 세팅\r\n  - 주의 사항 :*** Query: Do you want to use a different name? (yes/no) no 로 할 것\r\n3) sshd 서비스 실행\r\n  : net start sshd\r\n4) ssh-user-config 로 유저 세팅\r\n5) 포트 변경 (정책상 22 포트를 막아 놓은 경우에만)\r\n  - Cygwin 실행 시키고 vi /etc/sshd_config\r\n  - #port 부분 주석해지하고 port 200022 등으로 수정\r\n6) 윈도우 관리에서 서비스 재기동\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# 영문 가이드\r\nhttp://www.howtogeek.com/howto/41560/how-to-get-ssh-command-line-access-to-windows-7-using-cygwin/\r\n\r\n# 국문 가이드\r\nhttp://yard.tistory.com/entry/CygWin-SSHD', '', '', 0, 0),
(1367, '', '서대영', '', '2015-02-10 14:47:43', 'Servlet', 'ServletFilter에서 RequestBody 손실없이 가져오기', 'HttpServletRequestWrapper를 확장하여 Request의 inputStream이 consume되지 않고 여러 번 읽을 수 있도록 getInputStream와 getReader 메소드를 오버라이드 한 후,\r\nFilter에서 Raw Request를 래핑하면 된다. (Spring MVC의 Interceptor보다는 ServletFitler에서 래핑해야 여러 Side Effect를 막을 수 있다.)\r\n로깅이나 요청 전문 검증/복호화 등에 유용하게 사용될 수 있다.\r\n\r\nhttp://meetup.toast.com/posts/44\r\n\r\nhttp://stackoverflow.com/questions/4449096/how-to-read-inputstream-multiple-times\r\n\r\nhttp://natch3z.blogspot.kr/2009/01/read-request-body-in-filter.html\r\n\r\nhttp://lng1982.tistory.com/194\r\n\r\n=======================================================================================================================================\r\npackage seo.dale.example.servlet;\r\n\r\nimport org.apache.poi.util.IOUtils;\r\n\r\nimport javax.servlet.ReadListener;\r\nimport javax.servlet.ServletInputStream;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletRequestWrapper;\r\nimport java.io.ByteArrayInputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\n\r\npublic class RereadableRequestWrapper extends HttpServletRequestWrapper {\r\n\r\n	private byte[] rawData;\r\n\r\n	public RereadableRequestWrapper(HttpServletRequest request) {\r\n		super(request);\r\n		\r\n		// Convert InputStream data to byte array and store it to this wrapper instance\r\n		try (InputStream inputStream = request.getInputStream()) {\r\n			rawData = IOUtils.toByteArray(inputStream);\r\n		} catch (IOException e) {\r\n			throw new RuntimeException("Failed to get the input stream from the request.", e);\r\n		}\r\n	}\r\n\r\n	@Override\r\n	public ServletInputStream getInputStream() throws IOException {\r\n		final ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(rawData);\r\n		ServletInputStream serverInputStream = new ServletInputStream() {\r\n			@Override\r\n			public int read() throws IOException {\r\n				return byteArrayInputStream.read();\r\n			}\r\n		};\r\n		return serverInputStream;\r\n	}\r\n\r\n}\r\n\r\nhttp://stackoverflow.com/questions/10210645/http-servlet-request-lose-params-from-post-body-after-read-it-once\r\n=======================================================================================================================================\r\npublic class MultiReadHttpServletRequest extends HttpServletRequestWrapper {\r\n  private ByteArrayOutputStream cachedBytes;\r\n\r\n  public MultiReadHttpServletRequest(HttpServletRequest request) {\r\n    super(request);\r\n  }\r\n\r\n  @Override\r\n  public ServletInputStream getInputStream() throws IOException {\r\n    if (cachedBytes == null)\r\n      cacheInputStream();\r\n\r\n      return new CachedServletInputStream();\r\n  }\r\n\r\n  @Override\r\n  public BufferedReader getReader() throws IOException{\r\n    return new BufferedReader(new InputStreamReader(getInputStream()));\r\n  }\r\n\r\n  private void cacheInputStream() throws IOException {\r\n    /* Cache the inputstream in order to read it multiple times. For\r\n     * convenience, I use apache.commons IOUtils\r\n     */\r\n    cachedBytes = new ByteArrayOutputStream();\r\n    IOUtils.copy(super.getInputStream(), cachedBytes);\r\n  }\r\n\r\n  /* An inputstream which reads the cached request body */\r\n  public class CachedServletInputStream extends ServletInputStream {\r\n    private ByteArrayInputStream input;\r\n\r\n    public CachedServletInputStream() {\r\n      /* create a new input stream from the cached request body */\r\n      input = new ByteArrayInputStream(cachedBytes.toByteArray());\r\n    }\r\n\r\n    @Override\r\n    public int read() throws IOException {\r\n      return input.read();\r\n    }\r\n  }\r\n}', NULL, '', 19, 0),
(1368, '', '서대영', '', '2015-02-10 19:19:50', 'Spring', 'Interceptor 만들 때', 'HandlerInterceptor를 구현하는 것 보다,\r\nHandlerInterceptorAdapter를 확장하면 필요한 메서드만 재정의 가능해서 편한다.', '', '', 6, 0),
(1369, '', '서대영', '', '2015-02-14 18:47:53', 'Java', 'Java I/O Formatting', 'The format method formats multiple arguments based on a format string. The format string consists of static text embedded with format specifiers; except for the format specifiers, the format string is output unchanged.\r\n\r\nFormat strings support many features. In this tutorial, we''ll just cover some basics. For a complete description, see format string syntax in the API specification.\r\n\r\nThe Root2 example formats two values with a single format invocation:\r\n\r\npublic class Root2 {\r\n    public static void main(String[] args) {\r\n        int i = 2;\r\n        double r = Math.sqrt(i);\r\n        \r\n        System.out.format("The square root of %d is %f.%n", i, r);\r\n    }\r\n}\r\nHere is the output:\r\n\r\nThe square root of 2 is 1.414214.\r\nLike the three used in this example, all format specifiers begin with a % and end with a 1- or 2-character conversion that specifies the kind of formatted output being generated. The three conversions used here are:\r\n\r\nd formats an integer value as a decimal value.\r\nf formats a floating point value as a decimal value.\r\nn outputs a platform-specific line terminator.\r\nHere are some other conversions:\r\n\r\nx formats an integer as a hexadecimal value.\r\ns formats any value as a string.\r\ntB formats an integer as a locale-specific month name.\r\n\r\n\r\nThere are many other conversions.\r\n\r\nNote: \r\nExcept for %% and %n, all format specifiers must match an argument. If they don''t, an exception is thrown.\r\n\r\nIn the Java programming language, the \\n escape always generates the linefeed character (\\u000A). Don''t use \\n unless you specifically want a linefeed character. To get the correct line separator for the local platform, use %n.\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://docs.oracle.com/javase/tutorial/essential/io/formatting.html', 'http://docs.oracle.com/javase/tutorial/essential/io/formatting.html', '', 2, 0),
(1370, '', '서대영', '', '2015-02-22 20:44:17', 'Git', '이클립스 Git 세팅 방법', '#나중에 다시 한 번 직접 해보면서 정리 할 것\r\n\r\n* Git 플러그인은 내장되어 있음\r\n\r\n* Git에 올리고 싶은 소스 프로젝트 선택 후, Team > Share Project > Git 선택\r\n* 현재 디렉토리 기준으로 Local Repository 생성\r\n* Team > Synchronize Workspace 하여 .classpath, .project 같은 파일 ignore 시킴\r\n* Team > Commit 하여 Local Repository에 반영\r\n\r\n* Git Repositories View 에서...\r\n* 방금 추가한 Local Repository를 열고 Remotes 폴더에서 Create Remotes 선택\r\n* Remote name 을 origin 으로 두고, Configure push 선택\r\n* change 버튼 누르고 github의 github의 Repository 주소를 입력\r\n\r\n* 다시 프로젝트로 가서 Team > Push to upstream\r\n* Remotes > origin > 초록색 왼쪽 화살표에서 Configure Fetch\r\n* Add.  Source 에 master[branch] 로 입력\r\n* 다시 프로젝트로 가서 Team > Fetch from upstrem \r\n\r\n# 최종 확인 사항\r\nGit Repositories View 에서... 해당 로컬 리파지토리 하위에\r\n1) Local > master\r\n2) Remote Tracking > orgin/master\r\n3) References > HEAD\r\n4) Remotes > orgin\r\n5) Team > Synchronize workspace 했을 때 No change\r\n', '', '', 13, 0),
(1371, '', '서대영', '', '2015-02-24 14:13:32', 'Spring', '쓰레드 로컬 단위 테스트 방법', 'http://milk713.cafe24.com/study/index.php?mode=view&no=1316\r\n보다 어려운 방법이나 나중에 쓸 일이 있을까봐 기록\r\n\r\n[ 유닛테스트 ]\r\n	@Before\r\n	public void before() {\r\n\r\n		SacRequestHeader sacRequestHeader = new SacRequestHeader();\r\n		TenantHeader tenant = new TenantHeader();\r\n		tenant.setTenantId("S01");\r\n		tenant.setSystemId("S001");\r\n		sacRequestHeader.setTenantHeader(tenant);\r\n\r\n		MockRequestAttributeInitializer.init(SacRequestHeader.class.getName(), sacRequestHeader);\r\n\r\n	}\r\n\r\n\r\n[ 유틸리티 ]\r\npublic class MockRequestAttributeInitializer {\r\n\r\n	public final static void init(String key, Object object) {\r\n		RequestContextListener listener = new RequestContextListener();\r\n		MockServletContext context = new MockServletContext();\r\n		MockHttpServletRequest request = new MockHttpServletRequest(context);\r\n		listener.requestInitialized(new ServletRequestEvent(context, request));\r\n		request.setAttribute(key, object);\r\n	}\r\n\r\n}', '', '', 9, 0),
(1372, '', '서대영', '', '2015-02-26 17:32:23', 'Spring', 'ReflectionTestUtils를 이용하여 @Autowired, @Value 필드 세팅', '# 클래스\r\n\r\n@Value("#{systemProperties[''spring.profiles.active'']}")\r\n	private String activeProfile;\r\n\r\n\r\n# 단위 테스트\r\n\r\nReflectionTestUtils.setField(provider, "activeProfile", "dev");\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttp://iamdev.tistory.com/6', NULL, '', 19, 0),
(1374, '', '서대영', '', '2015-03-16 15:54:00', 'Spring', 'ApplicationContextProvider', '스프링 빈에 등록안 하고 new로 생성한 클래스에서도 스프링 빈을 얻어 올 수 있다.\r\n일반적인 상황에서는 비추천이며, 특수한 상황에서만 사용한다.\r\n\r\n# 구현\r\npublic class ApplicationContextProvider implements ApplicationContextAware {\r\n    private static ApplicationContext context;\r\n \r\n    public static ApplicationContext getApplicationContext() {\r\n        return context;\r\n    }\r\n \r\n    @Override\r\n    public void setApplicationContext(ApplicationContext ctx) {\r\n        context = ctx;\r\n    }\r\n}\r\n\r\n# 등록\r\n<bean id="applicationContextProvder" class="org.myApp.ApplicationContextProvider"/>\r\n\r\n# 사용\r\nMyBean c = ApplicationContextProvider.getApplicationContext.getBean("BeanId", MyBean.class);\r\n\r\n\r\n\r\n============================== URL ==============================\r\nhttps://crazygui.wordpress.com/2011/09/28/get-to-spring-applicationcontext-from-everywhere-the-clean-way/', 'https://crazygui.wordpress.com/2011/09/28/get-to-spring-applicationcontext-from-everywhere-the-clean-way/', '', 4, 0),
(1375, '', '서대영', '', '2015-03-17 10:46:51', 'Spring', 'BeanFactoryPostProcessor 인터페이스', '[ 라이프 사이클 ]\r\nBeanFactoryPostProcessor 인터페이스를 구현한 클래스를 스프링 빈으로 등록하면,void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) 매소드가 xm에 있는 모든 스프링 빈이 등록 된 후에 실행된다.\r\n\r\n[ 용도 ]\r\nbeanFactory의 registerSingleton(String beanName, Object singletonObject); 메서드를 이용해서 동적으로 스프링 컨테이니어에 빈을 등록해줄 수 있다.\r\n\r\n[주의 사항 ]\r\nBeanFactoryPostProcessor 가 수행되는 시점은 @Autowired 를 처리하기 위한 AutowiredAnnotationBeanPostProcessor 가 등록되기 전이다.\r\n\r\n따라서 어노테이션을 사용해서 등록한 빈을 참조하고 있는 빈은 사용이 곤란한다.', '', '', 2, 0),
(1376, '', '서대영', '', '2015-03-18 16:50:08', 'Tomcat', '/bin/catalina.sh', 'tomcat 서버 인스턴스 구동시 반드시 실행되는 기본 쉘파일이다.\r\n\r\n로깅 디렉토리 설정할 때 자주 사용되는 -Dcatalina.base 나 -Dcatalina.home 또 여기에 등록되어 있다.', '', '', 2, 0),
(1378, '', '서대영', '', '2015-03-26 22:32:51', 'MySQL', 'MySQL UTF-8 세팅', 'show variables like ''c%'';\r\n\r\nset character_set_client = utf8;\r\nset character_set_connection = utf8;\r\nset character_set_database = utf8;\r\nset character_set_filesystem = utf8;\r\nset character_set_results = utf8;\r\nset character_set_server = utf8;\r\nset collation_connection = utf8_general_ci;\r\nset collation_server = utf8_general_ci;\r\n\r\n\r\n\r\n\r\nhttp://ysy2080.digimoon.net/uribury/285\r\nhttp://mhigm.tistory.com/', '', '', 1, 0),
(1380, '', '서대영', '', '2015-04-06 11:17:26', 'Unix', '쓰레드 덤프에서 소켓 연결 상태 확인 방법', '$ grep socketRead dump.txt | wc -l\r\n현재 소켓 연결 중인 쓰레드 개수\r\n\r\n$ grep Unsafe.park dump.txt | wc -l\r\n소켓 연결을 위해 대기 상태\r\n\r\n\r\n위 값보다 아래 값이 너무 많으면 쓰레드 개수에 비해 소켓 커넥션풀의 개수가 모자른 것이므로 커넥션 개수를 늘려주도록 해야한다.', '', '', 0, 0),
(1381, 'dale.seo', '', '', '2015-04-07 12:52:10', '', 'The Linux Kernel Archives', '리눅스 커널 다운로드\r\n\r\nhttps://www.kernel.org/', NULL, '', 0, 0),
(1382, 'dale.seo', '', '', '2015-04-07 22:01:02', '', '테이블 데이터 리로드', '$(''#tableLink'').DataTable().ajax.url(url).load();', NULL, '', 3, 0),
(1383, 'dale.seo', '', '', '2015-04-08 11:54:00', '', '핸들러 파라미터로 쿼리 스트링 바인딩 하는 방법', '1) 단순 값을 바인딩할 때는 @RequestParam 사용\r\n\r\n2) 도메인 객체를 바인딩할 떄는 @ModelAttribute 사용\r\n - 어노테이션 없어도 작동\r\n - request의 attribute에도 등록됨\r\n\r\n[참고] Binding and Validation of Handler Parameters in Spring MVC Controllers\r\nhttp://www.jpalace.org/document/92/binding-and-validation-of-handler-parameters-in-spring-mvc-controllers', NULL, '', 1, 0),
(1384, 'dale.seo', '', '', '2015-04-09 15:08:28', '', 'Mapper에서 관계 구현', '<association> 과 <collection> 태그를 이용하여 1:N 또는 N:1 관계 구현이 가능하다.\r\n\r\n\r\n------------------------------------------------------------------------------------------------------------------------------\r\n	<resultMap id="ServerMap" type="Server" autoMapping="true">\r\n		<id property="serverNo" column="server_no"/>\r\n		<association property="machine" resultMap="machineMap"/>\r\n		<association property="url" resultMap="UrlMap"/>\r\n    </resultMap>\r\n    \r\n    <resultMap id="UrlMap" type="Url" autoMapping="true">\r\n    	<id property="urlNo" column="url_no"/>\r\n    </resultMap>\r\n\r\n	<resultMap id="machineMap" type="Machine" autoMapping="true">\r\n    	<id property="hostname" column="hostname"/>\r\n    </resultMap>\r\n    \r\n    <resultMap id="UrlMap" type="Url" autoMapping="true">\r\n    	<id property="urlNo" column="url_no"/>\r\n    </resultMap>\r\n------------------------------------------------------------------------------------------------------------------------------\r\n\r\n\r\nhttp://lancerme.tistory.com/6', NULL, '', 8, 0),
(1385, 'dale.seo', '', '', '2015-04-13 17:03:50', '', '줄번호 그리기', 'meta.row 사용\r\n\r\n==========================================================\r\n		$(''#tableResult'').DataTable({\r\n			ajax: {\r\n				url: ''${pageContext.request.contextPath}/infra/machines'',\r\n				dataSrc: ''''\r\n			},\r\n			columns: [\r\n				{\r\n					render: function(data, type, row, meta) {\r\n						return meta.row + 1;\r\n					}\r\n				},\r\n				{data: ''hostname''},\r\n				{data: ''ipAddress''},\r\n				{data: ''environment''},\r\n				{data: ''name''}\r\n			],\r\n		    paging: false\r\n		});', NULL, '', 6, 0),
(1386, 'dale.seo', '', '', '2015-04-13 22:28:59', '', 'a 태그', '<a href="" target="">anchor</a>\r\n\r\n# target\r\n * _self : 현재 화면을 replace (Default)\r\n * _blank : 새창에서 열기', NULL, '', 2, 0),
(1387, 'dale.seo', '', '', '2015-04-14 23:17:30', '', 'Box Model', 'Box Model : content area + padding area + border area + margin area\r\nwidth 속성은 content area에만 해당하므로 레이아웃 맞출 때,\r\n100만큼의 넓이를 원하면 100에서 padding과 border를 뺀 만큼을 width로 세팅해줘야 한다.\r\n\r\n\r\n* Each tag''s content fits in an invisible box.\r\n* Each block-level tag''s box takes up an entire line.\r\n* Padding can be used to adjust spacing within a container.\r\n* Margin can be used to adjust spacing between containers.', NULL, '', 10, 0),
(1388, 'dale.seo', '', '', '2015-04-14 23:29:24', '', '브라우져의 디폴트 스타일시트 끄기', 'html, body, h1, h2, h3, h4, ul, ol, li, p, a {\r\n  padding: 0;\r\n  border: 0;\r\n  margin: 0;\r\n  font: inherit;\r\n  font-size: 100%;\r\n}', NULL, '', 5, 0),
(1389, 'dale.seo', '', '', '2015-04-14 23:40:07', '', '자주쓰는 스타일', '# 브라우져 모서리와 내용물간에 거리 두기\r\n      body {\r\n      	padding: 20px;\r\n      }\r\n\r\n# 제목에 밑줄 달기\r\n      h3 {\r\n        color: #333333; \r\n        margin: 20px 0 5px 0;\r\n        border-bottom: 1px #999999 solid;\r\n        padding-bottom: 2px;\r\n      }\r\n\r\n# 목록 들여쓰기\r\n      ul {\r\n        padding-left: 30px;\r\n      }\r\n      li {\r\n      	margin-bottom: 5px;\r\n      }', NULL, '', 5, 0),
(1390, 'dale.seo', '', '', '2015-04-15 23:37:50', '', 'Writing class and type selectors in the right order', 'Generally speaking, first declare the broadest rules with type selectors,\r\nand then get more specific with class selectors.\r\n\r\nul {\r\n  padding: 0 0 0 50px;\r\n}\r\n\r\n.nav {\r\n  padding-left: 0;\r\n}', NULL, '', 3, 0),
(1391, 'dale.seo', '', '', '2015-04-16 22:55:26', '', 'Centering Content  중앙 정렬', '# block-level tag\r\n : auto here means take as much space as you can\r\n\r\n----------------------------------------------------\r\n.main-content {\r\n  width: 500px;\r\n  padding: 20px;\r\n  border: 1px solid #dddddd;\r\n  margin: 30px auto 0 auto;\r\n}\r\n----------------------------------------------------\r\n\r\n# 안에 문자열 있는 block-level\r\n : use text-align\r\n----------------------------------------------------\r\nh1 {\r\n color: #ffffff;\r\n margin: 0 0 15px 0;\r\n text-align: center;\r\n}\r\n----------------------------------------------------.\r\n\r\n#  이미지\r\n\r\n----------------------------------------------------.\r\nimg {\r\n  display: block;\r\n  margin: 0 auto;\r\n}\r\n----------------------------------------------------.\r\n', NULL, '', 8, 0),
(1392, 'dale.seo', '', '', '2015-04-18 09:21:42', '', 'img 태그에 alt 속성을 반드시 사용할 것', '<img src="images/cake.png" alt="Magic Cake Photo">\r\n\r\nAdding alt attributes to content images\r\nThe alt attribute should contain text that describes the image or the purpose of the image.\r\ncake.png\r\nmagic-cake.html\r\nNot everyone who views your page\r\nwill be able to view the images.\r\nWhy?? Accessibility\r\nScreen readers rely on alt tags to\r\ndescribe images to visitors that\r\nmight not be able to view images.', NULL, '', 2, 0),
(1393, 'dale.seo', '', '', '2015-04-20 09:08:55', '', '모두 대문자로 바꾸기', '# 모두 대문자로 바꾸기\r\n\r\nh1 {\r\n  text-transform: uppercase;\r\n}\r\n\r\n# 모두 소문자로 바꾸기\r\n\r\nh2 {\r\n  text-transform: lowercase;\r\n}', NULL, '', 2, 0),
(1394, 'dale.seo', '', '', '2015-04-20 09:17:29', '', '배경', 'body {\r\nbackground-color: #5f5f5f;\r\nbackground-image: url(images/gobbler.png);\r\nbackground-position: top left;\r\nbackground-repeat:repeat\r\n}\r\n\r\n# 한줄에 표현\r\nbody {\r\n background: #5f5f5f url(images/gobbler.png) top left repeat;\r\n}', NULL, '', 4, 0),
(1395, 'dale.seo', '', '', '2015-04-22 10:34:22', '', '자바 업데이트 후 크롬에서 제니퍼 안 돌아갈 때', '1) chrome://flags 에 접속\r\n2) NPAPI 사용 Mac, Windows 옵션을 "사용"으로 변경\r\n3) Chrome 다시 시작\r\n\r\n\r\nNPAPI (Netscape Plugin Api) : 사파리, 오페라, 크롬, 파이어폭스 등\r\n 주요 PC용 브라우저에서 플러그인 프로그램 기능을 설치 실행할 수 있게 해주는 기술\r\n\r\n\r\n', NULL, '', 6, 0),
(1396, 'dale.seo', '', '', '2015-04-23 22:57:25', '', 'Datalist', '자동완성 입력\r\n\r\n<input type="text" list="browsers">\r\n<datalist id="browsers">\r\n  <option value="Chrome">\r\n  <option value="Firefox">\r\n  <option value="Internet Explorer">\r\n  <option value="Opera">\r\n  <option value="Safari">\r\n</datalist>', NULL, '', 3, 0),
(1397, 'dale.seo', '', '', '2015-04-23 23:37:04', '', 'Box Sizing', 'width와 height 속성에 범위를 정해줌\r\npadding과 border까지 쳐서 width, weight를 결정하고 싶을 때 유용\r\n\r\n\r\ncontent-box : content (default)\r\npadding-box : content + padding\r\nborder-box : content + padding + border\r\n\r\n\r\n--------------------------------------------------------------\r\n.box {\r\n box-sizing: padding-box; \r\n border: 2px solid black;\r\n margin: 20px;\r\n padding: 10px;\r\n width: 300px;\r\n}\r\n\r\n\r\n=================================================\r\n요즘 많이 사용되는 box-sizing은 border-box이며 다음과 같이 모든 엘리먼트에 적용가능함\r\n=================================================\r\n* {\r\n  -webkit-box-sizing: border-box;\r\n     -moz-box-sizing: border-box;\r\n          box-sizing: border-box;\r\n}', NULL, '', 7, 0),
(1399, 'dale.seo', '', '', '2015-04-28 10:16:03', '', 'float 를 clear 하는 방법', '# Clearfix\r\n : 불필요한 div 를 사용하지 않고 css만 조정하기 때문에 가장 권장되는 방법\r\n\r\n----------------------------------------------------- HTML -----------------------------------------------------\r\n    <section class="content home group">\r\n      <aside>\r\n        <p>Did you know that Sven''s Snowshoe Emporium produces the highest quality snowshoes in North America? <a href="#">Find out more</a>.</p>\r\n      </aside>\r\n      <article>\r\n        <h3>New Fall Styles</h3>\r\n        <p>Be the first at your resort to sport the hot new tennis-themed snow kicks, now available in the <a href="#">store</a>.</p>\r\n      </article>\r\n    </section>\r\n\r\n----------------------------------------------------- CSS -----------------------------------------------------\r\naside {\r\n  float: right;\r\n  width: 120px;\r\n}\r\narticle {\r\n  float: left;\r\n  width: 120px;\r\n}\r\n\r\n.group:before,\r\n.group:after {\r\n  content: "";\r\n  display: table;\r\n}\r\n.group:after {\r\n  clear: both;\r\n}\r\n.group {\r\n  zoom: 1;\r\n}', NULL, '', 2, 0),
(1400, 'dale.seo', '', '', '2015-04-28 15:19:08', '', 'XML marshal / unmarshal', 'http://docs.oracle.com/javase/6/docs/api/javax/xml/bind/Unmarshaller.html\r\n\r\npackage seo.dale.example.javax.xml.bind;\r\n\r\nimport java.io.InputStream;\r\n\r\nimport javax.xml.bind.JAXBContext;\r\nimport javax.xml.bind.JAXBException;\r\nimport javax.xml.bind.Unmarshaller;\r\n\r\nimport org.junit.Test;\r\n\r\npublic class UnmarshallerTest {\r\n\r\n	@Test\r\n	public void test() throws JAXBException {\r\n		InputStream inputStream = getClass().getResourceAsStream("config.xml");\r\n		System.out.println(inputStream);\r\n		\r\n		JAXBContext context = JAXBContext.newInstance(Config.class);\r\n		Unmarshaller unmarshaller = context.createUnmarshaller(); \r\n		Config bean = (Config) unmarshaller.unmarshal(inputStream);\r\n		System.out.println(bean);\r\n	}\r\n\r\n}\r\n', NULL, '', 12, 0),
(1401, 'dale.seo', '', '', '2015-04-28 23:48:44', '', 'Unicode and Character Sets', 'UTF-8 에 대해서 잘 정리되어 있음.\r\nUTF-8은 영어는 8bit, 다른 언어는 그 이상 bit를 사용하기 때문에 효율적이어서 인터넷에 많이 쓰임\r\n\r\n\r\nhttp://www.joelonsoftware.com/articles/Unicode.html', NULL, '', 2, 0),
(1402, 'dale.seo', '', '', '2015-04-29 11:08:35', '', 'FindBugs Bug Description', 'http://findbugs.sourceforge.net/bugDescriptions.html', NULL, '', 2, 0),
(1403, 'dale.seo', '', '', '2015-04-29 11:19:02', '', 'Findbugs vs PMD vs Checkstyle', '[1] Findbugs (http://findbugs.sourceforge.net)\r\n      Is a static code analysis tool that analyses Java byte code and detects a wide range of problems. \r\n\r\n[2] Checkstyle (http://checkstyle.sourceforge.net/index.html)\r\n      Is a development tool to help programmers write Java code that adheres to a coding standard. \r\n\r\n[3] PMD (http://pmd.sourceforge.net/pmd-5.0.0) \r\n     Scans source code and looks for potential problems possible bugs, unused and sub-optimal \r\n     code and over-complicated expressions.\r\n\r\n[ Findbugs vs PMD vs Checkstyle ]\r\nhttp://www.sw-engineering-candies.com/blog-1/comparison-of-findbugs-pmd-and-checkstyle', NULL, '', 4, 0),
(1404, 'dale.seo', '', '', '2015-04-29 11:52:28', '', 'Effective Management of Static Analysis Vulnerabilities and Defects', 'http://www.coverity.com/library/pdf/effective-management-of-static-analysis-vulnerabilities-and-defects.pdf', NULL, '', 2, 0),
(1405, 'dale.seo', '', '', '2015-04-29 13:33:21', '', 'ObjectUtils', '다음과 같이 ObjectUtils.defaultIfNull 매서드를 사용하여 깔끔하게 디폴트 값을 쓸 수 있음\r\n	\r\n	private static final IpValidationConfiguration DEFAULT_CONFIGURATION;\r\n	private IpValidationConfiguration configuration;\r\n\r\n	public IpValidationConfiguration loadConfiguration() {\r\n		return ObjectUtils.defaultIfNull(configuration, DEFAULT_CONFIGURATION);\r\n	}', NULL, '', 7, 0),
(1406, 'dale.seo', '', '', '2015-04-29 13:34:31', '', 'IOUtils', 'Stream을 깔끔하게 처리할 수 있게 도와줌\r\n\r\n\r\npublic class IOUtilsTest {\r\n\r\n    @Test\r\n    public void ouputStreamSplit() throws IOException {\r\n        String exampleText = "A string to be streamed";\r\n        InputStream is = IOUtils.toInputStream(exampleText);\r\n\r\n        File tempFile = File.createTempFile("example", "txt");\r\n        tempFile.deleteOnExit();\r\n\r\n        OutputStream os1 = new FileOutputStream(tempFile);\r\n        OutputStream os2 = new ByteArrayOutputStream();\r\n\r\n        OutputStream tee = new TeeOutputStream(os1, os2);\r\n        IOUtils.copy(is, tee);\r\n\r\n        InputStream fis = new FileInputStream(tempFile);\r\n        String content1 = IOUtils.toString(fis);\r\n        String content2 = os2.toString();\r\n\r\n        assertEquals(exampleText, content1);\r\n        assertEquals(exampleText, content2);\r\n    }\r\n\r\n    @Test\r\n    public void toInputStreamAndToString() throws IOException {\r\n        String exampleText = "An example String";\r\n        InputStream is = IOUtils.toInputStream(exampleText);\r\n        String consumedString = IOUtils.toString(is);\r\n\r\n        assertEquals(-1, is.read());\r\n        assertEquals(exampleText, consumedString);\r\n        assertNotSame(exampleText, consumedString);\r\n    }\r\n\r\n    @Test\r\n    public void copy() throws IOException {\r\n        String exampleText = "Text to be streamed";\r\n        InputStream is = new ByteArrayInputStream(exampleText.getBytes());\r\n        OutputStream os = new ByteArrayOutputStream();\r\n\r\n        IOUtils.copy(is, os);\r\n\r\n        String streamContents = os.toString();\r\n        assertEquals(exampleText, streamContents);\r\n        assertNotSame(exampleText, streamContents);\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n===========================================================================================\r\n\r\n다음과 같이 IOUtils.closeQuietly 매서드를 사용해서 깔끔하게 자원을 close 할 수 있음\r\n\r\n	public void initialize() {\r\n		String activeProfile = ArrayUtils.isEmpty(environment.getActiveProfiles()) ? "local" : environment.getActiveProfiles()[0];\r\n		LOGGER.debug("# Active Profile = {}", activeProfile);\r\n\r\n		String filename = "ip-validation-configuration-" + activeProfile + ".xml";\r\n		InputStream inputStream = getClass().getResourceAsStream("/security/ip/" + filename);\r\n\r\n		try {\r\n			JAXBContext context = JAXBContext.newInstance(IpValidationConfiguration.class);\r\n			Unmarshaller unmarshaller = context.createUnmarshaller();\r\n			configuration = (IpValidationConfiguration) unmarshaller.unmarshal(inputStream);\r\n		} catch (JAXBException e) {\r\n			LOGGER.error("falirue intializing when reading ip validation configuration xml file", e);\r\n		} finally {\r\n			IOUtils.closeQuietly(inputStream);\r\n		}\r\n	}', NULL, '', 13, 0),
(1407, 'dale.seo', '', '', '2015-04-29 17:01:17', '', 'curl 명령어', '-i : include (응답 헤더 포함)\r\n-v : verbose\r\n-d, --data DATA     HTTP POST data (H)\r\n-s, --silent        Silent mode. Don''t output anything (Progress Bar가 안 나옴)\r\n\r\n====================================================================================================================================\r\n$ curl -v -X GET -H "Accept: application/json;charset=UTF-8;" -H "Content-Type:ication/json;charset=UTF-8;" -H "Cache-Control: no-cache" -H "Postman-Token: 70ebf764-c408-af7f-5880-374889490293" http://qa-ec-store.sungsu.skplanet.com/inbound/sample/dummy?no=5\r\n* Hostname was NOT found in DNS cache\r\n*   Trying 172.21.236.61...\r\n* Connected to qa-ec-store.sungsu.skplanet.com (172.21.236.61) port 80 (#0)\r\n> GET /inbound/sample/dummy?no=5 HTTP/1.1\r\n> User-Agent: curl/7.37.1\r\n> Host: qa-ec-store.sungsu.skplanet.com\r\n> Accept: application/json;charset=UTF-8;\r\n> Content-Type: application/json;charset=UTF-8;\r\n> Cache-Control: no-cache\r\n> Postman-Token: 70ebf764-c408-af7f-5880-374889490293\r\n>\r\n< HTTP/1.1 200 OK\r\n< Date: Wed, 29 Apr 2015 06:19:24 GMT\r\n* Server Apache/2.2.24 (Unix) mod_ssl/2.2.24 OpenSSL/1.0.0-fips mod_jk/1.2.37 is not blacklisted\r\n< Server: Apache/2.2.24 (Unix) mod_ssl/2.2.24 OpenSSL/1.0.0-fips mod_jk/1.2.37\r\n< x-sac-guid: 1430288364439-18063b98-ad25-4b91-9a12-97ffe69dcb35\r\n< x-sac-result-code: FAIL\r\n< Connection: close\r\n< Transfer-Encoding: chunked\r\n< Content-Type: application/json;charset=UTF-8\r\n<\r\n{\r\n "code" : "EC_CMN_0001",\r\n "message" : "서버 접근이 차단되었습니다. (미등록 IP : 10.202.33.28)",\r\n "hostName" : "qasp-ec",\r\n "instanceName" : "sp-ecSvr1"\r\n* Closing connection 0\r\n}', NULL, '', 20, 0),
(1408, 'dale.seo', '', '', '2015-04-29 21:13:19', '', 'overflow 속성', '\r\n\r\n# overflow: 그 박스 내에서 내용이 content area (width x height) 를 초과할 때 어떻게 처리할지\r\n * visible : 스크롤바 없이 다 보이게\r\n * auto : 초과할 때만 스크롤바\r\n * hidden : 초과하는 부분은 감춤\r\n * scroll : 초과하든 말든 무조건 스크롤바', NULL, '', 2, 0),
(1409, 'dale.seo', '', '', '2015-04-29 21:16:40', '', 'position 속성', '\r\n\r\n# position : 박스의 놓는 방식을 결정\r\ntop, bottom, right, left 속성과 같이 써서 위치를 결정한다. (static에서는 의미 없음)\r\n * static (default)\r\n * relative : 부모 태그와 상대적인 위치\r\n * absolute : window 기준. 스크롤바가 움직이면 따라 움직임. 부모 태그를 relative로 놓으면 그 상자를 기준으로 위치시킴\r\n * fixed : window 기준. 스크롤바가 움직여도 그 자리에 고정', NULL, '', 1, 0),
(1410, 'dale.seo', '', '', '2015-04-29 21:49:59', '', 'Collapsing margins', 'margin 속성만 세팅해주면 인접하는 박스끼리는 겹쳐서 둘 중에 큰 margin 값만 적용이 된다.\r\n\r\n\r\n\r\n\r\n[ 예외 ]\r\nCollapsing margins will not occur when one or more\r\nblock element has:\r\nPadding or border\r\nRelative or absolute positioning\r\nA foat left or right', NULL, '', 1, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(1411, 'dale.seo', '', '', '2015-04-30 10:27:53', '', '타임리프 소개', '공식 매뉴얼\r\nhttp://www.thymeleaf.org/documentation.html\r\n\r\n한글\r\nhttp://javapark.net/entry/%ED%83%80%EC%9E%84%EB%A6%AC%ED%94%84-From-JSP-to-Thymeleaf\r\n\r\n영문\r\nhttp://spring.io/blog/2012/10/30/spring-mvc-from-jsp-and-tiles-to-thymeleaf/\r\n\r\nhttp://www.thymeleaf.org/doc/articles/petclinic.html', NULL, '', 13, 0),
(1412, 'dale.seo', '', '', '2015-04-30 13:57:09', '', '와일드카드를 정규식으로 바꾸기', '	public static String wildcardToRegex(String wildcard) {\r\n		StringBuilder sb = new StringBuilder(wildcard.length());\r\n		sb.append(''^'');\r\n		for (int i = 0; i < wildcard.length(); i++) {\r\n			char ch = wildcard.charAt(i);\r\n			switch (ch) {\r\n			// multiple words\r\n			case ''*'':\r\n				sb.append(".*");\r\n				break;\r\n			// a single word\r\n			case ''?'':\r\n				sb.append(".");\r\n				break;\r\n			// escape special regexp-characters\r\n            case ''('': case '')'': case ''['': case '']'': case ''$'':\r\n            case ''^'': case ''.'': case ''{'': case ''}'': case ''|'':\r\n            case ''\\\\'':\r\n                sb.append("\\\\");\r\n                sb.append(ch);\r\n                break;\r\n            // normal characters\r\n            default:\r\n            	sb.append(ch);\r\n            	break;\r\n			}\r\n		}\r\n		sb.append(''$'');\r\n		String regex = sb.toString();\r\n		\r\n		System.out.println(wildcard + " ===> " + regex);\r\n		return regex;\r\n\r\n\r\nhttp://www.rgagnon.com/javadetails/java-0515.html', NULL, '', 3, 0),
(1413, 'dale.seo', '', '', '2015-04-30 22:57:17', '', 'Image Replacement', 'CSS가 Disable된 브라우저를 위해서 다음과 같이 a 태그 안에 text를 위치시키고, text-intent로 가려주는 게 권장\r\n\r\n================= HTML =================\r\n<a href="#" class="logo">Sven''s Snowshoe Emporium</a>\r\n\r\n================= CSS ================= \r\n.logo {\r\n background: url(logo.png);\r\n display: block;\r\n height: 100px;\r\n width: 200px;\r\n text-indent: -9999px;\r\n}', NULL, '', 3, 0),
(1414, 'dale.seo', '', '', '2015-04-30 23:00:12', '', 'Sprites', 'HTTP 요청을 줄이기 위해서, 일반과 hover 이미지를 상하로 붙인 다음에 background-position을 이용해서 위 아래로 움직여준다.\r\n\r\n======================= After ======================= \r\n.logo {\r\n background: url(logo.png);\r\n display: block;\r\n height: 100px;\r\n width: 200px;\r\n text-indent: -9999px;\r\n}\r\n.logo:hover, .logo:focus {\r\nbackground-position: 0 -100px;\r\n}\r\n\r\n\r\n======================= Before ======================= \r\n<a href="#" class="logo">Sven''s Snowshoe Emporium</a>\r\n.logo {\r\n background: url(logo.png);\r\n display: block;\r\n height: 100px;\r\n width: 200px;\r\n text-indent: -9999px;\r\n}\r\n.logo:hover, .logo:focus {\r\n background: url(hover.png);\r\n}', NULL, '', 3, 0),
(1415, 'dale.seo', '', '', '2015-05-04 10:48:01', '', 'HTML 역사', 'http://www.thymeleaf.org/doc/articles/fromhtmltohtmlviahtml.html', NULL, '', 2, 0),
(1416, 'dale.seo', '', '', '2015-05-12 23:25:38', '', '스프링 + 타임리프 통합', '\r\n	* https://spring.io/guides/gs/serving-web-content/\r\n	* https://spring.io/guides/gs/securing-web/\r\n	* https://spring.io/blog/2012/10/30/spring-mvc-from-jsp-and-tiles-to-thymeleaf\r\n	* http://www.thymeleaf.org/doc/tutorials/2.1/thymeleafspring.html\r\n', NULL, '', 3, 0),
(1417, 'dale.seo', '', '', '2015-05-13 10:34:17', '', '버저닝 Best Practice', 'http://semver.org/', NULL, '', 2, 0),
(1418, 'dale.seo', '', '', '2015-05-13 11:08:19', '', 'maven-shade-plugin', 'dependancy를 가지는 모든 lib까지 묶어서 패키징 해줌\r\n\r\n\r\n\r\n\r\n\r\n\r\nhttp://knight76.tistory.com/entry/Dependency-Jar%EB%A5%BC-%EB%AA%A8%EC%95%84-%ED%95%98%EB%82%98%EB%A1%9C-%EB%AA%A8%EC%95%84%EC%A3%BC%EA%B8%B0-maven-shade-plugin\r\n\r\n\r\n\r\n\r\n\r\n<?xml version="1.0" encoding="UTF-8"?>\r\n<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\r\n    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <groupId>org.springframework</groupId>\r\n    <artifactId>gs-maven</artifactId>\r\n    <packaging>jar</packaging>\r\n    <version>0.1.0</version>\r\n\r\n    <!-- tag::joda[] -->\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>joda-time</groupId>\r\n            <artifactId>joda-time</artifactId>\r\n            <version>2.2</version>\r\n        </dependency>\r\n    </dependencies>\r\n    <!-- end::joda[] -->\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.apache.maven.plugins</groupId>\r\n                <artifactId>maven-shade-plugin</artifactId>\r\n                <version>2.1</version>\r\n                <executions>\r\n                    <execution>\r\n                        <phase>package</phase>\r\n                        <goals>\r\n                            <goal>shade</goal>\r\n                        </goals>\r\n                        <configuration>\r\n                            <transformers>\r\n                                <transformer\r\n                                    implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">\r\n                                    <mainClass>hello.HelloWorld</mainClass>\r\n                                </transformer>\r\n                            </transformers>\r\n                        </configuration>\r\n                    </execution>\r\n                </executions>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n</project>', NULL, '', 1, 0),
(1419, 'dale.seo', '', '', '2015-05-13 16:43:53', '', 'Mapper에서 CollectionUtils 사용하기', '    <select id="selectList" parameterType="StatLike" resultType="StatLike">\r\n        /* StatLikeMapper.xml, StatLike.selectList, SAC 전시 , 2014-11-05 */\r\n        SELECT\r\n			TENANT_ID,\r\n			USER_KEY,\r\n			STATS_CLSF, \r\n			STATS_KEY,\r\n			CNT_LIKE,\r\n			CNT_BRWS,\r\n			CNT_SHAR,\r\n			SEQ,\r\n			TOTAL_COUNT\r\n		FROM (\r\n			SELECT\r\n			  TENANT_ID,\r\n			  USER_KEY,\r\n			  STATS_CLSF, \r\n			  STATS_KEY,\r\n			  CNT_LIKE,\r\n			  CNT_BRWS,\r\n			  CNT_SHAR,\r\n			  SEQ,\r\n			  TOTAL_COUNT\r\n			FROM (  \r\n			  SELECT\r\n			    TENANT_ID,\r\n			    USER_KEY,\r\n			    STATS_CLSF, \r\n			    STATS_KEY,\r\n			    CNT_LIKE,\r\n			    CNT_BRWS,\r\n			    CNT_SHAR,\r\n			    SEQ,\r\n			    COUNT(*) OVER () AS TOTAL_COUNT\r\n			  FROM TB_DP_SOCIAL_STATS_MBR_LIKE A\r\n			  LEFT OUTER JOIN TB_DP_SOCIAL_STATS B\r\n			  USING (TENANT_ID, STATS_CLSF, STATS_KEY)\r\n			  <where>\r\n			  	TENANT_ID = #{tenantId}\r\n			  	AND USER_KEY = #{userKey}\r\n				<if test="@org.apache.commons.collections.CollectionUtils@isNotEmpty(statsClsfList)">\r\n					AND STATS_CLSF IN \r\n					<foreach item="item" index="index" collection="statsClsfList" open="(" separator="," close=")">\r\n        				#{item}\r\n  					</foreach>\r\n				</if>\r\n			</where>\r\n			)\r\n			WHERE SEQ &lt;= TO_NUMBER(#{startKey})\r\n			ORDER BY SEQ DESC\r\n		)\r\n		WHERE rownum &lt;= #{count} + 1 /* select 1 more for hasNext.*/\r\n    </select>', NULL, '', 2, 0),
(1420, 'dale.seo', '', '', '2015-05-13 21:24:06', '', '[Spring Boot] 소개', 'Tomcat 없이 Spring 내장 컨테이너를 사용하는 획기적인 방법!\r\n\r\n\r\n--------------------------------------\r\nLearn what you can do with Spring Boot\r\n\r\nSpring Boot offers a fast way to build applications. It looks at your classpath and at beans you have configured, makes reasonable assumptions about what you’re missing, and adds it. With Spring Boot you can focus more on business features and less on infrastructure.\r\n\r\nFor example:\r\n\r\nGot Spring MVC? There are several specific beans you almost always need, and Spring Boot adds them automatically. A Spring MVC app also needs a servlet container, so Spring Boot automatically configures embedded Tomcat.\r\nGot Jetty? If so, you probably do NOT want Tomcat, but instead embedded Jetty. Spring Boot handles that for you.\r\nGot Thymeleaf? There are a few beans that must always be added to your application context; Spring Boot adds them for you.\r\nThese are just a few examples of the automatic configuration Spring Boot provides. At the same time, Spring Boot doesn’t get in your way. For example, if Thymeleaf is on your path, Spring Boot adds a SpringTemplateEngine to your application context automatically. But if you define your own SpringTemplateEngine with your own settings, then Spring Boot won’t add one. This leaves you in control with little effort on your part.\r\n\r\n\r\n\r\n--------------------------------------\r\n\r\nMake the application executable\r\n\r\nAlthough it is possible to package this service as a traditional WAR file for deployment to an external application server, the simpler approach demonstrated below creates a standalone application. You package everything in a single, executable JAR file, driven by a good old Java main() method. Along the way, you use Spring’s support for embedding the Tomcat servlet container as the HTTP runtime, instead of deploying to an external instance.\r\n\r\nsrc/main/java/hello/Application.java\r\n\r\npackage hello;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\n\r\n@SpringBootApplication\r\npublic class Application {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(Application.class, args);\r\n    }\r\n\r\n}\r\n@SpringBootApplication is a convenience annotation that adds all of the following:\r\n\r\n@Configuration tags the class as a source of bean definitions for the application context.\r\n@EnableAutoConfiguration tells Spring Boot to start adding beans based on classpath settings, other beans, and various property settings.\r\nNormally you would add @EnableWebMvc for a Spring MVC app, but Spring Boot adds it automatically when it sees spring-webmvc on the classpath. This flags the application as a web application and activates key behaviors such as setting up a DispatcherServlet.\r\n@ComponentScan tells Spring to look for other components, configurations, and services in the the hello package, allowing it to find the HelloController.\r\nThe main() method uses Spring Boot’s SpringApplication.run() method to launch an application. Did you notice that there wasn’t a single line of XML? No web.xml file either. This web application is 100% pure Java and you didn’t have to deal with configuring any plumbing or infrastructure.\r\n\r\nBuild an executable JAR\r\n\r\nIf you are using Gradle, you can run the application using ./gradlew bootRun.\r\n\r\nYou can build a single executable JAR file that contains all the necessary dependencies, classes, and resources. This makes it easy to ship, version, and deploy the service as an application throughout the development lifecycle, across different environments, and so forth.\r\n\r\n./gradlew build\r\nThen you can run the JAR file:\r\n\r\njava -jar build/libs/gs-serving-web-content-0.1.0.jar\r\nIf you are using Maven, you can run the application using mvn spring-boot:run. Or you can build the JAR file with mvn clean package and run the JAR by typing:\r\n\r\njava -jar target/gs-serving-web-content-0.1.0.jar\r\n The procedure above will create a runnable JAR. You can also opt to build a classic WAR file instead.\r\nLogging output is displayed. The service should be up and running within a few seconds.\r\n\r\n\r\n\r\n\r\n\r\n\r\nhttps://spring.io/guides/gs/serving-web-content/', NULL, '', 12, 0),
(1421, 'dale.seo', '', '', '2015-05-14 10:22:02', '', 'SPRING INITIALIZR', 'fill in your project details, pick your options, and you can download either a Maven build file, or a bundled up project as a zip file.\r\n\r\n\r\nhttp://start.spring.io/', NULL, '', 1, 0),
(1422, 'dale.seo', '', '', '2015-05-15 10:30:42', '', '[Spring4] @RestController', '@RestController를 사용하면 Hander Method의 Return Type 앞에 @ResponseBody 어노테이션을 붙여줄 필요가 없음\r\n\r\nThis code uses Spring 4’s new @RestController annotation, which marks the class as a controller where every method returns a domain object instead of a view. It’s shorthand for @Controller and @ResponseBody rolled together.\r\n\r\nA convenience annotation that is itself annotated with @Controller and @ResponseBody.\r\nTypes that carry this annotation are treated as controllers where @RequestMapping methods assume @ResponseBody semantics by default.\r\n\r\n', NULL, '', 5, 0),
(1423, 'dale.seo', '', '', '2015-05-15 10:41:03', '', 'AtomicLong 카운터를 만드는 새로운 방법', 'AtomicLong 타입을 사용하면 동기화에 신경쓰지 않고 카운팅을 할 수 있다.\r\n\r\n\r\n===================================================================\r\npackage hello;\r\n\r\nimport java.util.concurrent.atomic.AtomicLong;\r\n\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RequestParam;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@RestController\r\npublic class GreetingController {\r\n	\r\n	private static final String template = "Hello, %s!";\r\n	private final AtomicLong coutner = new AtomicLong();\r\n	\r\n	@RequestMapping("/greeting")\r\n	public Greeting greeting(@RequestParam(value="name", defaultValue="World") String name) {\r\n		return new Greeting(coutner.incrementAndGet(), String.format(template, name));\r\n	}\r\n\r\n}\r\n', NULL, '', 9, 0),
(1424, 'dale.seo', '', '', '2015-05-15 10:47:52', '', '[Spring Boot] 패키지 방법 바꾸기 (jar VS war)', 'http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#build-tool-plugins-maven-packaging\r\n\r\npackaging 엘리먼트로 세팅하며, WAR로 패키징할 때는 Embeded Tomat 라이브러리를 Provided로 잡아줘야 실제 Deploy될 External Servlet Container랑 충돌이 안 난다.\r\n\r\n==================== WAR ====================\r\n<?xml version="1.0" encoding="UTF-8"?>\r\n<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\r\n    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\r\n    <!-- ... -->\r\n    <packaging>war</packaging>\r\n    <!-- ... -->\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-tomcat</artifactId>\r\n            <scope>provided</scope>\r\n        </dependency>\r\n        <!-- ... -->\r\n    </dependencies>\r\n</project>\r\n\r\n\r\n==================== JAR ====================\r\n<?xml version="1.0" encoding="UTF-8"?>\r\n<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\r\n    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\r\n    <!-- ... -->\r\n    <packaging>jar</packaging>\r\n    <!-- ... -->\r\n</project>', NULL, '', 8, 0),
(1425, 'dale.seo', '', '', '2015-05-15 10:56:40', '', '[Spring Boot] 배포용 WAR 패키징하기', 'http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto-create-a-deployable-war-file\r\n\r\n\r\n\r\nThe first step in producing a deployable war file is to provide a SpringBootServletInitializer subclass and override its configure method. This makes use of Spring Framework’s Servlet 3.0 support and allows you to configure your application when it’s launched by the servlet container. Typically, you update your application’s main class to extend SpringBootServletInitializer:\r\n\r\n@SpringBootApplication\r\npublic class Application extends SpringBootServletInitializer {\r\n\r\n    @Override\r\n    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {\r\n        return application.sources(Application.class);\r\n    }\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        SpringApplication.run(Application.class, args);\r\n    }\r\n\r\n}\r\nThe next step is to update your build configuration so that your project produces a war file rather than a jar file. If you’re using Maven and using spring-boot-starter-parent (which configures Maven’s war plugin for you) all you need to do is modify pom.xml to change the packaging to war:\r\n\r\n<packaging>war</packaging>\r\nIf you’re using Gradle, you need to modify build.gradle to apply the war plugin to the project:\r\n\r\napply plugin: ''war''\r\nThe final step in the process is to ensure that the embedded servlet container doesn’t interfere with the servlet container to which the war file will be deployed. To do so, you need to mark the embedded servlet container dependency as provided.\r\n\r\nIf you’re using Maven:\r\n\r\n<dependencies>\r\n    <!-- … -->\r\n    <dependency>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-tomcat</artifactId>\r\n        <scope>provided</scope>\r\n    </dependency>\r\n    <!-- … -->\r\n</dependencies>\r\nAnd if you’re using Gradle:\r\n\r\ndependencies {\r\n    // …\r\n    providedRuntime ''org.springframework.boot:spring-boot-starter-tomcat''\r\n    // …\r\n}\r\nIf you’re using the Spring Boot build tools, marking the embedded servlet container dependency as provided will produce an executable war file with the provided dependencies packaged in a lib-provided directory. This means that, in addition to being deployable to a servlet container, you can also run your application using java -jar on the command line.', NULL, '', 4, 0),
(1426, 'dale.seo', '', '', '2015-05-15 21:02:40', '', '[Maven Plugin] Tomcat7', '# 디폴트 값 참조\r\nhttps://tomcat.apache.org/maven-plugin-2.2/tomcat7-maven-plugin/run-mojo.html\r\nhttps://tomcat.apache.org/maven-plugin-2.2/run-mojo-features.html\r\n\r\n\r\n# pom.xml\r\n======================================================\r\n			<plugin>\r\n				<groupId>org.apache.tomcat.maven</groupId>\r\n				<artifactId>tomcat7-maven-plugin</artifactId>\r\n				<version>2.2</version>\r\n				<configuration>\r\n                    <port>8110</port>\r\n                    <path>/</path>\r\n					<uriEncoding>${project.encoding}</uriEncoding>\r\n					<systemProperties>\r\n						<spring.profiles.active>local</spring.profiles.active>\r\n					</systemProperties>\r\n					<warSourceDirectory>${basedir}/webapp</warSourceDirectory>\r\n				</configuration>\r\n			</plugin>\r\n======================================================\r\n\r\n# 구동\r\n======================================================\r\nmvn tomcat7:run\r\n======================================================\r\n\r\n', NULL, '', 21, 0),
(1427, 'dale.seo', '', '', '2015-05-20 21:08:01', '', '[Spring DA] jdbc:initialize-database', 'jdbc:initialize-database 태그를 이용하여 DB에 초기화 SQL을 날릴 수 있다. (내외장 DB 상관없음)\r\njdbc:embedded-database는 스프링 내장 DB에 특화된 jdbc:initialize-database 태그라고 보면 된다.\r\n\r\n\r\n    <!-- ========================= DATASOURCE DEFINITION ========================= -->\r\n\r\n    <!-- Configurer that replaces ${...} placeholders with values from a properties file -->\r\n    <!-- (in this case, JDBC-related settings for the dataSource definition below) -->\r\n    <context:property-placeholder location="classpath:spring/data-access.properties"/>\r\n\r\n    <!-- DataSource configuration for Apache Commons DBCP. -->\r\n    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"\r\n          p:driverClassName="${jdbc.driverClassName}" p:url="${jdbc.url}"\r\n          p:username="${jdbc.username}" p:password="${jdbc.password}"/>\r\n\r\n    <!-- JNDI DataSource for JEE environments -->\r\n    <!--\r\n    <jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/petclinic"/>\r\n    -->\r\n\r\n    <!-- Database initializer. If any of the script fails, the initialization stops. -->\r\n    <!-- As an alternative, for embedded databases see <jdbc:embedded-database/>. -->\r\n    <jdbc:initialize-database data-source="dataSource">\r\n        <jdbc:script location="${jdbc.initLocation}"/>\r\n        <jdbc:script location="${jdbc.dataLocation}"/>\r\n    </jdbc:initialize-database>', NULL, '', 8, 0),
(1429, 'dale.seo', '', '', '2015-05-21 22:08:18', '', '[Spring MVC] View Resolver에 우선순위 주기', 'http://www.mkyong.com/spring-mvc/configure-multiple-view-resolvers-priority-in-spring-mvc/\r\n\r\nIf multiple view resolver strategies are applied, you have to declare the priority through “order” property, where the lower order value has a higher priority, for example :\r\n\r\n<beans ...>\r\n	<bean class="org.springframework.web.servlet.view.XmlViewResolver">\r\n	     <property name="location">\r\n	        <value>/WEB-INF/spring-views.xml</value>\r\n	     </property>\r\n	     <property name="order" value="0" />\r\n	</bean>\r\n \r\n	<bean class="org.springframework.web.servlet.view.ResourceBundleViewResolver">\r\n	     <property name="basename" value="spring-views" />\r\n	     <property name="order" value="1" />\r\n	</bean>\r\n \r\n	<bean id="viewResolver"\r\n	      class="org.springframework.web.servlet.view.InternalResourceViewResolver" >\r\n              <property name="prefix">\r\n                 <value>/WEB-INF/pages/</value>\r\n              </property>\r\n              <property name="suffix">\r\n                 <value>.jsp</value>\r\n              </property>\r\n	      <property name="order" value="2" />\r\n        </bean>\r\n</beans>\r\nNow, if a view name is returned, the view resolving strategy works in the following order :\r\n\r\nXmlViewResolver --> ResourceBundleViewResolver --> InternalResourceViewResolver\r\nNote\r\nThe InternalResourceViewResolver must always assign with the lowest priority (largest order number), because it will resolve the view no matter what view name is returned. It caused other view resolvers have no chance to resolve the view if they have lower priority.', NULL, '', 3, 0),
(1430, 'dale.seo', '', '', '2015-05-21 22:14:46', '', '[Spring MVC] Thymeleaf와 JSP 같이 사용하기', 'Thymeleaf와 JSP를 같이 사용하기 위해\r\n\r\nservlet-context.xml을 다음과 같이 한다.\r\n\r\n	<bean\r\n		class="org.springframework.web.servlet.view.InternalResourceViewResolver">\r\n		<property name="prefix" value="/WEB-INF/views/jsp/" />\r\n		<property name="suffix" value=".jsp" />\r\n		<property name="order" value="2" />\r\n	</bean>\r\n\r\n	<bean id="templateResolver"\r\n		class="org.thymeleaf.templateresolver.ServletContextTemplateResolver">\r\n		<property name="prefix" value="/WEB-INF/templates/" />\r\n		<property name="templateMode" value="HTML5" />\r\n	</bean>\r\n	\r\n	<bean id="templateEngine" class="org.thymeleaf.spring4.SpringTemplateEngine">\r\n		<property name="templateResolver" ref="templateResolver" />\r\n	</bean>\r\n	\r\n	<bean class="org.thymeleaf.spring4.view.ThymeleafViewResolver">\r\n		<property name="templateEngine" ref="templateEngine" />\r\n		<property name="order" value="1" />\r\n		<property name="viewNames" value="*.html,*.xhtml" />\r\n	</bean>\r\n\r\n\r\n컨트롤러 (Controller)에서 뷰 이름 (View Name)은 다음과 같이 한다.\r\n\r\n@Controller\r\npublic class TestController {\r\n\r\n	@RequestMapping("/test")\r\n	public String test() {\r\n		return "test.html";\r\n	}\r\n\r\n}\r\n\r\nJSP에서 Thymeleaf로 마이그레이션 (Migration)하는 경우\r\n\r\n이와 같이 하면 순차적으로 할 수 있다.\r\n\r\nJSP의 order를 1로 하고 Thymeleaf를 2로 하면,\r\n\r\nThymeleaf는 실행될 기회를 갖지 못한다.\r\n\r\n마이그레이션이 완료되면,\r\n\r\nThymeleaf viewNames를 제거하고 suffix를 .html으로 설정해서 간결하게 사용할 수도 있다.\r\n\r\n\r\n\r\nhttp://devday.tistory.com/entry/%EC%8A%A4%ED%94%84%EB%A7%81-Spring-MVC%EC%97%90%EC%84%9C-Thymeleaf%EC%99%80-JSP-%EA%B0%99%EC%9D%B4-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0', NULL, '', 6, 0),
(1431, 'dale.seo', '', '', '2015-05-23 17:39:16', '', '치환(Substitution), 순열(Permutation), 조합(Combination)', '# 치환(Substitution) / 계승(Factorial)\r\n  : n개를 모두 나열\r\n * 5! = 5 * 4 * 3 * 2 * 1 = 120\r\n\r\n# 순열(Permutation)\r\n  : n개 중 일부만 나열\r\n * 5P3 = 5! / (5-3)!\r\n\r\n * 같은 것이 있는 경우의 순열\r\nhttps://namu.wiki/w/%EC%88%9C%EC%97%B4(%EC%88%98%ED%95%99)#s-3\r\n\r\n# 조합(Combination)\r\n  : n개 중 일부를 순서를 생각하지 않고 선택\r\n * 5C3 = 5P3 / 3!', NULL, '', 18, 0),
(1432, 'dale.seo', '', '', '2015-05-24 17:54:35', '', '[Spring MVC] 응답 데이터 포멧 결정 로직', 'PPA Strategy (path extension, then parameter, then Accept header) \r\n=========================================================\r\n\r\nEnabling Content Negotiation in Spring MVC\r\n\r\nSpring supports a couple of conventions for selecting the format required: URL suffixes and/or a URL parameter. These work alongside the use of Accept headers. As a result, the content-type can be requested in any of three ways. By default they are checked in this order:\r\n\r\n1) Add a path extension (suffix) in the URL. So, if the incoming URL is something like http://myserver/myapp/accounts/list.html then HTML is required. For a spreadsheet the URL should be http://myserver/myapp/accounts/list.xls. The suffix to media-type mapping is automatically defined via the JavaBeans Activation Framework or JAF (so activation.jar must be on the class path).\r\n2) A URL parameter like this: http://myserver/myapp/accounts/list?format=xls. The name of the parameter is format by default, but this may be changed. Using a parameter is disabled by default, but when enabled, it is checked second.\r\n3) Finally the Accept HTTP header property is checked. This is how HTTP is actually defined to work, but, as previously mentioned, it can be problematic to use.\r\n\r\n==============================================================================================================================\r\nhttp://spring.io/blog/2013/05/11/content-negotiation-using-spring-mvc/', NULL, '', 10, 0),
(1873, 'dale.seo', '', '', '2016-04-23 17:10:43', '', 'POST 요청에 대한 응답으로 location 헤더값 세팅해주기', 'UriComponentsBuilder를 컨트롤러 메서드의 인자로 선언하면,\r\n현재 호스트, 포트 등을 그대로 사용할 수 있다.\r\n\r\n=========================================================================================================\r\n  @RequestMapping(method=RequestMethod.POST, consumes="application/json")\r\n  @ResponseStatus(HttpStatus.CREATED)\r\n  public ResponseEntity<Spittle> saveSpittle(@RequestBody Spittle spittle, UriComponentsBuilder ucb) {\r\n    Spittle saved = spittleRepository.save(spittle);\r\n    \r\n    HttpHeaders headers = new HttpHeaders();\r\n    URI locationUri = ucb.path("/spittles/")\r\n        .path(String.valueOf(saved.getId()))\r\n        .build()\r\n        .toUri();\r\n    headers.setLocation(locationUri);\r\n    \r\n    ResponseEntity<Spittle> responseEntity = new ResponseEntity<Spittle>(saved, headers, HttpStatus.CREATED);\r\n    return responseEntity;\r\n  }', NULL, '', 4, 0),
(1434, 'dale.seo', '', '', '2015-05-24 18:10:37', '', '[Spring MVC] ContentNegotiationManager', '응답 데이터 포멧을 어떻게 결정할지 관리해줌\r\n\r\n  <!-- Total customization - see below for explanation. -->\r\n  <bean id="contentNegotiationManager"\r\n             class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">\r\n    <property name="favorPathExtension" value="false" />\r\n    <property name="favorParameter" value="true" />\r\n    <property name="parameterName" value="mediaType" />\r\n    <property name="ignoreAcceptHeader" value="true"/>\r\n    <property name="useJaf" value="false"/>\r\n    <property name="defaultContentType" value="application/json" />\r\n \r\n    <property name="mediaTypes">\r\n        <map>\r\n            <entry key="json" value="application/json" />\r\n            <entry key="xml" value="application/xml" />\r\n       </map>\r\n    </property>\r\n</bean>', NULL, '', 4, 0),
(1872, 'dale.seo', '', '', '2016-04-23 16:21:30', '', 'FormHttpMessageConverter 사용시 주의점', 'FormHttpMessageConverter는 application/x-www-from-urlencoded 타입의 요청 전문을 MultiValueMap<String, String>으로 읽는다.\r\n그리고 MultiValueMap<String, String>은  application/x-www-from-urlencoded 타입으로 쓴다.\r\n또한, MultiValueMap<String, Object>는 multipart/form-data로 쓴다.\r\n\r\n주의할 점은 FormHttpMessageConverter는 Json이나 Xml 컨버터처럼 어떤 클래스의 객체로는 읽어주지 않는다.\r\n클래스의 객체로 읽고 싶다면 @RequestBody 대신에 @ModelAttribute(생략 가능)을 사용해야 한다.\r\n@ModelAttribute는 form 데이터를 읽기 위해서 고안되었기 때문에, 요청 전문 뿐만 아니라 get 방식의 쿼리 스트링도 동일한 방식으로 읽어낸다.', NULL, '', 4, 0),
(1435, 'dale.seo', '', '', '2015-05-24 18:51:15', '', '[Spring MVC] View VS @ResponseBody', '순수한 Rest Applicatoin을 만들 때는 @ResponseBody와 HttpMessageConverter를 사용하는 게 유리하고,\r\n기존 Web Application에 Download AS XML같은 걸 추가하는 거면 View를 사용하는 게 유리하다.\r\n\r\n================================================================================================\r\n\r\nHowever this produces a different style of Controller method, the advantage being it is also more powerful. So which way to go: Views or @ResponseBody?\r\n\r\nFor an existing web-site already using Spring MVC and views, the MappingJacksonJsonView and MarshallingView provide an easy way to extend the web-application to return JSON and/or XML as well.  In many cases, these are the only data-formats you need and is an easy way to support read-only mobile apps and/or AJAX enabled web-pages where RESTful requests are only used to GET data.\r\n\r\nFull support for REST, including the ability to modify data, involves the use of annotated controller methods in conjunction with HTTP Message Converters. Using views in this case doesn’t make sense, just return a @ResponseBody object and let the converter do the work.\r\n\r\nHowever, as shown <a href="http://blog.springsource.org/2013/05/11/content-negotiation-using-spring-mvc/#combined-controller""here in my previous post, it is perfectly possible for a controller to use both approaches at the same time. Now the same controller can support both traditional web-applications and implement a full RESTful interface, enhancing web-applications that may have been built-up and developed over many years.', NULL, '', 3, 0),
(1436, 'dale.seo', '', '', '2015-05-25 16:25:40', '', '.gitignore 무시한 파일 정의하기', '정규표현식을 단수하게 만든 Glob 패턴을 사용 (Shell에서 많이 사용)\r\n\r\n/TODO # 루트 디렉터리에 있는 TODO 파일은 무시하고, 하위 디렉토리에 있는 TODO는 무시하지 않음\r\nbuild/ # build/ 디렉토리에 있는 모든 파일을 무시\r\ndoc/*.txt # ''doc/notes.txt'' 같은 파일은 무시하고, ''doc/servlet/arch.txt'' 같은 파일은 무시하지 않는다.\r\n\r\n[ 예제 ]\r\n# 메이븐 & 이클립스 설정\r\ntarget/\r\npom.xml.tag\r\npom.xml.releaseBackup\r\npom.xml.versionsBackup\r\npom.xml.next\r\nrelease.properties\r\ndependency-reduced-pom.xml\r\nbuildNumber.properties\r\n.classpath\r\n.project\r\n.settings/', NULL, '', 12, 0),
(1437, 'dale.seo', '', '', '2015-05-25 17:38:34', '', '[Spring Boot] application starters', 'https://github.com/spring-projects/spring-boot/tree/master/spring-boot-starters\r\n\r\nTable 13.1. Spring Boot application starters\r\n\r\nName	Description\r\nspring-boot-starter\r\nThe core Spring Boot starter, including auto-configuration support, logging and YAML.\r\nspring-boot-starter-actuator\r\nProduction ready features to help you monitor and manage your application.\r\nspring-boot-starter-amqp\r\nSupport for the “Advanced Message Queuing Protocol” via spring-rabbit.\r\nspring-boot-starter-aop\r\nSupport for aspect-oriented programming including spring-aop and AspectJ.\r\nspring-boot-starter-batch\r\nSupport for “Spring Batch” including HSQLDB database.\r\nspring-boot-starter-cloud-connectors\r\nSupport for “Spring Cloud Connectors” which simplifies connecting to services in cloud platforms like Cloud Foundry and Heroku.\r\nspring-boot-starter-data-elasticsearch\r\nSupport for the Elasticsearch search and analytics engine including spring-data-elasticsearch.\r\nspring-boot-starter-data-gemfire\r\nSupport for the GemFire distributed data store including spring-data-gemfire.\r\nspring-boot-starter-data-jpa\r\nSupport for the “Java Persistence API” including spring-data-jpa, spring-orm and Hibernate.\r\nspring-boot-starter-data-mongodb\r\nSupport for the MongoDB NoSQL Database, including spring-data-mongodb.\r\nspring-boot-starter-data-rest\r\nSupport for exposing Spring Data repositories over REST via spring-data-rest-webmvc.\r\nspring-boot-starter-data-solr\r\nSupport for the Apache Solr search platform, including spring-data-solr.\r\nspring-boot-starter-freemarker\r\nSupport for the FreeMarker templating engine.\r\nspring-boot-starter-groovy-templates\r\nSupport for the Groovy templating engine.\r\nspring-boot-starter-hateoas\r\nSupport for HATEOAS-based RESTful services via spring-hateoas.\r\nspring-boot-starter-hornetq\r\nSupport for “Java Message Service API” via HornetQ.\r\nspring-boot-starter-integration\r\nSupport for common spring-integration modules.\r\nspring-boot-starter-jdbc\r\nSupport for JDBC databases.\r\nspring-boot-starter-jersey\r\nSupport for the Jersey RESTful Web Services framework.\r\nspring-boot-starter-jta-atomikos\r\nSupport for JTA distributed transactions via Atomikos.\r\nspring-boot-starter-jta-bitronix\r\nSupport for JTA distributed transactions via Bitronix.\r\nspring-boot-starter-mail\r\nSupport for javax.mail.\r\nspring-boot-starter-mobile\r\nSupport for spring-mobile.\r\nspring-boot-starter-mustache\r\nSupport for the Mustache templating engine.\r\nspring-boot-starter-redis\r\nSupport for the REDIS key-value data store, including spring-redis.\r\nspring-boot-starter-security\r\nSupport for spring-security.\r\nspring-boot-starter-social-facebook\r\nSupport for spring-social-facebook.\r\nspring-boot-starter-social-linkedin\r\nSupport for spring-social-linkedin.\r\nspring-boot-starter-social-twitter\r\nSupport for spring-social-twitter.\r\nspring-boot-starter-test\r\nSupport for common test dependencies, including JUnit, Hamcrest and Mockito along with the spring-test module.\r\nspring-boot-starter-thymeleaf\r\nSupport for the Thymeleaf templating engine, including integration with Spring.\r\nspring-boot-starter-velocity\r\nSupport for the Velocity templating engine.\r\nspring-boot-starter-web\r\nSupport for full-stack web development, including Tomcat and spring-webmvc.\r\nspring-boot-starter-websocket\r\nSupport for WebSocket development.\r\nspring-boot-starter-ws\r\nSupport for Spring Web Services.', NULL, '', 9, 0),
(1438, 'dale.seo', '', '', '2015-05-26 10:30:48', '', '[Spring Boot] ViewResolvers', 'http://docs.spring.io/spring-boot/docs/current/reference/html/howto-spring-mvc.html\r\n\r\nCustomize ViewResolvers\r\nA ViewResolver is a core component of Spring MVC, translating view names in @Controller to actual View implementations. Note that ViewResolvers are mainly used in UI applications, rather than REST-style services (a View is not used to render a @ResponseBody). There are many implementations of ViewResolver to choose from, and Spring on its own is not opinionated about which ones you should use. Spring Boot, on the other hand, installs one or two for you depending on what it finds on the classpath and in the application context. The DispatcherServlet uses all the resolvers it finds in the application context, trying each one in turn until it gets a result, so if you are adding your own you have to be aware of the order and in which position your resolver is added.\r\n\r\nWebMvcAutoConfiguration adds the following ViewResolvers to your context:\r\n\r\nAn InternalResourceViewResolver with bean id ‘defaultViewResolver’. This one locates physical resources that can be rendered using the DefaultServlet (e.g. static resources and JSP pages if you are using those). It applies a prefix and a suffix to the view name and then looks for a physical resource with that path in the servlet context (defaults are both empty, but accessible for external configuration via spring.view.prefix and spring.view.suffix). It can be overridden by providing a bean of the same type.\r\nA BeanNameViewResolver with id ‘beanNameViewResolver’. This is a useful member of the view resolver chain and will pick up any beans with the same name as the View being resolved. It shouldn’t be necessary to override or replace it.\r\nA ContentNegotiatingViewResolver with id ‘viewResolver’ is only added if there are actually beans of type View present. This is a ‘master’ resolver, delegating to all the others and attempting to find a match to the ‘Accept’ HTTP header sent by the client. There is a useful blog about ContentNegotiatingViewResolver that you might like to study to learn more, and also look at the source code for detail. You can switch off the auto-configured ContentNegotiatingViewResolver by defining a bean named ‘viewResolver’.\r\nIf you use Thymeleaf you will also have a ThymeleafViewResolver with id ‘thymeleafViewResolver’. It looks for resources by surrounding the view name with a prefix and suffix (externalized to spring.thymeleaf.prefix and spring.thymeleaf.suffix, defaults ‘classpath:/templates/’ and ‘.html’ respectively). It can be overridden by providing a bean of the same name.\r\nIf you use FreeMarker you will also have a FreeMarkerViewResolver with id ‘freeMarkerViewResolver’. It looks for resources in a loader path (externalized to spring.freemarker.templateLoaderPath, default ‘classpath:/templates/’) by surrounding the view name with a prefix and suffix (externalized to spring.freemarker.prefix and spring.freemarker.suffix, with empty and ‘.ftl’ defaults respectively). It can be overridden by providing a bean of the same name.\r\nIf you use Groovy templates (actually if groovy-templates is on your classpath) you will also have a Groovy TemplateViewResolver with id ‘groovyTemplateViewResolver’. It looks for resources in a loader path by surrounding the view name with a prefix and suffix (externalized to spring.groovy.template.prefix and spring.groovy.template.suffix, defaults ‘classpath:/templates/’ and ‘.tpl’ respectively). It can be overriden by providing a bean of the same name.\r\nIf you use Velocity you will also have a VelocityViewResolver with id ‘velocityViewResolver’. It looks for resources in a loader path (externalized to spring.velocity.resourceLoaderPath, default ‘classpath:/templates/’) by surrounding the view name with a prefix and suffix (externalized to spring.velocity.prefix and spring.velocity.suffix, with empty and ‘.vm’ defaults respectively). It can be overridden by providing a bean of the same name.\r\nCheck out WebMvcAutoConfiguration, ThymeleafAutoConfiguration, FreeMarkerAutoConfiguration, GroovyTemplateAutoConfiguration and VelocityAutoConfiguration', NULL, '', 11, 0),
(1439, 'dale.seo', '', '', '2015-05-27 09:12:11', '', '[Spring Boot] Common Application Properties', 'http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html', NULL, '', 5, 0),
(1440, 'dale.seo', '', '', '2015-05-27 17:18:25', '', '[Spring Boot] JSP 사용하려면', 'pom.xml 에 추가\r\n=================================================================\r\n		<dependency>\r\n			<groupId>org.apache.tomcat.embed</groupId>\r\n			<artifactId>tomcat-embed-jasper</artifactId>\r\n			<scope>provided</scope>\r\n		</dependency>\r\n=================================================================\r\n\r\napplication.properties 에 추가\r\n=================================================================\r\n# SPRING MVC\r\nspring.view.prefix=/WEB-INF/jsp/\r\nspring.view.suffix=.jsp\r\n=================================================================', NULL, '', 5, 0),
(1441, 'dale.seo', '', '', '2015-05-27 17:50:44', '', '[Spring MVC] @EnableWebMvc', 'XML Base 에서 <mvc:annotation-driven/> 와 동일 기능\r\nMVC를 위한 각종 Bean 들을 자동으로 등록해줌\r\n@Configuraiton이 선언된 클래스에서 사용하면 됨\r\n\r\nhttp://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/EnableWebMvc.html\r\nhttp://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.html\r\n\r\n\r\n==============================================================================================================\r\nTo customize the imported configuration, implement the interface WebMvcConfigurer or more likely extend the empty method base class WebMvcConfigurerAdapter and override individual methods, e.g.:\r\n\r\n @Configuration\r\n @EnableWebMvc\r\n @ComponentScan(basePackageClasses = { MyConfiguration.class })\r\n public class MyConfiguration extends WebMvcConfigurerAdapter {\r\n\r\n        @Override\r\n        public void addFormatters(FormatterRegistry formatterRegistry) {\r\n                formatterRegistry.addConverter(new MyConverter());\r\n        }\r\n\r\n        @Override\r\n        public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\r\n                converters.add(new MyHttpMessageConverter());\r\n        }\r\n\r\n        // More overridden methods ...\r\n }', NULL, '', 12, 0),
(1442, 'dale.seo', '', '', '2015-05-27 18:13:17', '', '[Spring MVC] ResourceHttpRequestHandler ', '정적 자원을 서비스하는데 사용\r\n\r\n[ Java Base ]\r\n@EnableWebMvc\r\n@Configuration\r\n@ComponentScan(useDefaultFilters = false, includeFilters = @ComponentScan.Filter({Controller.class, ControllerAdvice.class}))\r\npublic class WebConfig extends WebMvcConfigurerAdapter {\r\n\r\n    @Override\r\n    public void addResourceHandlers(ResourceHandlerRegistry registry) {\r\n        registry.addResourceHandler("/resources/**").addResourceLocations("/resources/");\r\n        registry.addResourceHandler("/static/**").addResourceLocations("/static/");\r\n    }\r\n\r\n\r\n[ XML Base ]\r\n    <!--  all resources inside folder src/main/webapp/resources are mapped so they can be refered to inside JSP files\r\n        (see header.jsp for more details) -->\r\n    <mvc:resources mapping="/resources/**" location="/resources/"/>\r\n\r\n    <!-- uses WebJars so Javascript and CSS libs can be declared as Maven dependencies (Bootstrap, jQuery...) -->\r\n    <mvc:resources mapping="/webjars/**" location="classpath:/META-INF/resources/webjars/"/>\r\n\r\n<mvc:resources mapping="/favicon.ico" location="/favicon.ico"/>\r\n<mvc:resources mapping="/robots.txt" location="/robots.txt"/>', NULL, '', 18, 0),
(1443, 'dale.seo', '', '', '2015-05-27 18:29:14', '', '[Spring Boot] Developing web applications', 'http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-developing-web-applications.html#boot-features-jsp-limitations', NULL, '', 2, 0),
(1444, 'dale.seo', '', '', '2015-05-28 20:58:11', '', '[Spring Boot] Profiles & Logging', '[ Profiles ]\r\nhttp://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-profiles.html\r\n\r\n[ Logging ]\r\nhttp://docs.spring.io/spring-boot/docs/current/reference/html/howto-logging.html\r\nhttp://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-logging.html', NULL, '', 11, 0),
(1445, 'dale.seo', '', '', '2015-05-29 09:57:54', '', 'Webjars', '==================== pom.xml ====================\r\n		<!-- Webjars -->\r\n		<dependency>\r\n    		<groupId>org.webjars</groupId>\r\n    		<artifactId>jquery</artifactId>\r\n    		<version>1.11.3</version>\r\n		</dependency>\r\n		<dependency>\r\n            <groupId>org.webjars</groupId>\r\n            <artifactId>jquery-ui</artifactId>\r\n            <version>1.11.3</version>\r\n        </dependency>\r\n        <dependency>\r\n    		<groupId>org.webjars</groupId>\r\n    		<artifactId>bootstrap</artifactId>\r\n    		<version>3.3.4</version>\r\n		</dependency>\r\n\r\n\r\n==================== html ====================\r\n    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js" th:src="@{/webjars/jquery/1.11.3/jquery.js}"></script>\r\n            \r\n    <script src="http://ajax.googleapis.com/ajax/libs/jqueryui/1.11.3/jquery-ui.min.js" th:src="@{/webjars/jquery-ui/1.11.3/jquery-ui.js}"></script>\r\n\r\n    <link href="http://ajax.googleapis.com/ajax/libs/jqueryui/1.11.3/themes/smoothness/jquery-ui.css" th:href="@{/webjars/jquery-ui/1.11.3/jquery-ui.css}" rel="stylesheet" />\r\n    \r\n	<link href="http://netdna.bootstrapcdn.com/twitter-bootstrap/3.3.4/css/bootstrap.min.css" th:href="@{/webjars/bootstrap/3.3.4/css/bootstrap.min.css}" rel="stylesheet" />\r\n', NULL, '', 18, 0),
(1446, 'dale.seo', '', '', '2015-06-02 10:01:17', '', '디스크 용량 관리', 'http://osxtip.tistory.com/310', NULL, '', 2, 0),
(1447, 'dale.seo', '', '', '2015-06-02 21:29:05', '', 'Standard Expression Syntax', 'http://www.thymeleaf.org/doc/tutorials/2.1/usingthymeleaf.html#standard-expression-syntax\r\n\r\nSimple expressions:\r\nVariable Expressions: ${...}\r\nSelection Variable Expressions: *{...}\r\nMessage Expressions: #{...}\r\nLink URL Expressions: @{...}\r\nLiterals\r\nText literals: ''one text'', ''Another one!'',…\r\nNumber literals: 0, 34, 3.0, 12.3,…\r\nBoolean literals: true, false\r\nNull literal: null\r\nLiteral tokens: one, sometext, main,…\r\nText operations:\r\nString concatenation: +\r\nLiteral substitutions: |The name is ${name}|\r\nArithmetic operations:\r\nBinary operators: +, -, *, /, %\r\nMinus sign (unary operator): -\r\nBoolean operations:\r\nBinary operators: and, or\r\nBoolean negation (unary operator): !, not\r\nComparisons and equality:\r\nComparators: >, <, >=, <= (gt, lt, ge, le)\r\nEquality operators: ==, != (eq, ne)\r\nConditional operators:\r\nIf-then: (if) ? (then)\r\nIf-then-else: (if) ? (then) : (else)\r\nDefault: (value) ?: (defaultvalue)', NULL, '', 6, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(1448, 'dale.seo', '', '', '2015-06-04 14:00:17', '', 'Parameterized Test - 파리미터화 테스트 러너', 'Collection의 원소 수만큼 테스트 클래스의 인스턴스를 생성해서 실행해준다.\r\n\r\n\r\n\r\n=======================================================================\r\n<<  생성자를 통한 테스트 인자 전달 >>\r\n\r\nimport static org.junit.Assert.assertEquals;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.Collection;\r\n\r\nimport org.junit.Test;\r\nimport org.junit.runner.RunWith;\r\nimport org.junit.runners.Parameterized;\r\nimport org.junit.runners.Parameterized.Parameters;\r\n\r\n// 파라미터화 테스트 러너를 사용하려면 다음과 같은 조건을 만족시켜야 한다.\r\n// 1) @RunWith를 이용하여 Parameterized.class를 지정한다.\r\n// 2) 테스트에 사용딜 값을 인스턴스 변수로 선언한다.\r\n// 3) @Parameters 애노테이션이 설정된 메소드가 필요하다.\r\n// 4) 3)에서 선언하는 메소드는 public static Collection을 반환해야 한다.\r\n// 5) 3)에서 선언하는 메소드는 파라미터가 없어야 한다.\r\n// 6) 4)의 Collection의 원소는 배열이고 배열의 길이는 모두 같아야 한다.\r\n// 7) 4)의 Collection의 배열 길이는 public생성자가 받는 파라미터의 수와 같아야 한다.\r\n// bin 폴더에서 다음과 같이 실행한다. \r\n// java org.junit.runner.JUnitCore ParameterizedTest\r\n\r\n@RunWith(Parameterized.class)\r\npublic class ParameterizedTest {\r\n\r\n	private double expectedForSub; \r\n    private double expected; \r\n    private double valueOne; \r\n    private double valueTwo; \r\n\r\n    @Parameters \r\n    public static Collection<Integer[]> getTestParameters() {\r\n       return Arrays.asList(new Integer[][] {\r\n          {0, 2, 1, 1},  //expected, valueOne, valueTwo   \r\n          {1, 3, 2, 1},  //expected, valueOne, valueTwo   \r\n          {2, 4, 3, 1},  //expected, valueOne, valueTwo   \r\n       });\r\n    }\r\n\r\n    public ParameterizedTest(double expectedForSub, double expected, double valueOne, double valueTwo) {\r\n       this.expectedForSub = expectedForSub;\r\n       this.expected = expected;\r\n       this.valueOne = valueOne;\r\n       this.valueTwo = valueTwo;\r\n    }\r\n\r\n    @Test\r\n    public void sum() {\r\n       Calculator calc = new Calculator();\r\n       assertEquals(expected, calc.add(valueOne, valueTwo), 0);\r\n    } \r\n    \r\n    @Test\r\n    public void subtract() {\r\n       Calculator calc = new Calculator();\r\n       assertEquals(expectedForSub, calc.subtract(valueOne, valueTwo), 0);\r\n    } \r\n}\r\n\r\n\r\n\r\n=======================================================================\r\n< 필드 주입을 통한 테스트 인자 전달 >\r\n\r\n@RunWith(Parameterized.class)\r\npublic static class ParameterizedTest {\r\n	\r\n	@Parameterized.Parameters\r\n	public static Collection<Object[]> args() {\r\n		return Arrays.asList(\r\n				new Object[][]{{0, 0}, {1, 1}, {3, 2}, {4, 3}});\r\n	}\r\n		\r\n	@Parameterized.Parameter(0)\r\n	public int index;\r\n		\r\n	@Parameterized.Parameter(1)\r\n	public int expected;\r\n	\r\n	@Test\r\n	public void test() {\r\n		assertEquals(expected, Fibonacci.fib(index));\r\n	}\r\n}', NULL, '', 23, 0),
(1449, 'dale.seo', '', '', '2015-06-04 14:11:00', '', '특정 테스트 러너를 사용하고 싶을 때', '@RunWith 어노테이션을 테스트 러너의 클래스에 지정\r\n\r\n[ 테스트 러너 종류 ]\r\nJUnit38ClassRunner\r\nJUnit4\r\nParameterized\r\nSuite\r\nJUnitCore 퍼사드 (어떠한 테스트 러너와도 잘 맞는 러너, 테스트에 사용하는 러너를 스스로 정함)\r\n\r\n[ 예 : 3.8 러너 사용 ]\r\n@RunWith(JUnit38ClassRunner.class)\r\npublic class TestMyBean extends TestCase {\r\n\r\n}\r\n', NULL, '', 1, 0),
(1450, 'dale.seo', '', '', '2015-06-04 14:20:36', '', 'Suite Test - 스위트 테스트 러너', 'TestSuite 클래스는 TestCaseA와 TestCaseB를 모두 실행해준다.\r\n빌드 System과 무관하게 이용.\r\n특정IDE에 비종속적로 실행하길 원할 경우.\r\n\r\n============================================================\r\nimport org.junit.runner.RunWith;\r\nimport org.junit.runners.Suite;\r\nimport org.junit.runners.Suite.SuiteClasses;\r\n\r\n@RunWith(Suite.class)\r\n@SuiteClasses({TestCaseA.class, TestCaseB.class})\r\npublic class TestSuite{}', NULL, '', 4, 0),
(1451, 'dale.seo', '', '', '2015-06-04 14:43:54', '', 'assert* 메소드 사용 시 메세지 사용을 권장한다', '테스트 실패 시 명시적으로 이유를 알려줄 수 있고, 주석도 줄 일 수 있다.\r\n\r\n@Test\r\n	public void testAdd() {\r\n		assertEquals("더하기 -_-", 5, 2+3);\r\n	}', NULL, '', 5, 0),
(1452, 'dale.seo', '', '', '2015-06-04 15:52:11', '', 'Hamcrest Macher', '난해한 assert 문을 해결하기 위한 라이브러리\r\n단위 테스트에서 아주 유용하다.\r\n\r\nhttps://code.google.com/p/hamcrest/\r\n\r\nanything : 무엇이든 상관없이 모든 것을 가리킴. assert문의 가독성을 높이고 싶을 때 사용한다.\r\nis : 문장 가독성 항상 목적으로만 사용한다.\r\nallOf : 포함된 모든 매처가 매칭되는지 검사한다. (&& 와 동일)\r\nanyOf : 포함된 매처 중 어느 하나라도 매치되는 것이 있는지 검사한다. (|| 와 동일)\r\nnot : 포함한 매처들의 의미를 부정한다. (!와 동일)\r\ninstanceOf, isCompatibleType : 객체들이 호환 가능한 타입인지 확인한다.\r\nsameInstance : 객체신원을 확인한다.\r\nnotNullValue, nullValue : 값이 null인지(혹은 아닌지) 검사한다.\r\nhasProperty : 자바빈의 특정 속성을 갖는지 확인한다.\r\nhasEntity, hasKey, hasValue : 주어진 Map이 명시된 entry, key, value를 포함하는 지 검사한다.\r\nhasItem, hasItems : 주어진 컬렉션이 명시한 아이템 혹은 아이템들을 포함하는지 검사한다.\r\ncloseTo, greaterThan, greaterThanOrEqual, lessThan, lessThanOfEqual : 주어진 숫자가 또 다른 숫자에 근접한지, 더 큰지, 더크거나 같은지 더 작은지, 더 작거나 같은지 검사한다.\r\n\r\nequalToIgnoringCase : 주어진 문자열이 다른 문자열과 일치하는지 검사한다.(대소문자 무시)\r\nequalsToIgnoringWhileSpace : 주어진 문자열이 다른 문자열과 일치하는지 검사한다.(공백문자 무시)\r\ncontaingsString, endsWith, startWith : 주어진 문자열이 다른 문자열을 포함하는지, 그 문자열로 시작하거나 끝나는지 검사한다.\r\n\r\n=================================================================================\r\npackage tdd.ex03;\r\n\r\nimport static org.junit.Assert.assertTrue;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\n\r\nimport static org.junit.Assert.assertThat;\r\nimport static org.hamcrest.CoreMatchers.anyOf;\r\nimport static org.hamcrest.CoreMatchers.equalTo;\r\n//deprecated 되어 있다. CoreMatchers 를 사용한다. \r\nimport static org.hamcrest.CoreMatchers.hasItem;\r\n\r\npublic class HamcrestTest {\r\n\r\n	private List<String> values;\r\n\r\n	@Before\r\n	public void setUpList() {\r\n		values = new ArrayList<String>();\r\n		values.add("one");\r\n		values.add("two");\r\n		values.add("three");\r\n	}\r\n\r\n	// 난해한 테스트 메소드.\r\n	@Test\r\n	public void testWithoutHamcrest() {\r\n		assertTrue(values.contains("one") || values.contains("two")\r\n				|| values.contains("three"));\r\n	}\r\n\r\n	@Test\r\n	public void testWithHamcrest() {\r\n		assertThat(values, hasItem(anyOf(equalTo("one"), equalTo("two"),\r\n			equalTo("three"))));\r\n	}\r\n}', NULL, '', 12, 0),
(1453, 'dale.seo', '', '', '2015-06-04 17:41:19', '', 'DBUnit', 'HSQL 기반 단위 테스트 지원 도구\r\n\r\nhttp://dbunit.sourceforge.net/', NULL, '', 5, 0),
(1454, 'dale.seo', '', '', '2015-06-04 17:41:57', '', 'Jetty - Embeded Webserver', 'Mock Webserver\r\n\r\nTDD 할 때 Webserver를 목킹할 수 있다.\r\n\r\n< Maven Plug-in >\r\nhttp://www.eclipse.org/jetty/documentation/current/jetty-maven-plugin.html\r\n\r\n\r\n\r\n\r\n=================================================================\r\npublic class JettyTest {\r\n\r\n	@Test\r\n	public void test() throws Exception {\r\n		Server server = new Server();\r\n		SelectChannelConnector connector = new SelectChannelConnector();\r\n		connector.setPort(9090);\r\n		server.addConnector(connector);\r\n		\r\n		ResourceHandler resourceHandler = new ResourceHandler();\r\n		resourceHandler.setDirectoriesListed(true);\r\n		resourceHandler.setWelcomeFiles(new String[]{"index.html"});\r\n		resourceHandler.setResourceBase(".");\r\n		\r\n		HandlerList handlerList = new HandlerList();\r\n		handlerList.setHandlers(new Handler[]{resourceHandler, new DefaultHandler()});\r\n		server.setHandler(handlerList);\r\n		\r\n		server.start();\r\n		server.join(); // Keep on running.\r\n	}\r\n\r\n}', NULL, '', 9, 0),
(1455, 'dale.seo', '', '', '2015-06-04 21:45:23', '', '최소 지식 원칙', 'Principle of Least Knowledge\r\nLawOfDemeter\r\n\r\n\r\n====================\r\n최소 지식 원칙이라고도 하고 데메테르의 법칙 이라고도 합니다. 둘 다 같은 말이지만 책에서는 법칙이라고 하기보단 원칙이라는 말이 더 어울리고 최조 지식이라는 말이 원리를 더 잘 나타내고 있기 때문에 최소 지식 원칙이라는 말을 사용하기로 했답니다.\r\n\r\n디자인 원칙\r\n최소 지식 원칙 – 정말 친한 친구하고만 얘기하라.\r\n\r\n인연을 많이 맺으면 맺을 수록 인생이 고달파 지기 때문에 되도록이면 인연을 맺지 않으면서 다른 객체들에게 영향력을 행사하는 방법으로 네가지가 있습니다.\r\n\r\n객체 자체의 매소드 호출\r\n메소드에 매개변수로 전달된 객체의 메소드 호출\r\n그 메소드에서 생성하거나 인스턴스를 만든 객체\r\n그 객체에 속하는 구성요소\r\n이렇게 책에는 씌여있는데 영회 형의 옛날 블러그를 통해 찾은 c2.com에 있는 문서에 보면 다음과 같이 나와 있습니다.\r\n\r\nYou can play with yourself.\r\nYou can play with your own toys (but you can’t take them apart),\r\nYou can play with toys that were given to you.\r\nAnd you can play with toys you’ve made yourself.\r\n순서가 조금 바꼈지만 무엇이 무엇을 번역한 것인지는 대충 짐작이 갈 것입니다. c2.com에 있는 문서에 보시면 약간 더 풀어서 설명한 글을 제공해 줍니다.\r\n\r\n이 원칙을 위배하는 것 중에 가장 눈에 잘 띄는 모양은 줄줄이 비핸나 쏘세지 입니다. 그리고 객체 없이 그냥 호출하는 static 메소드들(facotory 패턴의 메소드나, singleton 패턴에 있는 메소드)입니다.\r\n\r\n책에 나온 예제 소스코드 입니다.\r\n[#M_ more.. | less.. | \r\npublic class Car {\r\n   Engine engine;\r\n   // 기타 인스턴스 변수\r\n\r\n   public Car(){\r\n       // 엔진 초기화 등을 처리\r\n   }\r\n\r\n   public void start(Key key){\r\n       Doors doors = new Doors();\r\n\r\n       boolean authorized = key.turns();\r\n       if (authorized) {\r\n           engine.start();\r\n           updateDashboardDisplay();\r\n           doors.lock();\r\n       }\r\n   }\r\n\r\n   public void updateDashboardDisplay(){\r\n       // 디스플레이 갱신\r\n   }\r\n}\r\n_M#]\r\n색칠 된 부분 모두 원칙에 위배되지 않습니다. 분홍색 부분은 두번째 줄에 해당하고 하늘색 부분은 세번째 줄에 해당하고 녹색은 네번째 줄에 해당하고 노란색은 첫번째 줄에 해당합니다.\r\n\r\n위배되는 경우의 코드를 보겠습니다.\r\n[#M_ more.. | less.. | \r\npublic House {\r\n   WeatherStation station;\r\n   // 기타 메소드 및 생성자\r\n   \r\n   public float getTemp( {\r\n      return station.getThermometer().getTemperature();\r\n   }\r\n}\r\n_M#]\r\n분홍색 부분이 이 원칙을 배신하고 있습니다. 객체에 연쇄적으로 메소드를 호출하게 됐을 때.. 즉 위의 경우 getThermomoeter()를 호출 했을 때 받아오는 객체의 내용이 만약 바뀌게 된다면 잇따라 호출한 getTemperature() 메소드를 호출하지 못할 수도 있는 경우가 발생할 수도 있겠지요. 영회형 블러그에 있던 글을 인용하자면\r\n\r\n그렇게 되면 설계 과정에서 관계가 강하지 않다고 떼어놓은 것에\r\n다시 결합도(coupling)을 부여하는 결과가 되니까..\r\n1100151547.bmp\r\n이런 모양을 원했는데…\r\n\r\n1293707849.bmp\r\n요로케 된다는 뜻이 아닐까.. 생각해 봅니다.\r\n\r\n위의 코드를 아래와 같이 수정하면 원칙을 따르게 됩니다.\r\n[#M_ more.. | less.. |\r\n\r\npublic House {\r\n   WeatherStation station;\r\n   // 기타 메소드 및 생성자\r\n   \r\n   public float getTemp( {\r\n      Thermometer thermometer = station.getThemometer();\r\n      return getTempHelper(themometer);\r\n   }\r\n\r\n   private float getTempHelper(Themometer thermometer) {\r\n      return thermometer.getTemperature();\r\n   }\r\n}\r\n_M#]\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nhttp://whiteship.me/?tag=%EC%B5%9C%EC%86%8C-%EC%A7%80%EC%8B%9D-%EC%9B%90%EC%B9%99', NULL, '', 4, 0),
(1456, 'dale.seo', '', '', '2015-06-06 15:19:22', '', 'HSQL DB 로컬 설치 및 실행', 'zip 파일 다운받아서 server.properties 세팅하고 java로 실행만 시켜주면 됨.\r\n간단한 GUI 도구도 제공\r\n\r\nhttp://www.programmingforfuture.com/2010/06/using-hypersql-hsqldb.html', NULL, '', 6, 0),
(1457, 'dale.seo', '', '', '2015-06-06 17:05:30', '', 'HSQL File DB', '간단하게 파일 DB로 사용할 수 있다.\r\n\r\nhttp://www.programmingforfuture.com/2011/02/in-process-mode-of-hsqldb-in-web.html\r\n\r\n\r\n\r\n============================================================================================\r\npackage seo.dale.example.hsqldb;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.DriverManager;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\n\r\nimport org.junit.BeforeClass;\r\nimport org.junit.Test;\r\n\r\npublic class HsqldbTest {\r\n	\r\n	private static Connection con;\r\n	\r\n	@BeforeClass\r\n    public static void beforeCalss() {\r\n        try {\r\n            Class.forName("org.hsqldb.jdbc.JDBCDriver");\r\n        } catch (ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n        }\r\n        try {\r\n            con = DriverManager.getConnection("jdbc:hsqldb:dale","SA","");\r\n            con.createStatement().executeUpdate("create table contacts (name varchar(45),email varchar(45),phone varchar(45))");\r\n            System.out.println("# connection : " + con);\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n	\r\n	@Test\r\n	public void insert() throws SQLException {\r\n		for (int i = 1; i <=5; i++) {\r\n			PreparedStatement pst = con.prepareStatement("insert into contacts values(?, ?, ?)");\r\n			pst.setString(1, "name" + i);\r\n			pst.setString(2, "email" + i);\r\n			pst.setString(3, "phone" + i);\r\n			pst.executeUpdate();\r\n		}\r\n		System.out.println("5 records inserted.");\r\n	}\r\n	\r\n	@Test\r\n	public void select() throws SQLException {\r\n		PreparedStatement pst=con.prepareStatement("select * from contacts");\r\n        ResultSet rs = pst.executeQuery();\r\n        System.out.println("name | email | phone");\r\n        while (rs.next()) {\r\n        	System.out.println(rs.getString(1) + " | " + rs.getString(2) + " | " + rs.getString(3));\r\n        }\r\n	}\r\n	\r\n}\r\n', NULL, '', 12, 0),
(1459, 'dale.seo', '', '', '2015-06-06 18:16:10', '', 'HSQL Memory DB', 'URL 을  jdbc:hsqldb:mem:<아무이름> 으로 지정하면 파일 조차 남기지 않는 휘발성 메모리 DB가 된다.\r\n\r\n==============================================================================================\r\npackage seo.dale.example.hsqldb;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.DriverManager;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\n\r\nimport org.junit.BeforeClass;\r\nimport org.junit.Test;\r\n\r\npublic class HsqldbMemoryTest {\r\n	\r\n	private static Connection con;\r\n	\r\n	@BeforeClass\r\n    public static void beforeCalss() {\r\n        try {\r\n            Class.forName("org.hsqldb.jdbc.JDBCDriver");\r\n        } catch (ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n        }\r\n        try {\r\n            con = DriverManager.getConnection("jdbc:hsqldb:mem:daledb","SA",""); // URL = jdbc:hsqldb:mem:aname\r\n            con.createStatement().executeUpdate("create table contacts (name varchar(45),email varchar(45),phone varchar(45))");\r\n            System.out.println("# connection : " + con);\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n	\r\n	@Test\r\n	public void insert() throws SQLException {\r\n		for (int i = 1; i <=5; i++) {\r\n			PreparedStatement pst = con.prepareStatement("insert into contacts values(?, ?, ?)");\r\n			pst.setString(1, "name" + i);\r\n			pst.setString(2, "email" + i);\r\n			pst.setString(3, "phone" + i);\r\n			pst.executeUpdate();\r\n		}\r\n		System.out.println("5 records inserted.");\r\n	}\r\n	\r\n	@Test\r\n	public void select() throws SQLException {\r\n		PreparedStatement pst=con.prepareStatement("select * from contacts");\r\n        ResultSet rs = pst.executeQuery();\r\n        System.out.println("name | email | phone");\r\n        while (rs.next()) {\r\n        	System.out.println(rs.getString(1) + " | " + rs.getString(2) + " | " + rs.getString(3));\r\n        }\r\n	}\r\n	\r\n}', NULL, '', 4, 0),
(1458, 'dale.seo', '', '', '2015-06-06 17:35:42', '', 'HSQL Server DB', 'Server 객체를 사용해서 Application 과 함께 DB Server를 별도로 띄울 수 있다.\r\n해당 어플리케이션 뿐만 아니라 DB Client 툴로 접속도 가능하다.\r\n\r\nhttp://www.programmingforfuture.com/2011/02/hsqldb-handling-database.html\r\n\r\n\r\n===============================================================================================================\r\npackage seo.dale.example.hsqldb;\r\n\r\nimport java.io.PrintWriter;\r\nimport java.sql.Connection;\r\nimport java.sql.DriverManager;\r\nimport java.sql.SQLException;\r\n\r\nimport org.hsqldb.server.Server;\r\n\r\npublic class HsqldbServerMode {\r\n	\r\n	private Server server;\r\n	\r\n    public HsqldbServerMode() throws SQLException {\r\n		server = new Server();\r\n		server.setAddress("localhost");\r\n		server.setDatabaseName(0, "mydb1");\r\n		server.setDatabasePath(0, "file:D:/hsqldb/db");\r\n		server.setPort(9001);\r\n		server.setTrace(true);\r\n		server.setLogWriter(new PrintWriter(System.out));\r\n		\r\n    	Connection con;\r\n    	try {\r\n    		Class.forName("org.hsqldb.jdbc.JDBCDriver");\r\n    	} catch (ClassNotFoundException e) {\r\n    		e.printStackTrace();\r\n    	}\r\n        \r\n        con = DriverManager.getConnection("jdbc:hsqldb:mydb1","SA","");\r\n        con.createStatement().executeUpdate("create table contacts (name varchar(45),email varchar(45),phone varchar(45))");\r\n    }\r\n    \r\n    public Connection getConnection() throws SQLException {\r\n        return DriverManager.getConnection("jdbc:hsqldb:mydb1","SA","");\r\n    }\r\n	\r\n	public void info() {\r\n        System.out.println("<br/>Address : " + server.getAddress());\r\n        System.out.println("<br/>Database Name : " + server.getDatabaseName(0, true));\r\n        System.out.println("<br/>DatabasePath : " + server.getDatabasePath(0, true));\r\n        System.out.println("<br/>Port : " + server.getPort());\r\n        System.out.println("<br/>DefaultWebPage : " + server.getDefaultWebPage());\r\n        System.out.println("<br/>ProductName : " + server.getProductName());\r\n        System.out.println("<br/>ProductVersion : " + server.getProductVersion());\r\n        System.out.println("<br/>Protocol : " + server.getProtocol());\r\n        System.out.println("<br/>ServerId : " + server.getServerId());\r\n        System.out.println("<br/>State : " + server.getState());\r\n        System.out.println("<br/>StateDescriptor : " + server.getStateDescriptor());\r\n        System.out.println("<br/>WebRoot : " + server.getWebRoot());\r\n	}\r\n	\r\n	public void start() {\r\n		server.start();\r\n		System.out.println("# Database has been started.");\r\n	}\r\n	\r\n	public void stop() {\r\n		server.shutdown();\r\n		System.out.println("# Database has been stopped.");\r\n	}\r\n\r\n}', NULL, '', 10, 0),
(1460, 'dale.seo', '', '', '2015-06-08 11:22:36', '', 'Filter에서 Spring DI 사용 1', '\r\n\r\n\r\n\r\n==============================================================================\r\nRoot Context가 아니라 특정 Servlet Context에서 Filter Bean을 찾게 하고 싶으면 init-param으로 contextAttribute를 추가해준다.\r\n값 : org.springframework.web.servlet.FrameworkServlet.CONTEXT.<servlet-name>\r\n\r\nhttp://stackoverflow.com/questions/16920243/how-to-have-spring-security-context-as-parent-context\r\n\r\n\r\n	<filter>\r\n        <filter-name>com.skplanet.storeplatform.external.core.security.IpValidationFilter</filter-name>\r\n        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>\r\n		<init-param>\r\n            <param-name>contextAttribute</param-name>\r\n            <param-value>org.springframework.web.servlet.FrameworkServlet.CONTEXT.spring</param-value>\r\n        </init-param> \r\n    </filter>\r\n    <filter-mapping>\r\n        <filter-name>com.skplanet.storeplatform.external.core.security.IpValidationFilter</filter-name>\r\n        <url-pattern>*.jsp</url-pattern>\r\n    </filter-mapping> \r\n\r\n==============================================================================\r\nhttp://credemol.blogspot.kr/2011/03/filter-spring-di.html\r\n\r\n  <filter>\r\n    <filter-name>restfulAuthFilter</filter-name>\r\n    <filter-class>\r\n      org.springframework.web.filter.DelegatingFilterProxy\r\n    </filter-class>\r\n\r\n    <init-param>\r\n      <param-name>encoding</param-name>\r\n      <param-value>utf-8</param-value>\r\n    </init-param>\r\n  </filter>\r\n  \r\n  <filter-mapping>\r\n    <filter-name>restfulAuthFilter</filter-name>\r\n    <url-pattern>/ws/rest/secure/*</url-pattern>\r\n  </filter-mapping>  \r\n\r\n\r\n주의해야 할 점은 filter-name과 필터 클래스의 빈 이름이 동일해야 한다.\r\n\r\n위의 필터의 타입레벨 annotation으로 @Service("restfulAuthFilter") 설정된 restfulAuthFilter가 filter-name으로 사용되어야 한다.\r\n\r\n위와 같이 web.xml 파일을 설정하면 스프링의 DI를 이용하여 필터를 작성할 수 있다.', NULL, '', 14, 0),
(1461, 'dale.seo', '', '', '2015-06-09 22:20:11', '', 'Integrating Dandelion Datatables In The Spring Petclinic App', 'http://dandelion.github.io/blog/2013/04/24/Integrating-Dandelion-DataTables-in-the-Spring-Petclinic-app/#.VXbn2M_tkcl', NULL, '', 5, 0),
(1462, 'dale.seo', '', '', '2015-06-09 22:57:05', '', 'Spring Boot + Thymeleaf + Dandelion Configuration', 'http://stackoverflow.com/questions/28702563/spring-boot-thymeleaf-dandelion-configuration-not-working\r\n\r\n=== pom.xml ===\r\n<dependency>\r\n    <groupId>com.github.dandelion</groupId>\r\n    <artifactId>datatables-thymeleaf</artifactId>\r\n    <version>0.10.1</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.github.dandelion</groupId>\r\n    <artifactId>datatables-spring3</artifactId>\r\n    <version>0.10.1</version>\r\n</dependency>\r\n\r\n================================================================================================ \r\n@Configuration\r\npublic class DandelionConfig {\r\n\r\n    @Bean\r\n    public DandelionDialect dandelionDialect() {\r\n        return new DandelionDialect();\r\n    }\r\n\r\n    @Bean\r\n    public DataTablesDialect dataTablesDialect(){\r\n        return new DataTablesDialect();\r\n    }\r\n\r\n    @Bean\r\n    public Filter dandelionFilter() {\r\n        return new DandelionFilter();\r\n    }\r\n\r\n    @Bean\r\n    public ServletRegistrationBean dandelionServletRegistrationBean() {\r\n        return new ServletRegistrationBean(new DandelionServlet(), "/dandelion-assets/*");\r\n    }\r\n}\r\n\r\n================================================================================\r\n<!DOCTYPE html>\r\n<html xmlns:th="http://www.thymeleaf.org"\r\n      xmlns:ddl="http://www.thymeleaf.org/dandelion"\r\n      xmlns:dt="http://www.thymeleaf.org/dandelion/datatables">\r\n<head lang="en"></head>\r\n<body>\r\n    <table id="myTableId"\r\n        dt:table="true"\r\n        dt:url="@{/clientes}"\r\n        dt:serverside="true"\r\n        dt:processing="true">\r\n          <thead>\r\n            <tr>\r\n              <th dt:property="telefone">Telefone</th>\r\n              <th dt:property="nome">Nome</th>\r\n            </tr>\r\n          </thead>\r\n     </table>\r\n</body>\r\n</html>', NULL, '', 12, 0),
(1463, 'dale.seo', '', '', '2015-06-09 22:59:13', '', 'Thymeleaf dialect reference', 'http://dandelion.github.io/datatables/docs/ref/thymeleaf/', NULL, '', 9, 0),
(1464, 'dale.seo', '', '', '2015-06-11 09:20:34', '', 'Spring MVC Exception Handling Strategy', 'What to Use When?\r\n\r\nAs usual, Spring likes to offer you choice, so what should you do? Here are some rules of thumb.\r\nHowever if you have a preference for XML configuration or Annotations, that’s fine too.\r\n\r\nFor exceptions you write, consider adding @ResponseStatus to them.\r\nFor all other exceptions implement an @ExceptionHandler method on a @ControllerAdvice class or use an instance of SimpleMappingExceptionResolver. You may well have SimpleMappingExceptionResolver configured for your application already, in which case it may be easier to add new exception classes to it than implement a @ControllerAdvice.\r\nFor Controller specific exception handling add @ExceptionHandler methods to your controller.\r\nWarning: Be careful mixing too many of these options in the same application. If the same exception can be handed in more than one way, you may not get the behavior you wanted. @ExceptionHandler methods on the Controller are always selected before those on any @ControllerAdvice instance. It is undefined what order controller-advices are processed.\r\n\r\n\r\nhttp://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc#user-content-sample-application', NULL, '', 14, 0),
(1465, 'dale.seo', '', '', '2015-06-11 14:05:45', '', 'Spring MVC 뷰 지정 방법 (foward:, redirect:)', 'Spring F/W에서 컨트롤러는 사용자의 요구를 받아들여 처리하는 시작점이기도 하지만...\r\n처리된 결과를 뷰페이지로 전달하는 매개체 역할을 하기도 한다.\r\n컨트롤러의 메소드에서 뷰페이지로 값을 전달하거나 뷰페이지를 지정하는 방식은 여러가지가 있다니깐...\r\n나중에 다시 정리하면 좋겠다는 다짐(?)으로 남기고...\r\n오늘은 컨트롤러에서 뷰 페이지를 지정할 때 특별한 방식인 ''redirect''지정방식과 ''forward''지정방식에 대해 정리해 보려고 한다.\r\n[경고] : 본 포스트는 겁없는 초보가 작성한 것이므로 내용에 오류가 포함될 수 있으며, 표현상 적절하지 않을 수 있습니다.\r\n            지적사항 있으면 댓글로 남겨주시면 꼭 반영하여 수정조치하도록 하겠습니다.\r\n\r\n[아래 설명을 위한 가정]\r\n설명의 이해를 돕기 위해 아래와 같은 가정을 해보자.\r\n(1) 사용자는 브라우져에서 "a.do"를 입력하고 서비스 요청을 했습니다.\r\n(2) 컨트롤러에서는 a.do를 처리하고 "b.do"라는 뷰페이지를 지정하려 합니다.\r\n    이때, "b.do"를 지정하는 방식을 "redirect" 또는 "forward"를 이요할 수 있는데, 그 차이점을 알아보도록 하겠습니다.\r\n\r\n\r\nview지정방식1. "forward"\r\n주소 표기 : \r\n사용자는 "a.do"를 요청했고, 컨트롤러에서는 return "forward:/b.do"라고 하여 "b.do"의 처리결과를 브라우져에 보이게 된다.\r\n하지만, 사용자의 브라우저에는 최종처리된 "b.do"가 나타나는 것이 아니라 애초 요청한 "a.do"가 나타나게 된다.\r\n데이터호환 : \r\n사용자의 요청 a.do를 처리하는 과정에 가공된 request, response들을 b.do를 처리하는 컨트롤러에서 모두 사용가능하다.\r\n지정 가능 페이지 :\r\n위 데이터 호환에서 설명한 바와 같이 a.do의 처리과정에서 가공중인(또는 가공된) 메모리상의 response, request를 b.do에서도 모두 사용가능하다고 했으니 물리적/논리적으로 분리된 웹 컨테이너라면 공유가 불가능할 것이다.\r\n고로 지정가능 페이지는 a.do를 포함하는 웹 컨테이너에 속한 URL만 지정가능하다.\r\n\r\nview지정방식2. "redirect"\r\n주소 표기 :\r\n사용자는 "a.do"를 요청했고, 이를 처리한 컨트롤러가 return "redirect:/b.do"라고 하면...\r\n웹서버는 redirect에 지정된 URL(b.do)을 클라이언트(브라우져)로 보낸다. URL(b.do)를 수신한 브라우져는 해당 URL(b.do)을 이용하여 별도의 서비스를 요청한다. 이때 b.do라는 서비스 요청을 브라우저 내부에서 수행하므로 사용자는 인식하지 못한다.\r\n데이터호환 :\r\nredirect되는 url(b.do)는 브라우져가 별도로 서비스 요청을 하게 되므로, 애초에 요청했던 url(a.do)를 처리하는 과정에서 사용하던 request, response 관련 정보는 소멸되고, 새로운 서비스요청(b.do)에 해당하는 request, response는 새롭게 만들어지게 된다.\r\n즉, a.do의 request, reponse는 b.do를 처리하는 과정에서 일체 사용할 수 없게 된다. 사용을 하려 한다면 b.do에 파라매터 전달방식(문법)을 통해 전달해야한다.\r\n지정가능페이지 :\r\na.do라는 url을 처리하고, 브라우져에 b.do를 보낸뒤 브라우져가 다시 b.do라는 서비스를 요청하므로 redirect되는 URL은 현재 a.do를 처리하는 웹 컨테이너와 무관하게 유효한 URL이라면 모두 사용가능하다.\r\n\r\nhttp://blog.daum.net/janustop/128', NULL, '', 4, 0),
(1466, 'dale.seo', '', '', '2015-06-11 21:53:46', '', '[Spring Boot] Error Handling', '아무 설정도 하지 않으면, 에러 발생 시, Servlet Container 세팅을 통해 /error로 포워딩 하도록 세팅되어 있음\r\n\r\n[ 주요 클래스 ]\r\nErrorMvcAutoConfiguration : 자동 설정\r\nBasicErrorController : /error 핸들러 매소드가 있는 컨트롤러\r\nDefaultErrorAttributes : 에러 관련 정보 Attribute에 넣어줌\r\n', NULL, '', 3, 0),
(1467, 'dale.seo', '', '', '2015-06-12 09:30:03', '', 'Spring Boot Actuator', 'http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready\r\n\r\n\r\n\r\nID	Description	Sensitive\r\nautoconfig\r\n\r\nDisplays an auto-configuration report showing all auto-configuration candidates and the reason why they ‘were’ or ‘were not’ applied.\r\n\r\ntrue\r\n\r\nbeans\r\n\r\nDisplays a complete list of all the Spring beans in your application.\r\n\r\ntrue\r\n\r\nconfigprops\r\n\r\nDisplays a collated list of all @ConfigurationProperties.\r\n\r\ntrue\r\n\r\ndump\r\n\r\nPerforms a thread dump.\r\n\r\ntrue\r\n\r\nenv\r\n\r\nExposes properties from Spring’s ConfigurableEnvironment.\r\n\r\ntrue\r\n\r\nhealth\r\n\r\nShows application health information (a simple ‘status’ when accessed over an unauthenticated connection or full message details when authenticated).\r\n\r\nfalse\r\n\r\ninfo\r\n\r\nDisplays arbitrary application info.\r\n\r\nfalse\r\n\r\nmetrics\r\n\r\nShows ‘metrics’ information for the current application.\r\n\r\ntrue\r\n\r\nmappings\r\n\r\nDisplays a collated list of all @RequestMapping paths.\r\n\r\ntrue\r\n\r\nshutdown\r\n\r\nAllows the application to be gracefully shutdown (not enabled by default).\r\n\r\ntrue\r\n\r\ntrace\r\n\r\nDisplays trace information (by default the last few HTTP requests).\r\n\r\ntrue', NULL, '', 8, 0),
(1468, 'dale.seo', '', '', '2015-06-12 11:22:09', '', '[Spring MVC] ContentNegotiationManager 세팅 방법', '1. ContentNegotiationManager를 직접 빈 등록\r\n2. ContentNegotiationManagerFactoryBean을 통해 간접적으로 빈 등록\r\n3. WebMvcConfigurerAdapter 클래스에서 configureContentNegotiation 메소드를 오버라이드\r\n\r\n3번 방법이 가장 나은 것 같다.\r\n\r\n\r\n\r\nEnabling Content Negotiation in Spring MVC\r\n\r\nSpring supports a couple of conventions for selecting the format required: URL suffixes and/or a URL parameter. These work alongside the use of Accept headers. As a result, the content-type can be requested in any of three ways. By default they are checked in this order:\r\n\r\nAdd a path extension (suffix) in the URL. So, if the incoming URL is something like http://myserver/myapp/accounts/list.html then HTML is required. For a spreadsheet the URL should be http://myserver/myapp/accounts/list.xls. The suffix to media-type mapping is automatically defined via the JavaBeans Activation Framework or JAF (so activation.jar must be on the class path).\r\nA URL parameter like this: http://myserver/myapp/accounts/list?format=xls. The name of the parameter is format by default, but this may be changed. Using a parameter is disabled by default, but when enabled, it is checked second.\r\nFinally the Accept HTTP header property is checked. This is how HTTP is actually defined to work, but, as previously mentioned, it can be problematic to use.\r\n\r\n\r\nThe Java Configuration to set this up, looks like this. Simply customize the predefined content negotiation manager via its configurer. Note the MediaType helper class has predefined constants for most well-known media-types.\r\n\r\n@Configuration\r\n@EnableWebMvc\r\npublic class WebConfig extends WebMvcConfigurerAdapter {\r\n\r\n  /**\r\n    * Setup a simple strategy: use all the defaults and return XML by default when not sure. \r\n    */\r\n  @Override\r\n  public void configureContentNegotiation(ContentNegotiationConfigurer configurer) {\r\n    configurer.defaultContentType(MediaType.APPLICATION_XML);\r\n  }\r\n}\r\n\r\n\r\nWhen using XML configuration, the content negotiation strategy is most easily setup via the ContentNegotiationManagerFactoryBean:\r\n\r\n\r\n   <!--\r\n        Setup a simple strategy: \r\n           1. Take all the defaults.\r\n           2. Return XML by default when not sure. \r\n       -->\r\n  <bean id="contentNegotiationManager"\r\n             class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">\r\n       <property name="defaultContentType" value="application/xml" />\r\n  </bean>\r\n\r\n <!-- Make this available across all of Spring MVC -->\r\n <mvc:annotation-driven content-negotiation-manager="contentNegotiationManager" />\r\n\r\n\r\nThe ContentNegotiationManager created by either setup is an implementation of ContentNegotationStrategy that implements the PPA Strategy (path extension, then parameter, then Accept header) described above.\r\n\r\n\r\n\r\nAdditional Configuration Options\r\n\r\nIn Java configuration, the strategy can be fully customized using methods on the configurer:\r\n\r\n\r\n@Configuration\r\n@EnableWebMvc\r\npublic class WebConfig extends WebMvcConfigurerAdapter {\r\n\r\n  /**\r\n    *  Total customization - see below for explanation.\r\n    */\r\n  @Override\r\n  public void configureContentNegotiation(ContentNegotiationConfigurer configurer) {\r\n    configurer.favorPathExtension(false).\r\n            favorParameter(true).\r\n            parameterName("mediaType").\r\n            ignoreAcceptHeader(true).\r\n            useJaf(false).\r\n            defaultContentType(MediaType.APPLICATION_JSON).\r\n            mediaType("xml", MediaType.APPLICATION_XML).\r\n            mediaType("json", MediaType.APPLICATION_JSON);\r\n  }\r\n}\r\nIn XML, the strategy can be configured using methods on the factory bean:\r\n\r\n\r\n\r\n  <!-- Total customization - see below for explanation. -->\r\n  <bean id="contentNegotiationManager"\r\n             class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">\r\n    <property name="favorPathExtension" value="false" />\r\n    <property name="favorParameter" value="true" />\r\n    <property name="parameterName" value="mediaType" />\r\n    <property name="ignoreAcceptHeader" value="true"/>\r\n    <property name="useJaf" value="false"/>\r\n    <property name="defaultContentType" value="application/json" />\r\n \r\n    <property name="mediaTypes">\r\n        <map>\r\n            <entry key="json" value="application/json" />\r\n            <entry key="xml" value="application/xml" />\r\n       </map>\r\n    </property>\r\n</bean>\r\nWhat we did, in both cases:\r\n\r\nDisabled path extension. Note that favor does not mean use one approach in preference to another, it just enables or disables it. The order of checking is always path extension, parameter, Accept header.\r\nEnable the use of the URL parameter but instead of using the default parameter, format, we will use mediaType instead.\r\nIgnore the Accept header completely. This is often the best approach if most of your clients are actually web-browsers (typically making REST calls via AJAX).\r\nDon''t use the JAF, instead specify the media type mappings manually - we only wish to support JSON and XML.', NULL, '', 19, 0),
(1469, 'dale.seo', '', '', '2015-06-12 11:39:31', '', '[Spring MVC] 하나의 컨트로러에서 동일한 URL에 대해 다른 메소드로 데이터와 뷰를 모두 서비스하기', '@RequsetMapping의 produces 속성을 사용하며, Accept 헤더의 값에 따라 컨트롤러 메소드를 더 세분하게 분기할 수 있다.\r\n나 같으면 ViewReslover를 사용하는 메소드에 produces = "text/html" 을 세팅하고, HttpMessageConverter를 사용하는 메소드에는 아무것도 설정하지 않겠다.\r\n\r\n==================================================================================================================================\r\nCombining Data and Presentation Formats\r\n\r\nSpring MVC’s REST support builds on the existing MVC Controller framework. So it is possible to have the same web-applications return information both as raw data (like JSON) and using a presentation format (like HTML).\r\n\r\nBoth techniques can easily be used side by side in the same controller, like this:\r\n\r\n\r\n@Controller\r\nclass AccountController {\r\n    // RESTful method\r\n    @RequestMapping(value="/accounts", produces={"application/xml", "application/json"})\r\n    @ResponseStatus(HttpStatus.OK)\r\n    public @ResponseBody List<Account> listWithMarshalling(Principal principal) {\r\n        return accountManager.getAccounts(principal);\r\n    }\r\n\r\n    // View-based method\r\n    @RequestMapping("/accounts")\r\n    public String listWithView(Model model, Principal principal) {\r\n        // Call RESTful method to avoid repeating account lookup logic\r\n        model.addAttribute( listWithMarshalling(principal) );\r\n\r\n        // Return the view to use for rendering the response\r\n        return ¨accounts/list¨;\r\n    }\r\n}\r\nThere is a simple Pattern here: the @ResponseBody method handles all data access and integration with the underlying service layer (the AccountManager). The second method calls the first and sets up the response in the Model for use by a View. This avoids duplicated logic.\r\n\r\nTo determine which of the two @RequestMapping methods to pick, we are again using our PPA content negotiation strategy. It allows the produces option to work. URLs ending with accounts.xml or accounts.json map to the first method, any other URLs ending in accounts.anything map to the second.\r\n', NULL, '', 12, 0),
(1470, 'dale.seo', '', '', '2015-06-12 22:17:04', '', '[Spring MVC] ContentNegotiatingViewResolver', 'ContentNegotiatingViewResolver를 사용함의 가장 큰 장점은 인간(HTML)과 비인간(Json, xml) 인터페이스 사이에 오버랩을 있을 때 하나의 컨트롤러로 두 가지 인터페이스를 동시에 지원할 수 있다는 점이다.\r\n\r\n하지로 실제로 인간이 마주할 수 있는 뷰와 REST API를 동일한 레벨에서 다루는 일은 거의 없다... (ViewReslover를 사용하는일반 컨트롤러와 HttpMessageConverter를 사용하는 Rest 컨트롤러를 보통 구분해서 구현함)\r\n\r\n이러한 Rest Controller가 일반 Controller 개발보다 우선시되는 트랜드 변화에 따라 ContentNegotiatingViewResolver 사용은 더 이상 선호되지 않으며,\r\n대신 리소스 표현을 제공하기 위한 HttpMessageConverter를 사용하는 것이 대세이다.\r\n\r\n\r\n\r\nThe Content Negotiating View Resolver\r\n\r\nThis is a special view resolver that has our strategy plugged into it. Here is the Java Configuration:\r\n\r\n\r\n@Configuration\r\n@EnableWebMvc\r\npublic class MvcConfiguration extends WebMvcConfigurerAdapter {\r\n \r\n  /**\r\n    * Setup a simple strategy:\r\n    *      1. Only path extension is taken into account, Accept headers are ignored.\r\n    *      2. Return HTML by default when not sure.\r\n    */\r\n  @Override\r\n  public void configureContentNegotiation(ContentNegotiationConfigurer configurer) {\r\n      configurer.ignoreAcceptHeader(true)\r\n                      .defaultContentType(MediaType.TEXT_HTML);\r\n  }\r\n\r\n  /**\r\n    * Create the CNVR.  Get Spring to inject the ContentNegotiationManager created by the\r\n    * configurer (see previous method).\r\n    */\r\n  @Bean\r\n  public ViewResolver contentNegotiatingViewResolver(\r\n        ContentNegotiationManager manager) {\r\n    ContentNegotiatingViewResolver resolver = new ContentNegotiatingViewResolver();\r\n    resolver.setContentNegotiationManager(manager);\r\n    return resolver;\r\n  }\r\n}\r\nOr in XML:\r\n\r\n\r\n    <!--\r\n        View resolver that delegates to other view resolvers based on the content type\r\n    -->\r\n    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">\r\n       <!-- All configuration is now done by the manager - since Spring V3.2 -->\r\n       <property name="contentNegotiationManager" ref="cnManager"/>\r\n    </bean>\r\n    \r\n    <!--\r\n        Setup a simple strategy:\r\n           1. Only path extension is taken into account, Accept headers are ignored.\r\n           2. Return HTML by default when not sure.\r\n     -->\r\n    <bean id="cnManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">\r\n        <property name="ignoreAcceptHeader" value="true"/>        \r\n        <property name="defaultContentType" value="text/html" />\r\n    </bean>\r\nThe ContentNegotiationManager is exactly the same bean I discussed in the previous post.\r\n\r\nThe CNVR automatically goes to every other view resolver bean defined to Spring and asks it for a View instance corresponding to the view-name returned by the controller - in this case accounts/list.  Each View ‘knows’ what sort of content it can generate because there is a getContentType() method on it (inherited from the View interface).  The JSP page is rendered by a JstlView (returned by the InternalResourceViewResolver) and its content-type is text/html, whilst the AccountExcelView generates application/vnd.ms-excel.\r\n\r\nHow the CNVR is actually configured is delegated to the ContentNegotiationManager which is created in turn via the configurer (Java Configuration) or one of Spring’s many factory beans (XML).\r\n\r\nThe last piece of the puzzle is: how does the CNVR know what content-type was requested? Because the content-negotiation strategy tells it what to do: either a URL suffix is recognized, or a URL parameter or an Accept header. Exactly the same strategy setup described in the previous post, reused by the CNVR.\r\n\r\nNote that when content-negotiation strategies were introduced by Spring 3.0 they only applied to selecting Views. Since 3.2 this facility is available across the board (as per my previous post). The examples in this post use Spring 3.2 and may be different to older examples you have seen before. In particular most of the properties for configuring the content-negotiation strategy are now on the ContentNegotiationManagerFactoryBean and not on the ContentNegotiatingViewResolver. The properties on the CNVR are now deprecated in favor of those on the manager but the CNVR itself works exactly the same way that it always did.\r\nConfiguring the Content Negotiating View Resolver\r\n\r\nBy default the CNVR automatically detects all ViewResolvers defined to Spring and negotiates between them. If you prefer, the CNVR itself has a viewResolvers property so you can tell it explicitly which view resolvers to use. This makes it obvious that the CNVR is the master resolver and the others are subordinate to it. Note that the order property is no longer needed.\r\n\r\n\r\n@Configuration\r\n@EnableWebMvc\r\npublic class MvcConfiguration extends WebMvcConfigurerAdapter {\r\n \r\n  // .. Other methods/declarations\r\n\r\n  /**\r\n    * Create the CNVR.  Specify the view resolvers to use explicitly.  Get Spring to inject\r\n    * the ContentNegotiationManager created by the configurer (see previous method).\r\n    */\r\n  @Bean\r\n  public ViewResolver contentNegotiatingViewResolver(\r\n        ContentNegotiationManager manager) {\r\n    // Define the view resolvers\r\n    List<ViewResolver> resolvers = new ArrayList<ViewResolver>();\r\n\r\n    XmlViewResolver r1 = new XmlViewResolver();\r\n    resolver.setLocation(new ServletContextResource(servletContext,\r\n            "/WEB-INF/spring/spreadsheet-views.xml"));\r\n    resolvers.add(r1);\r\n\r\n    InternalResourceViewResolver r2 = new InternalResourceViewResolver();\r\n    r2.setPrefix("WEB-INF/views");\r\n    r2.setSuffix(".jsp");\r\n    resolvers.add(r2);\r\n\r\n    // Create the CNVR plugging in the resolvers and the content-negotiation manager\r\n    ContentNegotiatingViewResolver resolver = new ContentNegotiatingViewResolver();\r\n    resolver.setViewResolvers(resolvers);\r\n    resolver.setContentNegotiationManager(manager);\r\n    return resolver;\r\n  }\r\n}\r\nOr in XML:\r\n\r\n\r\n    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">\r\n        <property name="contentNegotiationManager" ref="cnManager"/>\r\n\r\n        <!-- Define the view resolvers explicitly -->\r\n        <property name="viewResolvers">\r\n            <list>\r\n                <bean class="org.springframework.web.servlet.view.XmlViewResolver">\r\n                    <property name="location" value="spreadsheet-views.xml"/>\r\n                </bean>\r\n    \r\n                <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">\r\n                    <property name="prefix" value="WEB-INF/views"/>\r\n                    <property name="suffix" value=".jsp"/>\r\n                </bean>\r\n            </list>\r\n        </property>\r\n    </bean>\r\nThe Github demo project uses 2 sets of Spring profiles. In the web.xml, you can specify xml or javaconfig for XML or Java configuration respectively. And for either of them, specify either separate or combined. The separate profile defines all view resolvers as top-level beans and lets the CNVR scan the context to find them (as discussed in the previous section). In the combined profile the view resolvers are defined explicitly, not as Spring beans and passed to the CNVR via its viewResolvers property (as shown in this section).', NULL, '', 14, 0),
(1474, 'dale.seo', '', '', '2015-06-19 13:38:15', '', 'Bootbox Dialog', '	$(''#btn_apply'').click(function() {\r\n		var message = ''어느 환경/테넌터의 캐시에 적용 하시겠습니까?'';	    \r\n	    bootbox.dialog({\r\n	    	message: message,\r\n	    	buttons: {\r\n	    		staging: {\r\n	    			label: ''${appSub}'',\r\n	    			className: ''btn btn-warning'',\r\n	    			callback: function() {\r\n	    	        	var url = ''${pageContext.request.contextPath}/configuration/sacservice/applyStg'';\r\n	    	        	var data = null;\r\n	    	        	var success = function(data) {\r\n	    	        		$.show(data);\r\n	    	        	};\r\n	    	        	$.post(url, data, success);\r\n	    			}\r\n	    		},\r\n	    		production: {\r\n	    			label: ''${appMain}'',\r\n	    			className: ''btn btn-danger'',\r\n	    			callback: function() {\r\n	    				var url = ''${pageContext.request.contextPath}/configuration/sacservice/apply'';\r\n	    	        	var data = null;\r\n	    	        	var success = function(data) {\r\n	    	        		$.show(data);\r\n	    	        	};\r\n	    	        	$.post(url, data, success);\r\n	    			}\r\n	    		},\r\n	    		cancel: {\r\n	    			label: ''취소'',\r\n	    			className: ''btn btn-inverse'',\r\n	    			callback: function() {\r\n	    				$.show(''취소 되었습니다.'');\r\n	    			}\r\n	    		}\r\n	    	}\r\n	    \r\n	    });\r\n	});', NULL, '', 3, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(1475, 'dale.seo', '', '', '2015-06-19 14:04:04', '', '클래스의 정적 매소드 결과를 jsp 에서 사용하기', '\r\n<spring:eval expression="T(com.skplanet.storeplatform.admin.common.environment.AppConfigProvider).getAppMain()" var="appMain" />\r\n<spring:eval expression="T(com.skplanet.storeplatform.admin.common.environment.AppConfigProvider).getAppSub()" var="appSub" />\r\n\r\n\r\n============================================================\r\npackage com.skplanet.storeplatform.admin.common.environment;\r\n\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.stereotype.Component;\r\n\r\n@Component\r\npublic class AppConfigProvider {\r\n\r\n	private static String appMain;\r\n	\r\n	private static String appSub;\r\n	\r\n	@Value("${app.main}")\r\n	public void setAppMain(String appMain) {\r\n		AppConfigProvider.appMain = appMain;\r\n	}\r\n	\r\n	@Value("${app.sub}")\r\n	public void setSubEnvName(String appSub) {\r\n		AppConfigProvider.appSub = appSub;\r\n	}\r\n\r\n	public static String getAppMain() {\r\n		return appMain;\r\n	}\r\n	\r\n	public static String getAppSub() {\r\n		return appSub;\r\n	}\r\n\r\n}', NULL, '', 2, 0),
(1476, 'dale.seo', '', '', '2015-06-20 15:25:10', '', '[Spring Boot] Working with SQL databases', 'http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-sql.html\r\n\r\nSpring Boot can auto-configure embedded H2, HSQL and Derby databases. You don’t need to provide any connection URLs, simply include a build dependency to the embedded database that you want to use.\r\n\r\nhttp://docs.spring.io/spring-boot/docs/current/reference/html/howto-data-access.html', NULL, '', 8, 0),
(1479, 'dale.seo', '', '', '2015-06-20 19:59:11', '', '@Configuration annotation', 'http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-java-configuration-annotation', NULL, '', 5, 0),
(1480, 'dale.seo', '', '', '2015-06-20 20:24:48', '', 'Combining Java and XML configuration', 'http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-java-combining\r\n\r\n\r\n\r\n\r\n@Configuration class-centric use of XML with @ImportResource\r\n\r\nIn applications where @Configuration classes are the primary mechanism for configuring the container, it will still likely be necessary to use at least some XML. In these scenarios, simply use @ImportResource and define only as much XML as is needed. Doing so achieves a "Java-centric" approach to configuring the container and keeps XML to a bare minimum.\r\n\r\n@Configuration\r\n@ImportResource("classpath:/com/acme/properties-config.xml")\r\npublic class AppConfig {\r\n\r\n    @Value("${jdbc.url}")\r\n    private String url;\r\n\r\n    @Value("${jdbc.username}")\r\n    private String username;\r\n\r\n    @Value("${jdbc.password}")\r\n    private String password;\r\n\r\n    @Bean\r\n    public DataSource dataSource() {\r\n        return new DriverManagerDataSource(url, username, password);\r\n    }\r\n\r\n}\r\nproperties-config.xml\r\n<beans>\r\n    <context:property-placeholder location="classpath:/com/acme/jdbc.properties"/>\r\n</beans>\r\njdbc.properties\r\njdbc.url=jdbc:hsqldb:hsql://localhost/xdb\r\njdbc.username=sa\r\njdbc.password=\r\npublic static void main(String[] args) {\r\n    ApplicationContext ctx = new AnnotationConfigApplicationContext(AppConfig.class);\r\n    TransferService transferService = ctx.getBean(TransferService.class);\r\n    // ...\r\n}', NULL, '', 13, 0),
(1481, 'dale.seo', '', '', '2015-06-20 20:28:03', '', 'Environment abstraction', 'http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-environment\r\n\r\n\r\nThe Environment is an abstraction integrated in the container that models two key aspects of the application environment: profiles and properties.\r\n\r\nA profile is a named, logical group of bean definitions to be registered with the container only if the given profile is active. Beans may be assigned to a profile whether defined in XML or via annotations. The role of the Environment object with relation to profiles is in determining which profiles (if any) are currently active, and which profiles (if any) should be active by default.\r\n\r\nProperties play an important role in almost all applications, and may originate from a variety of sources: properties files, JVM system properties, system environment variables, JNDI, servlet context parameters, ad-hoc Properties objects, Maps, and so on. The role of the Environment object with relation to properties is to provide the user with a convenient service interface for configuring property sources and resolving properties from them.', NULL, '', 8, 0),
(1482, 'dale.seo', '', '', '2015-06-20 22:12:08', '', ' PropertyPlaceholderConfigurer 매뉴얼로 사용하기', 'http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-factory-placeholderconfigurer\r\n\r\nExample: the Class name substitution PropertyPlaceholderConfigurer\r\n\r\nYou use the PropertyPlaceholderConfigurer to externalize property values from a bean definition in a separate file using the standard Java Properties format. Doing so enables the person deploying an application to customize environment-specific properties such as database URLs and passwords, without the complexity or risk of modifying the main XML definition file or files for the container.\r\n\r\nConsider the following XML-based configuration metadata fragment, where a DataSource with placeholder values is defined. The example shows properties configured from an external Properties file. At runtime, a PropertyPlaceholderConfigurer is applied to the metadata that will replace some properties of the DataSource. The values to replace are specified as placeholders of the form ${property-name} which follows the Ant / log4j / JSP EL style.\r\n\r\n<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">\r\n    <property name="locations" value="classpath:com/foo/jdbc.properties"/>\r\n</bean>\r\n\r\n<bean id="dataSource" destroy-method="close"\r\n        class="org.apache.commons.dbcp.BasicDataSource">\r\n    <property name="driverClassName" value="${jdbc.driverClassName}"/>\r\n    <property name="url" value="${jdbc.url}"/>\r\n    <property name="username" value="${jdbc.username}"/>\r\n    <property name="password" value="${jdbc.password}"/>\r\n</bean>\r\nThe actual values come from another file in the standard Java Properties format:\r\n\r\njdbc.driverClassName=org.hsqldb.jdbcDriver\r\njdbc.url=jdbc:hsqldb:hsql://production:9002\r\njdbc.username=sa\r\njdbc.password=root\r\nTherefore, the string ${jdbc.username} is replaced at runtime with the value sa, and the same applies for other placeholder values that match keys in the properties file. The PropertyPlaceholderConfigurer checks for placeholders in most properties and attributes of a bean definition. Furthermore, the placeholder prefix and suffix can be customized.\r\n\r\nWith the context namespace introduced in Spring 2.5, it is possible to configure property placeholders with a dedicated configuration element. One or more locations can be provided as a comma-separated list in the location attribute.\r\n\r\n<context:property-placeholder location="classpath:com/foo/jdbc.properties"/>\r\nThe PropertyPlaceholderConfigurer not only looks for properties in the Properties file you specify. By default it also checks against the Java System properties if it cannot find a property in the specified properties files. You can customize this behavior by setting the systemPropertiesMode property of the configurer with one of the following three supported integer values:\r\n\r\nnever (0): Never check system properties\r\nfallback (1): Check system properties if not resolvable in the specified properties files. This is the default.\r\noverride (2): Check system properties first, before trying the specified properties files. This allows system properties to override any other property source.\r\nConsult the PropertyPlaceholderConfigurer javadocs for more information.\r\n\r\n[Tip]\r\nYou can use the PropertyPlaceholderConfigurer to substitute class names, which is sometimes useful when you have to pick a particular implementation class at runtime. For example:\r\n<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">\r\n    <property name="locations">\r\n        <value>classpath:com/foo/strategy.properties</value>\r\n    </property>\r\n    <property name="properties">\r\n        <value>custom.strategy.class=com.foo.DefaultStrategy</value>\r\n    </property>\r\n</bean>\r\n\r\n<bean id="serviceStrategy" class="${custom.strategy.class}"/>\r\nIf the class cannot be resolved at runtime to a valid class, resolution of the bean fails when it is about to be created, which is during the preInstantiateSingletons() phase of an ApplicationContext for a non-lazy-init bean.', NULL, '', 7, 0),
(1483, 'dale.seo', '', '', '2015-06-21 12:06:49', '', '[Spring Core] Unified Property Management', 'http://spring.io/blog/2011/02/15/spring-3-1-m1-unified-property-management/\r\n\r\n\r\nUnderstanding property sources\r\n\r\nSpring’s Environment abstraction provides search operations over a configurable hierarchy of property sources. To explain fully, consider the following:\r\n\r\n\r\nApplicationContext ctx = new GenericApplicationContext();\r\nEnvironment env = ctx.getEnvironment();\r\nboolean containsFoo = env.containsProperty("foo");\r\nSystem.out.println("Does my environment contain the ''foo'' property? " + containsFoo);\r\nIn the snippet above, we see a high-level way of asking Spring whether the ‘foo’ property is defined for the current environment. To answer this question, the Environment object performs a search over a set of PropertySource objects. A PropertySource is a simple abstraction over any source of key-value pairs, and Spring’s DefaultEnvironment is configured with two PropertySource objects – one representing the set of JVM system properties (a la System.getProperties()) and one representing the set of system environment variables (a la System.getenv())[1]. This means that if a ‘foo’ system property or ‘foo’ environment variable is present at runtime, the call to env.containsProperty(“foo”) will return true.\r\n\r\nThe search performed is hierarchical. By default, system properties have precedence over environment variables, so if the ‘foo’ property happens to be set in both places during a call to env.getProperty(“foo”), the system property value will ‘win’ and be returned preferentially over the environment variable.\r\n\r\nMost importantly, the entire mechanism is configurable. Perhaps you have a custom source of properties that you’d like to integrate into this search. No problem – simply implement and instantiate your own PropertySource and add it to the set of PropertySources for the current Environment:\r\n\r\n\r\nConfigurableApplicationContext ctx = new GenericApplicationContext();\r\nMutablePropertySources sources = ctx.getEnvironment().getPropertySources();\r\nsources.addFirst(new MyPropertySource());\r\nIn the code above, MyPropertySource has been added with highest precedence in the search. If it contains a ‘foo’ property, it will be detected and returned ahead of any ‘foo’ property in any other PropertySource. The MutablePropertySources API exposes a number of methods that allow for precise manipulation of the set of property sources. Explore the Javadoc for full details.', NULL, '', 9, 0),
(1484, 'dale.seo', '', '', '2015-06-21 19:23:10', '', 'Built-In Bean Validation Constraints', 'http://docs.oracle.com/javaee/6/tutorial/doc/gircz.html#gkagk', NULL, '', 2, 0),
(1485, 'dale.seo', '', '', '2015-06-21 19:57:45', '', 'JPA Annotations', 'http://www.tutorialspoint.com/jpa/jpa_quick_guide.htm\r\n\r\n@Entity	Declares the class as an entity or a table.\r\n@Table	Declares table name.\r\n@Basic	Specifies non-constraint fields explicitly.\r\n@Embedded	Specifies the properties of class or an entity whose value is an instance of an embeddable class.\r\n@Id	Specifies the property, use for identity (primary key of a table) of the class.\r\n@GeneratedValue	Specifies how the identity attribute can be initialized such as automatic, manual, or value taken from a sequence table.\r\n@Transient	Specifies the property that is not persistent, i.e., the value is never stored in the database.\r\n@Column	Specifies the column attribute for the persistence property.\r\n@SequenceGenerator	Specifies the value for the property that is specified in the @GeneratedValue annotation. It creates a sequence.\r\n@TableGenerator	Specifies the value generator for the property specified in the @GeneratedValue annotation. It creates a table for value generation.\r\n@AccessType	This type of annotation is used to set the access type. If you set @AccessType(FIELD), then access occurs Field wise. If you set @AccessType(PROPERTY), then access occurs Property wise.\r\n@JoinColumn	Specifies an entity association or entity collection. This is used in many- to-one and one-to-many associations.\r\n@UniqueConstraint	Specifies the fields and the unique constraints for the primary or the secondary table.\r\n@ColumnResult	References the name of a column in the SQL query using select clause.\r\n@ManyToMany	Defines a many-to-many relationship between the join Tables.\r\n@ManyToOne	Defines a many-to-one relationship between the join Tables.\r\n@OneToMany	Defines a one-to-many relationship between the join Tables.\r\n@OneToOne	Defines a one-to-one relationship between the join Tables.\r\n@NamedQueries	specifies list of named queries.\r\n@NamedQuery	Specifies a Query using static name.', NULL, '', 3, 0),
(1486, 'dale.seo', '', '', '2015-06-22 10:05:35', '', '매서드에서 Object 파라미터의 필드 값을 바꿀 때 주의할 점', 'Object가 매서드의 인자로 넘어가면, 로컬 파라미터로 인자의 메모리 주소가 복사되어 사용된다.\r\n따라서 해당 메서드 바디에서 로컬 파라미터에 새로운 인스턴스를 생성해서 할당해주는 것은 Caller 입장에서 의미가 없고 해당 메서드 수행이 끝나면 사라질 Object가 된다.\r\n반드시 로컬 파라미터의 매서드를 이용해서 값을 바꿔줘야 Caller가 같은 메모리 주소를 가리키는 변수가 있으므로 유효한 변경이 된다.\r\n리턴 타입을 void로 하고 넘어온 파라미터의 값을 바꾸는 메소드를 구현할 때 흔히 할 수 있는 실수이다.\r\n\r\n==================================================================================================================================\r\n\r\nParameters\r\nA method''s parameters are defined in a comma-separated list enclosed in parentheses after the name of the method. A parameter consists of two parts, the parameter type and the parameter name. If a method has no parameters, then only an empty pair of parentheses is used.\r\nAll parameters in Java are passed by value, that is, any time we pass a parameter to a method, a copy of that parameter is made for use within the method body. So if we pass an int variable to a method, then that variable''s integer value is copied. The method can change the copy but not the original. If we pass an object reference as a parameter to a method, then the reference is copied as well. Remember that we can have many different variables that all refer to the same object. Reassigning the internal reference variable inside a method will not change the reference that was passed in.\r\nFor the sake of demonstration, we will assume that the following two methods were added to an arbitrary class (such as CounterDemo).\r\npublic static void badReset(Counter c) {\r\n  c = new Counter();            // reassigns local name c to a new counter\r\n}\r\n\r\npublic static void goodReset(Counter c) {\r\n  c.reset();                    // resets the counter sent by the caller\r\n}\r\nNow we will assume that variable strikes refers to an existing Counter instance in some context, and that it currently has a value of 3.\r\nIf we were to call badReset(strikes), this has no effect on the Counter known as strikes. The body of the badReset method reassigns the (local) parameter variable c to reference a newly created Counter instance; but this does not change the state of the existing counter that was sent by the caller (i.e., strikes).\r\nIn contrast, if we were to call goodReset(strikes), this does indeed reset the caller''s counter back to a value of zero. That is because the variables c and strikes are both reference variables that refer to the same Counter instance. So when c.reset() is called, that is effectively the same as if strikes.reset() were called.', NULL, '', 5, 0),
(1487, 'dale.seo', '', '', '2015-06-22 22:21:00', '', 'Spring JPA 문서', '인터페이스만 상속하면 구현없이 간단히 DAO가 만들어짐!\r\n\r\nhttp://docs.spring.io/spring-data/jpa/docs/1.8.0.RELEASE/reference/html/', NULL, '', 4, 0),
(1488, 'dale.seo', '', '', '2015-06-22 22:37:57', '', '[Spring Boot] SQL 로깅 설정', 'application.properties 파일에 다음 추가하면 끝!\r\n\r\nspring.jpa.show-sql=true', NULL, '', 3, 0),
(1489, 'dale.seo', '', '', '2015-06-22 23:18:26', '', 'hbm2ddl.auto', 'http://egloos.zum.com/gyumee/v/2483659', NULL, '', 4, 0),
(1490, 'dale.seo', '', '', '2015-06-22 23:22:37', '', '[Spring Boot] hibernate.hbm2ddl.auto', '내장 DB에 한해서 create-drop 설정이 먹음 (매우 편리!!)\r\n\r\n\r\n\r\n\r\n=================================================================\r\n Creating and dropping JPA databases\r\n\r\nBy default, JPA databases will be automatically created only if you use an embedded database (H2, HSQL or Derby). You can explicitly configure JPA settings using spring.jpa.* properties. For example, to create and drop tables you can add the following to your application.properties.\r\n\r\nspring.jpa.hibernate.ddl-auto=create-drop\r\n[Note]\r\nHibernate’s own internal property name for this (if you happen to remember it better) is hibernate.hbm2ddl.auto. You can set it, along with other Hibernate native properties, using spring.jpa.properties.* (the prefix is stripped before adding them to the entity manager). Example:\r\nspring.jpa.properties.hibernate.globally_quoted_identifiers=true\r\npasses hibernate.globally_quoted_identifiers to the Hibernate entity manager.\r\n\r\nBy default the DDL execution (or validation) is deferred until the ApplicationContext has started. There is also a spring.jpa.generate-ddl flag, but it is not used if Hibernate autoconfig is active because the ddl-auto settings are more fine-grained.', NULL, '', 5, 0),
(1491, 'dale.seo', '', '', '2015-06-23 09:46:27', '', 'Hibernate NamingStrategy', 'https://docs.jboss.org/hibernate/orm/3.5/api/org/hibernate/cfg/NamingStrategy.html\r\n\r\n테이블 이름과 칼럼 이름을 어떻게 결정할지 정해준다.\r\n\r\n1) Camelcase \r\norg.hibernate.cfg.DefaultNamingStrategy\r\n\r\n2) Underscore\r\norg.hibernate.cfg.ImprovedNamingStrategy\r\n\r\n3) 스프링 부트 디폴트\r\norg.springframework.boot.orm.jpa.hibernate.SpringNamingStrategy\r\n\r\n# 스프링 부트에서 설정 방법\r\n\r\nspring.jpa.hibernate.naming-strategy=org.hibernate.cfg.DefaultNamingStrategy', NULL, '', 6, 0),
(1492, 'dale.seo', '', '', '2015-06-24 10:13:34', '', 'Input에 파라미터 값이 있는 경우에만 세팅하기', '<input type="search" name="query" class="form-control" placeholder="Content" th:value="${param.query != null} ? ${param.query[0]}"/>', NULL, '', 3, 0),
(1493, 'dale.seo', '', '', '2015-06-24 14:58:24', '', 'Layoutit 부트스트랩 프로토타이핑 도구', 'http://www.layoutit.com/', NULL, '', 3, 0),
(1494, 'dale.seo', '', '', '2015-06-24 15:19:10', '', 'Bootstrap 관련 도구', 'http://mashable.com/2013/10/20/bootstrap-editors/', NULL, '', 4, 0),
(1688, 'dale.seo', '', '', '2016-02-11 10:27:34', '', '자바8 람다(lambda) 개념', 'http://www.hanbit.co.kr/network/view.html?bi_id=1961\r\n\r\n익명 내부 클래스 대신에 람다를 활용하여 함수형 프로그래밍을 가능하게 함\r\n추상 메서드가 하나 뿐인 인터페이스를 람다 타입으로 사용\r\n메서드에 값만 전달하는 대신 작동 방식도 전달하기가 용이하다\r\n\r\n\r\n컬렉션의 forEach나 Tread에서 Runnalbe 인터페이스를 넘길 자주 사용됨', NULL, '', 10, 0),
(1496, 'dale.seo', '', '', '2015-06-27 23:54:55', '', '[Spring Boot] Jackson 컨버터 세팅', '날짜 포멧팅과 pretty로 나옴\r\n\r\nspring.jackson.date-format=yyyy/MM/dd\r\nspring.jackson.serialization.write-dates-as-timestamps=false\r\nspring.jackson.serialization.indent_output=true\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nhttp://stackoverflow.com/questions/29027475/date-format-in-the-json-output-using-spring-boot\r\n\r\nhttp://wiki.fasterxml.com/JacksonFAQDateHandling\r\n\r\nhttps://dzone.com/articles/latest-jackson-integration\r\n', NULL, '', 13, 0),
(1497, 'dale.seo', '', '', '2015-06-28 17:40:25', '', 'Pagination and Sorting With Spring Data JPA', 'http://springinpractice.com/2012/05/11/pagination-and-sorting-with-spring-data-jpa', NULL, '', 4, 0),
(1498, 'dale.seo', '', '', '2015-06-30 20:44:37', '', 'ContentNegotiationManager 집중 탐구', 'ContentNegotiationManager는 클라이언트가 요청하는 데이터의 타입이 뭔지를 확장자, 파라미터, 헤더, 디폴트값으로 파악해준다.\r\n\r\n\r\n[ AbstractMessageConverterMethodProcessor 클래스를 통한 최종 미디어 타입 결정 과정 확인 ]\r\n\r\nAbstractMessageConverterMethodProcessor 클래스가 ContentNegotiationManager를 사용하기 때문에,\r\nAbstractMessageConverterMethodProcessor 클래스의 writeWithMessageConverters() 메소드의 아랫 부분을 디버깅 해보면 좋다.\r\n클라이언트에서 들어온 requestedMediaTypes을 확인하고 서버에서 제공할 수 있는 producibleMediaTypes을 확인해서 compatibleMediaTypes를 찾는다.\r\n못 찾으면 HttpMediaTypeNotAcceptableException이 발생하고 이 게 나중에 406 HTTP STATUS 코드가 된다.\r\n\r\n===========================================================================\r\n		List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(servletRequest);\r\n		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(servletRequest, returnValueClass);\r\n\r\n		Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>();\r\n		for (MediaType r : requestedMediaTypes) {\r\n			for (MediaType p : producibleMediaTypes) {\r\n				if (r.isCompatibleWith(p)) {\r\n					compatibleMediaTypes.add(getMostSpecificMediaType(r, p));\r\n				}\r\n			}\r\n		}\r\n		if (compatibleMediaTypes.isEmpty()) {\r\n			throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes);\r\n		}\r\n===========================================================================\r\n\r\n[ 설정 주의사항 ]\r\n\r\n  <bean id="contentNegotiationManager"\r\n             class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">\r\n    <property name="favorPathExtension" value="false" />\r\n    <property name="favorParameter" value="true" />\r\n    <property name="parameterName" value="mediaType" />\r\n    <property name="ignoreAcceptHeader" value="true"/>\r\n    <property name="useJaf" value="false"/>\r\n    <property name="defaultContentType" value="application/json" />\r\n \r\n    <property name="mediaTypes">\r\n        <map>\r\n            <entry key="json" value="application/json" />\r\n            <entry key="xml" value="application/xml" />\r\n       </map>\r\n    </property>\r\n</bean>\r\n\r\n===========================================================================\r\n\r\n# mediaTypes\r\n - PathExtensionContentNegotiationStrategy와 ParameterContentNegotiationStrategy를 생성할 때만 쓰인다.\r\n - 따라서 favorPathExtension와 favorParameter를 모두 false로 해놨을 경우에는 무의미한 설정이다.\r\n\r\n# defaultContentType\r\n - defaultContentType이 세팅된 경우에만 FixedContentNegotiationStrategy을 생성된다.\r\n - 하지만 다른 FixedContentNegotiationStrategy는 우선순위가 제일 낮기 때문에,\r\n - favorPathExtension=true해놓고 확장자를 안 붙이거나, favorParameter=true해놓고 파라미터 안 보내거나, ignoreAcceptHeader=false해놓고 Accept헤더를 안 보냈을 경우(스피링에서는  */*로 인식)에만 defaultContentType를 미디어 타입으로 인식한다.\r\n - 제공하지 않는 미디어 타입을 요청했을 때는 HttpMediaTypeNotAcceptableException 발생하지 defaultContentType으로 서비스 되지는 않으므로 주의한다.\r\n   (우선순위가 높은 (PathExtention/Parameter/Header)ContentNegotiationStrategy를 통해 확실한 MediaType이 파악되므로 FixedContentNegotiationStrategy까지 올일이 없음)\r\n\r\n\r\n===========================================================================\r\n\r\n[ ContentNegotiationManager 의 ContentNegotiationStrategy 선택 우선순위  ]\r\n\r\n1) PathExtensionContentNegotiationStrategy (확장자)\r\n2) ParameterContentNegotiationStrategy (파라미터)\r\n3) HeaderContentNegotiationStrategy (헤더)\r\n4) DefaultNegotiationStrategy (defaultContentType으로 설정한 값)\r\n\r\n===========================================================================\r\n	@Override\r\n	public void afterPropertiesSet() {\r\n		List<ContentNegotiationStrategy> strategies = new ArrayList<ContentNegotiationStrategy>();\r\n\r\n		if (this.favorPathExtension) {\r\n			PathExtensionContentNegotiationStrategy strategy;\r\n			if (this.servletContext != null) {\r\n				strategy = new ServletPathExtensionContentNegotiationStrategy(this.servletContext, this.mediaTypes);\r\n			}\r\n			else {\r\n				strategy = new PathExtensionContentNegotiationStrategy(this.mediaTypes);\r\n			}\r\n			strategy.setIgnoreUnknownExtensions(this.ignoreUnknownPathExtensions);\r\n			if (this.useJaf != null) {\r\n				strategy.setUseJaf(this.useJaf);\r\n			}\r\n			strategies.add(strategy);\r\n		}\r\n\r\n		if (this.favorParameter) {\r\n			ParameterContentNegotiationStrategy strategy = new ParameterContentNegotiationStrategy(this.mediaTypes);\r\n			strategy.setParameterName(this.parameterName);\r\n			strategies.add(strategy);\r\n		}\r\n\r\n		if (!this.ignoreAcceptHeader) {\r\n			strategies.add(new HeaderContentNegotiationStrategy());\r\n		}\r\n\r\n		if(this.defaultNegotiationStrategy != null) {\r\n			strategies.add(defaultNegotiationStrategy);\r\n		}\r\n\r\n		this.contentNegotiationManager = new ContentNegotiationManager(strategies);\r\n	}', NULL, '', 22, 0),
(1499, 'dale.seo', '', '', '2015-06-30 22:34:59', '', 'DateFormat 적용하기', '${{data}} 를 사용하면 Global DateFormat 설정 또는 도메인 필드에 @DateTimeFormat 설정한 값이 먹는다.\r\n\r\n			<tr th:each="essay : ${essayList}">\r\n				<td th:text="${essay.id}" ></td>\r\n				<td th:text="${essay.type}"></td>\r\n				<td th:text="${essay.title}"></td>\r\n				<td th:text="${{essay.createdAt}}"></td>\r\n				<td><a class="btn btn-default btn-xs" href="|${essay.id}/detail|"><span class="glyphicon glyphicon-edit"></span></a></td>\r\n			</tr>\r\n\r\n\r\nhttp://www.thymeleaf.org/whatsnew21.html', NULL, '', 5, 0),
(1500, 'dale.seo', '', '', '2015-07-02 14:33:19', '', '20 Evernote Search Features You Should Be Using', 'http://www.makeuseof.com/tag/20-evernote-search-features-you-should-be-using/', NULL, '', 4, 0),
(1501, 'dale.seo', '', '', '2015-07-02 16:30:32', '', 'DispatcherServlet에서 핸들러 메서드를 못 찾을 때 404 응답 대신에 NoHandlerNotFound 예외 발생 시키기', 'Spring3에서는 방법이 없다는 게 함정... ㅠㅠ\r\n\r\nSpring MVC REST Handing Bad Url (404) by returning JSON\r\n\r\nhttp://stackoverflow.com/questions/22157687/spring-mvc-rest-handing-bad-url-404-by-returning-json\r\n\r\n\r\n\r\n< Servlet3 설정 >\r\npublic class WebInitializer implements WebApplicationInitializer {\r\n\r\n    @Override\r\n    public void onStartup(ServletContext servletContext) throws ServletException {\r\n        /// ...\r\n        ServletRegistration.Dynamic dispatcher = servletContext.addServlet("dispatcher", new DispatcherServlet(webApplicationContext));\r\n        dispatcher.setLoadOnStartup(1);\r\n        dispatcher.addMapping("/");\r\n	    dispatcher.setInitParameter("throwExceptionIfNoHandlerFound", "true"); // NoHandlerFoundException instead of 404 response\r\n    }\r\n    \r\n}', NULL, '', 11, 0),
(1502, 'dale.seo', '', '', '2015-07-02 21:56:48', '', 'JPA Enum 필드 맵핑', '	@Enumerated(EnumType.STRING)\r\n	private EssayType type;', NULL, '', 5, 0),
(1503, 'dale.seo', '', '', '2015-07-03 22:55:34', '', '[Tomcat7] 메모리 세팅', '사용자 개인 세팅은 /bin/catalina.sh 를 직접 수정하지 말고, /bin/setenv.sh 에 별도로 세팅한다.\r\n\r\n/bin/setenv.sh\r\n=========================================================================\r\nCATALINA_OPTS="-Xms256M -Xmx256M -XX:PermSize=128M -XX:MaxPermSize=128M"\r\n=========================================================================\r\n\r\nhttp://stackoverflow.com/questions/19769675/tomcat-7-outofmemoryerror-from-uncaughtexceptionhandler', NULL, '', 1, 0),
(1504, 'dale.seo', '', '', '2015-07-06 21:33:57', '', 'java.util.Scanner 로 콘솔에서 입력받기', 'public class SannerTest {\r\n\r\n	@Test\r\n	public void test() {\r\n		Scanner input = new Scanner(System.in);\r\n		System.out.println("Enter your age in years: ");\r\n		double age = input.nextDouble();\r\n		System.out.println("Enter your maximum heart rate: ");\r\n		double rate = input.nextDouble();\r\n		double fb = (rate - age) * 0.65;\r\n		System.out.println("Year ideal fat-burning heart rate is " + fb);\r\n		input.close();\r\n	}\r\n\r\n}', NULL, '', 6, 0),
(1505, 'dale.seo', '', '', '2015-07-14 14:27:33', '', 'RestTemplate 분석', '어떤 메소드를 호출하던지 내부적으로 public <T> T execute(URI url, HttpMethod method, RequestCallback requestCallback, ResponseExtractor<T> responseExtractor) 메소드를 호출한다.\r\n\r\n즉,  RequestCallback와 ResponseExtractor 클래스가 무엇을 하는가를 파악하는 게 핵심이다.\r\n\r\n* RequestCallback : doWithRequest 메서드를 이용하여 ClientHttpRequest를 인자로 받아 ClientHttpRequest에 요청 헤더를 추가하고, 요청 바디를 Write\r\n* ResponseExtractor : extractData 메서드를 이용하여 ClientHttpResponse를 인자로 받아 응답 전문을 Read 하고 응답 헤더를 추가함해서 ResponseEntity를 만들어냄\r\n\r\n내부적으로는 ClientHttpRequest 객체의 execute 메소드를 호출해서 ClientHttpResponse 객체를 얻는다.\r\n이 때 RequestCallback, ResponseExtractor를 이용하여 Message Read/Write/Convert를 수행한다.\r\n\r\n=======================================================================================\r\n	protected <T> T doExecute(URI url, HttpMethod method, RequestCallback requestCallback,\r\n			ResponseExtractor<T> responseExtractor) throws RestClientException {\r\n\r\n		Assert.notNull(url, "''url'' must not be null");\r\n		Assert.notNull(method, "''method'' must not be null");\r\n		ClientHttpResponse response = null;\r\n		try {\r\n			ClientHttpRequest request = createRequest(url, method);\r\n			if (requestCallback != null) {\r\n				requestCallback.doWithRequest(request);\r\n			}\r\n			response = request.execute();\r\n			handleResponse(url, method, response);\r\n			if (responseExtractor != null) {\r\n				return responseExtractor.extractData(response);\r\n			}\r\n			else {\r\n				return null;\r\n			}\r\n		}\r\n		catch (IOException ex) {\r\n			throw new ResourceAccessException("I/O error on " + method.name() +\r\n					" request for \\"" + url + "\\":" + ex.getMessage(), ex);\r\n		}\r\n		finally {\r\n			if (response != null) {\r\n				response.close();\r\n			}\r\n		}\r\n	}', NULL, '', 14, 0),
(1506, 'dale.seo', '', '', '2015-07-14 21:44:25', '', 'Element가 하나인 List나 Map 만들기', 'Element가 하나인데 new로 객체를 생성하기는 아깝다.\r\n\r\n	@Test\r\n	public void singletonMap() {\r\n		Map<Integer, String> map = Collections.singletonMap(1, "abc");\r\n		System.out.println("# singletonMap : " + map);\r\n	}\r\n	\r\n	@Test\r\n	public void singletonList() {\r\n		List<String> list = Collections.singletonList("abc");\r\n		System.out.println("# singletonList : " + list);\r\n	}\r\n', NULL, '', 4, 0),
(1507, 'dale.seo', '', '', '2015-07-14 21:51:06', '', 'RestTemplate에서 URI Encoding 기준', 'String과 urlVariables(가변 인자 or 맵)을 사용하여 URL을 던질 경우에는 RestTemplate에서 URI Encoding을 하므로 주의한다.\r\nURI Encoding을 하기 싫으면 UriComponnetBuilder로 URL을 모두 expend 및 encode 시킨 후, java.net.URI 자체를 던지면 된다.\r\n\r\n\r\n===================================================================================================\r\nWorking with the URI\r\n\r\nFor each of the main HTTP methods, the RestTemplate provides variants that either take a String URI or java.net.URI as the first argument.\r\n\r\nThe String URI variants accept template arguments as a String variable length argument or as a Map<String,String>. They also assume the URL String is not encoded and needs to be encoded. For example the following:\r\n\r\nrestTemplate.getForObject("http://example.com/hotel list", String.class);\r\nwill perform a GET on http://example.com/hotel%20list. That means if the input URL String is already encoded, it will be encoded twice — i.e. http://example.com/hotel%20list will become http://example.com/hotel%2520list. If this is not the intended effect, use the java.net.URI method variant, which assumes the URL is already encoded is also generally useful if you want to reuse a single (fully expanded) URI multiple times.\r\n\r\nThe UriComponentsBuilder class can be used to build and encode the URI including support for URI templates. For example you can start with a URL String:\r\n\r\nUriComponents uriComponents = UriComponentsBuilder.fromUriString(\r\n        "http://example.com/hotels/{hotel}/bookings/{booking}").build()\r\n        .expand("42", "21")\r\n        .encode();\r\n\r\nURI uri = uriComponents.toUri();\r\nOr specify each URI component individually:\r\n\r\nUriComponents uriComponents = UriComponentsBuilder.newInstance()\r\n        .scheme("http").host("example.com").path("/hotels/{hotel}/bookings/{booking}").build()\r\n        .expand("42", "21")\r\n        .encode();\r\n\r\nURI uri = uriComponents.toUri();\r\n\r\n\r\n\r\nhttp://docs.spring.io/spring/docs/current/spring-framework-reference/html/remoting.html#rest-resttemplate-uri', NULL, '', 9, 0),
(1508, 'dale.seo', '', '', '2015-07-14 22:31:25', '', 'HttpMessageConverter 인터페이스와 임플리케이션 종류', '스프링 F/W에서 Java Object와 Http Message(Request Body/Response Body) 간의 컨버팅을 담당한다.\r\n\r\n\r\nHTTP Message Conversion\r\n\r\nObjects passed to and returned from the methods getForObject(), postForLocation(), and put() are converted to HTTP requests and from HTTP responses by HttpMessageConverters. The HttpMessageConverter interface is shown below to give you a better feel for its functionality\r\n\r\npublic interface HttpMessageConverter<T> {\r\n\r\n    // Indicate whether the given class and media type can be read by this converter.\r\n    boolean canRead(Class<?> clazz, MediaType mediaType);\r\n\r\n    // Indicate whether the given class and media type can be written by this converter.\r\n    boolean canWrite(Class<?> clazz, MediaType mediaType);\r\n\r\n    // Return the list of MediaType objects supported by this converter.\r\n    List<MediaType> getSupportedMediaTypes();\r\n\r\n    // Read an object of the given type from the given input message, and returns it.\r\n    T read(Class<T> clazz, HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException;\r\n\r\n    // Write an given object to the given output message.\r\n    void write(T t, HttpOutputMessage outputMessage) throws IOException, HttpMessageNotWritableException;\r\n\r\n}\r\nConcrete implementations for the main media (mime) types are provided in the framework and are registered by default with the RestTemplate on the client-side and with AnnotationMethodHandlerAdapter on the server-side.\r\n\r\nThe implementations of HttpMessageConverters are described in the following sections. For all converters a default media type is used but can be overridden by setting the supportedMediaTypes bean property\r\n\r\nStringHttpMessageConverter\r\n\r\nAn HttpMessageConverter implementation that can read and write Strings from the HTTP request and response. By default, this converter supports all text media types ( text/*), and writes with a Content-Type of text/plain.\r\n\r\nFormHttpMessageConverter\r\n\r\nAn HttpMessageConverter implementation that can read and write form data from the HTTP request and response. By default, this converter reads and writes the media type application/x-www-form-urlencoded. Form data is read from and written into a MultiValueMap<String, String>.\r\n\r\nByteArrayHttpMessageConverter\r\n\r\nAn HttpMessageConverter implementation that can read and write byte arrays from the HTTP request and response. By default, this converter supports all media types ( */*), and writes with a Content-Type of application/octet-stream. This can be overridden by setting the supportedMediaTypes property, and overriding getContentType(byte[]).\r\n\r\nMarshallingHttpMessageConverter\r\n\r\nAn HttpMessageConverter implementation that can read and write XML using Spring’s Marshaller and Unmarshaller abstractions from the org.springframework.oxm package. This converter requires a Marshaller and Unmarshaller before it can be used. These can be injected via constructor or bean properties. By default this converter supports ( text/xml) and ( application/xml).\r\n\r\nMappingJackson2HttpMessageConverter\r\n\r\nAn HttpMessageConverter implementation that can read and write JSON using Jackson’s ObjectMapper. JSON mapping can be customized as needed through the use of Jackson’s provided annotations. When further control is needed, a custom ObjectMapper can be injected through the ObjectMapper property for cases where custom JSON serializers/deserializers need to be provided for specific types. By default this converter supports ( application/json).\r\n\r\nMappingJackson2XmlHttpMessageConverter\r\n\r\nAn HttpMessageConverter implementation that can read and write XML using Jackson XML extension’s XmlMapper. XML mapping can be customized as needed through the use of JAXB or Jackson’s provided annotations. When further control is needed, a custom XmlMapper can be injected through the ObjectMapper property for cases where custom XML serializers/deserializers need to be provided for specific types. By default this converter supports ( application/xml).\r\n\r\nSourceHttpMessageConverter\r\n\r\nAn HttpMessageConverter implementation that can read and write javax.xml.transform.Source from the HTTP request and response. Only DOMSource, SAXSource, and StreamSource are supported. By default, this converter supports ( text/xml) and ( application/xml).\r\n\r\nBufferedImageHttpMessageConverter\r\n\r\nAn HttpMessageConverter implementation that can read and write java.awt.image.BufferedImage from the HTTP request and response. This converter reads and writes the media type supported by the Java I/O API.', NULL, '', 12, 0),
(1509, 'dale.seo', '', '', '2015-07-16 14:42:20', '', 'Filter에서 ApplicationContext 가져오기', '    @Override\r\n    public void init(FilterConfig filterConfig) throws ServletException {\r\n        super.init(filterConfig);\r\n\r\n        ApplicationContext ctx = WebApplicationContextUtils.getWebApplicationContext(filterConfig.getServletContext());\r\n        // 실행 환경의 프로파일이 local로 지정된 경우 globalCacheProcessor가 정의되지 않은 경우 plandas의 상태값을 헤더에 포함시키지 않도록 처리한다.\r\n        if(ArrayUtils.contains(ctx.getEnvironment().getActiveProfiles(), "local")) {\r\n            checkGlobalCache = ctx.containsBeanDefinition("globalCacheProcessor");\r\n        }\r\n    }', NULL, '', 4, 0),
(1510, 'dale.seo', '', '', '2015-07-16 14:54:30', '', 'org.apache.commons.lang3.ArrayUtils', 'isEmpty나 contains 적극 활용해보기', NULL, '', 2, 0),
(1511, 'dale.seo', '', '', '2015-07-16 15:30:56', '', '자바에서 제공하는 쓰레드 로컬', '다음과 같이 해놓으면 하나의 쓰레드 내에서만 공유할 수 있는 메모리 공간이 생긴다.\r\n\r\nThreadLocal<RuntimeContext> context = new ThreadLocal<RuntimeContext>();\r\n\r\n\r\n=============================================================\r\nhttps://docs.oracle.com/javase/8/docs/api/java/lang/ThreadLocal.html\r\n\r\nThis class provides thread-local variables. These variables differ from their normal counterparts in that each thread that accesses one (via its get or set method) has its own, independently initialized copy of the variable. ThreadLocal instances are typically private static fields in classes that wish to associate state with a thread (e.g., a user ID or Transaction ID).\r\n\r\nFor example, the class below generates unique identifiers local to each thread. A thread''s id is assigned the first time it invokes UniqueThreadIdGenerator.getCurrentThreadId() and remains unchanged on subsequent calls.\r\n\r\n import java.util.concurrent.atomic.AtomicInteger;\r\n\r\n public class UniqueThreadIdGenerator {\r\n\r\n     private static final AtomicInteger uniqueId = new AtomicInteger(0);\r\n\r\n     private static final ThreadLocal < Integer > uniqueNum = \r\n         new ThreadLocal < Integer > () {\r\n             @Override protected Integer initialValue() {\r\n                 return uniqueId.getAndIncrement();\r\n         }\r\n     };\r\n \r\n     public static int getCurrentThreadId() {\r\n         return uniqueId.get();\r\n     }\r\n } // UniqueThreadIdGenerator\r\n \r\nEach thread holds an implicit reference to its copy of a thread-local variable as long as the thread is alive and the ThreadLocal instance is accessible; after a thread goes away, all of its copies of thread-local instances are subject to garbage collection (unless other references to these copies exist).', NULL, '', 11, 0),
(1512, 'dale.seo', '', '', '2015-07-16 15:41:16', '', 'org.apache.commons.lang3.Validate', 'Validate.isTrue(StringUtils.isNotBlank(interfaceId), "인터페이스 아이디가 존재하지 않습니다.");', NULL, '', 2, 0),
(1513, 'dale.seo', '', '', '2015-07-18 16:47:13', '', 'handler methods 의 argument types 와 return types', 'http://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-ann-methods', NULL, '', 3, 0),
(1514, 'dale.seo', '', '', '2015-07-19 00:04:02', '', 'URL 인코딩 방법', 'URLEnocder를 이용하여 QueryString의 value 부분만 인코딩 후 스트링 결합을 해줘야 한다.\r\n\r\n\r\n========================================================================================================\r\nHandling URLs correctly in Java\r\n\r\nWhen you have mastered your black belt in URL-fu you will notice that there are still quite a few Java-specific pitfalls when it comes to URLs. The road to URL handling correctness is not for the faint of heart.\r\n\r\nDo not use java.net.URLEncoder or java.net.URLDecoder for whole URLs\r\n\r\nWe are not kidding. These classes are not made to encode or decode URLs, as their API documentation clearly says:\r\n\r\nUtility class for HTML form encoding. This class contains static methods for converting a String to the application/x-www-form-urlencoded MIME format. For more information about HTML form encoding, consult the HTML specification.\r\nThis is not about URLs. At best it resembles the query part encoding. It is wrong to use it to encode or decode entire URLs. You would think the standard JDK had a standard class to deal with URL encoding properly (part by part, that is) but either it is not there, or we have not found it, which lures a lot of people into using URLEncoder for the wrong purpose.\r\n\r\nDo not construct URLs without encoding each part\r\n\r\nAs we have already stated: fully constructed URLs cannot be URL-encoded.\r\n\r\nTake the following code for instance:\r\n\r\nString pathSegment = "a/b?c";\r\nString url = "http://example.com/" + pathSegment;\r\nIt is impossible to convert "http://example.com/a/b?c" back to what it should have been if "a/b?c" was meant to be a path segment, because it happens to be a valid URL. We have already explained this earlier.\r\n\r\nHere is the proper code:\r\n\r\nString pathSegment = "a/b?c";\r\nString url = "http://example.com/"\r\n            + URLUtils.encodePathSegment(pathSegment);\r\nWe are now using a utility class URLUtils which we had to make ourselves for lack of finding an exhaustive one available online fast enough. The previous code will give you the properly encoded URL "http://example.com/a%2Fb%3Fc".\r\n\r\nNote that the same applies to the query string:\r\n\r\nString value = "a&b==c";\r\nString url = "http://example.com/?query=" + value;\r\nThis will give you "http://example.com/?query=a&b==c" which is a valid URL, but not the "http://example.com/?query=a%26b==c" we wanted.\r\n\r\nDo not expect URI.getPath() to give you structured data\r\n\r\nSince once a URL has been decoded, syntactical information is lost, the following code is wrong:\r\n\r\nURI uri = new URI("http://example.com/a%2Fb%3Fc");\r\nfor(String pathSegment : uri.getPath().split("/"))\r\n  System.err.println(pathSegment);\r\nIt would first decode the path "a%2Fb%3Fc" into "a/b?c", then split it where it should not have been split into path segment parts.\r\n\r\nThe correct code of course uses the undecoded path:\r\n\r\nURI uri = new URI("http://example.com/a%2Fb%3Fc");\r\n\r\nfor(String pathSegment : uri.getRawPath().split("/"))\r\n  System.err.println(URLUtils.decodePathSegment(pathSegment));\r\nDo note that path parameters will still be present: deal with them if required.\r\n\r\nDo not expect Apache Commons HTTPClient''s URI class to get this right\r\n\r\nThe Apache Commons HTTPClient 3''s URI class uses Apache Commons Codec''s URLCodec for URL-encoding, which is wrong as their API documentation mentions since it is just as wrong as using java.net.URLEncoder. Not only does it use the wrong encoder, but it also decodes each part as if they all had the same reserved set.\r\n\r\n========================================================================================================\r\n\r\nURLEncoder should be the way to go. You only need to keep in mind to encode only the individual query string parameter name and/or value, not the entire URL, for sure not the query string parameter separator character & nor the parameter name-value separator character =.\r\n\r\nString q = "random word £500 bank $";\r\nString url = "http://example.com/query?q=" + URLEncoder.encode(q, "UTF-8");\r\nNote that spaces in query parameters are represented by +, not %20, which is legitimately valid. The %20 is usually to be used to represent spaces in URI itself (the part before the URI-query string separator character ?), not in query string (the part after ?).\r\n\r\nAlso note that there are two encode() methods. One without charset argument and another with. The one without charset argument is deprecated. Never use it and always specify the charset argument. The javadoc even explicitly recommends to use the UTF-8 encoding, as mandated by RFC3986 and W3C.\r\n\r\nAll other characters are unsafe and are first converted into one or more bytes using some encoding scheme. Then each byte is represented by the 3-character string "%xy", where xy is the two-digit hexadecimal representation of the byte. The recommended encoding scheme to use is UTF-8. However, for compatibility reasons, if an encoding is not specified, then the default encoding of the platform is used.\r\n\r\n========================================================================================================\r\nhttp://stackoverflow.com/questions/10786042/java-url-encoding-of-query-string-parameters', NULL, '', 17, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(1515, 'dale.seo', '', '', '2015-07-19 00:15:05', '', 'java.net.URI 사용법', '생성자에서 문법 익셉션이 발생하기 때문에 사용이 까다롭다.\r\nApache나 Spring의 빌더 유틸을 사용하는 이유이다.\r\n\r\npublic class URITest {\r\n\r\n	@Test\r\n	public void testSingleConstructor() throws URISyntaxException {\r\n		URI uri = new URI("https://user:pswd@www.host.com:8080/file;p=1?q=2#fragment");\r\n		System.out.println("# testSingleConstructor() : " + uri);\r\n		assertEquals("https://user:pswd@www.host.com:8080/file;p=1?q=2#fragment", uri.toString());\r\n	}\r\n	\r\n	@Test\r\n	public void testMultiConstructor() throws URISyntaxException {\r\n		URI uri = new URI("https", "user:pswd", "www.host.com", 8080, "/file;p=1", "q=2", "fragment");\r\n		System.out.println("# testMultiConstructor() : " + uri);\r\n		assertEquals("https://user:pswd@www.host.com:8080/file;p=1?q=2#fragment", uri.toString());\r\n	}\r\n	\r\n	@Test(expected=URISyntaxException.class)\r\n	public void testThorwURISyntaxException() throws URISyntaxException {\r\n		URI uri = new URI("http://jsonplaceholder.typicode.com?query=a&b 한글");\r\n		System.out.println("# testThorwURISyntaxException() : " + uri);\r\n	}\r\n	\r\n	@Test\r\n	public void testWithEncoding() throws URISyntaxException, UnsupportedEncodingException {\r\n		String urlStr1 = "http://jsonplaceholder.typicode.com?query=";\r\n		String urlStr2 = URLEncoder.encode("a&b 한글", "UTF-8"); // & -> %26, space -> +, Korean -> Unicode\r\n		URI uri = new URI(urlStr1 + urlStr2);\r\n		System.out.println("# testWithEncoding() : " + uri);\r\n		assertEquals("http://jsonplaceholder.typicode.com?query=a%26b+%ED%95%9C%EA%B8%80", uri.toString());\r\n	}\r\n\r\n}', NULL, '', 13, 0),
(1516, 'dale.seo', '', '', '2015-07-19 00:29:12', '', 'URL 구조 이해', 'http://blog.lunatech.com/2009/02/03/what-every-web-developer-must-know-about-url-encoding\r\n=====================================================================================', NULL, '', 7, 0),
(1517, 'dale.seo', '', '', '2015-07-19 17:25:46', '', 'UriComponents / UriComponentsBuilder', 'java.net.URI 객체를 바로 다루기에는 URI 빌딩이나 인코딩이 까다롭다.\r\n\r\nUriComponents는 URI의 각 요소(Scheme, Host, Path, Query, Fragment)를 나눠서 저장하기 때문에, 각 요소에 맞는 인코딩 룰을 사용해서 정확하게 인코딩을 해준다.\r\n인코딩을 원하면 toUri()로 URI 객체를 얻기 전에 encode()로 인코딩된 UriComponents 객체를 새로 얻는다.\r\n\r\nUriComponentsBuilder는 UriComponents를 쉽게 만들어주는 Factory 클래스이다.\r\n주의할 점은 build() 또는 build(false) 를 호출해서 UriComponents 객체를 만들면 받은 스트링 그대로 만들어주지만, (나중에 인코딩 하려면 encode() 별도로 호출해야줘야 함)\r\nbuild(true)를 호출할 경우, UriComponents  객체를 만들때 인코딩 여부 플래그에 인코딩을 이미 했다고 표시를 해놓고 진짜 맞는지 검증까지 한다.\r\n그래서 익셉션 발생 가능성이 있고, 나중에 만들어진 UriComponents  객체에 추가로 encode()를 호출해도 더 이상 인코딩이 되지 않는다.\r\n\r\n\r\n=======================================================================================================================\r\npublic class UriComponentsBuilderTest {\r\n\r\n	@Test\r\n	public void testBuildTrue() throws Exception {\r\n		UriComponentsBuilder builder = UriComponentsBuilder.newInstance();\r\n		builder.scheme("http").host("www.test.com").port(80).path("/abc");\r\n		builder.query("q=%EC%9A%B0%EB%A6%AC");\r\n\r\n		// UriComponentsBuilder에서 UriComponents를 build할 때 true 옵션을 주면,\r\n		// UriComponents에서 아무리 encode() 메서드를 호출해도 URL 인코딩을 하지 않으며,\r\n		// UriComponents에서 toUri() 메서드를 호출했을 때, 추가 URL 인코딩을 하지 않는다.\r\n		UriComponents components = builder.build(true);\r\n		components = components.encode();\r\n\r\n		URI uri = components.toUri();\r\n		assertEquals("http://www.test.com:80/abc?q=%EC%9A%B0%EB%A6%AC", uri.toString());\r\n		assertEquals("q=우리", uri.getQuery());\r\n	}\r\n\r\n	@Test\r\n	public void testBuildFalse() throws Exception {\r\n		UriComponentsBuilder builder = UriComponentsBuilder.newInstance();\r\n		builder.scheme("http").host("www.test.com").port(80).path("/abc");\r\n		builder.query("q=%EC%9A%B0%EB%A6%AC");\r\n\r\n		// UriComponentsBuilder에서 UriComponents를 build할 때 false 옵션을 주면,\r\n		// UriComponents에서 encode 메서드를 호출했을 때, 인코딩이 안 된 값이 있으면 인코딩을 하고\r\n		// UriComponents에서 toUri() 메서드를 호출했을 때, 추가 URL 인코딩을 해서 마치 2번 인코등 한 것처럼 되므로 주의한다.\r\n		UriComponents components = builder.build();\r\n		components= components.encode();\r\n\r\n		URI uri = components.toUri();\r\n		System.out.println(uri);\r\n		assertEquals("http://www.test.com:80/abc?q=%25EC%259A%25B0%25EB%25A6%25AC", uri.toString());\r\n		assertEquals("q=%EC%9A%B0%EB%A6%AC", uri.getQuery());\r\n	}\r\n}\r\n\r\n\r\n=======================================================================================================================\r\npublic class UriComponentsTest {\r\n	\r\n	@Test\r\n	public void testWithoutUriTempalte() {\r\n		System.out.println("# Before Encoding");\r\n		String uriString = "http://www.host.com";\r\n		UriComponents uriComponets = UriComponentsBuilder.fromUriString(uriString)\r\n				.path("/aaa+bbb ccc&ddd")\r\n				.queryParam("query", "aaa+bbb ccc&ddd", "aaa+bbb ccc&ddd")\r\n				.build();\r\n		System.out.println("## str : " + uriComponets.toUriString());\r\n		System.out.println("## uri : " + uriComponets.toUri());\r\n		\r\n		System.out.println("# After Encoding");\r\n		UriComponents encUriComponets = uriComponets.encode();\r\n		System.out.println("## str : " + encUriComponets.toUriString());\r\n		System.out.println("## uri : " + encUriComponets.toUri());\r\n	}\r\n	\r\n	@Test\r\n	public void testWithUriTempalte() {\r\n		System.out.println("# Before Encoding");\r\n		String uriString = "http://www.host.com";\r\n		UriComponents uriComponets = UriComponentsBuilder.fromUriString(uriString)\r\n				.path("/aaa+bbb ccc&ddd")\r\n				.query("query1={query1}&query2={query2}")\r\n				.buildAndExpand("aaa+bbb ccc&ddd", "aaa+bbb ccc&ddd");\r\n		System.out.println("## str : " + uriComponets.toUriString());\r\n		System.out.println("## uri : " + uriComponets.toUri());\r\n		\r\n		System.out.println("# After Encoding");\r\n		UriComponents encUriComponets = uriComponets.encode();\r\n		System.out.println("## str : " + encUriComponets.toUriString());\r\n		System.out.println("## uri : " + encUriComponets.toUri());\r\n	}\r\n	\r\n	@Test\r\n	public void fromUriStringWithEncoding() {\r\n		String uriString = "/hotels/42?filter={value}";\r\n		UriComponents uriComponents = UriComponentsBuilder.fromUriString(uriString).buildAndExpand("hot&cold");\r\n		URI uri = uriComponents.encode().toUri();\r\n		System.out.println("# uri : " + uri);\r\n		assertEquals("/hotels/42?filter=hot%26cold", uri.toString());\r\n	}\r\n\r\n	@Test\r\n	public void fromUriStringWithoutEncoding() {\r\n		String uriString = "http://example.com/hotels/{hotel}/bookings/{booking}";\r\n		UriComponents uriComponents = UriComponentsBuilder.fromUriString(uriString).build();\r\n		URI uri = uriComponents.expand("42", "21").toUri();\r\n		System.out.println("# uri : " + uri);\r\n		assertEquals("http://example.com/hotels/42/bookings/21", uri.toString());\r\n	}\r\n	\r\n	@Test\r\n	public void newInstance() {\r\n		UriComponents uriComponents = UriComponentsBuilder.newInstance()\r\n				.scheme("http")\r\n				.host("example.com")\r\n				.path("/hotels/{hotel}/bookings/{booking}")\r\n				.build();\r\n		URI uri = uriComponents.expand("42", "21").encode().toUri();\r\n		System.out.println("# uri : " + uri);\r\n		assertEquals("http://example.com/hotels/42/bookings/21", uri.toString());\r\n	}\r\n	\r\n}', NULL, '', 21, 0),
(1518, 'dale.seo', '', '', '2015-07-21 14:04:32', '', 'Mockito thenXXX, doXXX 메서드 종류', '[ 반환 타입 있는 메서드 - thenXXX ]\r\nthenReturn  : 지정된 값 반환\r\nthenThrow : 지정된 예외 발생\r\nthen / thenAnswer : 반환값 생성 로직 지정\r\nthenCallRealMethod() 원래 메서드 호출\r\n\r\n[ 반환 타입 없는 메서드 - doXXX ]\r\ndoThrow\r\ndoAnswer\r\ndoCallRealMethod\r\ndoNothing : ex] doNothing().when(appender).append(anyString());', NULL, '', 7, 0),
(1519, 'dale.seo', '', '', '2015-07-21 19:19:02', '', 'java.util.Formatter 문법', 'http://docs.oracle.com/javase/7/docs/api/java/util/Formatter.html\r\n===============================================================================================\r\n\r\n<< 기본 형태 >>\r\n%[argument_index$][flags][width]conversion\r\n\r\n\r\n<< Conversions >>\r\nConversion	Argument Category	Description\r\n''b'', ''B''	general	If the argument arg is null, then the result is "false". If arg is a boolean or Boolean, then the result is the string returned by String.valueOf(arg). Otherwise, the result is "true".\r\n''h'', ''H''	general	If the argument arg is null, then the result is "null". Otherwise, the result is obtained by invoking Integer.toHexString(arg.hashCode()).\r\n''s'', ''S''	general	If the argument arg is null, then the result is "null". If arg implements Formattable, then arg.formatTo is invoked. Otherwise, the result is obtained by invoking arg.toString().\r\n''c'', ''C''	character	The result is a Unicode character\r\n''d''	integral	The result is formatted as a decimal integer\r\n''o''	integral	The result is formatted as an octal integer\r\n''x'', ''X''	integral	The result is formatted as a hexadecimal integer\r\n''e'', ''E''	floating point	The result is formatted as a decimal number in computerized scientific notation\r\n''f''	floating point	The result is formatted as a decimal number\r\n''g'', ''G''	floating point	The result is formatted using computerized scientific notation or decimal format, depending on the precision and the value after rounding.\r\n''a'', ''A''	floating point	The result is formatted as a hexadecimal floating-point number with a significand and an exponent\r\n''t'', ''T''	date/time	Prefix for date and time conversion characters. See Date/Time Conversions.\r\n''%''	percent	The result is a literal ''%'' (''\\u0025'')\r\n''n''	line separator	The result is the platform-specific line separator\r\n\r\n\r\n<< Flags >>\r\n\r\nThe following table summarizes the supported flags. y means the flag is supported for the indicated argument types.\r\n\r\nFlag	General	Character	Integral	Floating Point	Date/Time	Description\r\n''-''	y	y	y	y	y	The result will be left-justified.\r\n''#''	y1	-	y3	y	-	The result should use a conversion-dependent alternate form\r\n''+''	-	-	y4	y	-	The result will always include a sign\r\n''  ''	-	-	y4	y	-	The result will include a leading space for positive values\r\n''0''	-	-	y	y	-	The result will be zero-padded\r\n'',''	-	-	y2	y5	-	The result will include locale-specific grouping separators\r\n''(''	-	-	y4	y5	-	The result will enclose negative numbers in parentheses', NULL, '', 4, 0),
(1520, 'dale.seo', '', '', '2015-07-21 21:53:27', '', 'Hamcrest 단위 테스트', 'https://objectpartners.com/2013/09/18/the-benefits-of-using-assertthat-over-other-assert-methods-in-unit-tests/\r\n\r\n\r\npackage seo.dale.org.hamcrest;\r\n\r\nimport static org.hamcrest.CoreMatchers.allOf;\r\nimport static org.hamcrest.CoreMatchers.any;\r\nimport static org.hamcrest.CoreMatchers.anyOf;\r\nimport static org.hamcrest.CoreMatchers.instanceOf;\r\nimport static org.hamcrest.CoreMatchers.is;\r\nimport static org.hamcrest.CoreMatchers.not;\r\nimport static org.hamcrest.CoreMatchers.notNullValue;\r\nimport static org.hamcrest.CoreMatchers.nullValue;\r\nimport static org.hamcrest.CoreMatchers.sameInstance;\r\nimport static org.hamcrest.Matchers.containsString;\r\nimport static org.hamcrest.Matchers.endsWith;\r\nimport static org.hamcrest.Matchers.equalToIgnoringCase;\r\nimport static org.hamcrest.Matchers.greaterThan;\r\nimport static org.hamcrest.Matchers.lessThan;\r\nimport static org.hamcrest.Matchers.startsWith;\r\nimport static org.junit.Assert.assertThat;\r\nimport static org.junit.matchers.JUnitMatchers.hasItem;\r\nimport static org.junit.matchers.JUnitMatchers.hasItems;\r\n\r\nimport java.util.Arrays;\r\n\r\nimport org.junit.Test;\r\n\r\npublic class CoreMatchersTest {\r\n	\r\n	@SuppressWarnings("unchecked")\r\n	@Test\r\n	public void testLogicalMatchers() {\r\n		assertThat("123", is("123"));\r\n		assertThat("123", not("456"));\r\n		assertThat("This is an apple.", allOf(containsString("This"), containsString("apple")));\r\n		assertThat("test", anyOf(is("test2"), containsString("te")));\r\n	}\r\n	\r\n	@Test\r\n	public void testJUnitEquivalent() {\r\n		assertThat(new String[]{"a", "b"}, is(new String[]{"a", "b"})); // assertArrayEquals\r\n		assertThat(true, is(true)); // assertTrue\r\n		assertThat(false, is(false)); // assertFalse\r\n		assertThat(null, nullValue()); // assertNull\r\n		assertThat("", notNullValue()); // assertNotNull\r\n		assertThat(1, sameInstance(1)); // assertSame\r\n		assertThat(2, not(sameInstance(1))); // assertNotSame\r\n	}\r\n	\r\n	@Test\r\n	public void testString() {\r\n		assertThat("abcde", equalToIgnoringCase("ABCDE"));\r\n		assertThat("abcde", containsString("c"));\r\n		assertThat("abcde", startsWith("ab"));\r\n		assertThat("abcde", endsWith("de"));\r\n	}\r\n	\r\n	@Test\r\n	public void testObject() {\r\n		assertThat("abcde", any(String.class));\r\n		assertThat("abcde", instanceOf(String.class));\r\n	}\r\n	\r\n	@Test\r\n	public void testCollection() {\r\n		assertThat(Arrays.asList("a", "b", "c"), hasItem("b"));\r\n		assertThat(Arrays.asList("a", "b", "c"), hasItems("b", "c"));\r\n	}\r\n	\r\n	@Test\r\n	public void testComparision() {\r\n		assertThat(2, greaterThan(1));\r\n		assertThat(1, lessThan(2));\r\n	}\r\n\r\n}', NULL, '', 7, 0),
(1521, 'dale.seo', '', '', '2015-07-22 20:02:29', '', 'StringHttpMessageConverter 사용시 Response의 Accept-Charset 헤더값 관련', 'writeAcceptCharset이 기본으로 true로 설정이 되어 있는데 이럴 경우 Response의 Accept-Charset 헤더값을 무식하게 길게 세팅한다.\r\n아래처럼 false로 설정해주면 Accep-Charset 헤더를 추가로 세팅하지 않는다.\r\n\r\n\r\n\r\n        <bean class="org.springframework.http.converter.StringHttpMessageConverter">\r\n        	<property name="writeAcceptCharset" value="false" />\r\n        </bean>\r\n\r\n\r\n\r\n=====================================================\r\n\r\n\r\n	protected void writeInternal(String s, HttpOutputMessage outputMessage) throws IOException {\r\n		if (this.writeAcceptCharset) {\r\n			outputMessage.getHeaders().setAcceptCharset(getAcceptedCharsets());\r\n		}\r\n		Charset charset = getContentTypeCharset(outputMessage.getHeaders().getContentType());\r\n		StreamUtils.copy(s, charset, outputMessage.getBody());\r\n	}\r\n\r\n\r\nhttp://forum.spring.io/forum/spring-projects/integration/130639-accept-charset-request-http-header-sent-in-the-response', NULL, '', 4, 0),
(1522, 'dale.seo', '', '', '2015-07-23 11:14:03', '', '[Spring MVC] DispatcherServlet 분석', 'Spring MVC를 잘 이해하려면 DispatherServlet에서 MVC의 다른 컴포넌트들을 어떻게 호출해서 전체 흐름을 가져가는지 이해해야 한다.\r\n\r\n# doService()\r\n - 서블릿에 의해서 호출되는 메서드\r\n - 내부적으로 doDispatch() 메서드를 호출한다.\r\n\r\n# doDispatch()\r\n - 가장 중요한 큰 흐름을 가지고 있는 메서드\r\n 1) HandlerChain (Interceptor + Controller) 결정\r\n 2) Interceptor의 preHandle 메서드 연쇄 호출\r\n\r\n===================================================================================\r\n				if (!mappedHandler.applyPreHandle(processedRequest, response)) {\r\n					return;\r\n				}\r\n===================================================================================\r\n\r\n 3)  Controller의 Handler 메서드 호출\r\n\r\n===================================================================================\r\n				try {\r\n					// Actually invoke the handler.\r\n					mv = ha.handle(processedRequest, response, mappedHandler.getHandler());\r\n				}\r\n				finally {\r\n					if (asyncManager.isConcurrentHandlingStarted()) {\r\n						return;\r\n					}\r\n				}\r\n===================================================================================\r\n\r\n4) Interceptor의 postHandle 메서드 연쇄 호출\r\n\r\n===================================================================================\r\n				applyDefaultViewName(request, mv);\r\n				mappedHandler.applyPostHandle(processedRequest, response, mv);\r\n===================================================================================', NULL, '', 5, 0),
(1523, 'dale.seo', '', '', '2015-07-23 19:12:22', '', 'doFilter() 이후에 Response 에서 헤더를 세팅해도 안 먹을 수 있는 이유', 'http://grokbase.com/t/tomcat/users/08a7fjfban/setheader-after-dofilter-delegation-in-filter\r\n=====================================================================\r\n\r\nIn the Java servlet view of things, a filter is a "wrapper", within\r\nwhich the other filters and the webapp run.\r\nIt''s like an onion : your filter is the outer layer, within which there\r\nare possibly further layers (other filters), and at the center is the\r\nwebapp. When your filter calls doFilter(), it executes all its inner\r\nlayers in one go. The bummer is that, unless you take pains to change\r\nthat, each of these layers has a direct access to the output buffers,\r\nwhich live outside the onion. So unless you prevent them from doing\r\nthat, they will start putting bytes there, and by the time your\r\ndoFilter() returns, it''s too late to change that.\r\n\r\nWhen you execute doFilter(), in fact you execute, at that point, all the\r\nfurther filters that are in the chain, and the webapp at the deepest\r\nlevel. If any of these starts sending output, then by the time the\r\ndoFilter() returns, that output is already "past" your filter, and there\r\nis nothing you can do anymore to modify it.\r\n\r\nIf you want something else to happen, then you have to do something like\r\nthis :\r\n- in your filter, subclass the HttpRequest, say as "myHttpRequest". In\r\nthis subclass, redefine the methods that the underlying filters and\r\nwebapp will (presumably) use to send output to the buffer. In these\r\nredefined methods, you can then do whatever you want to transform what\r\nthe application sends out via these methods.\r\n- then, instead of passing the original HttpRequest to the doFilter(),\r\npass your own myHttpRequest instance of it.\r\n\r\nThis way, whenever the application "thinks" it is just using the (say)\r\nHttpRequest.setHeader() method, it is in fact using *your*\r\nmyHttpRequest.setHeader() method, in which you can catch and "pervert"\r\nwhatever you want, before passing it on to the "real"\r\nHttpRequest.setHeader() method.', NULL, '', 2, 0),
(1524, 'dale.seo', '', '', '2015-07-23 20:00:45', '', 'Servlet 에서 Response 가 Commit 되는 시점', 'Servlet 에서 Response 를 Commit 하는 시점이 매우 중요하다. (알아내는 방법 : HttpServletResponse.isCommitted())\r\nResponse가 Commit 되는 시점은 ServletOutputStream 객체에 flush() 또는 close() 메소드를 호출할 때이다.\r\n그리고 Response가 Commit 된 이후로 Reseponse 객체에 세팅해주는 모든 헤더와 바디가 무시된다.\r\n\r\n가장 흔한 이슈가 Sevlet Filter의 doFilter() 호출 이후에 Response 객체를 업데이트하면 반영이 안 되는 것이다.\r\n일반 서블릿을 사용하면 명시적으로 flush()나 close()를 호출하지 않는 이상 Response Commit 이 일어나지 않지만,\r\n스프링의 DispatcherServldet를 사용하면 HandlerChain(Intercetpors + Controller)의 마지막 단계에서 HttpMessageConverter로 Rseponse를 쓰고 flush 해버린다.\r\n따라서 스프링 MVC를 경우에는 Resepon 객체 업데이트는 Filter 가 아닌 Interceptor 에서 해줘야 한다.', NULL, '', 9, 0),
(1525, 'dale.seo', '', '', '2015-07-23 22:20:12', '', 'Cotroller의 @ResponesBody를 사용할 때 Interceptor의 postHandle() 메서드가 오작동함', '# 해결책 : http://mtyurt.net/2015/07/20/spring-modify-response-headers-after-processing/\r\n\r\n--------------------------------------------------------------------------------------------------------------------------------------------------\r\n@ControllerAdvice\r\npublic class HeaderModifierAdvice implements ResponseBodyAdvice<Object> {\r\n\r\n    @Override\r\n    public boolean supports(MethodParameter returnType, Class<? extends HttpMessageConverter<?>> converterType) {\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public Object beforeBodyWrite(Object body, MethodParameter returnType, MediaType selectedContentType, Class<? extends HttpMessageConverter<?>> selectedConverterType, ServerHttpRequest request, ServerHttpResponse response) {\r\n        response.getHeaders().add("dummy-header","dummy-value");\r\n        return body;\r\n    }\r\n}\r\n\r\n\r\n\r\n----------------------------------------------------------------------------------------------------------------\r\n\r\n\r\npostHandler로 Response Header를 추가해줄 때가 있는데,\r\nCotroller의 리턴 타입이 @ResponseBody인 경우에는 추가된 값들이 무시가 된다.\r\nHttpMessageConverter에서 먼저 Response를 Commit 하기 때문이다.\r\n\r\n===========================================================================================================================================\r\nNote that the postHandle method of HandlerInterceptor is not always ideally suited for use with @ResponseBody and ResponseEntity methods. In such cases an HttpMessageConverter writes to and commits the response before postHandle is called which makes it impossible to change the response, for example to add a header. Instead an application can implement ResponseBodyAdvice and either declare it as an @ControllerAdvice bean or configure it directly on RequestMappingHandlerAdapter.\r\n\r\n\r\nhttp://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-handlermapping-interceptor', NULL, '', 9, 0),
(1526, 'dale.seo', '', '', '2015-07-24 10:23:29', '', '컨트롤러에서 ResponseEntity를 리턴 시 기존 Response Header 값을 overwrite 하는 방법', 'HttpHeaders를 사용하면 안되고, HttpServletRespone를 직접 조작해야 한다.\r\n\r\n	@ResponseBody\r\n	public ResponseEntity<String> handle(HttpServletResponse response) {\r\n                String result = "This is result.";\r\n                // 아래와 같이 세팅하면 기존에 HttpServletResponse에 세팅해놨던 동일한 이름의 헤더에 기존 값에 add 가 된다.\r\n       		// HttpHeaders headers = new HttpHeaders();\r\n                // headers.set("x-sac-result-code", "SUCC");\r\n		// ResponseEntity<Stirng> responseEntity = new ResponseEntity<String>(result, headers, HttpStatus.OK);\r\n		\r\n                // 아래와 같이 세팅하면 기존에 HttpServletResponse에 세팅해놨던 동일한 이름에 헤더값을 overwrite 한다.\r\n       		response.setHeader("x-sac-result-code", "SUCC");\r\n		ResponseEntity<Stirng> responseEntity = new ResponseEntity<String>(result, HttpStatus.OK);\r\n		return responseEntity;\r\n	}', NULL, '', 3, 0),
(1527, 'dale.seo', '', '', '2015-07-29 15:10:50', '', 'RestTemplate 에러 처리', 'RestTemplate의 내부 핵심 메서드인 doExecute()를 호출하면 RestClientException이 자식 예외가 발생할 수 있다.\r\n첫번 째 경우는, ClientHttpResponse 응답 조차 받지 못한 상황에서 IOException 때문에 발생하는 ResourceAccessException이고,\r\n두번 째 경우는, ClientHttpResponse 응답을 받은 상태에서 RestTemplate에 세팅된 ResponseErrorHandler에 의해 hasError()로 판별되는 경우, handlerError()의 이해 발생되는 HttpClientErrorException, HttpServerErrorException, RestClientException("Unknown status code [" + statusCode + "]") 이다.\r\n\r\nResponseErrorHandler는 DefaultResponseErrorHandler 대신에 직접 구현할 수 있기 때문에 변형이 가능하다.\r\n\r\n- ResourceAccessException : I/O Exception이 발생했을 때 (Socket, SSL 관련), ClientHttpResponse 응답 조차 받지 못한 상황에서 발생하기 때문에 ResponseErrorHandler를 탈 수도 없다.\r\n- HttpClientErrorException : 4XX 응답 코드가 왔을 때, DefaultResponseErrorHandler에서 의해서 throw 된다.\r\n- HttpServerErrorException : 5XX 응답 코드가 왔을 때, DefaultResponseErrorHandler에서 의해서 throw 된다.\r\n- RestClientException : 알수없는 응답 코드가 왔을 때, DefaultResponseErrorHandler에서 의해서 throw 된다.\r\n\r\n=======================================================================================\r\nDefaultResponseErrorHandler\r\n=======================================================================================\r\n	public void handleError(ClientHttpResponse response) throws IOException {\r\n		HttpStatus statusCode = getHttpStatusCode(response);\r\n		switch (statusCode.series()) {\r\n			case CLIENT_ERROR:\r\n				throw new HttpClientErrorException(statusCode, response.getStatusText(),\r\n						response.getHeaders(), getResponseBody(response), getCharset(response));\r\n			case SERVER_ERROR:\r\n				throw new HttpServerErrorException(statusCode, response.getStatusText(),\r\n						response.getHeaders(), getResponseBody(response), getCharset(response));\r\n			default:\r\n				throw new RestClientException("Unknown status code [" + statusCode + "]");\r\n		}\r\n	}\r\n\r\n=======================================================================================\r\nRestTemplate\r\n=======================================================================================\r\n	protected <T> T doExecute(URI url, HttpMethod method, RequestCallback requestCallback,\r\n			ResponseExtractor<T> responseExtractor) throws RestClientException {\r\n\r\n		Assert.notNull(url, "''url'' must not be null");\r\n		Assert.notNull(method, "''method'' must not be null");\r\n		ClientHttpResponse response = null;\r\n		try {\r\n			ClientHttpRequest request = createRequest(url, method);\r\n			if (requestCallback != null) {\r\n				requestCallback.doWithRequest(request);\r\n			}\r\n			response = request.execute();\r\n			handleResponse(url, method, response);\r\n			if (responseExtractor != null) {\r\n				return responseExtractor.extractData(response);\r\n			}\r\n			else {\r\n				return null;\r\n			}\r\n		}\r\n		catch (IOException ex) {\r\n			throw new ResourceAccessException("I/O error on " + method.name() +\r\n					" request for \\"" + url + "\\":" + ex.getMessage(), ex);\r\n		}\r\n		finally {\r\n			if (response != null) {\r\n				response.close();\r\n			}\r\n		}\r\n	}\r\n\r\n	protected void handleResponse(URI url, HttpMethod method, ClientHttpResponse response) throws IOException {\r\n		ResponseErrorHandler errorHandler = getErrorHandler();\r\n		boolean hasError = errorHandler.hasError(response);\r\n		if (logger.isDebugEnabled()) {\r\n			try {\r\n				logger.debug(method.name() + " request for \\"" + url + "\\" resulted in " +\r\n						response.getRawStatusCode() + " (" + response.getStatusText() + ")" +\r\n						(hasError ? "; invoking error handler" : ""));\r\n			}\r\n			catch (IOException ex) {\r\n				// ignore\r\n			}\r\n		}\r\n		if (hasError) {\r\n			errorHandler.handleError(response);\r\n		}\r\n	}', NULL, '', 15, 0),
(1528, 'dale.seo', '', '', '2015-07-30 16:23:51', '', '[Spring Context] PropertiesFactoryBean', '클래스 패스에 있는 .properteis 파일을 Properties 객체로 등록하기 위해 사용한다.\r\n\r\n\r\n\r\n        <bean id="config" class="org.springframework.beans.factory.config.PropertiesFactoryBean">\r\n            <property name="fileEncoding" value="UTF-8" />\r\n            <property name="locations" >\r\n                <list merge="true"><value>classpath:conf/external.local.properties</value></list>\r\n            </property>\r\n        </bean>', NULL, '', 3, 0),
(1529, 'dale.seo', '', '', '2015-07-30 18:01:16', '', '여러 개의 property-placeholder를 등록할 때 지켜야 할 사항', 'Multiple <property-placeholder>\r\n\r\nIn case multiple <property-placeholder> elements are present in the Spring context, there are a few best practices that should be followed:\r\n\r\nthe order attribute needs to be specified to fix the order in which these are processed by Spring\r\nall property placeholders minus the last one (highest order) should have ignore-unresolvable=”true” to allow the resolution mechanism to pass to others in the context without throwing an exception\r\n\r\n\r\n우선 순위가 높은 Property Placeholder에 ignore-unresolvable="true" 가 아니면 그 다음 Property Placehodler까지 찾아보지 않고 예외를 발생시키기 때문에,\r\n맨 마지막 Property Placeholder에만 ignore-unresolvable="false" (default)로 설정한다.\r\n==========================================================================================================\r\n\r\n	<!-- Common Properties -->\r\n    <context:property-placeholder order="1" location="classpath:properties/app.cmn.properties" ignore-unresolvable="true" />\r\n	<!-- Profile-specific Properties -->\r\n    <context:property-placeholder order="2" properties-ref="propertiesForEc" />', NULL, '', 4, 0),
(1553, 'dale.seo', '', '', '2015-08-22 18:32:27', '', '[책] Implementation Patterns', '- 메소드 이름을 지을 때는 상세 구현 전략이 아니라, 사용자 입장에서의 의도를 쉽게 파악할 수 있게 해야한다. (메소드 내부 정보 전달을 자제하는 것이 낫다.)\r\n- 메소드 반환 타입은 구상 클래스는 기본 타입이 아닌 가장 추상적인 타입(인터페이스, 추상 클래스)을 사용해야지 추후 반환 타입을 유연하게 변경할 수 있다.\r\n- 동등성 메소드 : eqauls() 불필요한 연산을 줄이기 위해 클래스 비교 먼저 할 것, hashCode() SET이나 HashTable에 입력할 때 중복 여부를 따지는 기준 메소드\r\n\r\n* 유연한 버전업을 위한 프레임워크 설계\r\n - 사용 스타일\r\n  . 인스턴스화(instantiation), 설정(configuration), 구현(implementation)\r\n  . 클리이언트가 로직의 변형을 필요로 하지 않고 데이터의 변형만을 필요로 하는 경우 (ex. new ServerSokcet())\r\n  . 설정은 데이터뿐만 아니라 로직의 변형도 지원하므로 인스턴스화도다 유연하다 그러나 설정을 사용해서 클라이언트 객체를 호출하는 경우, 계속해서 같은 인터페이스를 사용해야  하므로 프레임워크를 발전시키는데 제한이 생기고 클라이언트 코드에 대한 호환성을 보장해주기 어려워진다. (ex. TreeSet 에서 Comparator를 설정할 수 있음)\r\n  . 구현은 클라이언트가 설정에서 제공하는 것 이상으로 많은 종류의 로직의 변형을 필요로 하는 경우 사용한다. 클라이언트는 프레임워크에서 사용할 클래스를 구현해서 프레임워크에 전달한다. (ex. 인터페이스만 제공) 구현은 미래에 있을 프레임워크에 설계 변경을 가장 크게 제한한다. 호환성을 보장하기 위해서는 프레임워크에서 제공하는 상위 클래스나 인터페이스를 모두 그대로 유지해야 하기 때문이다. 프레임워크 추상화에서 세부 사항을 노출하는 것은 양남을 검과 같다. 이를 통해 클라이언트는 자신의 코드르 ㄹ사용할 수 있게 되지만, 프레임워크 개발자는 기존 클라이언트 코드와의 호환성을 포기하지 않는 이상 앞으로도 같은 인터페이스를 계속 사용해야 하기 때문이다.', NULL, '', 8, 0),
(1554, 'dale.seo', '', '', '2015-08-22 18:34:36', '', 'ArrayList vs. LinkedList', 'ArrayList는 원소 접근이 빠르고 원소 추가 및 제거가 느린 데 반해,\r\nLinkedList는 원소 접근이 느리지만 원소 추가와 제거가 빠르다.\r\nadd()나 remove()를 많이 사용하는 프로그램이라면 ArrayList를 LinkedList로 바꾸는 것을 고려하라.', NULL, '', 3, 0),
(1555, 'dale.seo', '', '', '2015-08-22 18:37:59', '', '단일 원소 컬렉션', '하나의 원소를 전달해야 하지만 컬렉션 인터페이스를 사용해야 하는 경우,\r\nSet을 반환하는 Collections.singleton()을 사용할 수 있다.\r\nList나 Map을 반환하는 유사한 메소드도 있다.\r\n이때 봔환되는 컬렉션은 모두 수정할 수 없다.\r\n\r\nSet<String> longway = new HashSet<Stirng>();\r\nlongWay.add("a");\r\n=======================================\r\nSet<String> shortway = Collections.singleton("a");', NULL, '', 9, 0),
(1556, 'dale.seo', '', '', '2015-08-22 18:40:48', '', '모리스 차트 자바스크립트 라이브러리', 'http://morrisjs.github.io/morris.js/\r\n\r\n차트 UI 만들 때 활용해볼 것', NULL, '', 2, 0),
(1557, 'dale.seo', '', '', '2015-08-25 09:30:53', '', 'Python 참고자료', '* 참고자료\r\n\r\n파이썬 재단 \r\nhttps://www.python.org/\r\n\r\nhttp://microsoft.github.io/PTVS/\r\n\r\nhttps://www.visualstudio.com/ko-kr\r\n\r\n뷰티플스프\r\nhttp://www.crummy.com/software/BeautifulSoup/\r\n\r\n참고도서\r\n파이썬 완벽 가이드 \r\n파이썬 라이브러리를 활용한 데이터 분석\r\n해커의 언어, 치명적 파이썬 \r\n\r\nDjango Framework 다운로드 \r\nhttps://www.djangoproject.com/\r\n\r\n아나콘다 다운로드 \r\nhttp://continuum.io/downloads', NULL, '', 5, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(1558, 'dale.seo', '', '', '2015-08-25 10:33:04', '', 'Python 함수정리', 'help(object) : 내장함수, 객체의 도움말 출력\r\nhelp() : 내장함수, help 함수 실행.\r\ndivmod(x,y) : 내장함수, 몫과 나머지 한번에 계산, 튜플로 리턴\r\ntype(object) : 내장함수, 자료형 확인\r\ndir([object]) : 내장함수, 객체의 어트리뷰트(함수, 변수 등의 이름들)을 리턴한다. 그리고 객체의 클래스 속성 및 슈퍼\r\n클래스의 속성까지 한꺼번에 표시함.\r\nexecfile(filename[,globals, [locals]]) : 내장함수, 인터프리터 안에서 파일을 실행\r\neval(source[,globals, [locals]]) : 내장함수, 문자열로 된 파이썬 식 실행\r\nexec code([in globals, [locals]]) : 내장함수, 문자열로 된 문 실행\r\ncompile(string, filename, kind) : 내장함수, 문자열을 컴파일하여 파이썬 코드를 리턴한다.\r\nraw_input([prompt]) : 내장함수, 키보드로부터 문자열을 읽어 들임\r\ninput([prompt]) : 내장함수, 입력된 문자열을 파이썬 식으로 처리해서 넘겨준다.\r\npprint.pprint(object, ...) : pprint 모듈, 복잡한 자료를 출력할 때 씀\r\nlen(object) : 내장함수, 문자열의 길이 출력\r\nsys.getrefcount(object) : sys 모듈, 레퍼런스 카운트 값을 확인\r\nid(object) : 내장함수, 객체의 주소를 식별\r\nrange([start,] stop [,step]) : 내장함수, start 부터 stop 까지 step 만큼의 범위로 리스트 생성\r\nsys.maxint : sys모듈, 최대 정수 값을 가진 상수.\r\nenumerate(iterable) : 내장함수, (인덱스, 요소 값)의 튜플 자료로 값을 넘겨줌.\r\ncomplex(real, [imag]) : 내장함수, 복소수를 만드는 함수. imag 없이 real 이 문자열일 경우 복소수형으로 변환될 수 있으면 변환.\r\n<complex>.real : 복소수의 실수 부분을 취함.\r\n<complex>.imag : 복소수의 허수 부분을 취함.\r\n<complex>.conjugate() : 복소수의 켤레 복소수를 취함\r\ndecimal.Decimal(object) : decimal 모듈, 오차 없이 정확한 수를 취함. 단, object 에는 정수를 그대로 쓸 수 있지만\r\n실수는 문자열로 표현해야 한다.\r\nabs(number) : 내장함수, 수의 절대값\r\nint(x, [base]) : 내장함수, base 진법의 수를 10진 정수형으로 변환. x 가 문자열일 경우 파이썬 정수형으로 변환될 수\r\n있으면 정수로 변환.\r\nlong(x, [base]) : 내장함수, base 진법의 수를 10진 long 형으로 변환. x 가 문자열일 겨우 파이썬 롱형으로 변환될 수 있으면 롱형으로 변환.\r\nfloat(x) : 내장함수, 수를 실수형으로 변환. x 가 문자열일 경우 파이썬 실수형으로 변환될 수 있으면 실수형으로 변환.\r\npow(x, y, [z]) : 내장함수, (x ** y) % z 로 리턴\r\n\r\nvars([object]) : 내장함수, object 없이 쓸 경우 지역 변수의 사전을 넘김. object 가 들어가면 그 객체(모듈, 클래스,\r\n클래스 인스터스)의 사전을 넘김.\r\nlocals() : 내장함수, 지역 변수의 사전을 넘김.\r\nstring.Template(string) : string 모듈, 단순한 문자열 대치 기능. string 에는 ''$키'' 의 형식으로 입력하고,\r\n(object).substitute(dict) 을 사용 하여 키에 대응 하는 값을 대치시킴.\r\nstr.upper() : 대문자로 변환.\r\nstr.lower() : 소문자로 변환.\r\nstr.swapcase() : 대소문자 전환.\r\nstr.capitalize() : 첫 문자만 대문자로 변환.\r\nstr.title() : 단어의 첫 문자를 대문자로 변환.\r\nstr.count(sub[, start[,end]]) : start 부터 end 까지 sub 에 있는 문자열이 발생한 횟수를 리턴.\r\nstr.find(sub[, start[,end]]]) : start 부터 end 까지 sub 에 있는 문자열의 옵셋을 리턴. 단, 최초로 발견된 문자열\r\n의 옵셋만. 찾는 문자열이 없으면 -1 리턴.\r\nstr.rfind(sub[, start[,end]]) : find와 같지만 문자열의 뒤쪽부터 탐색.\r\nstr.index(sub[, start[,end]]) : find와 같지만 찾는 문자열이 없을 경우 예외를 일으킨다.\r\nstr.rindex(sub[, start[,end]]) : index와 같지만 문자열의 뒤쪽부터 탐색.\r\nstr.startswith(prefix[, start[,end]]) : start 부터 prefix로 시작하는 문자열인지 아닌지를 참, 거짓으로 리턴.\r\nstr.endswith(suffix[, start[,end]]) : start 부터 subfix로 끝나는 문자열인지 아닌지를 참, 거짓으로 리턴.\r\nstr.strip([chars]) : chars 의 문자를 좌우에서 하나씩 없애나감.\r\nstr.rstrip([chars]) : chars 의 문자를 오른쪽에서 하나씩 없애나감.\r\nstr.lstrip([chars]) : chars 의 문자를 왼쪽에서 하나씩 없애나감.\r\nstr.replace(old, new[, count]) : old 의 문자를 new의 문자로 count 만큼 바꾼다.\r\nstr.split([sep [, maxsplit]]) : sep 으로 문자열을 maxsplit 만큼 분리.\r\nstr.join(sequence) : sequence 를 문자열로 결합.\r\nstr.splitlines([keepends]) : 라인 단위로 분리. keepends 가 True 이면 /n 을 유지. 거짓이면 제거.\r\nstr.rsplit([sep [,maxsplit]]) : 오른쪽 부터 split 기능 처리.\r\nstr.center(width[, fillchar]) : 전체 width 에서 가운데에 정렬 시킨다. 이때 좌우 부분을 fillchar 로 채운다.\r\nstr.ljust(width[, fillchar]) : 전체 width 에서 왼쪽에 정렬 시킨다. 이때 우측 부분을 fillchar 로 채운다.\r\nstr.rjust(width[, fillchar]) : 전체 width 에서 오른쪽에 정렬 시킨다. 이때 좌측 부분을 fillchar 로 채운다.\r\nstr.expandtabs([tabsize]) : 문자열 내의 탭(\\t)을 tabsize 만큼 공배으로 변경. 기본 값은 8.\r\nstr.isdigit() : 문자열이 숫자로만 구성 됐는지 참, 거짓으로 리턴\r\n \r\nstr.isalpha() : 문자열이 문자로만 구성 됐는지 참, 거짓으로 리턴\r\nstr.isalnum() : 문자열이 숫자 혹은 문자로 구성 됐는지 참, 거짓으로 리턴\r\nstr.islower() : 문자열이 소문자로만 구성 됐는지 참, 거짓으로 리턴\r\nstr.isupper() : 문자열이 대문자로만 구성 됐는지 참, 거짓으로 리턴\r\nstr.istitle() : 문자열이 제목 문자열인지 참, 거짓으로 리턴\r\nstr.zfill(width) : 문자열 크기를 width 만큼 늘리고 빈 자리를 0으로 채운다.\r\nstring.digits : string 모듈, 10진법의 수들 출력.\r\nstring.octdigits : string 모듈, 8진법의 수들 출력.\r\nstring.hexdigits : string 모듈, 16진법의 수들 출력.\r\nstring.letters : string 모듈, 영문자들 출력.\r\nstring.lowcase : string 모듈, 영 소문자 출력.\r\nstring.uppercase : stirng 모듈, 영 대문자 출력.\r\nstring.punctuation : string 모듈, punctuation 문자 출력.\r\nstring.printable : stirng 모듈, 인쇄 가능한 문자들 모두 출력.\r\nstring.whitespace : string 모듈, 공백 문자 출력.\r\nstr(object) : 내장함수, 객체를 문자열로 변환.\r\nunicode(string [, encoding[, errors]]) : 내장함수, 문자열을 유니 코드 문자열로 변환.\r\nstr.encode([encoding[,errors]]) : 내장함수, 문자열을 원하는 코딩으로 변환.\r\nord(c) : 내장함수, 문자의 코드 값을 구함.\r\nchr(i) : 내장함수, 코드 값을 문자로 변환.\r\nunichr(i) : 내장함수, 유니코드 값을 유니코드 문자로 변환.\r\nobject.__doc__ : 내장 멤버, 객체의 문서 문자열 출력.\r\nL.append(object) : 자료를 리스트 끝에 추가\r\nL.insert(index, object) : 자료를 지정된 위치에 삽입\r\nL.index(value, [start, [stop]]) : 요소 검색.\r\nL.count(value) : 요소 개수 출력\r\nL.sort(key=None, reverse=False) : 리스트를 정렬하며 리턴값은 없음. key 는 비교할 인수를 통과시킬 함수를 받음.\r\nreverse 는 Ture 일때 역순 정렬.\r\nL.reverse() : 자료 순서 역순으로 정렬.(주의 : 리턴값 없음)\r\nL.remove(value) : 지정 자료 값을 앞에서부터 한 개 삭제.\r\nL.extend(iterable) : 리스트를 추가.\r\nL.pop([index]) : 리스트의 지정된 값 하나를 읽어 내고 삭제.\r\ncmp(x,y) : 내장함수, x,y 의 값을 비교하여 x>y : 1, x==y : 0, x<y : -1 을 리턴.\r\nsorted(iterable[, key][, reverse]) : 내장함수, sort와 같은 기능이지만 새로운 리스트로 리턴함.\r\nreversed(sequence) : 내장함수, 시퀀스 자료형을 역순으로 참조.\r\nsys.argv : sys 모듈, 명령행에 쓰여진 인수들을 읽음.\r\ngetopt.getopt(args, options[, long_options]) : getopt 모듈, 명령행에 쓰여진 인수들에서 옵션을 분리함. 리턴 값은\r\n[(option, value)] 형식의 리스트와 나머지 인수들의 리스트이다.\r\narray.array(typecode [, initializer]) : array 모듈, typecode 자료형의 새 배열을 리턴, initializer 는 리스트\r\n또는 문자열이어야 함.\r\nglob.glob(pathname) : glob 모듈, pathname 에 해당하는 경로의 리스트를 리턴함.\r\nos.path.isfile(path) : os.path 모듈, path 가 일반 파일이면 참값 리턴.\r\nos.path.isdir(path) : os.path 모듈, path 가 디렉토리이면 참값 리턴.\r\nos.path.islink(path) : os.path 모듈, path 가 심볼릭 링크이면 참값 리턴.\r\nos.path.ismount(path) : os.path 모듈, path 가 마운트 포인트이면 참값 리턴(unix)\r\nos.path.exists(path) : os.path 모듈, path 가 존재하면 참값 리턴.\r\nos.path.getsize(filename) : os.path 모듈, 파일의 크기 리턴.\r\nos.path.getatime(filename) : os.path 모듈, 파일의 최근 접근 시간 리턴, 리턴 값은 기준시간(1970년 1월 1일 자정)\r\n부터 현재 까지 경과한 초.\r\nos.path.getmtime(filename) : os.path 모듈, 파일의 수정 시간 리턴.\r\ntime.ctime(seconds) : time 모듈, 초를 문자열 시간으로 변환.\r\ntime.time() : time 모듈, 현재 시간을 소수점 형태의 초로 리턴함.\r\nlist([iterable]) : 내장함수, 리스트로 변환.\r\ntuple([iterable]) : 내장함수, 튜플로 변환.\r\nos.path.abspath(path) : os.path 모듈, 상대 경로를 절대 경로로 전환.(주의 : 파일 자체의 절대 경로가 아니라 실행 파일이 위치한 폴더의 절대 경로로 전환.)\r\nos.path.split(p) : os.path 모듈, 경로를 (head, tail)로 분리. (디렉토리명, 파일명)으로 리턴.\r\nos.path.join(a, ...) : os.path 모듈, 디렉토리와 파일명을 결합.\r\nos.path.normpath(path) : os.path 모듈, 파일명을 정규화한다.(예 : A/./B → A/b)\r\nos.path.splitext(p) : os.path 모듈, 파일명으로부터 확장자를 분리함.\r\nos.linesep : os 모듈, 파일의 라인 분리 문자.\r\nos.sep : os 모듈, 경로명에서 각 요소들을 분리하는 문자.\r\nos.pathsep : os 모듈, 경로명과 경로명을 구분해 주는 문자.\r\nos.curdir : os 모듈, 현재 디렉토리를 나타내는 문자.\r\nos.pardir : os 모듈, 부모 디렉토리를 나타내는 문자.\r\nurlparse.urlparse(urlstring[, default_scheme[, allow_fragments]]) : urlparse 모듈, url 을 (addressing\r\nscheme, network location, path, parameters, query, fragment identifier) 로 분리.bluekyu \r\nurlparse.urlunparse(parts) : urlparse 모듈, 튜플로 분리된 성분들을 하나의 url로 변환.\r\nurlparse.urljoin(base, url[, allow_fragments]) : urlparse 모듈, 기본 url 과 상대 url 을 연결하여 절대 url 을\r\n생성.\r\nsys.getsizeof(object[, default]) : sys 모듈, 객체의 크기를 바이트로 리턴.\r\ndict([arg]) : 내장함수, 사전 객체를 생성함.\r\nzip([iterable, ...]) : 내장함수, 자료를 순서대로 묶어 줌. *를 사용하면 zip 으로 묶인 객체를 다시 풀어줌. 짧은 인수\r\n를 기준으로 나머지는 버림.\r\nD.keys() : 사전에서 키들을 리스트로 리턴.\r\nD.values() : 값들을 리스트로 리턴.\r\nD.items() : 사전의 키, 값을 리스트 내에 (key, value)의 쌍으로 리턴.\r\nkey in D : 멤버쉽 테스트. D가 key를 가지고 있으면 True 리턴.\r\nD.clear() : 사전 D의 모든 아이템 삭제.\r\nD.copy() : 사전 복사(Shallow Copy)\r\nD.get(key[, default]) : 값이 존재하면 D[key], 아니면 초기값 리턴.\r\nD.setdefault(key[, default]) : get과 같으나 값이 존재하지 않을 때 값을 설정(D[key] = default) 하고 초기값 리턴.\r\nD.update([other]) : 키, 값의 쌍으로 되어 있는 자료형을 추가 해줌.\r\nD.popitem() : (키, 값) 튜플을 리턴하고 사전에서 항목을 제거.\r\nD.pop(key[, default]) : key 항목의 값을 리턴하고 사전에서 제거.\r\nglobals() : 전역 영역의 심볼 테이블을 리턴.\r\nlocals() : 지역 영역의 심볼 테이블을 리턴.\r\ns.issubset(t) : s가 t의 부분 집합? (같은 표현 : s <= t)\r\ns.issuperset(t) : s가 t의 포함 집합? (같은 표현 : s >= t)\r\ns.union(t) : s 와 t 의 합집합 (같은 표현 : s | t)\r\ns.intersection(t) : s 와 t 의 교집합 (같은 표현 : s & t)\r\ns.difference(t) : s 와 t 의 차집합 (같은 포현 : s - t)\r\ns.symmetric_difference(t) : s 와 t 의 배타집합 (같은 표현 : s ^ t)\r\ns.copy() : s 를 얕은 복사.\r\ns.update(t) : s와 t의 합집합을 s에 저장 (같은 표현 : s |= t)\r\ns.intersection_update(t) : s와 t의 교집합을 s에 저장 (같은 표현 : s &= t)\r\ns.difference_update(t) : s와 t의 차집합을 s에 저장 (같은 표현 : s -= t)\r\ns.symmetric_difference_update(t) : s와 t의 배차집합을 s에 저장 (같은 표현 : s ^= t)\r\ns.add(x) : 원소 x를 s에 추가\r\ns.remove(x) : 원소 x를 s에서 제거, 없으면 KeyError 예외 발생\r\ns.discard(x) : 원소 x가 있다면 s에서 제거.\r\ns.pop() : s에서 임의의 원소를 하나 리턴하고 집합에서는 제거, 빈 집합이면 KeyError 에외 발생.\r\ns.clear() : 집합 s의 모든 원소 삭제.\r\ncopy.copy(x) : copy 모듈, x를 얕은 복사 함.\r\ncopy.deepcopy(x) : copy 모듈, x를 깊은 복사 함.\r\nround(x[, n]) : 내장 함수, x를 10^(-n) 자리까지 반올림.\r\nmath.floor(x) : math 모듈, x 보다 작거나 같은 수 중에서 가장 큰 정수형의 실수.\r\nmath.ceil(x) : math 모듈, x 보다 크거나 같은 수 중에서 가장 작은 정수형의 실수.\r\nrepr(object) : 내장 함수, srt 보다 좀 더 형식적인 문자열로 변환.(`object` 와 같음), eval 로 역표현이 가능.\r\nhex(x) : 내장 함수, 10진수에서 16진수로 변환.\r\noct(x) : 내장 함수, 10진수에서 8진수로 변환.\r\nopen(filename[, mode[, bufsize]]) : 내장 함수, 파일 객체를 얻음.\r\nfile.read([size]) : 파일 객체에서 자료를 읽는다.\r\nfile.write(str) : 파일 객체에서 자료를 쓴다.\r\nfile.close() : 파일 객체의 사용을 종료한다.\r\nfile.readline([size]) : 한 번에 한 줄씩 읽는다.\r\nfile.readlines([sizehint]) : 파일 전체를 라인 단위로 끊어서 리스트에 저장한다.\r\nfile.xreadlines() : 파일 전체를 한꺼번에 읽지는 않고, 필요할 때만 읽는다.\r\nfile.writelines(sequence) : 리스트 안에 있는 문자열을 연속해서 출력함.\r\nfile.seek(offset[, whence]) : 파일의 위치 이동.(whence 가 없으면 처음에서 offset 번째로, 1 이면 현재에서 offset\r\n번째로, 2 이면 마지막에서 offset 번째로)\r\nfile.tell() : 현재의 파일 포인터 위치를 돌려줌.\r\nfile.flush() : 버퍼가 다 채워지지 않았어도 내부 버퍼의 내용을 파일에 보낸다.\r\nfile.fileno() : 파일 객체의 파일 기술자(File Descriptor)(정수)를 리턴한다.\r\nfile.isatty() : 파일 객체가 tty와 같은 장치이면 1 아니면 0을 리턴\r\nfile.truncate([size]) : 파일 크기를 지정된 ?로 잘라 버림. 인수를 주지 않으면 현재 위치에서 자름.\r\nfile.closed : 파일이 close 되었으면 1 아니면 0\r\nfile.mode : 파일이 오픈된 모드\r\nfile.name : open() 할때 사용된 파일 이름\r\nfile.softspace : 1이면 print 문을 사용할 때 값 출력 사이에 자동적으로 스페이스가 출력됨. 0이면 자동으로 삽입 안됨.\r\nxrange([start], stop[, step]) : 내장 함수, range() 와 비슷하지만 xrange 객체를 리턴 하기 때문에 튜플을 리턴 할\r\n때 생기는 메모리를 줄일 수 있다.\r\nsys.stdin : sys 모듈, 입력을 위한 객체 저장.\r\nStringIO.StringIO([buffer]) : StringIO 모듈, 문자열을 파일 객체처럼 입출력한다.\r\nStringIO.getvalue() : StringIO 모듈, StringIO 클래스에 저장된 내부 문자열을 가져옴.\r\npickle.dump(obj, file[, protocol]) : pickle 모듈, 객체를 파일로 출력. 프로토콜이 1 이상이면 이진 파일로 작성.\r\npickle.load(file) : pickle 모듈, 객체를 파일에서 읽어 들임.\r\npickle.dumps(obj[, protocol]) : pickle 모듈, 문자열로 객체를 파일로 출력. 프로토콜이 1 이상이면 이진 파일로 작\r\n성.\r\npickle.loads(string) : pickle 모듈, 문자열에서 객체를 읽어 들임.\r\nmap(function, iterable, ...) : 내장 함수, 함수의 인수에 주어진 시퀀스 인수들을 사상시킴. 함수로 None 을 넣으면 인\r\n수를 묶어주고, 긴 인수를 기준으로 짧은 부분은 None으로 채움.\r\n### operator 모듈에 다양한 연산 함수가 정의 되어 있음. 자세한 것은 라이브러리 레퍼런스 3.8 참고 ###\r\nfilter(function, iterable) : 내장 함수, 주어진 시퀀스의 인수들을 함수에 대해서 필터링함. 함수로 None 을 넣으면 진\r\n리값을 판별하는 데 사용함.\r\nreduce(function, iterable[, initializer]) : 내장 함수, 두 개의 인수를 갖는 함수에 대해 시퀀스의 자료를 순서대로\r\n넘긴다.\r\nf.__doc__ : 함수 객체 속성, 문서 문자열.\r\nf.func_doc : 함수 객체 속성, 문서 문자열.\r\nf.__name__ : 함수 객체 속성, 함수의 이름.\r\nf.func_name : 함수 객체 속성, 함수의 이름\r\nf.func_defaults : 함수 객체 속성, 함수의 기본 인수 값들.\r\nf.func_code : 함수 객체 속성, 함수의 코드 객체.\r\nf.func_globals : 함수 객체 속성, 함수의 전역 영역을 나타내는 사전.\r\nf.func_code.co_name : 함수 코드 객체 속성, 함수의 이름.\r\nf.func_code.co_argcount : 함수 코드 객체 속성, 필수적인 인수의 개수\r\nf.func_code.co_nlocals : 함수 코드 객체 속성, 전체 지역 변수의 수.\r\nf.func_code.co_varnames : 함수 코드 객체 속성, 지역 변수의 이름들.\r\nf.func_code.co_code : 함수 코드 객체 속성, 코드 객체의 바이트 코드 명령어\r\nf.func_code.co_names : 함수 코드 객체 속성, 바이트 코드가 사용하는 이름들.\r\nf.func_code.co_filename : 함수 코드 객체 속성, 코드 객체를 포함하는 파일 이름.\r\nf.func_code.co_flags : 함수 코드 객체 속성, 코드 객체가 가변인수와 키워드 인수를 갖는지 검사.\r\nvars([object]) : 내장 함수, 인수 없이 쓰면 지역 공간의 사전 리턴. 인수를 쓰면 인수의 심볼 테이블을 리턴.\r\n__dict__ : 속성, 정의 되어 있는 속성과 값의 사전을 리턴.\r\n__import__(name[, globals[, locals[, fromlist[, level]]]]) : 내장 함수, 문자열로 표현된 모듈을 가져옴.\r\nreload(module) : 내장 함수, 해당 모듈만을 다시 적재함.\r\n__name__ : 속성, 모듈의 이름.\r\nsys.path : sys 모듈, 모듈의 검색 경로를 저장하고 있는 리스트.\r\n__import__(name[, globals[, locals[, fromlist[, level]]]]) : 내장 함수, 문자열로 표현된 모듈을 가져옴.\r\nreload(module) : 내장 함수, 모듈을 재적함.\r\ngetattr(object, name[, default]) : 내장 함수, object에서 문자열로 주어진 name 속성을 얻어냄. 참조하려는 이름이\r\n없다면 AttributeError 를 일으키거나 default 를 리턴.\r\nsetattr(object, name, value) : 내장 함수, object에 name의 속성으로 value 를 설정.\r\nhasattr(object, name) : 내장 함수, object가 name 속성을 가지고 있는지 묻는다. 있다면 True 리턴.\r\ndelattr(object, name) : 내장 함수, object에서 name 속성을 없앤다.\r\nstaticmethod(function) : 내장 함수, 정적 메소드를 생성\r\nclassmethod(function) : 내장 함수, 클래스 메소드를 생성\r\nobject.__init__(self[, ...]) : 클래스 메소드, 생성자\r\nobject.__del__(self) : 클래스 메소드, 소멸자\r\nobject.__add__(self, other) : 클래스 메소드, +\r\nobject.__sub__(self, other) : 클래스 메소드, -\r\nobject.__mul__(self, other) : 클래스 메소드, *\r\nobject.__div__(self, other) : 클래스 메소드, /\r\nobject.__truediv__(self, other) : 클래스 메소드, __future__ 모듈의 division 이 실행 되었을 때 / 연산자가 실행\r\n됨\r\nobject.__floordiv__(self, other) : 클래스 메소드, //\r\nobject.__mod__(self, other) : 클래스 메소드, %\r\nobject.__divmod__(self, other) : 클래스 메소드, divmod()\r\nobject.__pow__(self, other[, modulo]) : 클래스 메소드, pow(), **\r\nobject.__lshift__(self, other) : 클래스 메소드, <<\r\nobject.__rshift__(self, other) : 클래스 메소드, >>\r\nobject.__and__(self, other) : 클래스 메소드, &\r\nobject.__xor__(self, other) : 클래스 메소드, ^\r\nobject.__or__(self, other) : 클래스 메소드, |\r\n###피연산자가 바뀐 경우에는 위 메소드에다가 r 을 앞에다가 붙이면 됨.###\r\n###확장 산술 연산자(+=, -= 과 같은)는 위 메소드에다가 i 를 붙이면 됨. 단, divmod 는 확장 산술 연사자가 없음.###\r\nobject.__neg__(self) : 클래스 메소드, - (단항 연산자)\r\nobject.__pos__(self) : 클래스 메소드, + (단항 연산자)\r\nobject.__abs__(self) : 클래스 메소드, abs()\r\nobject.__invert__(self) : 클래스 메소드, ~ 비트 반전.\r\nobject.__complex__(self) : 클래스 메소드, complex(), 리턴 값은 반드시 복소수값\r\nobject.__int__(self) : 클래스 메소드, int(), 리턴 값은 반드시 정수형\r\nobject.__long__(self) : 클래스 메소드, long(), 리턴값은 반드시 Long 형\r\nobject.__float__(self) : 클래스 메소드, float(), 리턴값은 반드시 실수형\r\nobject.__oct__(self) : 클래스 메소드, oct(), 리턴값은 반드시 문자열\r\nobject.__hex__(self) : 클래스 메소드, hex(), 리턴값은 반드시 문자열\r\nobject.__coerce__(self, other) : 클래스 메소드, 반드시 일반적인 수 타입으로 변환될 수 있는 self, other 을 포함하\r\n는 튜플을 리턴하거나 변환될 수 없을 경우 None 객체를 리턴해야 한다. 튜플의 값들이 내장된 연산이 적용될 수 있을 경우\r\n다른 연산자 메소드보다 우선적으로 호출됨.(자세한 것은 파이썬 문서 참조.)\r\nobject.__len__(self) : 클래스 메소드, len(), 반드시 0 이상의 정수형을 리턴해야 함.\r\nobject.__contains__(self, item) : 클래스 메소드, in 연산자.\r\nobject.__getitem__(self, key) : 클래스 메소드, self[key]\r\nobject.__setitem__(self, key, value) : 클래스 메소드, self[key] = value\r\nobject.__delitem__(self, key) : 클래스 메소드, del self[key]\r\nobject.__iter__(self) : 클래스 메소드, 반복자를 요구할 때 호출됨.\r\n###shelve 모듈을 이용하여 사전과 같은 방식으로 파일을 입,출력할 수 있다.###\r\nobject.__repr__(self) : 클래스 메소드, repr(), ` `, __str__ 메소드가 정의되어 있지 않다면 대신 호출됨. 리턴값은\r\n반드시 문자열이어야 함.\r\nobject.__str__(self) : 클래스 메소드, str(), print, __repr__ 메소드가 정의되어 있지 않더라도 호출되지 않음. 리턴\r\n값은 반드시 문자열이어야 함.\r\nobject.__cmp__(self, other) : 클래스 메소드, self < other 일 경우 음의 정수, self == other 일 경우 0, self >\r\nother 일 경우 양의 정수 리턴. 메소드가 정의되어 있지 않다면 객체의 ''주소''로 비교를 함.\r\nobject.__lt__(self, other) : 클래스 메소드, self < other\r\nobject.__le__(self, other) : 클래스 메소드, self <= other\r\nobject.__eq__(self, other) : 클래스 메소드, self > other\r\nobject.__ne__(self, other) : 클래스 메소드, self >= other\r\nobject.__gt__(self, other) : 클래스 메소드, self == other\r\nobject.__ge__(self, other) : 클래스 메소드, self != other\r\n### 위 비교함수가 cmp 보다 우선됨. ###\r\nobject.__hash__(self) : 클래스 메소드, 클래스 객체를 사전의 키로 이용할 때 필요. 이때 __cmp__ 나 __eq__ 메소드도\r\n정의되야 함. 그리고 리턴값은 반드시 정수형이여야 함.\r\nobject.__nonzero__(self) : 클래스 메소드, bool(), 진리값(0, 1 포함)을 리턴해야 함. 메소드가 정의되어 있지 않으면\r\n__len__ 메소드를 호출하고 이때 결과가 0이 아니면 True 를 리턴함. __len__도 정의되어 있지 않으면 True 를 리턴.\r\nobject.__getattr__(self, name) : 클래스 메소드, 정의되어 있지 않은 속성을 참조할 때 호출됨(위임 기법에서 사용됨).\r\nname 은 문자열이며 호출한 속성의 이름을 가짐.\r\nobject.__getattribute__(self, name) : 클래스 메소드, __getattr__ 과 같으나 속성이 정의되어 있어도 호출됨. 그리\r\n고 이 메소드를 사용하는 클래스는 object 클래스를 상속해야 함. 또, object.__getattribute__(self, name) 으로 사용\r\n해서 값을 리턴해야 한다.\r\nobject.__setattr__(self, name, value) : 클래스 메소드, self.name = value 와 같이 속성에 치환(대입)이 일어날 때\r\n호출됨. 그리고 치환(대입)은 일어나지 않으므로 이 메소드에서 다시 치환(대입) 시켜야함(단, 클래스 인스턴스의 사전\r\n(__dict__)에 값을 저장시키는 방식이어야 함.)\r\nobject.__delattr__(self, name) : 클래스 메소드, del self.name 시에 호출됨. 그리고 삭제는 일어나지 않으므로 이\r\n메소드에서 다시 삭제 시켜야함(단, 클래스 인스턴스의 사전 값을 없애는 방식이어야 함.)\r\nobject.__call__(self[, args...]) : 클래스 메소드, 함수처럼 호출할 수 있게 함.\r\ncallable(object) : 내장 함수, 객체가 호출 가능한지 알아봄.\r\n__slots__ : 클래스 멤버 리스트. 클래스에 저장할 수 있는 속성 이름을 담고 있음. 그리고 이 클래스는 object 클래스를\r\n상속해야 함. 단, 이 클래스에서는 __dict__ 는 사용되지 않음.\r\nproperty([fget[, fset[, fdel[, doc]]]]) : 내장 함수, 멤버 값을 정의할 때 함수로 처리하도록 함. fget 은 값을 얻\r\n을 때. fset 은 값을 쓸 때. fdel 은 값을 삭제할 때. doc 은 help 함수로 클래스를 호출할 때 보여지는 설명. 클래스는\r\nobject 를 상속해야함.\r\nclass.__mro__ : 클래스 멤버, 클래스의 탐색 순서를 튜플로 저장되는 멤버(오직, new-style 클래스에서만 작동)\r\nclass.mro() : 클래스 메소드, __mro__ 에 저장시키는 메소드. 오버라이딩될 수 있다(오직, new-style 클래스에서만 작동)\r\nclass cmd.Cmd([completekey[, stdin[, stdout]]]) : cmd 모듈의 클래스, 명령어 해석기의 단순한 프레임워크를 제공.\r\ntypes : 모듈, 객체 타입의 이름을 정의한 모듈.\r\nisinstance(object, classinfo) : 내장함수, object 가 classinfo 의 인스턴스이거나 classinfo 의 서브클래스일 경우\r\nTrue 리턴.\r\nissubclass(class, classinfo) : 내장함수, class 가 classinfo 의 서브클래스이면 True 리턴. 자기 자신도 자기 자신\r\n의 서브클래스임.\r\nclass.__bases__ : 클래스 멤버, 클래스 객체의 슈퍼 클래스를 튜플로 가지는 멤버.\r\ninstance.__class__ : 인스턴스 멤버, 클래스 인스턴스가 속한 클래스를 가지는 멤버.\r\nclass.__name__ : 클래스 멤버, 클래스의 이름.\r\nobject.__dict__ : 클래스 멤버, 객체의 속성을 저장하는 사전. 여기서 키 값만을 빼내면 dir() 동일함(단, dir() 은 결\r\n과가 정렬되어 있고, 슈퍼 클래스의 속성까지 표시함.)\r\nsuper(type[, object-or-type]) : 내장함수, type 의 슈퍼 클래스에게 메소드 호출을 대신하는 객체를 리턴. type 의\r\n__mro__ 속성을 사용하여 순서 결정.\r\nsuper(type[, object-or-type]) : 내장함수, type 의 슈퍼 클래스에게 메소드 호출을 대신하는 객체를 리턴. type 의\r\n__mro__ 속성을 사용하여 순서 결정.\r\nim_func : 사용자 정의 메소드 객체 속성, 함수 객체 속성.\r\nim_self : 사용자 정의 메소드 객체 속성, 클래스 인스턴스 객체 속성.\r\nim_class : 사용자 정의 메소드 객체 속성, 메소드가 정의된 클래스 속성.\r\n__doc__ : 사용자 정의 메소드 객체 속성, 메소드 문서 문자열(im_func.__doc__ 과 같음)\r\n__name__ : 사용자 정의 메소드 객체 속성, 메소드 이름(im_func.__name__ 과 같음)\r\n__module__ : 사용자 정의 메소드 객체 속성, 메소드가 정의된 모듈의 이름.\r\nsys.exc_info() : sys 모듈, 발생한 예외의 종류, 에외의 값, traceback 정보 세 가지를 튜플로 리턴함.\r\n__debug__ : 내장 상수, 디버그 모드의 여부를 가지는 상수. 파이썬이 -O 옵션을 가지고 실행 되면 이 값이 False 가 된다.\r\ntraceback.print_exc([limit[, file]]) : traceback 모듈, 예외 정보를 출력하는 함수. print_exception 함수의 속기\r\n형임. 자세한 것은 traceback 모듈 참고.\r\nclass weakref.ref(object[, callback]) : weakref 모듈, 약함 참조 객체를 생성하는 함수. 객체가 존재하지 않으면\r\nNone 을 리턴함. callback 이 None 이 아닌 값으로 주어지면 참조하던 객체가 사라질 때 약한 참조 객체를 인자로 넘기면서 callback 을 호출함.\r\nweakref.proxy(object[, callback]) : weakref 모듈, 프로식 객체를 생성함. weakref 객체에서와 같이 함수 형식을 사\r\n용하지 않고 객체를 참조할 수 있음.\r\nweakref.getweakrefcount(object) : weakref 모듈, 객체를 참조하고 있는 약한 참조 객체와 프록시 객체의 수를 리턴함.\r\nweakref.getweakrefs(object) : weakref 모듈, 객체를 참조하고 있는 약한 참조 객체와 프로시 객체의 리스트를 리턴함.\r\nclass weakref.WeakValueDictionary([dict]) : weakref 모듈, 값으로 약한 참조 객체를 가지는 사전을 생성함. 약한 참조 객체가 참조하던 객체가 사라지면 자동으로 항목이 제거됨.\r\nclass weakref.WeakKeyDictionary([dict]) : weakref 모듈, 키로 약한 참조 객체를 가지는 사전을 생성함. 약한 참조\r\n객체가 참조하던 객체가 사라지면 자동으로 항목이 제거됨.\r\niter(o[, sentinel]) : 내장함수, 반복자 객체를 리턴한다. 만약, 두번째 인자가 주어진다면 첫번째 인자는 호출될 수 있는 객체이어야 한다. 만약 리턴값이 두번째 인자와 같다면 StopIteration 이 발생한다.\r\niterator.next() : 클래스 메소드, 클래스로부터 next 메소드를 호출한다.\r\nnext(iterator[, default]) : 내장함수, 반복자로부터 다음 아이템을 반환한다. 디플트가 주어진다면 반복자가 종료될 때\r\n리턴된다.\r\nD.iterkeys() : 사전의 키에 대한 반복자를 리턴한다.\r\nD.itervalues() : 사전의 값에 대한 반복자를 리턴한다.\r\nD.iteritems() : 사전의 (키, 값) 튜플에 대한 반복자를 리턴한다.\r\nitertools.chain(*iterables) : itertools 모듈, 첫번째 객체부터 마지막 객체까지 요소들을 리턴하는 반복자를 생성한\r\n다.\r\nitertools.count([n]) : itertools 모듈, n 부터 시작하는 정수 값을 생성해 내는 반복자를 리턴한다. n이 주어지지 않으\r\n면 기본값은 0 이다.\r\nitertools.cycle(iterable) : itertools 모듈, 객체를 무한히 반복하는 반복자를 생성한다.\r\nitertools.dropwhile(predicate, iterable) : itertools 모듈, predicate 가 참이 되는 데이터들은 버리다가 거짓이\r\n되는 이후의 데이터들만 리턴하는 반복자를 생성한다.\r\nitertools.takewhile(predicate, iterable) : itertools 모듈, predicate 가 참이 되는 데이터들을 취하다가 거짓이\r\n되면 멈추는 반복자를 생성한다.\r\nitertools.groupby(iterable[, key]) : itertools 모듈, 연속된 키들과 키들로부터 그룹화 시킨 그룹들을 리턴하는 반복\r\n자를 생성한다. key 는 각 요소에 키 값을 취할 수 있는 함수이다. 일반적으로, 키들은 미리 정렬이 되어 있어야 한 그룹으로 묶일 수 있다.\r\noperator.itemgetter(item[, args...]) : operator 모듈, item 에 있는 인덱스 값들을 얻는 호출 객체를 리턴함.\r\nitertools.ifilter(predicate, iterable) : itertools 모듈, filter 와 같은 사용법이지만 반복자를 리턴.\r\nitertools.imap(function, *iterables) : itertools 모듈, map 과 같은 사용법이지만 반복자를 리턴.\r\nitertools.izip(*iterables) : itertools 모듈, zip과 같은 사용법이지만 반복자를 리턴.\r\nitertools.starmap(function, iterable) : itertools 모듈, imap과 동일하나 반복자에서 얻어진 인수 튜플을 사용하여\r\n사상 함수를 호출하는 것이 다름.\r\nitertools.ifilterfalse(predicate, iterable) : itertools 모듈, ifilter 와 동일하나 조건이 거짓이 되는 자료를\r\n리턴.\r\nitertools.islice(iterable[, start], stop[, step]) : itertools 모듈, 슬라이싱 사용법과 같다.\r\nitertools.repeat(object[, times]) : itertools 모듈, 객체를 지정된 횟수만큼 리턴하는 반복자를 생성. 횟수가 지정되\r\n지 않으면 무한히 반복.\r\nitertools.tee(iterable[, n=2]) : itertools 모듈, n 개의 반복자를 생성.\r\nos.listdir(path) : os 모듈, path 경로의 디렉토리의 전체 목록 리스트를 리턴.\r\ndircache.listdir(path) : dircache 모듈, os.listdir() 로 부터 얻어낸 경로의 리스트를 리턴한다. 단, 경로의 변경이\r\n없으면 디렉토리 구조를 다시 읽지 않는다.\r\ndircache.annotate(head, list) : dircache 모듈, head/list 의 요소가 디렉토리일 경우 디렉토리 명에 ''/'' 을 추가한\r\n다.\r\nos.access(path, mode) : os 모듈, 파일의 허가권을 알아보는 함수. os.F_OK는 존재 여부, os.R_OK는 일기 권한,\r\nos.W_OK는 쓰기 권한, os.X_OK는 실행 권한.\r\nos.chmod(path, mode) : os 모듈, 파일의 허가권을 변경하는 함수.\r\nos.rename(src, dst) : os 모듈, 파일이 이름 변경. 파일 이동은 파일 이름에 경로를 지정하여 이동 가능.\r\nshutil.copyfile(src, dst) : shutil 모듈, 파일을 복사하는 함수.\r\nos.remove(path) : os 모듈, 파일을 삭제함. 단, 디렉토리일 경우 OSError 발생.\r\nos.link(src, dst) : os 모듈, 하드 링크를 생성.\r\nos.symlink(src, dst) : os 모듈, 심볼릭 링크를 생성.\r\nos.readlink(path) : os 모듈, 심볼릭 링크의 정보를 읽음.\r\nos.utime(path, times) : os 모듈, 파일의 접근 시간과 수정 시간을 조절. times 가 None 이면 접근 시간과 수정 시간을 현재 시간으로 조정. times 값은 (atime, mtime) 형태의 튜플임.\r\nos.stat(path) : os 모듈, 파일의 접근 시간과 수정 시간을 읽어 옮.\r\nos.chown(path, uid, gid) : os 모듈, 파일 소유자를 바꿈.\r\nos.stat(path) : os 모듈, 파일에 관한 자세한 내용들을 리턴. 리턴 값은 stat 모듈의 심볼들을 통해서 해석할 수 있음.\r\ntempfile : tempfile 모듈, 임시 파일 이름을 생성시킬 수 있는 모듈.\r\nos.chdir(path) : os 모듈, 작업하고 잇는 디렉토리 변경.\r\nos.getcwd() : os 모듈, 작업하고 있는 디렉토리 확인.\r\nos.mkdir(path[, mode]) : os 모듈, 디렉토리 생성. 기본 허가권은 0777(octal)임.\r\nos.makedirs(path[, mode]) : os 모듈, 재귀적으로 디렉토리 생성.\r\nos.rmdir(path) : os 모듈, 내용이 없는 디렉토리 삭제.\r\nos.removedirs(path) : os 모듈, 재귀적으로 디렉토리를 삭제함.\r\nshutil.rmtree(path[, ignore_errors[, onerror]]) : shutil 모듈, 전체 디렉토리 구조를 모두 삭제함.\r\nshutil.copytree(src, dst[, symlinks=False[, ignore=None]]) : shutil 모듈, 디렉토리 구조를 복사함.\r\nmax(iterable[, args...][, key]) : 내장 함수, iterable 한 개만 인자로 사용되면 그 중에서 가장 큰 값을 리턴, 여러\r\n개의 인자가 들어오면 인자 중에서 가장 큰 값을 리턴. key에는 함수가 사용되고, 인자들을 함수에 대입하여 나온 리턴값들 중 최대를 리턴하는 인자를 리턴한다.\r\nmin(iterable[, args...][, key]) : 내장 함수, iterable 한 개만 인자로 사용되면 그 중에서 가장 작은 값을 리턴, 여\r\n러 개의 인자가 들어오면 인자 중에서 가장 작은 값을 리턴. key에는 함수가 사용되고, 인자들을 함수에 대입하여 나온 리턴값들 중 최소를 리턴하는 인자를 리턴한다.\r\nos.walk(top[, topdown=True[, onerror=None[, followlinks=False]]]) : os 모듈, 디렉토리를 재귀적으로 탐색함.\r\ntop 은 루트 디렉토리, topdown 은 출력 순서, onerror 는 예외일 때 호출되는 함수, followlinks 는 False 일 때 상대\r\n경로의 문제를 해결하지 않음. 리턴값은 (dirpath, dirnames, filenames) 의 튜플값.\r\nos.path.expanduser(path) : os.path 모듈, 사용자의 홈 디렉토리 경로명을 확장해줌.\r\nos.path.expandvars(path) : os.path 모듈, 쉘 변수를 확장해줌.\r\nos.path.normcase(path) : os.path 모듈, 파일 이름을 정규화해줌.\r\nos.path.basename(path) : os.path 모듈, 파일명만 추출.\r\nos.path.dirname(path) : os.path 모듈, 디렉토리 경로 추출.\r\nos.path.splitdrive(path) : os.path 모듈, 드라이브명 분리(윈도우용).\r\nfnmatch.fnmatch(filename, pattern) : fnmatch 모듈, 파일 이름이 주어진 패턴(와일드카드)와 일치하는지 확인. 리턴값은 1, 0.\r\nrandom.uniform(a, b) : random 모듈, a<=b 인 경우 a<=N<=b, b<a 인 경우 b<=N<=a 에서의 임의의 소수 N을 리턴.\r\nslice([start,] stop [, step]) : 내장 함수, 슬라이싱할 때 사용되는 슬라이스 객체를 넘겨줌. 객체에 대해서 슬라이싱이\r\n사용된다면 메소드(슬라이스 객체)와 같이 사용된다', NULL, '', 22, 0),
(1549, 'dale.seo', '', '', '2015-08-06 21:34:21', '', '템플릿 메소드 패턴', '상위 클래스에서 처리의 뼈대를 결정하고, 하위 클래스에서 그 구체적인 내용을 결정하는 디자인 패턴\r\n\r\n상위 클래스의 template method에 고수준 알고리즘을 구현하고, template method 내에서 호출하는 저수준 행위는 abstract method로 둔다. \r\n하위 클래스들에서 abstract method를 다양하게 구현한다. \r\n상속을 이용하여 지엽적인 알고리즘을 캡슐화하는 패턴이다.\r\n\r\n상위 클래스는 템플릿 메서드는 final로 선언하여 하위 클래스에서 오버라이드 하지 못하도록 해야한다.\r\n\r\n상위 클래스의 템플릿 메서드에서 알고리즘이 기술되어 있으므로, 하위 클래스측에서는 알고리즘을 일일이 기술할 필요가 없다.\r\n\r\n보통 JDBC나 HTTP 연동와 같이 메인 로직 앞 뒤로 자원을 open, close 할 때 쓰면 유용하다.\r\n\r\n# 하위 클래스의 자유도와 중복도는 Trade Off 관계\r\n- 상위 크래스에서 기술을 많이 하면 하위 클래스에서는 기술하기 편하게 되지만, 하위 클래스의 자유는 줄게 됨\r\n- 반대로 상위 클래스에서 기술을 적게하면 하위 클래스의 기술이 어렵게 되고, 각각의 하위 클래스에서 처리의 기술이 중복될지 모름\r\n- 따라서 어느 레벨에서 처리를 분배할지, 즉 어떤 처리를 상위 클래스에 두고, 어떤 처리를 하위 클래스에 둘 것인지 결정하는 게 템플릿 메서드 패턴의 키포인트\r\n\r\n# JDK의 java.io.InputStream 클래스에서 Template Method 패턴이 사용된다.\r\n- read() 메서드가 abstract로 선언되어 있어 하위 클래스에게 "1 바이트 읽기"라는 구체적인 내용의 구현을 요청하고 있다.\r\n- read(byte[] b, int off, int len)이 템플릿 메소드로써 read() 메서드를 반복 호출한다. \r\n \r\n', NULL, '', 19, 0),
(1550, 'dale.seo', '', '', '2015-08-11 22:49:54', '', '객체 정렬', '해당 객체를 Comparable 인터페이스를 구현하게 하거나,\r\n정렬할 때 일회성으로 사용할 Comparator를 넘겨주거나...\r\n\r\nhttp://www.mkyong.com/java/java-object-sorting-example-comparable-and-comparator/', NULL, '', 4, 0),
(1551, 'dale.seo', '', '', '2015-08-13 11:09:58', '', '@ControllerAdvice/@ExceptionHandler/@ResponseStatus를 활용한 글로벌 예외 처리', '@ControllerAdvice\r\npublic class GlobalControllerExceptionHandler {\r\n\r\n	private ErrorHttpStatusResolver errorHttpStatusResolver = new ErrorHttpStatusResolver();\r\n	\r\n	@Autowired\r\n	private ErrorInfoGenerator errorInfoGenerator;\r\n	\r\n	public void setErrorInfoGenerator(ErrorInfoGenerator errorInfoGenerator) {\r\n		this.errorInfoGenerator = errorInfoGenerator;\r\n	}\r\n\r\n	@ExceptionHandler(StorePlatformError.class)\r\n	@ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)\r\n	public @ResponseBody ErrorInfo handleStorePlatformError(StorePlatformError exception, HttpServletRequest request, HttpServletResponse response) {\r\n		return handelException(exception, request, response);\r\n	}\r\n	\r\n	@ExceptionHandler(StorePlatformException.class)\r\n	@ResponseStatus(HttpStatus.OK)\r\n	public @ResponseBody ErrorInfo handleStorePlatformException(StorePlatformException exception, HttpServletRequest request, HttpServletResponse response) {\r\n		return handelException(exception, request, response);\r\n	}\r\n	\r\n	@ExceptionHandler(Exception.class)\r\n	public @ResponseBody ResponseEntity handleDefaultException(Exception exception, HttpServletRequest request, HttpServletResponse response) {\r\n		ErrorInfo errorInfo = handelException(exception, request, response);\r\n		HttpStatus httpStatus = errorHttpStatusResolver.resolveHttpStatus(exception, errorInfo);\r\n		return new ResponseEntity(errorInfo, httpStatus);\r\n	}\r\n	\r\n	private ErrorInfo handelException(Exception ex, HttpServletRequest request, HttpServletResponse response) {\r\n		ErrorInfo errorInfo = errorInfoGenerator.createHierarchicalErrorInfoAndSetMessage(ex, request.getLocale());\r\n		ErrorLogWriter.errorLogWrite(errorInfo, ex);\r\n        ErrorTLogWriter.errorLogWrite(errorInfo, ex);\r\n        response.setHeader(RuntimeContextConstants.X_SAC_RESULT_CODE, RuntimeContextConstants.FAIL);\r\n		return errorInfo;\r\n	}\r\n	\r\n}', NULL, '', 12, 0),
(1552, 'dale.seo', '', '', '2015-08-15 16:49:31', '', 'Array slicing 배열 자르기할 때 주의점 ', 'int[] half1Left = Arrays.copyOfRange(half1, 1, half1.length);\r\n이런 식으로 배열을 자르면 O(n) 시간과 공간 비용이 든다...\r\n성능상에 큰 저하를 가져오므로 주의한다.\r\n\r\n\r\nArray slicing involves taking a subset from an array and allocating a new array with those elements.\r\n\r\nFor example, in Python you can create a new array of the elements in my_array, from start_index to end_index, like this:\r\n\r\n  my_array[start_index:end_index]\r\nYou can also get everything after start_index by just omitting end_index:\r\n\r\n  my_array[start_index:]\r\nSimilar thing in JavaScript\r\n\r\n  myArray.slice(startIndex, endIndex)\r\nCareful: there''s a hidden time and space cost here! It''s tempting to think of slicing as just "getting elements," but in reality you are:\r\n\r\nallocating a new array\r\ncopying the elements from the original array to the new array\r\nThis takes O(n)O(n) time and O(n)O(n) space, where nn is the number of elements in the resulting array.\r\n\r\nThat''s a bit easier to see when you save the result of the slice to a variable:\r\n\r\n  tail_of_array = my_array[1:]\r\nBut a bit harder to see when you don''t save the result of the slice to a variable:\r\n\r\n  return my_array[1:]   # whoops, I just spent O(n) time and space!\r\n  for item in my_array[1:]:\r\n    # whoops, I just spent O(n) time and space!\r\nSo keep an eye out. Slice wisely.', NULL, '', 2, 0),
(1559, 'dale.seo', '', '', '2015-08-27 18:58:22', '', 'SyntaxHighlighter', '자바스크립트 코드 문법 표시기\r\n\r\nhttp://alexgorbatchev.com/SyntaxHighlighter/\r\n\r\n사용 방법\r\n\r\nhttp://alexgorbatchev.com/SyntaxHighlighter/manual/installation.html\r\n\r\n설정 방법\r\n\r\nhttp://alexgorbatchev.com/SyntaxHighlighter/manual/configuration/\r\n\r\n\r\n통합 방법\r\n\r\nhttp://alexgorbatchev.com/SyntaxHighlighter/integration.html\r\n', NULL, '', 10, 0),
(1560, 'dale.seo', '', '', '2015-08-31 20:43:53', '', 'Stack 용도', 'The trick was to use a stack. It might have been difficult to have that insight, because you might not use stacks that much. Two main uses for stacks are parsing (like in this problem) and tree or graph traversal (like depth-first traversal). So remember, if you''re doing either of those things, try using a stack! ', NULL, '', 3, 0),
(1561, 'dale.seo', '', '', '2015-08-31 20:54:46', '', 'In-place algorithm vs. out-of-place algorithm', 'In-place algorithm이 메모리를 적게 차지하지만 위험함\r\n\r\n\r\nAn in-place algorithm operates directly on its input and changes it, instead of creating and returning a new object. This is sometimes called destructive, since the original input is "destroyed" when it''s edited to create the new output.\r\n\r\nFor example, here are two functions that do the same operation, except one is in-place and the other is out-of-place:\r\n\r\n  def square_array_in_place(array):\r\n\r\n    # enumerate() lets us get the index and element\r\n    for index, element in enumerate(array):\r\n        array[index] *= element\r\n\r\n    # NOTE: we don''t /need/ to return anything\r\n    # this is just a convenience\r\n    return array\r\n\r\ndef square_array_out_of_place(array):\r\n\r\n    # we allocate a new array with the length of the input array\r\n    squared_array = [None] * len(array)\r\n\r\n    for index, element in enumerate(array):\r\n        squared_array[index] = element ** 2\r\n\r\n    return squared_array\r\nWorking in-place is a good way to save space. An in-place algorithm will generally have O(1)O(1) space cost.\r\n\r\nBut be careful: an in-place algorithm can cause side effects. Your input is "destroyed" or "altered," which can affect code outside of your function. For example:\r\n\r\n  original_array = [2, 3, 4, 5]\r\nsquared_array  = square_array_in_place(original_array)\r\n\r\nprint "squared: %s" % squared_array\r\n# prints: squared: [4, 9, 16, 25]\r\n\r\nprint "original array: %s" % original_array\r\n# prints: original array: [4, 9, 16, 25], confusingly!\r\n\r\n# and if square_array_in_place() didn''t return anything,\r\n# which it could reasonably do, squared_array would be None!\r\nGenerally, out-of-place algorithms are considered safer because they avoid side effects. You should only use an in-place algorithm if you''re very space constrained or you''re positive you don''t need the original input anymore, even for debugging.', NULL, '', 0, 0),
(1562, 'dale.seo', '', '', '2015-08-31 20:54:46', '', 'In-place algorithm vs. out-of-place algorithm', 'In-place algorithm이 메모리를 적게 차지하지만 위험함\r\n\r\n\r\nAn in-place algorithm operates directly on its input and changes it, instead of creating and returning a new object. This is sometimes called destructive, since the original input is "destroyed" when it''s edited to create the new output.\r\n\r\nFor example, here are two functions that do the same operation, except one is in-place and the other is out-of-place:\r\n\r\n  def square_array_in_place(array):\r\n\r\n    # enumerate() lets us get the index and element\r\n    for index, element in enumerate(array):\r\n        array[index] *= element\r\n\r\n    # NOTE: we don''t /need/ to return anything\r\n    # this is just a convenience\r\n    return array\r\n\r\ndef square_array_out_of_place(array):\r\n\r\n    # we allocate a new array with the length of the input array\r\n    squared_array = [None] * len(array)\r\n\r\n    for index, element in enumerate(array):\r\n        squared_array[index] = element ** 2\r\n\r\n    return squared_array\r\nWorking in-place is a good way to save space. An in-place algorithm will generally have O(1)O(1) space cost.\r\n\r\nBut be careful: an in-place algorithm can cause side effects. Your input is "destroyed" or "altered," which can affect code outside of your function. For example:\r\n\r\n  original_array = [2, 3, 4, 5]\r\nsquared_array  = square_array_in_place(original_array)\r\n\r\nprint "squared: %s" % squared_array\r\n# prints: squared: [4, 9, 16, 25]\r\n\r\nprint "original array: %s" % original_array\r\n# prints: original array: [4, 9, 16, 25], confusingly!\r\n\r\n# and if square_array_in_place() didn''t return anything,\r\n# which it could reasonably do, squared_array would be None!\r\nGenerally, out-of-place algorithms are considered safer because they avoid side effects. You should only use an in-place algorithm if you''re very space constrained or you''re positive you don''t need the original input anymore, even for debugging.', NULL, '', 2, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(1563, 'dale.seo', '', '', '2015-08-31 20:55:54', '', 'Mutable vs. Immutable', 'A mutable object can be changed after it''s created, and an immutable object can''t.\r\n\r\nFor example, let''s look at arrays and tuples in Python. Arrays are mutable and tuples are immutable:\r\n\r\n  # Python\r\n\r\narray = [4, 9]\r\ntuple = (4, 9)\r\n\r\narray[0] = 1\r\n# array is now [1, 9]\r\n\r\ntuple[0] = 1\r\n# raises: TypeError: ''tuple'' object does not support item assignment\r\nDifferent languages have different policies on whether strings should be mutable. Ruby has mutable strings:\r\n\r\n  string = ''mutable?''\r\nstring[7] = ''!''\r\n# string is now ''mutable!''\r\nBut strings are immutable in Python:\r\n\r\n  mystring = ''mutable?''\r\nmystring[7] = ''!''\r\n# TypeError: ''str'' object does not support item assignment\r\nAnd strings are also immutable in JavaScript:\r\n\r\n  string = ''mutable?''\r\nstring[7] = ''!''\r\n// string is still ''mutable?''\r\n// (but no error is raised!)\r\nMutable objects are nice because you can make changes "in-place," without allocating a new object. But be careful—whenever you make an in-place change to an object, all references to that object will now reflect the change (whether you like it or not)!', NULL, '', 2, 0),
(1564, 'dale.seo', '', '', '2015-09-01 17:49:21', '', 'Throwable 클래스 구현 분석', 'Exception 관련 왠만한 메서들은 Throwable 클래스에 구현되어 있어서 분석해보면 자바의 에러 처리를 이해하는데 큰 도움이 된다.\r\n\r\n======= ToString 매서드 =======\r\n    public String toString() {\r\n        String s = getClass().getName();\r\n        String message = getLocalizedMessage();\r\n        return (message != null) ? (s + ": " + message) : s;\r\n    }\r\n============================\r\n\r\n메세지가 있는 경우, "풀 클래스 이름 : 메세지"가 리턴된다.\r\n\r\n======= Throwable 생성자 =======\r\n    public Throwable(Throwable cause) {\r\n        fillInStackTrace();\r\n        detailMessage = (cause==null ? null : cause.toString());\r\n        this.cause = cause;\r\n    }\r\n============================\r\n\r\nThrowable 객체만 인자로 가지는 생성자는 메세지를 cause.toString()으로 지정하기 때문에,\r\nnew Exception(new Exception(new Exception("Error"))); 이렇게 에러를 생성 후 toString() 메서드를 호출하면\r\njava.lang.Exception: java.lang.Exception: java.lang.Exception: Low 이렇게 반환이 된다.\r\n\r\n\r\n======= printStackTrace 매서드 =======\r\n    private void printStackTrace(PrintStreamOrWriter s) {\r\n        // Guard against malicious overrides of Throwable.equals by\r\n        // using a Set with identity equality semantics.\r\n        Set<Throwable> dejaVu =\r\n            Collections.newSetFromMap(new IdentityHashMap<Throwable, Boolean>());\r\n        dejaVu.add(this);\r\n\r\n        synchronized (s.lock()) {\r\n            // Print our stack trace\r\n            s.println(this);\r\n            StackTraceElement[] trace = getOurStackTrace();\r\n            for (StackTraceElement traceElement : trace)\r\n                s.println("\\tat " + traceElement);\r\n\r\n            // Print suppressed exceptions, if any\r\n            for (Throwable se : getSuppressed())\r\n                se.printEnclosedStackTrace(s, trace, SUPPRESSED_CAPTION, "\\t", dejaVu);\r\n\r\n            // Print cause, if any\r\n            Throwable ourCause = getCause();\r\n            if (ourCause != null)\r\n                ourCause.printEnclosedStackTrace(s, trace, CAUSE_CAPTION, "", dejaVu);\r\n        }\r\n    }\r\n============================\r\n\r\n- 인자없이 printStackTrace 메서드를 호출하면 System.err에 쓴다.\r\n- 첫 줄 : s.println(this); => Throwable 객체의 toString() 메서드 반환값을 쓴다.\r\n- 두번 째 줄 부터 : s.println("\\tat " + traceElement); => 탭 들여쓰기 후 "at + traceElement"를 쓴다. (첫 줄은 exception 생성 위치, 나머지는 method 호출 위치)\r\n- Supressed Exception이 있으면 탭 들여쓰기 후 쓴다.\r\n- Causes는 탭없이 써준다.\r\n- 상세 쓰기 매커니즘은 문서 참조 (http://docs.oracle.com/javase/8/docs/api/java/lang/Throwable.html#printStackTrace--)\r\n\r\n\r\n\r\nJava Doc\r\nhttp://docs.oracle.com/javase/8/docs/api/java/lang/Throwable.html\r\n\r\n', NULL, '', 7, 0),
(1565, 'dale.seo', '', '', '2015-09-01 17:52:09', '', '예외를 추상화 수준에 맞게 랩핑해야하는 이유', '클라이언트에게 저수준 구현을 숨길 수 있고, 저수준 구현과 종속성을 줄일 수 있음\r\n\r\n\r\nOne reason that a throwable may have a cause is that the class that throws it is built atop a lower layered abstraction, and an operation on the upper layer fails due to a failure in the lower layer. It would be bad design to let the throwable thrown by the lower layer propagate outward, as it is generally unrelated to the abstraction provided by the upper layer. Further, doing so would tie the API of the upper layer to the details of its implementation, assuming the lower layer''s exception was a checked exception. Throwing a "wrapped exception" (i.e., an exception containing a cause) allows the upper layer to communicate the details of the failure to its caller without incurring either of these shortcomings. It preserves the flexibility to change the implementation of the upper layer without changing its API (in particular, the set of exceptions thrown by its methods).\r\n\r\nA second reason that a throwable may have a cause is that the method that throws it must conform to a general-purpose interface that does not permit the method to throw the cause directly. For example, suppose a persistent collection conforms to the Collection interface, and that its persistence is implemented atop java.io. Suppose the internals of the add method can throw an IOException. The implementation can communicate the details of the IOException to its caller while conforming to the Collection interface by wrapping the IOException in an appropriate unchecked exception. (The specification for the persistent collection should indicate that it is capable of throwing such exceptions.)', NULL, '', 3, 0),
(1566, 'dale.seo', '', '', '2015-09-07 16:42:54', '', '예외 메세지를 하드코딩하지 않고 ResorceBundle을 이용하여 Localize  하기', '\r\npublic interface FooResourcesKeys {\r\n  public static String MSG_FILE_NOT_FOUND = "MSG_FILE_NOT_FOUND";\r\n  public static String MSG_CANT_OPEN_FILE = "MSG_CANT_OPEN_FILE";\r\n}\r\npublic class FooResources extends ListResourceBundle\r\nimplements FooResourcesKeys {\r\n  public Object[][] getContents() {\r\n    return contents;\r\n  }\r\n  \r\n  static final Object[][] contents = {\r\n    // Localize from here\r\n    {MSG_FILE_NOT_FOUND, "Cannot find file {1}"},\r\n    {MSG_CANT_OPEN_FILE, "Cannot open file {1}"},\r\n    // Localize to here\r\n  };\r\n}\r\npublic class MessageUtil {\r\n  private static ResourceBundle myResources =\r\n    ResourceBundle.getBundle("com.foo.FooResources");\r\n  private static String getMessageString(String messageKey) {\r\n    return myResources.getString(messageKey);\r\n  }\r\n  public static String formatMessage(String messageKey) {\r\n    MessageFormat mf = new MessageFormat(getMessageString(messageKey));\r\n    return mf.format(new Object[0]);\r\n  }\r\n  public static String formatMessage(String messageKey, \r\n                                     Object arg0) {\r\n    MessageFormat mf = new MessageFormat(getMessageString(messageKey));\r\n    Object[] args = new Object[1];\r\n    args[0] = arg0;\r\n    return mf.format(args);\r\n  }\r\n  public static String formatMessage(String messageKey, \r\n                                     Object arg0,\r\n                                     Object arg1) {\r\n    MessageFormat mf = new MessageFormat(getMessageString(messageKey));\r\n    Object[] args = new Object[2];\r\n    args[0] = arg0;\r\n    args[1] = arg1;\r\n    return mf.format(args);\r\n  }\r\n  // Include implementations of formatMessage() for as many arguments\r\n  // as you need\r\n}\r\npublic class SomeClass implements FooResourcesKeys {\r\n  ...\r\n  if (!file.exists()) {\r\n    throw new ResourceException(\r\n      MessageUtil.formatMessage(MSG_FILE_NOT_FOUND, \r\n                                file.getName()));\r\n  }\r\n}\r\n\r\n\r\n\r\n==========================================================================\r\nUse message catalogs for easy localization\r\nhttp://www.javaworld.com/article/2075897/testing-debugging/exceptional-practices--part-3.html', NULL, '', 3, 0),
(1567, 'dale.seo', '', '', '2015-09-08 17:24:08', '', 'ResourceBundle Java Tutorial', 'http://docs.oracle.com/javase/tutorial/i18n/resbundle/index.html', NULL, '', 2, 0),
(1568, 'dale.seo', '', '', '2015-09-08 22:43:40', '', '이진 검색 (BinarySearch) 구현', '반복전 구현이 StackOverflow의 위험이 없어서 권장된다.\r\n\r\n반복적 구현 : 범위를 좁혀가면서 floor와 ceiling 인덱스만 계속 업데이트하면서 찾음\r\n재귀적 구현 : 내부적으로 start, end 인덱스를 받는 재귀 함수를 호출\r\n\r\n\r\ndef binary_search_recursively(target, nums):\r\n    if (target < nums[0] or target > nums[len(nums) - 1]):\r\n        return False\r\n    return binary_search_internal(target, nums, 0, len(nums) - 1)\r\n\r\ndef binary_search_internal(target, nums, start, end):\r\n    if (start > end):\r\n        return False\r\n\r\n    mid = (start + end) // 2\r\n    print(''target:'', target, ''start:'', start, ''end:'', end, ''mid:'', mid)\r\n    if (target == nums[mid]):\r\n        return True\r\n    elif (target < nums[mid]):\r\n        return binary_search_internal(target, nums, start, mid - 1)\r\n    else:\r\n        return binary_search_internal(target, nums, mid + 1, end)\r\n\r\ndef binary_search_interatively(target, nums):\r\n    floor, ceiling = 0, len(nums) -1\r\n    while (floor < ceiling):\r\n        half = (ceiling + floor) // 2\r\n        print(''target:'', target, ''floor:'', floor, ''ceiling:'', ceiling, ''half:'', half)\r\n        if (target == nums[half]):\r\n            return True\r\n        elif (target < nums[half]):\r\n            ceiling = half - 1\r\n        else:\r\n            floor = half + 1\r\n    return False', NULL, '', 3, 0),
(1569, 'dale.seo', '', '', '2015-09-09 09:51:16', '', 'HttpServletRequest 객체로 부터 Status Code와 Error Message 추출하는 방법', 'When writing error information, the status code and the error message set on the HttpServletResponse can be accessed through request attributes in a controller:\r\n\r\n@Controller\r\npublic class ErrorController {\r\n\r\n    @RequestMapping(path="/error", produces="application/json")\r\n    @ResponseBody\r\n    public Map<String, Object> handle(HttpServletRequest request) {\r\n\r\n        Map<String, Object> map = new HashMap<String, Object>();\r\n        map.put("status", request.getAttribute("javax.servlet.error.status_code"));\r\n        map.put("reason", request.getAttribute("javax.servlet.error.message"));\r\n\r\n        return map;\r\n    }\r\n\r\n}\r\nor in a JSP:\r\n\r\n<%@ page contentType="application/json" pageEncoding="UTF-8"%>\r\n{\r\n    status:<%=request.getAttribute("javax.servlet.error.status_code") %>,\r\n    reason:<%=request.getAttribute("javax.servlet.error.message") %>\r\n}', NULL, '', 2, 0),
(1570, 'dale.seo', '', '', '2015-09-09 09:57:09', '', '[Spring MVC] ResponseEntityExceptionHandler', 'A convenient base class for @ControllerAdvice classes that wish to provide centralized exception handling across all @RequestMapping methods through @ExceptionHandler methods.\r\nThis base class provides an @ExceptionHandler for handling standard Spring MVC exceptions that returns a ResponseEntity to be written with message converters. This is in contrast to DefaultHandlerExceptionResolver which returns a ModelAndView instead.\r\n\r\nIf there is no need to write error content to the response body, or if using view resolution, e.g. ContentNegotiatingViewResolver, then use DefaultHandlerExceptionResolver instead.\r\n\r\nNote that in order for an @ControllerAdvice sub-class to be detected, ExceptionHandlerExceptionResolver must be configured.\r\n\r\n\r\n\r\nhttp://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/ResponseEntityExceptionHandler.html', NULL, '', 11, 0),
(1571, 'dale.seo', '', '', '2015-09-10 21:32:01', '', 'Counting Sort - 계수 정렬', 'http://redwave102.blog.me/80076259189\r\nhttps://en.wikipedia.org/wiki/Counting_sort\r\n\r\nO(n log n) 성능을 가지는 일반적인 비교 정렬보다 성능이 좋다.\r\nO(n) time and space complexity.\r\n\r\n\r\n=======================================================================\r\ndef counting_sort(the_list, max_value):\r\n    nums_to_counts = [0] * (max_value + 1)\r\n\r\n    for item in the_list:\r\n        nums_to_counts[item] += 1\r\n\r\n    print(nums_to_counts)\r\n\r\n    sorted_list = []\r\n    for item, count in enumerate(nums_to_counts):\r\n        for x in range(count):\r\n            sorted_list.append(item)\r\n\r\n    print(sorted_list)\r\n\r\n    return sorted_list\r\n\r\n# Test\r\nthe_list = [8, 1, 6, 3, 4, 5, 2, 7, 0, 9]\r\nsorted_list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nif sorted_list == counting_sort(the_list, 20):\r\n    print(''OK'')', NULL, '', 9, 0),
(1572, 'dale.seo', '', '', '2015-09-11 17:54:01', '', 'RestTemplate 꼼꼼한 에러 처리', '추가로 서버에서 응답이 없는 경우에는 doExcute에서 DefaultResponseErrorHandler를 사용하기도 이 전에 IO Exception이 발생할 수가 있다.\r\n따라서 restTemplate.excute() 메소드를 호출하는 부분도 try catch(RestClientException e)으로 감싸주면 DefaultResponseErrorHandler가 커버해주지 않는 부분까지 방어할 수 있다.\r\n\r\n==================================================================\r\n		ResponseEntity<Object> responseEntity = null;\r\n\r\n		try {\r\n			responseEntity = (ResponseEntity<Object>) this.restTemplate.exchange(fullUrl, HttpMethod.valueOf(requestMethod.name()), requestEntity, responseType);\r\n			LOGGER.debug("repsonse = status : ''{}'', responseType : ''{}'', responseBody : ''{}''", responseEntity.getStatusCode(), responseType, responseEntity.getBody());\r\n		} catch (RestClientException e) {\r\n			throw new StorePlatformException("SYS_ERROR_REMOTE_SCI", e);\r\n		}', NULL, '', 3, 0),
(1573, 'dale.seo', '', '', '2015-09-11 17:55:32', '', '[Context] Thread 에서 Locale 뽑아 오기', 'LocaleContextHolder.getLocale() 을 사용하면 메서드의 인자로 Locale 객체를 던지지 않고도 어느 Layer에서나 Locale을 알아낼 수 있다.\r\n\r\n\r\nhttp://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/i18n/LocaleContextHolder.html', NULL, '', 6, 0),
(1574, 'dale.seo', '', '', '2015-09-14 20:54:37', '', 'Bottom-Up Algorithms (Iterative)', 'Bottom-Up Algorithms\r\nGoing bottom-up is a way to avoid recursion, saving the memory cost that recursion incurs when it builds up the call stack.\r\n\r\nPut simply, a bottom-up algorithm "starts from the beginning," while a recursive algorithm "starts from the end and works backwards."\r\n\r\nFor example, if we wanted to multiply all the numbers in the range 1...n1...n, we could use this cute, top-down, recursive one-liner:\r\n\r\n  def product_1_to_n(n):\r\n    # we assume n >= 1\r\n    return n * product_1_to_n(n-1) if n > 1 else 1\r\nThis approach has a problem: it builds up a call stack of size O(n)O(n), which makes our total memory cost O(n)O(n). This makes it vulnerable to a stack overflow error, where the call stack gets too big and runs out of space.\r\n\r\nTo avoid this, we can instead go bottom-up:\r\n\r\n  def product_1_to_n(n):\r\n    # we assume n >= 1\r\n    result = 1\r\n    for num in range(1, n+1):\r\n        result *= num\r\n    return result\r\nThis approach uses O(1)O(1) space (O(n)O(n) time).\r\n\r\nNote that some compilers and interpreters will do what''s called tail call optimization (TCO), where it can optimize some recursive functions to avoid building up a tall call stack. Python and Java decidedly do not use TCO. Some Ruby implementations do, but most don''t. Some C implementations do, and the JavaScript spec recently allowed TCO. Scheme is one of the few languages that guarantee TCO in all implementations. In general, best not to assume your compiler/interpreter will do this work for you.\r\n\r\n\r\nhttps://www.interviewcake.com/concept/bottom-up', NULL, '', 3, 0),
(1575, 'dale.seo', '', '', '2015-09-14 21:27:54', '', 'Hashing and Hash Functions', 'Hashing and Hash Functions\r\nA hash function takes data (like a string, or a file’s contents) and outputs a hash, a fixed-size string or number.\r\n\r\nFor example, here’s the MD5 hash (MD5 is a common hash function) for a file simply containing “cake”:\r\n\r\n  DF7CE038E2FA96EDF39206F898DF134D\r\nAnd here’s the hash for the same file after it was edited to be “cakes”:\r\n\r\n  0E9091167610558FDAE6F69BD6716771\r\nNotice the hash is completely different, even though the files were similar. Here''s the hash for a long film I have on my hard drive:\r\n\r\n  664f67364296d08f31aec6fea4e9b83f\r\nThe hash is the same length as my other hashes, but this time it represents a much bigger file—461Mb.\r\n\r\nWe can think of a hash as a "fingerprint." We can trust that a given file will always have the same hash, but we can''t go from the hash back to the original file. Sometimes we have to worry about multiple files having the same hash value, which is called a hash collision.\r\n\r\nSome uses for hashing:\r\n\r\nHash maps. Suppose we want an array-like data structure with constant-time lookups, but we want to look up values based on arbitrary "keys," not just sequential "indices." We could allocate an array, and use a hash function to translate keys into array indices. That''s the basic idea behind a hash map!\r\nPreventing man-in-the-middle attacks. Ever notice those things that say "hash" or "md5" or "sha1" on download sites? The site is telling you, "We hashed this file on our end and got this result. When you finish the download, try hashing the file and confirming you get the same result. If not, your internet service provider or someone else might have injected malware or tracking software into your download!"\r\n\r\n\r\n\r\nhttps://www.interviewcake.com/concept/hashing', NULL, '', 3, 0),
(1576, 'dale.seo', '', '', '2015-09-23 14:03:59', '', 'StringUtils.removeEnd', 'deliminator로 문자열들을 붙이고 맨 뒤에 있는 deliminator를 제거할 때 유용하다.\r\n\r\n				StringBuffer sb = new StringBuffer();\r\n				for (XssViolation violation : violations) {\r\n					sb.append(violation.getField()).append(" : ''").append(violation.getValue()).append("'', ");\r\n				}\r\n\r\n				throw new StorePlatformException("SYS_ERROR_SECURITY_XSS", StringUtils.removeEnd(sb.toString(), ", "));', NULL, '', 2, 0),
(1577, 'dale.seo', '', '', '2015-09-25 16:11:51', '', '디스크 사용량 분석툴', '- 윈도우 : WinDirStat (http://windirstat.info/index.html)\r\n- 맥 : Disk Inventory X (http://www.derlien.com/)', NULL, '', 5, 0),
(1578, 'dale.seo', '', '', '2015-09-28 16:00:36', '', 'OS 별로 상이한 Line Seperator', 'Unix 계열 : LF(Line Feed)\r\nWindow 계열 : CRLF(Carriage Return & Line Feed)\r\n\r\nhttps://en.wikipedia.org/wiki/Newline\r\n------------------------------------------------------------------------------------------------------\r\n\r\nThey''re different characters. \\r is carriage return, and \\n is line feed.\r\n\r\nOn "old" printers, \\r sent the print head back to the start of the line, and \\n advanced the paper by one line. Both were therefore necessary to start printing on the next line.\r\n\r\nObviously that''s somewhat irrelevant now, although depending on the console you may still be able to use \\r to move to the start of the line and overwrite the existing text.\r\n\r\nMore importantly, Unix tends to use \\n as a line separator; Windows tends to use \\r\\n as a line separator and Macs (up to OS 9) used to use \\r as the line separator. (Mac OS X is Unix-y, so uses \\n instead; there may be some compatibility situations where \\r is used instead though.)\r\n\r\nFor more information, see the Wikipedia newline article.\r\n\r\nEDIT: This is language-sensitive. In C# and Java, for example, \\n always means Unicode U+000A, which is defined as line feed. In C and C++ the water is somewhat muddier, as the meaning is platform-specific. See comments for details.', NULL, '', 7, 0),
(1579, 'dale.seo', '', '', '2015-09-28 17:25:37', '', 'Git Alias 사용', 'git st와 git lg는 많이 사용하는 Alias 이므로 다음과 같이 등록해준다.\r\n\r\n# 콘솔 명령어\r\n============================================================================================================================\r\n$ git config --global alias.st status\r\n\r\n$ git config --global alias.lg "log --all --oneline --decorate --color --graph --pretty=format:''%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'' --abbrev-commit"\r\n============================================================================================================================\r\n\r\n# 많이 사용되는 Alias\r\n```\r\ngit config --global alias.st status\r\ngit config --global alias.co checkout\r\ngit config --global alias.br branch\r\ngit config --global alias.ci commit\r\n```\r\n\r\n# 등록후 설정 파일 모습\r\n============================================================================================================================\r\n[user]\r\n        name = dale.seo\r\n        email = dale.seo@gmail.com\r\n[core]\r\n        autocrlf = true\r\n        excludesfile = C:\\\\Users\\\\Administrator\\\\Documents\\\\gitignore_global.txt\r\n[alias]\r\n        st = status\r\n        lg = log --all --oneline --decorate --color --graph --pretty=format:''%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'' --abbrev-commit\r\n============================================================================================================================\r\n\r\nhttp://mobicon.tistory.com/147\r\nhttps://coderwall.com/p/euwpig/a-better-git-log', NULL, '', 35, 0),
(1580, 'dale.seo', '', '', '2015-09-30 10:24:53', '', 'BeanFactory의 초기화 메소드 호출 순서', 'Bean factory implementations should support the standard bean lifecycle interfaces as far as possible. The full set of initialization methods and their standard order is:\r\n1. BeanNameAware''s setBeanName\r\n2. BeanClassLoaderAware''s setBeanClassLoader\r\n3. BeanFactoryAware''s setBeanFactory\r\n4. ResourceLoaderAware''s setResourceLoader (only applicable when running in an application context)\r\n5. ApplicationEventPublisherAware''s setApplicationEventPublisher (only applicable when running in an application context)\r\n6. MessageSourceAware''s setMessageSource (only applicable when running in an application context)\r\n7. ApplicationContextAware''s setApplicationContext (only applicable when running in an application context)\r\n8. ServletContextAware''s setServletContext (only applicable when running in a web application context)\r\n9. postProcessBeforeInitialization methods of BeanPostProcessors\r\n10. InitializingBean''s afterPropertiesSet\r\n11. a custom init-method definition\r\n12. postProcessAfterInitialization methods of BeanPostProcessors\r\n\r\nOn shutdown of a bean factory, the following lifecycle methods apply:\r\n1. DisposableBean''s destroy\r\n2. a custom destroy-method definition\r\n\r\n\r\n\r\nhttp://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/BeanFactory.html', NULL, '', 8, 0),
(1581, 'dale.seo', '', '', '2015-09-30 11:23:31', '', 'AOP Alliance를 이용해서 AOP 구현', '========== XML ==========\r\n    <bean id="allLocalSCIPostProcessor" class="com.skplanet.storeplatform.framework.core.proxy.LocalSCIPostProcessor">\r\n        <property name="validator">\r\n            <bean class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/>  \r\n        </property>\r\n        <property name="systemErrorCodeTranslator">\r\n            <bean class="com.skplanet.storeplatform.sac.common.support.SacSystemErrorCodeTranslator" /> \r\n        </property>\r\n        <property name="order" value="10"/>\r\n    </bean> \r\n\r\n========== LocalSCIPostProcessor ==========\r\npublic class LocalSCIPostProcessor extends AbstractAdvisingBeanPostProcessor implements InitializingBean {\r\n	private Validator validator;\r\n\r\n	private SystemErrorCodeTranslator systemErrorCodeTranslator;\r\n\r\n	public void setValidator(Validator validator) {\r\n		this.validator = validator;\r\n	}\r\n\r\n	public void setSystemErrorCodeTranslator(SystemErrorCodeTranslator systemErrorCodeTranslator) {\r\n		this.systemErrorCodeTranslator = systemErrorCodeTranslator;\r\n	}\r\n\r\n	@Override\r\n	public void afterPropertiesSet() throws Exception {\r\n		Pointcut pointcut = new AnnotationMatchingPointcut(LocalSCI.class, true);\r\n\r\n		Advice advice = new LocalSCIInterceptor(this.systemErrorCodeTranslator, this.validator);\r\n\r\n		this.advisor = new DefaultPointcutAdvisor(pointcut, advice);\r\n	}\r\n}\r\n\r\n========== LocalSCIInterceptor ==========\r\npublic class LocalSCIInterceptor implements MethodInterceptor {\r\n	private final static Logger LOGGER = LoggerFactory.getLogger(LocalSCIInterceptor.class);\r\n\r\n	private final SystemErrorCodeTranslator systemErrorCodeTranslator;\r\n\r\n	private final Validator validator;\r\n\r\n	public LocalSCIInterceptor(SystemErrorCodeTranslator systemErrorCodeTranslator, Validator validator) {\r\n		super();\r\n		this.systemErrorCodeTranslator = systemErrorCodeTranslator;\r\n		this.validator = validator;\r\n	}\r\n\r\n	@Override\r\n	public Object invoke(MethodInvocation invocation) throws Throwable {\r\n		Long started = System.currentTimeMillis();\r\n\r\n		boolean isError = false;\r\n\r\n		Throwable finalException = null;\r\n\r\n		String prefix = this.systemErrorCodeTranslator.translate(((ReflectiveMethodInvocation) invocation).getThis()\r\n				.getClass().getPackage().getName());\r\n\r\n		try {\r\n			this.checkParameterValidation(invocation);\r\n\r\n			return invocation.proceed();\r\n\r\n		} catch (Throwable ex) {\r\n			isError = true;\r\n\r\n			if (ex instanceof StorePlatformException) {\r\n				finalException = ex;\r\n\r\n			} else {\r\n				finalException = new StorePlatformException(prefix + "_SYS_ERROR", ex, ex.getClass().getName());\r\n\r\n			}\r\n\r\n			throw finalException;\r\n\r\n		} finally {\r\n			Logger logger = LoggerFactory.getLogger(((ReflectiveMethodInvocation) invocation).getThis().getClass()\r\n					.getName());\r\n\r\n			Long ended = System.currentTimeMillis();\r\n\r\n			StackTraceElement[] stackTraces = Thread.currentThread().getStackTrace();\r\n\r\n			StringBuffer profiling = new StringBuffer();\r\n			profiling.append("\\r\\n-------------------------------------------------------------------------------");\r\n			profiling.append("\\r\\n REPORT : Profiling of LocalSCI Invocation.");\r\n			profiling.append("\\r\\n-------------------------------------------------------------------------------");\r\n			profiling.append("\\r\\n - Caller : ").append(stackTraces[5]);\r\n			profiling.append("\\r\\n - Callee : ").append(invocation.getClass().getName()).append(".");\r\n			profiling.append(invocation.getMethod().getName()).append("()");\r\n\r\n			profiling.append("\\r\\n - Time : ")\r\n					.append(DateFormatUtils.format(started, DateFormatUtils.ISO_DATETIME_FORMAT.getPattern()))\r\n					.append(" ~ ")\r\n					.append(DateFormatUtils.format(ended, DateFormatUtils.ISO_DATETIME_FORMAT.getPattern()))\r\n					.append(" (").append(ended - started).append("ms").append(")");\r\n\r\n			if (finalException == null) {\r\n				profiling.append("\\r\\n - Result : ").append("SUCCESS");\r\n				profiling.append("\\r\\n-------------------------------------------------------------------------------");\r\n				logger.info(profiling.toString());\r\n\r\n			} else {\r\n				profiling.append("\\r\\n - Result : ").append("FAIL");\r\n				profiling.append("\\r\\n - StackTrace : ");\r\n				profiling.append(ExceptionUtils.getStackTrace(finalException));\r\n				profiling.append("\\r\\n-------------------------------------------------------------------------------");\r\n				logger.error(profiling.toString());\r\n			}\r\n\r\n		}\r\n	}\r\n\r\n	/*\r\n	 * <pre> 파라미터변수 유효성체크. </pre>\r\n	 * \r\n	 * @param invocation 메소드실행정보\r\n	 */\r\n	private void checkParameterValidation(MethodInvocation invocation) {\r\n\r\n		if (ArrayUtils.isEmpty(invocation.getArguments())) {\r\n			return;\r\n		}\r\n\r\n		Method method = invocation.getMethod();\r\n\r\n		Object[] args = invocation.getArguments();\r\n\r\n		Annotation[][] paramsAnnotations = method.getParameterAnnotations();\r\n\r\n		if (paramsAnnotations != null) {\r\n\r\n			int index = 0;\r\n\r\n			for (Annotation[] paramAnnotations : paramsAnnotations) {\r\n\r\n				if (ArrayUtils.isEmpty(paramAnnotations)) {\r\n					continue;\r\n				}\r\n\r\n				for (Annotation paramAnnotation : paramAnnotations) {\r\n					if (!StringUtils.startsWith(paramAnnotation.annotationType().getSimpleName(), "Validated")) {\r\n						continue;\r\n					}\r\n\r\n					Object arg = args[index];\r\n\r\n					BeanPropertyBindingResult errors = new BeanPropertyBindingResult(arg, arg.getClass()\r\n							.getSimpleName());\r\n\r\n					Class[] groups = ((Validated) paramAnnotation).value();\r\n\r\n					((SmartValidator) this.validator).validate(arg, errors, groups);\r\n\r\n					MethodParameter parameter = new MethodParameter(method, index);\r\n\r\n					if (errors.getErrorCount() > 0) {\r\n						throw new StorePlatformMethodArgumentNotValidException(null, parameter, errors);\r\n					}\r\n				}\r\n\r\n				index++;\r\n			}\r\n		}\r\n	}\r\n\r\n}', NULL, '', 9, 0),
(1582, 'dale.seo', '', '', '2015-09-30 21:50:28', '', '[Git 기본셋업] 전역 사용자명/이메일 구성하기', 'https://help.github.com/articles/set-up-git/#platform-windows\r\n\r\n# 세팅\r\n$ git config --global user.name "서대영/Store기술개발팀/SKP"\r\n$ git config --global user.email "dale.seo@sk.com"\r\n\r\n# 확인\r\n$ git config user.name\r\n서대영/Store기술개발팀/SKP\r\n$ git config user.email\r\ndale.seo@sk.com', NULL, '', 26, 0),
(1583, 'dale.seo', '', '', '2015-09-30 21:58:07', '', '[Git 기본셋업] https 연결 시 username과 password 매번 입력하지 않기', '[ Linux ]\r\n// 1시간 동안 로그인 유지\r\ngit config --global credential.helper ''cache --timeout=3600''\r\n\r\n[ Window ]\r\n\r\n$ git config --global credential.helper wincred\r\n\r\n라고 입력해두면 딱 한번 만 username과 password를 입력하면, 두 번째 push/fetch 때 부터는 안 물어본다.\r\n\r\nhttps://help.github.com/articles/caching-your-github-password-in-git/\r\n\r\n\r\n[ MAC ]\r\n\r\n나중에 회사에서 알아보기', NULL, '', 20, 0),
(1584, 'dale.seo', '', '', '2015-10-03 15:56:07', '', '[Git 기본 설정] 설정 레벨 (시스템/사용자/저장소)', 'Git 설정을 할 때 프로젝트 별로 할 수도 있고, 사용자(PC) 별로도 할 수 있다.\r\n하위 레벨 설정이 상위 레벌 설정을 Overwrtie 하는 방식으로 적용된다.\r\n\r\n# 시스템 레벨 설정\r\n - 모든 사용자에 적용되는 설정\r\n - 명령어: $git config --system\r\n - 설정 파일 위치: /etc\\gitconfig\r\n\r\n# 사용자 레벨 설정\r\n - 모든 저장소에 적용되는 설정\r\n - 명령어: $git config --global\r\n - 설정 파일 위치: .git/config\r\n\r\n# 저장소 레벨 설정\r\n - 저장소 별 별도 설정\r\n - 명령어: $git config\r\n - 설정 파일 위치: ~/.gitconfig\r\n', NULL, '', 8, 0),
(1585, 'dale.seo', '', '', '2015-10-03 16:15:41', '', '[Git 명령어] $ git config', 'https://git-scm.com/docs/git-config\r\n\r\n--system: 시스템 설정 옵션\r\n--global: 사용자 설정 옵션\r\n\r\n$ git config -l\r\n목록\r\n\r\n$ git config -e\r\n수정\r\n\r\n$ git config <key>\r\n해당 키의 값 확인', NULL, '', 15, 0),
(1586, 'dale.seo', '', '', '2015-10-03 16:20:31', '', '도움말 보기', '$ git help <verb>\r\n$ git <verb> --help', NULL, '', 3, 0),
(1587, 'dale.seo', '', '', '2015-10-03 16:40:50', '', 'Git 저장소 만들기', '# 기존 로컬 디렉터리를 Git 로컬 저장소로 만들기\r\n: 기존 로컬 디렉터리를 Git으로 관리하고 싶을 때, 프로젝트의 디렉토리를 이동해서 다음과 같은 명령을 실행한다. .git 이라는 디렉토리가 생긴다.\r\n\r\n$ git init\r\nInitialized empty Git repository in D:/git/test2/.git/\r\n\r\n$ touch README.md\r\n\r\n$ git add README.md\r\n\r\n$ git commit -m ''initial commit''\r\n[master (root-commit) 91617ff] initial commit\r\n 1 file changed, 0 insertions(+), 0 deletions(-)\r\n create mode 100644 README.md\r\n\r\n# 기존 저장소를 Clone하기\r\n: Git은 Subversion과 다르게 서버로 부터 최신 상태의 프로젝트만 받아오는 게 해오는 게 아니라(checkout), 서버에 있는 원격 저장소를 히스토리 까지 몽땅 로컬로 복사해온다(clone). 따라서 서버의 디스크가 망가져도 로컬 데이터로 언제든지 쉽게 복구가 가능하다.\r\n\r\n$ git clone <주소>\r\n원격 디렉토리명 그대로 사용\r\n$ git clone <주소> <디렉토리명>\r\n다른 디렉토리명 사용\r\n\r\n$ git clone https://github.com/keundaelim/git-sandbox.git\r\nCloning into ''git-sandbox''...\r\nremote: Counting objects: 72, done.\r\nremote: Compressing objects: 100% (17/17), done.\r\nremote: Total 72 (delta 25), reused 16 (delta 16), pack-reused 35\r\nUnpacking objects: 100% (72/72), done.\r\nChecking connectivity... done.', NULL, '', 8, 0),
(1588, 'dale.seo', '', '', '2015-10-05 18:10:51', '', '[Git명령어] git diff', '워킹 디렉터리와 Staging Area 간 비교 (즉, add 한 것과 안 한 것 비교)\r\n$ git diff\r\n\r\nStaging Area와 저장소 간 비교 (즉 저장소 commit 한 것과 안 한 것 비교)\r\n$ git diff --staged 또는 --cached\r\n\r\n워킹 디렉터리와 저장소 간 비교 (즉, add 안 한 것과 저장소에 commit 한 것과 비교)\r\n$ git diff HEAD\r\n\r\n워킹 디렉토리와 바로 전 커밋 비교\r\n$ git diff HEAD^\r\n\r\n마지막 커밋과 마지만 전 커밋 비교\r\n$ git diff HEAD HEAD^\r\n\r\n특정 커밋과 비교\r\n$ git diff <commit_num>\r\n\r\n특정 기간 비교\r\n$ git diff --since=1.week.ago --until=1.minute.ago\r\n\r\n\r\n\r\n\r\n\r\n\r\n', NULL, '', 22, 0),
(1589, 'dale.seo', '', '', '2015-10-05 18:12:10', '', '파일에 vi 에디터 없이 간단한 문자 쓰기', '$ echo ''eee'' >> e.txt\r\n\r\n$ cat e.txt\r\neee\r\n\r\n\r\n>> 를 쓰면 한 줄 뛰어서 추가되고, > 를 쓰면 기존 내용을 지우고 써진다.\r\n', NULL, '', 5, 0),
(1590, 'dale.seo', '', '', '2015-10-05 18:33:37', '', '[Git명령어] git commit', 'git add로 스테이징 영역에 추가한 파일들의 변경 사항을 Git 저장소에 저장(반영)\r\n\r\n인라인으로 메시지 추가\r\n$ git commit -m ''메세지 단락1'' -m ''메세지 단락2''\r\n\r\nTracked but unstaged 영역에 파일들까지 add 생략하고 바로 commit 하기 \r\n(즉, 수정된 파일에 대해서 add 명령어를 생략할 수 있음. 새로 워킹 디렉토리에 추가한 Untracked 파일은 제외)\r\n$ git commit -a\r\n\r\n특정 파일만 커밋\r\n$ git commit <file_name>\r\n\r\n직전 커밋의 메세지를 수정\r\n$ git commit --amend -m ''수정된 메세지'' \r\n\r\n직전 커밋에 변경 사항 추가 (기존 메세지는 변경하지 않고)\r\n$ git commit --amend -C HEAD', NULL, '', 38, 0),
(1591, 'dale.seo', '', '', '2015-10-05 18:40:22', '', '[Git명령어] git rm / git mv', '워킹 디렉토리에서 파일을 삭제 후, Staging Area에 add\r\n$ git rm <file>\r\n\r\nStaging Area에서만 삭제 (보통 .gitignore 파일에 항목 추가 하기 전에 이미 스태이징 영역에 올란 간 파일들을 다시 뺄때 사용, 워킹 디렉토리에서는 지워지지 않음)\r\n$ git rm --cached <file>\r\n\r\n워킹 디렉토리에서 파일을 이동 후, 기존 파일은 삭제하고, 신규 파일은 Staging Area 에 add\r\n기존 파일의 내용으로 신규 파일을 생성하고, 기존 파일은 삭제하되 이력을 보존해준다. (매우 훌륭함!)\r\n상태를 확인하면 renamed: <old_name> -> <new_name> 으로 스테이징 영역에 보인다.\r\n$ git mv <old_name> <new_name>', NULL, '', 15, 0),
(1592, 'dale.seo', '', '', '2015-10-07 13:37:04', '', 'Gerrit 연결을 위한 Push 설정', '$ git config remote.origin.push refs/heads/*:refs/for/*\r\n\r\n$ git config -e\r\n=======================================\r\n[remote "origin"]\r\n        url = https://skvalley.com/gerrit/p/storeplatform_framework.git\r\n        fetch = +refs/heads/*:refs/remotes/origin/*\r\n        push = refs/heads/*:refs/for/*\r\n\r\n', NULL, '', 8, 0),
(1593, 'dale.seo', '', '', '2015-10-07 21:50:13', '', '[Git명령어] git log', 'directed acyclic graph\r\n$ git log --graph --decorate --all\r\n- graph: creates the ASCII graph\r\n- decorate: shows the tags/commits\r\n- all: shows all branches\r\n\r\n특정 저자의 커밋들만 조회\r\n$ git log --author="Dale Seo"\r\n\r\n지난 2주 동안 만들어진 커밋들만 조회\r\n$ git log --since=2.weeks\r\n\r\n지난 5시간 전에 만들어진 오래된 커밋들만 조회\r\n$ git log --since=5.hours\r\n\r\n2008년 10월 1일 부터 현재까지의 커밋들만 조회\r\n$ git log --since=2008.10.1\r\n\r\n다른 브랜치들의 트리도 같이 보기\r\n$ git log --all\r\n\r\n한줄로 보기 (해쉬 대신 커밋번호 나옴)\r\n$ git log --oneline\r\n\r\n로그와 diff를 같이 보기\r\n$ git log -p\r\n\r\n최근 3개만 보기\r\n$ git log -3\r\n\r\n최신 커밋 바로 전 커밋만 보기\r\n$ git log -1 HEAD^\r\n\r\n최신 커밋 바로 전전 커밋만 보기\r\n$ git log -1 HEAD~2\r\n', NULL, '', 19, 0),
(1594, 'dale.seo', '', '', '2015-10-07 21:52:27', '', '[Git명령어] gitk', '$ gitk\r\n\r\n히스토리를 CUI도구로 시각화하여 나태내줌', NULL, '', 2, 0),
(1597, 'dale.seo', '', '', '2015-10-07 22:06:11', '', '[Git명령어] Staging Area와 워킹 디렉터리 넘나들기', '워킹 디렉터리 -> Staging Area\r\n$ git add <file>\r\n\r\nStaging Area -> 워킹 디렉터리\r\n$ git reset HEAD <file>\r\n\r\n워킹 디렉터리에서 변경한 파일 복원\r\n$ git checkout -- <file>\r\n', NULL, '', 10, 0),
(1598, 'dale.seo', '', '', '2015-10-07 22:18:20', '', '[Git명령어] git remote', 'URL과 함께 원격 저장소 목록 보기\r\n$ git remote -v\r\n\r\n리모트 저장소의 구체적인 정보 조회\r\n$ git remote show [단축이름]\r\n$ git remote show origin\r\n\r\n리모트 저장소 추가\r\n$ git remote add [단축이름] [URL]\r\n\r\n리모트 저장소 단축이름 수정\r\n$ git remote rename [name_from] [name_to]\r\n\r\n리모트 저장소 삭제\r\n$ git remote rm [단축이름]\r\n\r\n리모트 저장소 URL 변경\r\n$ git remote set-url origin https://newhost.com/usr/local/gitroot/myproject.git\r\n\r\n원격 저장소에서 쓸모가 없어진 원격 브랜치 제거하기\r\n$ git remote prune origin', NULL, '', 29, 0),
(1606, 'dale.seo', '', '', '2015-10-12 23:40:31', '', '[Git명령어] git push', '다른 브랜치 이름으로 리모트 서버에 push\r\n$ git push [remotename] [localbranch]:[remotebranch]\r\nex) git push origin sf:serverfix\r\n\r\n리모트 브랜치 삭제 (로컬에서 빈 내용을 리모트의 remotebranch에 채워넣어라)\r\n$ git push [remotename] :[remotebranch]\r\nex) $ git push origin :serverfix\r\n\r\n푸싱된 변경 사항까지 확인\r\n$ git --dry-run\r\n\r\n# -u 옵션\r\n설정파일에 현재의 로컬 master 브랜치를 origin의 master 브랜치로 연결해 주어 다음부터는 자동으로 master브랜치에서 git push를 하면 origin의 master브랜치로 푸시가 되고 git pull을 하면 origin의 master를 fetch해서 로컬의 master로 merge하도록 설정하는 것\r\n\r\n모든 브랜치를 원격에 올리기\r\n$ git push --all origin\r\n\r\n모든 태그를 원격에 올리기\r\n$ git push --tags origin', NULL, '', 16, 0),
(1600, 'dale.seo', '', '', '2015-10-07 22:19:58', '', '[Git명령어] git fetch / git pull', '원격 저장소에서 브랜치의 최신 상태 가져오기 (origin/ 으로 시작하는 원격 브랜치에만 반영하고, 로컬 브랜치와 머지는 하지 않음)\r\n$ git fetch [remote-name] [branch-name]\r\n\r\n원격 브랜치의 최신 상태를 가져와서 로컬 브랜치와 통합 (로컬 브랜치에 머지 커밋이 생기거나, 충돌이 발생할 수 있다)\r\n$ git pull [remote-name] [branch-name]\r\n= git fetch [remote-name] + git merge [remote-name]/[branch-name]', NULL, '', 21, 0),
(1607, 'dale.seo', '', '', '2015-10-13 15:18:40', '', 'JAVA_HOME, M2_HOME 설정', '# JAVA_HOME\r\nexport JAVA_HOME=$(/usr/libexec/java_home)\r\n\r\n# Maven\r\nexport M2_HOME=/usr/local/apache-maven-3.3.3\r\nexport M2=$M2_HOME/bin\r\nexport PATH=$M2:$PATH', NULL, '', 7, 0),
(1608, 'dale.seo', '', '', '2015-10-15 10:51:20', '', 'Git 서브모듈 구성하기', '하나의 부모 로컬 저장소를 만들고 그 아래 관련 저장소들을 여러개 추가하면 트리 구조가 생겨서 관리가 용이하다.\r\n\r\n$ mkdir storeplatform-common\r\n\r\n$ cd storeplatform-common\r\n\r\n$ git init\r\nInitialized empty Git repository in /Users/1002139/git/storeplatform-common/.git/\r\n\r\n$ git submodule add https://skvalley.com/gerrit/p/storeplatform_guidgenerator.git\r\nCloning into ''storeplatform_guidgenerator''...\r\nremote: Counting objects: 117, done\r\nremote: Finding sources: 100% (117/117)\r\nremote: Total 117 (delta 34), reused 117 (delta 34)\r\nReceiving objects: 100% (117/117), 9.99 KiB | 0 bytes/s, done.\r\nResolving deltas: 100% (34/34), done.\r\nChecking connectivity... done.\r\n\r\n$ git submodule add https://skvalley.com/gerrit/p/storeplatform_framework.git\r\nCloning into ''storeplatform_framework''...\r\nremote: Counting objects: 4827, done\r\nremote: Finding sources: 100% (4827/4827)\r\nremote: Total 4827 (delta 2063), reused 4827 (delta 2063)\r\nReceiving objects: 100% (4827/4827), 630.40 KiB | 0 bytes/s, done.\r\nResolving deltas: 100% (2063/2063), done.\r\nChecking connectivity... done.\r\n\r\n$ git submodule add https://skvalley.com/gerrit/p/storeplatform_test.git\r\nCloning into ''storeplatform_test''...\r\nremote: Counting objects: 226, done\r\nremote: Finding sources: 100% (226/226)\r\nremote: Total 226 (delta 78), reused 226 (delta 78)\r\nReceiving objects: 100% (226/226), 35.03 KiB | 0 bytes/s, done.\r\nResolving deltas: 100% (78/78), done.\r\nChecking connectivity... done.\r\n\r\n======================================================\r\n$ git config -e\r\n\r\n[submodule "storeplatform_guidgenerator"]\r\n        url = https://skvalley.com/gerrit/p/storeplatform_guidgenerator.git\r\n[submodule "storeplatform_framework"]\r\n        url = https://skvalley.com/gerrit/p/storeplatform_framework.git\r\n[submodule "storeplatform_test"]\r\n        url = https://skvalley.com/gerrit/p/storeplatform_test.git', NULL, '', 12, 0),
(1602, 'dale.seo', '', '', '2015-10-07 22:40:48', '', 'Git 태그', '태그는 프로젝트의 마일스톤을 표시하기 이해 사용되며 읽기 전용 브랜치로 생각해도 좋다\r\n\r\n태그 목록 조회하기\r\n$ git tag\r\n\r\n태그 상세 조회하기\r\n$ git show <version>\r\n\r\n특정 브랜치의 HEAD에 태그 추가하기\r\n$ git tag <version> <branch_name>\r\n\r\n태그 추가하기\r\n$ git tag <version> (<checksum>)\r\n\r\n태그 추가하면서 메세지 남기기\r\n$ git tag -a <version> -m "<message>"\r\n\r\n태그 공유하기\r\n$ git push <remote> <version>\r\n예) $ git push origin v0.1\r\n\r\n모든 태그 리모트에 공유하기\r\n$ git push --tags\r\n\r\n서버에 없는 로컬의 모든 태그 다 올리기\r\n$ git push <remote> <local> --tags\r\n\r\n특정 태그로 이동 (읽기만 가능, 변경 불가)\r\n$ git checkout <tag_name>\r\n\r\n특정 태그에서 브랜치 따기 (보통 핫픽스)\r\n$ git checkout -b <branch_name> <tag_name>\r\n$ git checkout -b hotfix/3.2.1 3.2.0', NULL, '', 36, 0),
(1603, 'dale.seo', '', '', '2015-10-12 14:40:45', '', '[Maven Plugin] Tomcat6', '구동 tomcat:run\r\n\r\n            <plugin>\r\n                <groupId>org.codehaus.mojo</groupId>\r\n                <artifactId>tomcat-maven-plugin</artifactId>\r\n                <configuration>\r\n                    <port>8010</port>\r\n                    <path>/</path>\r\n                    <warSourceDirectory>${basedir}/webapp</warSourceDirectory>\r\n                </configuration>\r\n            </plugin>', NULL, '', 7, 0),
(1604, 'dale.seo', '', '', '2015-10-12 15:35:21', '', 'Maven Install 시 javadoc 생략 방법', 'clean install -Dmaven.javadoc.skip=true', NULL, '', 8, 0),
(1605, 'dale.seo', '', '', '2015-10-12 23:06:11', '', '[Git명령어] git branch', '현재 브랜치로 부터 새로운 브랜치 만들기\r\n$ git branch <branch_name>\r\n\r\n다른 브랜치로 부터 새로운 브랜치 만들기\r\n$ git branch <new_branch_name> <branch_name>\r\n\r\n태그로 부터 새로운 브랜치 만들기\r\n$ git branch <new_branch_name> <tag_name>\r\n\r\n브랜치 만들고 그 브랜치로 바로 체크하웃 하기\r\n$ git checkout -b <branch_name>\r\n\r\n원격 브랜치 목록 보기\r\n$ git branch -r\r\n\r\n지역/원격 브랜치 목록 모두 보기\r\n$ git branch -a\r\n\r\n마지막 커밋 메세지도 함께보기\r\n$ git branch -v\r\n\r\n현재 checkout한 브랜치를 기준으로 merge된 브랜치인지 그렇지 않은지 필터링\r\n$ git branch --merged\r\n$ git branch --no-merged\r\n\r\nMerged된 브랜치 삭제\r\n$ git branch -d <branch_name>\r\n\r\nMerged 안 된 브랜치 강제 삭제\r\n$ git branch -D <branch_name>\r\n\r\n원격 브랜치 삭제\r\n$git push origin :<branch_name>\r\n\r\n현재 브랜치 이름 바꾸기\r\n$ git branch -m <new_branch_name>\r\n\r\n다른 브랜치 이름 바꾸기\r\n$ git branch -m <old_name> <new_name>\r\n', NULL, '', 39, 0),
(1609, 'dale.seo', '', '', '2015-10-15 10:52:23', '', '쉘에 색깔 넣기 (Terminal Color 설정)', '# Set CLICOLOR if you want Ansi Colors in iTerm2 \r\nexport CLICOLOR=1\r\n\r\n# Set colors to match iTerm2 Terminal Colors\r\nexport TERM=xterm-256color', NULL, '', 5, 0),
(1610, 'dale.seo', '', '', '2015-10-15 11:19:10', '', 'command line 경로부분에  git branch 를 표시 ', '.bash_profile 에 다음을 추가한다.\r\n\r\n=================================================================\r\n# Git Branch\r\nfunction git-branch-name {\r\n  git symbolic-ref --short HEAD 2>/dev/null\r\n}\r\nfunction git-branch-prompt {\r\n  local branch=`git-branch-name`\r\n  if [ $branch ]; then printf " [%s]" $branch; fi\r\n}\r\nPS1="\\u@\\h \\[\\033[0;36m\\]\\W\\[\\033[0m\\]\\[\\033[0;32m\\]\\$(git-branch-prompt)\\[\\033[0m\\] \\$ "\r\n\r\n# Set CLICOLOR if you want Ansi Colors in iTerm2 \r\nexport CLICOLOR=1\r\n\r\n# Set colors to match iTerm2 Terminal Colors\r\nexport TERM=xterm-256color', NULL, '', 15, 0),
(1611, 'dale.seo', '', '', '2015-10-16 22:23:59', '', '익명 함수 중첩을 통한 해결 (Closures)', '<button id="btn-0">Button 1!</button>\r\n<button id="btn-1">Button 2!</button>\r\n<button id="btn-2">Button 3!</button>\r\n\r\n<script type="text/javascript">\r\n    var prizes = [''A Unicorn!'', ''A Hug!'', ''Fresh Laundry!''];\r\n    for (var btnNum = 0; btnNum < prizes.length; btnNum++) {\r\n        // for each of our buttons, when the user clicks it...\r\n        document.getElementById(''btn-'' + btnNum).onclick = function() {\r\n            // tell her what she''s won!\r\n            alert(prizes[btnNum]);\r\n        };\r\n    }\r\n</script>\r\n\r\n\r\n\r\n=====================================================================================================\r\n<button id="btn-0">Button 1!</button>\r\n<button id="btn-1">Button 2!</button>\r\n<button id="btn-2">Button 3!</button>\r\n\r\n<script type="text/javascript">\r\n    var prizes = [''A Unicorn!'', ''A Hug!'', ''Fresh Laundry!''];\r\n    for (var btnNum = 0; btnNum < prizes.length; btnNum++) {\r\n        // for each of our buttons, when the user clicks it...\r\n        document.getElementById(''btn-'' + btnNum).onclick = function(frozenBtnNum){\r\n            return function() {\r\n                // tell her what she''s won!\r\n                alert(prizes[frozenBtnNum]);\r\n            };\r\n        }(btnNum);\r\n    }\r\n</script>', NULL, '', 2, 0),
(1612, 'dale.seo', '', '', '2015-10-30 10:07:37', '', '리플렉션 API', 'java.lang.Class#forName : 클래스명으로부터 Class 객체를 취득한다.\r\njava.lang.Class#newInstance : 객체를 생성한다.\r\njava.lang.Class#getConstructor : 생성자 객체를 취득한다.\r\njava.lang.Class#getMethod : 메소드 객체를 취득한다\r\njava.lang.Class#getField : 필드 객체를 취득한다.\r\n\r\n\r\n==========\r\nEmployee emp = new Emplyee(1, "다나카 이치로");\r\nString[] propNames = {"id", "name"};\r\nfor (String propName : propNames) {\r\n    String methodName = "get" + propName.substring(0, 1).toUpperCase() + propName.substring(1);\r\n    Method m = emp.getClass().getMethod(methodName);\r\n    Object result = m.invoke(emp);\r\n    System.out.println(propName + "=" + result);\r\n}', NULL, '', 5, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(1613, 'dale.seo', '', '', '2015-11-17 14:50:19', '', 'dependencyManagement', '부모 프로젝트의 dependencyManagement에 의존성을 미리 성언해두면,\r\n하위 프로젝트에서는 groupId, artifactId만 선언하면 version, scope, exclusions 등을 부모와 동일하게 사용하게 된다.\r\n\r\n< 주의 사항 >\r\n부모 프로젝트에 dependencyManagement만 선언했다고 해서 그 안의 dependencies들이 하위 프로젝트에 상속되는 것을 의미하지는 않는다.\r\ndependencyManagement는 하위 프로젝트에서 사용할 의존성들의 세부 스펙 (version, scope, exclusions)들을 중앙 관리 역할 밖에 하지 않는다.\r\n별도로 하위 프로젝트에 상속하고 싶은 의존성들은 dependencies 하위에 선을해야 함을 주의할 것!\r\n\r\n\r\n\r\nThe dependency management section is a mechanism for centralizing dependency information. When you have a set of projects that inherits a common parent it''s possible to put all information about the dependency in the common POM and have simpler references to the artifacts in the child POMs.\r\n\r\nA second, and very important use of the dependency management section is to control the versions of artifacts used in transitive dependencies.\r\n\r\n\r\n# FAQ\r\nhttp://stackoverflow.com/questions/2619598/differences-between-dependencymanagement-and-dependencies-in-maven\r\n\r\n# Documentation\r\nhttps://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Dependency_Management', NULL, '', 13, 0),
(1614, 'dale.seo', '', '', '2015-11-17 20:21:16', '', 'POM Relationships', 'https://maven.apache.org/pom.html#POM_Relationships', NULL, '', 3, 0),
(1615, 'dale.seo', '', '', '2015-11-17 20:50:42', '', 'Maven Inheritance', 'Inheritance\r\n\r\nOne powerful addition that Maven brings to build management is the concept of project inheritance. Although in build systems such as Ant, inheritance can certainly be simulated, Maven has gone the extra step in making project inheritance explicit to the project object model.\r\n\r\n<project xmlns="http://maven.apache.org/POM/4.0.0"\r\n  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\r\n  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0\r\n                      http://maven.apache.org/xsd/maven-4.0.0.xsd">\r\n  <modelVersion>4.0.0</modelVersion>\r\n \r\n  <groupId>org.codehaus.mojo</groupId>\r\n  <artifactId>my-parent</artifactId>\r\n  <version>2.0</version>\r\n  <packaging>pom</packaging>\r\n</project>\r\nThe packaging type required to be pom for parent and aggregation (multi-module) projects. These types define the goals bound to a set of lifecycle stages. For example, if packaging is jar, then the package phase will execute the jar:jar goal. If the packaging is pom, the goal executed will be site:attach-descriptor. Now we may add values to the parent POM, which will be inherited by its children. The elements in the parent POM that are inherited by its children are:\r\n\r\ndependencies\r\ndevelopers and contributors\r\nplugin lists\r\nreports lists\r\nplugin executions with matching ids\r\nplugin configuration\r\n<project xmlns="http://maven.apache.org/POM/4.0.0"\r\n  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\r\n  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0\r\n                      http://maven.apache.org/xsd/maven-4.0.0.xsd">\r\n  <modelVersion>4.0.0</modelVersion>\r\n \r\n  <parent>\r\n    <groupId>org.codehaus.mojo</groupId>\r\n    <artifactId>my-parent</artifactId>\r\n    <version>2.0</version>\r\n    <relativePath>../my-parent</relativePath>\r\n  </parent>\r\n \r\n  <artifactId>my-project</artifactId>\r\n</project>\r\nNotice the relativePath element. It is not required, but may be used as a signifier to Maven to first search the path given for this project''s parent, before searching the local and then remote repositories.', NULL, '', 2, 0),
(1616, 'dale.seo', '', '', '2015-11-23 21:39:33', '', '크롬 메모리 관리 방법', '크롬 관리자 : Shift + ESC\r\n\r\nhttp://it.donga.com/21675/', NULL, '', 5, 0),
(1617, 'dale.seo', '', '', '2015-11-27 17:15:00', '', 'MappingJackson2XmlHttpMessageConverter 설정법', 'Spring4.1 에서 추가된 MappingJackson2XmlHttpMessageConverter를 사용해서 VO 클래스에 별도의 어노테이션 추가없이 XML로 변환이 가능하다.\r\n\r\n================================= Spring WEB 라이브러리에 추가로 아래 라이브러리 추가 =================================\r\n<dependency>\r\n  <groupId>com.fasterxml.jackson.dataformat</groupId>\r\n  <artifactId>jackson-dataformat-xml</artifactId>\r\n  <version>2.6.3</version>\r\n</dependency>\r\n<dependency>\r\n  <groupId>org.codehaus.woodstox</groupId>\r\n  <artifactId>woodstox-core-asl</artifactId>\r\n  <version>4.4.1</version>\r\n</dependency>\r\n\r\n\r\n================================= XML 설정 =================================\r\n    <mvc:annotation-driven content-negotiation-manager="contentNegotiationManager" conversion-service="conversionService">\r\n        <mvc:argument-resolvers>\r\n            <bean class="com.skplanet.storeplatform.framework.web.bind.LocaleHandlerWebArgumentResolver">\r\n                <constructor-arg ref="localeResolver" />\r\n            </bean>\r\n        </mvc:argument-resolvers>\r\n        <mvc:message-converters register-defaults="false" >\r\n            <bean class="org.springframework.http.converter.StringHttpMessageConverter">\r\n                <property name="supportedMediaTypes" value="*/*; charset=UTF-8" />\r\n                <property name="writeAcceptCharset" value="false" />\r\n            </bean>\r\n            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">\r\n                <property name="supportedMediaTypes" value="application/json; charset=UTF-8" />\r\n                <property name="prettyPrint" value="true" />\r\n            </bean>\r\n            <bean class="org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter">\r\n                <property name="supportedMediaTypes" value="application/xml; charset=UTF-8" />\r\n                <property name="prettyPrint" value="true" />\r\n            </bean>\r\n         </mvc:message-converters>\r\n    </mvc:annotation-driven>\r\n\r\n============= 참고 ===============\r\nhttp://stackoverflow.com/questions/22950542/pretty-printing-xml-with-jackson-library\r\nhttps://github.com/FasterXML/jackson-dataformat-xml#maven-dependency', NULL, '', 14, 0),
(1618, 'dale.seo', '', '', '2015-11-27 17:46:09', '', 'RestTemplate에 Interceptor 구현하여 설정하기', 'RestTemplate은 ClientHttpRequestInterceptor 인터페이스를 제공하는데,\r\n이 인터페이스를 구현하면 서버에 요청을 날리기 전, 응답을 받은 후 헤더나 바디값에 변경을 가할 수 있어서 유용하다. (로깅도 가능)\r\n\r\n\r\n====================== ClientHttpRequestInterceptor 인터페이스를 구현 ======================\r\n@Component\r\npublic class SacClientHttpRequestInterceptor implements ClientHttpRequestInterceptor {\r\n\r\n    private static final Logger LOGGER = LoggerFactory.getLogger(SacClientHttpRequestInterceptor.class);\r\n\r\n    private static GuidGenerator guidGenerator = GuidGeneratorFactory.getDefaultInstance();\r\n\r\n    @Autowired\r\n    private SacRestClientConfig config;\r\n\r\n    @Override\r\n    public ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution) throws IOException {\r\n        appendHeaders(request);\r\n\r\n        LOGGER.debug("# SacClientHttpRequestInterceptor Start #");\r\n        ClientHttpResponse response = execution.execute(request, body);\r\n        LOGGER.debug("# SacClientHttpRequestInterceptor End #");\r\n\r\n        return response;\r\n    }\r\n\r\n    private void appendHeaders(HttpRequest request) {\r\n        String authKey = config.getAuthKey();\r\n        String secret = config.getSecret();\r\n        String tenantId = config.getTenantId();\r\n        String systemId = config.getSystemId();\r\n        String guid = guidGenerator.getId();\r\n        String timestamp = SacAuthUtil.getTimestamp();\r\n        String nonce = SacAuthUtil.getNonce();\r\n\r\n        HttpHeaders headers = request.getHeaders();\r\n        // Content Negotiation\r\n        headers.setContentType(MediaType.APPLICATION_JSON);\r\n        headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));\r\n        // ACL\r\n        headers.set(SacRestClientConstants.HEADER_AUTH_KEY, authKey);\r\n        headers.set(SacRestClientConstants.HEADER_TENANT_ID, tenantId);\r\n        headers.set(SacRestClientConstants.HEADER_SYSTEM_ID, systemId);\r\n\r\n        // TODO: 단말에서 받은 GUID 전이 여부 필요한지 확인하여 수정 요망 (일단 무조건 새로운 GUID 생성)\r\n        headers.set(SacRestClientConstants.HEADER_GUID, guid);\r\n        headers.set(SacRestClientConstants.HEADER_AUTH_TIMESTAMP, timestamp);\r\n        headers.set(SacRestClientConstants.HEADER_AUTH_NONCE, nonce);\r\n\r\n        // 테스트키를 사용할 경우 Secret 필요 없음\r\n        if (StringUtils.isNotBlank(secret)) {\r\n            String baseUrl = request.getURI().toString();\r\n            String signature = getSignature(baseUrl, authKey, secret, timestamp, nonce);\r\n            headers.set(SacRestClientConstants.HEADER_AUTH_SIGNATURE, signature);\r\n        }\r\n    }\r\n\r\n    private static String getSignature(String baseUrl, String authKey, String secret, String timestamp, String nonce) {\r\n        // 인증을 위한 URL (BaseUrl + authKey + timestamp + nonce)\r\n        String urlForAuth = SacAuthUtil.getMessageForAuth(baseUrl, authKey, timestamp, nonce);\r\n        // Signature 생성\r\n        String signature;\r\n        try {\r\n            signature = HmacSha1Util.getSignature(urlForAuth, secret);\r\n        } catch (SignatureException e) {\r\n            throw new StorePlatformException("CCS_RTM_0001");\r\n        }\r\n        return signature;\r\n    }\r\n\r\n}\r\n\r\n \r\n\r\n=========== restTemplate 에 interceptors 를 세팅해준다 ===========\r\n   <bean class="com.skplanet.storeplatform.framework.web.client.StoreplatformRestTemplate">\r\n        <qualifier value="sac"/>\r\n        <property name="componentId" value="${componentId}"/>\r\n        <constructor-arg>\r\n            <bean class="org.springframework.http.client.SimpleClientHttpRequestFactory">\r\n                <property name="connectTimeout" value="2000"/>\r\n                <property name="readTimeout" value="30000"/>\r\n            </bean>\r\n        </constructor-arg>\r\n        <property name="messageConverters" ref="restTemplatemessageConverters"/>\r\n        <property name="errorHandler">\r\n            <bean class="com.skplanet.storeplatform.ccs.runtime.rest.SacResponseErrorHandler">\r\n                <property name="messageConverters" ref="restTemplatemessageConverters"/>\r\n            </bean>\r\n        </property>\r\n        <property name="interceptors" ref="com.skplanet.storeplatform.ccs.runtime.rest.SacClientHttpRequestInterceptor" />\r\n    </bean>', NULL, '', 8, 0),
(1619, 'dale.seo', '', '', '2015-12-03 09:46:55', '', 'IntelliJ에서 Spring Boot 관련 버그', 'intellij에서 Spring Boot 올릴 때 java.lang.NoClassDefFoundError: javax/servlet/ServletContext 가 발생하면\r\n\r\nApplication.java 대신에 mvn spring-boot:run 를 실행하면 된다.\r\n\r\nhttp://stackoverflow.com/questions/32531422/spring-boot-jsp-error-noclassdeffounderror', NULL, '', 4, 0),
(1620, 'dale.seo', '', '', '2015-12-07 17:34:28', '', 'Spring 설정에서 SpEL 표현식 활용하기', 'SpEL expressions can be used with XML or annotation-based configuration metadata for defining BeanDefinitions. In both cases the syntax to define the expression is of the form #{ <expression string> }.\r\n\r\n9.4.1 XML based configuration\r\n\r\nA property or constructor-arg value can be set using expressions as shown below.\r\n\r\n<bean id="numberGuess" class="org.spring.samples.NumberGuess">\r\n    <property name="randomNumber" value="#{ T(java.lang.Math).random() * 100.0 }"/>\r\n\r\n    <!-- other properties -->\r\n</bean>\r\nThe variable systemProperties is predefined, so you can use it in your expressions as shown below. Note that you do not have to prefix the predefined variable with the # symbol in this context.\r\n\r\n<bean id="taxCalculator" class="org.spring.samples.TaxCalculator">\r\n    <property name="defaultLocale" value="#{ systemProperties[''user.region''] }"/>\r\n\r\n    <!-- other properties -->\r\n</bean>\r\nYou can also refer to other bean properties by name, for example.\r\n\r\n<bean id="numberGuess" class="org.spring.samples.NumberGuess">\r\n    <property name="randomNumber" value="{ T(java.lang.Math).random() * 100.0 }"/>\r\n\r\n    <!-- other properties -->\r\n</bean>\r\n\r\n<bean id="shapeGuess" class="org.spring.samples.ShapeGuess">\r\n    <property name="initialShapeSeed" value="{ numberGuess.randomNumber }"/>\r\n\r\n    <!-- other properties -->\r\n</bean>\r\n9.4.2 Annotation-based configuration\r\n\r\nThe @Value annotation can be placed on fields, methods and method/constructor parameters to specify a default value.\r\n\r\nHere is an example to set the default value of a field variable.\r\n\r\npublic static class FieldValueTestBean\r\n\r\n    @Value("#{ systemProperties[''user.region''] }")\r\n    private String defaultLocale;\r\n\r\n    public void setDefaultLocale(String defaultLocale) {\r\n        this.defaultLocale = defaultLocale;\r\n    }\r\n\r\n    public String getDefaultLocale() {\r\n        return this.defaultLocale;\r\n    }\r\n\r\n}\r\nThe equivalent but on a property setter method is shown below.\r\n\r\npublic static class PropertyValueTestBean\r\n\r\n    private String defaultLocale;\r\n\r\n    @Value("#{ systemProperties[''user.region''] }")\r\n    public void setDefaultLocale(String defaultLocale) {\r\n        this.defaultLocale = defaultLocale;\r\n    }\r\n\r\n    public String getDefaultLocale() {\r\n        return this.defaultLocale;\r\n    }\r\n\r\n}\r\nAutowired methods and constructors can also use the @Value annotation.\r\n\r\npublic class SimpleMovieLister {\r\n\r\n    private MovieFinder movieFinder;\r\n    private String defaultLocale;\r\n\r\n    @Autowired\r\n    public void configure(MovieFinder movieFinder,\r\n            @Value("#{ systemProperties[''user.region''] }") String defaultLocale) {\r\n        this.movieFinder = movieFinder;\r\n        this.defaultLocale = defaultLocale;\r\n    }\r\n\r\n    // ...\r\n}\r\npublic class MovieRecommender {\r\n\r\n    private String defaultLocale;\r\n\r\n    private CustomerPreferenceDao customerPreferenceDao;\r\n\r\n    @Autowired\r\n    public MovieRecommender(CustomerPreferenceDao customerPreferenceDao,\r\n            @Value("#{systemProperties[''user.country'']}") String defaultLocale) {\r\n        this.customerPreferenceDao = customerPreferenceDao;\r\n        this.defaultLocale = defaultLocale;\r\n    }\r\n\r\n    // ...\r\n}\r\n\r\n\r\n\r\nhttp://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/expressions.html#expressions-beandef', NULL, '', 5, 0),
(1621, 'dale.seo', '', '', '2015-12-08 17:28:51', '', 'Spring XML 설정에서 active profile 읽기', '"#{environment.getActiveProfiles()[0]}"\r\n\r\n\r\nhttp://stackoverflow.com/questions/33449014/get-spring-profile-name-with-spring-el', NULL, '', 4, 0),
(1622, 'dale.seo', '', '', '2015-12-09 09:34:57', '', 'Spring Blog - PropertySourcesPlaceholderConfigurer ', 'https://spring.io/blog/2015/01/13/configuring-it-all-out-or-12-factor-app-style-configuration-with-spring', NULL, '', 9, 0),
(1623, 'dale.seo', '', '', '2015-12-09 10:05:54', '', 'Profile에 따라 다른 PropertySource 적용하기', '@Configuration\r\npublic class MyConfiguration\r\n{\r\n    @Configuration\r\n    @Profile("default")\r\n    @PropertySource("classpath:defaults.properties")\r\n    static class Defaults\r\n    { }\r\n\r\n    @Configuration\r\n    @Profile("override")\r\n    @PropertySource({"classpath:defaults.properties", "classpath:overrides.properties"})\r\n    static class Overrides\r\n    {\r\n        // nothing needed here if you are only overriding property values\r\n    }\r\n\r\n    @Autowired\r\n    private Environment environment;\r\n\r\n    @Bean\r\n    public Bean bean() {\r\n        ...\r\n        // this.environment.getRequiredProperty("foo");\r\n        ...\r\n    }\r\n}\r\n\r\n\r\n\r\n# Srping 3.1 이후의 PropertySourcesPlaceholderConfigurer를 사용하는 방법 (추천)\r\nhttp://stackoverflow.com/questions/12691812/can-propertysources-be-chosen-by-spring-profile\r\n\r\n# Spring3.1 이전의 PropertyPlaceholderConfigurer를 사용하는 방법\r\nhttp://kielczewski.eu/2013/11/setting-active-profile-and-property-sources-in-spring-mvc/', NULL, '', 8, 0),
(1624, 'dale.seo', '', '', '2015-12-09 10:07:20', '', '<context:property-placeholder/> 사용시 주의사항', '<context:property-placeholder/>로 PropertySource를 추가한 경우,\r\n@Value로 세팅은 지원되지만, 프로그램적으로 Environment에서 해당 Property를 뽑아올수 없다.\r\n\r\n==========================\r\nPlacing the following in an XML configuration works if I inject the property directly with @Value, but not when I use Environment and the getRequiredProperty() method.\r\n\r\n<context:property-placeholder ignore-unresolvable="true" location="classpath:defaults.properties"/>\r\n\r\n<beans profile="overrides">\r\n    <context:property-placeholder ignore-unresolvable="true" order="0"\r\n                                  location="classpath:overrides.properties"/>\r\n</beans>\r\n\r\n==========================\r\nAs of Spring 3.1, the <context:property-placeholder/> no longer registers a PropertyPlaceholderConfigurer, but rather a PropertySourcesPlaceholderConfigurer[3]. This component still looks to the datasource.properties file to reslove the ${database.*} placeholders above, but will fall back to the set of PropertySources for the current Environment if the properties are not found in the file. Again this gives you more control; prior to this change, the only fallback options were system properties and environment variables.', NULL, '', 6, 0),
(1625, 'dale.seo', '', '', '2015-12-10 21:18:38', '', 'PropertySourcesPlaceholderConfigurer 설정 및 테스트 Best Practice', 'http://greendotsoftware.co.uk/?p=8', NULL, '', 4, 0),
(1626, 'dale.seo', '', '', '2015-12-10 21:44:32', '', 'JUnit 테스트 할 때 System Property 세팅하는 방법', 'static 안에 선언하면 됨\r\n\r\n\r\n@ActiveProfiles("local")\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(classes = {TestApplicationConfig.class, DataSourceConfig.class})\r\npublic class DataSourceTest {\r\n\r\n    static {\r\n        System.setProperty("tenantId", "s01");\r\n    }\r\n\r\n    @Autowired\r\n    private DataSource dataSource;\r\n\r\n    @Test\r\n    public void testDataSource() throws Exception {\r\n        System.out.println("# dataSource : " + dataSource);\r\n        Connection connection = dataSource.getConnection();\r\n        Statement statement = connection.createStatement();\r\n        ResultSet resultSet = statement.executeQuery("SELECT 1 FROM DUAL");\r\n        resultSet.next();\r\n        int result = resultSet.getInt(1);\r\n        assertEquals(1, result);\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\nhttp://stackoverflow.com/questions/11306951/how-to-set-environment-variable-or-system-property-in-spring-tests', NULL, '', 3, 0),
(1627, 'dale.seo', '', '', '2015-12-13 16:22:49', '', 'rain on one''s parade 다 된 밥에 재뿌리다', 'rain on one''s parade\r\nTo spoil someone''s fun or happiness(~의 즐거움을) 망치다. 방해하다. \r\n \r\n직역하면, "누군가의 시가행진에 비기 내리다" 라는 의미 입니다. 즉, 이 표현은\r\n"다 된 밥에 재뿌리기"와 같은 행동을 하는것을 말합니다. \r\n \r\nA: I don''t want to rain on your parade. but l think we have\r\na problem here.\r\n \r\n(네 기분에 초칠 마음은 없지만, 여기 문제가 있는것 같아)\r\n \r\nB: Darn. you''re always spoiling everything! Just when l thought\r\nthings were going well!\r\n \r\n(아 진짜, 넌 왜 항상 분위기를 깨버리냐? 내가 일이 잘되어간다고 생각할때면 꼭!\r\n[출처] I don''t want to rain on your parade. 초칠 마음 없다.|작성자 그로웰', NULL, '', 1, 0),
(1628, 'dale.seo', '', '', '2015-12-14 22:14:57', '', '4.1에 도입된 RequestEntity 클래스 사용법', 'package com.skplanet.storeplatform.ccs.example.restclient.service;\r\n\r\nimport com.skplanet.storeplatform.ccs.runtime.rest.SacRestClientConstants;\r\nimport com.skplanet.storeplatform.ccs.runtime.rest.RestUrlBuilder;\r\nimport com.skplanet.storeplatform.sac.client.example.sample.vo.SampleReq;\r\nimport com.skplanet.storeplatform.sac.client.example.sample.vo.SampleRes;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.beans.factory.annotation.Qualifier;\r\nimport org.springframework.http.RequestEntity;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.web.client.RestTemplate;\r\n\r\nimport java.net.URI;\r\n\r\n/**\r\n * SAC 연동 서비스 구현 예제 (RestTemplate)\r\n * - Java 스프링 설정 파일에 설정된 Spring RestTemplate과 sacUrlBuilder를 바로 주입받아 사용\r\n * @author 서대영, SK플래닛\r\n */\r\n@Service\r\npublic class SacRestClientServiceRestTemplate implements SacRestClientService {\r\n\r\n    private static final Logger LOGGER = LoggerFactory.getLogger(SacRestClientServiceRestTemplate.class);\r\n\r\n    @Autowired\r\n    @Qualifier("sacRestTemplate")\r\n    private RestTemplate restTemplate;\r\n\r\n    @Autowired\r\n    @Qualifier("sacRestUrlBuilder")\r\n    private RestUrlBuilder restUrlBuilder;\r\n\r\n    @Override\r\n    public SampleRes getMemoryDummy(Integer no) {\r\n        URI url = restUrlBuilder.build("/example/sample/dummy?no={no}", no.toString());\r\n        RequestEntity<Void> requestEntity = RequestEntity\r\n                .get(url)\r\n                .header(SacRestClientConstants.HEADER_INTERFACE_ID, "I99000007").build();\r\n        ResponseEntity<SampleRes> responseEntitiy = restTemplate.exchange(requestEntity, SampleRes.class);\r\n        return responseEntitiy.getBody();\r\n    }\r\n\r\n    @Override\r\n    public SampleRes postMemoryDummy(SampleReq req) {\r\n        URI url = restUrlBuilder.build("/example/sample/postDummy");\r\n        RequestEntity<SampleReq> requestEntity = RequestEntity\r\n                .post(url)\r\n                .header(SacRestClientConstants.HEADER_INTERFACE_ID, "I99000015")\r\n                .body(req);\r\n        ResponseEntity<SampleRes> responseEntitiy = restTemplate.exchange(requestEntity, SampleRes.class);\r\n        return responseEntitiy.getBody();\r\n    }\r\n\r\n}\r\n', NULL, '', 10, 0),
(1648, 'dale.seo', '', '', '2016-01-09 23:21:27', '', 'Servlet3.0 이상에서 web.xml 없이 자바 웹 애플리케이션 설정하기', 'http://docs.spring.io/autorepo/docs/spring-framework/current/javadoc-api/org/springframework/web/WebApplicationInitializer.html\r\n\r\n원리 : WebApplicationInitializer를 구현한 클래스 파일을 Servlet3 이상을 구현한 WAS에서 바로 인식한다.\r\n\r\n\r\n\r\n\r\n< Mave 설정 변경 >\r\n\r\n  <build>\r\n    <plugins>\r\n      <plugin>\r\n        <groupId>org.apache.maven.plugins</groupId>\r\n        <artifactId>maven-war-plugin</artifactId>\r\n        <configuration>\r\n          <failOnMissingWebXml>false</failOnMissingWebXml>\r\n        </configuration>\r\n      </plugin>\r\n    </plugins>\r\n  </build>', NULL, '', 19, 0),
(1649, 'dale.seo', '', '', '2016-01-13 09:57:53', '', '프록시', '# 프록시\r\n - 연관된 객체를 처음부터 데이터베이스에서 조회하는 것이 아니라, 실제 사용하는 시점에서 조회하도록 도와줌 (지연 로딩을 사용했을 때만)\r\n - FetchType.LAZY 이면,\r\n  - @ManyToOne로 선언된 단일 연관 객체가 프록시로 세팅. 실제 연관 객체로 getField()를 해야 영속성 컨텍스트로 조회\r\n  - @OneToMany로 선언된 연관 객체 컬렉션도 역시 프록시인 컬렉션 래퍼로 세팅. 실제 해당 컬렉션 레퍼로 get(0)를 해야 영속성 컨텍스트로 조회 \r\n - 식별자 값으로 조회 후 객체에 getId()를 호출하면 데이터베이스를 조회하지 않는다.\r\n - entity.getClass().getName() 으로 프록시인지 아닌지 확인 가능', NULL, '', 3, 0),
(1650, 'dale.seo', '', '', '2016-01-13 10:00:33', '', '연관관계 관리 (즉시로딩 vs 지연로딩)', '# 설정 방법\r\n@ManyToOne(fetch = FetchType.EAGER/FetchType.LAZY)\r\n\r\n# 디폴트 값\r\n : 컬렉션을 미리 로딩해놓는 것은 부하가 크기 때문에 LAZY가 기본\r\n@XxxToOne : FetchType.EAGER\r\n@XxxToMany : Fetch.Type.LAZY', NULL, '', 2, 0),
(1651, 'dale.seo', '', '', '2016-01-13 10:05:50', '', '영속성 전이 : cascade, orphanRemoval', '@OneToMany(casecade = CascadeType.PERSIST)\r\n특정 엔티티를 영속상태로 만들 때 연관된 엔티티도 영속 상태로 만들고 싶을 때\r\n\r\n@OneToMany(casecade = CascadeType.DELETE)\r\n특정 엔티티를 삭제할 때 연관된 엔티티도 같이 삭제하고 싶을 때 (DB의 외래키 무결성 예외를 방지 해줌)\r\n\r\n그 밖에 ALL, MERGE 등 다른 CascadeType이 있음\r\n\r\n@OneToMay(orphanRemoval = true)\r\nOne 쪽 엔티티의 컬력센에서 Many 쪽 엔티티의 참조만 제거하면 Many 쪽 엔티티가 자동으로 삭제\r\n\r\n# cascade와 orphanRemoval 같이 사용해서 연관 컬렉션 관리\r\n * 부모 엔티티를 통해 자식 추가 (DB에 INSERT문 날림)\r\nParent parent = em.find(Parent.class, parentId);\r\nparent.addChild(child);\r\n * 부모 엔티티를 통해 자식 제거 (DB에 DELETE문 날림)\r\nParent parent = em.find(Parent.class, parentId);\r\nparent.getChildren().remove(child);', NULL, '', 6, 0),
(1631, 'dale.seo', '', '', '2015-12-29 22:45:52', '', '엔티티 매핑', '', NULL, '', 5, 0),
(1632, 'dale.seo', '', '', '2015-12-29 22:46:06', '', '연관관계 매핑', '객체의 참조 필드와 테이블의 외래키 컬럼을 매핑하는 것을 연관관계 매핑이라고 한다.\r\n\r\n< 대다일 단방향 관계 매핑 >\r\n - 예 : Member - Team, Comment - Post\r\n\r\n@Entity\r\npublic class Member {\r\n  @ManyToOne(fetch=FetchType.LAZY) // 기본값 : FetchType.EAGER\r\n  @JoinColumn(name="TEAM_ID") // 외래키 칼럼명 = 필드명 + _ + 상대 테이블의 기본키 칼럼명일 경우 생략\r\n  private Team team;\r\n}\r\n\r\n< 일대다 단방향 관계 매핑 >\r\n\r\n@Entity\r\npublic class Team {\r\n  @OneToMany(fetch=FetchType.LAZY, mappedBy="team") // 상대 엔티티의 필드명\r\n  private List<Member> members = new ArrayList<Member>();\r\n}\r\n\r\n\r\n< 연관관계 주인 >\r\n- 테이블은 외래키 하나로 두 테이블의 연관관계를 관리하지만, 객체의 연관관계는 각 객체에서 참조 필드로 포인트가 2곳으로 늘어난다.\r\n=> 이런 차이로 인해 두 객체의 참조 필드 중 하나를 정해서 테이블의 외래키를 관리해야 하는데 이 것을 연관관계의 주인이라 한다.\r\n- 연관관계의 주인만이 테이터베이스 연관관계와 매핑되고 외래키를 등록/수정/삭제 할 수 있다.\r\n- 반면에 주인이 아는 쪽은 읽기만 할 수 있다.\r\n- 주인이 아닌 객체에서 mappedBy 속성을 사용해서 연관관계의 주인을 지정해준다.\r\n- 연관관계의 주인을 정한다는 것은 사실 외래키 관리자를 선택하는 것이다.\r\n- "다" 쪽을 주인으로 선택하면 자기 테이블에 있는 외래키를 관리하는 것이지만, "일" 쪽을 주인으로 선택하면 상대 테이블에 있는 외래키를 관리해야 한다.\r\n=> 따라서 외래키가 있는 테이블 쪽을, 즉 "다" 쪽 객체를 연간관계의 주인으로 정하는 게 유리하다. (정신건강에 도움)\r\n\r\n\r\n< 편의 메소드 >\r\n순수한 객체까지 고려한 양방향 연관관계를 구현하려면 양방향 참조를 해줘야 한다.\r\nmember1.setTeam(team1); // 연관계 주인이다. 이 값으로 외래키가 저장한다.\r\nteam1.getMembers().add(mebmer1); // 연관관계의 주인이 아니다. 따라서 테이블에는 아무 효과가 없지만 순수하게 객체 참조 차원에서 세팅해준다.\r\n하지만 이렇게 양방향 참조를 해주기가 번거롭다면 연관관계의 주인이 있는 객체에 편의 메소드를 구현하면된다.\r\n\r\npublic class Member {\r\n  private Team team;\r\n\r\n  public void setTeam(Team team) {\r\n    // 기존관계 제거\r\n    if (this.team != null) {\r\n      this.team.getMembers().remove(this);\r\n    }\r\n    this.team = team;\r\n    // 무한루프 방지\r\n    if (team.getMembers().contains(this)) {\r\n      team.getMembers().add(this);\r\n    }\r\n  }\r\n\r\n}', NULL, '', 25, 0),
(1630, 'dale.seo', '', '', '2015-12-29 22:31:40', '', '객체와 테이블의 차이', 'JPA를 이해하기 위한 필수 개념이니 숙지한다.\r\n\r\n< 연관관계 >\r\n- 객체는 참조/주소/필드로 연관관계(객체탐색)를 맺는 반면 테이블은 외래 키로 연관관계(조인)를 맺는다.\r\n- 연관 관계에서 방향 개념은 객체 관계에만 존재하고 테이블 관계는 항상 양방향이다.\r\n- 객체에서 양방향 관계는 엄밀히 얘기하면 서로 다른 단방향 관계 2개이다.\r\n- 테이블은 외래키 하나로 두 테이블의 연관관계를 관리하지만, 객체의 연관관계는 각 객체에서 참조 필드로 포인트가 2곳으로 늘어난다.\r\n=> 이런 차이로 인해 두 객체의 참조 필드 중 하나를 정해서 테이블의 외래키를 관리해야 하는데 이 것을 연관관계의 주인이라 한다.\r\n- 관계형 데이터베이스는 정규화된 테이블 2개로 다대다 관계를 표현할 수 없으며, 반드시 다대다 관계를 일대다, 다대일 고나계로 풀어내는 연결 테이블을 사용한다.', NULL, '', 12, 0),
(1633, 'dale.seo', '', '', '2015-12-31 09:47:35', '', 'https 사용 여부 체크', 'HttpServletRequest 클래스의 isSecure() 메소드를 사용하면 됨.\r\n\r\n=========================================================\r\n@RequestMapping(value = "/isSecure", method = RequestMethod.GET)\r\n   public String isSecure(HttpServletRequest request) {\r\n\r\n       if(!request.isSecure()) {\r\n           throw new StorePlatformException("Invaild~ Use HTTPS");\r\n       }\r\n\r\n       return "Good~ It''s HTTPS Request";\r\n   }\r\n\r\n\r\n\r\n\r\nhttp://stackoverflow.com/questions/8200853/how-can-i-know-if-the-request-to-the-servlet-was-executed-using-http-or-https', NULL, '', 6, 0),
(1634, 'dale.seo', '', '', '2016-01-01 13:01:31', '', 'Spring의 WebUtils', 'Spring의 WebUtils를 이용하면 HttpServletRequest 객체로 부터 쿠키, 파리미터들을 매우 세련되게 얻어올 수 있다.\r\n\r\n# 쿠키 읽기\r\nWebUtils.getCookie(request, "ver");\r\n\r\n# 파라미터 읽기\r\n		String encodedParameterValue = WebUtils.findParameterValue(request, CommonConstants.REQUEST_PARAM_ENCODING);\r\n\r\n----------------------------------------\r\n아래와 같이 Map<String, String[]>을 인자로 받으며, HttpServletRequest 객체를 통체로 얻을 수 도 있음\r\n----------------------------------------\r\n\r\n	@Test\r\n	public void testDecode() {\r\n		String testValue = "aa0569042672685c99872f6138;bc1f01813e1342f368c783963b836f02dbb63884c8ee147355137f";\r\n		Map<String, String[]> actual = parameterValueDecorder.decode(userAgent, testValue);\r\n\r\n		assertEquals("msisdn", WebUtils.findParameterValue(actual, "type"));\r\n		assertEquals("devInfo", WebUtils.findParameterValue(actual, "include"));\r\n	}', NULL, '', 11, 0),
(1637, 'dale.seo', '', '', '2016-01-01 17:57:48', '', '[Effective Java] 생성자의 매개변수가 많을 때는 빌더(builder)를 고려하자', 'http://using.tistory.com/71\r\n\r\n- 클래스 내부에 static 클래스로 Builder를 만듬\r\n- Builder의 필드는 외부 클래스의 필드를 모두 정의하고, 외부 클래스는 모든 필드는 final로 바꿔줘도 됨\r\n- Builder의 매소드는 모두 필드 이름과 동일하게 하고, 매칭되는 필드를 세팅하고 this를 리턴\r\n- 외부 클래스에 Builder 객체를 매개변수로 받는 private 생성자를 추가\r\n- Builder의 build 매소드는 외부 클래스에서 Builder 객체를 매개변수로 받는 생성자를 호출\r\n\r\n\r\n\r\n=========================================================\r\n      // Builder Pattern\r\n      public class NutritionFacts {\r\n            private final int servingSize;\r\n            private final int servings;\r\n            private final int calories;\r\n            private final int fat;\r\n            private final int sodium;\r\n            private final int carbohydrate;\r\n            public static class Builder {\r\n                // Required parameters\r\n                private final int servingSize;\r\n                private final int servings;\r\n                // Optional parameters - initialized to default values\r\n                private int calories      = 0;\r\n                private int fat           = 0;\r\n                private int carbohydrate  = 0;\r\n                private int sodium        = 0;\r\n                public Builder(int servingSize, int servings) {\r\n                    this.servingSize = servingSize;\r\n                    this.servings    = servings;\r\n                  }\r\n                public Builder calories(int val)\r\n                    { calories = val;      return this; }\r\n                public Builder fat(int val)\r\n                    { fat = val;           return this; }\r\n                public Builder carbohydrate(int val)\r\n                    { carbohydrate = val;  return this; }\r\n                public Builder sodium(int val)\r\n                    { sodium = val;        return this; }\r\n                public NutritionFacts build() {\r\n                    return new NutritionFacts(this);\r\n                  }\r\n             }\r\n            private NutritionFacts(Builder builder) {\r\n                servingSize  = builder.servingSize;\r\n                servings     = builder.servings;\r\n                calories     = builder.calories;\r\n                fat = builder.fat;\r\n                sodium = builder.sodium;\r\n                carbohydrate = builder.carbohydrate;\r\n             }\r\n        }\r\n        // 사용\r\n        NutritionFacts cocaCola = new NutritionFacts.Builder(240 ,8). calories(100).sodium(35).carbohydrate(27).build();', NULL, '', 23, 0),
(1636, 'dale.seo', '', '', '2016-01-01 17:56:52', '', '[Effective Java] 생성자 대신 static 팩토리(factory) 메소드 사용을 고려하자', 'http://using.tistory.com/69', NULL, '', 5, 0),
(1638, 'dale.seo', '', '', '2016-01-02 10:15:53', '', 'Binary Search 이진 탐색 Python 구현', 'def binary_search(target, nums):\r\n    floor_idx = -1  # 0 한 칸 전\r\n    ceiling_idx = len(nums)  # 마지막 한 칸 후\r\n\r\n    while ceiling_idx - floor_idx > 1 :  # floor_idx와 ceiling_idx의 차이가 하나이면 둘 사이에 아무 것도 없는 것임\r\n        mid_idx = int((floor_idx + ceiling_idx) / 2) # 홀수개면 딱 중간 인덱스, 짝수개면 왼쪽 인덱스\r\n        mid_val = nums[mid_idx]\r\n\r\n        print(''mid_idx:'', mid_idx, '' mid_val:'', mid_val)\r\n\r\n        if target == mid_val:\r\n            return mid_idx\r\n\r\n        if target < mid_val:\r\n            ceiling_idx = mid_idx\r\n        else:\r\n            floor_idx = mid_idx\r\n\r\n    return -1\r\n\r\n\r\n# Test\r\nnums1 = [1, 4, 9, 10, 11, 13, 16, 22, 24, 38]\r\nprint(''### print(-1 == binary_search(12, nums1))'')\r\nprint(-1 == binary_search(12, nums1))\r\nprint(''### print(1 == binary_search(4, nums1))'')\r\nprint(1 == binary_search(4, nums1))\r\nprint(''### print(6 == binary_search(16, nums1))'')\r\nprint(6 == binary_search(16, nums1))', NULL, '', 7, 0),
(1639, 'dale.seo', '', '', '2016-01-03 20:30:17', '', 'Spring Cache 관련 공식 블로그 포스트', 'http://spring.io/blog/2014/04/14/cache-abstraction-jcache-jsr-107-annotations-support\r\n\r\nhttps://spring.io/blog/2014/06/16/further-cache-improvements-in-spring-4-1\r\n\r\nhttps://spring.io/blog/2015/06/15/cache-auto-configuration-in-spring-boot-1-3\r\n\r\nhttp://spring.io/guides/gs/caching/', NULL, '', 8, 0),
(1640, 'dale.seo', '', '', '2016-01-03 20:51:46', '', 'Spring Cache 어노테이션', '@Cacheable triggers cache population\r\n@CacheEvict triggers cache eviction\r\n@CachePut updates the cache without interfering with the method execution\r\n@Caching regroups multiple cache operations to be applied on a method\r\n@CacheConfig shares some common cache-related settings at class-level', NULL, '', 8, 0),
(1641, 'dale.seo', '', '', '2016-01-03 21:20:10', '', '세련되게 지연주는 방법', '    // 캐시 조회를 원하는 메서드에는 @LocalCacheable 어노테이션 사용\r\n    @LocalCacheable(CACHE_NAME_EXAMPLE)\r\n    public String find(int key) {\r\n        LOGGER.debug("# Didn''t hit the cache.");\r\n        simulateSlowService();\r\n        return dummyMap.get(key);\r\n    }\r\n\r\n    private void simulateSlowService() {\r\n        try {\r\n            long time = 3000L;\r\n            Thread.sleep(time);\r\n        } catch (InterruptedException e) {\r\n            throw new IllegalStateException(e);\r\n        }\r\n    }', NULL, '', 3, 0),
(1642, 'dale.seo', '', '', '2016-01-03 23:42:07', '', '[Spring Core] ClassPathResource & FileSystemResource', '============================================\r\n# ClassPathResource\r\n============================================\r\n\r\n클래스 패스에서 xml 설정 파일이나 properties 파일을 로드할 때 유용하다.\r\n\r\nimport org.springframework.core.io.ClassPathResource;\r\n\r\n    public EhCacheManagerFactoryBean ehCacheManagerFactoryBean() {\r\n        EhCacheManagerFactoryBean cmfb = new EhCacheManagerFactoryBean();\r\n        cmfb.setConfigLocation(new ClassPathResource("ehcache.xml"));\r\n        cmfb.setShared(true);\r\n        return cmfb;\r\n    }\r\n\r\n============================================\r\n# FileSystemResource\r\n============================================\r\n\r\n파일 시스템 기준으로 파일을 읽거나 쓸때 사용된다.\r\n\r\nimport org.springframework.core.io.FileSystemResource;\r\n\r\n			protected InputStream getInputStream(String file) throws IOException {\r\n				return new FileSystemResource(file).getInputStream();\r\n			}', NULL, '', 14, 0),
(1643, 'dale.seo', '', '', '2016-01-04 18:34:38', '', 'Spring MVC에서 발생시키는 Exception 종류', 'http://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-ann-rest-spring-mvc-exceptions\r\n\r\n\r\nBindException\r\n\r\n400 (Bad Request)\r\n\r\nConversionNotSupportedException\r\n\r\n500 (Internal Server Error)\r\n\r\nHttpMediaTypeNotAcceptableException\r\n\r\n406 (Not Acceptable)\r\n\r\nHttpMediaTypeNotSupportedException\r\n\r\n415 (Unsupported Media Type)\r\n\r\nHttpMessageNotReadableException\r\n\r\n400 (Bad Request)\r\n\r\nHttpMessageNotWritableException\r\n\r\n500 (Internal Server Error)\r\n\r\nHttpRequestMethodNotSupportedException\r\n\r\n405 (Method Not Allowed)\r\n\r\nMethodArgumentNotValidException\r\n\r\n400 (Bad Request)\r\n\r\nMissingServletRequestParameterException\r\n\r\n400 (Bad Request)\r\n\r\nMissingServletRequestPartException\r\n\r\n400 (Bad Request)\r\n\r\nNoHandlerFoundException\r\n\r\n404 (Not Found)\r\n\r\nNoSuchRequestHandlingMethodException\r\n\r\n404 (Not Found)\r\n\r\nTypeMismatchException\r\n\r\n400 (Bad Request)\r\n\r\nMissingPathVariableException\r\n\r\n500 (Internal Server Error)\r\n\r\nNoHandlerFoundException\r\n\r\n404 (Not Found)\r\n', NULL, '', 6, 0),
(1644, 'dale.seo', '', '', '2016-01-06 23:41:06', '', 'JAXB2 vs Jackson', 'https://dzone.com/articles/latest-jackson-integration\r\n\r\n\r\nXML support\r\nSince 2.0 release, Jackson provides first class support for some other data formats than JSON. Spring Framework and Spring Boot provide builtin support for Jackson based XML serialization/deserialization.\r\n\r\nAs soon as you include the jackson-dataformat-xml dependency to your project, it is automatically used instead of JAXB2.\r\n\r\nUsing Jackson XML extension has several advantages over JAXB2:\r\n\r\nBoth Jackson and JAXB annotations are recognized\r\nJSON View are supported, allowing you to build easily REST Webservices with the same filtered output for both XML and JSON data formats\r\nNo need to annotate your class with @XmlRootElement, each class serializable in JSON will serializable in XML\r\nYou usually also want to make sure that the XML library in use is Woodstox since:\r\n\r\nIt is faster than Stax implementation provided with the JDK\r\nIt avoids some known issues like adding unnecessary namespace prefixes\r\nSome features like pretty print don''t work without it\r\nIn order to use it, simply add the latest woodstox-core-asl dependency available to your project.', NULL, '', 8, 0),
(1645, 'dale.seo', '', '', '2016-01-06 23:49:59', '', 'Spring MVC에서 Jackson2 컨버터 세팅 방법 (Date Format, Pretty Print)', '- 글로벌 세팅은 빌더를 이용해서 ObjectMapper를 생성하여 컨버터의 생성자에 넘겨주면 됨\r\n- 로컬 세팅은 필드에 @JsonFormat 어노테이션을 이용해주면 됨 (글로벌 세팅을 overwrite 함)\r\n\r\n# Without Spring Boot\r\nIn a plain Spring Framework application, you can also use Jackson2ObjectMapperBuilder to customize the XML and JSON HttpMessageConverters as shown bellow:\r\n\r\npublic class WebMvcConfig extends WebMvcConfigurerAdapter {\r\n\r\n    @Override\r\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\r\n        converters.add(new MappingJackson2HttpMessageConverter(objectMapper()));\r\n        converters.add(new MappingJackson2XmlHttpMessageConverter(objectMapper()));\r\n    }\r\n\r\n    @Bean\r\n    public ObjectMapper objectMapper() {\r\n        return new Jackson2ObjectMapperBuilder()\r\n                .indentOutput(true)\r\n                .simpleDateFormat("yyyy/MM/dd hh:mm:ss")\r\n                .build();\r\n    }\r\n\r\n}', NULL, '', 22, 0),
(1646, 'dale.seo', '', '', '2016-01-07 20:38:53', '', 'Jackson2 라이브러리 레퍼런스', '자바 오브젝트를 다른 데이터 타입으로 변환/역변환 해주는 최강 라이브러리\r\n\r\n< General >\r\nhttps://github.com/FasterXML/jackson\r\n\r\n< Annotation >\r\nhttps://github.com/FasterXML/jackson-annotations\r\n\r\n< JSON >\r\nhttps://github.com/FasterXML/jackson-databind\r\n\r\n< XML >\r\nhttps://github.com/FasterXML/jackson-dataformat-xml', NULL, '', 6, 0),
(1647, 'dale.seo', '', '', '2016-01-07 21:26:57', '', '@JsonRawValue 쓸 때 주의 점', 'http://stackoverflow.com/questions/4783421/how-can-i-include-raw-json-in-an-object-using-jackson\r\n\r\n필드에 @JsonRawValue를 선언하면 해당 필드는 json 문자열 자체를 저장할 수 있다.\r\n그런데 이 필드를 String 타입으로 지정하기 되면 Serialize는 되지만 Unserialize 시 다음과 같은 에러가 발생한다.\r\n\r\ncom.fasterxml.jackson.databind.JsonMappingException: Can not deserialize instance of java.lang.String out of START_OBJECT token\r\n\r\n이럴 때는 해당 필드의 타입을 Object를 변경해주면 해결된다.\r\n\r\n================================================================================\r\npublic class DeserializeTest {\r\n\r\n    ObjectMapper objectMapper;\r\n\r\n    @Before\r\n    public void setUp() {\r\n        objectMapper = new ObjectMapper();\r\n        objectMapper.enable(SerializationFeature.INDENT_OUTPUT);\r\n        objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\r\n    }\r\n\r\n    @Test\r\n    public void test() throws Exception {\r\n        ProductListSacRes obj = new ProductListSacRes();\r\n        obj.setListId("RNK050040001");\r\n        obj.setListNm("최신출시-등록일순");\r\n        obj.setStartKey(null); // Not included\r\n        obj.setHasNext("N");\r\n        obj.setCount(0);\r\n        obj.setDate(new Date("date/reg", "20160107T192400+0900"));\r\n        obj.setEtcProp("{\\"foo\\":18}");\r\n        obj.setProductList(Collections.emptyList());\r\n\r\n        String json = objectMapper.writeValueAsString(obj);\r\n        System.out.println(json);\r\n\r\n        ProductListSacRes obj_1 = objectMapper.readValue(json, ProductListSacRes.class);\r\n\r\n        assertEquals(obj.getListId(), obj_1.getListId());\r\n        assertEquals(obj.getListNm(), obj_1.getListNm());\r\n        assertEquals(obj.getHasNext(), obj_1.getHasNext());\r\n    }\r\n\r\n}\r\n\r\n=======================================================\r\npublic class ProductListSacRes {\r\n	private String listId;\r\n	private String listNm;\r\n	private String startKey;\r\n	private String hasNext; // Y/N\r\n	private Integer count;\r\n	private Date  date;\r\n\r\n	@JsonRawValue\r\n	private Object etcProp;\r\n	private List<Product> productList;\r\n\r\n	public ProductListSacRes() {\r\n		productList = new ArrayList<Product>();\r\n	}\r\n	public String getListId() {\r\n		return listId;\r\n	}\r\n	public void setListId(String listId) {\r\n		this.listId = listId;\r\n	}\r\n	public String getListNm() {\r\n		return listNm;\r\n	}\r\n	public void setListNm(String listNm) {\r\n		this.listNm = listNm;\r\n	}\r\n	public String getStartKey() {\r\n		return startKey;\r\n	}\r\n	public void setStartKey(String startKey) {\r\n		this.startKey = startKey;\r\n	}\r\n	public List<Product> getProductList() {\r\n		return productList;\r\n	}\r\n	public void setProductList(List<Product> productList) {\r\n		this.productList = productList;\r\n	}\r\n	public String getHasNext() {\r\n		return hasNext;\r\n	}\r\n	public void setHasNext(String hasNext) {\r\n		this.hasNext = hasNext;\r\n	}\r\n	public Integer getCount() {\r\n		return count;\r\n	}\r\n	public void setCount(Integer count) {\r\n		this.count = count;\r\n	}\r\n	public Date getDate() {\r\n		return date;\r\n	}\r\n	public void setDate(Date date) {\r\n		this.date = date;\r\n	}\r\n\r\n	public Object getEtcProp() {\r\n		return etcProp;\r\n	}\r\n\r\n	public void setEtcProp(String etcProp) {\r\n		this.etcProp = etcProp;\r\n	}\r\n}', NULL, '', 6, 0),
(1652, 'dale.seo', '', '', '2016-01-13 14:26:54', '', 'MockitoAnnotations.initMocks', 'MockitoAnnotations.initMocks을 활용하면 JUnitRunner 어노테이션 없이도 Mocking이 가능하다.\r\nSpringJUnitRunner와 함께 사용할 때 유용할 듯!\r\n\r\npublic class StorePlatformExecutionDecoratorTest {\r\n\r\n	@Mock\r\n	private StorePlatformExecutionDecorator<StorePlatformExecutionEnvironment, ErrorInfo> decorator;\r\n\r\n	@Mock\r\n	private StorePlatformExecutionCallback<ErrorInfo> callback;\r\n\r\n	@Before\r\n	public void setup()	{\r\n		MockitoAnnotations.initMocks(this);\r\n	}\r\n\r\n}', NULL, '', 10, 0),
(1653, 'dale.seo', '', '', '2016-01-13 16:31:49', '', 'OncePerRequestFilter', '생 서블릿 필터 대신에 스프링의 OncePerRequestFilter를 사용하면 Http로 형변환 안 되서 깔끔함', NULL, '', 8, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(1654, 'dale.seo', '', '', '2016-01-14 11:28:51', '', 'RestTemplate 사용 시 ClientHttpRequestInterceptor를 이용하여 요청/응답 로깅', 'ResponseBody 부분은 response.getBody() 할 때 inputStream이 소진되어 버러서 나중에 RestTemplate에서 정말 응답값을 가져올 때 아무것도 못가져옴.\r\n이 부분을 개선해야 아래 부분을 쓸 수 있음.\r\n==> 해결책 BufferingClientHttpRequestFactory를 사용하면 됨\r\n\r\npublic class LoggingRequestInterceptor implements ClientHttpRequestInterceptor {\r\n\r\n	private static final Logger log = LoggerFactory.getLogger(LoggingRequestInterceptor.class);\r\n\r\n	@Override\r\n	public ClientHttpResponse intercept(HttpRequest httpRequest, byte[] bytes, ClientHttpRequestExecution clientHttpRequestExecution) throws IOException {\r\n		log.debug("###### LoggingRequestInterceptor Start #####");\r\n		traceRequest(httpRequest, bytes);\r\n		ClientHttpResponse response = clientHttpRequestExecution.execute(httpRequest, bytes);\r\n		traceResponse(response);\r\n		log.debug("##### LoggingRequestInterceptor End #####");\r\n		return response;\r\n	}\r\n\r\n	private void traceRequest(HttpRequest request, byte[] body) throws IOException {\r\n		log.debug("=========================== Tracing request to SAC ================================================");\r\n		log.debug("URI : " + request.getURI());\r\n		log.debug("Method : " + request.getMethod());\r\n		log.debug("Headers : " + request.getHeaders());\r\n		if (request.getMethod() == HttpMethod.GET) {\r\n			return;\r\n		}\r\n		log.debug("Request Body : " + new String(body, "UTF-8"));\r\n	}\r\n\r\n	private void traceResponse(ClientHttpResponse response) throws IOException {\r\n		String responseBody = IOUtils.toString(new InputStreamReader(response.getBody(), "UTF-8"));\r\n		log.debug("=========================== Tracing response from SAC ================================================");\r\n		log.debug("Status code: " + response.getStatusCode());\r\n		log.debug("Status text: " + response.getStatusText());\r\n		log.debug("Headers : " + response.getHeaders());\r\n		log.debug("Response Body : " + responseBody);\r\n	}\r\n\r\n}\r\n\r\n\r\n=========================================================\r\n@Configuration\r\npublic class RestConfig {\r\n\r\n	@Bean\r\n	public RestTemplate restTempalte() {\r\n		RestTemplate restTemplate = new RestTemplate();\r\n		restTemplate.setInterceptors(Arrays.asList(new LoggingRequestInterceptor()));\r\n		restTemplate.setRequestFactory(new BufferingClientHttpRequestFactory(new SimpleClientHttpRequestFactory()));\r\n		return restTemplate;\r\n	}\r\n\r\n}\r\n\r\n\r\nhttp://stackoverflow.com/questions/7952154/spring-resttemplate-how-to-enable-full-debugging-logging-of-requests-responses\r\n\r\nhttp://howtodoinjava.com/2013/10/06/how-to-read-data-from-inputstream-into-string-in-java/', NULL, '', 16, 0),
(1655, 'dale.seo', '', '', '2016-01-16 13:28:36', '', 'Spring Data JPA Auding Reference', 'http://docs.spring.io/spring-data/jpa/docs/current/reference/html/#auditing\r\n\r\n\r\n\r\nAnnotation based auditing metadata\r\nWe provide @CreatedBy, @LastModifiedBy to capture the user who created or modified the entity as well as @CreatedDate and @LastModifiedDate to capture the point in time this happened.\r\n\r\nExample 64. An audited entity\r\nclass Customer {\r\n\r\n  @CreatedBy\r\n  private User user;\r\n\r\n  @CreatedDate\r\n  private DateTime createdDate;\r\n\r\n  // … further properties omitted\r\n}', NULL, '', 7, 0),
(1656, 'dale.seo', '', '', '2016-01-16 14:06:27', '', 'Spring Data JPA Auditing 설정 방법', 'http://eclipse4j.tistory.com/201\r\nhttps://docs.spring.io/spring-data/jpa/docs/current/reference/html/#auditing\r\nhttp://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-auditing-part-one/\r\nhttp://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-auditing-part-two/\r\n\r\n\r\n1. 자바 스프링 설정 파일에 어노테이션 추가\r\n--------------------------------------------------------------------------------------------------------------------------------------\r\n@Configuration\r\n@EnableJpaAuditing\r\npublic class JpaAudingConfig {\r\n\r\n\r\n2. Entity 클래스에 어노테이션 추가\r\n--------------------------------------------------------------------------------------------------------------------------------------\r\n@Entity\r\n@EntityListeners(AuditingEntityListener.class)\r\npublic class Tag {\r\n\r\n	@CreatedDate\r\n    private Date createdDate;\r\n\r\n	@LastModifiedDate\r\n    private Date lastModifiedDate;\r\n\r\n3. @CreatedBy 와 @LastModifiedBy 필드도 자동 세팅을 원한다면, AuditorAware 인터페이스 구현 후 설정\r\n\r\n```\r\npublic String getCurrentAuditor() {\r\n    Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\r\n\r\n    if (authentication == null || !authentication.isAuthenticated()) {\r\n        return null;\r\n    }\r\n\r\n    return ((User) authentication.getPrincipal()).getUsername();\r\n}\r\n```', NULL, '', 14, 0),
(1657, 'dale.seo', '', '', '2016-01-18 11:29:16', '', 'ToStringBuilder 활용법', 'http://vnthf.github.io/blog/%5BJava%5D%20ToStringBuild%EC%97%90%20%EA%B4%80%ED%95%98%EC%97%AC/\r\n\r\n\r\n< ToStringStyle 확장 연습 >\r\n\r\npublic class CustomToStringStyle extends ToStringStyle {\r\n\r\n	public static final ToStringStyle CUSTOM_STYLE = new CustomToStringStyle();\r\n\r\n	private CustomToStringStyle() {\r\n		super();\r\n\r\n		this.setUseClassName(false);\r\n		this.setUseIdentityHashCode(false);\r\n\r\n		this.setContentStart(StringUtils.EMPTY);\r\n		this.setContentEnd(StringUtils.EMPTY);\r\n\r\n		// this.setArrayStart("[");\r\n		// this.setArrayEnd("]");\r\n\r\n		this.setFieldSeparator(",");\r\n		this.setFieldNameValueSeparator("=");\r\n\r\n		// this.setNullText("null");\r\n\r\n		// this.setSummaryObjectStartText("\\"<");\r\n		// this.setSummaryObjectEndText(">\\"");\r\n\r\n		// this.setSizeStartText("\\"<size=");\r\n		// this.setSizeEndText(">\\"");\r\n	}\r\n\r\n	/**\r\n	 * <p>Ensure <code>Singleton</code> after serialization.</p>\r\n	 *\r\n	 * @return the singleton\r\n	 */\r\n	private Object readResolve() {\r\n		return CUSTOM_STYLE;\r\n	}\r\n\r\n	@Override\r\n	public void append(final StringBuffer buffer, final String fieldName, final Object value, final Boolean fullDetail) {\r\n		if (value == null) {\r\n			return;\r\n		}\r\n\r\n		appendFieldStart(buffer, fieldName);\r\n		buffer.append("\\"" + value + "\\"");\r\n		appendFieldEnd(buffer, fieldName);\r\n	}\r\n\r\n}\r\n\r\n\r\n\r\n< ToStringStyle 확장 테스트 >\r\n\r\n\r\npublic class CustomToStringStyleTest {\r\n\r\n	@Test\r\n	public void testCustomToStringWithObject() {\r\n		Person person = new Person(1, "Dale");\r\n		String string = ToStringBuilder.reflectionToString(person, CustomToStringStyle.CUSTOM_STYLE);\r\n		System.out.println(string);\r\n		assertEquals("id=\\"1\\",name=\\"Dale\\"", string);\r\n	}\r\n\r\n\r\n	// Map 하다가 포기\r\n	@Ignore\r\n	@Test\r\n	public void testCustomToStringWithMap() {\r\n		Map<String, String> map = new HashMap<String, String>();\r\n		map.put("no", "1");\r\n		map.put("name", "Dale");\r\n		map.put("description", "");\r\n\r\n		String string = ToStringBuilder.reflectionToString(map, CustomToStringStyle.CUSTOM_STYLE);\r\n		System.out.println(string);\r\n		assertEquals("id=\\"1\\",name=\\"Dale\\"", string);\r\n	}\r\n\r\n}', NULL, '', 9, 0),
(1658, 'dale.seo', '', '', '2016-01-19 10:10:22', '', 'Map 구현체의 종류와 특징', '# HashMap\r\n : 랜덤 순회되지만, O(1)의 성능이다.\r\n\r\n# TreeMap\r\n : 키 값 오름차순으로 정려되어 순회된다. O(logN)\r\n\r\n# LinkedHashMap\r\n : 순회할 때 삽입했던 순서와 같다.\r\n\r\nhttp://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html\r\n\r\nget 할 때 put한 순서대로 나오기 때문에 First in First out이 필요한 상황에서 좋음!\r\n\r\n\r\n# ConcurrentHashMap\r\n : 맵 인스턴스를 많은 스레드에서 공유하고자 할 때, 여러 스레드를 동시에 사용해도 안전 (Thread Safe)\r\n한 쓰레드가 맵에 값을 쓰는 도중이라도, 다른 쓰레드가 키만 다르다면 다른 값을 읽을 수 있음.\r\n값을 쓰는 동안에는 테이블의 지정된 줄만 잠그기 때문에 맵의 나머지는 읽기 가능한 상태로 남음', NULL, '', 12, 0),
(1659, 'dale.seo', '', '', '2016-01-19 10:11:42', '', 'StringBuilder 사용 시 맨 마지막 글자 때내기', 'builder.setLength(builder.length() - 1);\r\n\r\n\r\n================================================================\r\n	public static String convert(Map<String, String> map) {\r\n		StringBuilder builder = new StringBuilder();\r\n\r\n		for (Map.Entry<String, String> entry : map.entrySet()) {\r\n			if (StringUtils.isNotEmpty(entry.getValue())) {\r\n				builder.append(entry.getKey() + "=\\"" + entry.getValue() + "\\",");\r\n			}\r\n		}\r\n                if (builder.length() > 0) {\r\n		      builder.setLength(builder.length() - 1);\r\n                }\r\n		return builder.toString();\r\n	}', NULL, '', 7, 0),
(1660, 'dale.seo', '', '', '2016-01-20 10:06:45', '', '@Configuration 안 에서 @Value(${...})가 먹지 않을 때', 'http://www.mkyong.com/spring/spring-is-not-working-in-value/\r\n\r\nstatic 메소드로 PropertySourcesPlaceholderConfigurer를 추가해줘야 함\r\n\r\n@Configuration\r\n@PropertySource("classpath:db.properties")\r\npublic class AppConfig {\r\n \r\n	@Value("${db.driver}")\r\n	private String driver;\r\n	\r\n	@Bean\r\n	public static PropertySourcesPlaceholderConfigurer propertyConfigInDev() {\r\n		return new PropertySourcesPlaceholderConfigurer();\r\n	}\r\n}', NULL, '', 2, 0),
(1661, 'dale.seo', '', '', '2016-01-21 22:30:58', '', 'IntelliJ 단축키', 'https://www.jetbrains.com/idea/help/keyboard-shortcuts-you-cannot-miss.html\r\n\r\n# 열편집 : Shift 누른 상태에서 커서를 상하로 움직이면 됨', NULL, '', 8, 0),
(1662, 'dale.seo', '', '', '2016-01-24 18:44:05', '', '브랜치 삭제 방법 (local/remote)', 'To delete a local branch\r\n\r\n$ git branch -d the_local_branch\r\n\r\n\r\nTo remove a remote branch (if you know what you are doing!)\r\n\r\n$ git push origin :the_remote_branch\r\n\r\n머지 된 브랜치 모두 지우기\r\n\r\n$ git branch --merged | xargs git branch -d\r\n\r\n로컬에서 feature 브랜치 모두 지우기\r\n\r\n$ git branch | grep feature | xargs git branch -d', NULL, '', 24, 0),
(1663, 'dale.seo', '', '', '2016-01-24 19:00:35', '', 'git rebase', '가지 브랜치에서 메인 브랜치를 rebase 하면, 브랜치 생성 이후로 메인 브랜치에 만들어진 모든 커밋들을 가지 브랜치의 head 아래에 위치시켜준다.\r\n\r\n\r\nRemote Repository의 커밋 히스토리 그래프를 한 줄로 깔끔하게 가져가고 싶을 때 바로 마스터에서 3-way merge 하는 대신에 브랜치에서 마스터로 rebase 하고 다시 마스터에서 fast-forward merger를 한다. \r\n\r\nconflict 발생 시 단순 merge의 경우 마스터 브랜치의 담당자가 직접 해결해야 하지만, 먼저 rebase 한 경우에는 브랜치 담당자가 사전에 conflict를 해결해놓기 때문에 마스터 브랜치의 담당자는 간단하게 fast-forward merge만 하기 되서 편한다.\r\n\r\n[ Local Branch ]\r\n$ git checkout develop\r\n$ git commit -m ''test''\r\n$ git pull master\r\n$ git rebase master\r\n-- 컨플릭트 발생하면 해결하고 add --\r\n$ git rebase --continue\r\n$ git push origin develop:develop\r\n\r\n[ Remote Branch ]\r\n$ git checkout master\r\n$ git merge develop', NULL, '', 29, 0),
(1664, 'dale.seo', '', '', '2016-01-25 17:18:12', '', 'XMl 설정 대비 자바 설정이 좋은 점', 'https://breadmj.wordpress.com/2013/08/04/spring-3-only-java-config-without-xml/', NULL, '', 2, 0),
(1665, 'dale.seo', '', '', '2016-01-25 22:20:34', '', 'Strategy Pattern - 스트레티지 패턴', '- 클라이언트가 어떤 구현을 사용할지 결정을 미룰 수 있음 \r\n- 알고리즘의 동적인 교체가 가능', NULL, '', 5, 0),
(1666, 'dale.seo', '', '', '2016-01-26 22:15:40', '', 'Decorator Pattern - 데코레이터 패턴', 'http://egloos.zum.com/iilii/v/3850836\r\n\r\nDecorator는 메쏘드의 확장 개념입니다. 멤버 변수로 받은 객체의 메쏘드를 이용하여 그 메쏘드를 확장하는 것입니다.\r\n\r\n첫째, 하위 클래스는 상위클래스의 형식을 멤버변수로 가집니다. \r\nChildDecorator 는 Decorator를 멤버변수로 받습니다. \r\n일반적으로 생성자의 인자로 받아서 멤버변수로 쎄팅을 합니다. 별도의 setter를 가지는 경우는 거의 없습니다.\r\n\r\n둘째, 하위 클래스는 상위클래스를 상속 받아 상위클래스의 메쏘드를 이용합니다. \r\n하위 클래스의 getMerong() 이라는 메쏘드는 상위 클래스의 getMerong()을 오버라이드하지만, 내부적으로 상위클래스의 getMerong()을 사용하고 있습니다.\r\n\r\n\r\npublic class Greeter {\r\n\r\n    public String greet() {\r\n        return "Hello world!";\r\n    }\r\n\r\n}\r\n\r\n\r\npublic class GreetDecorator extends Greeter {\r\n\r\n    private Greeter greeter;\r\n\r\n    public GreetDecorator(Greeter greeter) {\r\n        this.greeter = greeter;\r\n    }\r\n\r\n    @Override\r\n    public String greet() {\r\n        return "What''s up!! " + greeter.greet();\r\n    }\r\n}\r\n', NULL, '', 9, 0),
(1667, 'dale.seo', '', '', '2016-01-26 23:04:49', '', 'ByteArrayInputStream/ByteArrayOutputStream', 'ByteArrayInputStream과 ByteArrayOutputStream \r\n - 메모리, 즉 바이트배열에 데이터를 입출력하는데 사용.\r\n - 주로 다른 곳에 입출력하기 전에 데이터를 임시로 바이트배열에 담아서 변환 등의 작업을 하는데 사용한다.\r\n\r\n예) 바이트배열은 사용하는 자원이 메모리밖에 없으므로 가비지 컬렉터에 의해 자동적으로 자원을 반환하므로 close()를 이용해서 스트림을 닫지 않아도 된다.\r\n\r\n\r\npublic class ByteArrayStreamTest {\r\n\r\n    @Test\r\n    public void test() throws IOException {\r\n        byte[] inputArray = {''a'', ''b'', ''c'', ''d'', ''e''};\r\n        byte[] ouputArray;\r\n\r\n        ByteArrayInputStream in = new ByteArrayInputStream(inputArray);\r\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\r\n\r\n        int b;\r\n        while((b = in.read()) != -1) {\r\n            out.write(b);\r\n        }\r\n        ouputArray = out.toByteArray();\r\n\r\n        System.out.println(Arrays.toString(ouputArray));\r\n        assertArrayEquals(inputArray, ouputArray);\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nhttp://warmz.tistory.com/entry/IO-%EB%B0%94%EC%9D%B4%ED%8A%B8%EA%B8%B0%EB%B0%98-%EC%8A%A4%ED%8A%B8%EB%A6%BC-ByteArrayInOutputStream-FileInOutputStream', NULL, '', 4, 0),
(1668, 'dale.seo', '', '', '2016-01-26 23:11:20', '', 'JAVA IO 정리', 'http://ebcban.tistory.com/334', NULL, '', 4, 0),
(1669, 'dale.seo', '', '', '2016-01-27 12:53:43', '', '로케일 설정 끝판 설명', '스프링에서 어떻게 로케일을 가져올지 완벽한 설명\r\n\r\n웹티어에서는 RequestContextUtils,\r\n비지니스티어에서는 LocalContextHolder를 쓰면 됨\r\n\r\n\r\nhttps://templth.wordpress.com/2010/07/21/configuring-locale-switching-with-spring-mvc-3/', NULL, '', 2, 0),
(1670, 'dale.seo', '', '', '2016-01-30 11:16:47', '', 'MessageSource 종류', 'Spring에서 Message Properties를 사용하기 위한 방법은 2가지가 있는데, ResourceBundleMessageSource 와 ReloadableResourceBundleMessageSource 클래스입니다.\r\n그 중 ReloadableResourceBundleMessageSource 클래스는 해당 Properties 파일이 변경되었을 경우에도 애플리케이션을 다시 시작할 필요하 없다는 장점이 있습니다.\r\n\r\n\r\nhttp://mryong8.blogspot.kr/2014/11/spring-32-properties-message.html', NULL, '', 5, 0),
(1671, 'dale.seo', '', '', '2016-01-30 11:23:07', '', 'MessageSourceAccessor', 'MessageSource에서 제공하는 메서드가 code, args, locale을 무조건 받기 때문에 사용하기가 번거로울 때가 많다.\r\n예를 들어 code 값만 쓰고 싶을 때는 args를 항상 null로 던져야 하고, locale을 지정하지 않고 디폴트 로케일을 사용하고 싶을 때도 있고.\r\n\r\n그럴 때는 MessageSource를 생성자의 인자로 받는 MessageSourceAccessor를 빈으로 등록하고 사용하면 된다.\r\n개인적으로는 컨트롤러나 서비스단에서 즉석해서 MessageSource 접근이 필요할 때 사용하면 좋을 것 같다.\r\n그 외 공통이나 프레임워크 단에서는 MessageSource만으로도 충분한 것 같다.\r\n\r\nhttp://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/support/MessageSourceAccessor.html\r\nhttp://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/MessageSource.html', NULL, '', 5, 0),
(1672, 'dale.seo', '', '', '2016-01-30 11:55:15', '', 'MockMvcBuilders를 이용하여 MockMvc를 생성하는 2가지 방법', 'http://www.petrikainulainen.net/programming/spring-framework/unit-testing-of-spring-mvc-controllers-configuration/\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------\r\n# MockMvcBuilders.standaloneSetup() : Using Standalone Configuration, 단위 테스트, 즉석해서 하나의 컨트롤러를 위한 MockMvc만 만들어낸다.\r\n----------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n    @Before\r\n    public void setUp() {\r\n        mockMvc = MockMvcBuilders.standaloneSetup(new TodoController(messageSource(), todoServiceMock))\r\n                .setHandlerExceptionResolvers(exceptionResolver())\r\n                .setValidator(validator())\r\n                .setViewResolvers(viewResolver())\r\n                .build();\r\n    }\r\n\r\n\r\n----------------------------------------------------------------------------------------------------------------------------------------\r\n# MockMvcBuilders.webAppContextSetup() : Using WebApplicationContext Based Configuration, 통합 테스트, WebApplicationContext를 주입받아 만들어낸다. 모든 컨트롤러를 다 빈으로 생성하는 단점이 있다.\r\n----------------------------------------------------------------------------------------------------------------------------------------\r\n    @Autowired\r\n    private WebApplicationContext wac;\r\n\r\n    private MockMvc mockMvc;\r\n\r\n    @Before\r\n         public void setup() {\r\n        mockMvc = MockMvcBuilders.webAppContextSetup(wac).build();\r\n    }', NULL, '', 18, 0),
(1673, 'dale.seo', '', '', '2016-01-30 11:59:41', '', 'Spring MVC Test 튜토리얼 끝판왕', 'http://www.petrikainulainen.net/spring-mvc-test-tutorial/', NULL, '', 4, 0),
(1674, 'dale.seo', '', '', '2016-01-30 18:28:11', '', 'Test Data Builders: an alternative to the Object Mother pattern', '빌더 패턴을 이용해서 테스트 데이터를 테스트 흐름에 방해를 주지 않으면서 생성하기\r\n\r\nhttp://www.natpryce.com/articles/000714.html', NULL, '', 8, 0),
(1675, 'dale.seo', '', '', '2016-01-30 18:29:59', '', '일반 컨트롤러 테스트 방법', 'http://www.petrikainulainen.net/programming/spring-framework/unit-testing-of-spring-mvc-controllers-normal-controllers/', NULL, '', 3, 0),
(1676, 'dale.seo', '', '', '2016-01-31 17:49:36', '', 'Spring JPA Reposiotry 단위 테스트 예제', '@DataJpaTest 어노테이션을 사용하면 TestEntityManager와 Repository들을 주입받을 수 있다.\r\n\r\n==========================================================================\r\npackage seo.dale.commerce.product;\r\n\r\nimport org.junit.Test;\r\nimport org.junit.runner.RunWith;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\r\nimport org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;\r\nimport org.springframework.test.context.junit4.SpringRunner;\r\nimport seo.dale.commerce.core.ModelFactory;\r\n\r\nimport java.util.List;\r\n\r\nimport static org.assertj.core.api.Assertions.assertThat;\r\n\r\n@RunWith(SpringRunner.class)\r\n@DataJpaTest\r\npublic class ProductRepositoryTest {\r\n\r\n    @Autowired\r\n    private TestEntityManager entityManager;\r\n\r\n    @Autowired\r\n    private ProductRepository repository;\r\n\r\n    @Test\r\n    public void testSave() {\r\n        Product saved = repository.save(ModelFactory.newProduct("Apple", "Red apple", 1000.1F, 100));\r\n        Product found = entityManager.find(Product.class, 1L);\r\n\r\n        assertThat(found).isSameAs(saved);\r\n        assertThat(found.getName()).isEqualTo("Apple");\r\n        assertThat(found.getDescription()).isEqualTo("Red apple");\r\n        assertThat(found.getPrice()).isEqualTo(1000.1F);\r\n        assertThat(found.getStock()).isEqualTo(100);\r\n    }\r\n\r\n    @Test\r\n    public void testFindOne() {\r\n        Product saved = entityManager.persist(ModelFactory.newProduct("Apple", "Red apple", 1000.1F, 100));\r\n        Product found = repository.findOne(1L);\r\n\r\n        assertThat(found).isSameAs(saved);\r\n        assertThat(found.getName()).isEqualTo("Apple");\r\n        assertThat(found.getDescription()).isEqualTo("Red apple");\r\n        assertThat(found.getPrice()).isEqualTo(1000.1F);\r\n        assertThat(found.getStock()).isEqualTo(100);\r\n    }\r\n\r\n    @Test\r\n    public void testFindAll() {\r\n        Product saved1 = entityManager.persist(ModelFactory.newProduct("Apple", "Red apple", 1000.1F, 100));\r\n        Product saved2 = entityManager.persist(ModelFactory.newProduct("Banana", "Yellow banana", 2000.0F, 1000));\r\n        Product saved3 = entityManager.persist(ModelFactory.newProduct("Mellon", "Green mellon", 500.0F, 500));\r\n        List<Product> list = repository.findAll();\r\n\r\n        assertThat(list).hasSize(3).contains(saved1).contains(saved2).contains(saved3);\r\n    }\r\n\r\n    @Test\r\n    public void testDelete() {\r\n        entityManager.persist(ModelFactory.newProduct("Apple", "Red apple", 1000.1F, 100));\r\n        repository.delete(1L);\r\n        Product found = entityManager.find(Product.class, 1L);\r\n\r\n        assertThat(found).isNull();\r\n    }\r\n\r\n}', NULL, '', 17, 0),
(1677, 'dale.seo', '', '', '2016-01-31 17:56:24', '', 'Sprin Data JPA 튜토리얼 끝판왕', 'http://www.petrikainulainen.net/spring-data-jpa-tutorial/', NULL, '', 6, 0),
(1678, 'dale.seo', '', '', '2016-02-04 11:23:13', '', 'Logback 사용법', 'https://sonegy.wordpress.com/category/logback/', NULL, '', 5, 0),
(1679, 'dale.seo', '', '', '2016-02-04 21:52:31', '', 'Log4j2 + SLF4J Maven 설정', '		<!-- SLF4J -->\r\n		<dependency>\r\n			<groupId>org.slf4j</groupId>\r\n			<artifactId>slf4j-api</artifactId>\r\n			<version>1.7.13</version>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.slf4j</groupId>\r\n			<artifactId>jcl-over-slf4j</artifactId>\r\n			<version>1.7.13</version>\r\n			<scope>runtime</scope>\r\n		</dependency>\r\n        <!-- SLF4J Binding for Log4J2 -->\r\n        <dependency>\r\n            <groupId>org.apache.logging.log4j</groupId>\r\n            <artifactId>log4j-slf4j-impl</artifactId>\r\n            <version>2.5</version>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <!-- Log4j2 -->\r\n		<dependency>\r\n			<groupId>org.apache.logging.log4j</groupId>\r\n			<artifactId>log4j-api</artifactId>\r\n			<version>2.5</version>\r\n            <scope>runtime</scope>\r\n		</dependency>\r\n        <dependency>\r\n			<groupId>org.apache.logging.log4j</groupId>\r\n			<artifactId>log4j-core</artifactId>\r\n			<version>2.5</version>\r\n            <scope>runtime</scope>\r\n		</dependency>', NULL, '', 11, 0),
(2342, 'dale.seo', '', '', '2016-10-02 20:34:44', '', 'Rebase vs. Merge', '일반적인 해답을 굳이 드리자면 로컬 브랜치에서 작업할 때는 히스토리를 정리하기 위해서 Rebase 할 수도 있지만, Push로 리모트에든 밖으로 내보낸 커밋에 대해서는 절대 Rebase 하지 말아야 한다.\r\n\r\n로컬 저장소에서도 두 브랜치의 공통 부모 커밋 이후에 커밋이 한 두개가 아니라면 Merge를 해서 그 이력을 보존하는 게 좋다.\r\n\r\nhttps://git-scm.com/book/ko/v1/Git-%EB%B8%8C%EB%9E%9C%EC%B9%98-Rebase%ED%95%98%EA%B8%B0\r\nhttps://dogfeet.github.io/articles/2012/git-merge-rebase.html', NULL, '', 2, 0),
(1680, 'dale.seo', '', '', '2016-02-07 11:21:10', '', 'Spring Test DBUnit 디펜던시', '		<dependency>\r\n			<groupId>org.dbunit</groupId>\r\n			<artifactId>dbunit</artifactId>\r\n			<version>2.5.1</version>\r\n			<scope>test</scope>\r\n			<exclusions>\r\n				<exclusion>\r\n					<artifactId>junit</artifactId>\r\n					<groupId>junit</groupId>\r\n				</exclusion>\r\n			</exclusions>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>com.github.springtestdbunit</groupId>\r\n			<artifactId>spring-test-dbunit</artifactId>\r\n			<version>1.2.1</version>\r\n			<scope>test</scope>\r\n		</dependency>', NULL, '', 3, 0),
(1681, 'dale.seo', '', '', '2016-02-07 12:00:02', '', 'Spring Test DBUnit 어노테이션', 'http://springtestdbunit.github.io/spring-test-dbunit/index.html\r\nhttp://springtestdbunit.github.io/spring-test-dbunit/sample.html\r\n\r\n\r\n# 테스트 케이스에 다음과 같이 리스너 추가\r\n\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration\r\n@TestExecutionListeners({ DependencyInjectionTestExecutionListener.class,\r\n        DirtiesContextTestExecutionListener.class,\r\n        TransactionalTestExecutionListener.class,\r\n        DbUnitTestExecutionListener.class })\r\n\r\n\r\n# DB 초기/소멸 xml 경로 추가 (보통 클래스 레벨 )\r\n\r\n@DatabaseSetup("/META-INF/dbtest/sampleData.xml")\r\n@DatabaseTearDown("/META-INF/dbtest/resetData.xml")\r\n\r\n\r\n# DB 검증 xml 경로 추가 (보통 메소드 레벨)\r\n\r\n@ExpectedDatabase("expectedData.xml")', NULL, '', 8, 0),
(1682, 'dale.seo', '', '', '2016-02-08 09:51:05', '', 'ApplicationListener를 이용하여 메모리 DB 데이터 적재', 'MVC 환경에서는 두 번 호출되지 않도록 Root ApplicationConetxt인지 Web ApplicationContext인지 적절히 체크한다.\r\n\r\n< Spring 4.2 이후 : 메서드 레벨에서 @EventListener 어노테이션 선언 >\r\n=====================================================================================================\r\n@Component\r\n// @Profile("local") TODO : 추후 프로파일 개념이 생기면 로컬 프로파일에서만 구동되도록 추가\r\npublic class InitialDataLoader {\r\n\r\n    private static Logger logger = LoggerFactory.getLogger(InitialDataLoader.class);\r\n\r\n    @Autowired\r\n    private CoffeeService coffeeService;\r\n\r\n    @EventListener\r\n    public void handleContextRefresh(ContextRefreshedEvent event) {\r\n        ApplicationContext applicationContext = event.getApplicationContext();\r\n        if (applicationContext.getParent() != null) {\r\n            return; // 서블릿 컨텍스트가 초기화 됐을 때는 생략\r\n        }\r\n\r\n        logger.info("Loading initial data onto the database.");\r\n\r\n        List<Member> memberList= Arrays.asList(\r\n                new Member("9230065", "염동환"),\r\n                new Member("9230069", "임근대"),\r\n                new Member("9230074", "최은봉"),\r\n                new Member("9230082", "서대영"),\r\n                new Member("9230088", "김희민"),\r\n                new Member("9230090", "양해엽"),\r\n                new Member("9230091", "정희원")\r\n        );\r\n\r\n        memberList.forEach(member -> coffeeService.addMember(member));\r\n    }\r\n\r\n}\r\n\r\n< Spring 4.2 이전 : 클래스 레벨에서 ApplicationListener 구현 >\r\n=====================================================================================================\r\npackage seo.dale.spring.core.event;\r\n\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.context.ApplicationContext;\r\nimport org.springframework.context.ApplicationListener;\r\nimport org.springframework.context.event.ContextRefreshedEvent;\r\nimport org.springframework.stereotype.Component;\r\nimport seo.dale.spring.todo.model.ToDo;\r\nimport seo.dale.spring.todo.repository.ToDoRepository;\r\n\r\n@Component\r\npublic class DataLoader implements ApplicationListener<ContextRefreshedEvent> {\r\n\r\n    @Autowired\r\n    private ToDoRepository repository;\r\n\r\n    private static final Logger LOGGER = LoggerFactory.getLogger(DataLoader.class);\r\n\r\n    @Override\r\n    public void onApplicationEvent(ContextRefreshedEvent event) {\r\n        ApplicationContext applicationContext = event.getApplicationContext();\r\n        if (applicationContext.getParent() != null) {\r\n            return;\r\n        }\r\n\r\n        LOGGER.debug("loading data onto the database.");\r\n\r\n        ToDo toDo1 = new ToDo();\r\n        toDo1.setTitle("Listen to the EBS radio show.");\r\n        toDo1.setDescription("Aired at 7 AM and 5 PM");\r\n        repository.save(toDo1);\r\n\r\n        ToDo toDo2 = new ToDo();\r\n        toDo2.setTitle("Watch the Arirang news");\r\n        toDo2.setDescription("Every morning");\r\n        repository.save(toDo2);\r\n    }\r\n\r\n}', NULL, '', 17, 0),
(1683, 'dale.seo', '', '', '2016-02-08 13:13:33', '', '변수나 필드에 final 키워드 사용하는 이유', '변수나 필드에 한 번 할당되면 그 이후 바꾸지 못하기 위함 (원시 타입은 변경 불가, 객체 참조 타입은 다른 객체 할당 불가)\r\n단, 객체 참조는 변경할 수 없어도 객체 내부의 값들은 개별 값들이 final이 아니라면 변경할 수 있으므로 주의한다.\r\n할당된 이후에 해당 변수나 필드가 바뀌지 않았는지 체크할 필요가 없어서 소스 리딩이 편한다.\r\n그렇다고 해서 일단 final 달아놓고 보는 코딩은 권장하지 않는다. 오히려 소스 가독성이 떨어진다.\r\nImmutable 해야하는 변수와 팔드에만 선별적으로 선언해야 한다.\r\n\r\nhttp://programmers.stackexchange.com/questions/98691/excessive-use-final-keyword-in-java', NULL, '', 5, 0),
(1684, 'dale.seo', '', '', '2016-02-08 14:50:00', '', 'Set 컬렉션에는 넣을 객체는 반드시 hashcode, equals를 구현해야 한다.', 'Set은 중복을 허락하지 않는 컬렉션이다.\r\n내부적으로 중복 판단을 위해 넣은 객체의 hashcode와 equals 매서드를 호출한다.\r\n\r\n1차적으로 hashcode를 호출하여 같지 않으면 다른 객체로 판단한다.\r\nhashcode과 동일한 경우 2차적으로 equals 메서드까지 호출하여 중복 여부를 최종 판단한다.\r\n\r\nObject의 equals는 this == obj를 리턴하므로, 필드값을 비교하도록 equals 메서드를 반드시 구현해야 한다.\r\n"If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result.." 라는 원칙을 지켜주기 위해서 hashcode도 반드시 구현해야 한다.\r\n\r\nhttp://suein1209.tistory.com/291', NULL, '', 7, 0),
(1685, 'dale.seo', '', '', '2016-02-08 14:57:10', '', 'Set, Map 사용할 때 hashcode 메서드는 성능에 지대한 영향을 준다.', '동일한 hashcode를 반환해도 작동은 하지만 내부적으로 hashcode 메서드의 반환값을 키로 사용하므로, Set이나 Map 성능에 최악이다.\r\n\r\n\r\nWhenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application.\r\nIf two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result.\r\nIt is not required that if two objects are unequal according to the equals(java.lang.Object) method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables.', NULL, '', 3, 0),
(1686, 'dale.seo', '', '', '2016-02-08 17:29:00', '', '.gitignore 파일 생성 사이트', 'https://www.gitignore.io/', NULL, '', 2, 0),
(1687, 'dale.seo', '', '', '2016-02-08 17:47:19', '', '대표적인 Java의 Error', '프로그래머 스스로 처리할 수 없는 에러\r\nError는 Exception과 동일한 레벨로 Throwable을 바로 상속한다.\r\n\r\nNoClassDefFoundError\r\nOutOfMemoryError', NULL, '', 4, 0),
(1689, 'dale.seo', '', '', '2016-02-11 11:07:10', '', '람다를 활용한 컬렉션 내부 이터레이션', 'http://jinson.tistory.com/entry/%ED%95%9C%EA%B8%80%ED%99%94-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B85%EC%9E%90%EB%B0%94%EC%97%90%EC%84%9C-%EB%9E%8C%EB%8B%A4-%EC%8B%9D%EC%9D%B4-%ED%95%84%EC%9A%94%ED%95%9C-%EC%9D%B4%EC%9C%A0-1\r\n\r\n\r\n\r\n	@Test\r\n	public void testLoop() throws Exception {\r\n		List<Integer> list = new ArrayList<>(10);\r\n		for (int i = 0; i < 10; i++) {\r\n			list.add(i);\r\n		}\r\n		/*\r\n		for (int i : list) {\r\n			System.out.println(i);\r\n		}\r\n		*/\r\n		/*\r\n		list.forEach(i -> System.out.println(i));\r\n		*/\r\n		list.forEach(System.out::println);\r\n	}', NULL, '', 2, 0),
(1690, 'dale.seo', '', '', '2016-02-11 11:26:38', '', 'Predicate 함수형 인터페이스와 람다를 이용한 이터레이션', '	@Test\r\n	public void testPredicate() throws Exception {\r\n		List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\r\n		assertEquals(15, sum(numbers, t -> true));\r\n		assertEquals(6, sum(numbers, t -> t % 2 == 0));\r\n		assertEquals(9, sum(numbers, t -> t > 3));\r\n	}\r\n\r\n	private int sum(List<Integer> numbers, Predicate<Integer> p) {\r\n		int total = 0;\r\n		for (int num : numbers){\r\n			if (p.test(num)) {\r\n				total += num;\r\n			}\r\n		}\r\n		return total;\r\n	}\r\n', NULL, '', 4, 0),
(1691, 'dale.seo', '', '', '2016-02-11 21:22:02', '', 'Generics 설명 끝판왕', 'http://www.javacodegeeks.com/2011/04/java-generics-quick-tutorial.html', NULL, '', 2, 0),
(1692, 'dale.seo', '', '', '2016-02-11 22:06:15', '', 'JUnit Life Cycle', '생성자도 모든 테스트 메서드 전에 호출되는 것에 주의한다.\r\n\r\n\r\npublic class JUnitLifecycle {\r\n\r\n    private static int counter = 0;\r\n\r\n    @BeforeClass\r\n    public static void suiteSetup() {\r\n        System.out.println(counter + ":suiteSetup");\r\n        assertEquals(0, counter);\r\n        counter++;\r\n    }\r\n\r\n    public JUnitLifecycle() {\r\n        System.out.println(counter + ":JUnitLifecycle");\r\n        assertTrue(Arrays.asList(1, 5).contains(counter));\r\n        counter++;\r\n    }\r\n\r\n    @Before\r\n    public void prepareTest() {\r\n        System.out.println(counter + ":prepareTest");\r\n        assertTrue(Arrays.asList(2, 6).contains(counter));\r\n        counter++;\r\n    }\r\n\r\n    @Test\r\n    public void performFirstTest() {\r\n        System.out.println(counter + ":performFirstTest");\r\n        assertTrue(Arrays.asList(3, 7).contains(counter));\r\n        counter++;\r\n    }\r\n\r\n    @Test\r\n    public void peformSecondTest() {\r\n        System.out.println(counter + ":peformSecondTest");\r\n        assertTrue(Arrays.asList(3, 7).contains(counter));\r\n        counter++;\r\n    }\r\n\r\n    @After\r\n    public void cleanupTest() {\r\n        System.out.println(counter + ":cleanupTest");\r\n        assertTrue(Arrays.asList(4, 8).contains(counter));\r\n        counter++;\r\n    }\r\n\r\n    @AfterClass\r\n    public static void suiteFinished() {\r\n        System.out.println(counter + ":suiteFinished");\r\n        assertEquals(9, counter);\r\n    }\r\n\r\n}\r\n', NULL, '', 3, 0),
(1693, 'dale.seo', '', '', '2016-02-12 10:05:32', '', '제네릭 메서드를 이용해서 리스트의 최대값 구하기', '제네릭 메서드는 타입 매개변수를 접근자와 리턴 타입 사이에 둬야함\r\n\r\n	@Test\r\n	public void testMax() {\r\n		List<Integer> list = Arrays.asList(1, 3, 9, 7, 2, 11, 4, 8);\r\n		assertEquals(Integer.valueOf(11), max(list));\r\n	}\r\n\r\n	public static <T extends Comparable<T>> T max(List<T> list) {\r\n		Iterator<T> iterator = list.iterator();\r\n		T max = iterator.next();\r\n		while (iterator.hasNext()) {\r\n			T t = iterator.next();\r\n			if (t.compareTo(max) > 0) {\r\n				max = t;\r\n			}\r\n		}\r\n		return max;\r\n	}', NULL, '', 3, 0),
(1694, 'dale.seo', '', '', '2016-02-12 10:07:18', '', 'Oracle Generic Tutorial', 'https://docs.oracle.com/javase/tutorial/java/generics/index.html', NULL, '', 2, 0),
(1695, 'dale.seo', '', '', '2016-02-12 14:08:12', '', '제네릭 상속 주의 점', '제네릭 타입 간에 상속 관계가 있다고 해서 제네릭 클래스에 상속 관계가 생기는 건 아님\r\n\r\n\r\nhttps://docs.oracle.com/javase/tutorial/java/generics/inheritance.html\r\n\r\nhttps://docs.oracle.com/javase/tutorial/java/generics/subtyping.html', NULL, '', 3, 0),
(1696, 'dale.seo', '', '', '2016-02-13 11:26:09', '', 'H2 인메모리 데이터베이스', 'username과 password를 아무거나 세팅하거나 안 넘겨도 됨\r\n\r\n\r\n    @Test\r\n    public void connectToH2() throws SQLException {\r\n        Connection conn = DriverManager.getConnection("jdbc:h2:mem:test;MODE=MySQL");\r\n        Statement stmt = conn.createStatement();\r\n        stmt.executeUpdate("CREATE TABLE teams (id INTEGER, name VARCHAR(100))");\r\n        stmt.executeUpdate("INSERT INTO teams VALUES (1, ''Red Team'')");\r\n        stmt.executeUpdate("INSERT INTO teams VALUES (2, ''Blue Team'')");\r\n        stmt.executeUpdate("INSERT INTO teams VALUES (3, ''Green Team'')");\r\n\r\n        ResultSet rs = stmt.executeQuery("SELECT COUNT(*) FROM teams");\r\n        assertTrue(rs.next());\r\n        assertEquals(3, rs.getInt(1));\r\n    }', NULL, '', 11, 0),
(1697, 'dale.seo', '', '', '2016-02-13 15:40:28', '', 'Java JAXB 라이브러리', '# 개념\r\n- javax.xml.bind 패키지 아래에 있는 Java 기본 라이브러리\r\n- XML 문서와 도메인 객체 간 직렬화/역직렬화를 지원\r\n- JAXB 라이브러리가 직렬/역직렬할 때, 예전에는 XML의 구조를 정의한 XSD을 많이 사용했지만, 요즘에는 도메인 클래스에 어노테이션을 사용하는 거 더 일반적\r\n\r\n# 용도\r\n- XML 설정 파일을 Java 객체로 읽어오기 (Jackson을 써도 될 것 같기도 하고...)\r\n\r\n# 팁\r\n- XML 구조를 먼저 정의하는 것 보다는, 도메인 객체를 먼저 마셜링 해보는 게 어노테이션 등을 최대한 아낄 수 있따.\r\n\r\n# 예제\r\n\r\n=================================================================================================\r\n\r\npublic class JaxbTest {\r\n\r\n	@Test\r\n	public void testMarshal() throws JAXBException {\r\n		Config bean = new Config();\r\n		bean.setActivation(true);\r\n		bean.setIpList(Arrays.asList("127.0.0.1", "127.0.0.2", "127.0.0.3"));\r\n\r\n		JAXBContext context = JAXBContext.newInstance(Config.class);\r\n		Marshaller marshaller = context.createMarshaller();\r\n		marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);\r\n\r\n		ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n		marshaller.marshal(bean, baos);\r\n		System.out.println(baos);\r\n\r\n		String[] tokens = baos.toString().split("\\n");\r\n		assertEquals("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?>", tokens[0].trim());\r\n		assertEquals("<config>", tokens[1].trim());\r\n		assertEquals("<activation>true</activation>", tokens[2].trim());\r\n		assertEquals("<ipList>", tokens[3].trim());\r\n		assertEquals("<item>127.0.0.1</item>", tokens[4].trim());\r\n	}\r\n\r\n	@Test\r\n	public void testUnmarshal() throws JAXBException {\r\n		InputStream inputStream = getClass().getResourceAsStream("/xml/config.xml");\r\n		System.out.println(inputStream);\r\n		\r\n		JAXBContext context = JAXBContext.newInstance(Config.class);\r\n		Unmarshaller unmarshaller = context.createUnmarshaller(); \r\n		Config bean = (Config) unmarshaller.unmarshal(inputStream);\r\n		System.out.println(bean);\r\n\r\n		assertTrue(bean.isActivation());\r\n		assertEquals(Arrays.asList("127.0.0.1", "127.0.0.2", "127.0.0.3"), bean.getIpList());\r\n	}\r\n\r\n}\r\n\r\n\r\n\r\n=================================================================================================\r\nimport javax.xml.bind.annotation.*;\r\nimport java.util.List;\r\n\r\n@XmlRootElement(name = "config")\r\n@XmlAccessorType(XmlAccessType.FIELD)\r\npublic class Config {\r\n\r\n	@XmlElement(name = "activation")\r\n	private boolean activation;\r\n\r\n	@XmlElementWrapper(name = "ipList")\r\n	@XmlElement(name = "item")\r\n	private List<String> ipList;\r\n\r\n	public boolean isActivation() {\r\n		return this.activation;\r\n	}\r\n\r\n	public void setActivation(boolean activation) {\r\n		this.activation = activation;\r\n	}\r\n\r\n	public List<String> getIpList() {\r\n		return this.ipList;\r\n	}\r\n\r\n	public void setIpList(List<String> ipList) {\r\n		this.ipList = ipList;\r\n	}\r\n\r\n	@Override\r\n	public String toString() {\r\n		return "activation=" + activation + ", ipList=" + ipList;\r\n	}\r\n\r\n}\r\n\r\n\r\n=================================================================================================\r\n<?xml version="1.0" encoding="UTF-8"?>\r\n<config>\r\n    <activation>true</activation>\r\n    <ipList>\r\n        <item>127.0.0.1</item>\r\n        <item>127.0.0.2</item>\r\n        <item>127.0.0.3</item>    \r\n    </ipList>\r\n</config>\r\n', NULL, '', 9, 0),
(1698, 'dale.seo', '', '', '2016-02-13 16:38:36', '', '[Java8] IntStream.range 메서드를 이용한 컬렉션 루프 돌기', '파이썬의 range 함수와 비슷한 루핑 인터페이스 제공\r\n\r\n        List<String> document = ....\r\n        List<Integer> misspelledWords = new ArrayList<>();\r\n\r\n        IntStream.range(0, document.size())\r\n                .forEach(idx -> {\r\n                    String word = document.get(idx);\r\n                    if (!dictionary.isValidWord(word)) {\r\n                        misspelledWords.add(idx);\r\n                    }\r\n                });\r\n\r\n    ', NULL, '', 7, 0),
(1699, 'dale.seo', '', '', '2016-02-13 17:10:52', '', '의존성 주입 AnnotationConfigApplicationContext VS ClassPathXmlApplicationContext', 'MVC 뿐만 아니라 일반 자바 어플리케이션에도 충분히 가볍게 사용 가능하다.\r\n\r\n============================================================================================\r\npublic class SpellCheckerTest {\r\n\r\n    @Test\r\n    public void testWithoutDependencyInjection() {\r\n        Dictionary dictionary = new LiquorDictionary();\r\n        SpellChecker checker = new SpellChecker(dictionary);\r\n        List<Integer> indices = checker.checkDocument(Arrays.asList("Beer", "Soju", "Wine", "Makkolli", "Whiskey"));\r\n        assertEquals(Arrays.asList(1, 3), indices);\r\n    }\r\n\r\n    @Test\r\n    public void testWithAnnotationConfig() {\r\n        ApplicationContext context = new AnnotationConfigApplicationContext(SpellCheckerConfig.class);\r\n        SpellChecker checker = context.getBean(SpellChecker.class);\r\n        List<Integer> indices = checker.checkDocument(Arrays.asList("Beer", "Soju", "Wine", "Makkolli", "Whiskey"));\r\n        assertEquals(Arrays.asList(1, 3), indices);\r\n    }\r\n\r\n    @Test\r\n    public void testWithXmlConfig() {\r\n        ApplicationContext context = new ClassPathXmlApplicationContext("context/spellCheckerContext.xml");\r\n        SpellChecker checker = context.getBean(SpellChecker.class);\r\n        List<Integer> indices = checker.checkDocument(Arrays.asList("Beer", "Soju", "Wine", "Makkolli", "Whiskey"));\r\n        assertEquals(Arrays.asList(1, 3), indices);\r\n    }\r\n\r\n}\r\n\r\n\r\n============================================================================================\r\n@Configuration\r\npublic class SpellCheckerConfig {\r\n\r\n    @Bean\r\n    public SpellChecker spellChecker() {\r\n        return new SpellChecker(dictionary());\r\n    }\r\n\r\n    @Bean\r\n    public Dictionary dictionary() {\r\n        return new LiquorDictionary();\r\n    }\r\n\r\n}\r\n\r\n\r\n============================================================================================\r\n<?xml version="1.0" encoding="UTF-8"?>\r\n<beans xmlns="http://www.springframework.org/schema/beans"\r\n       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\r\n       xsi:schemaLocation="http://www.springframework.org/schema/beans\r\n    http://www.springframework.org/schema/beans/spring-beans.xsd">\r\n\r\n    <bean id="dictionanry" class="org.springframework.context.LiquorDictionary" />\r\n\r\n    <bean class="org.springframework.context.SpellChecker">\r\n        <constructor-arg ref="dictionanry" />\r\n    </bean>\r\n\r\n</beans>', NULL, '', 9, 0),
(1784, 'dale.seo', '', '', '2016-03-29 22:16:01', '', 'XML 설정 기반 Spring AOP 로깅 예제', 'POJO로 Aspect(횡단 관심사 구현체) 클래스를 구현하고 빈으로 컨텍스트에 등록 후,\r\nAOP 관련 태그로 원하는 클래스와 연결해주면 된다.\r\n\r\n\r\n# 로깅을 구현하는 애스팩트 클래스\r\n======================================================================================================================\r\npublic class LoggingAspect {\r\n\r\n    private PrintStream stream;\r\n\r\n    public LoggingAspect(PrintStream stream) {\r\n        this.stream = stream;\r\n    }\r\n\r\n    public void logBefore() {\r\n        stream.println("logged before");\r\n    }\r\n\r\n    public void logAfter() {\r\n        stream.println("logged after");\r\n    }\r\n\r\n}\r\n\r\n\r\n# 로깅을 적용할 타켓 클래스\r\n======================================================================================================================\r\npublic class AbcPrinter {\r\n\r\n    public void print() {\r\n        System.out.println("=== ABC ===");\r\n    }\r\n\r\n}\r\n\r\n\r\n# XML 설정 파일\r\naop:config, aop:aspect, aop:pointcut, aop:before, aop:after 태그를 이용해서 간단하고 명시적으로 AOP 설정을 할 수 있다.\r\n\r\n======================================================================================================================\r\n<?xml version="1.0" encoding="UTF-8"?>\r\n<beans xmlns="http://www.springframework.org/schema/beans"\r\n       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\r\n       xmlns:aop="http://www.springframework.org/schema/aop"\r\n       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\r\n       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">\r\n\r\n       <bean class="org.springframework.aop.AbcPrinter"/>\r\n\r\n       <bean id="loggingAspect" class="org.springframework.aop.LoggingAspect">\r\n              <constructor-arg name="stream" value="#{T(System).out}"/>\r\n       </bean>\r\n\r\n       <aop:config>\r\n              <aop:aspect ref="loggingAspect">\r\n                     <aop:pointcut id="print" expression="execution(* *.print(..))"/>\r\n                     <aop:before pointcut-ref="print" method="logBefore"/>\r\n                     <aop:after pointcut-ref="print" method="logAfter"/>\r\n              </aop:aspect>\r\n       </aop:config>\r\n</beans>\r\n\r\n\r\n# 단위 테스트\r\n======================================================================================================================\r\npublic class AbcPrinterTest {\r\n\r\n    @Test\r\n    public void test() {\r\n        ApplicationContext context = new ClassPathXmlApplicationContext("aop/aop-context.xml");\r\n        AbcPrinter printer = context.getBean(AbcPrinter.class);\r\n        printer.print();\r\n    }\r\n\r\n}', NULL, '', 8, 0),
(1700, 'dale.seo', '', '', '2016-02-13 21:50:56', '', '@FixMethodOrder로 테스트 메서드 실행 순서 세팅', 'http://krespo.net/190', NULL, '', 3, 0),
(1701, 'dale.seo', '', '', '2016-02-14 20:19:40', '', 'File 클래스를 이용해서 임시 파일 생성 후 JVM 종료 시 삭제', 'public static void main(String[] args) throws IOException, InterruptedException {\r\n    File f1 = File.createTempFile("temp1", ".dat");\r\n    File f2 = File.createTempFile("temp1", ".dat", new File("c:\\\\temp"));\r\n    Thread.sleep(60000);\r\n    f1.deleteOnExit();\r\n    f2.deleteOnExit();\r\n}\r\n\r\nFile.createTempFile(prefix, suffix)\r\n- 환경 변수로 지정된 tmp 디렉토리에 자동으로 생성된다.\r\n\r\nFile.createTempFile(prefix, suffix, directory)\r\n- directory로 지정된 폴더로 임시파일이 생성된다.\r\n\r\ndeleteOnExit()\r\n- 해당 메소드를 호출 하면 jvm이 종료 될때 자동으로 임시파일이 삭제된다.', NULL, '', 2, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(1702, 'dale.seo', '', '', '2016-02-14 22:02:52', '', 'Joda 라이브러리의 Duration과 Period 비교', '- Duration : DateTime 간 밀리 세컨드 차이\r\n- Period : DateTime 간 필드 간 차이 (months, days, hours...)\r\n\r\n=> 윤달 이런 거 까지 다 따지려면 Period를 쓰는 게 유리할 것 같음\r\n\r\n=========================================================================\r\npublic class DurationTest {\r\n\r\n    @Test\r\n    public void duration() {\r\n        DateTime dateTime1 = new DateTime(2010, 1, 1, 0, 0, 0, 0);\r\n        DateTime dateTime2 = new DateTime(2010, 2, 1, 0, 0, 0, 0);\r\n\r\n        Duration duration = new Duration(dateTime1, dateTime2); // 31일 = 2월 1일 - 1월 1일\r\n\r\n        DateTime dateTime3 = new DateTime(2010, 9, 1, 0, 0, 0, 0);\r\n        DateTime dateTime4 = dateTime3.withDurationAdded(duration, 1); // 10월 2일 = 9월 1일 + 31일\r\n\r\n        System.out.println(dateTime4);\r\n\r\n        assertEquals(10, dateTime4.getMonthOfYear());\r\n        assertEquals(2, dateTime4.getDayOfMonth());\r\n    }\r\n\r\n}\r\n\r\n\r\n=========================================================================\r\npublic class PeriodTest {\r\n\r\n    @Test\r\n    public void period() {\r\n        DateTime dateTime1 = new DateTime(2011, 2, 1, 0, 0, 0, 0);\r\n        DateTime dateTime2 = new DateTime(2011, 3, 1, 0, 0, 0, 0);\r\n\r\n        Period period = new Period(dateTime1, dateTime2); // 한 달 = 3월 1일 - 2월 1일\r\n\r\n        DateTime dateTime3 = new DateTime(2012, 2, 1, 0, 0, 0, 0);\r\n        DateTime dateTime4 = dateTime3.withPeriodAdded(period, 1); // 3월 1일 = 2월 1일 + 한 달\r\n\r\n        System.out.println(dateTime4);\r\n\r\n        assertEquals(3, dateTime4.getMonthOfYear());\r\n        assertEquals(1, dateTime4.getDayOfMonth());\r\n    }\r\n\r\n}', NULL, '', 2, 0),
(1703, 'dale.seo', '', '', '2016-02-15 11:02:32', '', 'Jackson2 Include 어노테이션 설정법 변경', 'NULL 아닌 필드만 Serialize 하려면 다음과 같이 도메인 클래스에 설정해줘야 한다.\r\n\r\n# Jackson 1.9\r\n\r\n@JsonSerialize(include=JsonSerialize.Inclusion.NON_NULL)\r\n\r\n# Jackson 2.x\r\n\r\n@JsonInclude(JsonInclude.Include.NON_NULL)', NULL, '', 10, 0),
(1704, 'dale.seo', '', '', '2016-02-15 14:31:59', '', '$JAVA_HOME 환경변수 세팅', 'http://www.mkyong.com/java/how-to-set-java_home-environment-variable-on-mac-os-x/', NULL, '', 6, 0),
(1705, 'dale.seo', '', '', '2016-02-15 14:45:08', '', 'Jackson2 ObjectMapper 글로벌 세팅 변경', '# Deserialize 시 알 수 없는 필드는 무시 (도메인 클래스에 맵핑되는 필드가 없어도 에러 발생하지 않음)\r\n// jackson 1.9 and before\r\nobjectMapper.configure(DeserializationConfig.Feature.FAIL_ON_UNKNOWN_PROPERTIES, false);\r\n// or jackson 2.0\r\nobjectMapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\r\n또는\r\nobjectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\r\n', NULL, '', 11, 0),
(1706, 'dale.seo', '', '', '2016-02-15 22:11:14', '', 'Maven 프로젝트 기본 디렉토리 구조 (Standard Directory Layout)', 'http://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html\r\n\r\n- src\r\n-- main\r\n--- java\r\n--- resources\r\n-- test\r\n--- java\r\n--- resources\r\n- target', NULL, '', 5, 0),
(1955, 'dale.seo', '', '', '2016-05-16 16:57:13', '', 'TemporaryFolder', 'http://junit.org/junit4/javadoc/latest/org/junit/rules/TemporaryFolder.html\r\nhttps://garygregory.wordpress.com/2010/01/20/junit-tip-use-rules-to-manage-temporary-files-and-folders/\r\n\r\n테스트할 때만 잠깐 사용되는 임시 파일이나 디렉토리를 생성하고 소멸할 때 사용한다.\r\n\r\n=============================================================================\r\n/**\r\n * @author 고강민, SK플래닛\r\n */\r\npublic class FileBasedConversionRuleRepositoryTest {\r\n\r\n	@Rule\r\n	public TemporaryFolder folder = new TemporaryFolder();\r\n	private File ruleFile;\r\n\r\n	/**\r\n	 *\r\n	 */\r\n	@Before\r\n	public void setup() throws IOException {\r\n		ruleFile = folder.newFile("rule.properties");\r\n\r\n		FileWriter writer = new FileWriter(ruleFile);\r\n		writer.write("A0000=B0000");\r\n		writer.flush();\r\n		writer.close();\r\n	}', NULL, '', 4, 0),
(1708, 'dale.seo', '', '', '2016-02-16 10:07:48', '', 'Scanner 사용 시 주의할 점', 'http://stackoverflow.com/questions/13102045/skipping-nextline-after-using-next-nextint-or-other-nextfoo-methods\r\n\r\nnextInt()나 nextDouble()을 호출 후 nextLine()을 호출하면, 새로운 입력을 받지 않고, "\\n"를 리턴하므로 주의한다.\r\nnextLine()을 2번 호출해주면 된다.\r\n\r\n\r\n================================================================\r\n   System.out.print("Insert a number: ");\r\n   int number = input.nextInt();\r\n   input.nextLine(); // This line you have to add (It consumes the \\n character)\r\n   System.out.print("Text1: ");\r\n   String text1 = input.nextLine();\r\n   System.out.print("Text2: ");\r\n   String text2 = input.nextLine();\r\n', NULL, '', 4, 0),
(1709, 'dale.seo', '', '', '2016-02-16 22:28:04', '', 'Interator Pattern - 이터레이터 패턴', '- 클라이언트가 서버의 구현에 의존하지 않고 루프를 돌 수 있게 함\r\n- 서버의 구현이 바뀌더라도 interator만 제대로 반환하면 클라이언트의 루프문을 바꿀 필요 없음', NULL, '', 5, 0),
(1710, 'dale.seo', '', '', '2016-02-16 22:39:28', '', 'Spring MVC, Spring Security 통합 가이드', 'http://docs.spring.io/spring-security/site/docs/current/guides/html5//hellomvc.html', NULL, '', 6, 0),
(1711, 'dale.seo', '', '', '2016-02-16 22:54:00', '', 'Spring Security 설정 가이드', 'http://docs.spring.io/spring-security/site/docs/current/guides/html5/form.html', NULL, '', 6, 0),
(1712, 'dale.seo', '', '', '2016-02-17 11:23:37', '', 'Spring Boot 에서 테스트 작성 방법', 'https://spring.io/blog/2016/04/15/testing-improvements-in-spring-boot-1-4\r\n\r\n정말 편리해 졌음', NULL, '', 6, 0),
(1713, 'dale.seo', '', '', '2016-02-17 22:13:17', '', 'Adapter Pattern - 어댑터 패턴', '- 이미 제공되어 있는 것과 필요한 것 사이의 차이를 없애주는 디자인 패턴\r\n- 서로 다른 두 개의 인터페이스(API) 사이를 연결해주는 디자인 패턴\r\n- Wrapper 패턴으로 불리기도 함\r\n- 소프트웨어를 버전업할 때 많이 사용 됨\r\n- 신 버전만 유지 보수를 하고 싶을 때 신 버전을 Adaptee 역할로 하고, 구 버전을 Target 역할로 한다.\r\n그리고 신 버전의 클래스를 사용해서 구 버전의 메소드를 구현하는 Adapter 역할의 클래스를 만든다.', NULL, '', 9, 0),
(1714, 'dale.seo', '', '', '2016-02-18 17:13:38', '', 'Spring Security 3 -> 4 마이그레이션 가이드', 'http://docs.spring.io/spring-security/site/migrate/current/3-to-4/html5/migrate-3-to-4-xml.html\r\n\r\nSP Admin 버전업할 때 매우 유용했었음', NULL, '', 5, 0),
(1715, 'dale.seo', '', '', '2016-02-22 22:18:26', '', 'LSP 원칙 (The Liskov Substitution Principle)', '상위 클래스형 변수에 하위 클래스의 어떠한 인스턴스를 대입해도 제대로 작동할 수 있도록 한다.', NULL, '', 2, 0),
(1716, 'dale.seo', '', '', '2016-02-23 14:41:31', '', 'JMH - Java Microbenchmark Harness', '자바 성능측정 라이브러리\r\n\r\nhttp://openjdk.java.net/projects/code-tools/jmh/', NULL, '', 2, 0),
(1717, 'dale.seo', '', '', '2016-02-23 16:53:55', '', '요청 파라미터 수정 또는 추가하는 방법', 'http://www.ocpsoft.org/opensource/how-to-safely-add-modify-servlet-request-parameter-values/', NULL, '', 2, 0),
(1718, 'dale.seo', '', '', '2016-02-23 17:55:41', '', 'RestTemplate의 RequestFactory 설정', '디폴트로 SimpleClientHttpRequestFactory를 사용하는데 connect timeout과 read timeout이 -1(무한대)여서 연동 장애 발생 시 전면 장애로 이어질 수 있다.\r\n\r\n# 용도\r\n - connect/read timeout 설정\r\n - 인터셉터로 요청/응답 전문 로깅 시 stream이 모두 consume 되는 것 방지\r\n\r\n\r\n##########################################################\r\n		RestTemplate restTemplate = new RestTemplate();\r\n		SimpleClientHttpRequestFactory simpleClientHttpRequestFactory = new SimpleClientHttpRequestFactory();\r\n		simpleClientHttpRequestFactory.setConnectTimeout(30000);\r\n		simpleClientHttpRequestFactory.setReadTimeout(2000);\r\n		restTemplate.setRequestFactory(new BufferingClientHttpRequestFactory(simpleClientHttpRequestFactory));', NULL, '', 3, 0),
(1719, 'dale.seo', '', '', '2016-02-23 18:00:00', '', 'RestTemplate의 UriTemplateHandler 설정', 'Base URL을 필요한 경우 매우 유용한다.\r\n\r\n# 설정 : DefaultUriTemplateHandler를 통해 baseUrl 세팅\r\n		RestTemplate restTemplate = new RestTemplate();\r\n		DefaultUriTemplateHandler uriTemplateHandler = new DefaultUriTemplateHandler();\r\n		uriTemplateHandler.setBaseUrl("http://jsonplaceholder.typicode.com");\r\n		restTemplate.setUriTemplateHandler(uriTemplateHandler);\r\n\r\n# 사용 : Base URL 뒤에만 넘기면 됨 ("/" 반드시 필요)\r\n		String res = restTemplate.getForObject("/users", String.class, 1);', NULL, '', 6, 0),
(1720, 'dale.seo', '', '', '2016-02-23 21:17:06', '', 'Factory Method Pattern - 팩토리 매서드 패턴', 'http://dextto.tistory.com/140\r\n\r\n인스턴스를 생성하는 공장을 Template Method 패턴으로 구성한 것.\r\n- 인스턴스를 만드는 방법을 상위 클래스 측에서 결정하지만 구체적으로 어떤 클래스를 사용할지는 하위 클래스에서 결정.\r\n- 클라이언트에서는 어떤 구현 클래스 생성될지 관심같지 않고, 팩토리 클래스에게 객체 생성을 완전이 위임함.\r\n- 클라이언트는 구현 클래스에 대해서 의존성을 가지지 않음. 객체 생성 관련 로직이 변경되면 팩토리 클래스들만 변경하면 됨.\r\n\r\n의도\r\n객체를 생성하기 위해 인터페이스를 정의하지만, 어떤 클래스의 객체를 생성할 지에 대해서는 하위 클래스에서 결정 ==> 클래스 상속을 이용함\r\n\r\n활용 예\r\n-. 생성할 객체 타입을 예측할 수 없을 때 ==> 부모 클래스 타입을 이용\r\n-. 생성할 객체의 명세를 하위 클래스에서 정의하고자 하는 경우\r\n-. 객체 생성의 책임을 하위 클래스에 위임시키고 어느 하위 클래스가 위임했는지에 대한 정보를 은닉하고자 하는 경우 ', NULL, '', 17, 0),
(1721, 'dale.seo', '', '', '2016-02-23 22:42:10', '', 'Thread Unsafe한 Singleton 만드는 실수', '처음부터 private static 필드를 초기화 하지 않고, public static 메서드에서 null 체크 후 초기화할 때는\r\n꼭 synchronized를 사용하여 Thread Safe하게 만들어줘야 한다.\r\n\r\n\r\npublic class ThreadUnsafeSingleton {\r\n\r\n    private static ThreadUnsafeSingleton instance = null;\r\n\r\n    private ThreadUnsafeSingleton() {\r\n        System.out.println("인스턴스를 생성했습니다.");\r\n        slowdown();\r\n    }\r\n\r\n    private void slowdown() {\r\n        try {\r\n            Thread.sleep(2000);\r\n        } catch (InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static ThreadUnsafeSingleton getInstance() {\r\n        if (instance == null) {\r\n            instance = new ThreadUnsafeSingleton();\r\n        }\r\n        return instance;\r\n    }\r\n\r\n    /*\r\n    public synchronized static ThreadUnsafeSingleton getInstance() {\r\n        if (instance == null) {\r\n            instance = new ThreadUnsafeSingleton();\r\n        }\r\n        return instance;\r\n    }\r\n    */\r\n\r\n}\r\n', NULL, '', 2, 0),
(1722, 'dale.seo', '', '', '2016-02-24 10:45:22', '', '삽입 정렬 최고 구현', '# 삽입 정렬 알고리즘\r\n - swap 조차 필요없는 최고의 알고리즘 구현 성공\r\n - 각 iteration에서 추가된 toInsert 변수에 저장해 두고, 이 값으로 계속 비교할 때 재활용\r\n - toInsert 보다 큰 값이 앞에 있으면, 현재 위치로 앞의 값을 복사\r\n - toInsert 보다 작은 값이 앞에 있으면, 현재 위치에 toInsert를 넣기만 하면 됨\r\n\r\n	public static void insertionSort(int[] A){\r\n		for(int i = 1; i < A.length; i++){\r\n			int toInsert = A[i];\r\n			int current = i;\r\n			while(current > 0 && A[current - 1] > toInsert){\r\n				A[current] = A[current - 1];\r\n				current--;\r\n			}\r\n			A[current] = toInsert;\r\n		}\r\n		printArray(A);\r\n	}\r\n\r\n\r\n\r\n# 삽입 정렬 알고리즘\r\n - 각 iteration 마다, 정렬 범위를 한 칸씩 늘려나간다고 생각하면 편하다ㅏ.\r\n - 한 칸 밖에 없을 때는, 이미 정렬된 것이나 마찬가지므로, 데이터가 2개일 때(index = 1)부터 시작한다.\r\n - iteration 에서 추가된 맨 뒤의 값과 그 앞에 있는 모든 값들을 역순으로 비교하면서 swap해 나간다.\r\n - 그 앞에 있는 모든 값들은 이미 전 iteration 들에서 정렬이 되어진 상태이므로, swap할 필요가 없는 시점(더 작은 값을 만나면) break가 가능하다.\r\n - break를 편하게 하려면 안 쪽 루프는 for 문 보다는 while 문이 유리하다.\r\n\r\npublic class InsertionSortPart2 {\r\n\r\n	public static void insertionSortPart2(int[] ar) {\r\n		for (int i = 1; i < ar.length; i++) {\r\n			int j = i;\r\n			while (j > 0 && ar[j - 1] > ar[j]) {\r\n				// System.out.printf("%s vs %s\\n", j, i);\r\n				swap(ar, j, j - 1);\r\n				j--;\r\n			}\r\n			printArray(ar);\r\n		}\r\n	}\r\n\r\n\r\n	private static void swap(int[] ar, int i, int j) {\r\n		// System.out.printf("- swap [%s] at %s and [%s] at %s\\n", ar[i], i, ar[j], j);\r\n		int tmp = ar[i];\r\n		ar[i] = ar[j];\r\n		ar[j] = tmp;\r\n	}\r\n\r\n	public static void main(String[] args) {\r\n		Scanner in = new Scanner(System.in);\r\n		int s = in.nextInt();\r\n		int[] ar = new int[s];\r\n		for(int i=0;i<s;i++){\r\n			ar[i]=in.nextInt();\r\n		}\r\n		insertionSortPart2(ar);\r\n\r\n	}\r\n\r\n	private static void printArray(int[] ar) {\r\n		for(int n: ar){\r\n			System.out.print(n+" ");\r\n		}\r\n		System.out.println("");\r\n	}\r\n\r\n	@Test\r\n	public void test() {\r\n		// insertionSortPart2(new int[]{1, 4, 3, 5, 6, 2});\r\n		insertionSortPart2(new int[]{9, 8, 6, 7, 3, 5, 4, 1, 2});\r\n	}\r\n\r\n}', NULL, '', 16, 0),
(1723, 'dale.seo', '', '', '2016-02-24 18:03:44', '', '빈 객체를 맵으로 바꾸는 여러가지 방법 정리', 'http://www.leveluplunch.com/java/examples/convert-object-bean-properties-map-key-value/', NULL, '', 2, 0),
(1724, 'dale.seo', '', '', '2016-02-24 22:50:54', '', 'Prototype Pattern - 프로토타입 패턴', '클래스로부터 인스턴스를 만드는 것이 아니고, 인스턴스에서 새로운 인스턴스를 만드는 패턴\r\n\r\n보통 Cloneable 인터페이스를 구현하고 Object의 clone 메서드를 사용한다.', NULL, '', 2, 0),
(1725, 'dale.seo', '', '', '2016-02-25 22:50:16', '', 'Builder Pattern - 빌더 패턴', '- 구조를 가진 인스턴스를 쌓아 올림', NULL, '', 5, 0),
(1726, 'dale.seo', '', '', '2016-02-26 10:34:27', '', 'Quick Sort 퀵소트 구현', 'https://en.wikipedia.org/wiki/Quicksort#Algorithm\r\n\r\n# 배열을 이용한 In-place 구현\r\n- 제일 뒤의 값을 pivot으로 정하고, 배열의 원소들을 하나씩 체크하면서 pivot보다 작으면 pivot index와 swap하고 pivot index를 증가시킨다. (parition 메소드)\r\n- pivot index를 기준으로 앞 뒤 서브 배열을 재귀적으로 quick sort 한다. (quick sort 메소드)\r\n\r\npublic class QuickSort3InPlace {\r\n\r\n	public static void quickSort(int[] arr, int lo, int hi) {\r\n		if (lo >= hi) {\r\n			return;\r\n		}\r\n		int pivotIdx = partition(arr, lo, hi);\r\n		printSubArray(arr);\r\n		quickSort(arr, lo, pivotIdx - 1);\r\n		quickSort(arr, pivotIdx + 1, hi);\r\n	}\r\n\r\n	private static int partition(int[] arr, int lo, int hi) {\r\n		int pivot = arr[hi];\r\n		int pivotIdx = lo;\r\n		for (int i = lo; i < hi; i++) {\r\n			if (arr[i] < pivot) {\r\n				swap(arr, pivotIdx++, i);\r\n			}\r\n		}\r\n		swap(arr, pivotIdx, hi);\r\n		return pivotIdx;\r\n	}\r\n\r\n	private static void swap(int[] arr, int i, int j) {\r\n		int tmp = arr[i];\r\n		arr[i] = arr[j];\r\n		arr[j] = tmp;\r\n	}\r\n\r\n	private static void printSubArray(int[] arr) {\r\n		for (int i : arr) {\r\n			System.out.print(i + " ");\r\n		}\r\n		System.out.println();\r\n	}\r\n\r\n	public static void main(String[] args) {\r\n		Scanner input = new Scanner(System.in);\r\n		int n = input.nextInt();\r\n		int[] array = new int[n];\r\n		for (int i = 0; i < n; i++) {\r\n			array[i] = input.nextInt();\r\n		}\r\n		quickSort(array, 0, n - 1);\r\n	}\r\n\r\n	@Test\r\n	public void testQuickSort() {\r\n		int[] array = new int[]{1, 3, 9, 8, 2, 7, 5};\r\n		quickSort(array, 0, array.length - 1);\r\n		int[] expected = new int[]{1, 2, 3, 5, 7, 8, 9};\r\n		assertArrayEquals(expected, array);\r\n	}\r\n\r\n	@Test\r\n	public void testPartiton() {\r\n		int[] array = new int[]{1, 3, 9, 8, 2, 7, 5};\r\n		int pivotIdx = partition(array, 0, array.length - 1);\r\n		assertEquals(3, pivotIdx);\r\n	}\r\n\r\n}\r\n\r\n\r\n# 리스트를 이용한 구현\r\n- 제일 앞의 값을 pivot으로 정하고, pivot보다 작은 값들을 pivot 앞에(leftArr) pivot보다 큰 값들을 뒤로(rightArr) 위치시킨다.\r\n- 이 leftArr와 rightArr에 대해서, 또 각각 pivot을 제일 앞 값으로 정하고, Sub Array에 값이 하나거나 없을 때 까지 재귀적으로 반복한다.\r\n\r\npublic class QuickListSorter {\r\n\r\n	public static List<Integer> sort(List<Integer> list) {\r\n		System.out.println(list);\r\n\r\n		if (list.size() <= 1) {\r\n			return list;\r\n		}\r\n\r\n		Integer pivot = list.get(0);\r\n		List<Integer> lower = new ArrayList<>();\r\n		List<Integer> higher = new ArrayList<>();\r\n\r\n		for (int i = 1; i < list.size(); i++) {\r\n			if (list.get(i) < pivot) {\r\n				lower.add(list.get(i));\r\n			} else {\r\n				higher.add(list.get(i));\r\n			}\r\n		}\r\n\r\n		List<Integer> sortedList = sort(lower);\r\n		sortedList.add(pivot);\r\n		sortedList.addAll(sort(higher));\r\n\r\n		return sortedList;\r\n	}\r\n	\r\n}\r\n\r\n\r\n# 배열을 이용한 구현\r\npublic class QuickSorter {\r\n\r\n	public static void sort(int[] arr) {\r\n		sort(arr, 0, arr.length - 1);\r\n	}\r\n	\r\n	public static void sort(int[] arr, int start, int end) {\r\n		System.out.printf("-call sort(%s, %d, %d);\\n", Arrays.toString(arr), start, end);\r\n		if (start >= end) {\r\n			return;\r\n		}\r\n		\r\n		int pivot = start;\r\n		for (int i = start + 1; i <= end; i++) {\r\n			if (arr[start] > arr[i]) {\r\n				swap(arr, ++pivot, i);\r\n			}\r\n		}\r\n		swap(arr, start, pivot);\r\n		sort(arr, start, pivot - 1);\r\n		sort(arr, pivot + 1, end);\r\n	}\r\n	\r\n	public static void swap(int[] arr, int i, int j) {\r\n		SortUtils.swap(arr, i, j);\r\n	}\r\n	\r\n}', NULL, '', 6, 0),
(1727, 'dale.seo', '', '', '2016-02-26 10:40:41', '', 'Git 작업 취소', 'http://ecogeo.tistory.com/276\r\n\r\n개별파일 원복\r\ngit checkout  -- <파일> : 워킹트리의 수정된 파일을 index에 있는 것으로 원복\r\ngit checkout HEAD -- <파일명> : 워킹트리의 수정된 파일을 HEAD에 있는 것으로 원복(이 경우 --는 생략가능)\r\ngit checkout FETCH_HEAD -- <파일명> : 워킹트리의 수정된 파일의 내용을 FETCH_HEAD에 있는 것으로 원복? merge?(이 경우 --는 생략가능)\r\n\r\nindex 추가 취소\r\ngit reset -- <파일명> : 해당 파일을 index에 추가한 것을 취소(unstage). 워킹트리의 변경내용은 보존됨. (--mixed 가 default)\r\ngit reset HEAD <파일명> : 위와 동일\r\n\r\ncommit 취소\r\ngit reset HEAD^ : 최종 커밋을 취소. 워킹트리는 보존됨. (커밋은 했으나 push하지 않은 경우 유용)\r\ngit reset HEAD~2 : 마지막 2개의 커밋을 취소. 워킹트리는 보존됨.\r\ngit reset --hard HEAD~2 : 마지막 2개의 커밋을 취소. index 및 워킹트리 모두 원복됨.\r\ngit reset --hard ORIG_HEAD : 머지한 것을 이미 커밋했을 때,  그 커밋을 취소. (잘못된 머지를 이미 커밋한 경우 유용)\r\ngit revert HEAD : HEAD에서 변경한 내역을 취소하는 새로운 커밋 발행(undo commit). (커밋을 이미 push 해버린 경우 유용)\r\n\r\n워킹트리 전체 원복\r\ngit reset --hard HEAD : 워킹트리 전체를 마지막 커밋 상태로 되돌림. 마지막 커밋이후의 워킹트리와 index의 수정사항 모두 사라짐. \r\n                                  (변경을 커밋하지 않았다면 유용)\r\ngit checkout HEAD . : ??? 워킹트리의 모든 수정된 파일의 내용을 HEAD로 원복.\r\ngit checkout -f : 변경된 파일들을 HEAD로 모두 원복(아직 커밋하지 않은 워킹트리와 index 의 수정사항 모두 사라짐. 신규추가 파일 제외)\r\n\r\n\r\n* 참조 : reset 옵션\r\n--soft : index 보존, 워킹트리 보존. 즉 모두 보존.\r\n--mixed : index 취소, 워킹트리만 보존 (기본 옵션)\r\n--hard : index 취소, 워킹트리 취소. 즉 모두 취소.\r\n\r\n* untracked 파일 제거\r\ngit clean -f\r\ngit clean -fd : 디렉토리까지 제거', NULL, '', 25, 0),
(1728, 'dale.seo', '', '', '2016-02-26 14:07:52', '', 'Spring Boot 사용 시 터미널 로그에 색깔 입히기', 'http://stackoverflow.com/questions/28783832/getting-spring-boot-color-console-logging-working-within-intellij\r\n\r\n# VM 옵션\r\n\r\n-Dspring.output.ansi.enabled=ALWAYS\r\n\r\n# 설정 파일 (application.yaml)\r\n```\r\nspring:\r\n  output:\r\n      ansi:\r\n        enabled: ALWAYS\r\n```\r\n', NULL, '', 9, 0),
(1729, 'dale.seo', '', '', '2016-02-26 23:13:15', '', 'Abstract Factory Pattern - 추상 팩토리 패턴', '- 추상적인 부품을 조합해서 추상적인 제품을 만듬\r\n- 클라이언트에서는 구체적인 부품이 무엇인지 몰라도 되며, 추상 팩토리 구현체만 바꾸면 다른 제품을 만들 수 있음\r\n', NULL, '', 3, 0),
(1730, 'dale.seo', '', '', '2016-02-26 23:18:40', '', '자바에서 인스턴스를 만드는 3가지 방법', '1. new : 생성자\r\n\r\nSomething obj = new Something();\r\n\r\n2. clone : 생성자 호출 안 함\r\n\r\nSomething obj = (Something) clone();\r\n\r\n3. newInstance : 내부적으로 인자 없는 생성자 호출\r\n\r\nSomething obj = someObj.getClass().newInstance();', NULL, '', 2, 0),
(1731, 'dale.seo', '', '', '2016-02-27 11:06:02', '', 'Maven Compiler Plugin의 기본 컴파일러 버젼 바꾸기', 'https://maven.apache.org/plugins/maven-compiler-plugin/\r\nhttps://maven.apache.org/plugins/maven-compiler-plugin/examples/set-compiler-source-and-target.html\r\n\r\n디폴트 컴파일러 버전이 1.5이므로 최신 버전을 사용하려면 source와 target 설정을 해줘야 한다.\r\n\r\n\r\n    <plugins>\r\n      <plugin>\r\n        <groupId>org.apache.maven.plugins</groupId>\r\n        <artifactId>maven-compiler-plugin</artifactId>\r\n        <version>3.5.1</version>\r\n        <configuration>\r\n          <source>1.8</source>\r\n          <target>1.8</target>\r\n        </configuration>\r\n      </plugin>\r\n    </plugins>', NULL, '', 4, 0),
(1732, 'dale.seo', '', '', '2016-02-27 12:19:42', '', 'Spring Security Reference', '공식 레퍼런스 문서\r\n\r\nhttp://docs.spring.io/spring-security/site/docs/current/reference/html/', NULL, '', 3, 0),
(1733, 'dale.seo', '', '', '2016-02-28 18:17:12', '', 'Spring Security 4 기본 설정 방법 (자바 설정)', 'http://docs.spring.io/spring-security/site/docs/current/reference/html/jc.html\r\n\r\n# pom.xml\r\n	<properties>\r\n		<spring.version>4.2.5.RELEASE</spring.version>\r\n		<spring.security.version>4.0.4.RELEASE</spring.security.version>\r\n	</properties>\r\n\r\n		<!-- Spring Security -->\r\n		<dependency>\r\n			<groupId>org.springframework.security</groupId>\r\n			<artifactId>spring-security-web</artifactId>\r\n			<version>${spring.security.version}</version>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.springframework.security</groupId>\r\n			<artifactId>spring-security-config</artifactId>\r\n			<version>${spring.security.version}</version>\r\n		</dependency>\r\n\r\n# SecurityConfig  추가\r\n - 실절적인 Spring Security 자바 설정 파일\r\n - @EnableWebSecurity이 @Configuration을 확장하고 있으므로 @Configuration 중복 선언 안 해도 되긴 함\r\n@Configuration\r\n@EnableWebSecurity\r\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\r\n\r\n    @Autowired\r\n    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {\r\n        auth.inMemoryAuthentication()\r\n                .withUser("user").password("password").roles("USER");\r\n    }\r\n\r\n}\r\n\r\n# ApplicationInitializer 추가\r\n - web.xml 대신 springSecurityFilterChain 추가\r\n - 기존에 ApplicationInitializer 있어도 상관없음 \r\npublic class SecurityInitializer extends AbstractSecurityWebApplicationInitializer {\r\n}', NULL, '', 19, 0),
(1734, 'dale.seo', '', '', '2016-02-28 18:38:11', '', 'Spring Security 4 Login From 설정하기', 'http://docs.spring.io/spring-security/site/docs/current/reference/html/jc.html#jc-form', NULL, '', 5, 0),
(1735, 'dale.seo', '', '', '2016-02-28 18:39:34', '', 'Spring Security 4 - URL 별 접근 설정하기', 'http://docs.spring.io/spring-security/site/docs/current/reference/html/jc.html#authorize-requests', NULL, '', 4, 0),
(1736, 'dale.seo', '', '', '2016-02-28 18:48:44', '', 'Spring Security 4 - Logout 설정', 'http://docs.spring.io/spring-security/site/docs/current/reference/html/jc.html#jc-logout\r\n\r\n디폴트 값은 아래 참조\r\nhttp://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/config/annotation/web/configurers/LogoutConfigurer.html\r\n\r\nREST API는 Logout 성공 후 디폴트로 아래 핸들러를 타게 됨 (200 응답)\r\nhttp://docs.spring.io/spring-security/site/docs/4.0.3.CI-SNAPSHOT/apidocs/org/springframework/security/web/authentication/logout/HttpStatusReturningLogoutSuccessHandler.html', NULL, '', 8, 0),
(1737, 'dale.seo', '', '', '2016-02-28 18:59:44', '', 'Spring Security 4 - Authentication(인증) 설정', 'http://docs.spring.io/spring-security/site/docs/current/reference/html/jc.html#jc-authentication\r\n\r\nImMemory, JDBC, LDAP 등 다양한 인증 옵션 제공', NULL, '', 8, 0),
(1738, 'dale.seo', '', '', '2016-02-28 19:04:57', '', 'Spring Security 4 - Web과 Rest 동시에 설정하기', 'http://docs.spring.io/spring-security/site/docs/current/reference/html/jc.html#multiple-httpsecurity', NULL, '', 4, 0),
(1739, 'dale.seo', '', '', '2016-02-29 22:25:54', '', 'Bridge Pattern - 브릿지 패턴', '기능의클래스 계층과 구현의 클래스 계층 사이에 다리를 놓는 패턴\r\n\r\n- 기능의 클래스 계층 : 하위 클래스에서 상위 클래스의 기능을 추가\r\n- 구현의 클래스 계층 : 하위 클래스에서 상위 클래스의 API를 구현\r\n\r\n하나의 클래스 계층에 기능의 클래스 계층과 구현의 클래스 계층이 혼재되어 있으면 확장이 어렵다.\r\n기능 확장은 기능 확장대로 가능해야 하고, 다양한 구현 또한 가능해야 한다.\r\n두 개의 클래스 계층을 연결한 구조에 대한 패턴이기 때문에 ***Bridge 같은 클래스가 있는 건 아니다.', NULL, '', 5, 0),
(1740, 'dale.seo', '', '', '2016-03-01 10:06:53', '', 'Spring Security 4 - Method Security', 'http://docs.spring.io/spring-security/site/docs/current/reference/html/jc.html#jc-method\r\n\r\n서비스 레이어에서 자바 메서드에 어노테이션을 선언하여 인가 설정을 할 수 있음.\r\n서버 단에서 보안 적용을 할 수 있어서 화면 단에서 버튼 안 보이는 방법보다 훨씬 좋음.', NULL, '', 4, 0),
(1741, 'dale.seo', '', '', '2016-03-01 12:10:53', '', 'Spring Security 로그아웃 버튼 가장 간편하게 만들기', '- 반드시 post로 넘겨야함\r\n- scrf 필드도 같이 넘겨야 하는게 번거로운데 태그 라이브러리 쓰면 간단하게 해결됨\r\n\r\n\r\n<%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>\r\n\r\n<form action="logout" method="post">\r\n	<sec:csrfInput />\r\n	<input type="submit" value="Logout"/>\r\n</form>', NULL, '', 4, 0),
(1742, 'dale.seo', '', '', '2016-03-01 12:35:52', '', '빈 초기화 후 추가 작업 하기', 'InitializingBean이나 BeanPostProcessor를 구현하면 될 것 같음\r\n\r\nInitializingBean이 샘플에 주로 보임\r\n\r\nLocal에서 In-memory DB 사용 시 데이터 초기화 때 사용하면 좋을 것 같음\r\n', NULL, '', 6, 0),
(1743, 'dale.seo', '', '', '2016-03-01 17:16:39', '', 'Spring Security 4 - HttpStatusReturningLogoutSuccessHandler', 'https://spring.io/blog/2015/07/23/spring-security-4-0-2-released\r\n\r\nREST API에 Spring Security 사용할  때 유용할 듯\r\n\r\n\r\nHttpStatusReturningLogoutSuccessHandler\r\n\r\nSpring Security 4.0.2 includes a HttpStatusReturningLogoutSuccessHandler which allows returning an HTTP status code when the user has successfully logged out making it easy to signal to a REST client authentication was successful.\r\n\r\nYou an use it with the following Java Based Configuration:\r\n\r\n\r\nhttp\r\n    .logout()\r\n        .logoutSuccessHandler(new HttpStatusReturningLogoutSuccessHandler())\r\nIf you are using XML Namespace configuration, you can use the logout@success-handler-ref :\r\n\r\n<b:bean id="successHandler"\r\n    class="org.springframework.security.web.authentication.logout.HttpStatusReturningLogoutSuccessHandler"/>\r\n<http ...>\r\n    <logout success-handler-ref="successHandler"/>\r\n</http>', NULL, '', 4, 0),
(1744, 'dale.seo', '', '', '2016-03-01 17:17:31', '', 'Spring Security 4 테스트 방법', 'https://spring.io/blog/2015/07/23/spring-security-4-0-2-released\r\n\r\nMinor Improvements to Spring Security Test\r\n\r\nPreviously, Spring Security’s test support would fail if there was no ApplicationContext. This was inconvenient if you were just wanting to run tests as a specific user. What’s more it was inconvenient to disable other features (i.e. loading an ApplicationContext) of Spring Test. The updates in Spring Security 4.0.2 allow running tests as a specific user with:\r\n\r\n@SecurityTestExecutionListeners\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\npublic class MyTests {\r\n\r\n    @WithMockUser\r\n    @Test\r\n    public void runsAsUserWithNoApplicationContext() {\r\n\r\n    }\r\n}\r\nThe SecurityTestExecutionListeners is a meta annotation that signals to Spring’s Test Framework to only use Spring Security related TestExecutionListeners and not to try loading the ApplicationContext.', NULL, '', 7, 0),
(1745, 'dale.seo', '', '', '2016-03-01 18:30:45', '', 'Spring Security 4 - 기본 컴포넌트', 'http://docs.spring.io/spring-security/site/docs/current/reference/html/technical-overview.html\r\n\r\nSecurityContextHolder, to provide access to the SecurityContext.\r\nSecurityContext, to hold the Authentication and possibly request-specific security information.\r\nAuthentication, to represent the principal in a Spring Security-specific manner.\r\nGrantedAuthority, to reflect the application-wide permissions granted to a principal.\r\nUserDetails, to provide the necessary information to build an Authentication object from your application’s DAOs or other source of security data.\r\nUserDetailsService, to create a UserDetails when passed in a String-based username (or certificate ID or the like).', NULL, '', 12, 0),
(1746, 'dale.seo', '', '', '2016-03-01 20:10:56', '', 'Spring Security 4 - 다국어 지원', 'http://docs.spring.io/spring-security/site/docs/current/reference/html/technical-overview.html#localization\r\n\r\n<bean id="messageSource"\r\n	class="org.springframework.context.support.ReloadableResourceBundleMessageSource">\r\n<property name="basename" value="classpath:org/springframework/security/messages"/>\r\n</bean>', NULL, '', 1, 0),
(1747, 'dale.seo', '', '', '2016-03-02 22:18:46', '', 'Composite Pattern - 컴포지트 패턴', '- 그릇과 내용물을 동일시하고 재귀적인 구조를 형성하는 패턴\r\n# 구성\r\n- 그릇 : Composite\r\n- 내용물 : Leaf\r\n- 위 둘을 동일시 해주는 인터페이스 또는 추상 클래스 : Component', NULL, '', 4, 0),
(1748, 'dale.seo', '', '', '2016-03-03 09:31:45', '', 'Next lexicographical permutation algorithm', 'https://www.nayuki.io/page/next-lexicographical-permutation-algorithm\r\n\r\n\r\n\r\nFind largest index i such that array[i − 1] < array[i].\r\n\r\nFind largest index j such that j ≥ i and array[j] > array[i − 1].\r\n\r\nSwap array[j] and array[i − 1].\r\n\r\nReverse the suffix starting at array[i].', NULL, '', 3, 0),
(1749, 'dale.seo', '', '', '2016-03-04 15:26:06', '', '세션 유지를 위한 Apache와 Tomcat의 jvmRoute 세팅 맞춰주기', '멀티 인스턴스 Tomcat 환경에서 세션이 끊기지 않으려면,\r\n1) Apache에서 Sticky 모드로 Tomcat에 로드 밸런싱을 해주서, 클리아언트가 세션을 맺고 있는 Tomcat 서버로만 연결되도록 하던가 (worker.properties)\r\n2) Apache에서 Round Roubin 모드를 로드 밸런싱을 하고, Tomcat 인스턴스 간에 Session Replication (Cluster) 설정을 해줘야 한다.\r\n\r\nSP Admin 에서는 1번 방법을 이용해서 세션 유지를 하는데, Tomcat의 server.xml에 다음 설정을 보면...\r\n<Engine name="Catalina" defaultHost="localhost" jvmRoute="sp_admin1">\r\n\r\n이 Tomcat의 server.xml의 jvmRoute라는 값을 Apache의 workers.properties의 설정과 맞춰줘야지만 세션이 끊기지가 않는다.\r\n또한 이 jvmRoute 값은 Session ID 값의 맨 뒤에 달라 붙는다.\r\n아마다 Session ID가 너무 기니까, 맨 뒤에 jvmRoute 값을 보고, Sticky 하게 로드 밸런싱을 해주는 것 같다.', NULL, '', 4, 0),
(1750, 'dale.seo', '', '', '2016-03-04 22:47:49', '', 'Visitor Pattern - 비지터 패턴', '- 데이터 구조르 돌아디면서 처리를 실행\r\n- 데이터 구조와 처리를 분리하여, 구조와 처리자의 부폼으로서의 가치를 높임\r\n- 데이터 구조 : element.aceept(visitor)\r\n- 처리자 : visitor.visit(element)', NULL, '', 4, 0),
(1751, 'dale.seo', '', '', '2016-03-05 15:47:32', '', 'Spring Security 4 Core Services', '# AuthenticationManager 인터페이스\r\n - Authentication authenticate(Authentication authentication) throws AuthenticationException;\r\n - Authentication 객체를 받아 내부적으로 인증하고 UserDetails를 세팅하여 리턴해줌\r\n - 내부적으로 ProviderManager를 통해 다양한(DB, LDAP...) AuthenticationProvider 구현체를 세팅하여 사용함\r\n\r\n# ', NULL, '', 3, 0),
(1752, 'dale.seo', '', '', '2016-03-05 16:07:44', '', 'Spring Security 디폴트 데이터베이스 스키마', 'http://docs.spring.io/spring-security/site/docs/current/reference/html/appendix-schema.html', NULL, '', 3, 0),
(1753, 'dale.seo', '', '', '2016-03-05 16:20:06', '', 'Spring Security - Password Encoding', 'http://docs.spring.io/spring-security/site/docs/current/reference/html/core-services.html#core-services-password-encoding\r\n\r\norg.springframework.security.crypto.bcrypt.BCryptPasswordEncoder를 쓰면 hash 알고리즘에 salt도 랜덤하게 적용되므로 안전함', NULL, '', 4, 0),
(1754, 'dale.seo', '', '', '2016-03-05 17:37:30', '', 'ResourceDatabasePopulator ', 'In-memory DB 데이터 초기화에 쓰임\r\n\r\n	@Bean\r\n	@DependsOn("entityManagerFactory")\r\n	public ResourceDatabasePopulator initDatabase(DataSource dataSource) throws Exception {\r\n		ResourceDatabasePopulator populator = new ResourceDatabasePopulator();\r\n		populator.addScript(new ClassPathResource("data.sql"));\r\n		populator.populate(dataSource.getConnection());\r\n		return populator;\r\n	}', NULL, '', 8, 0),
(1755, 'dale.seo', '', '', '2016-03-07 10:15:51', '', 'Spring Security Custom Login', 'http://syaku.tistory.com/286\r\n\r\nSpring Security의 인터페이스를 구현하여 2개의 모델과 1개의 서비스를 만들고, 자바 설정 한 줄만 추가하면 끝\r\n\r\n# Model\r\n- class User implements UserDetails\r\n- class Role implements GrantedAuthority\r\n\r\n# Service\r\n- class UserService implements UserDetailsService\r\n\r\n# Config\r\n\r\n@EnableWebSecurity\r\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\r\n\r\n    @Autowired\r\n    private UserService userService;\r\n\r\n    @Autowired\r\n    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {\r\n	    auth.userDetailsService(userService);\r\n    }\r\n\r\n}', NULL, '', 13, 0),
(1756, 'dale.seo', '', '', '2016-03-07 11:06:45', '', 'Tomcat의 Connector 설정', 'Connector 설정을 통해 접속할 포트를 설정해준다.\r\n주로 사용하는 Connector는 다음과 같다.\r\n\r\n- HTTP Connector : 별도의 웹서버없이 톰켓으로 웹서버, WAS까지 같이 사용할 때, (주로 로컬) HTTP 포트를 열어준다.\r\n- AJP (Apache JServ Protocol : 아피치 - 톰켓 연동 규격) Connector : Apache 웹서버를 통해서 톰켓이 호출되게 할 때 사용한다. (로컬에서는 거의 안씀)\r\n\r\n\r\n================================================================================\r\n  <Service name="Catalina">\r\n\r\n    <Connector port="8210" maxHttpHeaderSize="8192"\r\n               maxThreads="250" minSpareThreads="100" \r\n               enableLookups="false" redirectPort="8443" acceptCount="100"\r\n               connectionTimeout="20000" disableUploadTimeout="true" URIEncoding="UTF-8"/>\r\n\r\n    <Connector port="8219" protocol="AJP/1.3" redirectPort="8443"\r\n               maxThreads="1000" minSpareThreads="100"\r\n               connectionTimeout="20000"\r\n               acceptCount="100"\r\n               maxPostSize="-1"\r\n               URIEncoding="UTF-8"\r\n               useBodyEncodingForURI="true"\r\n               enableLookups="false" />', NULL, '', 3, 0),
(1757, 'dale.seo', '', '', '2016-03-07 23:16:57', '', 'Chain of Responsibility Pattern', '요구를 처리하는 인스턴스를 사슬 모양으로 나열해두고 요구를 처리할 수 있는지 없는지르 ㄹ순서대로 검사해가는 떠넘기기의 패턴\r\n요청을 처리할 객체를 직접 결정할 수 없는 경우, 복수의 객체를 사슬처럼 연결해두면, 그 객체의 사슬을 차례로 돌아다ㅣ니면서 목적한 객체를 결정할 수 있다.', NULL, '', 2, 0),
(1758, 'dale.seo', '', '', '2016-03-08 09:35:23', '', 'Spring Security - Multiple AuthenticationProvider Setting', 'AuthenticationManagerBuilder 클래스의 authenticationProvider 메서드를 이용하면 여러 개 설정이 가능한다.\r\n\r\n\r\n@EnableWebSecurity\r\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\r\n\r\n	@Autowired\r\n	private CustomAuthenticationProvider customAuthenticationProvider;\r\n\r\n    @Autowired\r\n    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {\r\n	    auth\r\n			    .authenticationProvider(customAuthenticationProvider)\r\n			    .inMemoryAuthentication()\r\n			    .withUser("user").password("password").roles("USER").and()\r\n			    .withUser("admin").password("password").roles("USER", "ADMIN");\r\n    }\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http\r\n                .authorizeRequests()\r\n                .antMatchers("/resources/**", "/").permitAll()\r\n                .antMatchers("/admin/**").hasRole("ADMIN")\r\n                .antMatchers("/toDo", "/toDo/**").access("hasRole(''USER'') or hasRole(''DBA'')")\r\n                .anyRequest().authenticated()\r\n                .and()\r\n                .formLogin().and()\r\n                .httpBasic();\r\n    }\r\n\r\n}\r\n', NULL, '', 11, 0),
(1759, 'dale.seo', '', '', '2016-03-08 22:08:04', '', 'Facade Pattern - 퍼사드 패턴', '- 상호 관련된 많은 클래스를 적절하게 제어하기 위한 창구 클래스\r\n- 클래스를 개별적으로 제어하지 않아도 그 창구에 대해서만 요구하면 됨\r\n- 클라이언트에게 단순하지만 한단계 높은 레벨의 인터페이스를 제공해주고 싶을 때 사용\r\n- 인터페이스 수가 적다는 것은 외부와의 결합이 느슨하게 해서 부품으로써의 재활용을 높여줌', NULL, '', 6, 0),
(1760, 'dale.seo', '', '', '2016-03-08 22:22:20', '', 'Mediator Pattern', '- 조정자, 중개자, 중개인\r\n- 하나의 Mediator(조정자)와 여러 개의 Colleague(동료)로 구성됨\r\n- Mediator와 Colleague는 서로에 대한 참조를 가지고, 어떤 Colleague에서 Mediator를 호출했을 때, Mediator는 다른 Colleague를 호출해 줌\r\n- 다수의 객체 사이를 조정해야 할 경우 사용\r\n- 각각의 객체들이 상호 간 직접 호출하는 것이 아니라, 중간에 중개인을 두고 그 중개인하고만 중앙 통신함.\r\n- 복잡한 GUI 프로그램에서 각 다이얼로그 간에 직접 통신하게 하지 않고, 중간에 중개인을 두고 중앙 제어할 때 많이 쓰임 (효가적)\r\n- 다이러로그의 제어 로직이 중개인이 모여 있으므로 디버깅이나 수정이 용이해짐\r\n- Mediator가 없으면 유지보수가 진행됨에 따라 Colleague 간의 통신 경로가 너무 많아져서 관리가 불가능해짐\r\n- 객체 지향에서는 한 곳에서 집중되는 것을 피해서 분산시키는 경우가 많으나, Mediator Pattern은 제어 로직을 오히려 한 곳에 집중 시킴 (분산 시킬 것은 분산시키고, 집중 시킬 것은 집중시킨다!)', NULL, '', 13, 0),
(1761, 'dale.seo', '', '', '2016-03-09 09:37:14', '', 'Spring Security JSP Tag Libraries', 'https://docs.spring.io/spring-security/site/docs/current/reference/html/taglibs.html\r\n\r\n스프링 시큐리티 JSP 태그 라이브러리를 활용해서 작성해본 로그인/로그아웃 겸용 페이지\r\n================================================================\r\n<%@ page contentType="text/html;charset=UTF-8" language="java" %>\r\n<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>\r\n<%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset="UTF-8">\r\n    <title>Log In</title>\r\n</head>\r\n<body>\r\n\r\n<sec:authorize access="isAnonymous()">\r\n    <c:url value="/login" var="loginUrl"/>\r\n    <form action="${loginUrl}" method="post">\r\n        <c:if test="${param.error != null}">\r\n            <p>\r\n                Invalid username and password.\r\n                <br/>\r\n                (${sessionScope["SPRING_SECURITY_LAST_EXCEPTION"].message})\r\n            </p>\r\n        </c:if>\r\n        <c:if test="${param.logout != null}">\r\n            <p>\r\n                You have been logged out.\r\n            </p>\r\n        </c:if>\r\n        <p>\r\n            <label for="username">Username</label>\r\n            <input type="text" id="username" name="username"/>\r\n        </p>\r\n        <p>\r\n            <label for="password">Password</label>\r\n            <input type="password" id="password" name="password"/>\r\n        </p>\r\n        <sec:csrfInput />\r\n        <button type="submit" class="btn">Log in</button>\r\n    </form>\r\n</sec:authorize>\r\n\r\n<sec:authorize access="isAuthenticated()">\r\n    <ul>\r\n        <li>Username : <sec:authentication property="principal.username" /></li>\r\n        <li>Password : <sec:authentication property="principal.password" /></li>\r\n        <li>Authorities : <sec:authentication property="principal.authorities" /></li>\r\n    </ul>\r\n    <c:url value="/logout" var="logoutUrl"/>\r\n    <form action="${logoutUrl}" method="post">\r\n        <sec:csrfInput />\r\n        <input type="submit" value="Logout"/>\r\n    </form>\r\n</sec:authorize>\r\n\r\n</body>\r\n</html>', NULL, '', 9, 0),
(1762, 'dale.seo', '', '', '2016-03-10 11:27:04', '', 'Spring Security Message Config', '스프링 시큐리티는 기본적으로 다국어를 지원하는데 약간의 설정이 필요하다.\r\n다국어 메세지 파일은 spring-security-core.jar 파일의 org/springframework/security/messages<locale>.properties에 위치한다.\r\n\r\n이 위치를 basename으로 해서 다음과 같이 Root Context에 Message Source만 등록해주면 된다.\r\n\r\n====================================================================================================\r\n	@Bean\r\n	public MessageSource messageSource() {\r\n		ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();\r\n		messageSource.setBasename("classpath:org/springframework/security/messages");\r\n		messageSource.setDefaultEncoding("UTF-8");\r\n		messageSource.setCacheSeconds(60);\r\n		return messageSource;\r\n	}\r\n====================================================================================================\r\n\r\n위와 같이 세팅하면 영문 메세지인 "자격 증명에 실패하였습니다." 대신에 한글 메시지인 "자격 증명에 실패하였습니다." 메세지가 사용된다.\r\n\r\n커스텀 메세지를 사용하고 싶다면 /src/main/resources 내에 위와 jar 파일과 동일한 경로인 org/springframework/security/ 내에 messages_ko_KR.properties를 작성해두면,\r\n클래스 패스에서 나의 프로퍼티 파일이 라이브러리의 프로퍼타 파일보다 우선시 되어 적용이 된다.\r\n\r\n# /src/main/resources/org/springframework/security/messages_ko_KR.properties\r\n====================================================================================================\r\nAbstractUserDetailsAuthenticationProvider.badCredentials = 사용자 인증에 실패하였습니다.\r\n====================================================================================================\r\n\r\n위와 같이 세팅하면 디폴트 메세지인 "자격 증명에 실패하였습니다." 대신에 커스텀 메세지인 "사용자 인증에 실패하였습니다." 라는 메세지가 사용된다.', NULL, '', 3, 0),
(1763, 'dale.seo', '', '', '2016-03-10 22:26:56', '', 'Observer Pattern - 옵저버 패턴', '- Publish(발행)-Subscribe(구독) 패턴\r\n- 객체의 상태 변화를 다른 객체에 알려서 동기화를 맞추는데 사용\r\n- GUI 개발에서 리스터 인터페이스에서 많이 사용됨\r\n- Observer가 능동적으로 관찰한다기 보다는, Subject로 부터 수동적으로 전달받는다고 보는 게 더 맞음\r\n# 구성요소\r\n- Subject.notify() : 관찰 대상, 관잘자 리스트를 소유\r\n- Observer.update(Subject s) : 관찰자 : 관찰 대상을 인자로 받는 메서드 소유', NULL, '', 9, 0),
(1764, 'dale.seo', '', '', '2016-03-10 22:30:14', '', '구상 클래스를 쉽게 교환하기 위한 클래스 설계', '메서드 아규먼트로 인스턴스를 전달할 때나, 클래스의 필드에 인스턴스를 저장할 때는 구상 클래스 형태로 하지 않고 추상 클래스나 인터페이스 형태로 해 둔다.', NULL, '', 2, 0),
(1765, 'dale.seo', '', '', '2016-03-11 22:32:19', '', 'Memento Pattern - 메멘토 패턴', '- 오브젝트의 상태를 기록하고 저장하기 위한 패턴\r\n- undo나 redo를 구현할 때 사용\r\n\r\n# 구성요소\r\n- Memento : Originator의 필드 중 저장할 필드만 선언\r\n- Originator : 상태 기록이 필요한 클래스\r\n + Memento createMemento() : 현재 상태를 메멘토에 저장\r\n + void restoreMemento(Memento m) : 주어진 메먼토 상태로 복원\r\n', NULL, '', 3, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(1766, 'dale.seo', '', '', '2016-03-12 17:57:23', '', '새로운 스타일의 Builder', 'package seo.dale.spring.user.model;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.springframework.security.core.GrantedAuthority;\r\nimport org.springframework.security.core.userdetails.UserDetails;\r\nimport seo.dale.spring.common.model.BaseEntity;\r\nimport seo.dale.spring.core.security.model.Role;\r\n\r\nimport javax.persistence.Entity;\r\nimport javax.persistence.Transient;\r\nimport java.util.Collection;\r\nimport java.util.List;\r\n\r\n/**\r\n * @author Dale Seo\r\n */\r\n@Entity\r\npublic class User extends BaseEntity implements UserDetails {\r\n\r\n	private String username;\r\n	private String password;\r\n\r\n	private String firstName;\r\n	private String lastName;\r\n	private String email;\r\n\r\n	@Transient\r\n	private List<Role> authorities;\r\n\r\n	public User() {\r\n	}\r\n\r\n	public User(String username, String password, List<Role> authorities) {\r\n		this.username = username;\r\n		this.password = password;\r\n		this.authorities = authorities;\r\n	}\r\n\r\n	public void update(User updated) {\r\n		username = StringUtils.defaultString(updated.username, username);\r\n		password = StringUtils.defaultString(updated.password, password);\r\n\r\n		firstName = StringUtils.defaultString(updated.firstName, firstName);\r\n		lastName = StringUtils.defaultString(updated.lastName, lastName);\r\n		email = StringUtils.defaultString(updated.email, email);\r\n	}\r\n\r\n	@Override\r\n	public String getUsername() {\r\n		return username;\r\n	}\r\n\r\n	@Override\r\n	public String getPassword() {\r\n		return password;\r\n	}\r\n\r\n	@Override\r\n	public Collection<? extends GrantedAuthority> getAuthorities() {\r\n		return authorities;\r\n	}\r\n\r\n	@Override\r\n	public boolean isAccountNonExpired() {\r\n		return true;\r\n	}\r\n\r\n	@Override\r\n	public boolean isAccountNonLocked() {\r\n		return true;\r\n	}\r\n\r\n	@Override\r\n	public boolean isCredentialsNonExpired() {\r\n		return true;\r\n	}\r\n\r\n	@Override\r\n	public boolean isEnabled() {\r\n		return true;\r\n	}\r\n\r\n	public String getFirstName() {\r\n		return firstName;\r\n	}\r\n\r\n	public void setFirstName(String firstName) {\r\n		this.firstName = firstName;\r\n	}\r\n\r\n	public String getLastName() {\r\n		return lastName;\r\n	}\r\n\r\n	public void setLastName(String lastName) {\r\n		this.lastName = lastName;\r\n	}\r\n\r\n	public String getEmail() {\r\n		return email;\r\n	}\r\n\r\n	public void setEmail(String email) {\r\n		this.email = email;\r\n	}\r\n\r\n	public static class Builder {\r\n\r\n		private User built;\r\n\r\n		public Builder(String username, String password) {\r\n			built = new User();\r\n			built.username = username;\r\n			built.password = password;\r\n		}\r\n\r\n		public User build() {\r\n			return built;\r\n		}\r\n\r\n		public Builder firstName(String firstName) {\r\n			built.firstName = firstName;\r\n			return this;\r\n		}\r\n\r\n		public Builder lastName(String lastName) {\r\n			built.lastName = lastName;\r\n			return this;\r\n		}\r\n\r\n		public Builder email(String email) {\r\n			built.email = email;\r\n			return this;\r\n		}\r\n\r\n	}\r\n\r\n}', NULL, '', 5, 0),
(1767, 'dale.seo', '', '', '2016-03-14 13:41:58', '', 'Spring Security - AuthenticationSuccessHandler, AuthenticationFailureHandler', 'http://zgundam.tistory.com/52\r\n\r\nAuthenticationSuccessHandler, AuthenticationFailureHandler를 구현해서 빈으로 등록해놓으면 로그인 성공/실패 시 처리를 추가할 수 있다.\r\n예를 들어 로그인 실패 시, 로그인 실패 카운트를 1 증가 시키고, 로그인 성공하면 로그인 실패 카운트를 0으로 세팅할 때 활용할 수 있다.\r\n\r\nAbstractAuthenticationProcessingFilter 클래스의 successfulAuthentication 메소드에서 AuthenticationSuccessHandler에게 처리를 위함하고,\r\nunsuccessfulAuthentication 메소드에서 AuthenticationFailureHandler에거 처리를 위임한다.\r\n\r\nAuthenticationSuccessHandler 인터페이스의 디폴트 구현체는 SavedRequestAwareAuthenticationSuccessHandler이다.\r\nAuthenticationFailureHandler 인터페이스의 디폴트 구현체는 SimpleUrlAuthenticationFailureHandler이다.\r\n\r\nhttp://docs.spring.io/autorepo/docs/spring-security/current/apidocs/org/springframework/security/web/authentication/AbstractAuthenticationProcessingFilter.html#successfulAuthentication-javax.servlet.http.HttpServletRequest-javax.servlet.http.HttpServletResponse-javax.servlet.FilterChain-org.springframework.security.core.Authentication-', NULL, '', 8, 0),
(1768, 'dale.seo', '', '', '2016-03-14 22:57:28', '', 'State Pattern - 스테이트 패턴', '- 시스템의 각 상태를 개별 클래스로 표시\r\n\r\n# 구성요소\r\n- Context : state를 가지고 state의 메소드(API)들을 호출, 다른 클라이언트에서 의해서 제어\r\n- State : 다수의 ConcreateState의 인터페이스(API)', NULL, '', 2, 0),
(1769, 'dale.seo', '', '', '2016-03-15 21:03:08', '', 'Flyweight Pattern - 플라이급 패턴', '> 메모리의 소비를 적헤하기 위해 인스턴스를 공유시킴\r\n> 인스턴스를 가능한 대로 공유시켜서 쓸데없이 new하지 않도록 한다.\r\n> 공유는 하나를 변경하면 그것을 사용하고 있는 장소 전체에 영향을 미치기 때문에 주의\r\n\r\n# 구성요소\r\n- Flgihtweight: 공유/재활용하기 좋은 인스턴스의 클래스\r\n- FlightweightFactory: Flightweight 공장, 내부에 Flighweight들을 보관/관리하기 위한 pool(map) 등을 가진다.', NULL, '', 9, 0),
(1770, 'dale.seo', '', '', '2016-03-15 21:21:30', '', '메모리 사용량 구하기', '    @Test\r\n    public void test() {\r\n        long totalMemory1 = Runtime.getRuntime().totalMemory();\r\n        long freeMemory1 = Runtime.getRuntime().freeMemory();\r\n        long usedMemory1 = totalMemory1 - freeMemory1;\r\n        System.out.printf("totalMemory1 = %d, freeMemory1 = %d, usedMemory1 = %d\\n", totalMemory1, freeMemory1, usedMemory1);\r\n\r\n        Runtime.getRuntime().gc();\r\n\r\n        long totalMemory2 = Runtime.getRuntime().totalMemory();\r\n        long freeMemory2 = Runtime.getRuntime().freeMemory();\r\n        long usedMemory2 = totalMemory2 - freeMemory2;\r\n        System.out.printf("totalMemory2 = %d, freeMemory2 = %d, usedMemory2 = %d\\n", totalMemory2, freeMemory2, usedMemory2);\r\n    }', NULL, '', 4, 0),
(1771, 'dale.seo', '', '', '2016-03-16 22:39:21', '', 'Proxy Pattern - 프록시 패턴', '- 본인이 역할을 대리인에게 위임\r\n- 본인의 속도가 느릴 경우 대리인을 통해 속도 향상을 도모 (캐싱)\r\n- 시간이 오래 걸리는 초기화 지연에 사용\r\n- Decorator Pattern은 새로운 기능을 추가하는 것이 목적이지만, Proxy Pattern은 본인의 작업을 대리인에게 위힘해서 본인에 대한 액세스를 줄여주는 목적\r\n\r\n# 구성요소\r\n - Subject : RealSubject와 Proxy가 동시에 구현하는 인터페이스\r\n - RealSubject (본인) : 본인은 클라이언트가 대리인을 통해 호출하는지 직접 호출하는지 알 수가 없음\r\n - Proxy (대리인) : 본인을 대신해서 할 수 있는 건 하고, 대리인이 할 수 있는 범위를 넘는 건 본인에 위임\r\n\r\n# 종류\r\n - Virtual Proxy (가상 프록시) : RealSubject이 필요한 시점에 생성/초기화\r\n - Remote Proxy (원격 프록시) : 상대가 네트워크 상에 있음에도 불구하고 마치 로컬에 있는 것 처럼 메소드 호출 가능 (Java RMI)\r\n - Access Proxy : RealSubject 기능에 대해서 액세스 제한을 설정\r\n\r\n# 활용예\r\n - HTTP Proxy\r\n  : HTTP Sever와 HTTP Client 사이에 위치하여, 캐싱, 필터링 등을 지원\r\n    최신 정보가 필요하거나 페이지의 유효기간이 지났을 때 실제 HTTP Server에서 웹페이지를 가져옴', NULL, '', 8, 0),
(1772, 'dale.seo', '', '', '2016-03-17 10:23:19', '', 'Greedy Algorithm', 'https://www.hackerrank.com/challenges/mark-and-toys/topics/greedy-technique\r\n\r\n부분에 통하는 전략이, 전체에도 통할 때만 사용\r\n알고리즘이 직관적이고 구현이 간단함', NULL, '', 8, 0),
(1773, 'dale.seo', '', '', '2016-03-17 22:52:50', '', 'Adapter Pattern의 다른 모습', '자바 AWT의 이벤트 Listener나 스프링의 자바 Configurer 인스턴스를 보면 메소드가 참 많은데,\r\n쓰는 입장에서는 이 많은 메소드를 모두 구현할 일이 적다.\r\n\r\n이럴 경우를 대비해서 해당 인터페이스를 구현한 추상 클래스로 Adapter를 제공하는데 보통 메소드 구현부가 비어 있어서,\r\n쓰는 쪽에서 익명 내부 클래스(Anonymous Inner Class)를 활용해서 간편하게 원하는 메소드만 구현할 수 있다.\r\n\r\n예1) WindowListener vs WindowAdapter\r\n예2) WebMvcConfigurer vs WebMvcConfigurerAdapter', NULL, '', 3, 0),
(1774, 'dale.seo', '', '', '2016-03-17 22:54:35', '', 'Command Pattern - 커맨드 패턴', '- 명령을 객체로 표현하고, 이력을 저장하거나 재실행하는 일이 가능하게 하는 패턴\r\n- Command를 Event라고 부르기도 함\r\n- 보통 Command 인터페이스는 void execute() 메소드 하나를 가짐\r\n- 보통  execute() 메소드를 내부에서, 생성자로 받은 Receiver(실제 수행 능력이 있는 객체)의 메소드를 호출하게 함', NULL, '', 11, 0),
(1775, 'dale.seo', '', '', '2016-03-18 11:29:00', '', 'Collections.sort()로 List 오름차순/내림차순 정렬', '	@Test\r\n	public void testSort() {\r\n		List<Integer> numbers = new ArrayList<>();\r\n		numbers.add(3);\r\n		numbers.add(1);\r\n		numbers.add(2);\r\n\r\n		Collections.sort(numbers);\r\n		assertEquals(Arrays.asList(1, 2, 3), numbers);\r\n\r\n		Collections.sort(numbers, Collections.reverseOrder());\r\n		assertEquals(Arrays.asList(3, 2, 1), numbers);\r\n	}', NULL, '', 7, 0),
(1776, 'dale.seo', '', '', '2016-03-21 23:13:35', '', 'Interpreter Pattern - 인터프리터 패턴', '- 미니 언어의 구문 분석할 때 사용됨', NULL, '', 2, 0),
(1777, 'dale.seo', '', '', '2016-03-22 09:38:46', '', '메이븐 원격 저장소 (Remote Repository) 설정', '회사처럼 인트라넷에 자체 메이븐 원격 저장소를 운영하고 있다면 다음과 같이 pom.xml과 .m2/settings.xml파일에 세팅을 추가해준다.\r\n\r\n"repository"는 release 버전의 deploy에 사용되고, "snapshotRepository"는 snapshot 버전의 deploy에 사용된다. release와 snapshot의 구분은 pom.xml 파일의 project 설정 시 "version"에 "SNAPSHOT"이 있는지 여부에 따라 결정된다. Maven은 버전의 접미사로 SNAPSHOT을 사용하면 개발 중인 버전으로 인식한다. 위와 같이 0.0.1-SNAPSHOT 버전이라면 "snapshotRepository" 설정을 사용할 것이다.\r\n\r\n# pom.xml\r\n===================================================================\r\n    <distributionManagement>\r\n        <repository>\r\n            <id>team-store-releases</id>\r\n            <name>Store Dev Release repository</name>\r\n            <url>http://mvn.skplanet.com/content/repositories/team-store-releases</url>\r\n        </repository>\r\n        <snapshotRepository>\r\n            <id>team-store-snapshots</id>\r\n            <name>Store Dev Snapshot Repository</name>\r\n            <url>http://mvn.skplanet.com/content/repositories/team-store-snapshots</url>\r\n        </snapshotRepository>\r\n    </distributionManagement>\r\n===================================================================\r\n\r\n# settings.xml\r\n===================================================================\r\n <servers>\r\n    <server>\r\n      <id>tuxedoCat-release</id>\r\n      <username>[deploy 사용자 ID]</username>\r\n      <password>[deploy 사용자 비밀번호]</password>\r\n    </server>\r\n    <server>\r\n      <id>tuxedoCat-snapshots</id>\r\n      <username>[deploy 사용자 ID]</username>\r\n      <password>[deploy 사용자 비밀번호]</password>\r\n    </server>\r\n  </servers>\r\n===================================================================', NULL, '', 3, 0),
(2370, 'dale.seo', '', '', '2016-10-12 13:48:21', '', 'Gradle Spring Boot Plugin', '# 스프링 부트 플러그인 선언 (build.gradle)\r\n```\r\napply plugin: ''org.springframework.boot''\r\n```\r\n\r\n# 부트 어플리케이션 빌드 후 jar 실행\r\n```\r\n$ gradle bootRun\r\n```\r\n\r\n# test task 생략하고 빠르게 실행\r\n```\r\n$ gradle bootRun -x test\r\n```\r\n\r\n# 다른 불필요한 빌드는 생략하고 Executable Jar만 만들어냄\r\n```\r\n$ ./gradlew bootRepackage\r\n```', NULL, '', 7, 0),
(1779, 'dale.seo', '', '', '2016-03-23 14:58:58', '', 'Multiple SLF4J Bindings Issue', 'http://www.slf4j.org/codes.html#multiple_bindings\r\nhttps://beyondj2ee.wordpress.com/2013/11/05/log4j에서-logback으로-마이그레이션-하기-migrate-from-log4j-to-logback/\r\n\r\nlogback을 사용하려고 하는데, 클래스패스에 있는 다른 라이브러리에서 log4j에 디펜던시를 갖고 있는 경우 발생하는 이슈\r\nlogback만 쓰고 싶다면, slf4j-log4j12.jar에 대한 디펜던시를 가지고 있는 모든 라이브러리에 대해서 exclude 조치해야 한다.\r\n왜냐하면 여러가지 SLF4J 바인딩/구현체가 있을 경우, 어떤 것을 선택할지는 예상할 수 없기 때문이다. (random)\r\n\r\nThe way SLF4J picks a binding is determined by the JVM and for all practical purposes should be considered random. As of version 1.6.6, SLF4J will name the framework/implementation class it is actually bound to.', NULL, '', 6, 0),
(1780, 'dale.seo', '', '', '2016-03-24 18:21:04', '', 'Log4j2 설정 파일 (log4j2.xml)', '<?xml version="1.0" encoding="UTF-8"?>\r\n<configuration status="WARN">\r\n\r\n    <!-- Appenders -->\r\n    <appenders>\r\n        <Console name="console" target="SYSTEM_OUT">\r\n            <PatternLayout pattern="|%-5p|%d|%c(%M:%L)%n%m%n" />\r\n        </Console>\r\n    </appenders>\r\n\r\n    <loggers>\r\n        <!-- Application Loggers -->\r\n        <logger name="seo.dale.spring" level="debug"/>\r\n\r\n        <!-- Root Logger -->\r\n        <root level="info">\r\n            <appender-ref ref="console" />\r\n        </root>\r\n    </loggers>\r\n\r\n</configuration>', NULL, '', 6, 0),
(1781, 'dale.seo', '', '', '2016-03-26 16:35:14', '', '에버노트에서 URL로 검색하는 방법', '-sourceurl:www.interviewcake.com', NULL, '', 2, 0),
(1782, 'dale.seo', '', '', '2016-03-26 16:35:55', '', '에버노트 검색 문법', 'https://dev.evernote.com/doc/articles/search_grammar.php', NULL, '', 2, 0),
(1783, 'dale.seo', '', '', '2016-03-28 18:41:34', '', 'Spring Security AbstractAuthenticationFilterConfigurer', 'HttpSecurity로 자바 설정할 때, 실제로 사용되는 클래스이므로 참고하면 좋다\r\n\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http\r\n                .authorizeRequests()\r\n	                .antMatchers("/resources/**", "/").permitAll()\r\n	                .antMatchers("/admin/**").hasRole("ADMIN")\r\n	                .antMatchers("/toDo", "/toDo/**").access("hasRole(''USER'') or hasRole(''DBA'')")\r\n	                .anyRequest().authenticated()\r\n	                .and()\r\n                .formLogin()\r\n		            .loginPage("/login")\r\n		            .permitAll()\r\n		            .successHandler(customAuthenticationSuccessHandler)\r\n		            .failureHandler(customAuthenticationFailureHandler)\r\n		            .and()\r\n                .httpBasic();\r\n    }', NULL, '', 10, 0),
(1785, 'dale.seo', '', '', '2016-03-30 22:40:14', '', '바이너리 트리 순회 방식 (preorder, postorder, inorder), 높이 구하기', '재귀 호출을 통해 트리를 순회 한다.\r\n- preorder : 부모 노드를 제일 먼저 node -> left -> right\r\n- postorder : 부모 노드를 제일 나중 left -> right -> node\r\n- inorder : 부모 노드를 중간에 left -> node -> rgiht\r\n\r\n트리의 높이는 (left 노드의 높이 + 1)과 (right 노드늬 높이 + 1) 중 큰 값이다.\r\n\r\npublic class TreeTraversal {\r\n\r\n    void Preorder(Node root) {\r\n        if (root == null) {\r\n            return;\r\n        }\r\n        System.out.print(root.data + " ");\r\n        Preorder(root.left);\r\n        Preorder(root.right);\r\n    }\r\n\r\n    void Postorder(Node root) {\r\n        if (root == null) {\r\n            return;\r\n        }\r\n        Postorder(root.left);\r\n        Postorder(root.right);\r\n        System.out.print(root.data + " ");\r\n    }\r\n\r\n    void Inorder(Node root) {\r\n        if (root == null) {\r\n            return;\r\n        }\r\n        Inorder(root.left);\r\n        System.out.print(root.data + " ");\r\n        Inorder(root.right);\r\n    }\r\n\r\n    int height(Node root) {\r\n        if (root == null) {\r\n            return 0;\r\n        }\r\n\r\n        return Math.max(height(root.left) + 1, height(root.right) + 1);\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nclass Node {\r\n    int data;\r\n    Node left;\r\n    Node right;\r\n}', NULL, '', 10, 0),
(1786, 'dale.seo', '', '', '2016-04-01 10:28:14', '', 'Springfox를 활용한 Swagger2 통합 하기', '===================================================================\r\n1. 디펜던시 추가\r\n===================================================================\r\n        <dependency>\r\n            <groupId>io.springfox</groupId>\r\n            <artifactId>springfox-swagger2</artifactId>\r\n            <version>2.4.0</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>io.springfox</groupId>\r\n            <artifactId>springfox-staticdocs</artifactId>\r\n            <version>2.4.0</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>io.springfox</groupId>\r\n            <artifactId>springfox-swagger-ui</artifactId>\r\n            <version>2.4.0</version>\r\n        </dependency>\r\n\r\n===================================================================\r\n2. 설정 추가 (SpringBoot 기준)\r\n===================================================================\r\n@SpringBootApplication\r\n@EnableJpaRepositories("time.coffee.repository")\r\n@EnableSwagger2\r\npublic class Application {\r\n\r\n	public static void main(String[] args) {\r\n		SpringApplication.run(Application.class);\r\n	}\r\n\r\n	@Bean\r\n	public Docket coffeeTimeApi() {\r\n		return new Docket(DocumentationType.SWAGGER_2)\r\n				.apiInfo(apiInfo())\r\n				.select()\r\n				.apis(RequestHandlerSelectors.any())\r\n				.paths(apiPaths())\r\n				.build()\r\n				;\r\n	}\r\n\r\n	private ApiInfo apiInfo() {\r\n		return new ApiInfoBuilder()\r\n				.title("Coffee Time API Documentation")\r\n				.description("하하하! 쉬운 테스트!")\r\n				.build();\r\n	}\r\n\r\n	private Predicate<String> apiPaths() {\r\n		return or(\r\n				regex("/members.*"),\r\n				regex("/menus.*"),\r\n				regex("/orders.*"),\r\n				regex("/shops.*"),\r\n				regex("/surveys.*")\r\n		);\r\n	}\r\n\r\n}\r\n\r\n===================================================================\r\n3. 브라우져에서 Swagger 호출\r\n===================================================================\r\n- JSON : http://localhost:8000/v2/api-docs\r\n- UI : http://localhost:8000/swagger-ui.html', NULL, '', 3, 0),
(1787, 'dale.seo', '', '', '2016-04-01 10:30:49', '', 'Springfox Reference Documentation', 'http://springfox.github.io/springfox/docs/current/', NULL, '', 2, 0),
(1788, 'dale.seo', '', '', '2016-04-01 18:27:45', '', '원격 저장소/브래친 이름 생략하고 현재 브랜치 기준으로 push 하기', '# 저장소명 생략 방법\r\n$ git push --set-upstream origin develop\r\n\r\n# 브랜치명 생략 방법\r\n$  git config --global push.default simple\r\n위와 같이 세팅을 한 번만 해주면, push할 때 귀찮게 현재 브랜치명을 맨 뒤에 적어줄 필요 없다.\r\n\r\npush.default 옵션을 세팅하지 않고, 브랜치명 없이 push 명령어를 날리면 다음과 같은 경고가 뜬다.\r\n\r\n\r\n1002139@1002139s-MacBook-Pro storeplatform-framework [feature] $ git push\r\n\r\nwarning: push.default is unset; its implicit value has changed in\r\nGit 2.0 from ''matching'' to ''simple''. To squelch this message\r\nand maintain the traditional behavior, use:\r\n\r\n  git config --global push.default matching\r\n\r\nTo squelch this message and adopt the new behavior now, use:\r\n\r\n  git config --global push.default simple\r\n\r\nWhen push.default is set to ''matching'', git will push local branches\r\nto the remote branches that already exist with the same name.\r\n\r\nSince Git 2.0, Git defaults to the more conservative ''simple''\r\nbehavior, which only pushes the current branch to the corresponding\r\nremote branch that ''git pull'' uses to update the current branch.\r\n\r\nSee ''git help config'' and search for ''push.default'' for further information.\r\n(the ''simple'' mode was introduced in Git 1.7.11. Use the similar mode\r\n''current'' instead of ''simple'' if you sometimes use older versions of Git)\r\n\r\nEverything up-to-date', NULL, '', 9, 0),
(1789, 'dale.seo', '', '', '2016-04-02 14:22:12', '', 'package-info.java를 만드는 이유', 'http://www.intertech.com/Blog/whats-package-info-java-for/\r\n\r\n1) Package-level JavaDoc 생성을 위해\r\n2) Package-level Annotation 적용을 위해, 패키지 전체를 @Deprecated할 때 유용', NULL, '', 2, 0),
(1790, 'dale.seo', '', '', '2016-04-02 14:49:43', '', 'SystemOutRule을 활용하여 콘솔에 쓰여진 문자열 검증하기', '시스템 규칙 라이브러리을 사용하여 콘솔에 어떤한 것이 쓰이든지 검증이 가능하다.\r\n\r\n===================================================================================================\r\n		<dependency>\r\n			<groupId>com.github.stefanbirkner</groupId>\r\n			<artifactId>system-rules</artifactId>\r\n			<version>1.16.0</version>\r\n			<scope>test</scope>\r\n		</dependency>\r\n\r\n===================================================================================================\r\npackage seo.dale.spring.in_action.bean_wiring;\r\n\r\nimport org.junit.Rule;\r\nimport org.junit.Test;\r\nimport org.junit.contrib.java.lang.system.SystemOutRule;\r\nimport org.junit.runner.RunWith;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.test.context.ContextConfiguration;\r\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\r\n\r\nimport static org.junit.Assert.*;\r\n\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(classes = CDPlayerConfig.class)\r\npublic class CDPlayerTest {\r\n\r\n    @Rule\r\n    public final SystemOutRule log = new SystemOutRule().enableLog();\r\n\r\n    @Autowired\r\n    private MediaPlayer player;\r\n\r\n    @Autowired\r\n    private CompactDisc cd;\r\n\r\n    @Test\r\n    public void cdShouldNotBeNull() {\r\n        assertNotNull(cd);\r\n    }\r\n\r\n    @Test\r\n    public void testPlay() {\r\n        player.play();\r\n        assertEquals("Playing Sgt. Pepper''s Lonely Hearts Club Band by The Beatles\\r\\n", log.getLog());\r\n    }\r\n\r\n}', NULL, '', 7, 0),
(1791, 'dale.seo', '', '', '2016-04-02 14:54:06', '', 'Spring 빈 선언 및 와이어링 3가지 방법', '아래 방법들을 혼합할 때는 최상위 Java Config나 XML 파일을 만들고, 각각 Java Config 클래스와 xml 파일들을 추상화 레벨이 맞게 위치시킨다.\r\n\r\n1) 자동 스프링 설정 (Component Scan)\r\n - 컴포넌트 스캐닝와 오토 와이어링 사용\r\n - 외부 라이브러리의 컴포넌트를 와이어링 할 수가 없음\r\n\r\n2) 명시적인 Java 기반 설정\r\n - @Bean 어노테이션 사용\r\n - 타입세이프, 레펙토링 친화적이므로 XML 설정보다 선호됨\r\n\r\n3) 명시적인 XML 기반 설정\r\n - 자바 어노테이션에서 지원되지 않는 XML 네임스페이스가 있을 때만 어쩔 수 없이 사용', NULL, '', 16, 0),
(1792, 'dale.seo', '', '', '2016-04-02 15:31:37', '', 'Spring XML 설정 - util: 네임 스페이스', 'c: 네임 스페이스나 p: 네임 스페이스에는 컬렉션 값을 넘길 수 없어서, 어쩔 수 없이 constructor-arg나 property 태그를 사용할 수 밖에 없다.\r\n하지만 util: 네임 스페이스를 사용하면, list, set, map. properties 등을 별개의 id를 갖는 빈으로 선언할 수 있다.\r\n따라서 c: 또는 p: 네임 스페이스에 ref 값으로 세팅이 가능해진다.', NULL, '', 3, 0),
(1793, 'dale.seo', '', '', '2016-04-02 15:56:35', '', '@ComponentScan의 basePackageClasses 속성', 'basePackage 속성은 문자열 값을 받지만, basePackageClasses 속성은 클래스 객체값을 받기 때문에 타임 세이프하다.\r\n지정한 클래스만 스캔한다고 오해할 수 있는데, 사실 지정한 클래스와 같은 패키지 레벨의 모든 클래스와 하위 패키지의 클래스까지 모두 포함한다.\r\n혼선이 없으려면 스캔 전용 클래스를 생성하는 것도 고려해볼만 하다.', NULL, '', 3, 0),
(1794, 'dale.seo', '', '', '2016-04-02 16:04:44', '', 'JndiObjectFactoryBean을 이용해서 DataSource 선언', '생으로 JNDI를 쓰는 것보다 훨씬 깔끔함\r\nDataSource 대신 JndiObjectFactoryBean을 바로 리턴해도 상관없음\r\n\r\n=====================================================================================================\r\n  @Bean\r\n  @Profile("prod")\r\n  public JndiObjectFactoryBean jndiDataSource() {\r\n    JndiObjectFactoryBean jndiObjectFactoryBean = new JndiObjectFactoryBean();\r\n    jndiObjectFactoryBean.setJndiName("jdbc/myDS");\r\n    jndiObjectFactoryBean.setResourceRef(true);\r\n    jndiObjectFactoryBean.setProxyInterface(javax.sql.DataSource.class);\r\n    return jndiObjectFactoryBean ;\r\n  }\r\n\r\n=====================================================================================================\r\n  @Bean\r\n  @Profile("prod")\r\n  public DataSource jndiDataSource() {\r\n    JndiObjectFactoryBean jndiObjectFactoryBean = new JndiObjectFactoryBean();\r\n    jndiObjectFactoryBean.setJndiName("jdbc/myDS");\r\n    jndiObjectFactoryBean.setResourceRef(true);\r\n    jndiObjectFactoryBean.setProxyInterface(javax.sql.DataSource.class);\r\n    return (DataSource) jndiObjectFactoryBean.getObject();\r\n  }', NULL, '', 11, 0),
(1795, 'dale.seo', '', '', '2016-04-02 16:13:11', '', '자바 기반 설정으로 DataSource 선언 시 환경별 프로파일 적용 예제', '@Configuration\r\npublic class DataSourceConfig {\r\n  \r\n  @Bean(destroyMethod = "shutdown")\r\n  @Profile("dev")\r\n  public EmbeddedDatabase embeddedDataSource() {\r\n    return new EmbeddedDatabaseBuilder()\r\n        .setType(EmbeddedDatabaseType.H2)\r\n        .addScript("classpath:schema.sql")\r\n        .addScript("classpath:test-data.sql")\r\n        .build();\r\n  }\r\n\r\n    @Bean(destroyMethod = "close")\r\n    @Profile("qa")\r\n    public DataSource basicDataSource() {\r\n        BasicDataSource dataSource = new BasicDataSource();\r\n        dataSource.setUrl("jdbc:h2:tcp://dbserver/~/test");\r\n        dataSource.setDriverClassName("org.h2.Driver");\r\n        dataSource.setUsername("sa");        \r\n        dataSource.setPassword("password");\r\n        dataSource.setInitialSize(20);\r\n        dataSource.setMaxActive(30);\r\n        return dataSource;\r\n    }\r\n\r\n  @Bean\r\n  @Profile("prod")\r\n  public DataSource jndiDataSource() {\r\n    JndiObjectFactoryBean jndiObjectFactoryBean = new JndiObjectFactoryBean();\r\n    jndiObjectFactoryBean.setJndiName("jdbc/myDS");\r\n    jndiObjectFactoryBean.setResourceRef(true);\r\n    jndiObjectFactoryBean.setProxyInterface(javax.sql.DataSource.class);\r\n    return (DataSource) jndiObjectFactoryBean.getObject();\r\n  }\r\n\r\n}', NULL, '', 16, 0),
(1796, 'dale.seo', '', '', '2016-04-02 16:22:30', '', '스프링 프로파일 활성화 하기', '- spring.profiles.active\r\n- spring.profiles.default\r\n위 두 가지 프로퍼티를 이용해서 스프링 프로파일을 활성화한다.\r\nspring.profiles.active가 설정되어 있지 않은 경우, spring.profiles.default가 활성화왼다.\r\nspring.profiles.default 조차 설정되어 있지 않은 경우, 프로파일이 정의되지 않은 빈들만 컨테이너에 등록된다.\r\n\r\n위 두 가지 프로퍼티를 설정하기 위한 여러가지 방법이 있다.\r\n- DispathcerServlet의 초기화 파라미터\r\n- WebApplcation의 컨텍스트 파라미터\r\n- JNDI 엔트리\r\n- O/S 환경변수\r\n- JVM 시스템 프로퍼티\r\n- 통합 테스트 클래스에서 @ActiveProfiles 어노테이션', NULL, '', 4, 0),
(1797, 'dale.seo', '', '', '2016-04-02 16:48:14', '', '@Qualifer 어노테이션을 확장하여 Type-Safe하게 Autowire 시키기', '====================================================================================================================\r\n@Qualifer 어노테이션을 확장\r\n====================================================================================================================\r\n@Target({ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER, ElementType.TYPE, ElementType.ANNOTATION_TYPE})\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Qualifier\r\npublic @interface MemDataSource {}\r\n\r\n====================================================================================================================\r\n@Bean 어노테이션에 사용\r\n====================================================================================================================\r\n@Bean\r\n@MemDataSource // =@Qalifier("memDataSource")\r\npublic DataSource memDataSource() {\r\n...\r\n}\r\n\r\n====================================================================================================================\r\n@Autowired 어노테이션에 사용\r\n====================================================================================================================\r\n@Autowired\r\n@MemDataSource // =@Qalifier("memDataSource")\r\nprivate DataSource dataSource', NULL, '', 4, 0),
(1798, 'dale.seo', '', '', '2016-04-03 22:48:37', '', 'Environment 객체', '프로퍼티 값을 읽어오기 위해 다음과 같이 다양한 메서드를 제공한다.\r\n\r\n- boolean containsProperty(String key);\r\n- String getProperty(String key);\r\n- String getProperty(String key, String defaultValue);\r\n- String getRequiredProperty(String key) throws IllegalStateException;\r\n- T getProperty(String key, Class<T> targetType);\r\n- T getProperty(String key, Class<T> targetType, String defaultValue);\r\n- T getRequiredProperty(String key, Class<T> targetType) throws IllegalStateException;\r\n- Class<T> getPropertyAsClass(String key, Class<T> targetType);\r\nex) int connectionCount = env.getProperty("db.connection.count", Integer.class, 30);\r\n\r\n추가로 다음과 같이 프로파일 관련 메서드도 제공한다.\r\n	String[] getActiveProfiles();\r\n	String[] getDefaultProfiles();\r\n	boolean acceptsProfiles(String... profiles);', NULL, '', 8, 0),
(1799, 'dale.seo', '', '', '2016-04-04 19:37:34', '', 'SpEL (Spirng Expression Language) 스프링 표현식 언어 정리', '< 기본 >\r\n\r\n#{...} : SpEL 프레임\r\n${...} : 프로퍼티 플레이스홀더\r\n\r\n< T() 타입연산자 : 클래스의 정적 메소드와 상수를 엑세스 >\r\n\r\n#{T(System).currentTimeMillis()} : System.currentTimeMillis()\r\n#{T(System).out} : System.out\r\n#{T(java.lang.Math).PI}\r\n#{T(java.lang.Math).random()}\r\n\r\n< 어떤 빈의 프로퍼티 참조 >\r\n\r\n#{sgtPeppers.artist} : ID가 sgtPeppers인 빈 자체\r\n#{sgtPeppers.artist} : ID가 sgtPeppers인 빈의 artist 필드의 값\r\n\r\n#{artistSelector.selectArtist()} : ID가 sgtPeppers인 빈의 selectArtist 메소드 호출\r\n\r\n< 연산자 >\r\n#{artistSelector.selectArtist()?.toUpperCase()} : NullPointerException을 방지하기 위한 타입세이프 연산자 사용 (? 앞이 null이면 ? 뒤를 평가하지 않음)\r\n#{counter.total == 100}\r\n#{counter.total eq 100}\r\n#{counter.total > 100 ? "Winner" : "Loswer"}\r\n\r\n#{systemProperties[''spring.profiles.active'']} : JVM 시스템 프로퍼티 중 disc.title의 값 (-Dspring.profiles.active=dev)\r\n \r\n< 컬렉션 >\r\n#{jukebox.songs[4].title} : ID가 jukebo인 빈의 songs 컬력션 필드에서 다섯 번째 요소 프로퍼티의 title 필드 평가\r\n#{jukebox.songs.?[artist == "Aerosmith"]} : 필터링', NULL, '', 14, 0),
(1800, 'dale.seo', '', '', '2016-04-05 22:15:04', '', 'AOP (Aspect Oriented Programming) 기본 개념', '공통 기능을 재활용하기 위해 일반적으로 사용하는 객체 지향 기법은 상속이나 위임이다.\r\n하지만 상속은 객체의 정적 구조에 의존하므로 복잡하고 깨지기 쉬운 구조가 되기 쉽상이며,\r\n위임은 대상 객체에 대한 복잡한 호출로 인해 번거롭다.\r\n\r\n애스펙트는 대부분 상속이나 위임보다 더 깔끔한 해결책을 제공한다.\r\nAOP도 공통 기능을 한 곳에 정의하는 것은 기본적으로 동일하다.\r\n하지만 이 기능을 어디에 어떻게 적용할지를 선언적으로 정의할 수 있고,\r\n대상 클래스를 전혀 수정할 필요가 없다는 점이 큰 차이점이다.\r\n\r\nAOP에서는 횡단 관심사를 애스펙트(aspect)라는 특별한 클래스로 모듈화한다.\r\nAOP가 다른 기법과 차별화 되는 장점은 두가지이다.\r\n1) 전체 코드 기반에 흩어져 있는 관심 사항이 하나의 장소로 응집된다.\r\n2) 여타 서비스 모듈이 자신의 주요 관심 사항에 대한 코드만 포함하고, 그 외 관심 사항은 모두 애스펙트로 옮겨져서 코드가 깔끔해지낟.\r\n', NULL, '', 2, 0),
(1801, 'dale.seo', '', '', '2016-04-05 22:30:56', '', 'AOP 용의정의', '# 어드바이스(advice)\r\n- 애스팩트가 해야 할 작업\r\n- 애스펙트가 ''무엇''을 ''언제''할지를 정의한다.\r\n- 스프링에서는 다섯 가지 종류의 어드바이스를 가진다. \r\n : 이전(bofore), 이후(after), 변환 이후(afer-returning), 예외 발생 이후(after-throwing), 주의(around)\r\n\r\n# 조인 포인트 (join point)\r\n - 어드바이스를 적용할 수 있는 곳\r\n - 런타임에 애스펙트를 끼워 넣을 수 있는 지점\r\n\r\n# 포인트커트 (pointcut)\r\n - 애스펙트가 어드바이스할 조인 포인트의 영역을 좁히는 일을 함\r\n - 애스펙트가 ''어디서'' 할지를 정의\r\n - 클래스나 메소드 명을 직접 사용할 수도 있고, 매칭 패턴을 나타내는 정규 표현식을 사용할 수 도 있음\r\n\r\n# 애스펙트 (aspect)\r\n - 어드바이스와 포인트커트를 합친 것\r\n - 두 가지 정보가 합쳐지만 애스펙트가 무엇을 언제 언디서 할지가 나온다.', NULL, '', 3, 0),
(1802, 'dale.seo', '', '', '2016-04-06 23:16:35', '', '@AspectJ 어노테이션을 이용한 Srping AOP', 'Xml 설정 방법보다 더 편리하다.\r\n\r\n==========================================================================\r\n설정 : 기존 자바 설정에 @EnableAspectJAutoProxy만 추가해주면 @Aspect 어노테이션이 붙은 클래스들을 찾아 프록시를 만들어준다.\r\n==========================================================================\r\n@Configuration\r\n@EnableAspectJAutoProxy\r\n@ComponentScan\r\npublic class AopConfig {\r\n}\r\n\r\n==========================================================================\r\nAOP를 적용할 대상 클래스\r\n==========================================================================\r\npackage seo.dale.spring.aop;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Component;\r\n\r\n@Component\r\npublic class Repeater {\r\n\r\n    @Autowired\r\n    private Performance performance;\r\n\r\n    public void repeat(int num) {\r\n        for (int i = 0; i < num; i++) {\r\n            performance.perform();\r\n        }\r\n    }\r\n\r\n}\r\n\r\n==========================================================================\r\n애스펙트 클래스 : Pointcut과 Advice 메소드들이 정의되어 있다.\r\n==========================================================================\r\npackage seo.dale.spring.aop;\r\n\r\nimport org.aspectj.lang.ProceedingJoinPoint;\r\nimport org.aspectj.lang.annotation.*;\r\nimport org.springframework.stereotype.Component;\r\n\r\n@Component\r\n@Aspect\r\npublic class RepeaterAspect {\r\n\r\n    @Pointcut("execution(** seo.dale.spring.aop.Repeater.repeat(int))")\r\n    public void repeat() {}\r\n\r\n    @Before("repeat()")\r\n    public void before() {\r\n        System.out.println("@Before");\r\n    }\r\n\r\n    @After("repeat()")\r\n    public void after() {\r\n        System.out.println("@After");\r\n    }\r\n\r\n    @AfterReturning("repeat()")\r\n    public void afterReturning() {\r\n        System.out.println("@AfterReturning");\r\n    }\r\n\r\n    @AfterThrowing("repeat()")\r\n    public void afterThrowing() {\r\n        System.out.println("@AfterThrowing");\r\n    }\r\n\r\n    @Around("repeat()")\r\n    public void around(ProceedingJoinPoint jp) {\r\n        try {\r\n            System.out.println("@Around - Before");\r\n            jp.proceed();\r\n            System.out.println("@Around - After Returning");\r\n        } catch (Throwable throwable) {\r\n            System.out.println("@Around - After Throwing");\r\n        } finally {\r\n            System.out.println("@Around - After");\r\n        }\r\n    }\r\n\r\n}\r\n\r\n', NULL, '', 4, 0),
(1803, 'dale.seo', '', '', '2016-04-08 00:45:58', '', '$.ajaxSetup - ajax에 대한 글로벌 설정', '다음과 같이 $.ajaxSetup 펑션을 통해 contentType을 지정하면 기본 contentType인 url-encoded가 아닌 json으로 호출된다.\r\n그래서 contentType하나 때문에 $.poist 펑션 대신 $.ajax 펑션을 생으로 써야 하는 비극이 없어진다.\r\n\r\n\r\n    $.ajaxSetup({\r\n        contentType: "application/json; charset=UTF-8"\r\n    });\r\n\r\n    function toJson(form) {\r\n        var json = {};\r\n        $(form).serializeArray().map(function(item) {\r\n            json[item.name] = item.value;\r\n        });\r\n        return JSON.stringify(json);\r\n    }\r\n\r\n    $(''#createBtn'').click(function() {\r\n        $.post("/members", toJson("#formCreate"))\r\n                .done(function(data) {\r\n                    alert("등록되었습니다. #" + data.id);\r\n                })\r\n                .fail(function(data) {\r\n                    alert(data.responseJSON.exception + '' ('' + data.responseJSON.message + '')'');\r\n                });\r\n    });', NULL, '', 6, 0),
(1804, 'dale.seo', '', '', '2016-04-08 18:24:58', '', 'Log4j2 XML 설정 방법', 'http://www.egovframe.go.kr/wiki/doku.php?id=egovframework:rte3:fdl:%EC%84%A4%EC%A0%95_%ED%8C%8C%EC%9D%BC%EC%9D%84_%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94_%EB%B0%A9%EB%B2%95', NULL, '', 4, 0),
(1805, 'dale.seo', '', '', '2016-04-08 22:39:26', '', 'spring-boot-maven-plugin', 'http://docs.spring.io/spring-boot/docs/1.3.3.RELEASE/maven-plugin/\r\n\r\n# repackage goal\r\n - pom.xml의 packaging가 jar인지 war인지를 보고, java 명령어로 바로 실행 가능한 jar나 war 파일을 만들어준다.\r\n - target 디렉토리를 보면 package goal로 만들어진 jar나 war에는 파일은 .original을 붙여서 백업해놓은 것을 볼 수 있다.\r\n\r\n# run goal\r\n - repackage 되서 실행 가능한 jar나 war를 실행시킨다.\r\n - 상세 옵션 : http://docs.spring.io/spring-boot/docs/current/maven-plugin/run-mojo.html\r\n\r\n=====================================================================\r\nlocal 프로필 세팅하기\r\n=====================================================================\r\n			<plugin>\r\n				<groupId>org.springframework.boot</groupId>\r\n				<artifactId>spring-boot-maven-plugin</artifactId>\r\n				<version>1.3.3.RELEASE</version>\r\n				<configuration>\r\n					<profiles>\r\n						<profile>local</profile>\r\n					</profiles>\r\n				</configuration>\r\n			</plugin>', NULL, '', 10, 0),
(1806, 'dale.seo', '', '', '2016-04-08 22:51:27', '', 'Spring Boot 사용 시 pom.xml의 packaging의 중요성', 'http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#build-tool-plugins-maven-packaging\r\n\r\npom.xml의 packaging를 jar로 하면 java 명령어로 간단히 실행가능하기는 하지만 WAS 서버에 배포할 수는 없다. (순전히 로컬 프로토타이핑 용)\r\nexecutable and deployable한 war로 패키징을 하려면, 다음과 같이 pom.xml의 packaging을 war로 세팅해주고, spring-boot-starter-tomcat 디펜던시를 provided로 넣어줘야 한다.\r\n\r\n<?xml version="1.0" encoding="UTF-8"?>\r\n<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\r\n    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\r\n    <!-- ... -->\r\n    <packaging>war</packaging>\r\n    <!-- ... -->\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-tomcat</artifactId>\r\n            <scope>provided</scope>\r\n        </dependency>\r\n        <!-- ... -->\r\n    </dependencies>\r\n</project>', NULL, '', 7, 0),
(1807, 'dale.seo', '', '', '2016-04-08 23:08:55', '', 'Spring Boot - 서버 재구동 없이 서버 리프레쉬', 'http://docs.spring.io/spring-boot/docs/current/maven-plugin/usage.html', NULL, '', 6, 0),
(1808, 'dale.seo', '', '', '2016-04-09 17:49:10', '', 'WebApplicationInitializer  구현 예제', 'package seo.dale.spring;\r\n\r\nimport org.springframework.web.WebApplicationInitializer;\r\nimport org.springframework.web.context.ContextLoaderListener;\r\nimport org.springframework.web.context.support.AnnotationConfigWebApplicationContext;\r\nimport org.springframework.web.servlet.DispatcherServlet;\r\nimport org.springframework.web.util.Log4jConfigListener;\r\n\r\nimport javax.servlet.ServletContext;\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.ServletRegistration;\r\n\r\npublic class WebAppInitializer implements WebApplicationInitializer {\r\n\r\n    @Override\r\n    public void onStartup(ServletContext servletContext) throws ServletException {\r\n        servletContext.setInitParameter("log4jConfiguration", "/log4j.xml");\r\n        Log4jConfigListener log4jListener = new Log4jConfigListener();\r\n        servletContext.addListener(log4jListener);\r\n\r\n        AnnotationConfigWebApplicationContext rootContext = new AnnotationConfigWebApplicationContext();\r\n        rootContext.register(AppConfig.class);\r\n\r\n        servletContext.addListener(new ContextLoaderListener(rootContext));\r\n\r\n        AnnotationConfigWebApplicationContext webApplicationContext = new AnnotationConfigWebApplicationContext();\r\n        webApplicationContext.register(WebMvcConfig.class);\r\n\r\n        DispatcherServlet dispatcherServlet =  new DispatcherServlet(webApplicationContext);\r\n        dispatcherServlet.setThrowExceptionIfNoHandlerFound(true); // Throw NoHandlerFoundException instead of 404 HTTP Status\r\n\r\n        ServletRegistration.Dynamic dispatcher = servletContext.addServlet("dispatcher",dispatcherServlet);\r\n        dispatcher.setLoadOnStartup(1);\r\n        dispatcher.addMapping("/");\r\n	    dispatcher.setInitParameter("throwExceptionIfNoHandlerFound", "true"); // NoHandlerFoundException instead of 404 response\r\n    }\r\n    \r\n}\r\n', NULL, '', 3, 0),
(1809, 'dale.seo', '', '', '2016-04-09 18:04:56', '', 'AbstractAnnotationConfigDispatcherServletInitializer', 'http://docs.spring.io/autorepo/docs/spring-framework/current/javadoc-api/org/springframework/web/servlet/support/AbstractAnnotationConfigDispatcherServletInitializer.html\r\n\r\nWebApplicationInitializer를 생으로 구현하는 것보다 훨씬 간단하게 web.xml 없이 ContextLoaderListener와 DispatcherServlet을 설정할 수 있다. (강추)\r\n- 3개의 메소드(getRootConfigClasses, getServletConfigClasses, getServletMappings)는 abstract이기 때문에 반드시 구현해줘야 한다.\r\n- 그 밖의 설정(load-on-startup 우선순위, Init-parameter, multipart 등)은 customizeRegistration 메소드를 오버라이드 하여 구현한다.\r\n- 필터 설정은 getServletFilters 메소드를 오버라이딩 한다.\r\n\r\n\r\n====================================================================================================\r\npackage seo.dale.spring;\r\nimport org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;\r\n\r\nimport javax.servlet.ServletRegistration;\r\n\r\npublic class WebAppInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {\r\n\r\n    @Override\r\n    protected Class<?>[] getRootConfigClasses() {\r\n        return new Class<?>[]{AppConfig.class};\r\n    }\r\n\r\n    @Override\r\n    protected Class<?>[] getServletConfigClasses() {\r\n        return new Class<?>[]{WebConfig.class};\r\n    }\r\n\r\n    @Override\r\n    protected String[] getServletMappings() {\r\n        return new String[]{"/"};\r\n    }\r\n\r\n    @Override\r\n    protected void customizeRegistration(ServletRegistration.Dynamic registration){\r\n        registration.setInitParameter("throwExceptionIfNoHandlerFound","true");\r\n        registration.setLoadOnStartup(1);\r\n        registration.setMultipartConfig(new MultipartConfigElement("D:/temp", 1024*1024*5, 1024*1024*5*5, 1024*1024)); // 5M, 25M, 1M\r\n    }\r\n\r\n    @Override\r\n    protected Filter[] getServletFilters() {\r\n        return new Filter[]{new DelegatingFilterProxy("loggingFilter")};\r\n    }\r\n\r\n}', NULL, '', 17, 0),
(1810, 'dale.seo', '', '', '2016-04-09 18:16:17', '', 'WebMvcConfigurerAdapter를 확장하여 Spring MVC 설정', '\r\n\r\n정적 리소스들에 대한 요청을 DispatcherServlet이 처리하지 않고, 서블릿 컨테이너(Tomcat)의 디폴트 서블릿으로 전달\r\n===============================================================================\r\n    @Override\r\n    public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {\r\n        configurer.enable();\r\n    }', NULL, '', 8, 0),
(1811, 'dale.seo', '', '', '2016-04-09 18:23:55', '', '루트 컨텍스트 설정 시 MVC 설정 제외시키는 자바 설정 방법', '@Configuration\r\n@ComponentScan(excludeFilters = {\r\n        @ComponentScan.Filter({Controller.class, ControllerAdvice.class}),\r\n        @ComponentScan.Filter(type = FilterType.ANNOTATION, classes = EnableWebMvc.class)}\r\n)\r\npublic class RootConfig {\r\n\r\n}\r\n', NULL, '', 3, 0),
(1812, 'dale.seo', '', '', '2016-04-11 22:43:37', '', 'HashCodeBuilder와 EqualsBuilder를 사용하여 특정 필드 제외 시키기', '\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        return HashCodeBuilder.reflectionHashCode(this, "id", "date");\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        return EqualsBuilder.reflectionEquals(this, obj, "id", "date");\r\n    }', NULL, '', 3, 0),
(1813, 'dale.seo', '', '', '2016-04-12 10:10:12', '', '[Spring Boot] Log4j2 로깅 설정', 'http://docs.spring.io/spring-boot/docs/current/reference/html/howto-logging.html#howto-configure-log4j-for-logging\r\n\r\n디폴트 로깅 라이브러리를 logback을 사용하기 때문에 log4j2를 사용하려면 다음과 같이 pom.xml 수정을 해줘야 한다.\r\n\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter</artifactId>\r\n    <exclusions>\r\n        <exclusion>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-logging</artifactId>\r\n        </exclusion>\r\n    </exclusions>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-log4j2</artifactId>\r\n</dependency>', NULL, '', 5, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(1814, 'dale.seo', '', '', '2016-04-13 11:34:04', '', '[Spring MVC] Thymeleaf 설정 방법', '# 1. 디펜던시 추가\r\n\r\n==============================================================================================\r\n		<dependency>\r\n			<groupId>org.thymeleaf</groupId>\r\n			<artifactId>thymeleaf-spring4</artifactId>\r\n			<version>2.1.4.RELEASE</version>\r\n		</dependency>\r\n==============================================================================================\r\n\r\n# 2. ViewResolver, TemplateEngine, TemplateResolver 빈 등록 (WebConfig.java)\r\n\r\n==============================================================================================\r\n    @Bean\r\n    public ThymeleafViewResolver thymeleafViewResolver(SpringTemplateEngine templateEngine) {\r\n        ThymeleafViewResolver viewResolver = new ThymeleafViewResolver();\r\n        viewResolver.setTemplateEngine(templateEngine);\r\n        viewResolver.setOrder(1);\r\n        return viewResolver;\r\n    }\r\n\r\n    @Bean\r\n    public SpringTemplateEngine templateEngine(TemplateResolver templateResolver) {\r\n        SpringTemplateEngine templateEngine = new SpringTemplateEngine();\r\n        templateEngine.setTemplateResolver(templateResolver);\r\n        return templateEngine;\r\n    }\r\n\r\n    @Bean\r\n    public TemplateResolver templateResolver() {\r\n        TemplateResolver templateResolver = new ServletContextTemplateResolver();\r\n        templateResolver.setPrefix("/WEB-INF/templates/");\r\n        templateResolver.setSuffix(".html");\r\n        templateResolver.setTemplateMode("HTML5");\r\n        return templateResolver;\r\n    }\r\n==============================================================================================\r\n\r\n# 3. html 파일 위치시키기\r\n\r\nwebapp/WEB-INF/templates/ 아래에 html 파일을 놓고 테스트해본다.', NULL, '', 4, 0),
(1815, 'dale.seo', '', '', '2016-04-13 11:38:36', '', 'Spring Boot 사용 시 서버 재구동없이 정적 리소스 갱신시키는 방법', 'IntelliJ에서 Build > Compile 하지 않아도, html 파일만 수정하면 바로 반영되게 하는 spring boot maven plugin 옵션을 추가하였습니다.\r\n(참조 : http://docs.spring.io/spring-boot/docs/current/maven-plugin/usage.html)\r\n\r\n\r\n\r\n			<plugin>\r\n				<groupId>org.springframework.boot</groupId>\r\n				<artifactId>spring-boot-maven-plugin</artifactId>\r\n				<configuration>\r\n					<fork>true</fork>\r\n					<addResources>true</addResources>\r\n				</configuration>\r\n			</plugin>', NULL, '', 5, 0),
(1816, 'dale.seo', '', '', '2016-04-13 12:50:17', '', 'event.preventDefault()', '폼 전송 방지', NULL, '', 2, 0),
(1817, 'dale.seo', '', '', '2016-04-13 12:51:58', '', 'jQuery에 없는 put(), delete() 펑션 정의하기', 'http://stepansuvorov.com/blog/2014/04/jquery-put-and-delete/\r\n\r\n아래 수준으로만 정의해도 잘 작동함\r\n==========================================================================\r\n$.put = function(url, data, success, dataType){\r\n    return $.ajax({\r\n        type: ''PUT'',\r\n        url: url,\r\n        data: data,\r\n        success: success,\r\n        dataType: dataType\r\n    });\r\n}\r\n\r\n$.delete = function(url, data, success, dataType){\r\n    return $.ajax({\r\n        type: ''DELETE'',\r\n        url: url,\r\n        data: data,\r\n        success: success,\r\n        dataType: dataType\r\n    });\r\n}\r\n==========================================================================', NULL, '', 3, 0),
(1818, 'dale.seo', '', '', '2016-04-13 13:21:52', '', 'Thymeleaf URL', 'http://www.thymeleaf.org/doc/articles/standardurlsyntax.html', NULL, '', 2, 0),
(1819, 'dale.seo', '', '', '2016-04-13 14:05:12', '', 'Spring Application Event개선 사항 (4.2)', 'https://spring.io/blog/2015/02/11/better-application-events-in-spring-framework-4-2', NULL, '', 6, 0),
(1820, 'dale.seo', '', '', '2016-04-13 14:35:27', '', 'Spring Application Event 메커니즘', 'http://javajigi.net/pages/viewpage.action?pageId=1058', NULL, '', 3, 0),
(1821, 'dale.seo', '', '', '2016-04-13 16:47:33', '', 'AbstractRequestLoggingFilter를 확장하여 간단한 LoggingFilter 구현/설정', '1) 필터 설정\r\n================================================================\r\n\r\npublic class WebAppInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {\r\n    @Override\r\n    protected Filter[] getServletFilters() {\r\n        return new Filter[]{new DelegatingFilterProxy("loggingFilter")};\r\n    }\r\n}\r\n\r\n2) 필터 구현\r\n================================================================\r\n\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.stereotype.Component;\r\nimport org.springframework.web.filter.AbstractRequestLoggingFilter;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\n\r\n@Component\r\npublic class LoggingFilter extends AbstractRequestLoggingFilter {\r\n\r\n    private static Logger logger = LoggerFactory.getLogger(LoggingFilter.class);\r\n\r\n    public LoggingFilter() {\r\n        setIncludeClientInfo(true);\r\n        setIncludePayload(true);\r\n        setIncludeQueryString(true);\r\n    }\r\n\r\n    @Override\r\n    protected void beforeRequest(HttpServletRequest request, String message) {\r\n        logger.info(message);\r\n    }\r\n\r\n    @Override\r\n    protected void afterRequest(HttpServletRequest request, String message) {\r\n        logger.info(message);\r\n    }\r\n\r\n}\r\n', NULL, '', 7, 0),
(1822, 'dale.seo', '', '', '2016-04-13 21:24:56', '', 'Spring MVC 4 File Upload Example using Servlet 3 MultiPartConfigElement', 'http://websystique.com/springmvc/spring-mvc-4-file-upload-example-using-multipartconfigelement/\r\n\r\n설명이 아주 잘 되어 있음. 나중에 실습해 볼 것.', NULL, '', 3, 0),
(1823, 'dale.seo', '', '', '2016-04-13 21:48:12', '', 'Spring4 에서 Servlet3 이전 파일 업로드 설정', 'http://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-multipart-resolver-commons\r\nhttp://devbox.tistory.com/entry/Spring-%ED%8C%8C%EC%9D%BC%EC%97%85%EB%A1%9C%EB%93%9C-%EC%B2%98%EB%A6%AC\r\n\r\nJakarta Commons FileUpload 멀티파트 리졸버를 사용해야 했었음\r\n\r\n기본적으로 서블릿 컨테이너의 임시 디렉터리로 설정되기 때문에 파일 임시 저장 디렉토리를 저장하지 않아도 되는 장점이 있었음\r\n\r\n\r\n<bean id="multipartResolver"\r\n        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">\r\n\r\n    <!-- one of the properties available; the maximum file size in bytes -->\r\n    <property name="maxUploadSize" value="100000"/>\r\n\r\n</bean>', NULL, '', 5, 0),
(1824, 'dale.seo', '', '', '2016-04-13 21:55:06', '', 'Spring4 에서 Servlet3 이후 파일 업로드 설정', 'http://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-multipart-resolver-standard\r\n\r\n1) StandardServletMultipartResolver만 리졸버로 등록한다. (CommonMultipartResolver처럼 추가 설정이 불가하다.)\r\n\r\n<bean id="multipartResolver"\r\n        class="org.springframework.web.multipart.support.StandardServletMultipartResolver">\r\n</bean>\r\n\r\n2)  WebAppInitializer를 통해 Multipart 설정을 해준다.(대신 web.xml의 multipart-confg를 설정해줘도 됨)\r\n존재하지 않는 디렉토리를 설정하면 IOException이 발생하니 각별히 주의한다.\r\n\r\npublic class WebAppInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {\r\n\r\n    @Override\r\n    protected void customizeRegistration(ServletRegistration.Dynamic registration){\r\n        registration.setInitParameter("throwExceptionIfNoHandlerFound","true");\r\n        registration.setLoadOnStartup(1);\r\n        registration.setMultipartConfig(new MultipartConfigElement("D:/temp", 1024*1024*5, 1024*1024*5*5, 1024*1024)); // 5M, 25M, 1M\r\n    }\r\n\r\n}', NULL, '', 3, 0),
(1825, 'dale.seo', '', '', '2016-04-13 22:05:43', '', '파일 업로드 화면 및 Spring 컨트롤러 구현', '===================================================================================================================\r\n1) 화면 : POST 메소드와 multipart/form-data 인크립션을 사용해야 한다.\r\n===================================================================================================================\r\n\r\n        <form method="post" enctype="multipart/form-data">\r\n            <div class="form-group">\r\n                <label for="file">File input</label>\r\n                <input type="file" id="file" name="file" accept="image/png,image/jpeg,image/gif"/>\r\n                <p class="help-block">Example block-level help text here.</p>\r\n            </div>\r\n            <button type="submit" class="btn btn-default">Submit</button>\r\n        </form>\r\n\r\n===================================================================================================================\r\n2) 컨트롤러 : @RequestPart 어노테이션을 통해 파일만 직접 받을 수도 있고, 커맨드 객체에 MultipartFile 필드를 추가하여 받을 수도 있다.\r\n@RequestPart 어노테이션의 인자나 커맥드 객체의 MultipartFile 필드명은 file input의 name과 일치해야 한다.\r\n===================================================================================================================\r\n\r\npackage seo.dale.spring.web.controller;\r\n\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport org.springframework.web.multipart.MultipartFile;\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\n\r\n\r\n@Controller\r\n@RequestMapping("/fileupload")\r\npublic class FileUploadController {\r\n\r\n    private static Logger logger = LoggerFactory.getLogger(FileUploadController.class);\r\n\r\n    @RequestMapping(method = RequestMethod.GET)\r\n    public String uploadForm() {\r\n        return "fileupload";\r\n    }\r\n\r\n    @RequestMapping(method = RequestMethod.POST)\r\n    public String upload(@RequestPart("file") MultipartFile file, MemberForm memberForm) throws IOException {\r\n        logger.info("- name : {}", file.getName());\r\n        logger.info("- original file name : {}", file.getOriginalFilename());\r\n        logger.info("- content type : {}", file.getContentType());\r\n        logger.info("- size : {}", file.getSize());\r\n        logger.info("- bytes : {}", new String(file.getBytes()));\r\n        file.transferTo(new File("D:/temp/" + file.getOriginalFilename()));\r\n        return "redirect:/fileupload";\r\n    }\r\n\r\n}', NULL, '', 10, 0),
(1826, 'dale.seo', '', '', '2016-04-14 17:48:27', '', 'SLF4J 바인딩 종류', 'http://www.slf4j.org/manual.html#swapping\r\n\r\nlogback은 SLF4J natvie 구현체이므로 classic만 있으면 별도의 바인딩 디펜던시가 필요가 없음', NULL, '', 4, 0),
(1827, 'dale.seo', '', '', '2016-04-14 17:57:50', '', 'Logback 설정 파일에서 환경 변수나 시스템 프로퍼티 읽기', 'http://logback.qos.ch/manual/configuration.html#variableSubstitution', NULL, '', 6, 0),
(1828, 'dale.seo', '', '', '2016-04-14 21:17:35', '', 'Logback Property 설정 하기', 'http://logback.qos.ch/manual/configuration.html#definingProps\r\n\r\n가급적 logback.xml 파일에서 환경별로 달라지는 부분만 logback.properties 파일로 뽑아내면,\r\nlogback.xml 파일을 환경별로 중복해서 만들 필요가 없게 된다.\r\n\r\n# 내부 property 설정\r\n\r\n<configuration>\r\n    <property name="LOG_HOME" value="/Users/1002139/logs" />\r\n</configuration>\r\n\r\n# 외부 proeprty 설정\r\n\r\n<configuration>\r\n    <property resource="logback-test.properties" />\r\n</configuration>', NULL, '', 5, 0),
(1829, 'dale.seo', '', '', '2016-04-14 21:29:29', '', 'Logback - 다른 설정 파일을 포함시키기', 'http://logback.qos.ch/manual/configuration.html#fileInclusion\r\n\r\n# logback.xml\r\n======================================================\r\n<?xml version="1.0" encoding="UTF-8"?>\r\n<configuration>\r\n	<include optional="true" resource="./log/logback-${spring.profiles.active}.xml" />\r\n</configuration>\r\n\r\n# logback-qa.xml\r\n======================================================\r\n<included>\r\n\r\n    <appender ...\r\n    <logger ...\r\n    <root ...\r\n    \r\n</included>', NULL, '', 11, 0),
(1830, 'dale.seo', '', '', '2016-04-14 21:40:31', '', 'Logback - 설정 분기', 'http://logback.qos.ch/manual/configuration.html#conditional\r\nhttp://lng1982.tistory.com/165\r\n\r\n\r\n\r\nlogback을 이용하여 개발, 스테이징, 라이브 환경에 따른 로그 레벨을 분기하기 위해서 다음과 같이 조건문을 추가하였다.\r\n<if condition=''p("spring.profiles.active").equals("dev")''>\r\n<then><property name="LOG_LEVEL" value="DEBUG" /></then>\r\n</if>\r\n<if condition=''p("spring.profiles.active").equals("rc")''>\r\n        <then><property name="LOG_LEVEL" value="INFO" /></then>\r\n</if>\r\n<if condition=''p("spring.profiles.active").equals("live")''>\r\n<then><property name="LOG_LEVEL" value="INFO" /></then>\r\n</if>\r\n \r\n<root level="${LOG_LEVEL}">\r\n<appender-ref ref="APP_FILE" />\r\n</root>\r\n\r\nspring.profiles.active의 값은 java 실행 시 -Dspring.profiles.active="dev" 아규먼트를 추가하여 각 서버를 구분지었다. 헌데 웹 애플리케이션을 구동하면 로그 레벨이 각 환경에 맞게 적용이 안 된다.\r\n\r\n문제는 janino library가 추가되어 있어야 했다. \r\npom.xml 파일에 아래 라이브러리를 추가하여 문제 해결\r\n<dependency>\r\n<groupId>org.codehaus.janino</groupId>\r\n        <artifactId>janino</artifactId>\r\n        <version>2.6.1</version>\r\n</dependency>', NULL, '', 7, 0),
(1831, 'dale.seo', '', '', '2016-04-14 21:50:18', '', 'Logback 설정 관련 Spring Boot 확장팩', 'http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/html/boot-features-logging.html#boot-features-logback-extensions\r\n\r\n\r\n<springProfile name="staging">\r\n    <!-- configuration to be enabled when the "staging" profile is active -->\r\n</springProfile>\r\n\r\n<springProfile name="dev, staging">\r\n    <!-- configuration to be enabled when the "dev" or "staging" profiles are active -->\r\n</springProfile>\r\n\r\n<springProfile name="!production">\r\n    <!-- configuration to be enabled when the "production" profile is not active -->\r\n</springProfile>', NULL, '', 5, 0),
(1832, 'dale.seo', '', '', '2016-04-14 21:53:17', '', '스프링 프로파일 별로 logback 설정 파일 나누기', 'http://stackoverflow.com/questions/29429073/spring-boot-logback-and-logging-config-property\r\n\r\n\r\n기본적으로 로깅 설정이 스프링 설정 보다 먼저 일어나기 때문에 스프링으로 로깅 설정을 불가능한다. (Spring Boot 에서는 logback-spring.xml 을 사용해서 가능하게 하지만...)\r\n\r\nNote however that since logging is initialized before the ApplicationContext is created, it isn’t possible to control logging from @PropertySources in Spring @Configuration files. System properties and the conventional Spring Boot external configuration files work just fine.', NULL, '', 11, 0),
(1833, 'dale.seo', '', '', '2016-04-14 22:07:14', '', 'Logback의 LoggerContextListener 활용하기', 'http://logback.qos.ch/manual/configuration.html#contextListener\r\nhttp://stackoverflow.com/questions/1975939/read-environment-variables-from-logback-configuration-file\r\n\r\n\r\nLogback 설정이 Spring 설정보다 먼저 올라가므로 LoggerContextListener를 사용하여 동적인 설정을 해줄 수 있다.\r\n\r\n\r\npackage com.myapp.logging.listener;\r\n\r\nimport ch.qos.logback.classic.Level;\r\nimport ch.qos.logback.classic.Logger;\r\nimport ch.qos.logback.classic.LoggerContext;\r\nimport ch.qos.logback.classic.spi.LoggerContextListener;\r\nimport ch.qos.logback.core.Context;\r\nimport ch.qos.logback.core.spi.ContextAwareBase;\r\nimport ch.qos.logback.core.spi.LifeCycle;\r\n\r\npublic class LoggerStartupListener extends ContextAwareBase implements LoggerContextListener, LifeCycle {\r\n\r\n    private static final String DEFAULT_LOG_FILE = "MYAPP";\r\n\r\n    private boolean started = false;\r\n\r\n    @Override\r\n    public void start() {\r\n        if (started) return;\r\n\r\n        String userHome = System.getProperty("user.home"); \r\n\r\n        String logFile = System.getProperty("log.file"); // log.file is our custom jvm parameter to change log file name dynamicly if needed\r\n\r\n        logFile = (logFile != null && logFile.length() > 0) ? logFile : DEFAULT_LOG_FILE;\r\n\r\n        Context context = getContext();\r\n\r\n        context.putProperty("MY_HOME", userHome);\r\n        context.putProperty("LOG_FILE", logFile);\r\n\r\n        started = true;\r\n    }\r\n\r\n    @Override\r\n    public void stop() {\r\n    }\r\n\r\n    @Override\r\n    public boolean isStarted() {\r\n        return started;\r\n    }\r\n\r\n    @Override\r\n    public boolean isResetResistant() {\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public void onStart(LoggerContext context) {\r\n    }\r\n\r\n    @Override\r\n    public void onReset(LoggerContext context) {\r\n    }\r\n\r\n    @Override\r\n    public void onStop(LoggerContext context) {\r\n    }\r\n\r\n    @Override\r\n    public void onLevelChange(Logger logger, Level level) {\r\n    }\r\n}', NULL, '', 7, 0),
(1834, 'dale.seo', '', '', '2016-04-15 10:15:38', '', 'Logback Property의 디폴트 값 세팅해주기', 'http://logback.qos.ch/manual/configuration.html#defaultValuesForVariables\r\n\r\nLogback에서 property 값이 없을 경우에는 "<property-name>__IS_UNDEFINED" 식으로 _IS_UNDEFINED 접미사가 붙어서 매우 보기가 싫다.\r\n이럴 경우  "${aName:-golden}" 과 같이 디폴트 값을 세팅해주면 된다.\r\n\r\n    <property name="profile" value="${spring.profiles.active:-default}"/>\r\n    <include optional="true" resource="./log/logback-test-${profile}.xml"/>\r\n', NULL, '', 3, 0),
(1835, 'dale.seo', '', '', '2016-04-15 13:06:02', '', 'Logback Encoder Pattern', 'http://logback.qos.ch/manual/layouts.html#ClassicPatternLayout', NULL, '', 3, 0),
(1836, 'dale.seo', '', '', '2016-04-15 13:12:47', '', 'Mapped Diagnostic Context (MDC)', 'http://logback.qos.ch/manual/mdc.html\r\n\r\nSAC의 로그백 xml 설정 파일을 보면 다음과 같이 %X{필드명} 를 이용하여 사용자 정의 필드를 로그 패턴에 추가할 수 있는데,\r\n미리 MDC에 사용자 정의 필드를 추가해놔야 한다.\r\n\r\n<pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}|%-5level|%X{GUID}|%X{requestSystemId}|%X{interfaceId}|${hostName}|${instanceName}|%X{type}|%logger{36}:%file:%method:%line]\\t%msg%n</pattern>\r\n\r\nSAC의 경우 Filter가 RuntimeContextCreator를 통해 다음과 같이 MDC에 사용자 정의 필드를 추가한다.\r\n\r\n    public void initMDC(RuntimeContext runtimeContext) {\r\n        MDC.put("GUID", runtimeContext.getGuid());\r\n        MDC.put("requestTenantId", runtimeContext.getRequestTenantId());\r\n        MDC.put("requestSystemId", runtimeContext.getRequestSystemId());\r\n        MDC.put("insdMbrNo", runtimeContext.getInsdMbrNo());\r\n        MDC.put("insdDeviceId", runtimeContext.getInsdDeviceId());\r\n        MDC.put("mbrNo", runtimeContext.getMbrNo());\r\n        MDC.put("mbrId", runtimeContext.getMbrId());\r\n        MDC.put("deviceId", runtimeContext.getDeviceId());\r\n        MDC.put("isTest", runtimeContext.getIsTest());\r\n        MDC.put("interfaceId", runtimeContext.getInterfaceId());\r\n    }', NULL, '', 7, 0),
(1837, 'dale.seo', '', '', '2016-04-15 14:52:09', '', 'Maven Tomcat 플러그인 구동 시 catalina.home 위치', '특별한 설정을 해주지 않는 이상 아래와 같이 설정된다.\r\n\r\n<project_home>/target/tomcat\r\n\r\n예: /Users/1002139/git/storeplatform-ccs/target/tomcat', NULL, '', 3, 0),
(1838, 'dale.seo', '', '', '2016-04-16 13:20:07', '', '@ControllerAdvice이 선언된 클래스의 메소드에서 사용할 수 있는 어노테이션 ', '애플리케이션의 모든 컨트롤러에 광범위하게 적용할 로직은 스프링 3.2에서 추가된 @ControllerAdivce를 이용하여 처리한다. (Aspect랑 비슷)\r\n@ControllerAdvice도 @Componet를 확장하고 있기 때문에 Component Scan 대상이다.\r\n\r\n다음 3개의 어노테이션이 선언된 메소드를 작성해놓으면 모든 컨트롤러에 적용된다.\r\n\r\n1) @ExceptionHandler\r\n2) @InitBinder\r\n3) @ModelAttribte', NULL, '', 7, 0),
(1839, 'dale.seo', '', '', '2016-04-16 14:10:29', '', '리다이렉션되는 요청 간의 데이터 전달하기', 'HTTP POST 요청을 처리한 다음에 리다이렉션을 수행하는 것은 좋은 관례다. (사용자가 브라우저에서 새로 고침이나 뒤로 가기 버튼을 클릭한 경우, POST 요청이 재발행되는 것을 방지할 수 있다.)\r\n\r\n컨트롤러 메소드의 결과가 리다이렉션이라면 원래의 요청은 종료되고 새로운 HTTP GET 요청이 시작되므로 원본 요청에서 전달되던 모든 모델 데이터는 원본 요청과 함께서 소멸한다.\r\n따라서 새로운 요처은 애트리뷰터에 어떠한 모델 데이터도 없는 상태가 되어 자체적으로 이를 찾아내야 한다.\r\n\r\nreturn "redirect:/spitter/" + spitter.getUsername();\r\n\r\n위와 같이 redirect: 접두사는 리다이레션에 대한 동작을 단순하고 간단하게 만들어주지만,\r\nString 접합으로 URL이나 SQL 쿼리를 만드는 것은 매우 위험하다.\r\n\r\n\r\n# 1. URL 템플릿 이용 : 아래와 같이 Model 객체에 attribute를 추가해놓고, URL 템플릿을 리턴하면,\r\nPath Variable은 바인딩 되고 나머지는 쿼리 파라미터로 붙는다.\r\n========================================================================\r\n// /spitter/habuma?spitterId=42 로 리다이렉션됨\r\n@RequestMapping(value="/register", method=POST)\r\npublic String processRegistration(Spitter spitter, Model model) {\r\n  spitterRepository.save(spitter);\r\n  model.addAttribute("username", spitter.getUsername());\r\n  model.addAttribute("spitterId", spitter.getId());\r\n  return "redirect:/spitter/{username}"\r\n}\r\n\r\n# 2. 플래시 애트리뷰트 이용 : 리다이렉션 전에 세션에 모델이 들어가고, 리다이렉션 후 세션에서 소멸된다.\r\n========================================================================\r\n@RequestMapping(value="/register", method=POST)\r\npublic String processRegistration(Spitter spitter, RedirectAttributes model) {\r\n  spitterRepository.save(spitter);\r\n  model.addAttribute("username", spitter.getUsername());\r\n  model.addFlashAttribute("spitter", spitter);\r\n  return "redirect:/spitter/{username}"\r\n}\r\n\r\n@RequestMapping(value="/{username}", method=GET)\r\npublic String showSpitterProfile(@PathVariable String username, Model model) {\r\n    if (!model.containsAttribute("spitter")) {\r\n      model.addAttribute(spitterRepository.findByUsername(username));\r\n    }\r\n    return "profile";\r\n}', NULL, '', 3, 0),
(1840, 'dale.seo', '', '', '2016-04-16 14:30:50', '', '다이나믹 프로그래밍 - Dynamic Programming', 'https://www.hackerrank.com/challenges/stockmax/topics/dynamic-programming-basics', NULL, '', 4, 0),
(1841, 'dale.seo', '', '', '2016-04-16 14:31:40', '', '다이나믹 프로그래밍 vs 그리디 알고리즘 (Dynamic Programming vs. Greedy Algorithm)', 'http://128.199.231.48/dynamic-programminggwa-greedy/\r\n\r\nDynamic Programming과 Greedy Algorithm\r\n01 SEPTEMBER 2015 on 알고리즘, algorithm, dynamic, greedy, 다이나믹\r\n다이나믹 프로그래밍(Dynamic Programming)과 그리디 알고리즘(Greedy Algorithm)은 모두 최적화 문제를 풀 때 사용하는 알고리즘 기법이다. (두 기법 모두 알고리즘 자체가 아닌, 알고리즘 기법-전략-인데, 왜 하나는 Programming이 붙고, 다른 하나는 Algorithm이 붙는 지.. 그 이유는 모르겠다..) 두 기법 모두 비슷한 문제를 풀 기 때문에 언뜻 보면 두 알고리즘의 차이가 애매모호할 수 있다. 오늘은 이 두 기법의 개념을 정리하여 차이점을 확실히 알아두려 한다. 개념 정리 부분은 NHN NEXT의 자료구조 및 알고리즘 과목 lecutre note를 참고하였다.\r\n\r\nDynamic Programming 개념\r\n용도 : 최적화 문제 등\r\n구조\r\n주어진 문제를 여러 개의 작은 문제로 분할한다. 특히, 최적화 문제의 경우 분할 가능한 모든 경우를 고려한다.\r\n작은 문제의 해를 이용해서 주어진 문제의 해를 구한다.\r\n작은 문제 중 이미 해를 구한 것은 재사용한다. (memoization)\r\n작은 문제가 더 작은 문제로 분할되어 재귀 호출되는 과정에서 동일한 문제가 중복 발생할 경우 처음에 계산된 결과를 저장한 후 재호출 시 이전에 계산된 결과를 바로 return 한다.\r\n특징\r\nBrute-force 방식의 접근이다.\r\n모든 경우를 확인할 경우 exponential time algorithm 이지만, 중간 계산 결과를 재활용하면 (즉, memoization하면) polinomail time으로 개선된다.\r\n[optimal substructure] 주어진 문제의 optimal solution은 subproblem의 optimal solution을 포함한다. 이 조건을 만족하지 못하면 Dynamic Programming 기법을 적용할 수 없다!\r\n재귀적으로 구현하거나(top down), iteration을 이용해 구현(bottom up)할 수 있는데, 두 구현방식 모두 subproblem으로 이루어진 tree의 topological sorting 순서대로 문제가 풀린다.\r\nGreedy Algorithm 개념\r\n용도 : 최적화 문제\r\n구조\r\n전체 optimal solution을 구할 수 있는 local optimal choice를 발견한다.\r\n발견한 local optimal choice가 전체 optimal solution을 만들 수 있는지 증명한다.\r\n증명한 local optimal choice에 따라 알고리즘을 구성한다.\r\n특징 \r\n[optimal substructure] 주어진 문제의 optimal solution은 subproblem의 optimal solution을 포함한다.\r\n[Greedy-choice property] 전체적인 optimal solution은 locally optimal (greedy) choice에 의해서 구성될 수 있다. 이 때, 매 step 에서 locally optimal choice를 할 경우 globally optimal solution을 구해진다는 것은 증명되어야 한다.\r\nDynamic Programming vs. Greedy Algorithm\r\n공통점\r\nOptimal substructure를 사용한다.\r\n차이점\r\nDynamic programming은 매 step에서 여러 개의 sub-problem 해결한다.\r\nGreedy algorithm은 greedy choice property로 인해 매 step에서 한 개의 sub-problem만 처리한다.\r\n따라서 대개 Greedy algorithm의 시간 복잡도가 더 낮다.\r\n차이점 비교 예제\r\nDynamic: 0/1 knapsack problem\r\nGreedy: Fractional knapsack problem\r\n예제 코드는 곧 올리도록 하자!', NULL, '', 5, 0),
(1842, 'dale.seo', '', '', '2016-04-17 17:43:29', '', 'Spring의 FactoryBean을 구현하여 빈 등록하기', 'http://www.javajigi.net/pages/viewpage.action?pageId=1044\r\n\r\n객체 생성 자체가 new로 하기에 곤란할 경우 FactoryBean 빈을 구현하여, 그 안에 객체 생성 로직을 넣는다.\r\n스프링 컨텍스트에는 FactoryBean 구현체만 등록해주면, FactoryBean으로 부터 getObject 메소드를 호출한 리턴 객체를 등록해준다.\r\n또한 isSingleton 메소드를 구현하여, singleton으로 생성할지, prototype으로 생성할지도 결정할 수 있다.\r\n\r\n\r\nFactoryBean은 일반적인 Spring DI container의 특성으로는 생성하기 힘든 객체를 DI할 때 매우 유용한 중간 계층을 제공한다. FactoryBean는 새로운 InitialContext 객체를 생성하거나 Property를 읽어 들이는 등의 너저분한 코드 작성을 없애준다. Spring을 이미 우리가 살펴본 PropertiesFactoryBean과 JndiObjectFactoryBean같은 유용한 FactoryBean들을 제공하고 있다. 아래에 조그만 설명화 함께 있는 리스트 들이 Spring이 제공하는 다른 FactoryBean들이다.\r\n\r\nFactoryBean을 구현하여 우리들이 원하는 형태의 FactoryBean을 만들어 사용하는 것이 가능하다. 만약 과거에 구현하여 사용하고 있는 애플리케이션을 Migration하는 과정중에 과거의 소스를 그대로 사용하는 경우가 발생할 수 있다. 그런데 Spring 프레임워크와 통합을 시도하려고보니 인스턴스를 생성하는 과정이 복잡하고, new 예약어를 통하여 생성하는 것이 쉽지 않다고 생각될 경우에는 해당 인스턴스를 생성하는 FactoryBean을 만들어서 해결하는 것이 가능하다.', NULL, '', 6, 0),
(1845, 'dale.seo', '', '', '2016-04-17 18:32:11', '', '[Java8] 메소드 레퍼런스', ':: 연산자를 이용해서 람다 표현식 자리를 더 간단하게 대체할 수 있다.\r\n\r\nhttps://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html', NULL, '', 9, 0),
(1844, 'dale.seo', '', '', '2016-04-17 17:52:34', '', '자주 사용하는 데이터소스 구현체', '아래로 갈 수록 상용 환경에서는 쓰기 힘듬\r\n\r\n- JndiObjectFactoryBean : JDNI 데이터 소스\r\n- BasicDataSource (Apache) : 풀링 기능이 있는 데이터 소스\r\n- SingleConnectionDataSource : 항상 동일한 커넥션 반환\r\n- DriverManagerDataSource 또는 SimpleDriverDataSource : 매번 새로운 커넥션 반환\r\n- EmbeddedDatabaseBuilder#build() : Embeded DB 데이터 소스', NULL, '', 4, 0),
(1846, 'dale.seo', '', '', '2016-04-17 19:13:19', '', 'Spring Data JPA 설정 예제', 'DataSource를 주입하여 LocalContainerEntityManagerFactoryBean를 등록하는게 핵심이다.\r\nLocalContainerEntityManagerFactoryBean에서 properteis와 pagekagesToScan을 세팅해주므로 persistance.xml은 필요가 없다.\r\n\r\n\r\n@Configuration\r\n@EnableTransactionManagement\r\n@EnableJpaRepositories("seo.dale.spring.repository") // 스캔할 리파지토리\r\n@EnableJpaAuditing\r\n@PropertySource("classpath:application.properties")\r\npublic class PersistenceConfig {\r\n\r\n    private static final String PROPERTY_NAME_HIBERNATE_DIALECT = "hibernate.dialect";\r\n    private static final String PROPERTY_NAME_HIBERNATE_FORMAT_SQL = "hibernate.format_sql";\r\n    private static final String PROPERTY_NAME_HIBERNATE_HBM2DDL_AUTO = "hibernate.hbm2ddl.auto";\r\n    private static final String PROPERTY_NAME_HIBERNATE_NAMING_STRATEGY = "hibernate.ejb.naming_strategy";\r\n    private static final String PROPERTY_NAME_HIBERNATE_SHOW_SQL = "hibernate.show_sql";\r\n\r\n    private static final String PROPERTY_PACKAGES_TO_SCAN = "seo.dale.spring.domain";\r\n\r\n    @Autowired\r\n    private Environment environment;\r\n\r\n    @Bean\r\n    public JpaTransactionManager transactionManager(LocalContainerEntityManagerFactoryBean entityManagerFactory) {\r\n        JpaTransactionManager transactionManager = new JpaTransactionManager();\r\n\r\n        transactionManager.setEntityManagerFactory(entityManagerFactory.getObject());\r\n\r\n        return transactionManager;\r\n    }\r\n\r\n    @Bean\r\n    public LocalContainerEntityManagerFactoryBean entityManagerFactory(DataSource dataSource, HibernateJpaVendorAdapter jpaVendorAdapter) {\r\n        LocalContainerEntityManagerFactoryBean entityManagerFactoryBean = new LocalContainerEntityManagerFactoryBean();\r\n\r\n        entityManagerFactoryBean.setPersistenceUnitName("dale");\r\n        entityManagerFactoryBean.setDataSource(dataSource);\r\n        entityManagerFactoryBean.setJpaVendorAdapter(jpaVendorAdapter);\r\n        entityManagerFactoryBean.setPackagesToScan(PROPERTY_PACKAGES_TO_SCAN); // 스캔할 엔티티\r\n\r\n        Properties jpaProperties = new Properties();\r\n        jpaProperties.put(PROPERTY_NAME_HIBERNATE_DIALECT, environment.getRequiredProperty(PROPERTY_NAME_HIBERNATE_DIALECT));\r\n        jpaProperties.put(PROPERTY_NAME_HIBERNATE_FORMAT_SQL, environment.getRequiredProperty(PROPERTY_NAME_HIBERNATE_FORMAT_SQL));\r\n        jpaProperties.put(PROPERTY_NAME_HIBERNATE_HBM2DDL_AUTO, environment.getRequiredProperty(PROPERTY_NAME_HIBERNATE_HBM2DDL_AUTO));\r\n        // jpaProperties.put(PROPERTY_NAME_HIBERNATE_NAMING_STRATEGY, environment.getRequiredProperty(PROPERTY_NAME_HIBERNATE_NAMING_STRATEGY));\r\n        jpaProperties.put(PROPERTY_NAME_HIBERNATE_SHOW_SQL, environment.getRequiredProperty(PROPERTY_NAME_HIBERNATE_SHOW_SQL));\r\n\r\n        entityManagerFactoryBean.setJpaProperties(jpaProperties);\r\n\r\n        return entityManagerFactoryBean;\r\n    }\r\n\r\n  @Bean\r\n  public JpaVendorAdapter jpaVendorAdapter() {\r\n    HibernateJpaVendorAdapter adapter = new HibernateJpaVendorAdapter();\r\n    adapter.setDatabase(Database.H2);\r\n    adapter.setShowSql(true);\r\n    adapter.setGenerateDdl(false);\r\n    adapter.setDatabasePlatform("org.hibernate.dialect.H2Dialect");\r\n    return adapter;\r\n  }\r\n\r\n  @Bean\r\n  public DataSource dataSource() {\r\n    return new EmbeddedDatabaseBuilder()\r\n        .addScript("classpath:/com/habuma/spitter/db/jpa/schema.sql")\r\n        .addScript("classpath:/com/habuma/spitter/db/jpa/test-data.sql")\r\n        .build();\r\n  }\r\n\r\n}\r\n', NULL, '', 13, 0),
(1847, 'dale.seo', '', '', '2016-04-18 16:48:47', '', 'Push 취소하기', 'http://whiteship.me/?p=13516\r\n\r\npush 할 때 브랜치 이름 앞에 + 표시를 붙여주면 된다.\r\n\r\nfeature 브랜치에 커밋했었어야 했는데, 실수로 develop 브랜치에 커밋했을 때, push 취소하고 다시 feature 브랜치에 커밋하는 방법\r\n$ git reset HEAD^\r\n$ git push origin +develop\r\n$ git checkout -b feature/new-branch\r\n$ git commit -m ''~~~~''\r\n$ git push origin feature/new-branch', NULL, '', 14, 0),
(1848, 'dale.seo', '', '', '2016-04-18 18:00:30', '', 'Logback 설정 파일 찾는 순서', 'http://logback.qos.ch/manual/configuration.html#auto_configuration\r\n\r\n\r\nLet us begin by discussing the initialization steps that logback follows to try to configure itself:\r\n\r\nLogback tries to find a file called logback.groovy in the classpath.\r\n\r\nIf no such file is found, logback tries to find a file called logback-test.xml in the classpath.\r\n\r\nIf no such file is found, it checks for the file logback.xml in the classpath..\r\n\r\nIf no such file is found, service-provider loading facility (introduced in JDK 1.6) is used to resolve the implementation of com.qos.logback.classic.spi.Configurator interface by looking up the file META-INF\\services\\ch.qos.logback.classic.spi.Configurator in the class path. Its contents should specify the fully qualified class name of the desired Configurator implementation.\r\n\r\nIf none of the above succeeds, logback configures itself automatically using the BasicConfigurator which will cause logging output to be directed to the console.\r\n\r\nThe last step is meant as last-ditch effort to provide a default (but very basic) logging functionality in the absence of a configuration file.', NULL, '', 2, 0),
(1849, 'dale.seo', '', '', '2016-04-19 09:26:17', '', '[Logback] 에러 발생 시 jar 정보까지 표시하기', 'http://logback.qos.ch/manual/configuration.html#packagingData', NULL, '', 3, 0),
(1850, 'dale.seo', '', '', '2016-04-19 09:29:59', '', '[Logback] xml 대신 java로 설정하기', 'http://logback.qos.ch/manual/configuration.html#joranDirectly\r\n\r\nJoranConfigurator는 xml 설정 파일을 다시 읽어오기 위한 logback 내부 설정 프레임워크이다.\r\nxml 설정 파일을 통해 설정을 원하지 않는다면 JoranConfigurator를 사용할 이유는 없다.', NULL, '', 6, 0),
(1851, 'dale.seo', '', '', '2016-04-19 09:38:34', '', 'Logback 설정 파일 문법', 'http://logback.qos.ch/manual/configuration.html#syntax\r\n\r\n# configuration : 0개 이상의 appender와 0개 이상의 logger 그리고 1개 이하의 root 요소로 구성\r\n\r\n# appenders : 0 또는 1개의 layout, 0개 이상의 encoder, 0개 이상의 filter 요소로 구성', NULL, '', 6, 0),
(1852, 'dale.seo', '', '', '2016-04-19 10:04:02', '', '[Logback] 같은 로그가 여러줄 남을 때 (Appender additivity)', 'http://logback.qos.ch/manual/configuration.html#cumulative\r\n\r\nBy default, appenders are cumulative: a logger will log to the appenders attached to itself (if any) as well as all the appenders attached to its ancestors. Thus, attaching the same appender to multiple loggers will cause logging output to be duplicated.\r\n\r\nAppender additivity is not intended as a trap for new users. It is quite a convenient logback feature. For instance, you can configure logging such that log messages appear on the console (for all loggers in the system) while messages only from some specific set of loggers flow into a specific appender.', NULL, '', 5, 0),
(1853, 'dale.seo', '', '', '2016-04-19 14:53:12', '', '[Logback] 런타임에 Appender 추가하기', 'http://stackoverflow.com/questions/16910955/programmatically-configure-logback-appender', NULL, '', 3, 0),
(1854, 'dale.seo', '', '', '2016-04-19 20:06:50', '', '[Logback] 자바 설정 예제', 'https://akhikhl.wordpress.com/2013/07/11/programmatic-configuration-of-slf4jlogback/\r\nhttp://mailman.qos.ch/pipermail/logback-user/2013-July/004105.html\r\n\r\npackage org.utils;\r\n\r\nimport ch.qos.logback.classic.encoder.PatternLayoutEncoder;\r\nimport ch.qos.logback.classic.spi.ILoggingEvent;\r\nimport ch.qos.logback.core.rolling.FixedWindowRollingPolicy;\r\nimport ch.qos.logback.core.rolling.RollingFileAppender;\r\nimport ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy;\r\nimport ch.qos.logback.core.util.StatusPrinter;\r\n\r\nimport ch.qos.logback.classic.Logger;\r\nimport ch.qos.logback.classic.LoggerContext;\r\n\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class setupLogging\r\n{\r\n     public static void logbackInit()\r\n     {\r\n         Logger rootLogger = \r\n(Logger)LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME);\r\n\r\n         LoggerContext loggerContext = rootLogger.getLoggerContext();\r\n         loggerContext.reset();\r\n\r\n         RollingFileAppender<ILoggingEvent> rfAppender = new \r\nRollingFileAppender<ILoggingEvent>();\r\n         rfAppender.setContext(loggerContext);\r\n         rfAppender.setFile("log output.log");\r\n\r\n         FixedWindowRollingPolicy fwRollingPolicy = new \r\nFixedWindowRollingPolicy();\r\n         fwRollingPolicy.setContext(loggerContext);\r\n         fwRollingPolicy.setFileNamePattern("log output-%i.log.zip");\r\n         fwRollingPolicy.setParent(rfAppender);\r\n         fwRollingPolicy.start();\r\n\r\n         SizeBasedTriggeringPolicy<ILoggingEvent> triggeringPolicy = new \r\nSizeBasedTriggeringPolicy<ILoggingEvent>();\r\n         triggeringPolicy.setMaxFileSize("5MB");\r\n         triggeringPolicy.start();\r\n\r\n         PatternLayoutEncoder encoder = new PatternLayoutEncoder();\r\n         encoder.setContext(loggerContext);\r\n         encoder.setPattern("%-4relative [%thread] %-5level %logger{35} \r\n- %msg%n");\r\n         encoder.start();\r\n\r\n         rfAppender.setEncoder(encoder);\r\n         rfAppender.setRollingPolicy(fwRollingPolicy);\r\n         rfAppender.setTriggeringPolicy(triggeringPolicy);\r\n         rfAppender.start();\r\n\r\n         rootLogger.addAppender(rfAppender);\r\n\r\n         // generate some output\r\n\r\n         StatusPrinter.print(loggerContext);\r\n\r\n         rootLogger.debug("hello tt");\r\n     }\r\n}', NULL, '', 8, 0),
(1855, 'dale.seo', '', '', '2016-04-19 20:26:53', '', 'Logback 기본 설정 파일 바꾸기', '# java 세팅\r\nSystem.setProperty(ContextInitializer.CONFIG_FILE_PROPERTY, <filename>);\r\n\r\n# JVM 세팅\r\n-Dlogback.configurationFile=logback2.xml\r\n', NULL, '', 3, 0),
(1856, 'dale.seo', '', '', '2016-04-20 09:24:48', '', 'ServletContextListener를 구현하여 웹어플리케이션 구동 시점에 Logback 초기화 하기', 'http://blog.javaforge.net/post/30510859696/logback-webapp-startup\r\n\r\n\r\nCONFIGURING LOGBACK PROGRAMATICALLY ON WEB APPLICATION STARTUP\r\nLogback is a successor of Log4J and a wonderful logging library to use in Java Applications. \r\nRead about the reasons to prefer Logback over Log4j on this page. \r\nThis post describes just a simple usecase configuring Logback programmatically on Web Application startup.\r\n\r\nWhy should I want programmatic Logback configuration? Default Logback initialization (see Logback Manual) steps are:\r\n\r\n\r\nLogback tries to find a file called logback.groovy in the classpath.\r\nIf no such file is found, logback tries to find a file called logback-test.xml in the classpath.\r\nIf no such file is found, it checks for the file logback.xml in the classpath..\r\nIf neither file is found, logback configures itself automatically using the BasicConfigurator which will cause logging output to be directed to the console.\r\n\r\nSometimes however you may want to read the configuration located outside your web application (e.g. somewhere in the filesystem, JNDI, database,…). This can be done by implementing a custom ServletContextListener, that does the job.\r\n\r\nHere some sample code:\r\n\r\npublic class LogbackInitializer implements ServletContextListener {\r\n\r\n	private static final Logger logger = LoggerFactory\r\n			.getLogger(LogbackInitializer.class);\r\n\r\n	private static final String logbackConfigSysProp = "app.logback.config.location";\r\n\r\n	@Override\r\n	public void contextInitialized(ServletContextEvent sce) {\r\n\r\n		// init "Java Util Logging" bridge to forward JUL messages to SLF4J/Logback\r\n		SLF4JBridgeHandler.install();\r\n		\r\n		// here we reading system property specifing the location of the \r\n                // logback application''s configuration file\r\n		String logbackConfigLocation = System.getProperty(logbackConfigSysProp);\r\n\r\n		if (logbackConfigLocation == null || logbackConfigLocation.isEmpty()) {\r\n			sce.getServletContext().log(\r\n					"WARNING! No logback configuration found! Please configure ''"\r\n							+ logbackConfigSysProp + "'' system property!");\r\n		} else {\r\n\r\n			LoggerContext context = (LoggerContext) LoggerFactory.getILoggerFactory();\r\n			try {\r\n				JoranConfigurator configurator = new JoranConfigurator();\r\n				configurator.setContext(context);\r\n				// Call context.reset() to clear any previous configuration,\r\n				// e.g. default configuration. For multi-step configuration,\r\n				// omit calling context.reset().\r\n				context.reset();\r\n				configurator.doConfigure(logbackConfigLocation);\r\n\r\n				StatusPrinter.printInCaseOfErrorsOrWarnings(context);\r\n				logger.info("Logback logger configured successfully...");\r\n\r\n			} catch (JoranException e) {\r\n				sce.getServletContext().log("Error configuring logback!", e);\r\n			}\r\n		}\r\n	}\r\n\r\n	@Override\r\n	public void contextDestroyed(ServletContextEvent sce) {\r\n		logger.info("Destroying logback logger context...");\r\n		LoggerContext lc = (LoggerContext) LoggerFactory.getILoggerFactory();\r\n		lc.stop();\r\n	}\r\n}\r\nNote! Logback already provides a pre-defined system property logback.configurationFile to specify the external location of the configuration file. However if you want to use application specific property name (in case of multiple web apps running in the same server instance) or provide a not file-based configuration (e.g. external URL, database…) this should be the best way to configure logback.\r\n\r\nPRINT THIS POST WORDS: 344 NOTES: 2 0 Comments 8/30/12 — 10:17am SHORT URL: https://tmblr.co/ZwTERuSQbiMm\r\nFILED UNDER: #java  #web  #logback  #webapp \r\n \r\nnotblog liked this\r\ndoctor1325-blog liked this\r\njavaforge posted this\r\n \r\nPREVIOUS POST NEXT POST ARCHIVE RSS ASK A QUESTION\r\n\r\nThis website uses the NOTATIONS theme by BEN DELANEY, and is powered by TUMBLR.\r\n', NULL, '', 4, 0),
(1857, 'dale.seo', '', '', '2016-04-20 12:24:52', '', 'Bitwise XOR', 'https://www.hackerrank.com/challenges/maximizing-xor/topics/bitwise-xor', NULL, '', 3, 0),
(1858, 'dale.seo', '', '', '2016-04-20 13:24:10', '', 'Logger를 static 필드로 사용할 때 장단점', 'http://slf4j.org/faq.html#declared_static\r\nhttp://wiki.apache.org/commons/Logging/StaticLog', NULL, '', 5, 0),
(1859, 'dale.seo', '', '', '2016-04-20 22:01:50', '', 'Spring Cache 설정 방법 (어노테이션 주도)', '@Cacheable, @CacheEvict 같은 어노테이션을 이용하여 캐시를 사용하고 싶을 때,\r\n1) 어노테이션 주도 설정\r\n2) 캐시 매니저 구현체 빈을 등록\r\n\r\n# 자바 설정\r\n@Configuration\r\n@EnableCaching\r\npublic class CacheConfig {\r\n\r\n    @Bean\r\n    public CacheManager concurrentMapCacheManager() {\r\n        return new ConcurrentMapCacheManager("examples");\r\n    }\r\n\r\n}\r\n\r\n# XML 설정\r\n<cache:annotation-driven />', NULL, '', 7, 0),
(1860, 'dale.seo', '', '', '2016-04-20 22:07:03', '', 'Spring Cache 구현체 종류', '어떤 벤더의 캐시 매니저를 사용하더라도 스프링에서 캐시 추상화를 해주기 때문에,\r\n동일한 방법으로 캐시를 사용할 수가 있다.\r\n\r\nSimpleCacheManager\r\nNoOpCacheManager\r\nConcurrentMapCacheManager\r\nCompositeCacheManager\r\nEhCacheCacheManager\r\nRedisCacheManager\r\nGemfireCacheManager (스프링 데이터 GemFire)\r\n', NULL, '', 6, 0),
(1861, 'dale.seo', '', '', '2016-04-20 22:08:01', '', '프로필 별 Spring Cache 자바 설정 예제', 'package seo.dale.spring;\r\n\r\nimport net.sf.ehcache.CacheManager;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.cache.Cache;\r\nimport org.springframework.cache.annotation.EnableCaching;\r\nimport org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean;\r\nimport org.springframework.cache.concurrent.ConcurrentMapCacheManager;\r\nimport org.springframework.cache.ehcache.EhCacheCacheManager;\r\nimport org.springframework.cache.ehcache.EhCacheManagerFactoryBean;\r\nimport org.springframework.cache.support.SimpleCacheManager;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.context.annotation.Profile;\r\nimport org.springframework.core.io.ClassPathResource;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n@Configuration\r\n@EnableCaching\r\npublic class CacheConfig {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(CacheConfig.class);\r\n\r\n    @Bean\r\n    @Profile({"default", "local"})\r\n    public ConcurrentMapCacheManager concurrentMapCacheManager() {\r\n        log.debug("concurrentMapCacheManager");\r\n        return new ConcurrentMapCacheManager("examples");\r\n    }\r\n\r\n    @Bean\r\n    @Profile("dev")\r\n    public SimpleCacheManager simpleCacheManager(){\r\n        log.debug("simpleCacheManager");\r\n        SimpleCacheManager cacheManager = new SimpleCacheManager();\r\n        List<Cache> caches = new ArrayList<>();\r\n        caches.add(concurrentMapCacheFactoryBean().getObject());\r\n        cacheManager.setCaches(caches);\r\n        return cacheManager;\r\n    }\r\n\r\n    @Bean\r\n    @Profile("dev")\r\n    public ConcurrentMapCacheFactoryBean concurrentMapCacheFactoryBean(){\r\n        ConcurrentMapCacheFactoryBean cacheFactoryBean = new ConcurrentMapCacheFactoryBean();\r\n        cacheFactoryBean.setName("examples");\r\n        return cacheFactoryBean;\r\n    }\r\n\r\n    @Bean\r\n    @Profile("prod")\r\n    public EhCacheCacheManager ehCacheCacheManager(CacheManager chacheManager) {\r\n        log.debug("ehCacheCacheManager");\r\n        return new EhCacheCacheManager(chacheManager);\r\n    }\r\n\r\n    @Bean\r\n    @Profile("prod")\r\n    public EhCacheManagerFactoryBean ehCacheManagerFactoryBean() {\r\n        EhCacheManagerFactoryBean ehCacheManagerFactoryBean = new EhCacheManagerFactoryBean();\r\n        ehCacheManagerFactoryBean.setConfigLocation(new ClassPathResource("ehcache.xml"));\r\n        return ehCacheManagerFactoryBean;\r\n    }\r\n\r\n}', NULL, '', 8, 0),
(1862, 'dale.seo', '', '', '2016-04-20 22:21:57', '', 'Eh Cache Documentation', 'http://www.ehcache.org/documentation/', NULL, '', 3, 0),
(1863, 'dale.seo', '', '', '2016-04-20 22:32:06', '', '다중 캐시 매니저 사용하기 (CompositeCacheManager)', '리스트에 추가한 순서대로 캐시를 찾는다.\r\n따라서 자주 조회될 캐시 순서대로 넣는게 유리하다. (Memory Cache -> Local Cache -> Global Cache)\r\n\r\n@Bean\r\npublic CompositeCacheManager compositeCacheManager(nef.sf.ehcache.CacheManager chacheManager) {\r\n  CompositeCacheManager compositeCacheManager = new CompositeCacheManager();\r\n  List<CacheManager> cacheManagers = new ArrayList<>();\r\n  cacheManagers.add(new ConcurrentMapCacheManager());\r\n  cacheManagers.add(new EhCacheCacheManager(cacheManager);\r\n  compositeCacheManager.setCacheManagers(cacheManaers);\r\n  return compositeCacheManager ;\r\n}', NULL, '', 3, 0),
(1864, 'dale.seo', '', '', '2016-04-20 22:46:33', '', 'Spring Cache 적용 팁 (Interface VS class)', '인터페이스에 캐시 어노테이션을 적용해놓으면 모든 구현체 동일하게 적용되서 편리하다.\r\n또한 구현체에 캐시 어노테이션을 적용해놓으면 보기가 복잡하기 대문에 비추다.', NULL, '', 5, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(1865, 'dale.seo', '', '', '2016-04-20 23:00:44', '', '@Cacheable과 @CachePut 함께 사용하기 (맞춤형 캐시)', '@Cacheable가 선언된 메소드는 인자 값을 키로 캐시를 조회해서 없을 때만 메소드를 실행한다. (조건적 메소드 호출)\r\n@CachePut이 선언된 메소드는 항상 호출되고 반환 값을 캐시에 남긴다.\r\n\r\nDB 저장 후에 바로 조회할 확률이 높기 때문에 @CachePut으로 DB 저장 시점에 미리 캐시에 넣어두면,\r\n@Cacheable로 조회할 때 Hit률이 월등히 높아지게 된다.\r\n\r\n\r\n// id를 키로해서 캐시를 먼저 조회\r\n@Cacheable("sample")\r\nSample findOne(long id);\r\n\r\n// Sample 객체를 저장 후, id 값을 키로 Sample 객체를 캐시에 저장\r\n@CachePut(value = "sample", key ="result.id")\r\nSample save(Sample sample);', NULL, '', 10, 0),
(1866, 'dale.seo', '', '', '2016-04-20 23:10:41', '', '@Cacheable과 @CachePut의 속성', 'String value[] : 사용할 캐시 명\r\nString key : 맞춤형 캐시 키를 계산하기 위한 SpEL 표현식\r\nString condition : SpEL 표현식, 결과가 false이면, 캐시를 타지 않고 무조건 메소드를 호출한다. (이번 캐시 호출 원천 차단)\r\nString unless : SpEL 표현식, 결과가 true이면, 메소드 반환 값이 캐시에 등록되지 않게 한다. (메서드 호출 후 결과 값을 보고 다음 번 부터 캐시 호출 차단)\r\n ', NULL, '', 4, 0),
(1867, 'dale.seo', '', '', '2016-04-20 23:27:34', '', 'Spring Cache 사용 예제', 'package com.skplanet.storeplatform.ccs.example.cache.service;\r\n\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.cache.annotation.CacheConfig;\r\nimport org.springframework.cache.annotation.CacheEvict;\r\nimport org.springframework.cache.annotation.CachePut;\r\nimport org.springframework.cache.annotation.Cacheable;\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.concurrent.atomic.AtomicInteger;\r\n\r\n/**\r\n * 글로벌 캐시 활용 예제\r\n * @author 서대영/Store기술개발팀/SKP\r\n */\r\n@Component\r\n@CacheConfig(cacheNames = "ccs:example") // shares some common cache-related settings at class-level\r\npublic class GlobalCacheService {\r\n\r\n    public static final Logger LOGGER = LoggerFactory.getLogger(GlobalCacheService.class);\r\n\r\n    private final AtomicInteger counter = new AtomicInteger(1);\r\n\r\n    private Map<Integer, String> dummyMap; // 간결한 구현을 위해서 예제에서는 Map 객체를 사용했지만 실제 구현에서는 DB를 사용할 경우가 많을 것임\r\n\r\n    public GlobalCacheService() {\r\n        dummyMap = new HashMap<>();\r\n        for (int i = 1; i < 10; i++) {\r\n            dummyMap.put(counter.getAndIncrement(), "dummy" + i);\r\n        }\r\n    }\r\n\r\n    // triggers cache population\r\n    @Cacheable\r\n    public String find(int key) {\r\n        LOGGER.debug("# Didn''t hit the cache.");\r\n        simulateSlowService();\r\n        return dummyMap.get(key);\r\n    }\r\n\r\n    private void simulateSlowService() {\r\n        try {\r\n            long time = 2000L;\r\n            Thread.sleep(time);\r\n        } catch (InterruptedException e) {\r\n            throw new IllegalStateException(e);\r\n        }\r\n    }\r\n\r\n    public void create(String dummy) {\r\n        dummyMap.put(counter.getAndIncrement(), dummy);\r\n    }\r\n\r\n    // triggers cache eviction\r\n    @CacheEvict\r\n    public void remove(int key) {\r\n        dummyMap.remove(key);\r\n    }\r\n\r\n    // updates the cache without interfering with the method execution\r\n    @CachePut\r\n    public void update(int key, String dummy) {\r\n        dummyMap.put(key, dummy);\r\n    }\r\n\r\n    @CacheEvict(allEntries = true)\r\n    public void removeAll() {\r\n    }\r\n\r\n}', NULL, '', 5, 0),
(1868, 'dale.seo', '', '', '2016-04-21 14:13:59', '', '수정되는 칼럼 제한하는 방법', '@Column(insertable = true, updatable = false)', NULL, '', 3, 0),
(1869, 'dale.seo', '', '', '2016-04-22 18:35:31', '', 'log4jdbc-remix 스프링 설정 예제', 'Log4jdbcProxyDataSource의 생성자로 일반 DataSource를 넘기서 등록하고, Log4jdbcProxyDataSource를 일반 DataSource 대신에 SqlSessionFactory(MyBatis)나 EntityManager(JPA)에 꼽아서 사용한다.\r\n즉, Log4jdbcProxyDataSource가 다른 DataSource들을 감싸는 모양 (Decorator 패턴)\r\n\r\n- 직접 DataSource 구현체를 스프링에 빈 등록하는 경우에는 일반 DataSource를 Log4jdbcProxyDataSource의 생성자로 넘겨서 등록해준다.\r\n- JNDI DataSource의 경우에도 JNDI로부터 일반 DataSource를 확보 후에 Log4jdbcProxyDataSource의 생성자로 넘겨서 등록해준다.\r\n\r\n\r\n    <beans profile="dev,qa,stg,real">\r\n        <jee:jndi-lookup id="defaultDataSourceForSacJNDI" jndi-name="#{propertiesForSac[''jdbc.jndi.lookup'']}" />\r\n        <bean id="defaultDataSourceForSac" class="net.sf.log4jdbc.Log4jdbcProxyDataSource">\r\n            <constructor-arg ref="defaultDataSourceForSacJNDI" />\r\n        </bean>\r\n    </beans>\r\n\r\n    <beans profile="local">\r\n        <bean id="defaultDataSourceForSac" class="net.sf.log4jdbc.Log4jdbcProxyDataSource">\r\n            <constructor-arg>\r\n                <bean class="org.apache.tomcat.dbcp.dbcp.BasicDataSource" destroy-method="close">\r\n                    <property name="driverClassName"        value="#{propertiesForSac[''jdbc.driver'']}"      />\r\n                    <property name="url"                    value="#{propertiesForSac[''jdbc.url'']}"         />\r\n                    <property name="username"               value="#{propertiesForSac[''jdbc.username'']}"    />\r\n                    <property name="password"               value="#{propertiesForSac[''jdbc.password'']}"    />\r\n                    <property name="validationQuery"        value="select 1 from dual"            />\r\n                    <property name="connectionProperties"   value="autoReconnect=true;" />\r\n                    <property name="poolPreparedStatements" value="true"  />\r\n                    <property name="initialSize"            value="1"     />    <!-- 풀의 초기에 생성되는 커넥션의 개수 -->\r\n                    <property name="maxActive"              value="10"    />    <!-- 커넥션 풀이 제공할 최대 커넥션의 개수 -->\r\n                    <property name="maxIdle"                value="10"    />    <!-- 최소 보유 커넥션수 -->\r\n                    <property name="minIdle"                value="1"     />    <!-- Idle 상태에 풀이 소유한 최소 커넥션 갯수 -->\r\n                    <property name="maxWait"                value="10000" />    <!-- 커넥션이 존재하지 않을 때, 커넥션을 얻기까지 대기하는 최대 대기시간 -->\r\n                    <property name="removeAbandoned"        value="true"  />    <!-- 유효하지 않는 커넥션의 제거 여부 -->\r\n                    <property name="removeAbandonedTimeout" value="60"    />    <!-- 유효하지 않는 커넥션의 삭제시의 타임아웃 -->\r\n                </bean>\r\n            </constructor-arg>\r\n            <property name="logFormatter">\r\n                <bean class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter">\r\n                    <property name="loggingType" value="MULTI_LINE" />\r\n                </bean>\r\n            </property>\r\n        </bean>\r\n    </beans>', NULL, '', 5, 0),
(1870, 'dale.seo', '', '', '2016-04-22 22:59:37', '', 'Spring Security Method Security 메소드 보안 예제', '\r\n============================================================================================================\r\n# 설정 클래스\r\n - GlobalMethodSecurityConfiguration를 확장하고 @Configuration을 선언\r\n - configure 오버라이드는 웹 보안 설정 클래스(@EnableWebSecurity가 선언된)에서 설정해놓은 경우 필요 없음\r\n============================================================================================================\r\npackage seo.dale.spring.security.method;\r\n\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\r\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\r\nimport org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration;\r\n\r\n@Configuration\r\n@EnableGlobalMethodSecurity(securedEnabled = true)\r\npublic class SecuredServiceConfig extends GlobalMethodSecurityConfiguration {\r\n\r\n    @Override\r\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\r\n        auth.inMemoryAuthentication()\r\n                .withUser("guest").password("pass").roles("GUEST").and()\r\n                .withUser("user").password("pass").roles("USER").and()\r\n                .withUser("admin").password("pass").roles("ADMIN", "USER");\r\n    }\r\n\r\n    @Bean\r\n    public SecuredService securedService() {\r\n        return new SecuredService();\r\n    }\r\n\r\n}\r\n============================================================================================================\r\n# 보호 대상 메소드를 가진 클래스\r\n - 보호할 메소드에 @Secured를 선언하고, 필요한 권한들을 나열\r\n============================================================================================================\r\npackage seo.dale.spring.security.method;\r\n\r\nimport org.springframework.security.access.annotation.Secured;\r\n\r\npublic class SecuredService {\r\n\r\n    @Secured({"ROLE_ADMIN", "ROLE_USER"})\r\n    public void doSecurely() {\r\n        System.out.println("Securely done");\r\n    }\r\n\r\n}\r\n============================================================================================================\r\n# 단위 테스트\r\n - 인증이나 인가에 이슈가 있으면 예외를 발생 시킴\r\n============================================================================================================\r\npackage seo.dale.spring.security.method;\r\n\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\nimport org.junit.runner.RunWith;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.security.access.AccessDeniedException;\r\nimport org.springframework.security.authentication.AuthenticationCredentialsNotFoundException;\r\nimport org.springframework.security.authentication.BadCredentialsException;\r\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\r\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\r\nimport org.springframework.security.core.context.SecurityContext;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport org.springframework.test.context.ContextConfiguration;\r\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\r\n\r\nimport java.util.Arrays;\r\n\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(classes = SecuredServiceConfig.class)\r\npublic class SecuredServiceTest {\r\n\r\n    @Autowired\r\n    private SecuredService securedService;\r\n\r\n    @Before\r\n    public void setUp() throws Exception {\r\n        SecurityContextHolder.clearContext();\r\n    }\r\n\r\n    @Test(expected = AuthenticationCredentialsNotFoundException.class)\r\n    public void testWithoutCredential() throws Exception {\r\n        securedService.doSecurely();\r\n    }\r\n\r\n    @Test(expected = BadCredentialsException.class)\r\n    public void testWithBadCredential() throws Exception {\r\n        setupUser(new UsernamePasswordAuthenticationToken("user", "1234"));\r\n        securedService.doSecurely();\r\n    }\r\n\r\n    @Test(expected = AccessDeniedException.class)\r\n    public void testWithoutAuthority() throws Exception {\r\n        setupUser(new UsernamePasswordAuthenticationToken("user", "user", null));\r\n        securedService.doSecurely();\r\n    }\r\n\r\n    @Test(expected = AccessDeniedException.class)\r\n    public void testWithBadAuthority() throws Exception {\r\n        setupUser(new UsernamePasswordAuthenticationToken("user", "pass", Arrays.asList(new SimpleGrantedAuthority("ROLE_GUEST"))));\r\n        securedService.doSecurely();\r\n    }\r\n\r\n    @Test\r\n    public void testPassWithRoleUser() throws Exception {\r\n        setupUser(new UsernamePasswordAuthenticationToken("user", "pass"));\r\n        securedService.doSecurely();\r\n    }\r\n\r\n    @Test\r\n    public void testPassWithRoleAdmin() throws Exception {\r\n        setupUser(new UsernamePasswordAuthenticationToken("guest", "pass", Arrays.asList(new SimpleGrantedAuthority("ROLE_ADMIN"))));\r\n        securedService.doSecurely();\r\n    }\r\n\r\n    private void setupUser( UsernamePasswordAuthenticationToken authenticationToken) {\r\n        SecurityContext securityContext = SecurityContextHolder.getContext();\r\n        securityContext.setAuthentication(authenticationToken);\r\n    }\r\n\r\n}', NULL, '', 10, 0),
(1871, 'dale.seo', '', '', '2016-04-23 14:53:09', '', '1로만 이뤄진 32bit 이진수 만들기 ', 'int는 32bit 이지만 가장 왼쪽 bit를 signed bit로 쓰기 때문에, 1bit가 모잘라서 1로만 이뤄진 32bit를 저장할 수가 없다.\r\n따라서 long을 써야하고, Math 클래스를 사용하는 것보다 shift left bit operation을 쓰면 스마트하게 처리할 수 있다.\r\n\r\n    @Test\r\n    public void testSiftLeft() {\r\n        long intBinaryMaxIn32Bits = (1L << 32) - 1; // 4294967295\r\n        assertEquals((long) Math.pow(2, 32) - 1, intBinaryMaxIn32Bits);\r\n        String binaryString = Long.toBinaryString(intBinaryMaxIn32Bits);\r\n        assertEquals("11111111111111111111111111111111", binaryString);\r\n    }', NULL, '', 7, 0),
(1874, 'dale.seo', '', '', '2016-04-25 13:26:45', '', 'SQL 로깅을 위한 DataSource 사용법 (Log4jdbcProxyDataSource)', '============================================================================\r\n일반 DataSource를 Log4jdbcProxyDataSource로 감싸기만 하면 된다.\r\n============================================================================\r\n\r\n@Configuration\r\npublic class Log4jdbcConfig {\r\n\r\n	@Bean\r\n	public JdbcTemplate jdbcTemplate(DataSource dataSource) {\r\n		return new JdbcTemplate(dataSource);\r\n	}\r\n\r\n	@Bean\r\n	public Log4jdbcProxyDataSource log4jdbcProxyDataSource() {\r\n		EmbeddedDatabase embeddedDatabase = new  EmbeddedDatabaseBuilder()\r\n				.setType(EmbeddedDatabaseType.H2)\r\n				.addScripts("classpath:sql/examples.sql")\r\n				.build();\r\n\r\n		Log4JdbcCustomFormatter log4JdbcCustomFormatter = new Log4JdbcCustomFormatter();\r\n		log4JdbcCustomFormatter.setLoggingType(LoggingType.MULTI_LINE);\r\n\r\n		Log4jdbcProxyDataSource log4jdbcProxyDataSource = new Log4jdbcProxyDataSource(embeddedDatabase);\r\n		log4jdbcProxyDataSource.setLogFormatter(log4JdbcCustomFormatter);\r\n\r\n		return log4jdbcProxyDataSource;\r\n	}\r\n\r\n}\r\n\r\n\r\n\r\n============================================================================\r\n아래와 같이 driverClassName과 url을 바꾸는 방식은 요즘에는 잘 사용하지 않는다. (확장성 떨어짐)\r\n============================================================================\r\n : driver, url 수정\r\n<property name="driverClassName" value="net.sf.log4jdbc.DriverSpy"/>\r\n<property name="url"   \r\n            value="jdbc:log4jdbc:oracle:thin:@127.0.0.1:1521:ORCL"/>\r\n<property name="username" value="xxxx"/>\r\n<property name="password" value="xxxxx"/>\r\n\r\nhttp://beyondj2ee.tumblr.com/post/14507640070/spring-powerful-sql\r\n', NULL, '', 9, 0),
(1876, 'dale.seo', '', '', '2016-04-25 17:13:40', '', '@Primary 활용', 'http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Primary.html\r\n\r\n동일한 타입으로 다수의 빈을 등록되어 있을 때, 해당 빈을 주입받기 위해서 보통 @Qualifier를 사용한다.\r\n해당 반들의 거의 비슷한 빈도로 주입되거나, 여러가지 선택 사항의 빈 그룹이라면 @Qualifier를 사용이 적당하다.\r\n\r\n하지만 어느 특정 빈이 주로 사용되고, 나머지 빈들은 특정 사황에서만 사용된다면, (ex. MasterDataSrouce, SlaceDataSource)\r\n주로 사용되는 빈에 @Primary를 선언하여, @Qualifier없이 주입하면 최고 우선순위를 갖고 주입되게 하면 좋다.\r\n\r\n\r\n', NULL, '', 4, 0),
(1877, 'dale.seo', '', '', '2016-04-25 17:15:10', '', 'Master, Slave DataSource 스프링 자바 설정 (MyBatis)', 'http://stunstun.tistory.com/252\r\n\r\n\r\nSpring Boot 에서 myBatis 연동시 Multi DataSource 운용하기\r\n2015.12.03 16:24\r\nPosted in Spring Framework by 스턴스턴(chujinnoon)\r\n\r\nOverview\r\n\r\n애플리케이션 개발시에 단일DB에 Connection을 맺는것이 아니라 아래와 같이 둘이상의 DB와 Connection을 맺어야 할수가 있다.\r\n\r\nMaster / Slave DB를 구분하여 Connection을 맺어야 할때\r\n2개이상의 서로다른 DB를 애플리케이션에서 운용해야 할때\r\n이외의 스케일아웃에 대한 이슈로 인해 애플리케이션에서 복수의 DataSource를 운용해야 할때\r\n아래와 같은 순서로 Spring Boot 애플리케이션에서 myBatis연동시 2개이상의 DataSource를 관리하는 방법을 살펴보도록 하자\r\n\r\nDependencies 설정\r\n복수의 DataSource 설정\r\nmyBatis 설정\r\nMapper 인터페이스 정의\r\n테스트\r\nDependencies 설정\r\nmyBatis는 내부적은 JDBC를 사용하기 때문에 Spring Boot에서는 아래와 같이 jdbc starter와 myBatis 그리고 myBatis를 Spring 환경에서 손쉽게 연동할수 있도록 도와주는 mybatis-spring을 추가해야 한다.\r\n\r\nGradle\r\n\r\ncompile "org.springframework.boot:spring-boot-starter-jdbc"\r\ncompile "org.mybatis:mybatis:3.3.0"\r\ncompile "org.mybatis:mybatis-spring:1.2.3"\r\nMaven\r\n\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-jdbc</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.mybatis</groupId>\r\n    <artifactId>mybatis</artifactId>\r\n    <version>3.3.0</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.mybatis</groupId>\r\n    <artifactId>mybatis-spring</artifactId>\r\n    <version>1.2.3</version>\r\n</dependency>\r\n복수의 DataSource 설정\r\n현재 애플리케이션에서는 동일한 DB를 Master 와 Slave 세트로 구성하고 있다고 가정해보자.\r\n\r\n대용량의 트래픽을 처리하기 위해서는 단일 DB에서 모든 처리를 하는것보다는 INSERT/UPDATE/DELETE 과 같은 비용이 많이 드는 DML은 Master를 통해서\r\nSELECT와 같이 자주발생되는 DML은 Slave를 통해 처리한다면, 보다 효율적으로 한정된 자원을 활용할수 있을것이다.\r\n이를 위해서 Spring Boot 애플리케이션에서는 아래와 같이 Master / Slave에 대한 DataSource를 구분해서 정의할수가 있다.\r\n이후에 다른용도의 DataSource가 추가될수도 있으므로, 확장성을 위해서 DataSource를 설정하는 공통적인 로직은 DatabaseConfig 라는 추상클래스에 정의해보았다.\r\n\r\npublic abstract class DatabaseConfig {\r\n     \r\n    @Bean\r\n    public abstract DataSource dataSource();\r\n \r\n    protected void configureDataSource(org.apache.tomcat.jdbc.pool.DataSource dataSource, DatabaseProperties databaseProperties) {\r\n        dataSource.setDriverClassName(databaseProperties.getDriverClassName());\r\n        dataSource.setUrl(databaseProperties.getUrl());\r\n        dataSource.setUsername(databaseProperties.getUserName());\r\n        dataSource.setPassword(databaseProperties.getPassword());\r\n        dataSource.setMaxActive(databaseProperties.getMaxActive());\r\n        dataSource.setMaxIdle(databaseProperties.getMaxIdle());\r\n        dataSource.setMinIdle(databaseProperties.getMinIdle());\r\n        dataSource.setMaxWait(databaseProperties.getMaxWait());\r\n        dataSource.setTestOnBorrow(false);\r\n        dataSource.setTestOnReturn(false);\r\n    }\r\n}\r\n \r\n@Configuration\r\n@EnableTransactionManagement\r\n@EnableConfigurationProperties(MasterDatabaseProperties.class)\r\nclass MasterDatabaseConfig extends DatabaseConfig {\r\n     \r\n    @Autowired\r\n    private MasterDatabaseProperties masterDatabaseProperties;\r\n     \r\n    @Primary\r\n    @Bean(name = "masterDataSource", destroyMethod = "close")\r\n    public DataSource dataSource() {\r\n        org.apache.tomcat.jdbc.pool.DataSource masterDataSource = new org.apache.tomcat.jdbc.pool.DataSource();\r\n        configureDataSource(masterDataSource, masterDatabaseProperties);\r\n        return masterDataSource;\r\n    }\r\n     \r\n    @Bean\r\n    public PlatformTransactionManager transactionManager(@Qualifier("masterDataSource") DataSource masterDataSource) {\r\n        DataSourceTransactionManager transactionManager = new DataSourceTransactionManager(masterDataSource);\r\n        transactionManager.setGlobalRollbackOnParticipationFailure(false);\r\n        return transactionManager;\r\n    }\r\n}\r\n \r\n@Configuration\r\n@EnableConfigurationProperties(SlaveDatabaseProperties.class)\r\nclass SlaveDatabaseConfig extends DatabaseConfig {\r\n     \r\n    @Autowired\r\n    private SlaveDatabaseProperties slaveDatabaseProperties;\r\n     \r\n    @Bean(name = "slaveDataSource", destroyMethod = "close")\r\n    public DataSource dataSource() {\r\n        org.apache.tomcat.jdbc.pool.DataSource slaveDataSource = new org.apache.tomcat.jdbc.pool.DataSource();\r\n        configureDataSource(slaveDataSource, slaveDatabaseProperties);\r\n        return slaveDataSource;\r\n    }\r\n}\r\nmyBatis 설정\r\nDataSource에 대한 정의가 완료되었다면, myBatis에서는 구분되는 DataSource를 효율적으로 선택할수 있어야 한다.\r\n아래에서는 MasterMyBatisConfig / SlaveMyBatisConfig 클래스에서는 각각 Master/Slave DB에 Connection 하기 위해 적절한 DataSource를 Dependencies하여 SqlSessionFactory Bean을 등록하는것을 볼수있다.\r\n\r\n	@MapperScan의 속성\r\nbasePackages : 등록한 패키지부터 하위패키지의 정의된 Interface를 Mapper Interface로 자동으로 생성한다.\r\nannotationClass : 맵퍼 Interface를 패키지단위로 스캔하는것 뿐만 아니라, 인터페이스 클래스에 정의된 어노테이션을 기준으로 \r\n맵퍼 Interface를 참조하여 생성할수 있는 기능을 지원한다.\r\n@Master : Master DB에 Connection 하기 위한 DataSource를 활용한다.\r\n@Slave : Slave DB에 Connection 하기 위한 DataSource를 활용한다.\r\nsqlSessionFactoryRef : myBatis에서 복수의 DataSource를 활용하기 위해서 sqlSessionFactoryBean을 명시적으로 지정해줄 필요가 있다.\r\npublic abstract class MyBatisConfig {\r\n     \r\n    public static final String BASE_PACKAGE = "com.stunstun.spring.repository";\r\n    public static final String TYPE_ALIASES_PACKAGE = "com.stunstun.spring.repository.entity";\r\n    public static final String CONFIG_LOCATION_PATH = "classpath:META-INF/mybatis/mybatis-config.xml";\r\n    public static final String MAPPER_LOCATIONS_PATH = "classpath:META-INF/mybatis/mapper/**/*.xml";\r\n     \r\n    protected void configureSqlSessionFactory(SqlSessionFactoryBean sessionFactoryBean, DataSource dataSource) throws IOException {\r\n        PathMatchingResourcePatternResolver pathResolver = new PathMatchingResourcePatternResolver();\r\n        sessionFactoryBean.setDataSource(dataSource);\r\n        sessionFactoryBean.setTypeAliasesPackage(TYPE_ALIASES_PACKAGE);\r\n        sessionFactoryBean.setConfigLocation(pathResolver.getResource(CONFIG_LOCATION_PATH));\r\n        sessionFactoryBean.setMapperLocations(pathResolver.getResources(MAPPER_LOCATIONS_PATH));\r\n    }\r\n}\r\n \r\n@Configuration\r\n@MapperScan(basePackages = MyBatisConfig.BASE_PACKAGE, annotationClass = Master.class, sqlSessionFactoryRef = "masterSqlSessionFactory")\r\nclass MasterMyBatisConfig extends MyBatisConfig {\r\n \r\n    @Bean\r\n    public SqlSessionFactory masterSqlSessionFactory(@Qualifier("masterDataSource") DataSource masterDataSource) throws Exception {\r\n        SqlSessionFactoryBean sessionFactoryBean = new SqlSessionFactoryBean();\r\n        configureSqlSessionFactory(sessionFactoryBean, masterDataSource);\r\n        return sessionFactoryBean.getObject();\r\n    }\r\n}\r\n \r\n@Configuration\r\n@MapperScan(basePackages = MyBatisConfig.BASE_PACKAGE, annotationClass = Slave.class, sqlSessionFactoryRef = "slaveSqlSessionFactory")\r\nclass SlaveMyBatisConfig extends MyBatisConfig {\r\n     \r\n    @Bean\r\n    public SqlSessionFactory slaveSqlSessionFactory(@Qualifier("slaveDataSource") DataSource slaveDataSource) throws Exception {\r\n        SqlSessionFactoryBean sessionFactoryBean = new SqlSessionFactoryBean();\r\n        configureSqlSessionFactory(sessionFactoryBean, slaveDataSource);\r\n        return sessionFactoryBean.getObject();\r\n    }\r\n}\r\nMapper 인터페이스 정의\r\nMaster DB\r\n@Master\r\npublic interface UserMapper {\r\n \r\n    public List<User> selectList();\r\n     \r\n    public User selectOne(Long id);\r\n     \r\n    public User selectByUserName(@Param("userName") String userName);\r\n     \r\n    public void insert(User user);\r\n     \r\n    public void update(User user);\r\n     \r\n    public void delete(User user);\r\n}\r\nSlave DB\r\n@Slave\r\npublic interface UserReadOnlyMapper {\r\n \r\n    public List<User> selectList();\r\n     \r\n    public User selectOne(Long id);\r\n     \r\n    public User selectByUserName(@Param("userName") String userName);\r\n}\r\n테스트\r\nMaster DB\r\npublic class UserMapperTests extends AbstractTestableContext {\r\n     \r\n    @Autowired\r\n    private UserMapper userMapper; \r\n     \r\n    @Test\r\n    public void testInsert() {\r\n        User entity = new User();\r\n        entity.setUserName("stunstun");\r\n        entity.setPassword("stunstun");\r\n         \r\n        userMapper.insert(entity);\r\n    }\r\n}\r\nSlave DB\r\npublic class UserReadOnlyMapperTests extends AbstractTestableContext {\r\n \r\n    @Autowired\r\n    private UserReadOnlyMapper userReadOnlyMapper;\r\n     \r\n    @Test\r\n    public void selectOne() {\r\n        User entity = userReadOnlyMapper.selectByUserName("stunstun");\r\n        assertThat(entity, nullValue());\r\n    }\r\n}\r\nSummary\r\n이 포스팅의 글을 통해 Spring Boot에서 myBatis를 연동하면서 부딪힐수 있는 문제를 모두 해결하는데는 제한이 있을수 있어 아래에 Git에 샘플 프로젝트를 첨부해보았다.\r\n\r\nhttps://github.com/wjdsupj/spring-framework-examples/tree/master/spring-boot-mybatis-multi\r\nhttps://github.com/wjdsupj/spring-framework-examples/tree/master/spring-boot-mybatis-example\r\n\r\n\r\n카카오스토리\r\n트위터\r\n페이스북\r\n\r\n''Spring Framework'' 카테고리의 다른 글\r\nSpring Boot 에서 myBatis 연동시 Multi DataSource 운용하기  (0)	2015.12.03\r\nSpring Boot 에서 Java Config를 통해 myBatis 연동하기  (0)	2015.11.26\r\nSpring Boot 에서 JDBC 연동  (0)	2015.11.25\r\nSpring Boot 에서 myBatis의 TypeHandler와 Enum 관리하기  (0)	2015.10.11\r\nSpring Boot + Spring Loaded로 간편하게 개발하기  (0)	2015.05.29\r\nSpring Boot과 Gradle 프로젝트  (0)	2015.05.15\r\n Trackback 0 :  Comment 0\r\n\r\nhttp://stunstun.tistory.com/trackback/252    관련글 쓰기\r\nNAME \r\nPASSWORD \r\nURL \r\nhttp://\r\nSecret\r\n\r\nSubmit Comment\r\n« 1 2 3 4 5 ... 83 »\r\nCategories\r\nAll Contents (83)\r\n일상 & 블라블라 (11)\r\n개발자밑천 (14)\r\nFun Programming (0)\r\nTDD (0)\r\nComputer Fundamentals (1)\r\nDataStructure&Algorithm (4)\r\nOperating System & Network (3)\r\nDesign & Architecture (4)\r\nBooks & Seminar (2)\r\nJ2SE & J2EE (16)\r\nJava (11)\r\nServlet & JSP (4)\r\nSpring Framework (12)\r\nDatabase (3)\r\nRDBMS (3)\r\nCache & Distributed System (0)\r\nAndroid (13)\r\niOS (3)\r\nUnity (0)\r\nInfra (11)\r\nAWS (6)\r\nBuild & Distribution (4)\r\nRecent Articles(default)\r\nSpring Boot 에서 myBatis...\r\nSpring Boot 에서 Java Con...\r\nSpring Boot 에서 JDBC 연동.\r\nSpring Boot 에서 myBatis...\r\nAPI Gateway 의 인증 및 AP...\r\nRecent Comments\r\n정리가 깔끔하고 보기 좋네요.... by Seph\r\n좋은 내용 감사합니다. 많은... by 지나가던개발자\r\n좋은글 잘보고갑니다!. by 배곺픋다\r\n안드로이드 스튜디오에서 svn... by 최진규\r\nㅁㅇ. by ㅁㄴㅇ\r\nStatistics Graph\r\n\r\nCopyright © 2014 "스턴" 군의 개발 일지 All rights reserved. RSS Localog Tags Guestbook Admin Write Total : 90,846 Today : 165 Yesterday : 80\r\nCode Is Content by 마크쿼리 · GitHub · License · Powered by Tistory\r\nBack to Top ', NULL, '', 3, 0),
(1878, 'dale.seo', '', '', '2016-04-26 13:50:18', '', '커맨드 히스토리 확인하기', 'http://iprize.tistory.com/607\r\n\r\n~/.bash_history 에 커댄드 히스토리가 보관된다.\r\n\r\n$ history\r\n커맨드 히스토리 확인\r\n\r\n$ !<번호>\r\n커맨드 히스토리 내에서 알아낸 번호의 커맨드 다시 날리기\r\n\r\n$ !!\r\n바로 커맨드 다시 날리기\r\n\r\n$ export HISTTIMEFORMAT=''%d %B %Y %T CMD: ''\r\n히스토리 출력 포멧 변경\r\n\r\n$ !ls\r\n가장 최근에 ls로 시작하는 커맨드 실행\r\n\r\n$ ctrl + r\r\nreverse i search (!ls와 달리 검색 후에 실행)', NULL, '', 10, 0),
(1879, 'dale.seo', '', '', '2016-04-26 13:50:52', '', 'java 프로세스 다 죽이기', 'ps -ef |grep java |grep -v grep |awk ''{print "kill -9 " $2}'' |sh -v\r\n\r\n# .bash_profile\r\nalias killj="ps -ef|grep java|grep -v grep|awk ''{print \\"kill -9 \\" \\$2}'' |sh -v"', NULL, '', 18, 0),
(1880, 'dale.seo', '', '', '2016-04-26 16:40:31', '', 'Logback.xml 에서 Log4jdbc 로거 세팅 예제', '이정도가 너무 많이 남지 않고, SQL과 수행 시간, 결과 테이블 정도까지 볼 수 있어서 로컬에서 적당한 거 같다.\r\n상요에서는 jdbc.sqltiming만 켜야 할 듯\r\n\r\n    <!-- Log4jdbc -->\r\n    <logger name="jdbc" level="WARN" />\r\n    <logger name="jdbc.sqltiming" level="INFO" />\r\n    <logger name="jdbc.resultsettable" level="INFO" />', NULL, '', 6, 0),
(1881, 'dale.seo', '', '', '2016-04-27 22:43:35', '', '[Git 기본셋업] 출력결과 색상 활성화 하기', '$ git config --global color.ui ''auto''\r\n여러가지 색으로 터미널 보기', NULL, '', 9, 0),
(1882, 'dale.seo', '', '', '2016-04-27 23:17:36', '', 'warning: LF will be replaced by CRLF', 'http://stackoverflow.com/questions/17628305/windows-git-warning-lf-will-be-replaced-by-crlf-is-that-warning-tail-backwar\r\n\r\n원도우 운영 체제에서 Git을 사용하면 다음과 같은 경고가 발생한다.\r\nwarning: LF will be replaced by CRLF\r\n\r\nGit의 유닉스 기반이라서 줄바꿈 기호로 LF를 사용하는데, 윈도우는 CRLF를 사용하기 때문에 발생하는 경고이다.\r\n\r\ngit config --global core.autocrlf 로 확인해보면 true로 되어 있을 것이다.\r\n\r\n우리는 윈도우에서 작성된 파일이 유닉스 기반의 Git 저장소로 올라갈 때는 유닉스의 줄바꿈 기호(LF)로 바뀌는 것을 원하고,\r\n윈도우 파일 시스템으로 내려받을 때는 윈도우의 줄바꿈 기호(CRLF)를 사용하는 것을 원하기 때문에 그대로 두면 된다.\r\n\r\n', NULL, '', 4, 0),
(1883, 'dale.seo', '', '', '2016-04-27 23:25:28', '', 'git status', 'git st 보통 alias 등록을 해서 쓴다.\r\n\r\n다음과 같이 3가지 영역 (staged, tracked but unstaged, untracked) 으로 표시된다.\r\nstaged 영역에 있는 파일들은 초록색으로, unstaged와 untracked 영역에 있는 파일들은 빨간색으로 표시된다.\r\n\r\n===============================================================================\r\n$ git status\r\nOn branch master\r\nChanges to be committed:\r\n  (use "git reset HEAD <file>..." to unstage)\r\n\r\n        modified:   index.html\r\n\r\nOn branch master\r\nChanges not staged for commit:\r\n  (use "git add <file>..." to update what will be committed)\r\n  (use "git checkout -- <file>..." to discard changes in working directory)\r\n\r\n        modified:   index1.html\r\n\r\nUntracked files:\r\n  (use "git add <file>..." to include in what will be committed)\r\n\r\n        index2.html\r\n==========================================================================', NULL, '', 5, 0),
(1884, 'dale.seo', '', '', '2016-04-28 10:35:19', '', '[Java8] while(num --> 0)', '정확히 메소드 레퍼런스인지, 람다식인지, 무슨 문법인지는 모르겠다.\r\n일정 수만큼 루프를 돌릴 때, for 문 보다 훨씬 유용한 것 같다.\r\n\r\n	public static void main(String[] args) {\r\n		Scanner scanner = new Scanner(System.in);\r\n		int numOfTests = scanner.nextInt();\r\n\r\n		while (numOfTests --> 0) { // for (int i = 0; i < numOfTests; i++) {\r\n			int number = scanner.nextInt();\r\n			long count = Main.koong(number);\r\n			System.out.println(count);\r\n		}\r\n	}', NULL, '', 3, 0),
(1885, 'dale.seo', '', '', '2016-04-28 22:36:33', '', 'git add', '새로운 파일(Untracked Files)이나 기존 파일의 변경 사항(Unstaged Changes)을 스테이징 버퍼에 추가하기. 커밋 대기 시킴\r\n\r\n$ git add <file_name>\r\n특정 파일의 변경 사항을 스테이징 영역에 추가\r\n\r\n$ git add .\r\n현재 디텍토리 이하 모든 변경 사항을 스테이징 영역에 추가\r\n\r\n$ git add --all\r\n저장소 내의 모든 변경 사항을 스테이징 영역에 추가', NULL, '', 10, 0),
(1886, 'dale.seo', '', '', '2016-04-28 23:38:15', '', '로컬 저장소에서 특정 파일들만 Git 관리에서 제외시키기', '저장소 차원에서 무시할 패턴은 즉 다른 사람들도 무시해야 하는 패턴은 .gitignore 파일에 등록하고, \r\n개인 차원에서 무시할 패턴은 .git/info/exclude 파일에 등록한다.\r\n\r\n===========================================================\r\n.git/info/exclude 파일 예제\r\n===========================================================\r\n# 특정 파일\r\nabc.mp4\r\n\r\n# 특정 확장자\r\n*.mp4\r\n\r\n# 특정 폴더\r\nexperiments/\r\n\r\n# 특정 폴더/확장자\r\nlogs/*.log', NULL, '', 10, 0),
(1887, 'dale.seo', '', '', '2016-04-30 13:38:01', '', '브래친 생성 시기', '- 실험적인 변경 사항\r\n- 새로운 기능\r\n- 버그 수정', NULL, '', 2, 0),
(1888, 'dale.seo', '', '', '2016-04-30 14:21:35', '', '다른 브랜치의 변경 이력 가져와서 현재 브랜치와 합치는 3가지 방법', '# 1. Strait Merge\r\n - 다른 브랜치의 변경 이력 전체를 전체를 현재 브랜치에 합치기\r\n - git merge 커맨드가 합친 이후에 commit 까지 진행하므로, 추가로 commit 할 필요 없음\r\n\r\n$ git checkout <destination_branch>\r\n$ git merge <source_branch>\r\n\r\n\r\n# 2. Squashed Commit\r\n - 다른 브랜치로 부터 여러개의 커밋을 가져와 현재 브랜치의 최신 커밋 하나로 만듬\r\n - git --squash merge 커맨드가 변경 내용을 스테이징 영역에만 두므로, 여러 커밋을 아우를 수 있는 적당한 메세지를 결정하여 commit 해줘야함\r\n - 다른 브랜치의 커밋을 마치 현재 브랜치에서 동일하게 변경한 것 처럼 보이게 할 수 있음 (장점이 될 수도, 단점이 될 수도...)\r\n\r\n$ git checkout <destination_branch>\r\n$ git merge --squash <source_branch>\r\n$ git status // 스테이징 영역의 변경 내역 확인\r\n$ git commit -m <new_message_for_multiple_commits_of_source_branch>\r\n\r\n\r\n# 3. Cherry-picking\r\n- 다른 브랜치에서 특정 커밋들만 가져와서 현재 브랜치에 적용\r\n\r\n$ git checkout <source_branch>\r\n$ git log // 가져올 커밋 번호 확보\r\n$ git checkout <destination_branch>\r\n$ git cherry-pick <commit_number>\r\n\r\n여러 개의 커밋을 가져오려면\r\n$ git cherry-pick -n <commit_number_1>\r\n$ git cherry-pick -n <commit_number_2>\r\n...\r\n$ git cherry-pick -n <commit_number_n>\r\n$ git status // 가져온 변경 내역 확인\r\n$ git commit', NULL, '', 4, 0),
(1889, 'dale.seo', '', '', '2016-05-01 17:37:18', '', 'A Tab VS Spaces', 'http://blog.doortts.com/268\r\n\r\n개발 표준을 정할 때, 탭을 쓸지 공백을 쓸지를 반드시 명기해서 개발자 간에 통일되도록 해야한다.\r\n나는 개인적으로 공백 대신에 탭을 쓰게 강제하는 것이 더 설득력이 있어 보인다.', NULL, '', 2, 0),
(1890, 'dale.seo', '', '', '2016-05-01 21:35:24', '', 'git blame', '$ git blame <file_name>\r\n파일 내에서 라인 별로 커밋명, 커밋한 사람, 시간 정보를 출력\r\n\r\n$ git blame -L 12,13 test.html\r\ntest.html 파일의 12,13번째 라인에 대한 커밋명, 커밋한 사람, 시간 정보를 출력\r\n\r\n$ git blame -L 12,+2 test.html\r\ntest.html 파일의 12번째 라인을 포함해서 아래 2줄에 대한 커밋명, 커밋한 사람, 시간 정보를 출력\r\n\r\n$ git blame -L 12,-2 test.html\r\ntest.html 파일의 12번째 라인을 포함해서 위 2줄에 대한 커밋명, 커밋한 사람, 시간 정보를 출력\r\n', NULL, '', 3, 0),
(1891, 'dale.seo', '', '', '2016-05-01 21:54:38', '', 'git revert', '원복 커밋을 만들 때 쓰인다.\r\n\r\n$ git revert -m "메세지"\r\n최신 커밋을 원복하고 메세지로 커밋 로그를 남김\r\n\r\n$ git revert HEAD\r\n최신 커밋을 원복하고 커밋 메세지 화면 (HEAD^로 재변경)\r\n\r\n$ git revert HEAD --no-edit\r\n최신 커밋을 원복하고 바로 커밋 (HEAD^로 재변경)\r\n\r\n$ git revert -n HEAD\r\n최신 커밋을 원복하되 커밋하지 않고 스테이징 영역에만 보관 (--no--commit)\r\n여러 번 실행할 수 있으며 반드시 역순으로 실행해줘야 함\r\n', NULL, '', 9, 0),
(1892, 'dale.seo', '', '', '2016-05-01 22:07:28', '', 'git reset', '과거 상태로 저장소 재설정\r\n\r\n$ gir rest\r\nstaging에 넣은 변경 사항 모두 working directory로 원복\r\n\r\n=============================================================\r\n마지막 커밋 원복\r\n=============================================================\r\n$ git reset HEAD^\r\n마지막 커밋을 윈복하고, 변경사항들을 워킹 디렉토리에\r\n\r\n$ git reset --soft HEAD^\r\n마지막 커밋을 윈복하고, 변경사항들을 스테이징 영역으로\r\n\r\n$ git reset --hard HEAD^\r\n마지막 커밋을 윈복하고, 변경사항들도 모두 날려버림\r\n\r\n=============================================================\r\n아직 커밋되지 않고 스테이징이 있는 특정 파일 원복\r\n=============================================================\r\n$ git reset HEAD <file>\r\n스테이징된 변경 사항 원복 (워킹 디렉토리는 건드리지 않음)\r\n\r\n$ git reset <commit_num> --soft\r\n과거 커밋으로 저장소 재설정 하되, 이전 커밋을 모두 스테이징 영역에 놓음\r\n\r\n$ git reset <commit_num> --hard\r\n과거 커밋으로 저장소 재설정 해버림. 작업 디렉토리와 스테이징 영역까지 모두 과거 커밋으로 얄짤없이 돌려놓음\r\n\r\n\r\n* 참조 : reset 옵션\r\n--soft : Staging 상태로\r\n--mixed : Working Directory 상태로 (디폴트)\r\n--hard : Working Directory의 파일까지 모두 날림', NULL, '', 31, 0),
(1893, 'dale.seo', '', '', '2016-05-02 09:29:41', '', 'Stack, Queue 구현', 'Stack은 들어오는 구멍과 나가는 구멍이 동일하기 때문에 top 필드 하나만 있으면 된다.\r\n하지만 Queue는 들어오는 구멍과 나가는 구멍이 다르기 대문에 head, tail 필드를 필요로 한다.\r\n\r\n어떤 방식으로 구현하든 가급적 isFull과 isEmpty 내부 메소드를 구현하면 깔끔하게 코딩할 수 있다.', NULL, '', 9, 0),
(1894, 'dale.seo', '', '', '2016-05-02 11:27:30', '', 'RequestContextHolder 클래스에서 getRequestAttributes()와 RequestContextHolder.currentRequestAttributes() 메소드의 차이', 'http://welchsy.tistory.com/269\r\n\r\n# RequestContextHolder.getRequestAttributes() 메소드\r\nRequestAttributes가 없으면 null 반환\r\n\r\n# RequestContextHolder.currentRequestAttributes() 메소드\r\nRequestAttributes가 없으면 IllegalStateException 예외 발생', NULL, '', 10, 0),
(1895, 'dale.seo', '', '', '2016-05-02 17:17:24', '', 'ThreadLocal 활용 예제', 'package com.skplanet.storeplatform.framework.web.guid;\r\n\r\nimport com.skplanet.storeplatform.framework.core.exception.StorePlatformException;\r\nimport com.skplanet.storeplatform.framework.core.idgen.GuidGeneratorFactory;\r\nimport com.skplanet.storeplatform.framework.web.filter.flow.FlowConstants;\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.web.context.request.RequestAttributes;\r\nimport org.springframework.web.context.request.RequestContextHolder;\r\nimport org.springframework.web.context.request.ServletRequestAttributes;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\n\r\n/**\r\n * 자체 ThreadLocal 기반 GuidHolder 구현체 (실험)\r\n * @author 서대영/Store기술개발팀/SKP\r\n */\r\npublic class ThreadLocalGuidHolder {\r\n\r\n	private static final Logger logger = LoggerFactory.getLogger(ThreadLocalGuidHolder.class);\r\n\r\n	private static final ThreadLocal<String> stringThreadLocal= new ThreadLocal<>();\r\n\r\n	private String guidHeaderName;\r\n	private boolean initialized;\r\n\r\n	/**\r\n	 * Default GUID = x-guid\r\n	 */\r\n	public ThreadLocalGuidHolder() {\r\n		this(FlowConstants.X_GUID);\r\n	}\r\n\r\n	public ThreadLocalGuidHolder(String guidHeaderName) {\r\n		this.guidHeaderName = guidHeaderName;\r\n		initialized = false;\r\n	}\r\n\r\n	/**\r\n	 * 쓰레드 로컬에 GUID를 설정한다.\r\n	 */\r\n	public void setGuid() {\r\n		if (initialized) {\r\n			throw new StorePlatformException("GuidManager is already initialized.");\r\n		}\r\n\r\n		RequestAttributes requestAttributes = RequestContextHolder.currentRequestAttributes();\r\n		HttpServletRequest request = ((ServletRequestAttributes) requestAttributes).getRequest();\r\n\r\n		String guid = request.getHeader(guidHeaderName);\r\n		// If the guid request header is empty, generate a new guid.\r\n		if(StringUtils.isEmpty(guid)) {\r\n			guid = GuidGeneratorFactory.getDefaultInstance().getId();\r\n			logger.debug("Generating a new guid since the header is empty.");\r\n		}\r\n\r\n		stringThreadLocal.set(guid);\r\n		logger.debug("Setting GUID onto the thread local. : {}", guid);\r\n\r\n		initialized = true;\r\n	}\r\n\r\n\r\n	/**\r\n	 * 쓰레드 로컬 부터 GUID를 획득한다.\r\n	 */\r\n	public String getGuid() {\r\n		if (!initialized) {\r\n			throw new StorePlatformException("GuidManager has yet to be initialized.");\r\n		}\r\n\r\n		String guid = stringThreadLocal.get();\r\n		logger.debug("Getting GUID from the thread local. : {}", guid);\r\n\r\n		return guid;\r\n	}\r\n\r\n}\r\n\r\n\r\n==================================================================================\r\npackage com.skplanet.storeplatform.framework.web.guid;\r\n\r\nimport com.skplanet.storeplatform.framework.core.exception.StorePlatformException;\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\nimport org.springframework.mock.web.MockHttpServletRequest;\r\nimport org.springframework.web.context.request.RequestContextHolder;\r\nimport org.springframework.web.context.request.ServletRequestAttributes;\r\n\r\nimport static junit.framework.TestCase.fail;\r\nimport static org.junit.Assert.assertEquals;\r\n\r\n/**\r\n * @author 서대영/Store기술개발팀/SKP\r\n */\r\npublic class ThreadLocalGuidHolderWithHeaderTest {\r\n\r\n	private static final String TEST_GUID = "1462166258444-b3045911-7655-49c7-85a4-a45940730bd3";\r\n	private static final String GUID_HEADER_NAME = "x-test-guid";\r\n\r\n	private ThreadLocalGuidHolder guidHolder;\r\n\r\n	@Before\r\n	public void setUp() throws Exception {\r\n		MockHttpServletRequest request = new MockHttpServletRequest();\r\n		request.addHeader(GUID_HEADER_NAME, TEST_GUID);\r\n		ServletRequestAttributes servletRequestAttributes = new ServletRequestAttributes(request);\r\n		RequestContextHolder.setRequestAttributes(servletRequestAttributes);\r\n\r\n		guidHolder = new ThreadLocalGuidHolder(GUID_HEADER_NAME);\r\n	}\r\n\r\n	@Test(expected = StorePlatformException.class)\r\n	public void cannotGetGuidBeforeSetting() throws Exception {\r\n		guidHolder.getGuid();\r\n		fail();\r\n	}\r\n\r\n	@Test(expected = StorePlatformException.class)\r\n	public void cannotSetGuidTwice() throws Exception {\r\n		guidHolder.setGuid();\r\n		guidHolder.setGuid();\r\n		fail();\r\n	}\r\n\r\n	@Test\r\n	public void testSetAndGetGuid() throws Exception {\r\n		guidHolder.setGuid();\r\n\r\n		String guid1 = guidHolder.getGuid();\r\n		assertEquals(TEST_GUID, guid1);\r\n\r\n		String guid2 = guidHolder.getGuid();\r\n		assertEquals(guid1, guid2);\r\n	}\r\n\r\n}', NULL, '', 6, 0),
(1896, 'dale.seo', '', '', '2016-05-02 18:44:55', '', 'WebApplicationContext 에서 사용되는 Bean Scope', 'http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-factory-scopes-other\r\n\r\nDispatcherServlet, RequestContextListener, and RequestContextFilter all do exactly the same thing, namely bind the HTTP request object to the Thread that is servicing that request. This makes beans that are request- and session-scoped available further down the call chain.\r\n\r\nsingleton, prototpye 외에 request, session, application 등 새로운 Bean Scope을 사용할 수 있음.\r\n생명 주기가 긴 singleton에서 생명 주기가 짧은  request, session, application의 Scope의 빈을 참조하지 않도록 주의할 것.\r\n\r\n', NULL, '', 5, 0),
(1897, 'dale.seo', '', '', '2016-05-02 22:56:31', '', '릴리즈 브랜치', '릴리즈 브랜치는 프로젝트에서 이번 릴리즈에 포함하기로 한 기능 구현이 끝나면 생성한다.\r\n릴리즈 브랜치에스는 최소한의 변경만 발생하며, 버그나 로직의 수정에만 집중할 뿐 새로운 기능을 추가하지 않는다.\r\n새로운 기능은 개발 브랜치에 추가하도록 않다.\r\n릴리즈 브랜치는 해당 릴리즈가 요구하는 마지막 테스트가 통과하고 상용 배포까지 동안만 존재한다.\r\n릴리즈가 완료되면 해당 마스터와 개발 브랜치에 머지 후 태깅 후 릴리즈 브랜치는 삭제한다.', NULL, '', 2, 0),
(1898, 'dale.seo', '', '', '2016-05-02 23:07:32', '', '하나의 저장소에 여러 개 프로젝트릴 저장할 때 주의할 점', '해당 저장소의 프로젝트들이 동시에 릴리즈 되는지를 판단 기준으로 삼는다.\r\n동시에 릴리즈 된다면, 릴리즈 브랜치나 태깅 시점이 동일할 것이므로\r\n하나의 저장소에 여러 개의 프로젝트를 관리하는 것이 유리히다.\r\n\r\n하지만 하나의 저장소 내의 여러 프로젝트들이 릴리즈 일정이서로 다르다면,\r\n생성해야 할 브랜치와 태그 수가 기하급수적으로 늘어나므로\r\n프로젝트 각각을 별개의 저장소에 저장하는 것이 유리하다.', NULL, '', 2, 0),
(1899, 'dale.seo', '', '', '2016-05-03 10:03:07', '', 'Tree 관련 용어 정리', 'http://typeocaml.com/2014/11/26/height-depth-and-level-of-a-tree/\r\n\r\nDepth와 Level은 Root 부터 카운팅하고, Height는 Leaf부터 카운팅 한다고 보면 됨\r\n\r\n# Depth –The depth of a node is the number of edges from the node to the tree''s root node.\r\n - Note that the depth of the root is 0.\r\n\r\n# Level – The level of a node is defined by 1 + the number of connections between the node and the root.\r\n - Simply, level is depth plus 1.\r\n - the level of the root is 1.\r\n\r\n# Height of node – The height of a node is the number of edges on the longest downward path between that node and a leaf.\r\n', NULL, '', 2, 0),
(1900, 'dale.seo', '', '', '2016-05-03 10:59:46', '', 'ThreadLocal 개념', 'http://javacan.tistory.com/entry/ThreadLocalUsage\r\n\r\n# 이름이 ThreadLocal인 이유\r\n\r\nThreadLocal 변수의 생명 주기가 쓰레드 상에서 돌아가는 모든 일반 인스터스 메소드 입장에서는 Global 하지만, 하나의 Thread 입장에서는 Local하기 때문. (하나의 Thread 당, 하나의 ThreadLocal 변수만 존재)\r\n\r\n# ThreadLocal의 활용\r\n\r\nThreadLocal은 한 쓰레드에서 실행되는 코드가 동일한 객체를 사용할 수 있도록 해 주기 때문에 쓰레드와 관련된 코드에서 파라미터를 사용하지 않고 객체를 전파하기 위한 용도로 주로 사용되며, 주요 용도는 다음과 같다.\r\n\r\n사용자 인증정보 전파 - Spring Security에서는 ThreadLocal을 이용해서 사용자 인증 정보를 전파한다.\r\n트랜잭션 컨텍스트 전파 - 트랜잭션 매니저는 트랜잭션 컨텍스트를 전파하는 데 ThreadLocal을 사용한다.\r\n쓰레드에 안전해야 하는 데이터 보관\r\n이 외에도 쓰레드 기준으로 동작해야 하는 기능을 구현할 때 ThreadLocal을 유용하게 사용할 수 있다.\r\n', NULL, '', 17, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(1901, 'dale.seo', '', '', '2016-05-03 13:25:43', '', 'Synchronized 대신에 ThreadLocal 사용하기', 'http://netjs.blogspot.kr/2015/07/when-and-how-to-use-thread-local-class-in-java.html', NULL, '', 5, 0),
(1902, 'dale.seo', '', '', '2016-05-03 13:29:22', '', 'ThreadLocal이 일반적으로 클래스의 정적 필드로 사용되는 이유', 'http://stackoverflow.com/questions/2784009/why-should-java-threadlocal-variables-be-static\r\n\r\n꼭 정정 필드일 필요는 없음.\r\n인스턴스 필드일 경우에는 해당 클래스가 singleton이면 상관없음', NULL, '', 4, 0),
(1903, 'dale.seo', '', '', '2016-05-03 21:22:07', '', 'Git 서브모듈 클론하기', '===================================================================\r\n슈퍼모듈을 클론 후 git submodule 커맨드를 날려보면 다음과 같이 서브모듈 앞에 - 표시가 붙어 있다.\r\n===================================================================\r\n$ git submodule\r\n-b417a136e8cddccb382017a785a6f80d8b3f7640 dale-algorithm\r\n-245ece03b407a51add72a7d3c2dfe8c0c07c869c dale-demo\r\n-2256b8de4b62f9227f6f492ee89755bce698bdfc dale-example\r\n-287c95ed25bb51da947e8d22b5632f6474f303fd dale-spring\r\n-8b24819fb9c5186a50d0fb45639fb5839a1b2563 dale-util\r\n-f05972e7e00808832ac595d198006732337b3315 dale-web\r\n\r\n===================================================================\r\n클론을 원하는 서브모듈에서 대해서 update --init 커맨드(내부적으로 init 후 update 수행)를 날린다.\r\n===================================================================\r\n$ git submodule update --init dale-algorithm\r\nCloning into ''dale-algorithm''...\r\nremote: Counting objects: 1478, done.\r\nremote: Compressing objects: 100% (1165/1165), done.\r\nReceiving objects: 100% (1478/1478), 346.86 KiB | 59.00 KiB/s, done.\r\nremote: Total 1478 (delta 496), reused 469 (delta 79)\r\nResolving deltas: 100% (496/496), done.\r\nChecking connectivity... done.\r\nSubmodule path ''dale-algorithm'': checked out ''b417a136e8cddccb382017a785a6f80d8b3f7640''', NULL, '', 2, 0),
(1904, 'dale.seo', '', '', '2016-05-03 21:30:45', '', 'git submodule', '슈퍼모듈 저장소는 서브모듈 저장소들의 실제소스까지 관리하는 것이라 커밋번호만 관리하므로 주의\r\n\r\n$ git submodule\r\n서브모듈 목록 확인 (- 표시가 붙어 있는 서브모듈은 초기화 전이므로 init 필요, +표시가 붙어 있는 서브모듈은 변경되었으므로 update 필요)\r\n\r\n$ git submodule add <remote_url>\r\n원격주소에 대한 서브모듈 생성\r\n\r\n$ git submodule init <submodule>\r\n서브모듈에 대한 Git 저장소 초기화 (submodule 생략하면 모든 서브모듈에 대해)\r\n\r\n$ git submodule update <submodule>\r\n원격저장소에서 서브모듈의 최신상태 받아옴 (submodule 생략하면 모든 서브모듈에 대해)\r\n\r\n$ git submodule update --init <submodule>\r\ninit와 update를 차레대로 수행', NULL, '', 10, 0),
(1905, 'dale.seo', '', '', '2016-05-04 08:52:02', '', '비트 조작 꼼수', '^, ~, &, | 연산은 각각 비트 단위로 이루어 지기 때문에 한 비트에서 일어나는 일이 다른 비트에 영향을 미치지 않는 다는 사실을 명심한다.\r\n\r\nx ^ 0s = x\r\nx ^ 1s = ~x\r\nx ^ x = 0\r\nx ^ ~x = 1\r\n\r\nx & 0s = 0\r\nx & 1s = x\r\nx & x = 0\r\n\r\nx | 0s = x\r\nx | 1s = 1s\r\nx | x = x', NULL, '', 4, 0),
(1906, 'dale.seo', '', '', '2016-05-04 09:44:40', '', '이진수 문자열과 정수 간 상호 변환', '# 정수 -> 이진수 문자열 : Integer.toBinaryString(int i) 사용\r\n\r\n	assertEquals("1011", Integer.toBinaryString(11));\r\n\r\n# 이진수 문자열 -> 정수 : Integer.parseInt(String s, int radix) 사용\r\n\r\n	assertEquals(11, Integer.parseInt("1011", 2));', NULL, '', 5, 0),
(1907, 'dale.seo', '', '', '2016-05-04 10:12:40', '', '비트 마스킹', '특정 자리에 있는 비트들의 바꿀 때 사용한다.\r\n\r\n===================================================\r\npublic class BitMasker {\r\n\r\n	/**\r\n	 * n개의 1 만들기 \r\n	 */\r\n	public static int setAllToOne(int n) {\r\n		return (1 << n) - 1;\r\n	}\r\n	\r\n	/**\r\n	 * n번째를 1로 세팅 \r\n	 */\r\n	public static int setNthToOne(int a, int n) {\r\n		return a | (1 << n);\r\n	}\r\n	\r\n	/**\r\n	 * n번째가 1인지 검사\r\n	 * : 1은 0이랑 or 해도 1 \r\n	 */\r\n	public static boolean isNthOne(int a, int n) {\r\n		return !((a & (1 << n)) == 0);\r\n	}\r\n	\r\n	/**\r\n	 * n번째가 0인지 검사\r\n	 * : 0은 1이랑 and 해도 0\r\n	 */\r\n	public static boolean isNthZero(int a, int n) {\r\n		return (a & (1 << n)) == 0;\r\n	}\r\n	\r\n	/**\r\n	 * n번째를 0으로 세팅 \r\n	 */\r\n	public static int setNthToZero(int a, int n) {\r\n		return a & ~(1 << n);\r\n	}\r\n	\r\n	/**\r\n	 * n번째를 토글  \r\n	 */\r\n	public static int toggleNth(int a, int n) {\r\n		return a ^ (1 << n);\r\n	}\r\n	\r\n	/**\r\n	 * 1의 갯수 세기 \r\n	 */\r\n	public static int countOne(int n) {\r\n		if (n == 0) return 0;\r\n		return n % 2 + countOne(n/2);\r\n	}\r\n	\r\n	public static int countMin(int n) {\r\n		return n & -n;\r\n	}\r\n	\r\n}\r\n\r\n===================================================\r\npublic class BitMaskerTest {\r\n\r\n	@Test\r\n	public void test() {\r\n		int input = 25;\r\n		System.out.println("# Input : " + Integer.toBinaryString(input));\r\n			\r\n		for (int i = 0; i < 32; i++) {\r\n			if (i == 0 || i == 3 || i == 4) {\r\n				assertTrue(BitMasker.isNthOne(input, i));\r\n				assertFalse(BitMasker.isNthZero(input, i));\r\n			} else {\r\n				assertFalse(BitMasker.isNthOne(input, i));\r\n				assertTrue(BitMasker.isNthZero(input, i));\r\n			}\r\n		}\r\n		\r\n		int allToOne = BitMasker.setAllToOne(input);\r\n		System.out.println("# allToOne : " + Integer.toBinaryString(allToOne));\r\n		\r\n		int nthToOne = BitMasker.setNthToOne(input, 1);\r\n		System.out.println("# 1thToOne : " + Integer.toBinaryString(nthToOne));\r\n\r\n		int nthToZero = BitMasker.setNthToZero(input, 3);\r\n		System.out.println("# 3thToOne : " + Integer.toBinaryString(nthToZero));\r\n		\r\n		int toggleNth = BitMasker.toggleNth(input, 2);\r\n		System.out.println("# 2thToOne : " + Integer.toBinaryString(toggleNth));\r\n		\r\n		int countOne = BitMasker.countOne(input);\r\n		System.out.println("# countOne : " + countOne);\r\n		\r\n		int countMin = BitMasker.countMin(input);\r\n		System.out.println("# countMin : " + countMin);\r\n	}\r\n\r\n}\r\n\r\n===================================================\r\npublic class BitMaker2 {\r\n\r\n	public static boolean getBit(int num, int i) {\r\n		int mask = 1 << i;\r\n\r\n		System.out.printf("%32s\\n", Integer.toBinaryString(num));\r\n		System.out.printf("%32s\\n", Integer.toBinaryString(mask));\r\n		System.out.println("--------------------------------");\r\n		System.out.printf("%32s\\n", Integer.toBinaryString(num & mask));\r\n		System.out.println("================================");\r\n\r\n		return (num & mask) != 0;\r\n	}\r\n\r\n	public static int clearBit(int num, int i) {\r\n		int mask = ~(1 << i);\r\n\r\n		System.out.printf("%32s\\n", Integer.toBinaryString(num));\r\n		System.out.printf("%32s\\n", Integer.toBinaryString(mask));\r\n		System.out.println("--------------------------------");\r\n		System.out.printf("%32s\\n", Integer.toBinaryString(num & mask));\r\n		System.out.println("================================");\r\n\r\n		return num & mask;\r\n	}\r\n\r\n	public static int clearBitsMSBthroughI(int num, int i) {\r\n		int mask = (1 << i) - 1;\r\n\r\n		System.out.printf("%32s\\n", Integer.toBinaryString(num));\r\n		System.out.printf("%32s\\n", Integer.toBinaryString(mask));\r\n		System.out.println("--------------------------------");\r\n		System.out.printf("%32s\\n", Integer.toBinaryString(num & mask));\r\n		System.out.println("================================");\r\n\r\n		return num & mask;\r\n	}\r\n\r\n	public static int clearBitsIthrough0(int num, int i ) {\r\n		int mask = ~(-1 >>> (31 - i));\r\n		// int mask2 = -1 ^ ((1 << i + 1) - 1);\r\n\r\n		System.out.printf("%32s\\n", Integer.toBinaryString(num));\r\n		System.out.printf("%32s\\n", Integer.toBinaryString(mask));\r\n		System.out.println("--------------------------------");\r\n		System.out.printf("%32s\\n", Integer.toBinaryString(num & mask));\r\n		System.out.println("================================");\r\n\r\n		return num & mask;\r\n	}\r\n\r\n}\r\n\r\n===================================================\r\npublic class BitMasker2Test {\r\n\r\n	@Test\r\n	public void testGetBit() throws Exception {\r\n		assertFalse(BitMaker2.getBit(10, 0)); // 0\r\n		assertTrue(BitMaker2.getBit(10, 1)); // 1\r\n		assertFalse(BitMaker2.getBit(10, 2)); // 0\r\n		assertTrue(BitMaker2.getBit(10, 3)); // 1\r\n	}\r\n\r\n	@Test\r\n	public void testClearBit() throws Exception {\r\n		assertEquals(10, BitMaker2.clearBit(10, 0)); // 1010\r\n		assertEquals(8, BitMaker2.clearBit(10, 1)); // 1000\r\n		assertEquals(10, BitMaker2.clearBit(10, 2)); // 1010\r\n		assertEquals(2, BitMaker2.clearBit(10, 3)); // 0010\r\n	}\r\n\r\n	@Test\r\n	public void testClearBitsMSBthroughI() throws Exception {\r\n		assertEquals(0, BitMaker2.clearBitsMSBthroughI(10, 0)); // 0000\r\n		assertEquals(0, BitMaker2.clearBitsMSBthroughI(10, 1)); // 0000\r\n		assertEquals(2, BitMaker2.clearBitsMSBthroughI(10, 2)); // 0010\r\n		assertEquals(2, BitMaker2.clearBitsMSBthroughI(10, 3)); // 0010\r\n	}\r\n\r\n	@Test\r\n	public void testClearBitsIthrough0() throws Exception {\r\n		assertEquals(10, BitMaker2.clearBitsIthrough0(10, 0)); // 1010\r\n		assertEquals(8, BitMaker2.clearBitsIthrough0(10, 1)); // 1000\r\n		assertEquals(8, BitMaker2.clearBitsIthrough0(10, 2)); // 1000\r\n		assertEquals(0, BitMaker2.clearBitsIthrough0(10, 3)); // 0000\r\n	}\r\n\r\n\r\n	@Test\r\n	public void testName() throws Exception {\r\n		System.out.println(Integer.toBinaryString(-1));\r\n		System.out.println(Integer.toBinaryString(-2));\r\n		System.out.println(Integer.toBinaryString(-3));\r\n		System.out.println(Integer.toBinaryString(Integer.MIN_VALUE + 3));\r\n		System.out.println(Integer.toBinaryString(Integer.MAX_VALUE));\r\n		System.out.println(Integer.toBinaryString(-1 >> 5));\r\n		System.out.println(Integer.toBinaryString(-1 >>> 5));\r\n	}\r\n\r\n}', NULL, '', 4, 0),
(1908, 'dale.seo', '', '', '2016-05-05 12:10:30', '', 'git gc 저장소 이력 최적화', '저장소의 디스크 사용량이 비정상적으로 커졌을 때 실행해주면 좋을 것 같음\r\n\r\n$ git gc\r\nGit이 내부적으로 이력을 저장하는 방식을 최적화함 (이력은 변경되지 않음. 저장 방식만 최적화)\r\n저장소의 크기가 수십 퍼센트 감소하는 것을 볼 수 있다.\r\n\r\n$ git gc --aggressive\r\n한층 더 깊이 최적화한다. (시간이 더 걸리자만 그 만큼 가치가 있다)', NULL, '', 5, 0),
(1909, 'dale.seo', '', '', '2016-05-05 12:24:52', '', 'git archive 저장소 내보내기', '용량이 큰 지역 저장소를 메일 첨부할 때 유용하다.\r\n\r\n$ git archive --format=tar HEAD --prefix=dale-web |gzip > dale-web.tar.gz\r\nHEAD에 대한 스냅샵을 찍어준다.\r\ndale-web 디렉터리 아래에 모든 파일들을 넣고 tar 포멧으로 묶고, gzip 으로 압축한다.', NULL, '', 4, 0),
(1922, 'dale.seo', '', '', '2016-05-09 13:41:49', '', '뒤에 인자 생략하고 git pull 하도록 설정', 'http://www.gitguys.com/topics/the-configuration-file-branch-section/\r\nhttp://stackoverflow.com/questions/6089294/why-do-i-need-to-do-set-upstream-all-the-time\r\n\r\n아무 설정 없이 git pull 커맨드를 날리면 다음과 같이 remote와 branch 정보도 같이 입력하라고 나온다.\r\ngit pull 할 때 마다 이러면 너무 번거로우므로 다음과 같이 해당 브랜치의 remote와 merge에 대한 설정을 추가해준다.\r\n------------------------------------------------------------------------------------\r\n$ git pull\r\nThere is no tracking information for the current branch.\r\nPlease specify which branch you want to merge with.\r\nSee git-pull(1) for details\r\n\r\n    git pull <remote> <branch>\r\n\r\nIf you wish to set tracking information for this branch you can do so with:\r\n\r\n    git branch --set-upstream-to=origin/<branch> develop\r\n------------------------------------------------------------------------------------\r\n$ git branch git branch --set-upstream-to=origin/develop\r\n------------------------------------------------------------------------------------\r\n$ git config -e\r\n[branch "develop"]\r\n        remote = origin\r\n        merge = refs/heads/develop\r\n------------------------------------------------------------------------------------', NULL, '', 8, 0),
(1911, 'dale.seo', '', '', '2016-05-05 12:38:16', '', 'git rebase 이력 재정렬', '다른 브랜치나 태그의 이력을 현재 브랜치의 HEAD 아래로 내릴 때 사용한다. (그래프를 한 줄로 만들 수 있음)\r\n이미 원격 저장소에 push 한 브랜치에 대해서는 절대 rebase 하지 않도록 주의한다.\r\n\r\n$ git rebase <branch_or_tag>\r\n다른 브랜치나 태그를 이력을 재정렬 한다.\r\n\r\n$ vi <both_modified_file> : 충동 해결\r\n$ git add <both_modified_file>\r\n$ git rebase --continue\r\n충동을 해결 후에 계속해서 재정렬 한다.\r\n\r\n$ git rebase --skip\r\n충돌이 발생한 커밋을 건너띠고 재정렬 한다.\r\n\r\n$ git rebase --abort\r\n이력을 원복하고, 현재 브랜치로 체크아웃한다.\r\n\r\n\r\n\r\n', NULL, '', 16, 0),
(1912, 'dale.seo', '', '', '2016-05-05 13:02:16', '', 'git svn', 'Subversion -> Git 마이그레이션할 때 사용한다.\r\n\r\n$ git svn clone --prefix svn/ -s svn://abc.com\r\nSVN 디렉토리에 내에 Subversion 이 마이그레이션 된 Git 저장소를 만들어준다.\r\n-s : SVN 표준 디렉토리 레이아웃 (-b, -t 옵션 안 써도 됨)\r\n-b : 브랜치 디렉토리\r\n-t : 트렁크 디렉토리', NULL, '', 4, 0),
(1913, 'dale.seo', '', '', '2016-05-05 13:38:22', '', 'git checkout', '현재 브랜치를 특정 브랜치로 전환\r\n\r\n$ git checkout <file>\r\n$ git chekcout HEAD <file>\r\n워킹 디렉토리의 특정 파일의 변경 사항 원복\r\n\r\n$ git checkout <branch>\r\n다른 브랜치로 전환\r\n\r\n$ git checkout -b <branch>\r\n신규 브랜치를 생성하고 그 브랜치로 전환\r\n\r\n', NULL, '', 10, 0),
(1914, 'dale.seo', '', '', '2016-05-05 17:40:17', '', 'java.io VS java.nio.file', 'http://docs.oracle.com/javase/tutorial/essential/io/index.html\r\n\r\nMost of the classes covered in the I/O Streams section are in the java.io package. Most of the classes covered in the File I/O section are in the java.nio.file package.', NULL, '', 6, 0),
(1915, 'dale.seo', '', '', '2016-05-06 19:03:27', '', 'JDK7에서 도입된 새로운 File I/O mechanism (java.nio.file package)', 'http://docs.oracle.com/javase/tutorial/essential/io/fileio.html\r\nhttp://docs.oracle.com/javase/tutorial/essential/io/summary.html\r\n\r\nThe java.nio.file package provides extensive support for file and file system I/O. This is a very comprehensive API, but the key entry points are as follows:\r\n\r\nThe Path class has methods for manipulating a path.\r\nThe Files class has methods for file operations, such as moving, copy, deleting, and also methods for retrieving and setting file attributes.\r\nThe FileSystem class has a variety of methods for obtaining information about the file system.', NULL, '', 9, 0),
(1916, 'dale.seo', '', '', '2016-05-06 22:46:09', '', ' java.nio.file.Path/Paths 클래스 사용법', 'http://docs.oracle.com/javase/tutorial/essential/io/pathOps.html\r\n\r\n실제 해당 패스에 파일이나 디렉토리가 존재하지 않아도 상관없음.\r\n즉 Path 클래스는 파일이나 디렉토리를 나타낼 뿐 실제 파일 시스템을 참조하지 않는다.', NULL, '', 13, 0),
(1917, 'dale.seo', '', '', '2016-05-06 23:09:41', '', 'java.nio.Files 클래스 사용법', 'http://docs.oracle.com/javase/tutorial/essential/io/fileOps.html\r\n\r\n기존에 java.io.File 클래스 대신에 사용하는 게 권장된다.', NULL, '', 3, 0),
(1918, 'dale.seo', '', '', '2016-05-07 13:19:49', '', '다이내믹 프로그래밍과 재귀 문제의 차이', '다이내믹 프로그래맹은 재귀 문제를 풀 때와 같은 방식으로 접근해 나가야 한다.\r\n차이는 미래의 함수 호출을 처리하기 위해 중간 계산 결과를 캐시해 둔다는 것.', NULL, '', 2, 0),
(1919, 'dale.seo', '', '', '2016-05-08 22:44:56', '', 'Java7의 Files 클래스를 사용하여 파일 쓰고 읽기', '	@Test\r\n	public void testWriteAndReadText() throws IOException {\r\n		Path path = Paths.get("D:/tmp/test.txt");\r\n		Charset charset = Charset.forName("UTF-8");\r\n		String content = "이름 :\\n\\t서대영\\n나이 :\\n\\t34";\r\n\r\n		try (BufferedWriter writer = Files.newBufferedWriter(path, charset)) {\r\n			writer.write(content, 0, content.length());\r\n		}\r\n\r\n		try (BufferedReader reader = Files.newBufferedReader(path, charset)) {\r\n			String line;\r\n			while ((line = reader.readLine()) != null) {\r\n				System.out.println(line);\r\n			}\r\n		}\r\n	}', NULL, '', 5, 0),
(1920, 'dale.seo', '', '', '2016-05-09 10:03:33', '', '내가 구현한 최고의 병합 정렬 (Merge Sort)', '계속해서 주어진 배열을 절반으로 나눈 후, 절반 씩 각자 정렬 후 다시 합친다.\r\n\r\n\r\npackage seo.dale.algorithm.sort.merge;\r\n\r\nimport org.junit.Test;\r\n\r\nimport java.util.Arrays;\r\n\r\npublic class BestMergeSorter {\r\n\r\n	public static void mergeSort(int[] arr) {\r\n		sort(arr, 0, arr.length - 1);\r\n	}\r\n\r\n	private static void sort(int[] arr, int low, int high) {\r\n		System.out.printf("sort from %s to %s%n", low, high);\r\n		if (low >= high) {\r\n			return;\r\n		}\r\n\r\n		int mid = (low + high) / 2;\r\n		// 선 정렬\r\n		sort(arr, 0, mid);\r\n		sort(arr, mid + 1, high);\r\n		// 후 머지\r\n		merge(arr, low, mid, high);\r\n	}\r\n\r\n	private static void merge(int[] arr, int low, int mid, int high) {\r\n		System.out.printf("- merge between [%s, %s] and [%s, %s]%n", low, mid, mid, high);\r\n		int[] temp = new int[arr.length];\r\n\r\n		int currTemp = low, currLow = low, currHigh = mid + 1;\r\n\r\n		while (currLow <= mid && currHigh <= high) {\r\n			if (arr[currLow] < arr[currHigh]) {\r\n				temp[currTemp++] = arr[currLow++];\r\n			} else if (arr[currLow] > arr[currHigh]) {\r\n				temp[currTemp++] = arr[currHigh++];\r\n			} else {\r\n				temp[currTemp++] = arr[currLow++];\r\n				temp[currTemp++] = arr[currHigh++];\r\n			}\r\n		}\r\n\r\n		while (currLow <= mid) {\r\n			temp[currTemp++] = arr[currLow++];\r\n		}\r\n\r\n		while (currHigh <= high) {\r\n			temp[currTemp++] = arr[currHigh++];\r\n		}\r\n\r\n		for (int i = low; i <= high; i++) {\r\n			arr[i] = temp[i];\r\n		}\r\n	}\r\n\r\n\r\n	@Test\r\n	public void test() {\r\n		int[] arr = new int[9];\r\n		for (int i = 0; i < 9; i++) {\r\n			arr[i] = (int) (Math.random() * 9);\r\n		}\r\n		System.out.println(Arrays.toString(arr));\r\n		// Arrays.sort(arr);\r\n		mergeSort(arr);\r\n		System.out.println(Arrays.toString(arr));\r\n	}\r\n\r\n}', NULL, '', 8, 0),
(1921, 'dale.seo', '', '', '2016-05-09 11:28:13', '', '컨트롤러 단위 테스트 작성 시 필터 추가 방법', '@Resource\r\nprivate FilterChainProxy springSecurityFilterChain;\r\n\r\n@Resource\r\nprivate WebApplicationContext webApplicationContext;\r\n\r\nprivate MockMvc mockMvc;\r\n\r\n@Before\r\npublic void setUp() {\r\n    mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext)\r\n            .addFilter(springSecurityFilterChain)\r\n            .build();\r\n}', NULL, '', 9, 0),
(1923, 'dale.seo', '', '', '2016-05-09 23:13:05', '', '[Java7] FileVisitor를 활용하여 File Tree 출력하기', 'http://docs.oracle.com/javase/tutorial/essential/io/walk.html\r\n\r\n\r\n\r\npackage seo.dale.java.nio;\r\n\r\nimport org.junit.Test;\r\n\r\nimport java.io.IOException;\r\nimport java.nio.file.*;\r\nimport java.nio.file.attribute.BasicFileAttributes;\r\n\r\nimport static java.nio.file.FileVisitResult.*;\r\n\r\npublic class FileVisitorTest {\r\n\r\n	@Test\r\n	public void testWalkFileTree() throws Exception {\r\n		Files.walkFileTree(Paths.get("/git"), new SimpleFileVisitor<Path>() {\r\n			// Print information about\r\n			// each type of file.\r\n			@Override\r\n			public FileVisitResult visitFile(Path file, BasicFileAttributes attr) {\r\n				if (attr.isSymbolicLink()) {\r\n					System.out.format("Symbolic link: %s ", file);\r\n				} else if (attr.isRegularFile()) {\r\n					System.out.format("Regular file: %s ", file);\r\n				} else {\r\n					System.out.format("Other: %s ", file);\r\n				}\r\n				System.out.println("(" + attr.size() + "bytes)");\r\n				return CONTINUE;\r\n			}\r\n\r\n			// Print each directory visited.\r\n			@Override\r\n			public FileVisitResult preVisitDirectory(Path dir,  BasicFileAttributes attrs) {\r\n				System.out.format("Directory: %s%n", dir);\r\n				return CONTINUE;\r\n			}\r\n\r\n			// If there is some error accessing\r\n			// the file, let the user know.\r\n			// If you don''t override this method\r\n			// and an error occurs, an IOException\r\n			// is thrown.\r\n			@Override\r\n			public FileVisitResult visitFileFailed(Path file, IOException exc) {\r\n				System.err.println(exc);\r\n				return CONTINUE;\r\n			}\r\n		});\r\n	}\r\n}\r\n', NULL, '', 4, 0),
(1924, 'dale.seo', '', '', '2016-05-09 23:27:28', '', 'OS 별로 상이한 파일 경로 구분자 얻기', 'http://docs.oracle.com/javase/tutorial/essential/io/misc.html\r\n\r\n===============================================================================\r\nQuestion 2. When invoking format, what is the best way to indicate a new line?\r\n\r\nAnswer 2. Use the %n conversion — the \\n escape is not platform independent!\r\n===============================================================================\r\n\r\nPath String Separator\r\n\r\nThe path separator for POSIX file systems is the forward slash, /, and for Microsoft Windows is the backslash, \\. Other file systems might use other delimiters. To retrieve the Path separator for the default file system, you can use one of the following approaches:\r\n\r\nString separator = File.separator;\r\nString separator = FileSystems.getDefault().getSeparator();\r\nThe getSeparator method is also used to retrieve the path separator for any available file system.\r\n', NULL, '', 4, 0),
(1925, 'dale.seo', '', '', '2016-05-10 09:45:47', '', 'Quick Sort 로직 설명', 'http://www.playsw.or.kr/repo/cast/108', NULL, '', 3, 0),
(1926, 'dale.seo', '', '', '2016-05-10 10:29:18', '', '내가 구현한 최고의 퀵 정렬 (Quick Sort)', 'package seo.dale.algorithm.sort.quick;\r\n\r\nimport org.junit.Test;\r\n\r\nimport java.util.Arrays;\r\n\r\nimport static org.junit.Assert.assertTrue;\r\n\r\n/**\r\n 1) 피벗보다 우선순위가 낮은 값이 나올 때까지 low를 오른쪽으로 이동한다.\r\n 2) 피벗보다 우선순위가 높은 값이 나올 때까지 high를 왼쪽으로 이동한다.\r\n 3-1) 만약, low와 high가 교차되었다면, 피벗의 값과 high가 가리키는 값을 교환한다.\r\n 3-2) 그렇지 않다면, low와 high가 가리키는 값을 서로 바꾼다.\r\n */\r\npublic class BestQuickSorter {\r\n\r\n	public static void quickSort(int[] arr) {\r\n		sort(arr, 0, arr.length - 1);\r\n	}\r\n\r\n	private static void sort(int[] arr, int left, int right) {\r\n		System.out.printf("sort form %s to %s with %s%n", left, right, Arrays.toString(arr));\r\n		if (left >= right) {\r\n			return;\r\n		}\r\n\r\n		// 선 분리\r\n		int mid = partition(arr, left, right);\r\n		System.out.printf("mid : %s, arr : %s%n", mid, Arrays.toString(arr));\r\n		// 후 정렬\r\n		sort(arr, left, mid - 1);\r\n		sort(arr, mid + 1, right);\r\n\r\n	}\r\n\r\n	private static int partition(int[] arr, int left, int right) {\r\n		System.out.printf("partition form %s to %s%n", left, right);\r\n\r\n		// 피벗을 가장 왼쪽에 있는 값으로 선택함 (피벗 선택 전략은 바뀔 수 있음)\r\n		int pivot = left;\r\n		// low 위치는 left 보다 한 칸 오른쪽\r\n		int low = left + 1;\r\n		// high 위치는 right 위치와 동일\r\n		int high = right;\r\n\r\n		// low 인덱스와 high 인덱스가 교차되기 전까지,\r\n		while (low <= high) {\r\n			// low 인덱스는 피벗보다 큰 값이 나올 때까지 오른쪽으로 이동한다.\r\n			while (arr[low] <= arr[pivot]) {\r\n				low++;\r\n			}\r\n\r\n			// high 인덱스는 피벗보다 작은 값을 나올 때까지 왼쪽으로 이동한다.\r\n			while (arr[high] > arr[pivot]) {\r\n				high--;\r\n			}\r\n\r\n			// low 인덱스와 high 인덱스가 가리키는 값을 서로 바꾼다.\r\n			if (low < high) {\r\n				swap(arr, low, high);\r\n			}\r\n		}\r\n		// high 인덱스와 pivot 인덱스가 가리키는 값을 서로 바꾼다.\r\n		swap(arr, high, pivot);\r\n\r\n		return high;\r\n	}\r\n\r\n	private static void swap(int[] arr, int i, int j) {\r\n		int tmp = arr[i];\r\n		arr[i] = arr[j];\r\n		arr[j] = tmp;\r\n		// System.out.printf("- swap %s and %s => %s%n", i, j, Arrays.toString(arr));\r\n	}\r\n\r\n	@Test\r\n	public void test() {\r\n		int[] arr = {4, 2, 1, 3, 5, 6, 7, 9, 8, 5};\r\n		BestQuickSorter.quickSort(arr);\r\n		int[] sortedArr = {1, 2, 3, 4, 5, 5, 6, 7, 8, 9};\r\n		System.out.println(Arrays.toString(arr));\r\n		System.out.println(Arrays.toString(sortedArr));\r\n		assertTrue(Arrays.equals(arr, sortedArr));\r\n	}\r\n\r\n}\r\n', NULL, '', 5, 0),
(1928, 'dale.seo', '', '', '2016-05-10 23:22:29', '', '자바로 쉘 find 명령어 구현', 'http://docs.oracle.com/javase/tutorial/essential/io/find.html', NULL, '', 3, 0),
(1929, 'dale.seo', '', '', '2016-05-10 23:29:50', '', 'java.io.file 과 java.nio.file 간 마이그레이션, 공존', 'http://docs.oracle.com/javase/tutorial/essential/io/legacy.html\r\n\r\nJava7 이후 버전을 쓴다면 가급적 File 클래스는 안 쓰는 게 좋겠음', NULL, '', 7, 0),
(1930, 'dale.seo', '', '', '2016-05-11 09:29:08', '', '내가 구현한 최고의 이진 탐색 (Binary Search)', 'package seo.dale.algorithm.search.binary;\r\n\r\nimport org.junit.Test;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\n\r\n/**\r\n * @author 서대영/Store기술개발팀/SKP\r\n */\r\npublic class BestArrayBinarySearcher {\r\n\r\n	public static int searchIteratively(int[] arr, int toFind) {\r\n		int low = 0, high = arr.length - 1;\r\n		while (low <= high) {\r\n			System.out.printf("Search for %d from %d to %d%n", toFind, low, high);\r\n\r\n			int mid = (low + high) / 2;\r\n			if (arr[mid] == toFind) {\r\n				return mid;\r\n			}\r\n\r\n			if (toFind < arr[mid]) {\r\n				high = mid - 1;\r\n			} else {\r\n				low = mid + 1;\r\n			}\r\n		}\r\n		return -1;\r\n	}\r\n\r\n	@Test\r\n	public void testSearchIteratively() {\r\n		int a[] = {1, 3, 4, 5, 10, 13, 14, 15, 22};\r\n		assertEquals(1, searchIteratively(a, 3));\r\n		assertEquals(3, searchIteratively(a, 5));\r\n		assertEquals(6, searchIteratively(a, 14));\r\n		assertEquals(-1, searchIteratively(a, 2));\r\n		assertEquals(-1, searchIteratively(a, -1));\r\n		assertEquals(-1, searchIteratively(a, 100));\r\n	}\r\n\r\n	public static int searchRecursively(int[] arr, int toFind) {\r\n		return searchRecursively(arr, toFind, 0, arr.length - 1);\r\n	}\r\n\r\n	public static int searchRecursively(int[] arr, int toFind, int low, int high) {\r\n		if (low > high) {\r\n			return -1;\r\n		}\r\n\r\n		System.out.printf("Search for %d low %d high %d%n", toFind, low, high);\r\n\r\n		int mid = (low + high) / 2;\r\n		if (arr[mid] == toFind) {\r\n			return mid;\r\n		}\r\n\r\n		if (toFind < arr[mid]) {\r\n			return searchRecursively(arr, toFind, low, mid - 1);\r\n		} else {\r\n			return searchRecursively(arr, toFind, mid + 1, high);\r\n		}\r\n	}\r\n	\r\n	@Test\r\n	public void testSearchRecursively() {\r\n		int a[] = {1, 3, 4, 5, 10, 13, 14, 15, 22};\r\n		assertEquals(1, searchRecursively(a, 3));\r\n		assertEquals(3, searchRecursively(a, 5));\r\n		assertEquals(6, searchRecursively(a, 14));\r\n		assertEquals(-1, searchRecursively(a, 2));\r\n		assertEquals(-1, searchRecursively(a, -1));\r\n		assertEquals(-1, searchRecursively(a, 100));\r\n	}\r\n\r\n}', NULL, '', 2, 0),
(1931, 'dale.seo', '', '', '2016-05-11 17:10:42', '', 'Git Submodule 사용 시 .git 디렉토리 위치', 'git submodule  사용 시 서브 리파지토리 디렉토리에 가면 .git이 디렉토리가 아니라 파일임을 알 수 있다.\r\n실제 설정 파일은 슈퍼 리파지토리 디렉토리의 .git/modules/<submodule-name> 아래에 있다.', NULL, '', 2, 0),
(1932, 'dale.seo', '', '', '2016-05-12 11:34:26', '', 'git stash', 'https://git-scm.com/docs/git-stash\r\n워킹 디렉토리에서 아직 staged 되지 않은 변경 사항들을 나중을 위해 잠시 저장해둘 때 사용한다.\r\n보통 어떤 feature 브랜치에서 작업을 하다가 긴급 요청으로 master나 deveop 브랜치로 작업 전환을 해야할 때,\r\n작업하던 미완성된 내용을 commit하기 보다는 stash 해놓고 다른 브랜치로 check한다.\r\n(Stash 마다 이름을 정해줄 수 있는 것이 아님) 내부적으로 스택 자료구조에 이 변경 사항들을 저장해놓고 관리한다.\r\n\r\n$ git stash\r\n워킹 디렉토리에서 tracked 변경 사항을 치워둔다. (최신 커밋 상태로 복구된다.)\r\n\r\n$ git stash save "message"\r\n워킹 디렉토리에서 tracked 변경 사항을 치워둔다. (메세지와 함께)\r\n\r\n$ git stash -u\r\n워킹 디렉토리에서 tracked + untracked 반경 사항을 치워둔다.\r\n\r\n$ git stash -k\r\n$ git stash --keep-index\r\n이미 add된 staged 파일을 제외하고 unstaging 상태의 파일만 임시 저장해준다.\r\n\r\n$ git stash list\r\n스태시 스택 목록 보여줌\r\n\r\n$ git stash list --stat\r\n스태시 스택 목록을 diff와 함께 보여줌\r\n\r\n$ git stash show stash@{0}\r\n특정 스태시의 정보만 보여줌\r\n\r\n$ git stash show --patch\r\n최근 스태시의 정보를 자세히\r\n\r\n$ git stash apply\r\n마지막으로 치워둔 변경 사항(stash@{0})을 워킹 디렉토리 다시 불러온다.\r\n\r\n$ git stash apply stash@{3}\r\n4번째 특정 스태시 적용\r\n\r\n$ git stash drop\r\n최근 스태시를 적용없이 제거한다.\r\n\r\n$ git stash pop\r\n마지막으로 치워둔 변경 사항을 워킹 디렉토리 다시 불러오고 Stash 스택에서 삭제한다. (apply + drop)\r\n\r\n$ git stash branch <branch> stash@{0}\r\n새로운 브랜치를 만들고 최근 스태쉬를 pop\r\n\r\n$ git stash clear\r\n스태시 스택 리스트 비우기\r\n\r\n[ Stash Conflict ]\r\n아직 커밋하지 않은 파일과 stash 적용하려는 파일이 겹치는 경우 충돌이 발생하면서 stash apply가 거부된다.\r\n이럴 때는 git reset --hard HEAD로 아직 커밋하지 않은 파일을 날리거나, git commit으로 커밋 후에 stash apply 하도록 한다.\r\n', NULL, '', 41, 0),
(1933, 'dale.seo', '', '', '2016-05-12 11:37:52', '', '워킹 디렉토리에서 커밋되지 않은 변경사항 삭제하기', 'Remove your uncommitted changes\r\n\r\n$ git checkout -f\r\nRemove Tracked files\r\n\r\n$ git clean -fd\r\nRemove Untracked files', NULL, '', 3, 0),
(1934, 'dale.seo', '', '', '2016-05-12 13:31:53', '', 'Git - 간편 안내서', 'https://rogerdudler.github.io/git-guide/index.ko.html\r\n\r\nGit 입문자에게 강추!', NULL, '', 4, 0),
(1935, 'dale.seo', '', '', '2016-05-12 13:46:05', '', '워킹 디렉토리의 변경 사항을 Git이 모르게 유지하는 방법 git assume-unchanged vs skip-worktree - FallenGameR''s blog', ' http://stackoverflow.com/questions/13630849/git-difference-between-assume-unchanged-and-skip-worktree\r\nhttp://fallengamer.livejournal.com/93321.html', NULL, '', 6, 0),
(1936, 'dale.seo', '', '', '2016-05-12 13:49:15', '', 'git update-index', 'https://git-scm.com/docs/git-update-index\r\n\r\n$ git update-index --skip-worktree <file>\r\n워킹 디렉토리의 특정 파일을 변경 사항을 감지하지 않는다.\r\n\r\n$ git update-index --no-skip-worktree <file>\r\n워킹 디렉토리의 특정 파일을 변경 사항을 다시 감지한다. (하지만 원격 저장소에 파일 변경 사항은 감지한다.)\r\n\r\n$ git update-index --assume-unchanged <file>\r\n워킹 디렉토리의 특정 파일을 변경 사항을 감지하지 않는다.\r\n\r\n$ git update-index --no-assume-unchanged  <file>\r\n워킹 디렉토리의 특정 파일을 변경 사항을 다시 감지한다.', NULL, '', 10, 0),
(1937, 'dale.seo', '', '', '2016-05-13 10:29:08', '', '재귀 함수 로깅 아이디어 1- static int level', 'package CtCI.Ch02_LinkedLists.Q2_02_Return_Kth_To_Last;\r\n\r\nimport seo.dale.algorithm.sort.Introduction.library.AssortedMethods;\r\nimport seo.dale.algorithm.sort.Introduction.library.LinkedListNode;\r\n\r\npublic class QuestionA {\r\n\r\n	private static int level = 0;\r\n\r\n	private static String indent() {\r\n		StringBuilder builder = new StringBuilder();\r\n		for (int i = 0; i < level; i++) {\r\n			builder.append(". ");\r\n		}\r\n		return builder.toString();\r\n	}\r\n\r\n	private static void log(String msg) {\r\n		System.out.print(indent() + msg);\r\n	}\r\n\r\n	public static int printKthToLast(LinkedListNode head, int k) {\r\n		String data = head != null ? String.valueOf(head.data) : "null";\r\n		log("printKthToLast({" + data + "}, " + k + ")\\n");\r\n\r\n		if (head == null) {\r\n			log("=> return 0\\n");\r\n			return 0;\r\n		}\r\n\r\n		level++;\r\n		int index = printKthToLast(head.next, k) + 1;\r\n		level--;\r\n\r\n		log("# index, kth : " + index + ", " + k + "\\n");\r\n\r\n		if (index == k) {\r\n			System.out.println("===============================================================");\r\n			System.out.println(indent() + "#####" + k + "th to last node is " + head.data);\r\n			System.out.println("===============================================================");\r\n		}\r\n		log("=> return " + index + "\\n");\r\n		return index;\r\n	}\r\n	\r\n	public static void main(String[] args) {\r\n		int[] array = {0, 1, 2, 3, 4, 50, 6};\r\n		LinkedListNode head = AssortedMethods.createLinkedListFromArray(array);\r\n\r\n		printKthToLast(head, 2);\r\n	}\r\n\r\n}\r\n', NULL, '', 6, 0),
(1938, 'dale.seo', '', '', '2016-05-13 10:58:16', '', 'MDC 관련 유용한 정적 메소드들', '// MDC에 세팅된 사용자 필드에 대한 맵을 받아오기\r\nMap oriMDCContextMap = MDC.getCopyOfContextMap();\r\n\r\n// MDC에 세팅된 사용자 필드 초기화하기\r\nMDC.clear();\r\n\r\n// MDC에 사용자 필드를 맵으로 한번에 세팅하기\r\nMDC.setContextMap(oriMDCContextMap);', NULL, '', 6, 0),
(1939, 'dale.seo', '', '', '2016-05-13 12:56:00', '', 'Maven의 settings.xml 설정 파일', '# 로컬 Maven 설정 파일이다.\r\n# 위치 : ~/.m2/settings.xml\r\n\r\n# 설정 항목\r\n : 최상위 엘리먼트인 <settings/> 아래에 설정 엘리먼트들을 추가한다.\r\n - 로컬 메이븐 라파지토리 경로\r\n===================================================\r\n<localRepository>/Users/1002139/.m2/repository</localRepository>\r\n===================================================', NULL, '', 2, 0),
(1940, 'dale.seo', '', '', '2016-05-13 18:00:22', '', '유효한 pom.xml 출력하기', '$ mvn help:effective-pom\r\n유효한 pom.xml 출력하기\r\n부모 프로젝트들로 부터 상속받은 설정이나, 디폴트 설정들을 명시적으로 보고 싶을 때 활용한다.', NULL, '', 5, 0),
(1941, 'dale.seo', '', '', '2016-05-13 18:08:07', '', '<build/> 엘리먼트의 구성요소', '소스, 리소스, 테스트 소스, 테스트 리소스, 컴파일된 코드들을 어느 경로에 위치해야 하는지를 명시한다.\r\n3단계 디렉토리 구조를 2단계 디렉토리 구조 (ex. src/java)로 줄일 때 사용할 수 있다.\r\n\r\n    <build>\r\n        <sourceDirectory>src/main/java</sourceDirectory>\r\n        <scriptSourceDirectory>src/main/scripts</scriptSourceDirectory>\r\n        <testSourceDirectory>src/test/java</testSourceDirectory>\r\n        <outputDirectory>target/classes</outputDirectory>\r\n        <testOutputDirectory>target/test-classes</testOutputDirectory>\r\n        <resources>\r\n            <resource>\r\n                <directory>src/main/resources</directory>\r\n            </resource>\r\n        </resources>\r\n        <testResources>\r\n            <testResource>\r\n                <directory>src/test/resources</directory>\r\n            </testResource>\r\n        </testResources>\r\n        <directory>target</directory>\r\n        <finalName>dale-algorithm-0.0.1-SNAPSHOTT</finalName>\r\n        <pluginManagement>\r\n        .....\r\n        </pluginManagement>\r\n        <plugins>\r\n        .....\r\n        <plugins>\r\n    <build>', NULL, '', 6, 0),
(1942, 'dale.seo', '', '', '2016-05-14 12:04:59', '', 'URL 문법', '<스킴>://<사용자 이름>:<비밀번호>@<호스트>:<포트>/<경로>;<파라미터>?<질의>#<프래그먼트>\r\n<scheme>://<username>:<password>@<host>:<port>/<path>;<parameter>?<query>@<fragment>\r\n\r\nex) https://user:pswd@www.host.com:8080/file;p=1?q=2#fragment\r\n\r\n# 주의사항\r\n - 프래그먼트는 사버로 전송되지 않고, 문서 내 포거스 이동을 위해서 브라우져에서만 사용된다.', NULL, '', 9, 0),
(1943, 'dale.seo', '', '', '2016-05-14 12:24:58', '', '<base/> 태그', 'http://welcome365.tistory.com/35\r\n\r\na href 값을 상대경로로 지정해줬을 때 사용되는 기저 URL을 세팅해줄 때 쓰인다.\r\n명시적으로 세팅해주지 않으면 해당 리소스의 URL을 기져 URL로 사용한다.', NULL, '', 2, 0),
(1944, 'dale.seo', '', '', '2016-05-14 12:49:25', '', 'HTTP 메세지 문법', '# 요청 메세지\r\n\r\n<메서드> <URL> <HTTP 버전>\r\n<헤더>\r\n\r\n<엔티티 본문>\r\n\r\n# 응답 메세지\r\n\r\n<HTTP 버전> <상태 코드> <이유 구절>\r\n<헤더>\r\n\r\n<엔티티 본문>', NULL, '', 2, 0),
(1950, 'dale.seo', '', '', '2016-05-14 18:33:01', '', 'URL#openStream을 이용해서 URLConnection 없이 바로 인터넷 리소스 읽어내기', '간단하게 인터넷 리소스 읽는 어플리케이션 짤 때 유용할 것 같음\r\n\r\n    /**\r\n     * http://docs.oracle.com/javase/tutorial/networking/urls/readingURL.html\r\n     */\r\n    @Test\r\n    public void testOpenStream() throws IOException {\r\n        URL url = new URL("http://jsonplaceholder.typicode.com/posts/1");\r\n        InputStream inputStream = url.openStream();\r\n        Scanner scanner = new Scanner(inputStream);\r\n        while (scanner.hasNextLine()) {\r\n            System.out.println(scanner.nextLine());\r\n        }\r\n    }', NULL, '', 3, 0),
(1946, 'dale.seo', '', '', '2016-05-14 16:06:54', '', '자바에서 설명하는 TCP와 UDP', 'http://docs.oracle.com/javase/tutorial/networking/overview/networking.html\r\n\r\n\r\nTCP (Transmission Control Protocol) is a connection-based protocol that provides a reliable flow of data between two computers.\r\n\r\nUDP (User Datagram Protocol) is a protocol that sends independent packets of data, called datagrams, from one computer to another with no guarantees about arrival. UDP is not connection-based like TCP.\r\n\r\nThe TCP and UDP protocols use ports to map incoming data to a particular process running on a computer.', NULL, '', 4, 0),
(1948, 'dale.seo', '', '', '2016-05-14 16:20:15', '', '자바 네트워킹 튜토리얼', 'http://docs.oracle.com/javase/tutorial/networking/index.html', NULL, '', 4, 0),
(1949, 'dale.seo', '', '', '2016-05-14 17:14:00', '', 'URI 클래스와 URL 클래스의 차이', 'URI 클래스는 인터넷 상의 리소스에 대한 주소를 정확하게 표현하는데 사용된다.\r\n따라서 URL 문법 체크 및 인코딩 등을 지원하며, 실제 리소스에 대한 존재 여부나 접근 등을 상관하지 않는다.\r\n\r\nURL 클래스는 인터넷 상의 리소스에 실제 접근하는데 사용된다.\r\n하지만 URL 인코딩 등은 지원하지 않기 때문에 URI#toUrl 메소드를 이용해서 생성하기도 한다.', NULL, '', 5, 0),
(1951, 'dale.seo', '', '', '2016-05-14 18:34:56', '', 'URLConnection을 이용해서 인터넷 리소스 쓰고 읽기', '/**\r\n * http://docs.oracle.com/javase/tutorial/networking/urls/readingWriting.html\r\n */\r\npublic class URLConnectionTest {\r\n\r\n    @Test\r\n    public void testGetOutputStream() throws IOException {\r\n        URL url = new URL("http://jsonplaceholder.typicode.com/posts");\r\n        URLConnection urlConnection = url.openConnection();\r\n        // If you invoke the method setDoOutput(true) on the URLConnection, it will always use the POST method.\r\n        urlConnection.setDoOutput(true);\r\n        try (OutputStreamWriter writer = new OutputStreamWriter(urlConnection.getOutputStream())) {\r\n            writer.write("{title: ''foo'', body: ''bar'', userId: 1}");\r\n            writer.flush();\r\n        }\r\n\r\n        try (Scanner scanner = new Scanner(urlConnection.getInputStream())) {\r\n            while (scanner.hasNextLine()) {\r\n                System.out.println(scanner.nextLine());\r\n            }\r\n        }\r\n    }\r\n\r\n	@Test\r\n    public void testGetInputStream() throws IOException {\r\n        URL url = new URL("http://jsonplaceholder.typicode.com/posts/1");\r\n        URLConnection urlConnection = url.openConnection();\r\n        InputStream inputStream = urlConnection.getInputStream();\r\n        Scanner scanner = new Scanner(inputStream);\r\n        while (scanner.hasNextLine()) {\r\n            System.out.println(scanner.nextLine());\r\n        }\r\n    }\r\n\r\n}', NULL, '', 4, 0),
(1952, 'dale.seo', '', '', '2016-05-15 17:46:44', '', '자바 소켓 튜토리얼', 'http://docs.oracle.com/javase/tutorial/networking/sockets/index.html\r\n\r\nhttp://docs.oracle.com/javase/tutorial/networking/sockets/examples/EchoServer.java\r\nhttp://docs.oracle.com/javase/tutorial/networking/sockets/examples/EchoClient.java', NULL, '', 6, 0),
(1953, 'dale.seo', '', '', '2016-05-16 13:25:23', '', 'maven-war-plugin', '# 설정\r\n - <configuration/> 하위에 설정 정보를 추가한다.\r\n\r\n - <warSourceDirectory>webapp</warSourceDirectory>\r\n  : 웹 리소스의 디렉토리를 변경 (기본값 : src/main/webapp)\r\n\r\n - <failOnMissingWebXml>false</failOnMissingWebXml>\r\n  : Servlet3.0 이상에서 web.xml 없이 자바 웹 애플리케이션 설정\r\n\r\n\r\n\r\n\r\n\r\n======================================================\r\n  <build>\r\n    <plugins>\r\n      <plugin>\r\n        <groupId>org.apache.maven.plugins</groupId>\r\n        <artifactId>maven-war-plugin</artifactId>\r\n        <configuration>\r\n          <failOnMissingWebXml>false</failOnMissingWebXml>\r\n        </configuration>\r\n      </plugin>\r\n    </plugins>\r\n  </build>', NULL, '', 2, 0),
(1954, 'dale.seo', '', '', '2016-05-16 13:54:48', '', '메이븐 빌드 라이프사이클', '앤트 빌드 툴은 target 엘리먼 생성 및 target 엘리먼트 사이의 의존 관계를 개발자가 자유롭게 정희할 수 ㅣㅇㅆ다.\r\n그러나 메이븐은 모든 빌드 단위가 이미 정의되어 있으며, 개발자가 임의로 변경할 수 없다.\r\n\r\n# 기본 라이프 사이클\r\n - compile : 소스 파일을 컴파일(java -> class)하여 리소스와 함께 target/classes 디렉터리에 생성\r\n - test : 테스트 소스 파일을 컴파일(java -> class)하여 테스트 리소스와 함께 target/test-classes 디렉터리에 생성하고 테스트 수행\r\n - package : target/<project-name>에 taget/test-classes를 제외한 traget/classes의 디렉토리만 복사하고, target 디렉토리 루트에 packaging 엘러먼트 값에 따라 WAR나 JAR  파일 생성\r\n - install : 로컬 저장소로 복사 ($HOME/.m2/repository)\r\n - deploy : Nexus 같은 원격 로컬 메이븐 저장소에 전송 (다른 사용자/시스템과 공유를 위함)\r\n\r\n# clean 라이프 사이클\r\n - clearn : target 디렉토리 삭제\r\n\r\n# site 라이프 사이클\r\n - site : target/site 디렉토리에 프로젝트에 대한 문서 사이트 생성\r\n - site-deploy : 생성한 문서 사이트를 원격 서버에 배포', NULL, '', 10, 0),
(1956, 'dale.seo', '', '', '2016-05-16 22:34:25', '', 'ServerSocket으로 Server 구현하기', 'http://docs.oracle.com/javase/tutorial/networking/sockets/clientServer.html\r\n\r\nServer에서 무한 루프를 돌면서 Client를 accept 하면서 생성한 소켓을 Thread를 던진다.\r\n\r\n====================================================================\r\npublic class MultiServer {\r\n\r\n	public static void main(String[] args) {\r\n		int port = 4444;\r\n		try (ServerSocket serverSocket = new ServerSocket(port)) {\r\n			while (true) {\r\n				Socket socket = serverSocket.accept();\r\n				new ServerThread(socket).start();\r\n			}\r\n		} catch (IOException ex) {\r\n			ex.printStackTrace();\r\n		}\r\n	}\r\n\r\n}\r\n\r\n====================================================================\r\npublic class ServerThread extends Thread {\r\n\r\n	private Socket socket;\r\n\r\n	public ServerThread(Socket socket) {\r\n		super("ReverseServerThread");\r\n		this.socket = socket;\r\n	}\r\n\r\n	@Override\r\n	public void run() {\r\n		try (\r\n				BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\r\n				PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);\r\n		) {\r\n\r\n			writer.println("Welcome to my server thread!");\r\n\r\n			String inputLine, outputLine;\r\n			while ((inputLine = reader.readLine()) != null) {\r\n				System.out.println("[Server] Client : " + inputLine);\r\n				if ("exit".equalsIgnoreCase(inputLine)) {\r\n					break;\r\n				}\r\n				outputLine = new StringBuilder(inputLine).reverse().toString();\r\n				System.out.println("[Server] Server : " + outputLine);\r\n				writer.println(outputLine);\r\n			}\r\n\r\n			socket.close();\r\n		} catch (IOException ex) {\r\n			ex.printStackTrace();\r\n		}\r\n	}\r\n\r\n}\r\n\r\n====================================================================\r\npublic class Client {\r\n\r\n	public static void main(String[] args) {\r\n		try (\r\n				Scanner scanner = new Scanner(System.in);\r\n				Socket socket = new Socket("localhost", 4444);\r\n				BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\r\n				PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);\r\n				) {\r\n			String inputLine, outputLine;\r\n			while ((inputLine = reader.readLine()) != null) {\r\n				System.out.println("[Client] Server : " + inputLine);\r\n				outputLine = scanner.nextLine();\r\n				System.out.println("[Client] Client : " + outputLine);\r\n				writer.println(outputLine);\r\n			}\r\n		} catch (IOException ex) {\r\n			ex.printStackTrace();\r\n		}\r\n	}\r\n\r\n}', NULL, '', 6, 0),
(1957, 'dale.seo', '', '', '2016-05-16 22:44:31', '', 'Socket vs. ServerSocket', 'ServerSocket은 서버에서만 리스닝할 로컬 포트를 생성자에 넘겨서 생성하며, 클라이언트의 연결을 기다리기 위해 쓰인다.\r\n클라이언트와 연결이 맺어지면, accept 메소드를 호출하여 클라이언트와 연결된 Socket 객체를 받아올 수 있다.\r\n\r\n# ServerSocket 주요 메소드\r\n- SocketServer#SocketServer(int port)\r\n- Socket ServerSocket#accept\r\n- ServerSocket#close\r\n\r\nSocket은 서버와 클라이언트에서 각각 하나씩 한 쌍이 필요하며, 서로에게 데이터를 읽고 쓰기 위해서 사용된다.\r\n포트 할당은 운영체제에서 해주므로 어떤 포트가 할당될지는 알 수가 없다.\r\n클라이언트에서는 생성자에 원격 host와 원격 port를 넘겨서 자발적으로 생성하며, 어떤 로컬 port가 할당될지는 운영체제가 결정한다.\r\n서버에서는 ServerSocket에 accept 메소드를 호출하여 운영체제에 의해임의의 port가 할당된 Socket 객체를 반환받는다.\r\n\r\n# Socket 주요 메소드\r\n- Socket#Socket(String host, int port)\r\n- Socket#getInputStream\r\n- Socket#getOutputStream\r\n- Socket#close', NULL, '', 9, 0),
(1958, 'dale.seo', '', '', '2016-05-18 10:10:32', '', '배열로 부터 이진 트리 생성하기', '배열의 원소 순서대로 트리의 루트부터 리프까지 채워나간다.\r\n\r\n\r\n	@Test\r\n	public void test() {\r\n		int[] arr = new int[10];\r\n		for (int i = 0; i < 10; i++) {\r\n			arr[i] = i;\r\n		}\r\n		TreeNode node = createTreeFromArray1(arr);\r\n		node.print();\r\n	}\r\n\r\n	public static TreeNode createTreeFromArray1(int[] array) {\r\n		if (array.length < 0) {\r\n			return null;\r\n		}\r\n\r\n		TreeNode root = new TreeNode(array[0]);\r\n		Queue<TreeNode> queue = new LinkedList<>();\r\n		queue.add(root);\r\n\r\n		int idx = 1;\r\n		while (idx < array.length) {\r\n			TreeNode node = queue.element();\r\n			if (node.left == null) {\r\n				node.left = new TreeNode(array[idx++]);\r\n				queue.add(node.left);\r\n			} else if (node.right == null) {\r\n				node.right = new TreeNode(array[idx++]);\r\n				queue.add(node.right);\r\n			} else {\r\n				queue.remove();\r\n			}\r\n		}\r\n\r\n		return root;\r\n	}', NULL, '', 2, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(1959, 'dale.seo', '', '', '2016-05-18 18:10:56', '', 'MockFilterChain 사용법', 'http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/mock/web/MockFilterChain.html\r\nhttp://www.programcreek.com/java-api-examples/index.php?api=org.springframework.mock.web.MockFilterChain\r\n\r\n핉터 체인 상에서 하나의 필터가 어떻게 작동하는지 테스트해볼 수 있다.\r\n\r\n======================================================================================\r\n/**\r\n * FilterChain 상에서 FlowFilter 이 후에 요청/응답이 wrapping 옵션에 의해 랩핑 제어가 되는지 테스트\r\n * @author 서대영/Store기술개발팀/SKP\r\n */\r\npublic class FlowFilterChainTest {\r\n\r\n	/**\r\n	 * wrapping 옵션이 false 인 경우, 요청/응답을 래핑하면 안 된다.\r\n	 */\r\n	@Test\r\n	public void shouldNotWrap() throws Exception {\r\n		FlowFilter flowFilter = new FlowFilter();\r\n		flowFilter.setWrapping(false); // false가 기본값이라 안해도 됨\r\n\r\n		OncePerRequestFilter nextFilter = new OncePerRequestFilter() {\r\n			@Override\r\n			protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\r\n				System.out.println("Request Class : " + request.getClass().getSimpleName());\r\n				System.out.println("Response Class : " + response.getClass().getSimpleName());\r\n\r\n				assertFalse(request instanceof StoreplatformServletRequestWrapper);\r\n				assertFalse(response instanceof StoreplatformServletResponseWrapper);\r\n\r\n				filterChain.doFilter(request, response);\r\n			}\r\n		};\r\n\r\n		MockFilterChain filterChain = new MockFilterChain(new HttpServlet(){}, nextFilter);\r\n		flowFilter.doFilterInternal(new MockHttpServletRequest(), new MockHttpServletResponse(), filterChain);\r\n	}\r\n\r\n	/**\r\n	 * wrapping 옵션이 true 인 경우, 요청/응답을 래핑해줘야 한다.\r\n	 */\r\n	@Test\r\n	public void shouldWrap() throws Exception {\r\n		FlowFilter flowFilter = new FlowFilter();\r\n		flowFilter.setWrapping(true);\r\n\r\n		OncePerRequestFilter nextFilter = new OncePerRequestFilter() {\r\n			@Override\r\n			protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\r\n				System.out.println("Request Class : " + request.getClass().getSimpleName());\r\n				System.out.println("Response Class : " + response.getClass().getSimpleName());\r\n\r\n				assertTrue(request instanceof StoreplatformServletRequestWrapper);\r\n				assertTrue(response instanceof StoreplatformServletResponseWrapper);\r\n\r\n				filterChain.doFilter(request, response);\r\n			}\r\n		};\r\n\r\n		MockFilterChain filterChain = new MockFilterChain(new HttpServlet(){}, nextFilter);\r\n		flowFilter.doFilterInternal(new MockHttpServletRequest(), new MockHttpServletResponse(), filterChain);\r\n	}\r\n\r\n}', NULL, '', 4, 0),
(1960, 'dale.seo', '', '', '2016-05-18 21:51:00', '', 'Servlet3 메이븐 의존성', 'http://stackoverflow.com/questions/1979957/maven-dependency-for-servlet-3-0-api\r\n\r\nServlet2 대비 artifiactId가 바뀌어서 은근히 혼선이 있음\r\n\r\n Servlet 3.1, JSP 2.2, JSTL 1.2\r\n===================================================================\r\n		<dependency>\r\n			<groupId>javax.servlet</groupId>\r\n			<artifactId>javax.servlet-api</artifactId>\r\n			<version>3.1.0</version>\r\n			<scope>provided</scope>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>javax.servlet.jsp</groupId>\r\n			<artifactId>jsp-api</artifactId>\r\n			<version>2.2</version>\r\n			<scope>provided</scope>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>javax.servlet</groupId>\r\n			<artifactId>jstl</artifactId>\r\n			<version>1.2</version>\r\n		</dependency>\r\n\r\nServlet3.0.1\r\n=================================================================================\r\n		<dependency>\r\n			<groupId>javax.servlet</groupId>\r\n			<artifactId>javax.servlet-api</artifactId>\r\n			<version>3.0.1</version>\r\n			<scope>provided</scope>\r\n		</dependency>', NULL, '', 10, 0),
(1961, 'dale.seo', '', '', '2016-05-18 23:16:44', '', 'Servlet2.5 vs. Servlet3.0', 'http://stackoverflow.com/questions/1638865/what-are-the-differences-between-servlet-2-5-and-3\r\n\r\nweb.xml 이 사라지고 어노테이션으로 설정 가능하다는 게 가장 주목할 점인 듯..', NULL, '', 3, 0),
(1964, 'dale.seo', '', '', '2016-05-18 23:48:54', '', '응답 전문을 손실없이 로깅하는 방법', 'http://stackoverflow.com/questions/3242236/capture-and-log-the-response-body\r\n\r\nHttpServletResponseWrapper를 확장\r\n\r\n\r\n', NULL, '', 4, 0),
(1966, 'dale.seo', '', '', '2016-05-18 23:50:49', '', '요청/응답 전문 로깅하는 샘플', 'https://gist.github.com/calo81/2071634\r\n\r\nhttp://wetfeetblog.com/servlet-filer-to-log-request-and-response-details-and-payload/431\r\n\r\nhttps://angelborroy.wordpress.com/2009/03/04/dump-request-and-response-using-javaxservletfilter/', NULL, '', 9, 0),
(1967, 'dale.seo', '', '', '2016-05-18 23:56:43', '', 'Access Log Valve', 'http://www.techstacks.com/howto/configure-access-logging-in-tomcat.html\r\n\r\n요청/응답 전문을 남겨주는 거 같은데 더 공부해봐야 할 것 같음', NULL, '', 4, 0),
(1968, 'dale.seo', '', '', '2016-05-19 10:14:58', '', '재귀 함수 로깅 아이디어 2- 메서드 매개변수에 level 추가', 'indent나 log 메서드들은 따로 빼놓는게 깔끔\r\n\r\n	@Test\r\n	public void testCreateLevelLinkedList() {\r\n		int[] nodes_flattened = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\r\n		TreeNode root = AssortedMethods.createTreeFromArray(nodes_flattened);\r\n		List<List<TreeNode>> list = createLevelLinkedList(root);\r\n		printResult(list);\r\n	}\r\n\r\n	public static List<List<TreeNode>> createLevelLinkedList(TreeNode root) {\r\n		List<List<TreeNode>> list = new LinkedList<>();\r\n		createLevelLinkedList(root, list, 0);\r\n		return list;\r\n	}\r\n\r\n	public static void createLevelLinkedList(TreeNode node, List<List<TreeNode>> list, int level) {\r\n		if (node == null) {\r\n			return;\r\n		}\r\n\r\n		System.out.println(indent(level) + "Deal with [" + node.data + "]");\r\n\r\n		if (list.size() == level) {\r\n			list.add(new LinkedList<>());\r\n		}\r\n\r\n		List<TreeNode> row = list.get(level);\r\n		row.add(node);\r\n\r\n		log(list);\r\n\r\n		createLevelLinkedList(node.left, list, level + 1);\r\n		createLevelLinkedList(node.right, list, level + 1);\r\n	}\r\n\r\n	private static String indent(int level) {\r\n		StringBuilder builder = new StringBuilder();\r\n		for (int i = 0; i < level; i++) {\r\n			builder.append(". ");\r\n		}\r\n		return builder.toString();\r\n	}\r\n\r\n	private static void log(List<List<TreeNode>> lists) {\r\n		for (List<TreeNode> list : lists) {\r\n			for (TreeNode node : list) {\r\n				System.out.print(node.data + " ");\r\n			}\r\n			System.out.println();\r\n		}\r\n		System.out.println("================================================");\r\n	}\r\n', NULL, '', 3, 0),
(1969, 'dale.seo', '', '', '2016-05-19 17:41:05', '', 'StandardCharsets을 이용하여 UTF_8 상수 가져오기', 'http://stackoverflow.com/questions/6698354/where-to-get-utf-8-string-literal-in-java\r\n\r\n# Charset 타입\r\nCharset charset = StandardCharsets.UTF_8;\r\n\r\n# String 타입\r\nStirng charset = StandardCharsets.UTF_8.name();', NULL, '', 9, 0),
(1963, 'dale.seo', '', '', '2016-05-18 23:19:49', '', 'Servlet3.1에서 달라진 점과 Servlet 역사', 'http://stackoverflow.com/questions/19785436/how-servlet-3-1-differs-to-servlet-3-0\r\n\r\nReadListener와 WriteListener가 추가되어 Non Blocking I/O가 가능해졌다.\r\n\r\n\r\n\r\n+=============+================+====================+=============================================================================+\r\n|   VERSION   |      DATE      |   JAVA EE / JDK    |                             FEATURES / CHANGES                              |\r\n+=============+================+====================+=============================================================================+\r\n| Servlet 3.1 | May 2013       | JavaEE 7           | Non-blocking I/O, HTTP protocol upgrade mechanism                           |\r\n+-------------+----------------+--------------------+-----------------------------------------------------------------------------+\r\n| Servlet 3.0 | December 2009  | JavaEE 6, JavaSE 6 | Pluggability, Ease of development, Async Servlet, Security, File Uploading  |\r\n+-------------+----------------+--------------------+-----------------------------------------------------------------------------+\r\n| Servlet 2.5 | September 2005 | JavaEE 5, JavaSE 5 | Requires JavaSE 5, supports annotation                                      |\r\n+-------------+----------------+--------------------+-----------------------------------------------------------------------------+\r\n| Servlet 2.4 | November 2003  | J2EE 1.4, J2SE 1.3 | web.xml uses XML Schema                                                     |\r\n+-------------+----------------+--------------------+-----------------------------------------------------------------------------+\r\n| Servlet 2.3 | August 2001    | J2EE 1.3, J2SE 1.2 | Addition of Filter                                                          |\r\n+-------------+----------------+--------------------+-----------------------------------------------------------------------------+\r\n| Servlet 2.2 | August 1999    | J2EE 1.2, J2SE 1.2 | Becomes part of J2EE, introduced independent web applications in .war files |\r\n+-------------+----------------+--------------------+-----------------------------------------------------------------------------+\r\n| Servlet 2.1 | November 1998  | Unspecified        | First official specification, added RequestDispatcher, ServletContext       |\r\n+-------------+----------------+--------------------+-----------------------------------------------------------------------------+\r\n| Servlet 2.0 |                | JDK 1.1            | Part of Java Servlet Development Kit 2.0                                    |\r\n+-------------+----------------+--------------------+-----------------------------------------------------------------------------+\r\n| Servlet 1.0 | June 1997      |                    |                                                                             |\r\n+-------------+----------------+--------------------+-----------------------------------------------------------------------------+', NULL, '', 6, 0),
(1970, 'dale.seo', '', '', '2016-05-19 17:43:54', '', 'ContentCachingRequestWrapper - 전문을 캐싱해주는 요청 래퍼', 'getContentAsByteArray() 메소드를 통해 Wrapper로 부터 현재까지 ServletInputStream으로 부터 읽혀진 전문을 byte 배열로 받을 수 있다.\r\nServetInputStream을 여러번 읽을 수 없다는 사실은 변함이 없으니 주의하자.\r\n\r\n================================================================================\r\npackage springframework.web.util;\r\n\r\nimport org.apache.commons.io.IOUtils;\r\nimport org.junit.Test;\r\nimport org.springframework.mock.web.MockHttpServletRequest;\r\nimport org.springframework.web.util.ContentCachingRequestWrapper;\r\n\r\nimport javax.servlet.ServletInputStream;\r\n\r\nimport java.nio.charset.StandardCharsets;\r\n\r\nimport static junit.framework.TestCase.assertTrue;\r\nimport static org.junit.Assert.assertEquals;\r\n\r\npublic class ContentCachingRequestWrapperTest {\r\n\r\n	/**\r\n	 * Make sure that getInputStream() gets called before getContentAsByteArray() is called.\r\n	 */\r\n	@Test\r\n	public void testGetContentAsByteArray() throws Exception {\r\n		String content = "{\\n" +\r\n				"  \\"id\\": 1,\\n" +\r\n				"  \\"name\\": \\"Leanne Graham\\",\\n" +\r\n				"  \\"username\\": \\"Bret\\",\\n" +\r\n				"  \\"email\\": \\"Sincere@april.biz\\"\\n" +\r\n				"}";\r\n\r\n		MockHttpServletRequest request = new MockHttpServletRequest();\r\n		request.setContent(content.getBytes());\r\n		request.setCharacterEncoding(StandardCharsets.UTF_8.name());\r\n\r\n		ContentCachingRequestWrapper wrapper = new ContentCachingRequestWrapper(request);\r\n		ServletInputStream inputStream = wrapper.getInputStream();\r\n\r\n		// One the inputStream is read,\r\n		String content_1 = IOUtils.toString(inputStream);\r\n		System.out.println("#1. Read inputStream : " + content_1);\r\n		assertEquals(content, content_1);\r\n\r\n		// Nothing to read from the inputStream.\r\n		String content_2 = IOUtils.toString(inputStream);\r\n		System.out.println("#2. Read inputStream : " + content_2);\r\n		assertTrue(content_2.isEmpty());\r\n\r\n		// Nothing to read from the inputStream\r\n		String content_3 = IOUtils.toString(wrapper.getContentAsByteArray(), wrapper.getCharacterEncoding());\r\n		System.out.println("#3. getContentAsByteArray : " + content_3);\r\n		assertEquals(content, content_3);\r\n	}\r\n\r\n}', NULL, '', 7, 0),
(1971, 'dale.seo', '', '', '2016-05-19 22:30:44', '', 'SinglyLinkedList 간단 구현', 'http://crunchify.com/how-to-implement-a-linkedlist-class-from-scratch-in-java/\r\n\r\nhead와 size만 관리하는 간단한 버전\r\n\r\n=======================================================================================\r\npublic class SinglyLinkedList<T> {\r\n\r\n	private Node<T> head;\r\n	private int size;\r\n\r\n	public SinglyLinkedList() {\r\n	}\r\n\r\n	public void add(T data) {\r\n		if (head == null) {\r\n			head = new Node<>(data);\r\n		} else {\r\n			Node<T> current = head;\r\n			while (current.getNext() != null) {\r\n				current = current.getNext();\r\n			}\r\n			current.setNext(new Node<>(data));\r\n		}\r\n		size++;\r\n	}\r\n\r\n	public T get(int index) {\r\n		if (index < 0 || index >= size) {\r\n			return null;\r\n		}\r\n\r\n		Node<T> current = head;\r\n		for (int i = 0; i < index; i++) {\r\n			current = current.getNext();\r\n		}\r\n\r\n		return current.getData();\r\n	}\r\n\r\n	public boolean remove(int index) {\r\n		if (index < 0 || index >= size) {\r\n			return false;\r\n		}\r\n\r\n		Node<T> current = head;\r\n		for (int i = 0; i < index  - 1; i++) {\r\n			current = current.getNext();\r\n		}\r\n\r\n		current.setNext(current.getNext().getNext());\r\n		size--;\r\n\r\n		return true;\r\n	}\r\n\r\n	public int size() {\r\n		return size;\r\n	}\r\n\r\n	@Override\r\n	public String toString() {\r\n		StringBuilder builder = new StringBuilder();\r\n		Node<T> current = head;\r\n		while (current != null) {\r\n			builder.append(current.getData());\r\n			builder.append("->");\r\n			current = current.getNext();\r\n		}\r\n		if (builder.length() > 2) {\r\n			builder.setLength(builder.length() - 2);\r\n		}\r\n		return builder.toString();\r\n	}\r\n\r\n	private class Node<T> {\r\n\r\n		private T data;\r\n		private Node<T> next;\r\n\r\n		public Node(T data) {\r\n			this.data = data;\r\n			next = null;\r\n		}\r\n\r\n		public T getData() {\r\n			return data;\r\n		}\r\n\r\n		public void setData(T data) {\r\n			this.data = data;\r\n		}\r\n\r\n		public Node<T> getNext() {\r\n			return next;\r\n		}\r\n\r\n		public void setNext(Node<T> next) {\r\n			this.next = next;\r\n		}\r\n\r\n	}\r\n\r\n}', NULL, '', 5, 0),
(1972, 'dale.seo', '', '', '2016-05-20 13:29:37', '', 'ContentCachingResponseWrapper - 전문을 캐싱해주는 응답 래퍼', '전문을 래퍼의 내부 필드에도 쓰는 방식으로 캐싱한다.\r\n래핑 이후에 쓴 것들만 캐싱되므로 주의한다.\r\n\r\n=============================================================================\r\npackage springframework.web.util;\r\n\r\nimport org.apache.commons.io.IOUtils;\r\nimport org.junit.Test;\r\nimport org.springframework.mock.web.MockHttpServletResponse;\r\nimport org.springframework.web.util.ContentCachingResponseWrapper;\r\n\r\nimport javax.servlet.ServletOutputStream;\r\nimport java.nio.charset.StandardCharsets;\r\n\r\nimport static junit.framework.TestCase.assertTrue;\r\nimport static org.junit.Assert.assertEquals;\r\n\r\n/**\r\n * http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/util/ContentCachingResponseWrapper.html\r\n */\r\npublic class ContentCachingResponseWrapperTest {\r\n\r\n	/**\r\n	 * Content is cached only after the response is wrapped.\r\n	 */\r\n	@Test\r\n	public void testGetContentAsByteArray() throws Exception {\r\n		String content = "{\\n" +\r\n				"  \\"id\\": 1,\\n" +\r\n				"  \\"name\\": \\"Leanne Graham\\",\\n" +\r\n				"  \\"username\\": \\"Bret\\",\\n" +\r\n				"  \\"email\\": \\"Sincere@april.biz\\"\\n" +\r\n				"}";\r\n\r\n		MockHttpServletResponse response = new MockHttpServletResponse();\r\n		response.setCharacterEncoding(StandardCharsets.UTF_8.name());\r\n		ContentCachingResponseWrapper wrapper = new ContentCachingResponseWrapper(response);\r\n\r\n		// raw response\r\n		ServletOutputStream outputStream = response.getOutputStream();\r\n		IOUtils.write(content, outputStream);\r\n\r\n		String contentWrittenViaRawResponse = IOUtils.toString(wrapper.getContentAsByteArray(), wrapper.getCharacterEncoding());\r\n		System.out.println("# contentWrittenViaRawResponse : " + contentWrittenViaRawResponse);\r\n		assertTrue(contentWrittenViaRawResponse.isEmpty());\r\n\r\n		// response wrapper\r\n		ServletOutputStream outputStreamFromWrapper = wrapper.getOutputStream();\r\n		IOUtils.write(content, outputStreamFromWrapper);\r\n\r\n		String contentWrittenViaResponseWrapper = IOUtils.toString(wrapper.getContentAsByteArray(), wrapper.getCharacterEncoding());\r\n		System.out.println("# contentWrittenViaResponseWrapper : " + contentWrittenViaResponseWrapper);\r\n		assertEquals(content, contentWrittenViaResponseWrapper);\r\n	}\r\n\r\n}\r\n', NULL, '', 7, 0),
(1973, 'dale.seo', '', '', '2016-05-20 14:47:56', '', 'AbstractRequestLoggingFilter 메커니즘', 'setIncludePayload(ture)를 세팅하면 50자까지 요청 전문에 대한 로깅을 남길 수 있다.\r\n로거는 구현체 클래스 기준으로 사용한다.\r\n로그 찍을 당시에 InputStream에 읽혀진 전문만 캐싱해서 로깅해주기 때문에, (내부적으로 ContentCachingRequestWrapper 사용)\r\nbeforeReques 메소드에서는 요청 전문이 찍혔을 확률이 높지 않게된다.\r\n\r\n=======================================================================================\r\npackage springframework.web.filter;\r\n\r\nimport com.google.common.net.HttpHeaders;\r\nimport org.apache.commons.io.IOUtils;\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\nimport org.springframework.http.MediaType;\r\nimport org.springframework.mock.web.MockFilterChain;\r\nimport org.springframework.mock.web.MockHttpServletRequest;\r\nimport org.springframework.mock.web.MockHttpServletResponse;\r\nimport org.springframework.web.filter.AbstractRequestLoggingFilter;\r\nimport org.springframework.web.filter.OncePerRequestFilter;\r\n\r\nimport javax.servlet.FilterChain;\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport java.io.IOException;\r\nimport java.nio.charset.StandardCharsets;\r\n\r\n/**\r\n * Only read payload is cached and logged.\r\n */\r\npublic class AbstractRequestLoggingFilterTest {\r\n\r\n	private AbstractRequestLoggingFilter filter;\r\n\r\n	private MockFilterChain filterChain;\r\n\r\n	@Before\r\n	public void setUp() throws Exception {\r\n		filter = new AbstractRequestLoggingFilter() {\r\n			@Override\r\n			protected void beforeRequest(HttpServletRequest request, String message) {\r\n				logger.info(message);\r\n			}\r\n\r\n			@Override\r\n			protected void afterRequest(HttpServletRequest request, String message) {\r\n				logger.info(message);\r\n			}\r\n		};\r\n\r\n		filter.setIncludePayload(true);\r\n		filter.setIncludeQueryString(true);\r\n		filter.setMaxPayloadLength(100);\r\n		filter.setBeforeMessagePrefix("REQUEST_LOG_BEFORE : ");\r\n		filter.setAfterMessagePrefix("REQUEST_LOG_AFTER : ");\r\n\r\n		filterChain = new MockFilterChain(new HttpServlet() {\r\n		}, new OncePerRequestFilter() {\r\n			@Override\r\n			protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\r\n				IOUtils.toString(request.getInputStream()); // consume input stream\r\n			}\r\n		});\r\n	}\r\n\r\n	@Test\r\n	public void test() throws Exception {\r\n		String content = "{\\n" +\r\n				"  \\"id\\": 1,\\n" +\r\n				"  \\"name\\": \\"Leanne Graham\\",\\n" +\r\n				"  \\"username\\": \\"Bret\\",\\n" +\r\n				"  \\"email\\": \\"Sincere@april.biz\\"\\n" +\r\n				"}";\r\n\r\n		MockHttpServletRequest request = new MockHttpServletRequest();\r\n		request.setContextPath("/sac");\r\n		request.setRequestURI("/example/sample/detail");\r\n		request.setQueryString("no=1");\r\n\r\n		request.setCharacterEncoding(StandardCharsets.UTF_8.name());\r\n		request.setContent(content.getBytes());\r\n		request.setContentType(MediaType.APPLICATION_JSON_UTF8.toString());\r\n\r\n		request.addHeader(HttpHeaders.ACCEPT, MediaType.APPLICATION_JSON_UTF8.toString());\r\n\r\n		filter.doFilter(request, new MockHttpServletResponse(), filterChain);\r\n	}\r\n\r\n}\r\n', NULL, '', 11, 0),
(1974, 'dale.seo', '', '', '2016-05-20 16:05:26', '', 'standaloneSetup으로 단일 컨트롤러와 단일 필터 단위 테스트', 'package springframework.web.filter;\r\n\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\nimport org.springframework.http.MediaType;\r\nimport org.springframework.test.web.servlet.MockMvc;\r\nimport org.springframework.test.web.servlet.MvcResult;\r\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\r\nimport org.springframework.web.bind.annotation.RequestBody;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.ResponseBody;\r\nimport org.springframework.web.filter.AbstractRequestLoggingFilter;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\r\nimport static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\r\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\r\n\r\npublic class AbstractRequestLoggingFilterTest2 {\r\n\r\n	private MockMvc mockMvc;\r\n\r\n	@Before\r\n	public void setUp() throws Exception {\r\n		AbstractRequestLoggingFilter filter = new AbstractRequestLoggingFilter() {\r\n			@Override\r\n			protected void beforeRequest(HttpServletRequest request, String message) {\r\n				logger.info(message);\r\n			}\r\n\r\n			@Override\r\n			protected void afterRequest(HttpServletRequest request, String message) {\r\n				logger.info(message);\r\n			}\r\n		};\r\n\r\n		filter.setIncludePayload(true);\r\n		filter.setIncludeQueryString(true);\r\n		filter.setMaxPayloadLength(100);\r\n		filter.setBeforeMessagePrefix("REQUEST_LOG_BEFORE : ");\r\n		filter.setAfterMessagePrefix("REQUEST_LOG_AFTER : ");\r\n\r\n		mockMvc = MockMvcBuilders.standaloneSetup(new ReverseController())\r\n				.addFilter(filter)\r\n				.build();\r\n	}\r\n\r\n	@Test\r\n	public void test() throws Exception {\r\n		MvcResult result = mockMvc.perform(\r\n				post("/reverse")\r\n						.content("ABCDE")\r\n						.accept(MediaType.parseMediaType("text/plain;charset=UTF-8"))\r\n						.contentType(MediaType.parseMediaType("text/plain;charset=UTF-8"))\r\n		)\r\n				.andDo(print())\r\n				.andExpect(status().isOk())\r\n				.andReturn();\r\n\r\n		String content = result.getResponse().getContentAsString();\r\n		System.out.println(content);\r\n		assertEquals("EDCBA", content);\r\n	}\r\n\r\n}\r\n\r\nclass ReverseController {\r\n\r\n	@RequestMapping("/reverse")\r\n	public @ResponseBody String test(@RequestBody String input) {\r\n		return new StringBuilder(input).reverse().toString();\r\n	}\r\n\r\n}', NULL, '', 15, 0),
(1975, 'dale.seo', '', '', '2016-05-20 16:16:15', '', 'MockHttpServletRequest API', '# 생성자\r\n - MockHttpServletRequest mockReq = new MockHttpServletRequest("POST", "/entity/user/login/mobile/v2")\r\n\r\n# HTTPS 적용\r\n - mockReq.setSecure(true);', NULL, '', 3, 0),
(1976, 'dale.seo', '', '', '2016-05-22 15:27:52', '', '구글 폰트 사용하기', 'https://fonts.google.com/\r\nhttps://fonts.google.com/earlyaccess\r\n\r\n한글 폰트는 Eealy Access 가야 구할 수 있음\r\n적용이 안 되는 경우 !important 옵션 붙여보기\r\n\r\n=================================================================================\r\nCCS를 통해 나눔 고딕 설정 \r\n=================================================================================\r\n\r\n@import url(http://fonts.googleapis.com/earlyaccess/nanumgothic.css);\r\nbody { font-family: ''Nanum Gothic'', sans-serif !important; }\r\n\r\n=================================================================================\r\n<link href="https://fonts.googleapis.com/css?family=Lobster" rel="stylesheet" type="text/css">\r\n\r\n<style>  \r\n  h2 {\r\n    font-family: Lobster;\r\n  }\r\n</style>\r\n\r\n<h2 class="red-text">CatPhotoApp</h2>', NULL, '', 9, 0),
(1977, 'dale.seo', '', '', '2016-05-22 15:32:13', '', '이미지 너비 설정하기', '<style>\r\n  .smaller-image {\r\n    width: 100px;\r\n  }\r\n</style>\r\n\r\n<img class="smaller-image" src="https://bit.ly/fcc-relaxing-cat">', NULL, '', 2, 0),
(1978, 'dale.seo', '', '', '2016-05-22 15:36:13', '', '테두리 원으로 만들기', '테두리의 border-radius: 50%를 세팅해주면 완벽한 정원이 된다.\r\n\r\n\r\n  .thick-green-border {\r\n    border-color: green;\r\n    border-width: 10px;\r\n    border-style: solid;\r\n    border-radius: 50%;\r\n  }\r\n</style>\r\n\r\n<img class="thick-green-border" src="https://bit.ly/fcc-relaxing-cat">', NULL, '', 4, 0),
(1979, 'dale.seo', '', '', '2016-05-22 15:45:54', '', 'Hash Symbol를 사용해서 Dead Link 만들기', '<p>Click here for <a href="#">cat photos</a>.</p>', NULL, '', 2, 0),
(1980, 'dale.seo', '', '', '2016-05-22 15:50:15', '', '이미지의 alt 속성의 중요성', 'Add Alt Text to an Image for Accessibility\r\nalt attributes, also known as alt text, are what browsers will display if they fail to load the image. alt attributes are also important for blind or visually impaired users to understand what an image portrays. And search engines also look at alt attributes.\r\n\r\nIn short, every image should have an alt attribute!\r\n\r\nYou can add an alt attribute right in the img element like this:\r\n\r\n<img src="www.your-image-source.com/your-image.jpg" alt="your alt text">\r\n\r\nAdd an alt attribute with the text A cute orange cat lying on its back to our cat photo.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<a href="#"><img class="smaller-image thick-green-border" src="https://bit.ly/fcc-relaxing-cat" alt="A cute orange cat lying on its back"></a>', NULL, '', 2, 0),
(1981, 'dale.seo', '', '', '2016-05-22 18:49:11', '', 'CheckBox와 RadioButton은 label 태그와 같이 쓸 것', '<form action="/submit-cat-photo">\r\n  <label><input type="radio" name="indoor-outdoor" checked> Indoor</label>\r\n  <label><input type="radio" name="indoor-outdoor"> Outdoor</label>\r\n  <label><input type="checkbox" name="personality" checked> Loving</label>\r\n  <label><input type="checkbox" name="personality"> Lazy</label>\r\n  <label><input type="checkbox" name="personality"> Energetic</label>\r\n  <input type="text" placeholder="cat photo URL" required>\r\n  <button type="submit">Submit</button>\r\n</form>', NULL, '', 2, 0),
(1982, 'dale.seo', '', '', '2016-05-22 19:14:17', '', '속성이 충돌하는 2개의 CCS 클래스를 적용하면 누가 이길까?', '<style/> 태그 내에서 더 아래 위치한 클래스가 이긴다.\r\nclass 속성에서 나열한 순서는 중요하지 않다.\r\n\r\n\r\nOverride Styles in Subsequent CSS\r\nOur "pink-text" class overrode our body element''s CSS declaration!\r\n\r\nWe just proved that our classes will override the body element''s CSS. So the next logical question is, what can we do to override our pink-text class?\r\n\r\nCreate an additional CSS class called blue-text that gives an element the color blue. Make sure it''s below your pink-text class declaration.\r\n\r\nApply the blue-text class to your h1 element in addition to your pink-text class, and let''s see which one wins.\r\n\r\nApplying multiple class attributes to a HTML element is done with a space between them like this:\r\n\r\nclass="class1 class2"\r\n\r\nNote: It doesn''t matter which order the classes are listed in the HTML element.\r\n\r\nHowever, the order of the class declarations in the <style> section are what is important. The second declaration will always take precedence over the first. Because .blue-text is declared second, it overrides the attributes of .pink-text\r\n\r\n\r\n\r\n<style>\r\n  body {\r\n    background-color: black;\r\n    font-family: Monospace;\r\n    color: green;\r\n  }\r\n  .pink-text {\r\n    color: pink;\r\n  }\r\n  .blue-text {\r\n    color: blue;\r\n  }\r\n</style>\r\n<h1 class="pink-text blue-text">Hello World!</h1>\r\n', NULL, '', 2, 0),
(1983, 'dale.seo', '', '', '2016-05-22 19:20:51', '', '다른 모든 스타일을 override 하는 !important 키워드', 'CCS 라이브러리를 쓰는 상황에서 나의 커스텀 스타일을 우선 적용시킬 때 유용\r\n\r\n\r\nOverride All Other Styles by using Important\r\nYay! We just proved that in-line styles will override all the CSS declarations in your style element.\r\n\r\nBut wait. There''s one last way to override CSS. This is the most powerful method of all. But before we do it, let''s talk about why you would ever want to override CSS.\r\n\r\nIn many situations, you will use CSS libraries. These may accidentally override your own CSS. So when you absolutely need to be sure that an element has specific CSS, you can use !important\r\n\r\nLet''s go all the way back to our pink-text class declaration. Remember that our pink-text class was overridden by subsequent class declarations, id declarations, and in-line styles.\r\n\r\nLet''s add the keyword !important to your pink-text element''s color declaration to make 100% sure that your h1 element will be pink.\r\n\r\nAn example of how to do this is:\r\n\r\ncolor: red !important;\r\n\r\n\r\n<style>\r\n  body {\r\n    background-color: black;\r\n    font-family: Monospace;\r\n    color: green;\r\n  }\r\n  #orange-text {\r\n    color: orange;\r\n  }\r\n  .pink-text {\r\n    color: pink !important;\r\n  }\r\n  .blue-text {\r\n    color: blue;\r\n  }\r\n</style>\r\n<h1 id="orange-text" class="pink-text blue-text" style="color: white">Hello World!</h1>\r\n', NULL, '', 4, 0),
(1984, 'dale.seo', '', '', '2016-05-25 18:19:08', '', 'Alias 명령어', '단축 명령어\r\n\r\n\r\n$ alias\r\n현재 설정된 단축 명령어 목록 출력\r\n\r\n$ alias <name>=<value>\r\n새로운 단축 명령어 등록\r\n\r\nex) $ alias cp=''cp -i''\r\n\r\n$ unalias <name>\r\n단축 명령어 삭제\r\n\r\n$ \\cp\r\n$ /bin/cp\r\n알리어스를 무시하고 원래의 cp 명령을 실행', NULL, '', 6, 0),
(1985, 'dale.seo', '', '', '2016-05-29 16:08:41', '', 'CharacterEncodingFilter', '\r\n시스템의 디폴트 캐릭터셋이 UTF-8 이 아닐 경우, (보통 ISO-8859-1)\r\n클라이언트에서 한글이 포함된 요청 바디를 전송 시, 서버에서 요청 바디를 읽을 때 깨지게 된다.\r\n이럴 경우 CharacterEncodingFilter를 사용하여, 캐릭터셋을 UTF-8로 강제 세팅 해주면 된다.\r\n\r\n주의 사항은 이 방법은 요청 바디에서 주로 통하고, 응답 바디에서는 일반적으로 HttpMessageConverter나 ViewResolver 단에서 다시 세팅을 해주기 때문에,\r\n직접 구현한 서블릿에서 ServletOutputStream에 쓰지 않는 이상 항상 통한다고 보장할 수 없다.\r\n또한 URL 쿼리 스트링에도 통하지 않는다. (Tomcat 설정의 Connector 엘리먼트의 URIEncoding 속성을 세팅해줘야 함)\r\n 즉 오직 요청 바디에서만 통하는 방법이라고 생각하면 된다.\r\n\r\n=================================================================================================================================\r\n필터 설정\r\n=================================================================================================================================\r\npublic class WebAppInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {\r\n    @Override\r\n    protected Filter[] getServletFilters() {\r\n        return new Filter[]{\r\n                new CharacterEncodingFilter("UTF-8", true)\r\n        };\r\n    }\r\n}\r\n\r\n=================================================================================================================================\r\n필터 단위 테스트\r\n=================================================================================================================================\r\nimport org.apache.commons.io.IOUtils;\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\nimport org.springframework.mock.web.MockFilterChain;\r\nimport org.springframework.mock.web.MockHttpServletRequest;\r\nimport org.springframework.mock.web.MockHttpServletResponse;\r\nimport org.springframework.web.filter.CharacterEncodingFilter;\r\nimport org.springframework.web.filter.OncePerRequestFilter;\r\n\r\nimport javax.servlet.FilterChain;\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport java.io.IOException;\r\nimport java.nio.charset.StandardCharsets;\r\n\r\nimport static junit.framework.TestCase.assertEquals;\r\n\r\npublic class CharacterEncodingFilterTest {\r\n\r\n    private CharacterEncodingFilter filter = new CharacterEncodingFilter("UTF-8", true);\r\n\r\n    MockHttpServletRequest request = new MockHttpServletRequest();\r\n    MockHttpServletResponse response = new MockHttpServletResponse();\r\n    MockFilterChain filterChain = new MockFilterChain();\r\n\r\n    @Test\r\n    public void test() throws Exception {\r\n        request.setContent("가나다".getBytes(StandardCharsets.UTF_8));\r\n        request.setCharacterEncoding(StandardCharsets.ISO_8859_1.name());\r\n\r\n        System.out.println("Request Character Encoding = " + request.getCharacterEncoding());\r\n        System.out.println("Response Character Encoding = " + response.getCharacterEncoding());\r\n\r\n        String contentBefore = IOUtils.toString(request.getInputStream(), request.getCharacterEncoding());\r\n        System.out.println("contentBefore = " + contentBefore);\r\n\r\n        filter.doFilter(request, response, filterChain);\r\n\r\n        System.out.println("Request Character Encoding = " + request.getCharacterEncoding());\r\n        System.out.println("Response Character Encoding = " + response.getCharacterEncoding());\r\n\r\n        assertEquals("UTF-8", request.getCharacterEncoding());\r\n        assertEquals("UTF-8", response.getCharacterEncoding());\r\n\r\n        String contentAfter = IOUtils.toString(request.getInputStream(), request.getCharacterEncoding());\r\n        System.out.println("contentAfter = " + contentAfter);\r\n    }\r\n\r\n}', NULL, '', 9, 0),
(1986, 'dale.seo', '', '', '2016-05-30 12:16:10', '', 'MongoDB 설치 가이드', 'O/S에 따라 설명나옴\r\n\r\nhttps://docs.mongodb.com/manual/installation/', NULL, '', 8, 0),
(1987, 'dale.seo', '', '', '2016-05-30 15:48:31', '', 'EC2 서울 Amazon Linux 서버 정보', '[ Public IP ]\r\n52.78.13.223\r\n\r\n[ SSH Key ]\r\nhttps://drive.google.com/open?id=0B2t77ZV-5AmzZm9rdmJ6TWpvbk0\r\n\r\n[ SSH 접속 ]\r\nssh -i ''c:\\Users\\student\\.ssh\\MyFirstKey.pem'' ec2-user@52.78.13.223\r\n\r\nssh -i "awspwd.pem" ubuntu@ec2-52-78-18-181.ap-northeast-2.compute.amazonaws.com', NULL, '', 16, 0),
(1988, 'dale.seo', '', '', '2016-05-30 19:19:10', '', 'MongoDB GUI 클라이언트', '# RoboMongo : 오픈, 가장 많이 쓰임\r\n\r\nhttps://robomongo.org\r\n\r\n# uMongo\r\n# MongoChef : 상용, 개인적으로는 사용해도 무방\r\n# Tadpole(올챙이) : 오픈, 모든 DBMS 접근 가능', NULL, '', 3, 0),
(1989, 'dale.seo', '', '', '2016-05-30 19:44:12', '', 'AWS EC2 서버에 MongoDB 설치', '# 공식 매뉴얼\r\nhttps://docs.mongodb.com/manual/tutorial/install-mongodb-on-amazon/\r\n\r\n# 참고 블로그\r\nhttp://blog.lifeis.gift/770\r\nhttp://nashorn.tistory.com/entry/AWS-MongoDB-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0\r\n\r\n# 정리\r\n\r\n1. AWS EC2 서버에 SSH 접속\r\n\r\n$ ssh -i ''c:\\Users\\Dale\\.ssh\\MyFirstKey.pem'' ec2-user@52.78.13.223\r\n\r\n2. repository 파일 생성\r\n\r\n$ sudo vi /etc/yum.repos.d/mongodb-org-3.2.repo\r\n==================================================================\r\n[mongodb-org-3.2]\r\nname=MongoDB Repository\r\nbaseurl=https://repo.mongodb.org/yum/amazon/2013.03/mongodb-org/3.2/x86_64/\r\ngpgcheck=1\r\nenabled=1\r\ngpgkey=https://www.mongodb.org/static/pgp/server-3.2.asc\r\n==================================================================\r\n\r\n3. MongoDB 설치\r\n\r\n$ sudo yum install -y mongodb-org\r\n\r\n4. MongoDB 설정 파일 변경\r\n - bindIp 주석처리\r\n - HTTP Interface 추가\r\n\r\n$ sudo vi /etc/mongod.conf \r\n==================================================================\r\n# network interfaces\r\nnet:\r\n  port: 27017\r\n#  bindIp: 127.0.0.1  # Listen to local interface only, comment to listen on all interfaces.\r\n  http:\r\n    enabled: true\r\n    RESTInterfaceEnabled: true\r\n==================================================================\r\n\r\n5. MongoDB 구동 \r\n\r\n$ sudo service mongod start\r\n\r\n6. 로그 확인\r\n\r\n$ sudo cat /var/log/mongodb/mongod.log\r\n==============================================================================\r\n2016-05-30T10:12:30.075+0000 I NETWORK  [initandlisten] waiting for connections on port 27017\r\n==============================================================================\r\n\r\n7. 27017, 28017 Port 방화벽 오픈\r\n\r\nAWS 웹 콘솔 > Instances 메뉴 > Description 탭 > Security Groups 링크 클릭 > Inbound 탭\r\n(http://gomp.tistory.com/316)\r\n\r\n8. Mongo Shell 및 HTTP Interface 접속 확인', NULL, '', 36, 0),
(1990, 'dale.seo', '', '', '2016-05-30 22:10:28', '', '윈도우에서 MongoDB 기동, MongoShell 기동', '# MongoDB 기동\r\n - 디폴트 dbpath = /data/db\r\n - 디폴트 port = 27017\r\n - 웹기반 모니터링 대시보드 활성화 => --httpinterface --rest (접속 : http://localhost:28017) (주 포트 + 1000)\r\n\r\n$ mongod.exe --dbpath ../data/db --port 10000 --httpinterface --rest\r\n$ mongod.exe --config /etc/mongod.conf\r\n설정 파일로 구동하기 (상용 환경에서 권장)\r\n\r\n# MongoShell 기동\r\n\r\n$ mongo.exe localhost:10000', NULL, '', 18, 0),
(1991, 'dale.seo', '', '', '2016-05-30 22:13:45', '', '가상머신 양대산맥', '# VirtualBox\r\n: 무료\r\n\r\n# VM ware\r\n: 유료', NULL, '', 2, 0),
(1992, 'dale.seo', '', '', '2016-05-30 22:32:54', '', 'MongoDB 주요 커맨드', '$ show dbs\r\nDB 목록 조회\r\n\r\n$ use test\r\ntest라는 DB 사용\r\n\r\n$ show colletions\r\n컬렉션 목록 조회\r\n\r\n$ db.createCollection("users")\r\nusers 라는 컬렉션 생성\r\n\r\n$ db.users.insert({age : 33, name : "Dale Seo"})\r\nusers 컬렉션에 새로운 다큐먼트 추가\r\n기존 ip가 있으면 에러 발생\r\n\r\n$ db.blogs.save({\r\n  _id : 1,\r\n  title : "내 블로그 포스트1",\r\n  content : "블로그 내용입니다",\r\n  date : new Date()\r\n})\r\nid가 있으면 update 없으면 insert\r\n_id 필드를 불포함시키면 insert와 동일함\r\n\r\n$ db.users.find(조건)\r\n다큐먼트 목록 조회\r\n\r\n$ db.users.findOne(조건)\r\n가장 오래된 다큐먼트 조회\r\n\r\n$ db.foods.count()\r\n컬렉션 크기 조회\r\n\r\n$ db.dropDatabase()\r\n현재 사용하고 있는 DB 통째로 삭제', NULL, '', 35, 0),
(1993, 'dale.seo', '', '', '2016-05-30 22:40:21', '', 'MongoDB 사용처', '# Log 저장, 분석\r\n - GitHub에서 사용\r\n - MongoDB 쿼리가 unix grep 명령어보다 훨씬 뛰어남\r\n\r\n# Web Application\r\n - Newyork Times에서 사용\r\n - Agile 하게 개발 가능 (스키마 변경에 구애 받지 않음)\r\n - JSON Rest API 구현에 안성맞춤', NULL, '', 2, 0),
(1994, 'dale.seo', '', '', '2016-05-30 22:51:32', '', 'MongoDB 설정 파일 예시', '요즘에는 properties 형태보다 yaml 형태를 더 많이 쓴다.\r\n\r\nfork = true\r\nbind_ip = 127.0.0.1 \r\nbind_ip = 10.8.0.10 \r\nbind_ip = 192.168.56.101\r\nport = 27017 \r\nquiet = true \r\ndbpath = /srv/mongodb/data \r\nlogpath = /var/log/mongodb/mongod.log \r\nlogappend = true \r\njournal = true\r\nauth = true\r\n\r\n\r\n# 구동\r\nmongod --config /etc/mongodb.conf', NULL, '', 2, 0),
(1995, 'dale.seo', '', '', '2016-05-30 23:06:53', '', 'forEach 펑션을 활용하여 결과 컬렉션 마다 날짜 출력하기', '# 날짜 필드가 있을 때\r\ndb.blogs.find().forEach(function(d) {\r\n    var strout = d.date.getFullYear() + "-" + (d.date.getMonth()+1) + \r\n    "-" + d.date.getDate() + " " + d.date.getHours() + ":" + \r\n    d.date.getMinutes() + ":" + d.date.getSeconds() + " " + \r\n    d.date.getMilliseconds();\r\n    print(strout);\r\n})\r\n\r\n# ObjectId 활용\r\ndb.persons.find().forEach(function(d) { \r\n    var ts = d._id.toString().substring(10,18);\r\n    dt = new Date( parseInt( ts, 16 ) * 1000 );\r\n    print(dt);\r\n})', NULL, '', 5, 0),
(1996, 'dale.seo', '', '', '2016-05-30 23:16:19', '', 'MongoShell API 문서', 'http://api.mongodb.com/js/current/', NULL, '', 3, 0),
(1997, 'dale.seo', '', '', '2016-05-31 09:24:23', '', '제한자를 사용하여 특정 필드만 갱신하기', '# 공식 메뉴얼 레퍼런스 \r\nhttps://docs.mongodb.com/manual/reference/operator/update/\r\n=================================================================================================================================\r\n\r\ndb.<collection>.update 펑션을 그냥 사용하면 다큐먼트 전체가 교체되기 때문에 상용 환경에서는 그대로 사용되지 않고 보통 제한자를 사용하여 특정 필드만 갱신한다.\r\n디폴트로 단일 다큐먼트를 갱신. Upsert 하지 않음\r\n\r\n=========================================\r\n$inc 제한자 : 숫자를 증가시킬 때 사용 (조회수 증가)\r\n=========================================\r\ndb.sites.update(\r\n    { url : ''http://daum.net''}, \r\n    { $inc : { hits : 1} }\r\n);\r\n\r\n=========================================\r\n$set 제한자 : 특정 필드만 갱신 (값이 없으면 추가)\r\n=========================================\r\ndb.users.update({ _id : ''A0001'' }, { $set : { hobby : [ ''soccer'', ''music'' ] } });\r\ndb.users.update({ _id : ''A0001'' }, { $set : { age : 40 } });\r\n\r\n=========================================\r\n$unset 제한자 : 특정 필드를 제거 (키와 값 모두 제거) : 거의 쓸일 없음\r\n=========================================\r\ndb.users.update({ _id : ''A0001'' }, { $unset : { hobby : 1 } });\r\n\r\n=========================================\r\n$push 제한자 : 배열 필드에 원소 추가(중복 허용)\r\n=========================================\r\ndb.blog.insert({ _id : 100243, title : ''test blog'', author : ''joe'', \r\n     text : ''Good Morning! Vietnam!'',\r\n     comments : []\r\n});\r\ndb.blog.update({ _id : 100243 }, \r\n   { $push : { comments : { writer: ''smith'', text : ''nice movie!'' } } });\r\ndb.blog.update({ _id : 100243 }, \r\n   { $push : { comments : { writer: ''obama'', text : ''war is over!'' } } });\r\ndb.blog.update({ _id : 100243 }, \r\n\r\n=========================================\r\n$addToSet 제한자 : 배열 필드에 원소 추가 (중복 제거) : 좋아요, Follow 버튼\r\n=========================================\r\ndb.blog.update({ _id : 100243 }, \r\n   { $addToSet : { comments : { writer: ''obama'', text : ''war is over!'' } } });\r\n\r\n=========================================\r\n$pull 제한자 : 배열 필드에 특정 원소 제거 (좋아요 취소, Unfollow 버튼)\r\n=========================================\r\ndb.users.insert({\r\n    _id:''A0001'', \r\n    name:''joe'', \r\n    todo : [ ''meeting'', ''coding'', ''edit books'', ''reservation'' ]\r\n});\r\n\r\ndb.users.update({ _id:''A0001''}, { $pull : { todo : ''coding'' } });\r\n\r\n=========================================\r\n$rename 제한자 : 배열 필드의 키만 변경\r\n=========================================\r\ndb.users.update({ _id:''A0001'' }, { $rename : { ''todo'' : ''task'' } } );', NULL, '', 10, 0),
(1998, 'dale.seo', '', '', '2016-05-31 10:35:34', '', 'MongoDB 쓰기 데이터 유실(Fire-And-Forget) 시뮬레이션', '안전한 쓰기를 하려면 WriteConcern을 ACKNOWLEDGED로 세팅해야 한다!\r\n\r\n======================================================================\r\n\r\nimport java.net.UnknownHostException;\r\nimport java.util.Calendar;\r\nimport java.util.GregorianCalendar;\r\n\r\nimport com.mongodb.BasicDBObject;\r\nimport com.mongodb.DB;\r\nimport com.mongodb.DBCollection;\r\nimport com.mongodb.MongoClient;\r\nimport com.mongodb.WriteConcern;\r\n\r\npublic class FireAndForget {\r\n\r\n	public static void main(String[] args) throws UnknownHostException {\r\n		MongoClient mongo = new MongoClient("localhost:27017");\r\n		DB test = mongo.getDB("ch05");\r\n		DBCollection coll = test.getCollection("bulk");\r\n		if (coll == null)\r\n			test.createCollection("bulk", null);\r\n		mongo.setWriteConcern(WriteConcern.NONE); // 무책임하게 그냥 떤지고 맘\r\n		// mongo.setWriteConcern(WriteConcern.WriteConcern.ACKNOWLEDGED); // no missing\r\n		// mongo.setWriteConcern(WriteConcern.NORMAL); // default (네트워크 에러까지만 확인)\r\n		Calendar startC = new GregorianCalendar();\r\n		long start = startC.getTimeInMillis();\r\n		System.out.println();\r\n		for (int i=0; i < 200000; i++) {\r\n			BasicDBObject doc = new BasicDBObject();\r\n			doc.put("foo", "bar");\r\n			doc.put("num", i+1);\r\n			coll.insert(doc);\r\n		}\r\n		\r\n		Calendar endC = new GregorianCalendar();\r\n		long end = endC.getTimeInMillis();\r\n		System.out.println("실행시간 ms : " + (end - start));\r\n	}\r\n\r\n}\r\n', NULL, '', 10, 0),
(1999, 'dale.seo', '', '', '2016-05-31 10:52:42', '', 'MongoDB JAVA Driver Doc', 'https://api.mongodb.com/java/3.2/', NULL, '', 2, 0),
(2000, 'dale.seo', '', '', '2016-05-31 11:41:50', '', 'MongoDB 내려받기/올리기', '# 다른 DBMS로부 데이터 임포트\r\n - $MONGO_HOME/bin/mongoimport.exe 사용\r\n - d 옵션 : DB, c 옵션 : 컬렉션\r\n - port 옵션 : 기본값 27017\r\n - host 옵션 : 기본값 localhost\r\n - 임포트할 파일의 데이터는 {d1}{d2}{d3} 형태로 구성되야 함 (최상위에 []로 감싸지거나 {} 사이에 , 가 있으면 파싱 에러 남)\r\n \r\nex 0. 기본 호스트와 포트 사용\r\n========================================\r\nD:\\MongoDB\\Server\\3.2\\bin>mongoimport -d test -c users < C:\\Users\\Dale\\Desktop\\users.json\r\n2016-05-31T23:45:28.921+0900    connected to: localhost\r\n2016-05-31T23:45:28.930+0900    imported 10 documents\r\n\r\nex 1. \r\n========================================\r\nmongoimport --port 10000 --host localhost -d test -c zipcodes < c:\\shared\\zips.json\r\n\r\nex 2.\r\n========================================\r\nmongoimport --port 10000 --host localhost -d test -c blog < c:\\shared\\blog.json\r\n========================================', NULL, '', 26, 0),
(2030, 'dale.seo', '', '', '2016-06-02 22:43:50', '', 'MongoDB DB 레벨 커맨드', '$ db.stats()\r\n  : DB 통계\r\n  - DB 이름, 컬렉션 수, 문서 수, 평균 문서 크기, 데이터 사이즈, 색인수, 색인사이즈\r\n\r\n$ db.currentOp()\r\n  : 현재 실행 중인 오퍼레이션 정보\r\n\r\n$ db.killOp(opId)\r\n  : 특정 오퍼레이션 죽이기 (currentOp() 펑션으로 opId 획득 가능)\r\n\r\n$ db.serverBuildInfo()\r\n  : 자바스크립트 엔진 버전 등 서버 기본 정보 확인\r\n\r\n$ db.serverCmdLineOpts()\r\n  : 데몬 구동 옵션 정보\r\n  - argv : mongod 커맨드 옵션\r\n  - parsed : 적용된 최종 옵션\r\n    . config 파일 경로, dbPath 경로, log 파일 경로\r\n\r\n$ db.serverStatus()\r\n  : HTTP Interface 수준의 서버 종합 정보 (텍스트로 보기엔 너무 많음)', NULL, '', 9, 0),
(2001, 'dale.seo', '', '', '2016-05-31 15:16:49', '', 'GeoJson - 지리 정보 표현 표준', 'http://geojson.org/\r\n\r\n점, 선, 도형 모두 표현 가능', NULL, '', 4, 0),
(2002, 'dale.seo', '', '', '2016-05-31 16:34:06', '', '컬력션 통계 정보 확인', '- db.<collection>.stats(unit)\r\n- MB 단위로 크기를 보여줌\r\n\r\n==================================================\r\n$ db.stocks.stats(1024 * 1024)\r\n\r\n==================================================\r\n{\r\n        "ns" : "nasdaq.stocks",\r\n        "count" : 4308303, // 다큐먼트 수\r\n        "size" : 715, // 컬렉션 사이즈\r\n        "avgObjSize" : 174, // 평균 다큐먼트 크기\r\n        "storageSize" : 213, // 실제 물리 디스크 저장 사이즈 (715 대비 25% 압축된 것임)\r\n        "capped" : false,\r\n        "wiredTiger" : {\r\n                "metadata" : {\r\n                        "formatVersion" : 1\r\n                },', NULL, '', 2, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(2006, 'dale.seo', '', '', '2016-05-31 23:38:06', '', 'MongoDB 덤프/복원', '# MongDB 덤프\r\n - $MONGO_HOME/bin/mongodump.exe 사용\r\n\r\n# MongDB 복원\r\n - $MONGO_HOME/bin/mongorestore.exe 사용\r\n - 인자로 디렉토리를 넘기면 디렉토리 내의 폴더들이 DB 이름이 되고, 각 폴더 내의 bson 파일들이 Collection 이름, 각 폴더 내의 metadata 파일들이 Index 정보\r\n\r\n========================================\r\nmongorestore C:\\shared\\nasdaq_sample', NULL, '', 6, 0),
(2003, 'dale.seo', '', '', '2016-05-31 18:43:09', '', '제한자를 이용하여 배열 필드 갱신', '// 데이터 삽입\r\ndb.blog.insert({\r\n  _id : 1000,\r\n  author : ''joe'',\r\n  title : ''test blog'',\r\n  content : ''test content'',\r\n  comments : [\r\n    { author : ''smith'', comment : ''nice mongodb!'', votes : 5 }, \r\n    { author : ''susan'', comment : ''멋져!'', votes : 2 }, \r\n    { author : ''alice'', comment : ''커피한잔?'', votes : 3 } \r\n  ]\r\n});\r\n\r\n// 위치 기반 갱신 : 위치를 알 수 없는 경우가 많으므로 비추\r\ndb.blog.update({ _id : 1000 }, { $inc : { "comments.0.votes" : 1 } });\r\ndb.blog.findOne();\r\n\r\n// 조건 인자를 통해 배열이 하나만 선택되도록 줄인 후, 위치 자리에 $ 연산자를 활용\r\ndb.blog.update({ _id:1000, "comments.author" : "susan" }, \r\n     { $inc : { "comments.$.votes" : 1 } });\r\ndb.blog.findOne();\r\n', NULL, '', 2, 0),
(2004, 'dale.seo', '', '', '2016-05-31 18:49:26', '', 'update 메소드 사용법', 'db.<collection>.update({query}, {obj}, {upsert}, {multi})\r\n1) query : 갱신 조건\r\n2) obj : 갱신 내용\r\n3) upsert : 갱신 조건에 일치하는 문서가 발견되지 않으면 갱신 조건과 내용을 토대로 새로운 문서 생성/추가 (기본값 false : 갱신 조건에 일치하는 문서가 없으면 No Action)\r\n4) multi : 갱신 조건에 일치하는 모든 문서를 일괄 갱신 (기본값 false : 첫번째 문서만 갱신)\r\n\r\n\r\n\r\n# 다중 문서 갱신 용도\r\n - 스카마 변경\r\n - 새로운 필드 추가\r\n\r\n예 1) 2012년 11월 12일 등록된 모든 사용자에게 5000원 상품권 제공\r\ndb.users.update( { regdate : ''2012/11/12'' }, \r\n    { $set :  { gift : ''50000원 상품권''} }, false, true )\r\n\r\n예 2) 모든 문서에 조회수 필드 추가\r\ndb.pageviews.update({}, {$inc : { hits : 10 }}, false, true)\r\n', NULL, '', 8, 0),
(2005, 'dale.seo', '', '', '2016-05-31 23:28:40', '', 'Full Talbe Scan vs Index Scan', 'http://www.dbguide.net/db.db?cmd=view&boardUid=148209&boardConfigUid=9&categoryUid=216&boardIdx=136&boardStep=1\r\n\r\nIndex 란\r\n- Table 검색을 빠르게 하기 위해서 \r\n- 특정 필드의 값을 키, row id를 값으로 B Tree 구성해놓고\r\n- B Tree를 통해 row id를 빨리 찾아내고, 실제 테이블에서 해당 row id로 레코드 취득', NULL, '', 5, 0),
(2007, 'dale.seo', '', '', '2016-05-31 23:53:00', '', 'db.collection.find(query, projection) 펑션을 이용한 쿼리', 'https://docs.mongodb.com/manual/reference/method/db.collection.find/\r\n\r\n\r\n# id가 1인 다큐먼트의 name 필드만 조회\r\n - _id 필드는 projection에 무조건 포함되므로 0으로 명시적으로 제외해줘야 한다.\r\n--------------------------------------------------------------------------------------------\r\n$ db.users.find({id : 1}, {name: 1, _id: 0})\r\n{ "name" : "Leanne Graham" }\r\n--------------------------------------------------------------------------------------------\r\n\r\n\r\n# id가 5보다 크고 8보다 작은 다큐먼트 조회\r\n - $lt, $lte, $gt, $gte 지원\r\n--------------------------------------------------------------------------------------------\r\n$ db.users.find({id : {$gte : 5, $lt : 8}}, {id : 1, name : 1})\r\n{ "_id" : ObjectId("574da388ae9b9d63a94d9906"), "id" : 5, "name" : "Chelsey Dietrich" }\r\n{ "_id" : ObjectId("574da388ae9b9d63a94d9907"), "id" : 7, "name" : "Kurtis Weissnat" }\r\n{ "_id" : ObjectId("574da388ae9b9d63a94d9908"), "id" : 6, "name" : "Mrs. Dennis Schulist" }\r\n--------------------------------------------------------------------------------------------\r\n//인구가 7000이상 7010이하인 것들\r\n$ db.zipcodes.find({ pop : { $gte : 7000, $lte : 7010 } })\r\n--------------------------------------------------------------------------------------------\r\n\r\n#  IN 연산자 ($in, $nin)\r\n - id가 3이거나 6인 다큐먼트 조회\r\n--------------------------------------------------------------------------------------------\r\n$ db.users.find({id : {$in : [3, 6]}})\r\n--------------------------------------------------------------------------------------------\r\n\r\n# OR 연산자\r\n--------------------------------------------------------------------------------------------\r\n$ db.users.find({$or : [{name : "Mrs. Dennis Schulist"}, {username : "Samantha"}]})\r\n--------------------------------------------------------------------------------------------\r\n\r\n\r\n# Null 쿼리\r\n - 필드 값이 null인 문서 뿐만 아니라 필드 자체가 존재하지 않는 문서 검색\r\n-------------------------------------------------------------------------------------------\r\n$ db.users.find({ y : null })\r\n-------------------------------------------------------------------------------------------\r\n - 정확하게 필드 값이 null인 것만 찾으려면\r\n-------------------------------------------------------------------------------------------\r\n$ db.users.find({ y : {$in : [null], $exists : true}})\r\n-------------------------------------------------------------------------------------------\r\n\r\n\r\n# MOD 연산자\r\n-------------------------------------------------------------------------------------------\r\n//city가 INGRAM 이면서 인구를 5로 나눈 나머지가 0인 것들\r\n$ db.zipcodes.find({  city : "INGRAM",   pop : { $mod : [5, 0] } })\r\n-------------------------------------------------------------------------------------------\r\n//city가 INGRAM 이면서 인구를 5로 나눈 나머지가 0이 아닌 것들\r\n$ db.zipcodes.find({  city : "INGRAM",   pop : { $not : { $mod : [5, 0] } } })\r\n-------------------------------------------------------------------------------------------', NULL, '', 4, 0),
(2008, 'dale.seo', '', '', '2016-06-01 08:54:01', '', 'MongoDB 정규식 쿼리', 'MongoDB 쿼리는 LIKE 연산자를 제공하지 않기 때문에 정규식 쿼리를 반드시 알아야 한다.\r\n\r\n$ db.collection.find({city : /^A/})\r\n - city 필드가 A로 시작하는 문서 조회 (WHERE city LIKE ''A%'')\r\n\r\n$ db.collection.find({city : /A$/})\r\n - city 필드가 A로 끝나는 문서 조회 (WHERE city LIKE ''%A'')\r\n\r\n$ db.collection.find({city : /A/})\r\n - city 필드가 A가 포함하는 문서 조회 (WHERE city LIKE ''%A%'')', NULL, '', 2, 0),
(2009, 'dale.seo', '', '', '2016-06-01 09:02:47', '', 'MongoDB 배열 쿼리', '// 데이터 적재\r\n$ db.food.insert({  _id : 1, fruit : [''apple'',''banana'',''peach''] })\r\n$ db.food.insert({  _id : 2, fruit : [''apple'',''pineapple'',''orange''] })\r\n$ db.food.insert({  _id : 3, fruit : [''apple'',''banana'',''strawberry''] })\r\n$ db.food.insert({  _id : 4, fruit : [''apple'',''banana''] })\r\n\r\n// fruit 배열에 banana 원소가 포함된 문서 검색 (문자열 하나만 던지면 포함 검색)\r\n$ db.food.find({ fruit : ''banana''})\r\n// 위와 동일\r\n$ db.food.find({ fruit : { $all : [''banana''] } })\r\n// fruit 배열에 banana와 apple 원소가 포함된 문서 검색 ($all 연산자를 통해 여러 개의 원소가 포함되는 배열 검색 가능)\r\ndb.food.find({ fruit : { $all : [''banana'', ''apple''] } }\r\n// 원소들과 순서까지 정확히 일치하는 배열만 검색\r\n$ db.food.find({ fruit : [''apple'',''banana'',''peach'']})\r\n$ db.food.find({ fruit : [''apple'',''banana'']})\r\n// 정해진 인덱스의 원소만 일치하는지 검색\r\n$ db.food.find({ ''fruit.1'' : ''pineapple'' })\r\n\r\n// $size 제한자를 통해 특정 크기의 배열 조회\r\n$ db.food.find({ fruit : { $size : 3 } })\r\n\r\n// $size 제한자를 통해 특정 크기 이상의 배열 조회\r\n$ db.food.update({_id:1}, { $push : { fruit : ''strawberry'' }})\r\n$ db.food.find({ fruit : { $size : { $gt : 2}}})\r\n\r\n// $slice 제한자를 project 인자에서 사용하면 배열 페이징 처리 가능\r\n$ db.food.update({ _id : 1 }, { $push : { fruit : ''pear'' } })\r\n$ db.food.update({ _id : 1 }, { $push : { fruit : ''kumquat'' } })\r\n$ db.food.find({ _id : 1 }, { fruit : { $slice : 2 } })		//앞 2개\r\n$ db.food.find({ _id : 1 }, { fruit : { $slice : -2 } })		//마지막 2개\r\n$ db.food.find({ _id : 1 }, { fruit : { $slice : [1,2] } })	//1개 skip, 2개 limit', NULL, '', 4, 0),
(2010, 'dale.seo', '', '', '2016-06-01 09:25:41', '', 'MongoDB 중첩 문서 (Embedded Document) 쿼리', '외곽 문서의 필드명으로 검색하면 논리적인 오류 가능성이 있으므로,\r\n가급적 . 표기법을 활용하여 내장 문서의 필드명으로 검색하는 것이 바람직하다.\r\n===================================================================================\r\ndb.persons.insert({ _id : 1, name : { first: ''John'',  last : ''Kennedy'' }, age : 40  });\r\ndb.persons.insert({ _id : 2, name : { first: ''Will'',  last : ''Smith'' }, age : 31  });\r\ndb.persons.insert({ _id : 3, name : { first: ''Barack'',  last : ''Obama'' }, age : 60  });\r\ndb.persons.insert({ _id : 4, name : { first: ''John'', middle : ''F'',  last : ''Kennedy'' }, age : 60  });\r\n\r\n//middle이 존재하는 것은 검색하지 못함. (정확히 first와 last 필드만 존재하는 배열을 조회)\r\ndb.persons.find({ name : { first : ''John'', last : ''Kennedy'' } });\r\n//middle이 존재하는 이름도 검색함.\r\ndb.persons.find({ ''name.first'' : ''John'', ''name.last'' : ''Kennedy'' });\r\n\r\n\r\n===================================================================================\r\n# $elemMatch 제한자를 사용하면 조회 조건을 배열 단위로 지정할 수 있어서 가장 권장된다.\r\n===================================================================================\r\n\r\ndb.blog.insert({  content : ''블로그1'',\r\n  comments : [\r\n     { author : ''joe'', score : 3, comment : ''nice post'' },\r\n     { author : ''mary'', score : 6, comment : ''bad post'' }\r\n  ]\r\n});\r\n\r\ndb.blog.insert({ content : ''블로그2'',\r\n  comments : [\r\n     { author : ''ann'', score : 4, comment : ''nice post'' },\r\n     { author : ''mary'', score : 2, comment : ''terrible post'' }\r\n  ]\r\n});\r\n\r\ndb.blog.insert({ content : ''블로그3'',\r\n  comments : [\r\n     { author : ''joe'', score : 5, comment : ''ranny!'' },\r\n     { author : ''won'', score : 7, comment : ''so coooool~!'' }\r\n  ]\r\n});\r\n\r\n\r\n/*** joe가 쓴것이면서 score가 5이상인 comments가 있는 document만 검색 ***/\r\n\r\n//comment 키에 대한 내용이 없으므로 조회가 안됨.\r\ndb.blog.find({ comments : { author : ''joe'', score : { $gte : 5 } } })\r\n\r\n//comments 배열내에서 둘중의 하나라도 일치하면 조회됨. 원하는 결과 아님.\r\ndb.blog.find({ ''comments.author'' : ''joe'', ''comments.score'' : { $gte : 5} })\r\n\r\n//원하는 결과 도출!!\r\ndb.blog.find({ comments : { $elemMatch : { author: ''joe'', score : { $gte : 5} } } })', NULL, '', 4, 0),
(2011, 'dale.seo', '', '', '2016-06-01 09:32:14', '', '$where 제한자를 활용한 JS 펑션 쿼리', '$where는 C++가 아닌 Javascript를 사용하므로 속도가 느리기 때문에 반드시 필요한 경우(필드 값끼리 비교)에만 쓸 것\r\n\r\n======================================================================\r\ndb.num.insert({ a : 10})\r\ndb.num.insert({ a : 3 })\r\ndb.num.insert({ a : 4 })\r\ndb.num.insert({ a : 7 })\r\ndb.num.insert({ a : 2 })\r\ndb.num.insert({ a : 9 })\r\n\r\n//아래 4가지 방식은 동일한 기능 수행\r\n// this는 문서 자체를 의미\r\n// 그냥 JS 펑션을 인자로 바로 넘겨도 되지만 명시적으로 $where을 붙여주는 게 권장\r\ndb.num.find({ a: { $gt : 4 }}) // 가장 빠름 (C++)\r\ndb.num.find({ $where : "this.a > 4" })\r\ndb.num.find("this.a > 4")\r\nvar f = function() {\r\n  return this.a > 4;\r\n}\r\ndb.num.find(f);\r\n\r\n======================================================================\r\n두 개의 필드의 값을 비교해야 할 때는 JS 펑션을 사용할 수 밖에 없음\r\n======================================================================\r\ndb.nums.insert({ x:1, y:5 })\r\ndb.nums.insert({ x:2, y:4 })\r\ndb.nums.insert({ x:3, y:3 })\r\ndb.nums.insert({ x:4, y:2 })\r\ndb.nums.insert({ x:5, y:1 })\r\n\r\n//x와 y가 일치하는 것은?\r\n//아래는 오류 발생\r\ndb.nums.find({ x : y })	\r\n//정상 실행\r\ndb.nums.find({ $where : "this.x == this.y" })\r\n\r\n\r\n===========================================================================\r\n문서내의 키에 대한 값이 서로 같은 것이 있다면 조회하라!!\r\n===========================================================================\r\ndb.foo.insert({ apple : 1, banana: 6, peach : 3})\r\ndb.foo.insert({ apple : 8, spinach: 4, watermelon : 4})\r\ndb.foo.insert({ pineapple : 3, strawberry: 2, kiwi : 3})\r\n\r\n//문서내의 키에 대한 값이 서로 같은 것이 있다면 조회하라!!\r\ndb.foo.find({ \r\n  $where : function() {\r\n    for (var k1 in this) {\r\n       for (var k2 in this) {\r\n          if (k1 != k2 && this[k1] == this[k2])\r\n             return true; \r\n       }\r\n    }  \r\n  }\r\n})', NULL, '', 8, 0),
(2012, 'dale.seo', '', '', '2016-06-01 09:37:23', '', 'find의 리턴 타입인 Cursor 활용', '# 지원하는 메소드\r\n - sort(field : 1/-1) : 정렬 (ORDER BY)\r\n - skip(num) : 건너뛰기 (LIMIT offest size)\r\n - limt(num) : 읽기 갯수 (LIMIT offest size)\r\n - count()\r\n - hasNext()\r\n - next()\r\n - batchSize() : 한번에 서버에서 가져올 데이터 크기 (기본값 : 문서 100개, 사이즈 16MB 이하)\r\n - objsLetfInBatch() : next() 호출할 때 마다 1씩 감소\r\n - hint(filed : 1) : 인덱스 강제로 타게\r\n - explain() : 실행 계획 (사용된 인덱스, 수행 시간, 사용된 커서, 스캔한 문서수, 쿼리 경로 등)\r\n - min(filed : num)\r\n - max(filed : num)\r\n\r\n# 주의 사항 \r\n - 메소드 체이닝이 가능하며, 호출 순서와 관계없이 sort, skip, limit 순서대로 호출\r\n - find()를 호출할 때 MongoDB 서버에 쿼리하는 게 아니라 cursor의 hasNext()를 호출할 때 서버에 쿼리를 전달함\r\n - skip()을 많이 사용하면 성능저하가 일어나기 때문에, 마지막 결과물의 _id를 클라이언트에게 리턴하는 식으로 구현하는 것이 권장\r\n - 서버측에서 커서는 메모리와 자원을 점유하므로 커서를 모두 소진했거나 명시적으로 클라이언트로 부터 종료 요청을 받으면 자원을 해제함\r\n - 클라이언트 측에서 신호가 없다라도 10분동안 커서 사용이 없으면 서버측에서 커서 종료 시킴 (타임아웃 수정 가능)\r\n\r\n\r\n==========================================================================\r\n# 예제 1\r\n==========================================================================\r\n\r\nvar cursor = db.persons.find();\r\nwhile (cursor.hasNext()) {\r\n  var doc = cursor.next();\r\n  print(doc.name.first + " " + doc.name.last);\r\n}\r\n\r\n//iterator 이므로 forEach 문을 사용해도 됨.\r\nvar cursor = db.persons.find();\r\ncursor.forEach(function(doc) {\r\n  print(doc.name.first + " " + doc.name.last);\r\n});\r\n\r\n\r\n==========================================================================\r\n# 예제 2\r\n==========================================================================\r\n\r\n//bulk 데이터 생성\r\nfor (var i=0; i < 100000; i++) {\r\n   db.nums.insert({num : i })\r\n}\r\n\r\nvar cursor = db.nums.find().batchSize(50000).limit(100000);\r\n//기본 batchSize 크기는 101개임.너무 크게 잡으면 4MB로 제한!!\r\ncursor.objsLeftInBatch()       //cursor에 적재된 개체(document)수 확인\r\n\r\nvar cursor = db.nums.find().batchSize(10).limit(100);\r\ncursor.forEach(function(doc) {\r\n  print(cursor.objsLeftInBatch() + " : " + doc.num);\r\n});\r\n\r\n\r\n==========================================================================\r\n# 예제 3\r\n==========================================================================\r\n\r\n//zipcodes 컬렉션에서 인구순으로 역순 정렬하여 10개씩 11번째 페이지\r\ndb.zipcodes.find({}, { city:1, pop:1}).sort({pop:-1}).skip(100).limit(10);\r\n\r\n//인구순으로 역순 정렬. 동일한 인구수인 경우는 도시이름순 정렬\r\ndb.zipcodes.find().sort({ pop:-1, city:1 })\r\n\r\n\r\n==========================================================================\r\n# 예제 4 : 쿼리에 옵션을 다양하게 추가할 수 있음\r\n==========================================================================\r\n\r\n//아래 세 코드는 모두 동일한 기능 수행\r\ndb.zipcodes.find({ city : /^AB/ }).sort({pop:-1});\r\ndb.zipcodes.find({ city : /^AB/ })._addSpecial("$orderby", { pop : -1 })\r\ndb.zipcodes.find({ $query : { city : /^AB/ }, $orderby : { pop:-1 } })\r\n//explain\r\nvar result = db.randoms.find({}).hint({ random : 1}).sort({_id:1}).limit(10).explain()\r\nprintjson(result);\r\n//min(), max()\r\ndb.randoms.find().min({random:0.551}).max({random:0.555})\r\n\r\n\r\n==========================================================================\r\n# 예제 5 : $snapshot 옵션을 활용하여 컬렉션의 문서 수가 많을 때, 단편화 현상 때문에 조회 결과 오류나는 것 방지할 수 있음 (성능 저하 감수)\r\n==========================================================================\r\ndb.randoms.find()._addSpecial( "$snapshot", true )\r\ndb.randoms.find().snapshot()', NULL, '', 31, 0),
(2013, 'dale.seo', '', '', '2016-06-01 13:13:29', '', 'MongoDB 인덱스', '# 인덱스 소개\r\n - _id 필드는 자동 인덱싱\r\n - 두 필드를 이용해서 쿼리하는 경우가 잦다면, 각 필드를 인덱싱하지 말고, 복합 인덱스를 적용할 것\r\n - 복합 인덱스에서는 필드의 순서가 중요함\r\n - 읽기 성능은 향상되나 쓰기(삽입, 삭제, 수정) 성능은 저하됨 (컬렉션 뿐만 아니라 인덱싱에도 추가해줘야 하기 때문)\r\n - 따라서 불필요한 인덱스가 생성되지 않도록 주의\r\n - 고유 인덱스는 컬렉션에 중복 데이터가 존재할 때 생성 불가\r\n\r\n# 특이 인덱스\r\n - Multikey Index : 배열 필드에도 인덱스 생성 가능\r\n - Geo special Index : 위치 정보 검색을 위한 인덱스\r\n - Text Index : Full Text Search를 위한 인덱스 (한글 형태소 분석 기능은 지원 안함. Apach Lucene이나 Solar랑 통합 필요)\r\n\r\n# 인덱스 생성\r\ndb.collection.createIndex({filed: 1}) : 오름 차순\r\ndb.collection.createIndex({filed: -1}) : 내림 차순\r\ndb.collection.createIndex({filed1: 1, field2: -1}) : 복합 인덱스\r\ndb.collection.createIndex({filed: 1}, {name: "index_name"}) : 명시적인 이름 부여\r\ndb.collection.createIndex({filed: 1}, {unique: true}) : 고유 인덱스 (마치 해당 필드에 Unique 제약 조건을 거는 효과)\r\ndb.collection.createIndex({filed: 1}, {sparse: true}) : 희소 인덱스 (일부 문서에만 존재하는 필드에 대해서 인덱싱)\r\ndb.collection.createIndex({filed: 1}, {background: true}) : 인덱스 생성동안 클라이언트 요청을 차단하지 않고 백그라운드에서 실행 (상용에서 필수 옵션)\r\ndb.collection.createIndex({filed: 2d}) : 지리 인덱스\r\ndb.collection.createIndex({filed: text}) : 문자 인덱스\r\n\r\n# 인덱스 조회\r\ndb.collection.getIndexes()\r\n\r\n# 인덱스 삭제\r\ndb.collection.dropIndex(Index_name)\r\n\r\n# 인덱스 재구성\r\n - 인덱스 단편화 해결\r\n - 재구성하는 동안 Write Lock이 걸리므로 오프라인 인덱싱 권장\r\ndb.collection.reIndex()', NULL, '', 10, 0),
(2014, 'dale.seo', '', '', '2016-06-01 13:25:39', '', 'MongDB 튜닝', '# 쿼리 튜닝 기본 원칙\r\n - 필요하다면 인덱스를 생성하라\r\n - 결과값의 limit을 제한하라\r\n - 필요한 필드만 projection 하라\r\n - 실행 계획 (expalin()) 결과에서 nReturned와 nScanned가 일치하도록)\r\n\r\n# 로그 파일 이용\r\n100ms 이상 걸리는 느린 쿼리는 로그가 찍힘\r\n서버 구동 시 --slowms 옵션으로 변경 가능\r\n런타임에서는 다음과 같이 프로파일러 사용해서 변경\r\ndb.setProfilingLevel(0, 50);\r\n\r\n# 프로파일러 사용\r\n - 프로파일러를 걸어두면 system.profile 컬렉션에 느린 쿼리 내역이 쌓임\r\n - system.proifle 컬렉션 : 1MB 사이즈를 가진 Capped Collectoin\r\n\r\ndb.setProfilingLevel(2);		//가장 많은 로그. 읽기/쓰기 모두\r\ndb.setProfilingLevel(1, 50);                 //읽기 연산. 임계값 50ms\r\n\r\n//system.profile 컬렉션 조회하여 5초 이상 걸린 쿼리 조회\r\ndb.system.profile.find({millis : {$gt : 5000} }).sort({$natrual : -1}).limit(1)', NULL, '', 5, 0),
(2015, 'dale.seo', '', '', '2016-06-01 16:41:16', '', 'mongodb journaling은 어떻게 동작하는가', 'http://wonnyz.tumblr.com/post/91139514161/mongodb-journaling%EC%9D%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%8F%99%EC%9E%91%ED%95%98%EB%8A%94%EA%B0%80', NULL, '', 2, 0),
(2016, 'dale.seo', '', '', '2016-06-01 19:45:47', '', 'Maximum subarray problem (최대 연속 부분합 찾기)', 'Kadane''s algorithm을 사용하면 O(n) 시간 복잡도로 해결 (Dynamic Programing)\r\n\r\nhttps://www.algospot.com/judge/problem/read/MAXSUM\r\nhttp://gwpark.tistory.com/1788\r\nhttps://en.wikipedia.org/wiki/Maximum_subarray_problem#Kadane.27s_algorithm\r\n', NULL, '', 5, 0),
(2017, 'dale.seo', '', '', '2016-06-01 22:56:13', '', 'MongoDB 집계 방법 비교', 'Javascript 펑션을 못 쓴다는 한계가 있지만 그 정도 복잡한 집계를 할 일은 없을 거 같음.\r\n그래서 여러모로 aggregate()가 제일 나아 보임\r\n\r\n# group()\r\n - 비정형 문서 가능\r\n - 분산 집계 불가\r\n - 문서 리턴 (16MB 상한)\r\n - Javascript 펑션 사용\r\n - 절차적 프로그래밍 사상\r\n\r\n# mapRedcue()\r\n - 비정형 문서 가능\r\n - 분산 집계 가능\r\n - 컬렉션을 만듬\r\n - Javascript 펑션 사용\r\n - 절차적 프로그래밍 사상\r\n\r\n# aggregate()\r\n - 정형화된 문서만 가능\r\n - 분산 집계 가능\r\n - 커서 리턴 (커서 통해 컬렉션도 만들 수 있음)\r\n - 자체 pipeline expression 사용\r\n - Javascript 없이 사용 가능한 JAVA API 제공\r\n - 실행 계획 제공\r\n - SQL의 집계함수 사상이랑 유사 (절차적 언어)', NULL, '', 6, 0),
(2018, 'dale.seo', '', '', '2016-06-01 22:57:22', '', 'MongoDB 집계 - db.collection.group()', 'https://docs.mongodb.com/manual/reference/method/db.collection.group/', NULL, '', 4, 0),
(2019, 'dale.seo', '', '', '2016-06-01 22:59:19', '', 'MongoDB 집계 - mapReduce()', 'https://docs.mongodb.com/manual/core/map-reduce/\r\n\r\n - map 수행 용과 reduce 수행 용의 두 개의 자바스크립트 함수를 정의 후, mapReduce 함수의 인자로 던짐\r\n - map 작업\r\n  . 비정형 문서를 정형 문서로 바꿔주는 과정\r\n  . key가 중복 가능한 map 자료구조를 만든다고 생각\r\n - reduce 작업 : 실제 집계 작업\r\n - finalize 작업 : 부가 집계 작업\r\n - 작업 순서 : map -> shuffle(sort & merge) -> reduce\r\n\r\n\r\n# 주의 사항 \r\n - map 결과 key가 유일한 값에 대해서는 suffle과 reduce 작업을 수행하지 않음\r\n - 따라서 map 결과 형식과 reduce 결과 포멧을 동일하게 맞춰줘야 함\r\n\r\n\r\n# 참고\r\n - 사용법이 난해하고 성능 문제가 있어서 Hadoop이나 Spark의 통합 후 Haddop이나 Spark의 map reduce 기능을 사용', NULL, '', 6, 0),
(2020, 'dale.seo', '', '', '2016-06-01 23:19:32', '', 'MongoDB 집계 - Aggregation Framework', '# 개요\r\n - SQL과 유사한 집계 함수의 끝판왕\r\n - 여러 개의 pipeline operator를 나열하여 순서대로 처리\r\n - find() 대신에 활용할 수도 있음\r\n\r\n# Pipelines\r\n - $match : 문서 선택\r\n - $project : 필드 선택\r\n - $sort, $skip, $limit\r\n - $unwind : 배열 분해 (문서와 배열 join 효과)\r\n - $group : 집계\r\n  . $max, $min, $avg, $sum\r\n   . $last, $first (이 전 pipeline 에서 $sort 했을 때 사용)\r\n - $lookup : 두 개의 컬렉션 조인\r\n - $out : 결과를 저장할 컬렉션\r\n\r\n# Expressions\r\n - $add, $divide, $mod, $multiply, $subtract\r\n - $substr, $toLower, $toUpper\r\n - $dayOfYear, $dayOfMonth, $dayOfWeek, $year, $month, $week, $hour, $minute, $second\r\n - $cond, $ifNull\r\n\r\n# 주의사항\r\n  - Double Quotation 으로 묶여 있는 "$~~~" 는 오퍼레이터가 아니라 컬렉션의 필드명을 가르킨다.\r\n\r\n# Manual\r\n - SQL과 Aggregation 상관표 : https://docs.mongodb.com/manual/reference/sql-aggregation-comparison/\r\n - Zipcode 예제 : https://docs.mongodb.com/manual/tutorial/aggregation-zip-code-data-set/', NULL, '', 23, 0),
(2021, 'dale.seo', '', '', '2016-06-02 08:56:41', '', 'db.runCommand()', 'https://docs.mongodb.com/manual/reference/method/db.runCommand/\r\n\r\n- 대부분의 명령어 처리 가능\r\n- Shell Helper가 제공되지 않는 명령어 쓸 때 사용', NULL, '', 2, 0),
(2022, 'dale.seo', '', '', '2016-06-02 09:00:42', '', '다른 원격 MongoDB 서버로 부터 DB나 컬렉션 복사해오기', '# 컬렉션 복사 - cloneCollection\r\n//cloneCollection : 다른 서버로부터 복제본 생성.\r\ndb.runCommand({cloneCollection:"test.zipcodes", from:"70.12.213.125:10000/test", query:{}, copyIndexes : true })\r\ndb.runCommand({cloneCollection:"test.zipcodes", from:"70.12.213.125:10000", query:{ pop : { $gt : 20000 }}, copyIndexes : true })\r\n\r\n\r\n# DB 복사 - copydb\r\ndb.runCommand({copydb: 1, fromhost: "1.2.3.4:27017", fromdb: "test", todb: "test1"})\r\n\r\n\r\n\r\n', NULL, '', 2, 0),
(2023, 'dale.seo', '', '', '2016-06-02 09:02:00', '', 'MongoDB 진단 명령어', '# DB 진단\r\ndb.stats()\r\n - 어느 DB를 사용하고 있는지도 알 수 있음\r\n\r\n\r\n# Collection 진단\r\ndb.collection.stats()', NULL, '', 2, 0),
(2024, 'dale.seo', '', '', '2016-06-02 09:13:45', '', 'MongoDB 제한 컬렉션 - Capped Collection, TTL Collection', '# MongDB 제한 컬렉션\r\n - 주로 로그를 쓰기 위해 사용된다.\r\n - 제한 방법에 따라 Capped Collection, TTL Collection을 제공한다.\r\n - 한 번 제한 컬렉션으로 변경하면, 일반 컬렉션으로 돌아올 수 없다.\r\n\r\n# Capped Collection\r\n - 저장 용량에 제한이 있는 Collection\r\n - Index가 사용되지 않으므로 쓰기 속도가 빠르다.\r\n - 생성 방법\r\n  $ db.createCollection("logs", {capped: true, size: 10*1024});\r\n - Index가 없으므로 저장 순서대로 정렬하기 위한 $natrual 내장 필드를 제공\r\n  $ db.logs.find().sort({$natural: -1}) // 최신순 정렬\r\n\r\n# TTL Collection\r\n - 저장 시간에 제한이 있는 Collection\r\n - Index를 이용함\r\n - TTL Collection을 만들기 위해 인덱싱 되는 필드는 date 타입이야 함\r\n - 생성 방법\r\n  $ db.createCollection("logs")\r\n  $ db.logs.createIndex({date: 1}, {expireAfterSeconds: 60*60*24})', NULL, '', 5, 0),
(2025, 'dale.seo', '', '', '2016-06-02 09:16:25', '', 'GridFS - MogoDB에 파일 쓰기', 'https://docs.mongodb.com/manual/core/gridfs/\r\n\r\n - MogoDB에는 16MB 보다 큰 문서를 저장할 수 없으므로...\r\n - 대용량 파일을 256KB으 작은 청크(chunk)라는 단위로 나누어 저장함\r\n - 기존의 O/S 레벌 File System이 가지는 문제점을 피할 수 있음\r\n - Shad 했을 경우, 여러 노드에 균등하게 분산해서 써줌\r\n - 스트리밍 서비스를 구현할 때 유용하게 쓰임\r\n - 16MB 보다 작은 파일을 저장할 때는 구지 GridFS 쓸 필요 없음 (BinData 타임 써서 일반 문서처럼 저장)\r\n\r\n# 파일 저장/조회/검색 방법\r\n - mongfiles 명령어 사용\r\n  . put <file_name> : 저장하기\r\n  $MONGO_HOME\\bin\\mongofiles --host localhost --port 10000 --db videos put rainbow.mp4\r\n  $MONGO_HOME\\bin\\mongofiles --host localhost --port 10000 --db videos  put rightnow.mp4\r\n  . list : 저장된 파일 목록 조회\r\n  $MONGO_HOME\\bin\\mongofiles --host localhost --port 10000 --db videos  list\r\n  . search : 저장된 파일 검색\r\n  $MONGO_HOME\\bin\\mongofiles.exe --host localhost --port 10000 --db videos  search r*.mp4\r\n\r\n# 몽고쉘로 확인하기\r\n - 2개의 컬렉션을 사용 : fs.flies, fs.chunks (1:n 관계)\r\n - 파일 메타 확인\r\n$ db.fs.files.find()\r\n - 파일 바이너리 청크 확인\r\n$ db.fs.chunks.find()', NULL, '', 16, 0),
(2026, 'dale.seo', '', '', '2016-06-02 13:35:58', '', 'MongoDB Java Driver', '# Reference\r\nhttps://docs.mongodb.com/ecosystem/drivers/java/\r\n\r\n# Github\r\nhttp://mongodb.github.io/mongo-java-driver/\r\nhttp://mongodb.github.io/mongo-java-driver/3.2/driver/\r\n\r\n# API\r\nhttp://api.mongodb.com/java/current/', NULL, '', 6, 0),
(2027, 'dale.seo', '', '', '2016-06-02 15:33:38', '', '[명령어]mkdir', '-p 옵션 : 하위 디렉토리 까지 한 번에 만듬\r\n\r\nex1) mkdir -p data/db\r\n\r\n{}로 묶으면 여러 디렉토리를 한 번에 생성 가능\r\n\r\n$ mkdir {public,public/css,public/img,public/js,db,views,views/includes,routes}\r\n', NULL, '', 8, 0),
(2028, 'dale.seo', '', '', '2016-06-02 21:07:51', '', '문서 간 참조 방법 (Manual references over DBRefs)', 'https://docs.mongodb.com/manual/reference/database-references/\r\n\r\n\r\nIn most cases you should use the manual reference method for connecting two or more related documents. However, if you need to reference documents from multiple collections, consider using DBRefs.\r\n\r\n================================================================\r\n# Manual Reference : RDB 테이블의 외래키 필드 처럼, 참조하는 컬렉션에 왜래키 필드 추가\r\n - 장점 : 몽고 공식 문서에서는 특별한 사유가 없는한 DBRefs 대신에 Manual references를 사용하라고 권장하고 있음\r\n - 단점 : 여러번 쿼리를 해야함\r\n================================================================\r\noriginal_id = ObjectId()\r\n\r\ndb.places.insert({\r\n    _id : original_id,\r\n    name : "facebook",\r\n    url : "http://facebook.com"\r\n})\r\n\r\ndb.people.insert({\r\n    name : "mrlee",\r\n    places_id: original_id,\r\n    url:  "http://facebook.com/mrlee"\r\n})\r\n\r\nvar fb = db.places.findOne({name:''facebook''});\r\nvar cursor = db.people.find({places_id : fb._id});\r\nwhile (cursor.hasNext()) {\r\n  printjson(cursor.next());\r\n}\r\n================================================================\r\n\r\n# DBRefs\r\n - 문서간에 참조를 수행하는 표준 스펙\r\n - 방법 : 참조할 문서의 DB명 필드($db), 컬렉션명 필드($ref)과 _id($id) 필드 값을 references 배열 필드에 추가\r\n - 장점\r\n   . Java Driver에서 자동적으로 처리해주기 위한 Helper Method 지원\r\n   . 하나의 문서가 여러 컬렉션, 심지어 다른 DB까지 참조할 수 있음\r\n - 단점 : 여러번 쿼리를 해야함\r\n => 항상 참조하는 컬렉션이 일정하다면 저장공간 절약을 위해 Manual Reference 추천\r\n\r\n================================================================\r\ndb.users.insert({ _id : "mike", display_name : "Mike D" }) \r\ndb.users.insert({ _id : "kristina", display_name : "Kristina C" }) \r\n\r\ndb.notes.insert({ _id : 5, author : "mike", text : "MongoDB is fun!" })\r\ndb.notes.insert({ \r\n  _id : 20, author : "kristina", \r\n  text : "... DBRefs are easy!",\r\n  references : [ \r\n    { $ref : "users", $id : "mike" }, \r\n    { $ref : "notes", $id : 5 }  \r\n  ]       \r\n})\r\n\r\nvar n = db.notes.findOne({_id : 20 });\r\nn.references.forEach(function(ref) {\r\n   printjson(db[ref.$ref].findOne({ _id : ref.$id }));\r\n   //print(ref.$ref + ", " + ref.$id); \r\n})\r\n================================================================\r\n\r\n\r\n\r\n# Aggregate Framework의 $lookup 파이프라인\r\n - 장점 : 한번만 쿼리해도 됨\r\n\r\n================================================================\r\n// Java Driver 2.6 까지는 DBObject DBRef#fetch() 메소드를 제공했었는데, Java Driver 3.2에서 사라짐 ㅠㅠ \r\nJava Driver 3.2 에서는 어떻게 하는건지 공부하기\r\n================================================================\r\n\r\n\r\n', NULL, '', 25, 0),
(2029, 'dale.seo', '', '', '2016-06-02 22:23:27', '', 'MongoDB 인증/인가', '# 인증(Authentication)\r\n  - 단위 : DB\r\n  - 비밀번호 해시 알고리즘 : SCRAM-SHA1 160bit Salt\r\n  - 저장 컬렉션 : system.users\r\n\r\n# 인가(Authorization) \r\n - 단위 : Collection\r\n\r\n# 인가 리소스(Privilege)\r\n - 대상 : Operation(find, insert, update, remove)\r\n - 단위 : Role (Built-in or User-defined)\r\n - 다양한 Built-in Role이 준비되어 있기 때문에, User-defined Role은 잘 안 씀\r\n - Built-in Role 목록 : https://docs.mongodb.com/manual/reference/built-in-roles/\r\n - 저장 컬렉션 : system.roles (User-defined Role만 존재)\r\n\r\n# 인증/인가 관련 커맨드\r\n  : admin DB 에서 수행해야 한다.\r\n\r\n$ db.auth(username, password)\r\n로그인\r\n\r\n$ db.logout()\r\n로그 아웃\r\n\r\n$ db.runCommand({connectionStatus: 1})\r\n로그인 현황 조회\r\n\r\n$ db.system.users.find()\r\n유저 조회\r\n\r\n$ db.createUser(...)\r\n유저 생성\r\n\r\n$ db.dropUser("user3")\r\n유저 제거', NULL, '', 7, 0),
(2031, 'dale.seo', '', '', '2016-06-02 22:49:32', '', 'MongoDB 데몬 설정', 'https://docs.mongodb.com/manual/reference/configuration-options/\r\n\r\n# 설정 방법\r\nmongod 커맨드 실행시킬 때 옵션으로 줄수도 있고, 별도 config 파일에 줄수도 있다.\r\n\r\n# 주요 설정\r\n - bindIp : 서버에서 접속을 받는 IP\r\n   . LAN Card가 여러 개 꼽혀서 할당된 IP가 여러 개일 때 , 접속을 허락할 IP를 지정해준다\r\n   . 지정하지 않으면 모든 IP로 클라이언트 접속을 받을 수 있다.\r\n   . 127.0.0.1로 세팅하면 동일 장비에서만 접속 가능하다. (예를 들어 동일 서버에 Tomcat 설치했을 경우 활용)\r\n\r\n\r\n# 데몬 구동 커맨드 옵션 목록 확인\r\n$ mongod --help', NULL, '', 9, 0),
(2032, 'dale.seo', '', '', '2016-06-02 22:53:42', '', 'MongoShell에서 바로 로그 확인하기', '> db.runCommand({getLog: "*"})\r\n{ "names" : [ "global", "startupWarnings" ], "ok" : 1 }\r\n> db.runCommand({getLog: "global"})\r\n{\r\n        "totalLinesWritten" : 106,\r\n        "log" : [\r\n                "2016-05-30T10:34:53.108+0000 I CONTROL  [initandlisten] MongoDB starting : pid=22986 port=27017 dbpath=/var/lib/mongo 64-bit host=ip-172-31-18-71",\r\n                "2016-05-30T10:34:53.108+0000 I CONTROL  [initandlisten] db version v3.2.6",\r\n                "2016-05-30T10:34:53.108+0000 I CONTROL  [initandlisten] git version: 05552b562c7a0b3143a729aaa0838e558dc49b25",\r\n                "2016-05-30T10:34:53.108+0000 I CONTROL  [initandlisten] OpenSSL version: OpenSSL 1.0.0-fips 29 Mar 2010",', NULL, '', 2, 0),
(2033, 'dale.seo', '', '', '2016-06-02 23:18:57', '', 'MongoDB 모니터링', '# Standalone 데몬 모니터링\r\n$ MONGO_HOME/bin/mongostat --host localhost --p 27017 5\r\n\r\n# Replicaset 데몬 모니터링\r\n$ MONGO_HOME/bin/mongostat --host localhost --p 27017 --discover 5\r\n\r\n- 마지막 인자인 5초마다 테이블 형태로 응답함\r\n- db.serverStatus()나 db.currentOp()의 실시간 버전\r\n- --discover 옵션을 주면 복제셋, 샤드 클러스트 중 한 노드에서 실행하면 클러스터들의 정보를 취합해서 한 번에 출력\r\n- 3.0 버전 부터 --json 옵션 추가', NULL, '', 5, 0),
(2034, 'dale.seo', '', '', '2016-06-02 23:22:45', '', 'MongoDB 모니터링 툴', 'HTTP Interface로 부족하다면 3rd party 모니터링 툴 사용을 고려해본다.\r\n아래 키워드로 구글링 하면 사이트 나옴\r\n\r\nMongdb Cluoud Manager : Cloud 용 (통계 데이터를 Mongo 쪽으로 보냄)\r\nMongdb OPS Manager : 기업 내부용 (다운로드는 가능. 라이센스 확인)\r\n\r\nMongoBird : 국내 솔루션\r\nMongoOwl : mongostat의 웹버전', NULL, '', 3, 0),
(2035, 'dale.seo', '', '', '2016-06-03 00:08:47', '', 'MongoDB 최조 Access Control 세팅 방법', '# 1. 관리자 계정 생성\r\n===============================================================\r\nuse admin\r\n\r\ndb.createUser({\r\n  user: "admin",\r\n  pwd: "admin",\r\n  roles: [\r\n    {role: "root", db: "admin"}\r\n  ]\r\n})\r\n===============================================================\r\n\r\n# 2. 인증모드로 데몬 재시작\r\n- 방법 1 : mongod 커맨드에 --auth 옵션 붙여서 재구동\r\n\r\n===============================================================\r\n\r\n# 3. 인증모드로 데몬 잘 올라왔는지 확인\r\n\r\n$ db.serverCmdLineOpts().parsed.security.authorization\r\nenabled\r\n\r\n===============================================================\r\n\r\n# 4. 몽고쉘 재접속 후 거부 당하기 \r\n\r\n===============================================================\r\n> show collections\r\n2016-06-03T01:09:29.690+0900 E QUERY    [thread1] Error: listCollections failed: {\r\n        "ok" : 0,\r\n        "errmsg" : "not authorized on admin to execute command { listCollections: 1.0, filter: {} }",\r\n        "code" : 13\r\n} :\r\n_getErrorWithCode@src/mongo/shell/utils.js:25:13\r\nDB.prototype._getCollectionInfosCommand@src/mongo/shell/db.js:773:1\r\nDB.prototype.getCollectionInfos@src/mongo/shell/db.js:785:19\r\nDB.prototype.getCollectionNames@src/mongo/shell/db.js:796:16\r\nshellHelper.show@src/mongo/shell/utils.js:753:9\r\nshellHelper@src/mongo/shell/utils.js:650:15\r\n@(shellhelp2):1:1\r\n===============================================================\r\n\r\n\r\n# 5. 어드민 DB로 이동 후 로그인 하기\r\n=============================================================== \r\n> use admin\r\nswitched to db admin\r\n> db.auth("admin", "admin")\r\n1\r\n> show collections\r\nsystem.users\r\nsystem.version', NULL, '', 8, 0),
(2036, 'dale.seo', '', '', '2016-06-03 07:34:00', '', 'MongoDB Replication(복제) 개요', '장애 시에도 MongoDB 가용성을 유지하기 위해 여러 Node를 운영 하는 방법\r\n여기서 Node란 물리적 장비 개수가 아니고, port가 다른 데몬 개수\r\n - local 외의 DB만 복제 하므로 주의 (local DB에서 oplog 관리)\r\n\r\n# 1. Master/Slave 복제\r\n - Master : Write 부하, Slave : Read 부하\r\n - 자동 장애 조치 없음\r\n - 최소 Node 2개\r\n - oplog 컬렉션 : local.oplog.$main\r\n\r\n# 2. Replica Set\r\n - Primary : Write 부하, Secondary : Read 부하, Aribitor : Primary 선출\r\n - 자동 장애 조치 (Zookeepr 처럼)\r\n - Primary 자동 선출\r\n - 최소 Node 3개\r\n - Heartbeat\r\n  . 복제셋의 각 멤버는 2초마다 서로 ping 함\r\n  . 복제셧의 목적은 어떤 경우라도 단 하나의 Primary가 존재하게 함\r\n  . 복제셋 노드들 중 과반 이상이 비정상이면 Primary는 Secondary로 강등 (멤버가 2개이면 Secnodary만 남으므로 반드시 3개 이상으로 구성해야하는 이유)\r\n - oplog 컬렉션 : local.oplog.rs', NULL, '', 33, 0),
(2037, 'dale.seo', '', '', '2016-06-03 08:09:52', '', 'MongoDB Master/Slave 구성방법', '# Master는 --master 옵션으로 구동\r\n$MONGO_HOME/bin/mongod --dbpath data/master --port 10000 --master\r\n\r\n# Slave는 --slave 옵션과 --source 옵션에 Master 정보를 넣고 구동\r\n$MONGO_HOME/bin/mongod --dbpath data/slave --port 10000 --slave --source 192.168.56.101:10000\r\n\r\n\r\n# Master MongShell에서 확인\r\n> db.isMaster()\r\n{\r\n        "ismaster" : true,\r\n\r\n\r\n# Master의 local DB에서 OpLog 컬렉션 생겼는지 확인\r\n> db.oplog.$main.find().sort({ts:-1}).limit(10);	//최근 oplog 값부터10개\r\n\r\n# Slave MongShell에서 slave 활성화 (이거 안 해주면 not master and slaveOk=false 오류 발생)\r\n> rs.slaveOk()\r\n\r\n\r\n# Slave MongShell에서 확인\r\n> db.isMaster()\r\n{\r\n        "ismaster" : false,', NULL, '', 5, 0),
(2038, 'dale.seo', '', '', '2016-06-03 09:01:34', '', 'AWS EC2 인스턴스 간 통신(ping)되게 하는 방법', 'http://stackoverflow.com/questions/21981796/cannot-ping-aws-ec2-instance\r\n\r\n\r\n각 인스턴스의 Security Group에 들어가서 Inbound 탭에서 All ICMP을 Anywhere로 Rule 추가한다.\r\n\r\n\r\n\r\n', NULL, '', 3, 0),
(2039, 'dale.seo', '', '', '2016-06-03 11:44:44', '', 'MongoDB Sharding Cluster 구성 방법', '# 주의 사항\r\n - Sharding을 적용하자마자 모든 DB의 컬렉션들이 샤딩되는 것이 아니다.\r\n - 특정 DB의 특정 컬력션의 특정 필드를 샤드 키를 선정을 위해 인덱싱 후, 라우터 데몬에서 세팅해줘야 한다.\r\n - 그렇게하지 않은 DB들과 컬렉션들은 샤드 노드 첫 번째에만 저장되고 쓰여진다.\r\n\r\n\r\n# 1. 각 Shard 데몬과 Config 데몬 기동\r\n------------------------------------------------------------------------------------------------\r\n$MONGO_HOME/bin/mongod --shardsvr --dbpath data/db --port 10000 \r\n$MONGO_HOME/bin/mongod --configsvr --dbpath data/config --port 20000\r\n------------------------------------------------------------------------------------------------\r\n\r\n\r\n# 2. Config 노드 정보와 함께 라우터 데몬을 기동\r\n - config DB 정보와 chunkSize 옵션을 세팅 (운영 환경에서는 1MB로 하면 큰일 남)\r\n$MONGO_HOME/bin/mongos --configdb 192.168.56.101:20000,192.168.56.102:20000,192.168.56.103:20000 --chunkSize 1 --port 27017\r\n\r\n\r\n# 3. 라우터 데몬에 Mongo Shell 접속, admin DB에서 샤드 노드 정보 추가\r\nmongo 192.168.56.104:10000\r\nuse admin\r\n// Stand alone (모든 샤드 노드 추가)\r\nsh.addShard("192.168.56.101:10000")\r\nsh.addShard("192.168.56.102:10000")\r\nsh.addShard("192.168.56.103:10000")\r\n// Replica Set (아무 멤버 노드나 추가)\r\nsh.addShard("rs1/192.168.56.101:10000")\r\nsh.status()\r\n\r\n\r\n# 4. 컬렉션의 Shard Key 필드 선정 후 그 필드에 인덱스 생성\r\n======================================================\r\nuse test\r\nvar names = ["홍길동", "박문수", "성춘향", "이몽룡", "변사또"];\r\nfor(var i=0; i < 100000; i++){\r\n    name = names[ i % 5 ];\r\n    user_id = i+1;\r\n    added_at = new Date();\r\n    number = Math.floor(Math.random()*10001);\r\n    db.users.insert({\r\n       name : name, \r\n       userid : user_id, \r\n       addedat : added_at, \r\n       num : number \r\n    });\r\n}\r\n\r\ndb.users.ensureIndex( {num:1})\r\n======================================================\r\n\r\n\r\n# 5. 특정 DB에 샤딩을 활성화 시키고, 특정 Collection에 샤딩 수행  \r\n======================================================\r\nuse admin\r\ndb.runCommand({ listshards:1 })\r\nsh.enableSharding("test")\r\n\r\nuse test\r\ndb.users.ensureIndex( {num:1})\r\n\r\nuse admin\r\nsh.shardCollection("test.users", {num:1})\r\n======================================================\r\n\r\n\r\n# 5. 샤딩 구성이 잘 됐는지 확인\r\n======================================================\r\nprintShardingStatus()\r\n\r\n각 샤드 노드에서 접속해서 데이터 확인\r\n\r\n', NULL, '', 12, 0),
(2040, 'dale.seo', '', '', '2016-06-03 13:21:53', '', 'MongoDB Replica Set 구성 방법', '# 1. 복제셋 모드(--replSet "복제셋명")로 모든 노드의 데몬을 재구동\r\n - 모든 노드의 데몬이 같은 복제셋명을 가져야 함\r\n\r\n$MONGO_HOME/bin/mongod --replSet dale\r\n\r\n다음과 같이 설정 파일만 바꿔도 무방\r\n------------------------------------------------------------\r\n$ sudo vi /etc/mongod.conf\r\nreplication:\r\n  replSetName: dale\r\n$ sudo service mongod start\r\n------------------------------------------------------------\r\n\r\n# 2. 데몬이 제대로 복제셧 모드로 올라왔는지 Primary 몽고쉘에서 확인\r\n\r\n> db.serverCmdLineOpts().parsed.replication\r\n{ "replSet" : "dale" }\r\n\r\n\r\n# 3. Primary 몽고쉘의 admin DB에서 자기 노드를 포함한 Secondary와 Arbiter의 주소 정보를 등록\r\n\r\n> use admin \r\n> rs.initiate(); // initiate()는 도메인 네임으로 자동등록함.\r\n> cfg = rs.conf();\r\n> cfg.members[0].host = "192.168.56.101:40000"; // IP 주소로 재등록 후 Replica Set 재 설정\r\n> rs.reconfig(cfg);\r\n> rs.add("192.168.56.102:40000"); // Secondary 등록\r\n> rs.addArb("192.168.56.103:40000"); // Arbiter 등록\r\n\r\n\r\n# 4. 모든 노드에 접속해서 설정 정보, 상태 점검\r\n - 프롬프트 모양에 복제셋명이 확인되는지 확인\r\n - IP, Port가 제대로 등록되었는지 확인\r\n - 모든 노드의 health가 1인지 확인\r\n\r\ndale:PRIMARY> db.isMaster() // 마스터 여부 확인\r\ndale:PRIMARY> rs.conf() // Replcica 설정 정보 확인\r\ndale:PRIMARY> rs.state() // Replica Set 상태 확인\r\n\r\n\r\n# 5. Primary에서 Write 후 Secondary 에서 Read 되는지 확인\r\n\r\ndale:PRIMARY> use test\r\ndale:PRIMARY> for (var i=0; i < 100; i++) {\r\n   db.user.save({name:"john"+i, age:20 + (i%10) })\r\n}\r\n\r\ndale:SECONDARY> rs.slaveOk()\r\ndale:SECONDARY> use test\r\ndale:SECONDARY> db.user.count() // 100\r\n\r\n\r\n# 6. Primary 데몬을 내렸을 때, Secondary가 Primary로 전환이 되는지 확인\r\n\r\n# 7. Primary 데몬을 다시 올리고, Secondary에서 rs.stepDown() 했을 때, Primary가 다시 Primary가 되는지 확인', NULL, '', 21, 0),
(2041, 'dale.seo', '', '', '2016-06-03 19:16:33', '', 'MongoDB YAML 설정 예제', 'http://dba.stackexchange.com/questions/82591/sample-yaml-configuration-files-for-mongodb', NULL, '', 3, 0),
(2042, 'dale.seo', '', '', '2016-06-03 21:40:41', '', 'MongoDB Replica Set 인증 적용 (Access Control (keyfile))', 'https://docs.mongodb.com/manual/tutorial/deploy-replica-set-with-keyfile-access-control/#deploy-repl-set-with-auth\r\n\r\n# Primary 서버에서 keyfile 생성 (ex. /data/key/rs.key)\r\n\r\n$ sudo mkdir -p /data/key\r\n$ cd /data/key\r\n$ sudo vi rs.key\r\n... 아무 문자열이나 6글자 이상 입력 ...\r\n$ sudo chown mongod:mongod rs.key\r\n$ sudo chmod 400 rs.key\r\n\r\n\r\n# 데몬 설정 추가\r\nsecurity.keyFile: /data/key/rs.key\r\n\r\n\r\n# 데몬 재기동', NULL, '', 13, 0),
(2043, 'dale.seo', '', '', '2016-06-03 23:19:16', '', 'MongoDB Replica Set Oplog 관련', 'https://docs.mongodb.com/manual/core/replica-set-oplog/\r\n\r\n# Oplog 사이즈 관련 주의사항\r\n - Master(또는 Primary)에서 Slave(또는 Secondary)로 복제할 오퍼레이션 내역을 oplog라고 하는데,\r\n   oplog를 저장하는 컬렉션이 capped collection이기 때문에 Secondary 노드가 다운되더라도 8시간 이상 버틸 수 있는 적당한 크기 설정이 매우 중요\r\n - 데몬 뛰울 때 --oplogSize 옵션값을 명시적으로 세팅해주지 않으면 기본 크기 적용 (1GB 이상이거나 가용 디스크 공간의 5%)\r\n - db.oplog.rs.status()를 통해 avgObjSize를 참고하면 8시간 이상 버틸 수 있는 oplog 사이즈 계산이 가능\r\n\r\n# Oplog 사이즈 및 마지막 복제 시간 조회\r\nrs1:PRIMARY> rs.printReplicationInfo()\r\n또는\r\nrs1:PRIMARY> db.getReplicationInfo()\r\n----------------------------------------------------------------------------\r\nconfigured oplog size:   990MB\r\nlog length start to end: 25888secs (7.19hrs)\r\noplog first event time:  Fri Jun 03 2016 15:28:43 GMT+0900\r\noplog last event time:   Fri Jun 03 2016 22:40:11 GMT+0900\r\nnow:                     Fri Jun 03 2016 23:25:02 GMT+0900\r\n----------------------------------------------------------------------------\r\n\r\n\r\n# 각 Secondary 멤버들이 복제를 받은 정보 확인\r\nrs1:PRIMARY> rs.printSlaveReplicationInfo()\r\n----------------------------------------------------------------------------\r\nsource: 52.78.0.194:27017\r\n	syncedTo: Fri Jun 03 2016 22:40:11 GMT+0900\r\n	0 secs (0 hrs) behind the primary \r\n----------------------------------------------------------------------------\r\n\r\n\r\n# 최근 5개의 Oplog를 역순으로 조회\r\nrs1:PRIMARY> use local\r\nrs1:PRIMARY> db.oplog.rs.find().sort({ts: -1}).limit(5)', NULL, '', 16, 0),
(2044, 'dale.seo', '', '', '2016-06-04 00:18:42', '', 'MongoDB Replica Set Rollback', 'Step 1) Primary에 쓰여진 데이터가 Secondary로 복제되기 전에 Primary에 장애가 난다면?\r\n- Secondary가 Primary로 승격됨 \r\n\r\nStep 2) Primary 장애가 복구되면?\r\n- Primary가 Secondary로 강등됨\r\n\r\nSecondary로 강등된 Primary에 미처 복제되지 못한 데이터 (Journal File에 있음) 발생!!!\r\n다행이도 복제되지 못한 데이터들은 모두 롤백되고, $dbpath/rollback 디렉토리에 bson 파일 포맷으로 저장됨\r\n=> mongostore 커맨드로 복구 가능\r\n\r\n이러한 문제를 예방하려면 Application 개발 시 WriteConcern을 REPLICAS_SAFE로 세팅하면 됨\r\n=> Primary에 쓰기 후 Secondary로 복제될 때 까지 데몬에서 응답을 하지 않기 때문에 성능 저하 감수해야 함', NULL, '', 4, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(2045, 'dale.seo', '', '', '2016-06-05 10:55:16', '', 'MongoDB Journaling VS Replication VS Sharding', '일반적으로 Journaling은 항상 켜두고, Replica Set으로만 운영하다가, 데이터 수가 폭증하면 Sharding Cluster 구성을 고려하게 된다.\r\n\r\n# Journaling \r\n - 쓰기 데이터를 유실않기 위함\r\n - Data File 외에 최종 쓰여지기(sync) 전에 Journal File에 메모리맵에 쓰여진 데이터를 더 잦은 빈도로 써놓음으로써,\r\n - 데몬이 갑작스럽게 내려가더라도 재구동시 쓰기 데이터를 Rollback 할 수 있음\r\n - 데몬이 내려가면 다시 올릴 때 까지 서비스 불가. 그 전 시점까지쓰여진 데이터만 복구\r\n\r\n# Replication\r\n - 장애 시에도 서비스 가용성을 확보하기 위함\r\n - 데몬이 내려가도 예비 데몬으로 계속해서 서비스\r\n\r\n# Sharding\r\n - 데이터를 여러 노드에 분산 저장하기 위함\r\n - 쓰기와 읽기 성능 향상을 위함\r\n \r\n   ', NULL, '', 6, 0),
(2046, 'dale.seo', '', '', '2016-06-05 10:59:03', '', 'MongoDB Sharding 고려 상황', '- 현재 장비에 디스크 공간이 부족할 때\r\n- 싱글 노드일 대 보다 더 빠른 쓰기 작업을 하고 싶을 때\r\n- 성능 향상을 위해 더 많은 데이터를 메모리에 올려두고 싶을 때', NULL, '', 2, 0),
(2047, 'dale.seo', '', '', '2016-06-05 11:02:19', '', 'MongoDB Sharding 구성 요소', '# 라우터 \r\n - mongos 커맨드로 데몬 실행\r\n - Config 서버를 읽어 라우팅 정보를 알아내어 Shard 서버로 데이터를 쓰기나 읽음\r\n - Blancer라는 내부 프로세스가 샤드 노드 간 청크 마이그레이션 수행 (데이터 수를 샤드간 균등하게 맞춰주기)\r\n - 클라이언트에서는 라우터에 접속\r\n# 여러 개의 Shard 서버\r\n - Standalone 또는 Replica Set\r\n - 샤딩된 데이터 분산 저장\r\n - mongod --shardsvr 커맨드로 데몬 실행 \r\n# 3개의 Config 서버\r\n - 라우팅 정보 저장 (샤드키에 따라 데이터가 어느 샤드 노드로 쓰고 읽어올지)\r\n - 장애나면 전체가 마비되기 때문에 3중 안전 구조\r\n - mongod --configsvr 커맨드로 데몬 실행', NULL, '', 9, 0),
(2048, 'dale.seo', '', '', '2016-06-05 11:26:37', '', 'MongoDB Shard Key 선정 시 주의 사항', '# 개념\r\n - 데이터를 여러 샤드 노드에 분산 시키는 기준이 됨\r\n - 따라서 샤딩 성능을 결정하는 가장 중요한 요인이 Shard Key 선정임\r\n\r\n# 고려 인자 1. Cardinality (샤드키 데이터의 종류가 많으냐)\r\n - 샤드키 Distinct 수 / 총 데이터 수\r\n . 너무 적으면 Super Chunk가 발생 빈도가 높아져 Freezing 자주 유발\r\n . 0.1 ~ 0.15 정도의 Cardinality가 최적 \r\n\r\n# 고려 인자 2. Locality (데이터가 얼마나 몰리느냐)\r\n- 증가하는 샤드키. 즉, Linear한 필드를 Shad Key로 잡으면...\r\n . 읽기가 Range 기반 쿼리로 이뤄진다면 유리해짐 (데이터가 한 샤드 노드에 몰려있으므로 여러 샤드 노드를 안 찔러도 됨)\r\n . 하지만 쓰기 부하가 마지막 노드에 몰리는 Hotspot 현상이 발생하며 따라서 청크 마이그레이션이 잦아져서 쓰기 성능이 저하됨\r\n- 랜덤한 샤드키. 즉, Hash한 필드를 Shad Key로 잡으면...\r\n . 읽기가 Equal 기반 쿼리로 이뤄진다면 읽기 부하가 여러 사드 서버로 골고루 분산되서 유리함\r\n . 쓰기 부하도 여러 사드 서버로 골고루 부산되어 유리하\r\n . 하지만 Range 기반 쿼리는 한 번에 여러 사드 노드를 찔러야 하므로 최악의 선택이 될 수 있음\r\n\r\n# Cardinality 와 Locality  를 적절히 조합할 것\r\n- 따라서 읽기와 쓰기 부하 비율을 잘 따져서 Shard Key를 Linear 필드로 할지 Hash 필드로 할지 결정할 것\r\n- 읽기와 쓰기 부하가 비슷하다면 복합 샤드키를 적용하거나 Shard Key를 위한 전용으로 별도 필드를 운영하는 것 고려\r\n- Equal 읽기와 쓰기 부하기 골고루 분산되면서, Range 읽기를 위한 적당한 데이터가 몰려있게 하려면 Hash한 값과 Linear한 값을 적당히 조합해서 Shad Key 구성 \r\n- 가능하면 클라이언트에서 샤드 키를 이용해서 쿼리를 하게 하면 최적의 성능을 보장할 수 있음', NULL, '', 4, 0),
(2049, 'dale.seo', '', '', '2016-06-05 11:59:10', '', 'MongoDB Sharding Config 정보 조회', 'Config 노드의 컬렉션 정보를 볼때는 반드시 라우터를 통해 몽고쉘에 접속해서 확인할 것\r\n\r\nuse.config\r\ndb.shards.find()\r\ndb.databases.find()\r\ndb.collections.find()\r\ndb.chunks.find()\r\ndb.settings.find()\r\n\r\n=> sh.status(true) 로 조회하면 한 번에 나옴', NULL, '', 4, 0),
(2050, 'dale.seo', '', '', '2016-06-05 12:06:34', '', 'MongoDB Shadding 사용 시 제약 사항', '# Unique Index 사용 불가\r\n - _id 필드와 샤드키 필드외에는 고유 색인 추가가 불가능\r\n - 여러 샤드 노드에 분산되어 있는 데이터들의 고유성을 확인 비용이 크기 때문\r\n\r\n# Single Update 에러\r\n - _id 필드와 샤드키 필드외에는 Single Update 불가 (조건에 해당하는 첫번째 데이터만 수정하는 기능)\r\n - 데이터들이 여러 샤드 노드에 분산되어 있기 때문에 어떤 데이터가 첫번째인지 판단할 수가 없기 때문\r\n - db.collection.update 함수의 4번째 인자를 true로 지정하여 multi update를 하면 에러 발생하지 않음\r\n\r\n# Chunk Migration 동안 count() 값 일시적인 증가\r\n - Chunk Migration 동안에 count() 함수를 호출하면, 일시적으로 증가된 값이 나올 수 있음', NULL, '', 2, 0),
(2051, 'dale.seo', '', '', '2016-06-05 12:17:57', '', 'MongoDB 데이터 모델링', '# RDB의 Data 구조 중심 설계와 비교\r\n - 기존 RDB의 데이터 구조 중심으로 설계의 문제점 : 정규화가 필요하고 이에 따라 JOIN이 필요하여 일기 성능이 저하\r\n - Document DB는 Data와 Biz Process를 동반 고려하여 설계함\r\n\r\n# 데이터간 관계 표현\r\n 1) Embed (Strong Association)\r\n   - 자식 객체가 단독으로 사용되는 일이 없을 때 사용\r\n   - 부모 객체를 읽을 때 자식 객체도 한 번에 읽을 수 있기 때문에 읽기 성능 향상\r\n   - ex) Order - Order Item\r\n 2) Linking (Weak Association)\r\n  - 자식 객체가 단독으로 조회될 일이 있을 때 사용\r\n  - 데이터이 일관성이 중요할 때 사용\r\n  - Embed가 적합한 상황에서도 하나의 객체 크기가 16MB 이상이라면 Linking을 쓸 수 밖에 없음\r\n  - 사이즈가 증가하는 update가 많다면 Linking을 써야함 (ex) 댓글, 좋아요)\r\n  - ex) Product - Product Category\r\n\r\n# Tree 표현\r\n - RDB를 쓸 때는 특수 쿼리를 쓰지 않으면, 한 번의 쿼리로 리프부터 루트까지 한 번에 알아낼 수 있는 방법이 없었음\r\n - MongoDB에서는 배열을 이용하여 Single Document에 저장할 수 있으므로 성능 대폭 향상\r\n - Chlid Link 모델 : 루트를 제외한 모든 다큐먼트들이 ancestors 배열 필드와 parent 필드를 가지면 됨', NULL, '', 5, 0),
(2052, 'dale.seo', '', '', '2016-06-06 22:21:52', '', 'Windows 주요 디렉토리 이동 shortcut', 'http://superuser.com/questions/168714/is-there-a-shortcut-command-in-windows-command-prompt-to-get-to-the-current-user\r\nhttps://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/ntcmds_shelloverview.mspx?mfr=true\r\n\r\n# 유저홈 이동\r\ncd %homepath$\r\n\r\n# 윈도우홈 이동\r\ncd %windir%', NULL, '', 2, 0),
(2053, 'dale.seo', '', '', '2016-06-07 09:02:22', '', 'Javascript 배열 관련 함수', 'http://www.w3schools.com/jsref/jsref_obj_array.asp\r\n\r\n- push(obj) : 배열 맨 뒤에 추가\r\n- obj pop() : 배열 맨 뒤에서 삭제\r\n\r\n- unshift(obj) : 배열 앞 뒤에 추가\r\n- obj shift() : 배열 맨 앞에서 삭제', NULL, '', 2, 0),
(2054, 'dale.seo', '', '', '2016-06-07 09:14:27', '', '펑션 내에서 var 키워드 없이 변수 사용 시 주의사항', '펑션 내에서 var를 사용하지 않고, 변수를 사용할 경우,\r\n암묵적으로 해당 변수는 펑션 상위 Scope에 존재하던 Global 변수라고 가정하기 때문에,\r\n원치않는 결과를 초래할 수 있다.\r\n\r\n------------------------------------------------------------------------------------\r\nIn JavaScript, scope refers to the visibility of variables. Variables which are defined outside of a function block have Global scope. This means, they can be seen everywhere in your JavaScript code.\r\n\r\nVariables which are used without the var keyword are automatically created in the global scope. This can create unintended consequences elsewhere in your code or when running a function again. You should always declare your variables with var.\r\n\r\nInstructions\r\nDeclare a global variable myGlobal outside of any function. Initialize it to have a value of 10\r\n\r\nInside function fun1, assign 5 to oopsGlobal without using the var keyword.\r\n\r\n\r\n------------------------------------------------\r\n// Declare your variable here\r\nvar myGlobal = 10;\r\n\r\nfunction fun1() {\r\n  // Assign 5 to oopsGlobal Here\r\n  oopsGlobal = 5;\r\n}\r\n\r\n// Only change code above this line\r\nfunction fun2() {\r\n  var output = "";\r\n  if (typeof myGlobal != "undefined") {\r\n    output += "myGlobal: " + myGlobal;\r\n  }\r\n  if (typeof oopsGlobal != "undefined") {\r\n    output += " oopsGlobal: " + oopsGlobal;\r\n  }\r\n  console.log(output);\r\n}\r\n', NULL, '', 11, 0),
(2055, 'dale.seo', '', '', '2016-06-07 09:20:22', '', '같은 이름의 Local, Global 변수 사용하기', '같은 이름을 사용했을 때 펑션 내에서는 Local 변수가 Global 변수보다 우선권을 갖는다.\r\n\r\n\r\nGlobal vs Local Scope in Functions\r\nIt is possible to have both local and global variables with the same name. When you do this, the local variable takes precedence over the global variable.\r\n\r\nIn this example:\r\n\r\n\r\n\r\nvar someVar = "Hat";\r\nfunction myFun() {\r\n  var someVar = "Head";\r\n  return someVar;\r\n}\r\nThe function myFun will return "Head" because the local version of the variable is present.\r\n\r\nInstructions\r\nAdd a local variable to myOutfit to override the value of outerWear with "sweater".\r\n', NULL, '', 2, 0),
(2056, 'dale.seo', '', '', '2016-06-07 21:41:54', '', 'NPM CLI (Node Proejct Manager)', 'https://docs.npmjs.com/cli\r\n\r\n\r\nJava의 Maven과 비슷한 의존성 관리 도구\r\n\r\n\r\n\r\n# 나의 로컬 디렉토리를 패키지로 등록 (node 프로젝트 초기 세팅)\r\nnpm init\r\n\r\n# 패키지 설치 (별도 포스트 확인)\r\nnpm install \r\n\r\n# 패키지의 오래된 의존성 확인\r\nnpm outdated\r\n\r\n# 프로젝트 의존성 목록 갱신 (package.json 기준)\r\nnpm update <pkg>\r\n\r\n# 디펜던시 트리 보기\r\nnpm ls\r\n\r\n# 노드 서버 시작\r\nnpm start\r\n\r\n# 패키지 검색\r\nnpm search <keyword>\r\n\r\n# 최신 버전 알아보기\r\nnpm view <package-name> versions', NULL, '', 61, 0),
(2057, 'dale.seo', '', '', '2016-06-07 22:16:56', '', 'underscore.js', 'http://underscorejs.org/\r\n\r\n기본 Javascript를 보충해주는 모듈.\r\nJava의 Commons 프로젝트 느낌?\r\n\r\n-------------------------------------------------------------------------------------\r\nconst _ = require(''underscore'');\r\nvar arr = [3, 6, 9, 1, 12];\r\nconsole.log(arr[0])\r\nconsole.log(_.first(arr));\r\nconsole.log(arr[arr.length - 1]);\r\nconsole.log(_.last(arr));', NULL, '', 1, 0),
(2058, 'dale.seo', '', '', '2016-06-08 08:59:23', '', 'Javascript Comparison Operators (=, ==, !=, ===, !==) 간 비교', '의도적인 경우를 제외하고는 == 대신 === 연산자를 사용할 것!\r\n============================================\r\n\r\n# Assignment (=)\r\n : Operator 우측의 값을 좌측의 변수로 할당\r\n\r\na = 7\r\n\r\n# Equality (==)\r\n :  Operator 좌우측의 값이 동일한지 비교\r\n\r\n7 == ''7'' // true\r\n1 == true // true\r\n\r\n# Inequality (!=)\r\n : Equality Operator와 정 반대\r\n\r\n# Strict Equality (===)\r\n : Operator 좌우측의 타입과 값이 모두 동일한지 비교\r\n\r\n7 === ''7'' //  false\r\n1 == true // false\r\n\r\n\r\n# Strict Inequality (!==)\r\n : Strict Equality Operator와 정 반대', NULL, '', 11, 0),
(2059, 'dale.seo', '', '', '2016-06-08 18:39:51', '', 'awk 패턴 처리', 'awk는 특별한 의미가 없음 (이걸 만든 사람 3명의 이름 앞글자를 딴 거라고 함)\r\n특정 라인이나 필드만 출력할 때 사용된다. 파이프(|) 기호와 자주 쓰인다.\r\n\r\n$ awk /root/ /etc/group\r\n/etc/group 파일에서 "root" 문자열을 포함한 라인만 출력\r\n\r\n$ awk -F: /root/''{print $1}'' /etc/group\r\n/etc/group 파일에서 "root" 문자열을 포함한 라인에서 첫번째 필드만 출력\r\n\r\n$ ls -l |awk ''{print $9}''\r\n파일 목록에서 이름 열만 출력\r\n\r\n$ ls -al |awk ''$5 > 1024 {print $5, $9}''\r\n1KB 이상 파일 목록만 출력\r\n\r\n', NULL, '', 3, 0),
(2060, 'dale.seo', '', '', '2016-06-09 08:31:16', '', 'Javascript switch 문 사용시 주의 점', 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch\r\n\r\ncase values are tested with strict equality (===). ', NULL, '', 4, 0),
(2061, 'dale.seo', '', '', '2016-06-10 08:39:00', '', 'Javascript Object 객체의 hasOwnProperty 펑션', 'https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\r\n\r\nJava Map의 contains 메소드랑 같은 역할을 하는 펑션임', NULL, '', 3, 0),
(2062, 'dale.seo', '', '', '2016-06-10 13:41:13', '', 'URLEncodedUtils를 이용한 NameValuePair 목록과 formUrlEncoded 문자열간 상호 변환', 'GET 방식으로 요청할 QueryString이나 POST(x-www-from-urlencoded 컨텐트 타입) 방식으로 요청할 RequestBody를 인코딩/디코딩을 신경쓰지 않고 다룰 수 있게 해준다.\r\n\r\n* URLEncodedUtils#format\r\n - NameValuePair 목록을 formUrlEncoded 문자열로 변환해준다.\r\n - HTTP 요청을 보낼 때 직접 각 파라미터의 이름과 값을 UrlEncode 해서 &로 접합 시키는 것 보다는,\r\n   NameValuePair 목록을 만들고 format 메소드로 실수 없이 formUrlEncoded 문자열을 만들어 낼 수 있다.\r\n\r\n* URLEncodedUtils#parse\r\n - formUrlEncoded 문자열 NameValuePair 목록으로 변환해준다.\r\n\r\n=================================================================================\r\npackage seo.dale.apache.http;\r\n\r\nimport org.apache.http.NameValuePair;\r\nimport org.apache.http.client.utils.URLEncodedUtils;\r\nimport org.apache.http.message.BasicNameValuePair;\r\nimport org.junit.Test;\r\n\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\n\r\npublic class URLEncodedUtilsTest {\r\n\r\n	@Test\r\n	public void testParse() throws Exception {\r\n		String formUrlEncoded = "category=app+game%2Bmusic&productId=P12345&key=val&key=%EA%B0%92";\r\n		System.out.println("formUrlEncoded : " + formUrlEncoded);\r\n\r\n		List<NameValuePair> paramList = URLEncodedUtils.parse(formUrlEncoded, StandardCharsets.UTF_8);\r\n		System.out.println("paramList : " +  paramList);\r\n\r\n		assertEquals(4, paramList.size());\r\n\r\n		NameValuePair category = paramList.get(0);\r\n\r\n		assertEquals("category", category.getName());\r\n		assertEquals("app game+music", category.getValue());\r\n	}\r\n\r\n	@Test\r\n	public void testFormat() throws Exception {\r\n		List<NameValuePair> paramList = new ArrayList<>();\r\n		paramList.add(new BasicNameValuePair("category", "app game+music"));\r\n		paramList.add(new BasicNameValuePair("productId", "P12345"));\r\n		paramList.add(new BasicNameValuePair("key", "val"));\r\n		paramList.add(new BasicNameValuePair("key", "값"));\r\n		String formUrlEncoded = URLEncodedUtils.format(paramList, StandardCharsets.UTF_8);\r\n		System.out.println("formUrlEncoded : " + formUrlEncoded);\r\n		assertEquals("category=app+game%2Bmusic&productId=P12345&key=val&key=%EA%B0%92", formUrlEncoded);\r\n	}\r\n\r\n}', NULL, '', 3, 0),
(2063, 'dale.seo', '', '', '2016-06-10 17:55:41', '', 'application/x-www-form-urlencoded 컨텐트 타입으로 POST 요청 처리시 주의사항', 'http://lng1982.tistory.com/225\r\n\r\nServlet 스펙 상 application/x-www-form-urlencoded은 다른 데이터 타입과 다르게 처리된다.\r\n왜냐하면 서버 어플리케이션에서 접근하는 패턴이 GET 방식과 유사하기 때문이다.\r\n\r\n즉, 다른 데이터 타입은 일반적으로 getInpuStream 이나 getRreader 메서드를 통해 Request Body에 접근하지만\r\napplication/x-www-form-urlencoded은 GET 방식과 유사하게 getParameterXXX 메서드를 파라마터 스트링값에 접근한다.\r\n그리고 이미 톰켓에서 pramemterMap을 만든다고 inputSteam을 읽어버렸기 때문에 필터/인터셉터/컨트롤러 단에서 사용할 inputStream은 남아있지 않다.\r\n\r\n따라서 RequestWrapper 작성할 때는 이 부분을 고려해서 작성하도록 한다.\r\n\r\nhttp://meetup.toast.com/posts/44', NULL, '', 8, 0),
(2064, 'dale.seo', '', '', '2016-06-13 09:04:26', '', '랜덤 정수 생성하기', 'Math.floor()와 Math.random() 메소드를 이용하면 됨\r\n\r\n====================================================\r\n# 0에 19사이 정수 생성\r\n\r\nvar randomNumberBetween0and19 = Math.floor(Math.random() * 20);\r\n\r\n# 0에서 9사이 랜덤 정수 생성\r\nfunction randomWholeNum() {\r\n\r\n  // Only change code below this line.\r\n\r\n  return Math.floor(Math.random() * 10);\r\n}\r\n\r\n\r\n# min 부터 max 사이 정수 생성 (min, max 포함)\r\nfunction randomRange(min, max) {\r\n\r\n  return Math.floor(Math.random() * (max - min + 1)) + min; // Change this line\r\n\r\n}', NULL, '', 11, 0),
(2065, 'dale.seo', '', '', '2016-06-14 08:24:33', '', '정규식에서 맨 뒤 g와 i 옵션의 의미', 'Regular expressions are used to find certain words or patterns inside of strings.\r\n\r\nFor example, if we wanted to find the word the in the string The dog chased the cat, we could use the following regular expression: /the/gi\r\n\r\nLet''s break this down a bit:\r\n\r\n/ is the start of the regular expression.\r\n\r\nthe is the pattern we want to match.\r\n\r\n/ is the end of the regular expression.\r\n\r\ng means global, which causes the pattern to return all matches in the string, not just the first one.\r\n\r\ni means that we want to ignore the case (uppercase or lowercase) when searching for the pattern.', NULL, '', 4, 0),
(2066, 'dale.seo', '', '', '2016-06-14 08:37:27', '', '자바스크립트 생성자', '생성자도 일종의 함수이며 대문자로 시작하는 변수에 할당한다.\r\n사용할 때는 new 연산자를 사용한다.\r\n\r\n\r\nvar Car = function() {\r\n  this.wheels = 4;\r\n  this.engines = 1;\r\n  this.seats = 1;\r\n};\r\n\r\n// Only change code below this line.\r\n\r\nvar myCar = new Car();\r\nmyCar.nickname = "cool";\r\n\r\n========================================================\r\n\r\n\r\nvar Car = function(wheels, seats, engines) {\r\n  //Change this constructor\r\n  this.wheels = wheels;\r\n  this.seats = seats;\r\n  this.engines = engines;\r\n};\r\n\r\n//Try it out here\r\nvar myCar = new Car(4, 1, 1);\r\n', NULL, '', 4, 0),
(2067, 'dale.seo', '', '', '2016-06-14 08:44:44', '', '자바스크립트 객체의 private 프로퍼티', 'this. 접두어가 붙어 있지 않은 변수들은 객체 밖에서는 접근할 수 없는 private 프로퍼티로 취급된다.\r\n\r\nvar Car = function() {\r\n  // this is a private variable\r\n  var speed = 10;\r\n\r\n  // these are public methods\r\n  this.accelerate = function(change) {\r\n    speed += change;\r\n  };\r\n\r\n  this.decelerate = function() {\r\n    speed -= 5;\r\n  };\r\n\r\n  this.getSpeed = function() {\r\n    return speed;\r\n  };\r\n};\r\n', NULL, '', 2, 0),
(2068, 'dale.seo', '', '', '2016-06-14 08:53:58', '', '자바스크립트 Array 내장 객체 함수 - map', 'https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/map', NULL, '', 3, 0),
(2069, 'dale.seo', '', '', '2016-06-14 08:54:21', '', '자바스크립트 Array 내장 객체 함수 - reduce', 'https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce', NULL, '', 3, 0),
(2070, 'dale.seo', '', '', '2016-06-14 08:56:35', '', '자바스크립트 Array 내장 객체 함수 - filter', 'https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/filter', NULL, '', 3, 0),
(2071, 'dale.seo', '', '', '2016-06-14 09:02:32', '', '자바스크립트 Array 내장 객체 함수 - sort', 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\r\n\r\n실제 오리지널 배열의 원소 위치가 바뀌므로 주의한다.\r\nsort 함수에 Callback 함수를 파라미터로 던지지 않으면 배열의 각 원소를 스트링으로 변환하여 비교한다.\r\n따라서 정수 배열의 오름차순 또는 내림차순을 원할 경우, Callback 함수를 반드시 넘겨야 한다.\r\n\r\n\r\n\r\nYou can use the method sort to easily sort the values in an array alphabetically or numerically.\r\n\r\nUnlike the previous array methods we have been looking at, sort actually alters the array in place. However, it also returns this sorted array.\r\n\r\nsort can be passed a compare function as a callback. The compare function should return a negative number if a should be before b, a positive number if a should be after b, or 0 if they are equal.\r\n\r\nIf no compare (callback) function is passed in, it will convert the values to strings and sort alphabetically.\r\n\r\nHere is an example of using sort with a compare function that will sort the elements from smallest to largest number:\r\n\r\nvar array = [1, 12, 21, 2];\r\narray.sort(function(a, b) {\r\n  return a - b;\r\n});\r\nUse sort to sort array from largest to smallest.', NULL, '', 2, 0),
(2072, 'dale.seo', '', '', '2016-06-14 09:04:24', '', '자바스크립트 Array 내장 객체 함수 - reverse', 'https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\r\n\r\n\r\n', NULL, '', 2, 0),
(2073, 'dale.seo', '', '', '2016-06-14 09:05:02', '', '자바스크립트 Array 내장 객체 함수 - concat', 'https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/concat', NULL, '', 2, 0),
(2074, 'dale.seo', '', '', '2016-06-14 09:09:03', '', '자바스크립트 배열과 문자열간 변환', '# 배열 -> 문자열\r\nhttps://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/join\r\n\r\nvar veggies = ["Celery", "Radish", "Carrot", "Potato"];\r\nvar salad = veggies.join(" and ");\r\nconsole.log(salad); // "Celery and Radish and Carrot and Potato"\r\n\r\n# 문자열 -> 배열\r\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\r\n\r\nvar string = "Split me into an array";\r\nvar array = string.split('' '');\r\ncosole.log(array); // ["Split", "me", "into", "an", "array"]', NULL, '', 5, 0),
(2075, 'dale.seo', '', '', '2016-06-14 20:51:49', '', 'apt (Advanced Packaging Tool)', 'https://blog.outsider.ne.kr/346\r\n\r\n앱스토어 처럼 소프트웨어를 웹 상에서 다운받아서 설치해준다.\r\n\r\n$ dpkg -l 또는 $ apt --installed list\r\napt를 이용해 설치된 소트웨어 목록 보기\r\n\r\n$ apt-get update\r\n앱스토어 정보를 최신으로 갱신 (인스톨하기 전에 항상 해줄 것)\r\n\r\n$ apt-get upgrade\r\n설치되어 있는 패키지를 모두 새버전으로 업그래이드 합니다.\r\n\r\n$ sudo apt-cache search mysql\r\nmysql 관련 소프트웨어 검색\r\n\r\n$ sudo apt-get install mysql + 탭버튼 2번\r\nmysql로 시작하는 소프트에어 보기\r\n\r\n$ apt-get install -y apache2\r\n아파치 웹서버 설치 (Yes/No 물어보는 거 생략)\r\n\r\n$ sudo apt-get autoremove 패키지이름\r\n자동 패키지 삭제 (디펜던시까지 알아서 안전하게 지워줌)\r\n\r\n$ sudo apt-get remove 패키지이름\r\n패키지 삭제 : 설정파일은 지우지 않음\r\n\r\n$ sudo apt-get --purge remove 패키지이름\r\n설정파일까지 모두 지움\r\n\r\n$ sudo apt-get install mysql-server-5.6 mysql-client-5.6\r\nmysql 서버와 클라이언트 동시에 설치', NULL, '', 34, 0),
(2076, 'dale.seo', '', '', '2016-06-15 08:48:15', '', '자바스크립트 문자열 거꾸로', 'function reverse(s){\r\n    return s.split("").reverse().join("");\r\n}', NULL, '', 2, 0),
(2077, 'dale.seo', '', '', '2016-06-15 09:04:39', '', '자바 스크립트 배열 거꾸로 할 때 기존 배열은 그대로 보존하기', 'var arrayTwo = arrayOne.slice().reverse();', NULL, '', 2, 0),
(2078, 'dale.seo', '', '', '2016-06-15 10:12:02', '', '자바스크립트로 palindrome 알고리즘 구현', '1) 정규식을 사용해서 알파벳과 숫자를 제거\r\n2) 배열의 shift() 와 pop() 함수를 사용해서 비교\r\n\r\n==========================================================\r\nfunction palindrome(str) {\r\n  str = str.toLocaleLowerCase().replace(/[^a-z0-9]/gi, '''');\r\n  var array = str.split("");\r\n  console.log("array : " + array);\r\n\r\n  while (array.length > 1) {\r\n    console.log("check " + array[0] + " vs. " + array[array.length - 1]);\r\n    if (array.shift() != array.pop()) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nconsole.log("# test1 : " + palindrome("race car"));\r\nconsole.log("# test2 : " + palindrome("not a palindrome"));\r\nconsole.log("# test3 : " + palindrome("A man, a plan, a canal. Panama"));\r\nconsole.log("# test4 : " + palindrome("0_0 (: /-\\ :) 0-0"));', NULL, '', 7, 0),
(2079, 'dale.seo', '', '', '2016-06-15 22:31:55', '', 'Apache Bench 이용한 간단한 Stress Test (부하 테스트)', '# ab 실행 옵션\r\n - n : request  = 요청 수 (직렬 실행)\r\n - c : concurrency = 동시 접속자 수 (병렬 실행) \r\n\r\n# ab 실행 결과 해석\r\n - Complete requests:      성고한 요청 개수\r\n - Failed requests:        실패한 요청 개수\r\n - Time taken for tests:   총 수행 시간\r\n - Requests per second:    초 당 처리 가능 요청 개수 (높을 수록 고성능)\r\n - Time per request:       요청 당 처리 시간 (낮을 수록 고성능) \r\n  => 가장 주의깊에 봐야하는 부분. 동시 접속자 수에 비례해서 커지면 Scale Up/Out 고려해야 함\r\n\r\n===================================================================================\r\nAWS Ubuntu 에서 Apache Bench 설치\r\n===================================================================================\r\nubuntu@ip-172-31-5-74:~$ sudo apt-get install apache2-utils\r\n\r\n===================================================================================\r\nAWS Ubuntu 에서 Apache Bench 실행===================================================================================\r\nubuntu@ip-172-31-5-74:~$ ab -n 100 -c 10 http://ec2-52-78-41-72.ap-northeast-2.compute.amazonaws.com/\r\nThis is ApacheBench, Version 2.3 <$Revision: 1528965 $>\r\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\r\nLicensed to The Apache Software Foundation, http://www.apache.org/\r\n\r\nBenchmarking ec2-52-78-41-72.ap-northeast-2.compute.amazonaws.com (be patient).....done\r\n\r\n\r\nServer Software:        Apache\r\nServer Hostname:        ec2-52-78-41-72.ap-northeast-2.compute.amazonaws.com\r\nServer Port:            80\r\n\r\nDocument Path:          /\r\nDocument Length:        13408 bytes\r\n\r\nConcurrency Level:      10\r\nTime taken for tests:   1.325 seconds\r\nComplete requests:      100\r\nFailed requests:        0\r\nTotal transferred:      1381600 bytes\r\nHTML transferred:       1340800 bytes\r\nRequests per second:    75.49 [#/sec] (mean)\r\nTime per request:       132.465 [ms] (mean)\r\nTime per request:       13.247 [ms] (mean, across all concurrent requests)\r\nTransfer rate:          1018.55 [Kbytes/sec] received\r\n\r\nConnection Times (ms)\r\n              min  mean[+/-sd] median   max\r\nConnect:        0    0   0.1      0       1\r\nProcessing:    38  128  20.0    129     173\r\nWaiting:       38  128  20.0    129     173\r\nTotal:         38  128  20.0    130     173\r\n\r\nPercentage of the requests served within a certain time (ms)\r\n  50%    130\r\n  66%    135\r\n  75%    138\r\n  80%    140\r\n  90%    145\r\n  95%    152\r\n  98%    168\r\n  99%    173\r\n 100%    173 (longest request)\r\n', NULL, '', 8, 0),
(2080, 'dale.seo', '', '', '2016-06-16 17:48:51', '', '전문 보존 요청 필터 구현', 'package com.skplanet.storeplatform.framework.web.util;\r\n\r\nimport org.springframework.mock.web.DelegatingServletInputStream;\r\nimport org.springframework.util.StreamUtils;\r\n\r\nimport javax.servlet.ServletInputStream;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletRequestWrapper;\r\nimport java.io.*;\r\nimport java.nio.charset.Charset;\r\n\r\n/**\r\n * 전문 보존 요청 래퍼\r\n * @author 서대영(DAEYOUNG SEO)/Onestore/SKP\r\n */\r\npublic class ContentKeepingRequestWrapper extends HttpServletRequestWrapper {\r\n\r\n	private byte[] content;\r\n\r\n	private ServletInputStream inputStream;\r\n\r\n	private BufferedReader reader;\r\n\r\n	public ContentKeepingRequestWrapper(HttpServletRequest request) {\r\n		super(request);\r\n	}\r\n\r\n	/**\r\n	 * 보존된 요청 전문을 스트링 타입으로 반환한다.\r\n	 */\r\n	public String getContentAsString() {\r\n		return new String(content, Charset.forName(getCharacterEncoding()));\r\n	}\r\n\r\n	/**\r\n	 * 보존된 요청 전문을 바이트 배열로 번환한다.\r\n	 */\r\n	public byte[] getContentAsByteArray() {\r\n		return content;\r\n	}\r\n\r\n	@Override\r\n	public ServletInputStream getInputStream() throws IOException {\r\n		if (inputStream == null) {\r\n			content = StreamUtils.copyToByteArray(getRequest().getInputStream());\r\n			inputStream = new DelegatingServletInputStream(new ByteArrayInputStream(content));\r\n		}\r\n		return inputStream;\r\n	}\r\n\r\n	@Override\r\n	public BufferedReader getReader() throws IOException {\r\n		if (reader == null) {\r\n			reader = new BufferedReader(new InputStreamReader(getInputStream(), getCharacterEncoding()));\r\n		}\r\n		return reader;\r\n	}\r\n\r\n}\r\n', NULL, '', 6, 0),
(2081, 'dale.seo', '', '', '2016-06-16 17:49:27', '', '전문 보존 요청 필터 테스트', 'package com.skplanet.storeplatform.framework.web.util;\r\n\r\nimport org.junit.Test;\r\nimport org.springframework.http.MediaType;\r\nimport org.springframework.mock.web.MockHttpServletRequest;\r\nimport org.springframework.util.StreamUtils;\r\n\r\nimport java.nio.charset.Charset;\r\nimport java.util.Arrays;\r\n\r\nimport static org.junit.Assert.assertArrayEquals;\r\nimport static org.junit.Assert.assertEquals;\r\n\r\n/**\r\n * @author 서대영(DAEYOUNG SEO)/Onestore/SKP\r\n */\r\npublic class ContentKeepingRequestWrapperTest {\r\n\r\n	@Test\r\n	public void testGivenJson() throws Exception {\r\n		String content = "{\\n" +\r\n				"  \\"id\\": 123,\\n" +\r\n				"  \\"name\\": \\"Dale Seo\\",\\n" +\r\n				"  \\"email\\": \\"dale.seo@sk.com\\"\\n" +\r\n				"}";\r\n\r\n		MockHttpServletRequest request = new MockHttpServletRequest("POST", "/test");\r\n		request.setContent(content.getBytes());\r\n		request.setContentType(MediaType.APPLICATION_JSON_UTF8_VALUE);\r\n\r\n		String contentReadFromRequest = StreamUtils.copyToString(request.getInputStream(), Charset.forName(request.getCharacterEncoding()));\r\n		System.out.println("# contentReadFromRequest : " + contentReadFromRequest);\r\n\r\n		ContentKeepingRequestWrapper wrapper = new ContentKeepingRequestWrapper(request);\r\n\r\n		String contentReadFromWrapper = StreamUtils.copyToString(wrapper.getInputStream(), Charset.forName(wrapper.getCharacterEncoding()));\r\n		System.out.println("# contentReadFromWrapper : " + contentReadFromWrapper);\r\n\r\n		byte[] contentAsByteArray = wrapper.getContentAsByteArray();\r\n		System.out.println("# contentAsByteArray : " + Arrays.toString(contentAsByteArray));\r\n		assertArrayEquals(content.getBytes(wrapper.getCharacterEncoding()), contentAsByteArray);\r\n\r\n		String contentAsString = wrapper.getContentAsString();\r\n		System.out.println("# contentAsString : " + contentAsString);\r\n		assertEquals(content, contentAsString);\r\n	}\r\n\r\n	@Test\r\n	public void testGivenFomUrlEncoded() throws Exception {\r\n		String content = "\\"category=app+game%2Bmusic&productId=P12345&key=val&key=%EA%B0%92\\"";\r\n\r\n		MockHttpServletRequest request = new MockHttpServletRequest("POST", "/test");\r\n		request.setContent(content.getBytes());\r\n		request.setContentType(MediaType.APPLICATION_FORM_URLENCODED_VALUE + ";charset=UTF-8");\r\n\r\n		String contentReadFromRequest = StreamUtils.copyToString(request.getInputStream(), Charset.forName(request.getCharacterEncoding()));\r\n		System.out.println("# contentReadFromRequest : " + contentReadFromRequest);\r\n\r\n		ContentKeepingRequestWrapper wrapper = new ContentKeepingRequestWrapper(request);\r\n\r\n		String contentReadFromWrapper = StreamUtils.copyToString(wrapper.getInputStream(), Charset.forName(wrapper.getCharacterEncoding()));\r\n		System.out.println("# contentReadFromWrapper : " + contentReadFromWrapper);\r\n\r\n		byte[] contentAsByteArray = wrapper.getContentAsByteArray();\r\n		System.out.println("# contentAsByteArray : " + Arrays.toString(contentAsByteArray));\r\n		assertArrayEquals(content.getBytes(wrapper.getCharacterEncoding()), contentAsByteArray);\r\n\r\n		String contentAsString = wrapper.getContentAsString();\r\n		System.out.println("# contentAsString : " + contentAsString);\r\n		assertEquals(content, contentAsString);\r\n	}\r\n	\r\n}', NULL, '', 3, 0),
(2082, 'dale.seo', '', '', '2016-06-16 22:39:10', '', '리눅스에서 apache2 운용', '$ sudo apt-get install apache2\r\n아파치 설치\r\n\r\n$ sudo service apache2 restart\r\n아피치 재구동\r\n\r\n$ cd /var/www/html\r\nDocroot로 이동\r\n\r\n$ tail -f /var/log/apache2/access.log\r\n엑세스 로그 확인\r\n', NULL, '', 4, 0),
(2083, 'dale.seo', '', '', '2016-06-16 22:43:35', '', '리눅스에서 MySQL 운용', '$ sudo apt-get install mysql-server\r\nMySql 서버 설치\r\n\r\n보라색 화면 나오면 root 패스워드 입력\r\n\r\n$ sudo apt-get install mysql-client\r\nMySql 클라이언트 설치 (서버만 깔아두 무방)\r\n\r\n$ ps -ef |grep mysql\r\nmysql     7712     1  0 10:51 ?        00:00:00 /usr/sbin/mysqld\r\n프로세스 확인\r\n\r\n$ mysql (-h localhost -P 3306) -u root -p\r\nMySql 클라이언트를 통해 MySql 서버 접속\r\n\r\n$ vi /etc/mysql/my.cnf\r\n외부 원격 접속을 허용하기 위해 bind-address 주석 처리\r\n(참고. http://zetawiki.com/wiki/ERROR_2003_(HY000):_Can%27t_connect_to_MySQL_server_on)\r\n\r\n# mysql 데몬이 3306 포트로 리스닝 하고 있는지 확인\r\n$ sudo netstat -antp | grep mysql\r\ntcp        0      0 0.0.0.0:3306            0.0.0.0:*               LISTEN      9383/mysqld \r\n\r\n# 모든 IP에서 root 계정으로 원격 접속이 가능하도록 조치\r\nmysql> INSERT INTO mysql.user (host,user,password) VALUES (''%'',''root'',password(''패스워드''));\r\nmysql> GRANT ALL PRIVILEGES ON *.* TO ''root''@''%'';\r\nmysql> FLUSH PRIVILEGES;\r\n(참고. http://zetawiki.com/wiki/MySQL%EC%97%90_%EC%9B%90%EA%B2%A9_%EC%A0%91%EC%86%8D_%ED%97%88%EC%9A%A9)', NULL, '', 29, 0),
(2084, 'dale.seo', '', '', '2016-06-17 09:33:02', '', '자바스크립트로 문자와 유니코드 간 변환', '자바스크립트에는 Character 타입이 없으므로 다음과 같은 함수를 사용해야 한다.\r\n\r\n# 문자 -> 유니코드\r\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt\r\n\r\n# 유니코드 -> 문자\r\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode\r\n', NULL, '', 3, 0),
(2085, 'dale.seo', '', '', '2016-06-17 15:07:20', '', 'Linux에서 Node.js 설치하기', 'https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions\r\n\r\n\r\n$ curl -sL https://deb.nodesource.com/setup_4.x | sudo -E bash -\r\n$ sudo apt-get install -y nodejs\r\n$ node -v', NULL, '', 18, 0),
(2086, 'dale.seo', '', '', '2016-06-17 23:01:31', '', 'Nodejs로 Amazon S3 연동하기', '# AWS - S3 3 SDK Nodejs 1 put (업로드)\r\nhttps://youtu.be/VFIQl9Buv-E?list=PLuHgQVnccGMC5AYnBg8ffg5utOLwEj4fZ\r\n\r\n# AWS - S3 3 : SDK Nodejs 2 list (목록 가져오기)\r\nhttps://youtu.be/isaQ-RJmX7U?list=PLuHgQVnccGMC5AYnBg8ffg5utOLwEj4fZ\r\n\r\n# AWS - S3 3 : SDK Nodejs 3 get (다운로드)\r\nhttps://youtu.be/uNQV3neXCP4?list=PLuHgQVnccGMC5AYnBg8ffg5utOLwEj4fZ\r\n\r\n# AWS - S3 3 : SDK Nodejs 4 (웹 에플리케이션에서 s3 활용법)\r\nhttps://youtu.be/CwQit2PAY88?list=PLuHgQVnccGMC5AYnBg8ffg5utOLwEj4fZ', NULL, '', 3, 0),
(2087, 'dale.seo', '', '', '2016-06-18 19:00:22', '', 'service 커맨드', '/etc/init.d 디렉토리 안에 service 커맨드로 실행가능한 서비스들이 보인다.\r\n\r\n\r\n$ service --status-all\r\n모든 서비스 조회', NULL, '', 6, 0),
(2091, 'dale.seo', '', '', '2016-06-19 12:42:31', '', 'NodeJS로 MySQL 연동', '# GitHub 매뉴얼\r\nhttps://github.com/felixge/node-mysql#introduction\r\n\r\n# NPM으로 NodeJS 용 MySQL 드라이버인 node-mysql 패키지 설치\r\n$ npm install --save mysql\r\n\r\n# mysql.js 샘플 파일 작성\r\nvar mysql      = require(''mysql'');\r\nvar connection = mysql.createConnection({\r\n  host     : ''localhost'',\r\n  user     : ''me'',\r\n  password : ''secret'',\r\n  database : ''my_db''\r\n});\r\n\r\nconnection.connect();\r\n\r\nconnection.query(''SELECT 1 + 1 AS solution'', function(err, rows, fields) {\r\n  if (err) throw err;\r\n\r\n  console.log(''The solution is: '', rows[0].solution);\r\n});\r\n\r\nconnection.end();\r\n\r\n\r\n\r\n\r\n\r\n', NULL, '', 6, 0),
(2090, 'dale.seo', '', '', '2016-06-19 11:42:34', '', '[mysql shell] 테이블 생성 및 삽입', 'https://opentutorials.org/module/2026/12020\r\n\r\n\r\nCREATE TABLE `topic` (\r\n`id` int(11) NOT NULL AUTO_INCREMENT,\r\n  `title` varchar(100) NOT NULL,\r\n  `description` text NOT NULL,\r\n  `author` varchar(30) NOT NULL,\r\n  PRIMARY KEY (id)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\r\n\r\n\r\nmysql> show tables;\r\n+----------------+\r\n| Tables_in_dale |\r\n+----------------+\r\n| topic          |\r\n+----------------+\r\n1 row in set (0.00 sec)\r\n\r\n\r\nINSERT INTO topic (title, description, author) VALUES(''JavaScript'',''Computer language for web.'', ''egoing'');\r\nINSERT INTO topic (title, description, author) VALUES(''NPM'',''Package manager'', ''leezche'');\r\n', NULL, '', 6, 0),
(2092, 'dale.seo', '', '', '2016-06-20 08:53:23', '', '자바스크립트로 위경도 얻기', '\r\n<script>\r\n  // Only change code below this line.\r\n  if (navigator.geolocation) {\r\n    navigator.geolocation.getCurrentPosition(function(position) {\r\n      $("#data").html("latitude: " + position.coords.latitude + "<br>longitude: " + position.coords.longitude);\r\n    });\r\n  }\r\n\r\n  // Only change code above this line.\r\n</script>\r\n<div id = "data">\r\n  <h4>You are here:</h4>\r\n  \r\n</div>', NULL, '', 2, 0),
(2093, 'dale.seo', '', '', '2016-06-20 19:46:58', '', 'ExpressJS 미들웨어', '# 쿠키 파서\r\nhttps://www.npmjs.com/package/cookie-parser\r\n\r\n# 바디 파서\r\n\r\n', NULL, '', 3, 0),
(2094, 'dale.seo', '', '', '2016-06-21 21:20:14', '', 'Ubuntu에서는 ~/.bash_profile 과 ~/.bashrc의 차이', 'http://www.joshstaiger.org/archives/2005/07/bash_profile_vs.html\r\nhttp://askubuntu.com/questions/121073/why-bash-profile-is-not-getting-sourced-when-opening-a-terminal\r\n\r\n\r\n~/.bash_profile : ssh를 통해 새롭게 로그인 할 때 적용\r\n~/.bashrc : 이미 로그인된 상태에서 새롭게 터미널을 열 때 적용\r\n\r\n맥은 예외적으로 bash_profile만 쓰면 됨\r\n\r\n# 맥 우분투 가리지 않고 bash_profile만 쓰고 싶은 더 좋은 방법\r\n~/.bash_profile 파일에서 ~/.bashrc를 항상 읽어오도록 편집\r\n------------------------------------------------------------\r\nvi ~/.bash_profile\r\n============================================\r\n# Get the aliases and functions\r\nif [ -f ~/.bashrc ]; then\r\n        . ~/.bashrc\r\nfi\r\n============================================', NULL, '', 21, 0),
(2095, 'dale.seo', '', '', '2016-06-21 21:50:41', '', 'Ubuntu에 오라클 JDK 설치 방법', 'http://tecadmin.net/install-oracle-java-8-jdk-8-ubuntu-via-ppa/#\r\nhttp://sarghis.com/blog/1050/\r\n\r\n\r\n아래 방법보다 걍 SDKMAN(http://sdkman.io) 설치하고\r\n$ sdk install java\r\n로 설치하는게 훨씬 나음\r\n\r\nexport JAVA_HOME=/home/dale/.sdkman/candidates/java/current\r\n\r\n===================================================================\r\n\r\n1. OpenJDK 제거\r\n\r\n1\r\n$ sudo apt-get purge openjdk*\r\n \r\n\r\n2. repository 추가\r\n\r\n1\r\n$ sudo add-apt-repository ppa:webupd8team/java\r\n \r\n\r\n3. repository index 업데이트\r\n\r\n1\r\n$ sudo apt-get update\r\n \r\n\r\n4. JDK 설치\r\n\r\n아래의 세가지 버전 중에 자신이 필요한 버전을 설치한다.\r\n\r\n- Java 8 설치\r\n\r\n1\r\n$ sudo apt-get install oracle-java8-installer\r\n- Java 7 설치\r\n\r\n1\r\n$ sudo apt-get install oracle-java7-installer\r\n- Java 6 설치\r\n\r\n1\r\n$ sudo apt-get install oracle-java6-installer\r\n\r\n\r\n\r\n\r\n\r\n=============================================\r\nJAVA_HOME 설정\r\n\r\n$ vi ~/.bash_profile\r\nexport JAVA_HOME=/usr/lib/jvm/java-8-oracle\r\n$ source ~/.bash_profile\r\n$ echo $JAVA_HOME\r\n/usr/lib/jvm/java-8-oracle', NULL, '', 29, 0),
(2096, 'dale.seo', '', '', '2016-06-22 12:52:14', '', 'primitive type 배열 내림 차순 정렬', 'Java8 스트림을 이용하면 가능\r\n\r\n        int[] sortedRandNums = IntStream.of(randNums)\r\n		        .boxed()\r\n		        .sorted(Collections.reverseOrder())\r\n		        .mapToInt(i -> i)\r\n		        .toArray();\r\n\r\n\r\n=============================================================\r\nArrays.sort(array, Collections.reverseOrder());\r\n\r\n배열의 원소 타입이 primitivie 하면 안됨. 즉 int 는 안되고 Integer만 됨', NULL, '', 11, 0),
(2097, 'dale.seo', '', '', '2016-06-23 14:45:27', '', '자바 백그라운드로 실행하기', 'http://yoongi.tistory.com/67\r\n\r\njava -jar xxx.jar &', NULL, '', 6, 0),
(2098, 'dale.seo', '', '', '2016-06-23 14:49:50', '', 'scp (Secured Copy) 명령어', '원격 서버에 간단하게 파일 전송할 때 FTP 대신에 사용하면 좋다\r\n\r\nscp -i "arduino_awspwd.pem" "/Users/1002139/arduino/one-arduino/simple-rest/target/simple-rest-0.0.1-SNAPSHOT.jar" ubuntu@ec2-52-78-61-81.ap-northeast-2.compute.amazonaws.com:~/restroom', NULL, '', 3, 0),
(2099, 'dale.seo', '', '', '2016-06-23 20:57:31', '', '리눅스 패키지 매니저', 'RPM과 DEB는 리눅스 패키지 매니저의 양대 산맥\r\n\r\n- 데비안 패키지 확장자 : .deb\r\n- 데비안 패키지 관리툴 : apt, dpkg\r\n- 레드햇 패키지 확장자 : .rpm\r\n- 레드햇 패키지 관리툴 : rpm, yum\r\n- 데비안에서는 주로\r\n . 패키지 다운로드 및 인스톨은 apt-get을 이용하고, dpkg 명령어로 확인한다.', NULL, '', 4, 0),
(2100, 'dale.seo', '', '', '2016-06-23 20:58:12', '', '리눅스 데몬', '# 아파치 웹서버 데몬 실행/중지\r\n\r\n$ /etc/init.d/httpd start\r\n$ /etc/init.d/httpd stop\r\n$ /etc/init.d/httpd restart\r\n\r\n$ service httpd start\r\n$ service httpd stop\r\n$ service httpd restart\r\n\r\n# 주요데몬\r\n- httpd : Apaceh Webserver\r\n- mysqld : MySQL\r\n- ftpd : FTP\r\n- sendmail : Mail Server\r\n- telnet : 텔넷\r\n- named : 네임 서버 서비스\r\n\r\n# 아파치 웹서버 데몬 설정 파일\r\n- /etc/httpd/conf/httpd.conf', NULL, '', 4, 0),
(2101, 'dale.seo', '', '', '2016-06-24 11:33:44', '', 'Request/ResponseWrapper 구현 시 꼭 봐야하는 문서', 'http://meetup.toast.com/posts/44', NULL, '', 3, 0),
(2102, 'dale.seo', '', '', '2016-06-25 09:20:01', '', 'Ionic과 AngularJS를 이용해서 Ajax 호출해서 웹하면에 동적으로 뿌리기', 'Ionic과 AngularJS를 이용해서 Ajax 호출해서 웹하면에 부려주기\r\n로딩동안 유저 인터페이스를 단절하기 위해서 $ionicLoading을 활용한 것을 유심히 보자\r\n\r\n==================================== index.html ====================================\r\n<ion-header-bar class="bar-positive">\r\n  <div class="buttons">\r\n    <h1 class="title">Ionic Fetching Data from API</h1>\r\n  </div>\r\n</ion-header-bar>\r\n\r\n<ion-content ng-controller="AppCtrl">\r\n  <ion-list>\r\n    <ion-item class="item-text-wrap">\r\n      The only post retruned is "{{ post.title }}"\r\n    </ion-item>\r\n    <ion-item ng-repeat="user in users" class="item-text-wrap">\r\n      Username: {{ user.username }}<br>\r\n      Name: {{ user.naem }}<br>\r\n      Email: {{ user.email}}<br>\r\n      Website: {{ user.website}}<br>\r\n    </ion-item>\r\n  </ion-list>\r\n</ion-content>  \r\n\r\n\r\n==================================== app.js ====================================\r\nangular.module(''app'', [''ionic''])\r\n\r\n.controller(''AppCtrl'', function($scope, HttpService, $ionicLoading) {\r\n  HttpService.getPost()\r\n    .then(function(response) {\r\n      $scope.post = response;\r\n    });\r\n    \r\n  $ionicLoading.show({\r\n    template: ''Loading...''\r\n  });\r\n  \r\n  HttpService.getUsers()\r\n    .then(function(response) {\r\n      $scope.users = response;\r\n      $ionicLoading.hide();\r\n    });\r\n})\r\n\r\n.service(''HttpService'', function($http) {\r\n  return {\r\n    getPost: function() {\r\n      return $http.get(''http://jsonplaceholder.typicode.com/posts/1'')\r\n        .then(function(response) {\r\n          console.log(''Get Post'', response);\r\n          return response.data;\r\n        });\r\n    },\r\n    getUsers: function() {\r\n      return $http.get(''http://jsonplaceholder.typicode.com/users'')\r\n        .then(function(response) {\r\n          console.log(''Get Users'', response);\r\n          return response.data;\r\n        });\r\n    }\r\n  };\r\n});', NULL, '', 8, 0),
(2103, 'dale.seo', '', '', '2016-06-25 09:32:35', '', 'Ionic과 AngularJS를 이용해서 Ajax 호출해서 POST 전송하기', 'low level의 $http 대신에 high level의 ngResource를 활용한다.\r\n\r\n\r\n==================== index.html ====================\r\n<script src="//ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular-resource.js"></script>\r\n\r\n<ion-header-bar class="bar-positive">\r\n  <div class="buttons">\r\n    <h1 class="title">Posting JSON</h1>\r\n  </div>\r\n</ion-header-bar>\r\n\r\n<ion-content ng-controller="AppCtrl" class="padding">\r\n  <form ng-submit="newPost()">\r\n    <label class="item item-input">\r\n      <span class="input-label">New Post</span>\r\n      <input ng-model="postData.text" type="text" placeholder="Enter Post Here">\r\n    </label>\r\n    <button type="submit" class="button button-positive button-block">Create</button>\r\n  </form>\r\n</ion-content>\r\n\r\n\r\n==================== app.js ====================\r\nangular.module(''app'', [''ionic'', ''ngResource''])\r\n\r\n.controller(''AppCtrl'', function($scope, Post) {\r\n  $scope.postData = {};\r\n  $scope.newPost = function() {\r\n    var post = new Post($scope.postData);\r\n    post.$save(function(postObject) {\r\n      alert(JSON.stringify(postObject));\r\n    });\r\n  }\r\n})\r\n\r\n.factory(''Post'', function($resource) {\r\n  return $resource(''http://jsonplaceholder.typicode.com/posts'');\r\n});\r\n', NULL, '', 4, 0),
(2104, 'dale.seo', '', '', '2016-06-25 19:19:32', '', '아이오닉 서버를 리눅스에서 백그라운드에서 구동하기', 'http://stackoverflow.com/questions/31189300/how-to-run-ionic-in-the-background\r\n\r\n\r\n$ screen -d -m -L ionic serve --nolivereload --nobrowser', NULL, '', 5, 0),
(2105, 'dale.seo', '', '', '2016-06-26 00:52:42', '', '자주 사용하는 AngularJS Directives', '# ng-app : attach the Application Module to the page\r\n<html ng-app="store">\r\n\r\n# ng-controller : attach a Controller function to the page\r\n<body ng-controller="StoreController as stroe">\r\n\r\n# ng-show/ng-hide : display a section based on an Expression\r\n<h1 ng-show="name">Hello, {{name}}!</h1>\r\n\r\n# ng-repeat : repeat a section for each item in an Array\r\n<li ng-repeat="product in store.products">{{product,name}}</li>\r\n\r\n# ng-src : Using Angular Expression inside a src attribute causes an error!\r\n<img ng-src="{{product.images[0].full}}"/>', NULL, '', 6, 0),
(2106, 'dale.seo', '', '', '2016-06-26 00:58:31', '', '자주 사용하는 Filter', '# 기본 문법\r\n{{data | filter:options}}\r\n\r\n# 특정 조건만 repeat (status 프로퍼티가 status.name 값과 일치하는 story에 대해서만)\r\n<li ng-repeat="story in stories | filter: {status: status.name}">...</li>\r\n\r\n# 날짜\r\n{{''1388123412323'' | date:''MM/dd/yyyy @ h:mma''}}\r\n\r\n# 대소문자\r\n{{''octagon gem'' | uppercase}}\r\n\r\n# 문자나 배열 개수 제한\r\n{{''My Description'' | limitTo:8}}\r\n<li ng-repeat="product in store.products | limitTo: 3">\r\n\r\n# 정렬\r\n<li ng-repeat="product in store.products | orderBy:''-price''">\r\n\r\n# 통화\r\n{{store.price | currency}}', NULL, '', 5, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(2107, 'dale.seo', '', '', '2016-06-26 01:30:14', '', 'AngularJS로 Tab 만들기', 'ng-click, ng-class, ng-show Directive를 활용한다.\r\n\r\n\r\n======================== HTML ==============================\r\n      <!-- Product Tabs -->\r\n      <section class="tab" ng-controller="TabController as tab">\r\n        <ul class="nav nav-pills">\r\n          <li ng-class="{ active: tab.isSet(1) }">\r\n            <a href ng-click="tab.setTab(1)">Description</a></li>\r\n          <li ng-class="{ active: tab.isSet(2) }">\r\n            <a href ng-click="tab.setTab(2)">Specs</a></li>\r\n          <li ng-class="{ active: tab.isSet(3) }">\r\n            <a href ng-click="tab.setTab(3)">Reviews</a></li>\r\n        </ul>\r\n        <div ng-show="tab.isSet(1)">\r\n          <h4>Description</h4>\r\n          <blockquote>{{product.description}}</blockquote>\r\n        </div>\r\n        <div ng-show="tab.isSet(2)">\r\n          <h4>Specs</h4>\r\n          <blockquote>Shine: {{product.shine}}</blockquote>\r\n        </div>\r\n        <div ng-show="tab.isSet(3)">\r\n          <h4>Reviews</h4>\r\n        </div>\r\n      </section>\r\n\r\n\r\n======================== app.js ==============================\r\n  app.controller(''TabController'', function() {\r\n    this.tab = 1;\r\n    this.setTab = function(tab) {\r\n      this.tab = tab;\r\n    };\r\n    this.isSet = function(tab) {\r\n      return this.tab === tab;\r\n    };\r\n  });', NULL, '', 5, 0),
(2108, 'dale.seo', '', '', '2016-06-26 02:25:27', '', 'AngularJS로 Form 만들기', 'ng-model, ng-submit Directive를 사용한다.\r\n\r\n\r\n=============================================HTML =======================================================\r\n            <!--  Review Form -->\r\n            <form name="reviewForm" ng-controller="ReviewController as reviewCtrl" ng-submit="reviewForm.$valid && reviewCtrl.addReview(product)" novalidate>\r\n\r\n              <!--  Live Preview -->\r\n              <blockquote >\r\n                <strong>{{reviewCtrl.review.stars}} Stars</strong>\r\n                {{reviewCtrl.review.body}}\r\n                <cite class="clearfix">—{{reviewCtrl.review.author}}</cite>\r\n              </blockquote>\r\n\r\n              <!--  Review Form -->\r\n              <h4>Submit a Review</h4>\r\n              <fieldset class="form-group">\r\n                <select ng-model="reviewCtrl.review.stars" class="form-control" ng-options="stars for stars in [5,4,3,2,1]" title="Stars" required >\r\n                  <option value="">Rate the Product</option>\r\n                </select>\r\n              </fieldset>\r\n              <fieldset class="form-group">\r\n                <textarea ng-model="reviewCtrl.review.body" class="form-control" placeholder="Write a short review of the product..." title="Review"></textarea>\r\n              </fieldset>\r\n              <fieldset class="form-group">\r\n                <input ng-model="reviewCtrl.review.author" type="email" class="form-control" placeholder="jimmyDean@example.org" title="Email" required />\r\n              </fieldset>\r\n              <fieldset class="form-group">\r\n                <input type="submit" class="btn btn-primary pull-right" value="Submit Review" />\r\n              </fieldset>\r\n            </form>\r\n\r\n==================== CSS =======================\r\n.ng-invalid.ng-dirty {\r\n  border-color: red;\r\n}\r\n\r\n.ng-valid.ng-dirty {\r\n  border-color: green;\r\n}\r\n\r\n\r\n==================== JS =======================\r\n\r\n  app.controller(''ReviewController'', function() {\r\n    this.review = {};\r\n\r\n    this.addReview = function(product) {\r\n      this.review.createdOn = Date.now();\r\n      product.reviews.push(this.review);\r\n\r\n      this.review = {};\r\n    };\r\n  });', NULL, '', 10, 0),
(2109, 'dale.seo', '', '', '2016-06-27 00:12:19', '', 'Ionic 기본 유저 인테페이스 강좌', 'http://appcamp.io/courses/user-interface', NULL, '', 2, 0),
(2113, 'dale.seo', '', '', '2016-07-05 09:22:09', '', '그래프 BFS (Breadth First Seach) 탐색', 'http://theoryofprogramming.com/2014/12/25/breadth-first-search-algorithm/', NULL, '', 2, 0),
(2114, 'dale.seo', '', '', '2016-07-05 15:36:36', '', 'grep 명령어로 전후 라인까지 살펴보기', '## -C 옵션 (--context)\r\n* 로그파일에서 shardId-00000001508420473118-5d9f84e9가 포함된 문자 라인의 전후 5라인을 같이 출력\r\ngrep -C 5 ''shardId-00000001508420473118-5d9f84e9'' UnifiedSubledgerEntryCollectingService.USAmazon.2017-10-19-18\r\n\r\n## -A 옵션 (--after-context)\r\n\r\n* 로그 파일에서 해당 GUID가 포함된 문자 라인 이후로 500라인까지 출력\r\ngrep -A 500 ''1467696891120-06f1b962-d670-487c-8376-5c5f8be5231c'' os-ccsFwSvr1.log\r\n\r\n## -B 옵션 (--before-context)\r\n\r\n* 로그 파일에서 해당 GUID가 포함된 문자 라인 이전으로 500라인까지 출력\r\ngrep -A 500 ''1467696891120-06f1b962-d670-487c-8376-5c5f8be5231c'' os-ccsFwSvr1.log', NULL, '', 8, 0),
(2112, 'dale.seo', '', '', '2016-07-04 10:25:22', '', '그래프 자료구조 기초 (Graph Theory)', '# 용어 정리 및 Adjacent Matrix와 Adjacent List 구현\r\nhttp://theoryofprogramming.com/2014/12/24/graph-theory-basics/\r\n\r\n# Adjacent List 자바 구현\r\nhttp://theoryofprogramming.com/adjacency-list-in-java/', NULL, '', 3, 0),
(2111, 'dale.seo', '', '', '2016-07-01 16:38:56', '', '루트 권한으로 사용자 패스워드 짧게 설정하기', '루트 유저로 로그인 후 passwd <사용자명> 입력 후 패스워드를 설저해주면 된다. 심지어 과거 패스워드 물어보지도 않음\r\n\r\n=== 패스워드 1로 세팅하기 ===\r\n$ su -\r\n$ passwd dale\r\n1\r\n1', NULL, '', 3, 0),
(2115, 'dale.seo', '', '', '2016-07-05 21:59:07', '', '+ 연산자', '1 + 1 // 2\r\n\r\n"1" + "1" // "11"', NULL, '', 2, 0),
(2116, 'dale.seo', '', '', '2016-07-05 22:02:05', '', '한국어 자바스크립트 사전', 'https://opentutorials.org/course/50', NULL, '', 2, 0),
(2117, 'dale.seo', '', '', '2016-07-06 00:08:10', '', '==, ===, if 테이블', 'https://dorey.github.io/JavaScript-Equality-Table/', NULL, '', 3, 0),
(2118, 'dale.seo', '', '', '2016-07-06 19:23:59', '', '주요 배열 조작', '# 배열 뒤에 추가 (리턴 : 배열 길이)\r\narr.push(''A'', ''B'', ''C'');\r\n\r\n# 배열 뒤에서 삭제\r\narr.pop(); // pop() 메서드는 배열에서 마지막 요소를 제거하고 그 요소를 반환합니다.\r\n\r\n# 배열 앞에 추가 (리턴 : 배열 길이)\r\narr.unshift(''Z'', ''Y'', ''X'');\r\n\r\n# 배열 앞에서 삭제\r\narr.shift (); // 메소드는 배열에서 첫 번째 요소를 제거하고, 제거된 요소를 반환합니다. 이 메소드는 배열의 길이를 변하게 합니다.\r\n\r\n# 배열의 특정 구간에 추가하면서 삭제(리턴 : 삭제된 원소의 배열)\r\narr.splice(2, 0, ''A''); // index = 2 자리를 삭제하지 않고 바로 앞에 ''A'' 추가\r\narr.splice(2, 1, ''A''); // index = 2 자리를 삭제하고, 그 자리에 대신 ''A'' 추가\r\n\r\n# 배열 뒤에 다른 배열 추가\r\nvar newArr = arr.concat([''A'', ''B'', ''C'']);\r\n\r\n# 배열 정렬 (원본도 바뀜)\r\narr.sort();\r\n\r\n# 배열 역정렬 (원본도 바뀜)\r\narr.reverse();\r\n\r\n# 특정 엘리먼트 삭제\r\narr.splice(arr.indexOf(element), 1);', NULL, '', 11, 0),
(2119, 'dale.seo', '', '', '2016-07-06 19:41:07', '', '주요 객체 조작', '# 객체의 생성\r\n\r\n* 방법 1\r\nvar grades = {''egoing'': 10, ''k8805'': 6, ''sorialgi'': 80};\r\n\r\n* 방법 2\r\nvar grades = {};\r\ngrades[''egoing''] = 10;\r\ngrades[''k8805''] = 6;\r\ngrades[''sorialgi''] = 80;\r\n\r\n* 방법 3\r\nvar grades = new Object();\r\ngrades[''egoing''] = 10;\r\ngrades[''k8805''] = 6;\r\ngrades[''sorialgi''] = 80;\r\n\r\n\r\n# 객체 접근\r\nalert(grades[''sorialgi'']);\r\nalert(grades.sorialgi);\r\n\r\n\r\n# 객체 순회\r\nvar grades = {''egoing'': 10, ''k8805'': 6, ''sorialgi'': 80};\r\nfor(key in grades) {\r\n    document.write("key : "+key+" value : "+grades[key]+"<br />");\r\n}\r\n\r\n\r\n# 객체의 필드로 함수 선언\r\nvar grades = {\r\n	list : {''egoing'': 10, ''k8805'': 8, ''sorialgi'': 80},\r\n	show: function () {\r\n		for (var key in this.list) { // this 는 함수를 포함하고 있는 객체를 가리킴\r\n			console.log(key, this.list[key]);\r\n		}\r\n	}\r\n};\r\n\r\n* 객체 안의 함수 호출\r\ngrades.show();\r\ngrades[''show'']();', NULL, '', 4, 0),
(2120, 'dale.seo', '', '', '2016-07-06 21:39:31', '', 'NodeJS에서의 모듈 (Require & Exports)', 'http://openmymind.net/2012/2/3/Node-Require-and-Exports/\r\n\r\n\r\n브라우저에서 <script src="module.js"/>를 이용해서 모듈을 로드하는 것 처럼,\r\nNodeJS에서는 모듈을 로드하고 위한 require 함수를 제공한다.\r\n사용당한느 모듈은 exports 변수를 이용해서 함수를 노출한다.\r\n\r\n\r\n\r\n# node.circle.js (로드될 대상)\r\n\r\nvar PI = Math.PI;\r\n  \r\nexports.area = function (r) {\r\nreturn PI * r * r;\r\n};\r\n  \r\nexports.circumference = function (r) {\r\nreturn 2 * PI * r;\r\n};\r\n\r\n\r\n\r\n# node.demo.js (로드의 주체)\r\nvar circle = require(''./node.circle.js'');\r\nconsole.log( ''The area of a circle of radius 4 is ''\r\n           + circle.area(4));', NULL, '', 8, 0),
(2121, 'dale.seo', '', '', '2016-07-06 21:44:46', '', '자바스크립트 호스트 환경의 API 문서', '# 자바스크립트 API 문서\r\n - ECMAScript (표준문서)\r\n - 자바스크립트 사전 (생활코딩)\r\n - 자바스크립트 레퍼런스 (MDN)\r\n - jscript 레퍼런스 (MSDN)\r\n\r\n# 호스트 환경의 API 문서\r\n - 웹브라우저 API (https://developer.mozilla.org/en-US/docs/Web/API)\r\n - Node.js API (http://nodejs.org/api/)\r\n - Google Apps Script API (https://developers.google.com/apps-script/)', NULL, '', 2, 0),
(2122, 'dale.seo', '', '', '2016-07-06 22:04:54', '', '자바스크립트 정규표현식', '정규표현식 용도 => 문자열 추출, 포함 여부 확인, 문자열 치환\r\n\r\n\r\n컴파일은 검출하고자 하는 패턴을 만드는 일이다. 우선 정규표현식 객체를 만들어야 한다. 객체를 만드는 방법은 두가지가 있다. a라는 텍스트를 찾아내는 정규표현식을 만들어보자.\r\n\r\n# 정규표현식 리터럴\r\nvar pattern = /a/\r\n\r\n# 정규표현식 객체 생성자\r\nvar pattern = new RegExp(''a'');\r\n\r\n\r\n\r\n정규표현식을 컴파일해서 객체를 만들었다면 이제 문자열에서 원하는 문자를 찾아내야 한다. \r\n\r\n# RegExp.exec()\r\n\r\nconsole.log(pattern.exec(''abcdef'')); // ["a"]\r\n실행결과는 문자열 a를 값으로 하는 배열을 리턴한다.\r\n\r\nconsole.log(pattern.exec(''bcdefg'')); // null\r\n인자 ''bcdef''에는 a가 없기 때문에 null을 리턴한다.\r\n\r\n# RegExp.test()\r\ntest는 인자 안에 패턴에 해당되는 문자열이 있으면 true, 없으면 false를 리턴한다.\r\n\r\nconsole.log(pattern.test(''abcdef'')); // true\r\ncnosole.log(pattern.test(''bcdefg'')); // false', NULL, '', 6, 0),
(2123, 'dale.seo', '', '', '2016-07-06 22:37:51', '', '정규표현식을 인자로 받는 String 메소드들', '문자열 객체의 몇몇 메소드는 정규표현식을 사용할 수 있다. \r\n\r\n# String.match()\r\nRegExp.exec()와 비슷하다.\r\n\r\nconsole.log(''abcdef''.match(pattern)); // ["a"]\r\nconsole.log(''bcdefg''.match(pattern)); // null\r\n\r\n# String.replace()\r\n문자열에서 패턴을 검색해서 이를 변경한 후에 변경된 값을 리턴한다.\r\n(원본 문자열은 바뀌지 않음)\r\n\r\nconsole.log(''abcdef''.replace(pattern, ''A''));  // Abcdef', NULL, '', 6, 0),
(2124, 'dale.seo', '', '', '2016-07-06 22:43:39', '', '정규표현식 i와 g과 m 옵션', '정규표현식 패턴을 만들 때 옵션을 설정할 수 있다. 옵션에 따라서 검출되는 데이터가 달라진다.\r\n\r\n# i\r\ni를 붙이면 대소문자를 구분하지 않느다.\r\n\r\nvar xi = /a/;\r\nconsole.log("Abcde".match(xi)); // null\r\nvar oi = /a/i;\r\nconsole.log("Abcde".match(oi)); // ["A"];\r\n\r\n\r\n# g\r\ng를 붙이면 검색된 모든 결과를 리턴한다.\r\ng를 붙이지 않음녀 첫번째로 일치하는 문자열만 리턴한다.\r\n\r\n\r\nvar xg = /a/;\r\nconsole.log("abcdea".match(xg));\r\nvar og = /a/g;\r\nconsole.log("abcdea".match(og));\r\n\r\n\r\n# m\r\n멀티 라인 인듯?', NULL, '', 9, 0),
(2125, 'dale.seo', '', '', '2016-07-06 22:56:41', '', '자바스크립트 정규표현식 캡쳐', '괄호안의 패턴은 마치 변수처럼 재사용할 수 있다. 이 때 기호 $를 사용하는데 아래 코드는 coding과 everybody의 순서를 역전시킨다.\r\n\r\nvar pattern = /(\\w+)\\s(\\w+)/;\r\nvar str = "coding everybody";\r\nvar result = str.replace(pattern, "$2, $1"); // $1 -> group 1, $2 -> group 2\r\nconsole.log(result); // everybody, coding', NULL, '', 5, 0),
(2126, 'dale.seo', '', '', '2016-07-06 23:03:51', '', '정규식을 이용해서 본문 중의 URL에 링크 태그 씌우기', '아래 코드는 본문 중의 URL을 링크 html 태그로 교체한다. \r\n\r\nvar urlPattern = /\\b(?:https?):\\/\\/[a-z0-9-+&@#\\/%?=~_|!:,.;]*/gim;\r\nvar content = ''생활코딩 : http://opentutorials.org/course/1 입니다. 네이버 : http://naver.com 입니다. '';\r\nvar result = content.replace(urlPattern, function(url){\r\n    return ''<a href="''+url+''">''+url+''</a>'';\r\n});\r\nconsole.log(result);\r\n\r\n\r\n결과는 아래와 같다.\r\n\r\n생활코딩 : <a href="http://opentutorials.org/course/1">http://opentutorials.org/course/1</a> 입니다. 네이버 : <a href="http://naver.com">http://naver.com</a> 입니다.\r\n', NULL, '', 3, 0),
(2127, 'dale.seo', '', '', '2016-07-07 09:48:03', '', 'Graph Theory 기초', 'http://www.codeproject.com/Articles/32212/Introduction-to-Graph-with-Breadth-First-Search-BF\r\n\r\n그래프의 표현은 Adjacency Matrix나 Adjacency List를 이용한다.\r\n그래프의 검색은 DFS(Stack 이용), BFS(Queue 이용)을 이용한다.\r\n\r\n[ Adjacency Marix의 장단점 ]\r\nThe advantages of representing the edges using adjacency matrix are: \r\n\r\nSimplicity in implementation as you need a 2-dimensional array \r\nCreating edges/removing edges is also easy as you need to update the Booleans \r\nThe drawbacks of using the adjacency matrix are:  \r\n\r\nIncreased memory as you need to declare N*N matrix where N is the total number of nodes.\r\nRedundancy of information, i.e. to represent an edge between A to B and B to A, it requires to set two Boolean flag in an adjacency matrix. ', NULL, '', 3, 0),
(2128, 'dale.seo', '', '', '2016-07-07 23:10:52', '', '자바스크립트 익명함수', '(function() {...})();\r\n\r\n================================================================\r\n(function(){\r\n    var MYAPP = {}\r\n    MYAPP.calculator = {\r\n        ''left'' : null,\r\n        ''right'' : null\r\n    }\r\n    MYAPP.coordinate = {\r\n        ''left'' : null,\r\n        ''right'' : null\r\n    }\r\n    MYAPP.calculator.left = 10;\r\n    MYAPP.calculator.right = 20;\r\n    function sum(){\r\n        return MYAPP.calculator.left + MYAPP.calculator.right;\r\n    }\r\n    document.write(sum());\r\n}());', NULL, '', 2, 0),
(2134, 'dale.seo', '', '', '2016-07-08 22:44:49', '', '자바스크립트에서 함수 객체 생성 방법', '# 함수 리터럴 이용\r\nfunction sum(x, y) {return x + y;}\r\n\r\n# 익명 함수 이용\r\nvar sum = function(x, y) {return x + y;}\r\n\r\n# 함수 생성자 이용\r\nvar sum = new Function(''x'', ''y'', ''return x + y;'');', NULL, '', 2, 0),
(2135, 'dale.seo', '', '', '2016-07-08 22:53:35', '', '자바스크립트의 함수 객체의 apply와 call 메서드', 'https://opentutorials.org/course/743/6571\r\n\r\nhttps://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\r\nhttps://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Function/call\r\n\r\n자바스크립트에서는 함수는 특정 객체에 종속되지 않는 유연한 언어이다.\r\napply나 call 메서드를 이용해서 여러 객체에서 호출하는 것처럼 만들 수 있다.\r\n\r\n================================================================\r\nvar o = {}\r\nvar p = {}\r\nfunction func(){\r\n    switch(this){\r\n        case o:\r\n            document.write(''o<br />'');\r\n            break;\r\n        case p:\r\n            document.write(''p<br />'');\r\n            break;\r\n        case window:\r\n            document.write(''window<br />'');\r\n            break;          \r\n    }\r\n}\r\nfunc(); // window\r\nfunc.apply(o); // o\r\nfunc.apply(p); // p', NULL, '', 2, 0),
(2130, 'dale.seo', '', '', '2016-07-07 23:12:18', '', '자바스크립트의 유효범위는 함수 단위로만 제공한다.', '자바스크립트는 함수에 대한 유효범위만을 제공한다. 많은 언어들이 블록(대체로 {,})에 대한 유효범위를 제공하는 것과 다른 점이다. 아래 예제의 결과는 coding everybody이다.\r\n\r\n\r\nfor(var i = 0; i < 1; i++){\r\n    var name = ''coding everybody'';\r\n}\r\nalert(name);\r\n자바에서는 아래의 코드는 허용되지 않는다. name은 지역변수로 for 문 안에서 선언 되었는데 이를 for문 밖에서 호출하고 있기 때문이다.\r\n\r\n\r\nfor(int i = 0; i < 10; i++){\r\n    String name = "egoing";\r\n}\r\nSystem.out.println(name);\r\n자바스크립트의 지역변수는 함수에서만 유효하다.', NULL, '', 2, 0),
(2131, 'dale.seo', '', '', '2016-07-07 23:18:10', '', '정적 유효 범위 (static scoping)', '자바스크립트는 함수가 호출된 시점이 아닌 선언된 시점에서의 유효범위를 갖는다. \r\n이러한 유효범위의 방식을 정적 유효범위(static scoping), 혹은 렉시컬(lexical scoping)이라고 한다. \r\n\r\n대부분의 현대적인 언어들이 정적 스코프 방식을 선택하고 있다. (자바도 마찬가지)\r\n\r\nvar i = 5;\r\n \r\nfunction a(){\r\n    var i = 10;\r\n    b();\r\n}\r\n \r\nfunction b(){\r\n    document.write(i);\r\n}\r\n \r\na();\r\n실행 결과는 5이다.', NULL, '', 6, 0),
(2132, 'dale.seo', '', '', '2016-07-08 12:41:51', '', 'Spring Boot의 FilterRegistrationBean를 사용해서 필터 등록', 'http://docs.spring.io/spring-boot/docs/current/reference/html/howto-embedded-servlet-containers.html#howto-add-a-servlet-filter-or-listener-as-spring-bean\r\n\r\nFilterRegistrationBean 객체를 빈으로 등록만 해주면 끝!\r\n\r\n@Configuration\r\npublic class AppConfig {\r\n\r\n	@Bean\r\n	public FilterRegistrationBean filterRegistrationBean() {\r\n		FilterRegistrationBean bean = new FilterRegistrationBean();\r\n		bean.setFilter(new TestFilter());\r\n		bean.addUrlPatterns("/*");\r\n		bean.setOrder(1);\r\n		return bean;\r\n	}\r\n\r\n}', NULL, '', 7, 0),
(2133, 'dale.seo', '', '', '2016-07-08 22:38:32', '', '자바스크립트의 this 키워드', 'https://opentutorials.org/course/743/6571\r\n\r\n\r\n함수 내에서 : 함수를 소유하고 있는 객체\r\n생성자 내에서 : 생성자가 만들 객체', NULL, '', 4, 0),
(2136, 'dale.seo', '', '', '2016-07-08 23:04:49', '', '자바스크립트 상속', 'https://opentutorials.org/course/743/6572\r\n\r\n생성자 객체의 prototype 속성에 "new + 다른 생성자"를 할당하면 된다.\r\n\r\n==============================================\r\nfunction Person(name){\r\n    this.name = name;\r\n}\r\nPerson.prototype.name=null;\r\nPerson.prototype.introduce = function(){\r\n    return ''My name is ''+this.name; \r\n}\r\n \r\nfunction Programmer(name){\r\n    this.name = name;\r\n}\r\nProgrammer.prototype = new Person(); // 상속\r\nProgrammer.prototype.coding = function(){\r\n    return "hello world"; // 기능 추가\r\n}\r\n \r\nvar p1 = new Programmer(''egoing'');\r\ndocument.write(p1.introduce()+"<br />");\r\ndocument.write(p1.coding()+"<br />");', NULL, '', 4, 0),
(2137, 'dale.seo', '', '', '2016-07-09 08:43:20', '', '자바스크립트 생성자의 prototype 속성', 'https://opentutorials.org/course/743/6573\r\n\r\n생성자 최초 선언 시점에 놓친 프로퍼티와 메서드를 추가할 때 유용\r\n상속해서 확장할 때 사용', NULL, '', 7, 0),
(2138, 'dale.seo', '', '', '2016-07-09 09:00:21', '', '자바스크립트 표준 내장 객체 확장', 'for in 으로 Object나 Array 객체를 순회할 때 확장한 메소드가 추가되어 나오므로 가급적 표준 내장 객체를 확장하지 않을 것\r\n\r\n\r\n# Object 객체 확장\r\n\r\nObject.prototype.containValue = function (value) {\r\n	for (var key in this) {\r\n		if (this[key] == value) {\r\n			return true;\r\n		}\r\n	}\r\n	return false;\r\n};\r\n\r\nvar o = {name: ''egoing'', city: ''seoul''};\r\nconsole.log(o.containValue(''egoing''));\r\n\r\n\r\n# Array 객체 확장\r\n\r\nvar arr = [''seoul'', ''new york'', ''ladarkh'', ''pusan'', ''Tsukuba''];\r\n\r\n// 일반 함수\r\nfunction getRandomValueFromArray(arr) {\r\n	var index = Math.floor(arr.length * Math.random());\r\n	return arr[index];\r\n}\r\n\r\nconsole.log(getRandomValueFromArray(arr));\r\n\r\n// 표준 배열 객체 확장\r\nArray.prototype.rand = function() {\r\n	var index = Math.floor(this.length * Math.random());\r\n	return this[index];\r\n}\r\n\r\nconsole.log(arr.rand());', NULL, '', 10, 0),
(2139, 'dale.seo', '', '', '2016-07-09 09:58:13', '', '자바스크립트의 원시 타입과 래퍼 객체', 'https://opentutorials.org/course/743/6579\r\n\r\n자바스크립트에도 숫자와 문자열, 불리언, null, undefined 같은 원시 타입이 분명히 존재하고,\r\n래퍼 객체(Number, String, Boolean)를 내부적으로 자동으로 사용하여 객체처럼 느껴지게 해준다.', NULL, '', 8, 0),
(2140, 'dale.seo', '', '', '2016-07-11 20:54:29', '', 'NodeJS 기본 모듈 assert - 단위 테스트', 'https://nodejs.org/api/assert.html', NULL, '', 3, 0),
(2141, 'dale.seo', '', '', '2016-07-12 16:22:49', '', 'MockMvcBuilders.webAppContextSetup 샘플', 'import org.junit.Before;\r\nimport org.junit.Test;\r\nimport org.junit.runner.RunWith;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.context.annotation.ComponentScan;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.http.MediaType;\r\nimport org.springframework.test.context.ContextConfiguration;\r\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\r\nimport org.springframework.test.context.web.WebAppConfiguration;\r\nimport org.springframework.test.web.servlet.MockMvc;\r\nimport org.springframework.test.web.servlet.MvcResult;\r\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RequestMethod;\r\nimport org.springframework.web.bind.annotation.RequestParam;\r\nimport org.springframework.web.bind.annotation.RestController;\r\nimport org.springframework.web.context.WebApplicationContext;\r\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\r\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\r\n\r\nimport java.nio.charset.StandardCharsets;\r\n\r\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\r\nimport static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\r\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\r\n\r\n/**\r\n * @author 서대영(DAEYOUNG SEO)/Onestore/SKP\r\n */\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(classes = WebLoggingFilterIntegrationTest.TestConfig.class)\r\n@WebAppConfiguration\r\npublic class WebLoggingFilterIntegrationTest {\r\n\r\n	@Autowired\r\n	private WebApplicationContext wac;\r\n\r\n	private MockMvc mockMvc;\r\n\r\n	@Before\r\n	public void setUp() throws Exception {\r\n		WebLoggingFilter filter = new WebLoggingFilter("com.skplanet.storeplatform.framework");\r\n		filter.setLogLevel("info");\r\n		filter.setShouldIncludeHeaders(true);\r\n		filter.setMaxPayloadLength(100);\r\n\r\n		mockMvc = MockMvcBuilders.webAppContextSetup(wac).addFilter(filter).build();\r\n	}\r\n\r\n	@Test\r\n	public void test() throws Exception {\r\n		String reqContent = "id=123&name=Dale%20Seo&email=dale.seo@sk.com";\r\n\r\n		MvcResult result = mockMvc.perform(\r\n			post("/test")\r\n				.param("id", "123").param("name", "Dale Seo").param("email", "dale.seo@sk.com")\r\n				.contentType(MediaType.APPLICATION_FORM_URLENCODED)\r\n				.characterEncoding(StandardCharsets.UTF_8.name())\r\n				.content(reqContent)\r\n		)\r\n				.andDo(print())\r\n				.andExpect(status().isOk())\r\n				.andReturn();\r\n\r\n		String resContent = result.getResponse().getContentAsString();\r\n		System.out.println(resContent);\r\n	}\r\n\r\n	@RestController\r\n	private static class TestController {\r\n\r\n		@RequestMapping(value = "/test", method = RequestMethod.POST)\r\n		public String test(@RequestParam String id, @RequestParam String name, @RequestParam String email) {\r\n			StringBuilder builder = new StringBuilder();\r\n			builder.append("Your id is " + id + ".");\r\n			builder.append("Your name is " + name + ".");\r\n			builder.append("Your email is " + email + ".");\r\n			return builder.toString();\r\n		}\r\n\r\n	}\r\n\r\n	@EnableWebMvc\r\n	@Configuration\r\n	@ComponentScan(basePackageClasses = TestController.class)\r\n	public static class TestConfig extends WebMvcConfigurerAdapter {\r\n\r\n	}\r\n\r\n}', NULL, '', 7, 0),
(2142, 'dale.seo', '', '', '2016-07-13 14:25:22', '', 'AngularJS에서 $scope', '컨트롤러와 뷰를 연결하는 접착제와 같은 역할을 담당한다\r\n\r\n하지만 Angular1.3 부터 컨트롤러를 다루는 새로운 방식은 controller-as 문법이 추가되었기 때문에,\r\n컨트롤러부터 $cope에 대한 의존성을 제거할 수 있으므로 controller-as 문법을 사용할 것을 권장하고 있다.', NULL, '', 2, 0),
(2143, 'dale.seo', '', '', '2016-07-13 14:27:33', '', 'ng-repeat 디렉티브를 이용한 객체 순회', 'ng-repeat 디렉티브는 배열 뿐만 아니라 객체도 순회할 수 있다.\r\n\r\n<ul>\r\n  <li ng-repeat="(key, item) in items">\r\n    <h2>{{key}}</h2>\r\n    <h3>{{{item.title</h3>\r\n  </li>\r\n</ul>', NULL, '', 2, 0),
(2144, 'dale.seo', '', '', '2016-07-13 14:37:14', '', 'ng-options 디렉티브', '드롭다운(<select/>) 요소에 옵션(<option>/>) 요소를 배열로 세팅해줄 때 쓰인다.\r\n\r\nas 앞 부분이 option 요소의 value 속성, as 뒷 부분이 option 요소 태그 내부 값(웹 화면에 보여지는)을 나타낸다.\r\n\r\n<select ng-model="user" ng-options="user.id as user.name for user in users">\r\n  <option value="">-- select --</option>\r\n</select>', NULL, '', 3, 0),
(2145, 'dale.seo', '', '', '2016-07-13 22:10:39', '', 'Express Generator 사용법', 'https://expressjs.com/en/starter/generator.html\r\n\r\n# 설치\r\n```\r\nnpm install express-generator -g\r\n```\r\n\r\n# 현재 디렉토리에 Pug 뷰 템플릿 기반 프로젝트 생성\r\n```\r\nexpress --pug -f\r\n```', NULL, '', 9, 0),
(2146, 'dale.seo', '', '', '2016-07-13 22:32:31', '', 'express 구동 시 프로파일 세팅', '# 환경별 구동\r\nNODE_ENV=development npm start\r\nNODE_ENV=preview npm start\r\nNODE_ENV=stage npm start\r\nNODE_ENV=production npm start\r\n\r\n# 환경 설정 읽어오기\r\nif (app.get(''env'') === ''development'') {\r\n  console.log(''development!!!'')\r\n}\r\n', NULL, '', 3, 0),
(2147, 'dale.seo', '', '', '2016-07-14 11:22:58', '', 'Express Basuc Routing', 'http://expressjs.com/en/starter/basic-routing.html\r\n\r\n[ 설명 ]\r\napp.METHOD(PATH, HANDLER)\r\n\r\n- app is an instance of express.\r\n- METHOD is an HTTP request method, in lowercase.\r\n- PATH is a path on the server.\r\n- HANDLER is the function executed when the route is matched.\r\n\r\n[ HTTP Method 별 ]\r\n\r\n# Respond with Hello World! on the homepage:\r\n\r\napp.get(''/'', function (req, res) {\r\n  res.send(''Hello World!'');\r\n});\r\n\r\n# Respond to POST request on the root route (/), the application’s home page:\r\n\r\napp.post(''/'', function (req, res) {\r\n  res.send(''Got a POST request'');\r\n});\r\n\r\n# Respond to a PUT request to the /user route:\r\n\r\napp.put(''/user'', function (req, res) {\r\n  res.send(''Got a PUT request at /user'');\r\n});\r\n\r\n# Respond to a DELETE request to the /user route:\r\n\r\napp.delete(''/user'', function (req, res) {\r\n  res.send(''Got a DELETE request at /user'');\r\n});', NULL, '', 5, 0),
(2148, 'dale.seo', '', '', '2016-07-14 11:26:57', '', 'Express 에서 정적 파일 서비스하기', 'http://expressjs.com/en/starter/static-files.html\r\n\r\n\r\nexpress.static 미들웨어 펑션을 사용\r\n\r\n========================================\r\napp.use(express.static(''public''));\r\n========================================\r\n\r\nNow, you can load the files that are in the public directory:\r\n\r\nhttp://localhost:3000/images/kitten.jpg\r\nhttp://localhost:3000/css/style.css\r\nhttp://localhost:3000/js/app.js\r\nhttp://localhost:3000/images/bg.png\r\nhttp://localhost:3000/hello.html\r\n\r\n[ 주의 사항 ]\r\nExpress looks up the files relative to the static directory, so the name of the static directory is not part of the URL.', NULL, '', 11, 0),
(2149, 'dale.seo', '', '', '2016-07-14 21:44:16', '', 'let을 이용해서 블록 범위 지역 변수 선언', 'https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Values,_variables,_and_literals\r\n\r\n변수 범위\r\n\r\n어떤 함수의 바깥에 변수를 선언하면, 현재 문서의 다른 코드에 해당 변수를 사용할 수 있기에 전역 변수라고 합니다. 만약 함수 내부에 변수를 선언하면, 오직 그 함수 내에서만 사용할 수 있기에 지역 변수라고 부릅니다.\r\n\r\nECMAScript 6 이전의 JavaScript는 block 문 범위가 없습니다. 그래서 오히려, 블록 내에 선언된 변수는 그 블록 내에 존재하는 함수(혹은 전역 범위)에 지역적입니다. 예를 들어서 아래의 코드는 5라는 로그를 남깁니다. x의 범위가 이 경우 if문 블록이 아니라 x가 선언된 함수(나 전역 문맥)이기 때문입니다.\r\n\r\nif (true) {\r\n  var x = 5;\r\n}\r\nconsole.log(x); // 5\r\n\r\nECMAScript 6에 도입된 let 선언을 사용했을 때, 이 동작은 바뀌었습니다.\r\n\r\nif (true) {\r\n  let y = 5;\r\n}\r\nconsole.log(y); // ReferenceError: y is not defined', NULL, '', 5, 0),
(2150, 'dale.seo', '', '', '2016-07-14 21:54:31', '', '변수 호이스팅', 'https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Values,_variables,_and_literals\r\n\r\n변수 호이스팅\r\n\r\n또 다른 JavaScript 변수의 특이한 점은 예외를 받지 않고도, 나중에 선언된 변수를 참조할 수 있다는 것입니다. 이 개념은 호이스팅(hoisting)으로 알려져 있습니다. 즉 JavaScript 변수가 어떤 의미에서 "끌어올려지거"나 함수나 문의 최상단으로 올려지는 것을 말합니다. 하지만, 끌어올려진 변수는 undefined 값을 반환합니다. 그래서 심지어 이 변수를 사용 혹은 참조한 후에 선언 및 초기화하더라도, 여전히 undefined를 반환합니다.\r\n\r\n/**\r\n * Example 1\r\n */\r\nconsole.log(x === undefined); // logs "true"\r\nvar x = 3;\r\n\r\n\r\n/**\r\n * Example 2\r\n */\r\n// undefined 값을 반환함.\r\nvar myvar = "my value";\r\n\r\n(function() {\r\n  console.log(myvar); // undefined\r\n  var myvar = "local value";\r\n})();\r\n\r\n위 예제는 아래 예제와 동일하게 볼 수 있습니다.\r\n\r\n/**\r\n * Example 1\r\n */\r\nvar x;\r\nconsole.log(x === undefined); // logs "true"\r\nx = 3;\r\n\r\n/**\r\n * Example 2\r\n */\r\nvar myvar = "my value";\r\n\r\n(function() {\r\n  var myvar;\r\n  console.log(myvar); // undefined\r\n  myvar = "local value";\r\n})();\r\n\r\n호이스팅 때문에, 함수 내의 모든 var 문은 가능한 함수 상단 근처에 두는 것이 좋습니다. 이 방법은 코드를 더욱 명확하게 만들어줍니다.', NULL, '', 2, 0),
(2151, 'dale.seo', '', '', '2016-07-14 21:56:49', '', '자바스크립트 데이터 타입', '데이터 형\r\n\r\n최신 ECMAScript 표준은 7가지 데이터 형을 정의합니다.\r\n\r\n    6가지 원시 데이터 형\r\n        Boolean. true와 false\r\n        null. null 값을 나타내는 특별한 키워드. JavaScript는 대소문자를 구분하므로, null은 Null, NULL 혹은 다른 변형과도 다릅니다.\r\n        undefined. undefined 값인 최상위 속성.\r\n        Number. 42 혹은 3.14159.\r\n        String. "안녕"\r\n        Symbol. (ECMAScript 6에 도입) 인스턴스가 고유하고 불변인 데이터 형.\r\n    그리고 Object\r\n\r\n이 데이터 형이 비교적 적은 양이지만, 어플리케이션에 유용한 기능을 수행할 수 있습니다. 객체와 함수는 언어의 다른 기본 요소입니다. 객체는 값을 위한 컨테이너, 함수는 어플리케이션이 수행할 수 있는 절차(procedure)로 생각할 수 있습니다.', NULL, '', 3, 0),
(2152, 'dale.seo', '', '', '2016-07-14 22:00:07', '', '자바스크립트 문자열을 숫자로 변환', '문자열을 숫자로 변환하기\r\n\r\n숫자를 나타내는 값이 문자열로 메모리에 있는 경우, 변환을 위한 메서드가 있습니다.\r\n\r\n    parseInt()\r\n    parseFloat()\r\n\r\nparseInt는 오직 정수만 반환하므로, 소수에서는 사용성이 떨어집니다. 게다가 parseInt를 잘 사용하기 위해서는 항상 진법(Radix) 매개변수를 포함해야 합니다. 진법 매개변수는 변환에 사용될 진법을 지정하는데 사용됩니다.\r\n\r\n문자열을 숫자로 변환하는 대안은 +(단항 더하기) 연산자입니다.\r\n\r\n"1.1" + "1.1" = "1.11.1"\r\n(+"1.1") + (+"1.1") = 2.2\r\n// 참고: 괄호는 명확성을 위해 추가, 필요한 것은 아닙니다.\r\n\r\n========================================================\r\n# 문자열과 숫자의 연산 결과는 숫자형이다.\r\n\r\n"37" - 7 // 30\r\n"37" + 7 // 377', NULL, '', 5, 0),
(2153, 'dale.seo', '', '', '2016-07-14 22:04:28', '', '자바스크립트 진수 표현', '정수\r\n\r\n정수는 10진, 16진, 8진 및 2진수로 표현될 수 있습니다.\r\n\r\n    10진 정수 리터럴은 선행 0(zero)이 아닌 숫자열로 이루어집니다.\r\n    정수 리터럴에서 선행 0(zero)이나 선행 0o(혹은 0O)은 8진수임을 나타냅니다. 8진 정수는 오직 숫자 0-7만 포함할 수 있습니다.\r\n    선행 0x(나 0X)는 16진수임을 나타냅니다. 16진 정수는 숫자 0-9 및 문자 a-f, A-F를 포함할 수 있습니다.\r\n    선행 0b(나 0B)는 2진수임을 나타냅니다. 2진 정수는 오직 숫자 0과 1만 포함할 수 있습니다.\r\n\r\n다음은 정수 리터럴 예제입니다.\r\n\r\n0, 117 및 -345 (10진수)\r\n015, 0001 및 -0o77 (8진수)\r\n0x1123, 0x00111 및 -0xF1A7 (16진수)\r\n0b11, 0b0011 및 -0b11 (2진수)', NULL, '', 2, 0),
(2154, 'dale.seo', '', '', '2016-07-14 22:08:03', '', '자바스크립트 객체 리터럴', '객체 리터럴\r\n\r\n객체 리터럴은 중괄호({})로 묶인 0개 이상인 객체의 속성명과 관련 값 쌍 목록입니다. 문의 시작에 객체 리터럴을 사용해서는 안됩니다. 이는 {가 블록의 시작으로 해석되기 때문에 오류를 이끌거나 의도한 대로 동작하지 않습니다.\r\n\r\n아래는 객체 리터럴의 예제입니다. car 객체의 첫째 요소는 myCar 속성을 정의하고 문자열 "Saturn"을 할당합니다. 반면 둘째 요소인 getCar 속성은 function (carTypes("Honda"))을 호출한 결과가 즉시 할당됩니다. 셋째 요소 special 속성은 기존 변수 sales를 사용합니다.\r\n\r\nvar sales = "Toyota";\r\n\r\nfunction carTypes(name) {\r\n  if (name === "Honda") {\r\n    return name;\r\n  } else {\r\n\r\n  }\r\n    return "Sorry, we don''t sell " + name + ".";\r\n}\r\n\r\nvar car = { myCar: "Saturn", getCar: carTypes("Honda"), special: sales };\r\n\r\nconsole.log(car.myCar);   // Saturn\r\nconsole.log(car.getCar);  // Honda\r\nconsole.log(car.special); // Toyota\r\n\r\n게다가, 속성명으로 숫자나 문자열 리터럴을 사용하거나 또다른 객체 리터럴 내부에 객체를 중첩할 수도 있습니다. 아래 예제는 이 옵션을 사용합니다.\r\n\r\nvar car = { manyCars: {a: "Saab", "b": "Jeep"}, 7: "Mazda" };\r\n\r\nconsole.log(car.manyCars.b); // Jeep\r\nconsole.log(car[7]); // Mazda\r\n\r\n객체 속성명은 빈 문자열 포함 어떤 문자열도 될 수 있습니다. 속성명이 유효한 JavaScript 식별자나 숫자가 아닌 경우, 따옴표로 묶여야 합니다. 또한 유효한 식별자가 아닌 속성명은 점(.) 속성으로 접근할 수 없습니다. 대신 배열 같은 표기법("[]")으로 접근하고 값을 설정할 수 있습니다.\r\n\r\nvar unusualPropertyNames = {\r\n  "": "An empty string",\r\n  "!": "Bang!"\r\n}\r\nconsole.log(unusualPropertyNames."");   // SyntaxError: Unexpected string\r\nconsole.log(unusualPropertyNames[""]);  // An empty string\r\nconsole.log(unusualPropertyNames.!);    // SyntaxError: Unexpected token !\r\nconsole.log(unusualPropertyNames["!"]); // Bang!\r\n\r\nES2015에서, 객체 리터럴은 구성에서 프로토타입 설정, foo: foo 할당을 위한 단축 표기, 메서드 정의, super 클래스 호출 및 식으로 동적인 속성명 계산을 지원하기 위해 확장됐습니다. 그에 따라 객체 리터럴 및 클래스 선언이 함께 더 가까워지고, 객체 기반 설계는 같은 일부 편의기능으로 득을 볼 수 있습니다.\r\n\r\nvar obj = {\r\n    // __proto__\r\n    __proto__: theProtoObj,\r\n    // ‘handler: handler’의 단축 표기\r\n    handler,\r\n    // Methods\r\n    toString() {\r\n     // Super calls\r\n     return "d " + super.toString();\r\n    },\r\n    // Computed (dynamic) property names\r\n    [ ''prop_'' + (() => 42)() ]: 42\r\n};\r\n\r\n아래를 참고하세요.\r\n\r\nvar foo = {a: "alpha", 2: "two"};\r\nconsole.log(foo.a);    // alpha\r\nconsole.log(foo[2]);   // two\r\n//console.log(foo.2);  // Error: missing ) after argument list\r\n//console.log(foo[a]); // Error: a is not defined\r\nconsole.log(foo["a"]); // alpha\r\nconsole.log(foo["2"]); // two', NULL, '', 2, 0),
(2155, 'dale.seo', '', '', '2016-07-14 22:11:46', '', '자바스크립트 문자열 리터럴', 'https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Values,_variables,_and_literals#%EB%AC%B8%EC%9E%90%EC%97%B4_%EB%A6%AC%ED%84%B0%EB%9F%B4\r\n\r\n\r\n문자열 리터럴\r\n\r\n문자열 리터럴은 큰 따옴표(") 혹은 작은 따옴표('')로 묶인 0개 이상의 문자입니다. 문자열은 같은 형 따옴표, 즉 큰 따옴표 쌍이나 작은 따옴표 쌍으로 구분되어야 합니다. 아래는 문자열 리터럴의 예제입니다.\r\n\r\n"foo"\r\n''bar''\r\n"1234"\r\n"one line \\n another line"\r\n"John''s cat"\r\n\r\n문자열 리터럴 값은 문자열 객체의 모든 메서드를 호출할 수 있습니다. JavaScript는 자동으로 문자열 리터럴을 임시 문자열 객체로 변환, 메서드를 호출하고 나서 임시 문자열 객체를 폐기합니다. 또한 문자열 리터럴에서도 String.length 속성을 사용할 수 있습니다.\r\n\r\nconsole.log("John''s cat".length)\r\n// 공백을 포함한 문자열 내 심볼 갯수가 출력됩니다.\r\n// 여기서는, 10.\r\n\r\nES2015에서는, 템플릿 리터럴도 사용할 수 있습니다. 템플릿 문자열은 문자열 구성을 위한 달콤한 구문을 제공합니다. 이는 Perl, Python 등에 있는 문자열 삽입(interpolation) 기능과 비슷합니다. 마음대로, 문자열 구성을 사용자 정의하고 인젝션 공격을 피하거나 문자열 콘텐츠로 더 고레벨 데이터 구조를 구성하기 위한 태그가 추가될 수 있습니다.\r\n\r\n// 기본적인 문자열 리터럴 생성\r\n`In JavaScript ''\\n'' is a line-feed.`\r\n\r\n// 여러 줄 문자열\r\n`In JavaScript this is\r\n not legal.`\r\n\r\n// 문자열 삽입\r\nvar name = "Bob", time = "today";\r\n`Hello ${name}, how are you ${time}?`\r\n\r\n// Construct an HTTP request prefix is used to interpret the replacements and construction\r\nPOST`http://foo.org/bar?a=${a}&b=${b}\r\n     Content-Type: application/json\r\n     X-Credentials: ${credentials}\r\n     { "foo": ${foo},\r\n       "bar": ${bar}}`(myOnReadyStateChangeHandler);\r\n\r\n꼭 문자열 객체를 사용할 필요가 없는 경우 문자열 리터럴을 사용해야 합니다. 문자열 객체에 대해 자세한 사항은 String을 참고하세요.', NULL, '', 2, 0),
(2156, 'dale.seo', '', '', '2016-07-14 22:12:32', '', '자바스크립트 특수문자', '표: JavaScript 특수 문자 문자 	뜻\r\n\\0 	Null Byte\r\n\\b 	Backspace\r\n\\f 	Form feed\r\n\\n 	New line\r\n\\r 	Carriage return\r\n\\t 	Tab\r\n\\v 	Vertical tab\r\n\\'' 	Apostrophe 혹은 작은 따옴표\r\n\\" 	큰 따옴표\r\n\\\\ 	백슬래시\r\n\\XXX 	Latin-1 인코딩 문자는 0 - 377 사이 8진수 3자리까지 지정될 수 있습니다. 예를 들어, \\251은 copyright 심볼을 표현하는 8진수 시퀀스입니다.\r\n\\xXX 	Latin-1 인코딩 문자는 00 - FF 사이의 16진수 2자리로 지정될 수 있습니다. 예를 들어, \\xA9는 copyright 심볼을 표현하는 16진수 시퀀스입니다.\r\n\\uXXXX 	유니코드 문자는 16진수 4자리로 지정될 수 있습니다. 예를 들어, \\u00A9는 copyright 심볼을 표현하는 유니코드 열입니다. Unicode escape sequences를 참고하세요.\r\n\\u{XXXXX} 	유니코드 코드 포인트 이스케이프. 예를 들어, \\u{2F804}는 간단한 유니코드 이스케이프 \\uD87E\\uDC04와 같습니다.', NULL, '', 2, 0),
(2157, 'dale.seo', '', '', '2016-07-15 19:55:39', '', '현재시각에 대한 timestamp 구하기', 'https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Date/now\r\n\r\n# 1. Date.now()\r\nvar timeInMs = Date.now();\r\n\r\n# 2. new Date().getTime()\r\n\r\n런타임에서  Date.now() 정적 메소드 지원 안 할 경우 사용한다.\r\n\r\nif (!Date.now) {\r\n  Date.now = function now() {\r\n    return new Date().getTime();\r\n  };\r\n}\r\n\r\n# 3. _.now()\r\n\r\nlodash 라이브러리 사용', NULL, '', 6, 0),
(2158, 'dale.seo', '', '', '2016-07-17 10:51:34', '', 'Rest API의 응답 HttpStatus 종결자 그림', 'http://i.stack.imgur.com/whhD1.png', NULL, '', 2, 0),
(2159, 'dale.seo', '', '', '2016-07-17 12:19:32', '', '.이나 +가 [] 집합의 구성원일 때는 이스케이프 안 해도 상관 없음', '[\\w.] 는 [\\w\\.]과 기능이 같다.', NULL, '', 4, 0),
(2160, 'dale.seo', '', '', '2016-07-17 12:23:04', '', '이메일 정규식', 'https://regexper.com/#%5Cw%2B%5B%5Cw.%5D*%40%5B%5Cw.%5D%2B%5C.%5Cw%2B\r\n\r\n\\w+[\\w.]*@[\\w.]+\\.\\w+\r\n\r\n\r\n', NULL, '', 2, 0),
(2161, 'dale.seo', '', '', '2016-07-17 12:26:13', '', '탐욕적 수량자 vs 게으른 수량자', '의도한 것보다 많은 부분이 일치된다면 뒤에 ?를 붙인 게으른 수량자를 사용한다.\r\n\r\n*   vs  *?\r\n+  vs  +?\r\n{n,}  vs {n,}?', NULL, '', 2, 0),
(2162, 'dale.seo', '', '', '2016-07-17 12:29:05', '', '날짜 문자열에서 연도 부부만 일치시키기', '(19|20)\\d{2}', NULL, '', 3, 0),
(2163, 'dale.seo', '', '', '2016-07-17 12:30:44', '', 'HTML 문서에서 헤더 요소 찾기', '<[hH][1-6]>.*?</[hH][1-6]>', NULL, '', 1, 0),
(2164, 'dale.seo', '', '', '2016-07-17 16:24:10', '', 'ExpressJS에서 CORS 적용 방법', 'https://www.npmjs.com/package/cors\r\n\r\nCORS 모듈을 사용하는 게 아래 미들웨어 추가하는 방법보다 권장됨\r\n\r\n=====================================================================\r\n// CORS\r\nvar cors = require(''cors'')\r\napp.use(cors())\r\n\r\n\r\n====================================================================================\r\nhttp://enable-cors.org/server_expressjs.html\r\n\r\n미들웨어 하나만 추가하면 됨\r\n\r\n===========================================================================\r\nvar allowCrossDomain = function(req, res, next) {\r\n  res.header(''Access-Control-Allow-Origin'', ''*'');\r\n  res.header(''Access-Control-Allow-Methods'', ''GET,PUT,POST,DELETE,OPTIONS'');\r\n  res.header(''Access-Control-Allow-Headers'', ''Content-Type, Authorization, Content-Length, X-Requested-With'');\r\n  if (''OPTIONS'' === req.method) {\r\n    res.send(200);\r\n  } else {\r\n    next();\r\n  }\r\n};\r\n\r\napp.use(allowCrossDomain);', NULL, '', 17, 0),
(2165, 'dale.seo', '', '', '2016-07-19 15:56:18', '', '하이라이트된 부분 간에 이동하기', 'To navigate among usages, do one of the following\r\n\r\nClick on a stripe in the marker bar to navigate to the respective usage location.\r\nUse ⌘G and ⇧⌘G keyboard shortcuts, to navigate to the next and previous usages respectively.\r\n\r\nhttps://www.jetbrains.com/help/idea/2016.1/highlighting-usages.html#2', NULL, '', 2, 0),
(2166, 'dale.seo', '', '', '2016-07-20 09:58:20', '', 'Binary Search에서 중간값 찾을 때 주의점', 'stat와 end의 중값값인 mid를 찾는 방법이 2가지가 있는데\r\n1. int mid = (start + end) / 2;\r\n2. int mid = start + (end - start) / 2;\r\n두번째 방법을 사용하는 것이 안전하다.\r\n왜냐하면 첫번째 방법은 start와 end의 합이 2^31 보다 클 때를 대비해서 long 타입을 사용해야하기 때문이다.', NULL, '', 2, 0),
(2167, 'dale.seo', '', '', '2016-07-21 18:06:06', '', 'Repository Migration (SVN -> Git)', 'https://git-scm.com/docs/git-svn\r\nhttp://stackoverflow.com/questions/2159567/what-is-the-format-of-an-authors-file-for-git-svn-specifically-for-special-char\r\n\r\n[ SVN -> Git Reposiotry Migration ]\r\n\r\n1) SVN 리파지토리 체크아웃\r\nsvn checkout <svn_url>\r\n\r\n2) SVN 유저네임을 Distinct하게 추출\r\ncd <svn_dir>\r\nsvn log --xml | grep /author | sort -u | perl -pe ''s/.>(.?)<./$1 = /'' > authors.txt\r\n\r\n3) authors.txt 파일 편집 후 상위 디렉토리로 이동\r\nGit 사용자 이름/이메일 맵핑 정보 추가\r\nex) loginname = Joe User <user@example.com>\r\nmv authors.txt ../\r\n\r\n4) 마이그레이션 커맨드 실행 (상위 디렉토리)\r\ncd ..\r\ngit svn clone --username <svn_username> --authors-file=authors.txt <svn_url>\r\nex) git svn clone --username dale.seo --authors-file=authors.txt https://skvalley.com/svn/repos/iprm/skpprm\r\n\r\n5) .gitignore와 readme.md 파일 추가 (권장)\r\ncd <git_dir>\r\nvi .gitignore\r\nvi readme.md\r\n\r\n6) 원격 리파지토리 생성 (Bitbucket or Github)\r\n\r\n7) 원격 리파지토리와 연결 및 푸시\r\ngit remote add origin <git_url>\r\ngit push origin master\r\n\r\n8) 원격 리파지토리 기본 설정\r\n - develop 브랜치 생성\r\n - 기본 브랜치 develop으로 변경\r\n - branch permission 설정\r\n - pull requests 설정\r\n - branching model 설정', NULL, '', 25, 0),
(2168, 'dale.seo', '', '', '2016-07-22 10:08:58', '', 'Todo App 만들기', 'http://ionicframework.com/docs/guide/building.html', NULL, '', 2, 0),
(2169, 'dale.seo', '', '', '2016-07-24 10:13:08', '', '소스 코드 변경 즉시 반영 nodemon, supervisor', 'nodemon이 더 많이 쓰이는 듯\r\n\r\nnpm install -g nodemon\r\nnpm install -g supervisor', NULL, '', 2, 0),
(2170, 'dale.seo', '', '', '2016-07-24 17:59:00', '', 'Python Cheat Sheet', 'https://opentutorials.org/course/1750/9689\r\n숙달될 때 까지 출력해서 자리에 붙여두기\r\n\r\nPython\r\nhttps://perso.limsi.fr/pointal/_media/python:cours:mementopython3-english.pdf\r\nhttp://www.cheat-sheets.org/saved-copy/PQRC-2.4-A4-latest.pdf\r\nhttp://overapi.com/python/\r\nRuby\r\nhttp://www.cheat-sheets.org/saved-copy/RubyCheat.pdf\r\nhttp://overapi.com/ruby/\r\n', NULL, '', 6, 0),
(2171, 'dale.seo', '', '', '2016-07-25 19:31:55', '', '정수형 나누기와 실수형 나누기 연산자', 'Python 3 syntax\r\nprint(4 / 3)\r\nprint(4 // 3)\r\nGives the output\r\n1.3333333333333333 \r\n1', NULL, '', 4, 0),
(2172, 'dale.seo', '', '', '2016-07-26 11:33:03', '', 'RestTemplate의 내부 기술 선택', 'RestTemplate은 설정에 따라 URLConnection(SimpleClientHttpRequestFactory) or HttpClient(HttpComponentsClientHttpRequestFactory)로 선택이 가능\r\n\r\n- SimpleClientHttpRequestFactory - java.net.HttpURLConnection 사용\r\n- HttpComponentsClientHttpRequestFactory - Apache HttpComponents 4 사용\r\n', NULL, '', 9, 0),
(2173, 'dale.seo', '', '', '2016-07-26 13:07:14', '', 'Network Properties', 'http://docs.oracle.com/javase/8/docs/technotes/guides/net/properties.html\r\n\r\n\r\n# http.keepAlive (default: true)\r\nIndicates if keep alive (persistent) connections should be supported. Persistent connections improve performance by allowing the underlying socket connection be reused for multiple http requests.\r\nThe default is true and thus persistent connections will be used with http 1.1 servers. Set to ''false'' to disable the use of persistent connections.\r\n\r\n# http.maxConnections (default: 5)\r\nIf HTTP keep-alive is enabled, this value is the number of idle connections that will be simultaneously kept alive, per-destination.', NULL, '', 5, 0),
(2174, 'dale.seo', '', '', '2016-07-26 13:20:28', '', 'URLConnection 대신에 HttpClient를 사용할 것', '특히 멀티 쓰레드 상용 환경에서는...\r\n\r\nhttp://vincentdevillers.blogspot.kr/2011/09/httpclient-best-pratices.html', NULL, '', 3, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(2175, 'dale.seo', '', '', '2016-07-26 13:21:57', '', 'HttpComponentsClientHttpRequestFactory를 사용한 RestTemplate 설정 방법', '상용 멀티 쓰레드 환경에서는 RestTemplate을 설정할 때, SimpleClientHttpRequestFactory 대신에 SimpleClientHttpRequestFactory를 사용하여,\r\n내부적으로 HttpClient의 도움을 받아 커넥션 풀링 등의 이점을 활용하도록 한다.\r\n\r\nhttp://vincentdevillers.blogspot.kr/2013/02/configure-best-spring-resttemplate.html\r\nhttp://vincentdevillers.blogspot.kr/2013/10/a-best-spring-asyncresttemplate.html', NULL, '', 8, 0),
(2176, 'dale.seo', '', '', '2016-07-26 21:58:14', '', 'Python 클래스 예제', '- 문법 : class 클래스이름(object):\r\n- 생성자를 포함한 모든 메서드의 첫번째 매개변수는 self 이다.\r\n- 생성자 이름은 __init__\r\n- 인스턴스 생성은 new 필요없이 클래스 이름만\r\n\r\nclass Cal(object):\r\n    def __init__(self, v1, v2):\r\n        print(v1, v2)\r\n        self.v1 = v1\r\n        self.v2 = v2\r\n    def add(self):\r\n        return self.v1 + self.v2\r\n    def subtract(self):\r\n        return self.v1 - self.v2\r\n\r\n\r\nc1 = Cal(10, 10)\r\nprint(c1.add())\r\nprint(c1.subtract())\r\n\r\nc2 = Cal(30, 20)\r\nprint(c2.add())\r\nprint(c2.subtract())\r\n', NULL, '', 5, 0),
(2177, 'dale.seo', '', '', '2016-07-27 11:32:30', '', 'Logback.xml 설정 시 appender와 logger 순서 중요', 'logger가 appender에 의존(사용)하기 때문에,\r\n반드시 appender가 logger보다 먼저 선언되야 한다.', NULL, '', 3, 0),
(2178, 'dale.seo', '', '', '2016-07-27 16:01:03', '', 'RestTemplate에 커넥션풀 세팅해주는 방법', 'RestTemplate에 HttpComponentsClientHttpRequestFactory를 세팅해줄 때 \r\nHttpClient에 PoolingHttpClientConnectionManager를 세팅해서 HttpComponentsClientHttpRequestFactory에 꼽아주면 됨\r\n\r\n\r\nhttp://stackoverflow.com/questions/31151990/how-to-efficiently-use-resttemplate-in-multithreading-application\r\nhttp://stackoverflow.com/questions/30989637/how-to-decide-optimal-settings-for-setmaxtotal-and-setdefaultmaxperroute\r\nhttp://mail-archives.apache.org/mod_mbox/hc-httpclient-users/201506.mbox/%3CCAF+A=7oRcSkAoF7fW6m1Ej5WjemQ=7WiLbxiDBvu3LEpc47GMQ@mail.gmail.com%3E', NULL, '', 6, 0),
(2179, 'dale.seo', '', '', '2016-07-27 21:30:16', '', 'Linux에서 IntelliJ 사용할 때 세팅 저장 시 권한 에러가 날 때', 'http://stackoverflow.com/questions/25396984/getting-clear-read-only-status-on-webstorm-8', NULL, '', 3, 0),
(2180, 'dale.seo', '', '', '2016-07-27 21:44:55', '', 'Pattern.matches로 가장 심플한 정규식 체크', '@gmail.com 으로 끝나는 문자열 패턴이 포함되어 있는지 체크\r\n\r\n	@Test\r\n	public void testMatches() {\r\n		String regex = ".*@gmail.com";\r\n		assertTrue(Pattern.matches(regex, "dale.seo@gmail.com"));\r\n		assertFalse(Pattern.matches(regex, "dale_seo@daum.net"));\r\n	}\r\n\r\n\r\nString#matchs를 사용하면 더 간편하다.', NULL, '', 9, 0),
(2181, 'dale.seo', '', '', '2016-07-28 09:12:28', '', 'Linux에서 Node 백그라운드로 실행하기', '[ 가장 간단한 방법 - forever 모듈 이용 ]\r\nsudo npm install -g forever\r\nforever start app.js\r\n\r\nhttp://stackoverflow.com/questions/12701259/how-to-make-a-node-js-application-run-permanently\r\n\r\n[ Systemd로 O/S에 위이함기 - 복잡함 ]\r\nhttps://certsimple.com/blog/deploy-node-on-linux\r\nhttp://stackoverflow.com/questions/4681067/how-do-i-run-a-node-js-application-as-its-own-process/28542093#28542093', NULL, '', 7, 0),
(2182, 'dale.seo', '', '', '2016-07-28 09:46:02', '', 'Github SSH 접속하기 (Linux)', 'https://help.github.com/articles/generating-an-ssh-key/\r\n\r\n[ 새로운 SSH 키 생성하기 (이미 있다면 생략 가능) ]\r\n$ cd ~/.ssh\r\n$ ssh-keygen -t rsa -b 4096 -C "dale.seo@gmail.com"\r\n\r\n[ ssh-agent에 생성한 SSH키 추가 ]\r\n$ ssh-add ~/.ssh/id_rsa\r\n\r\n[ 클립 보드에 공개키 내용 복사 ]\r\n$ sudo apt-get install xclip\r\n$ xclip -sel clip < ~/.ssh/id_rsa.pub\r\n\r\n[ Github 사이트에서 복사한 공개키 내용 등록 ]\r\nSettings > SSH and GPG keys > New SSH key', NULL, '', 8, 0),
(2183, 'dale.seo', '', '', '2016-07-30 12:19:18', '', 'Tuple', 'https://www.hackerrank.com/challenges/python-tuples/tutorial\r\n\r\n튜플을 이용하면 swap 하는 게 사기처럼 쉬움\r\n\r\nTuples are data structures that look a lot like lists. Unlike lists, tuples are immutable (meaning that they cannot be modified once created). This restricts their use because we cannot add, remove, or assign values; however, it gives us an advantage in space and time complexities.\r\nA common tuple use is the swapping of  numbers:\r\na, b = b, a\r\nHere  is a tuple, and it assigns itself the values of .\r\nAnother awesome use of tuples is as keys in a dictionary. In other words, tuples are hashable.', NULL, '', 4, 0),
(2184, 'dale.seo', '', '', '2016-07-30 12:48:32', '', 'List 가지고 Tuple 만들어 내기', '# 숫자 List를 숫자 Tuple로 변환\r\n\r\nl = [4,5,6]\r\nt = tuple(l) # (4, 5, 6)\r\n\r\n\r\n# 문자 List를 숫자 Tuple로 변환\r\n\r\ntup = tuple(int(i) for i in input().split())', NULL, '', 2, 0),
(2185, 'dale.seo', '', '', '2016-07-30 14:39:45', '', 'RegExp.prototype.exec() 사용해서 자음만 검색하기', 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\r\n\r\n// exec() 반환 타입이 배일임을 주의한다.\r\n\r\nvar str = ''glove'';\r\nvar firstConsnants = /[bcdfgjklmnpqrstvwxz]+/.exec(str)[0];\r\nconsole.log(firstConsnants); // gl', NULL, '', 2, 0),
(2186, 'dale.seo', '', '', '2016-07-30 14:46:29', '', 'Chrome 개발자 도구에서 debugger 활용', '코드 중간에 debugger라고 써두면 거기가 break point로 debugging이 된다.', NULL, '', 2, 0),
(2187, 'dale.seo', '', '', '2016-07-30 17:09:29', '', 'String.prototype.replace()', 'https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/replace\r\n\r\n문자열이나 g 플래그가 안 붙은 정규식을 사용했을 경우, 첫번째로 일치하는 문자열만 교체된다.\r\n따라서 모든 일치를 교체하고 싶다면 g 플래그가 붙은 정규식을 사용한다.\r\n\r\n''"ABC"''.replace(/"/g, ''&quot;''); // &quot;ABC&quot;', NULL, '', 4, 0),
(2188, 'dale.seo', '', '', '2016-07-31 19:54:48', '', '파이썬의 3항 조건문', 'http://stackoverflow.com/questions/394809/does-python-have-a-ternary-conditional-operator\r\n\r\n# 문법\r\na if condition else b\r\n\r\n# 예시\r\nreturn -1 if memo[amount] > amount else memo[amount]', NULL, '', 6, 0),
(2189, 'dale.seo', '', '', '2016-08-01 09:45:02', '', 'module.exports VS exports', 'http://www.hacksparrow.com/node-js-exports-vs-module-exports.html\r\nhttp://programmingsummaries.tistory.com/340\r\nhttp://appletree.or.kr/blog/web-development/javascript/%ED%98%BC%EB%8F%99%ED%95%98%EA%B8%B0-%EC%89%AC%EC%9A%B4-module-exports%EC%99%80-exports%EC%9D%98-%EC%B0%A8%EC%9D%B4/\r\n\r\n\r\nif you want your module to be of a specific object type, use module.exports; if you want your module to be a typical module instance, use exports.', NULL, '', 7, 0),
(2190, 'dale.seo', '', '', '2016-08-01 13:40:03', '', 'MAC에서 Homebrew로 MySQL 설치', 'brew install mysql\r\n\r\n\r\nhttps://github.com/helloheesu/SecretlyGreatly/wiki/%EB%A7%A5%EC%97%90%EC%84%9C-mysql-%EC%84%A4%EC%B9%98-%ED%9B%84-%ED%99%98%EA%B2%BD%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0', NULL, '', 4, 0),
(2191, 'dale.seo', '', '', '2016-08-01 15:30:13', '', 'Logback의 필터', 'http://logback.qos.ch/manual/filters.html#levelFilter\r\nhttp://logback.qos.ch/manual/filters.html#thresholdFilter\r\nhttp://stackoverflow.com/questions/5653062/how-can-i-configure-logback-to-log-different-levels-for-a-logger-to-different-de\r\n\r\n\r\nAppender에 Filter를 끼우면, Appender를 사용하는 Logger가 출력하는 로그 중에서 일부 레벨만 출력할 수 있다.\r\n예를 들어 Logger에서 DEBUG 레벨로 찍는 로그들을 특정 Appender에서는 출력안되게 할 수 있다.', NULL, '', 5, 0),
(2192, 'dale.seo', '', '', '2016-08-01 19:25:58', '', 'List Comprehention', 'https://www.hackerrank.com/challenges/list-comprehensions\r\nhttp://www.thelearningpoint.net/computer-science/learning-python-programming-and-data-structures/learning-python-programming-and-data-structures--tutorial-15--generators-and-list-comprehensions\r\n\r\n>> ListOfNumbers = [ x for x in range(10) ] # List of integers from 0 to 9\r\n>> ListOfNumbers\r\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n\r\n>> ListOfThreeMultiples = [x for x in range(10) if x % 3 == 0] # Multiples of 3 below 10\r\n>> ListOfThreeMultiples\r\n[0, 3, 6, 9]', NULL, '', 4, 0),
(2193, 'dale.seo', '', '', '2016-08-01 21:35:59', '', '내장함수 sorted VS 리스트 sort 메서드', 'https://wikidocs.net/32\r\n\r\nsorted\r\nsorted(iterable) 함수는 입력값을 정렬한 후 그 결과를 리스트로 리턴하는 함수이다.\r\n\r\n>>> sorted([3, 1, 2])\r\n[1, 2, 3]\r\n>>> sorted([''a'', ''c'', ''b''])\r\n[''a'', ''b'', ''c'']\r\n>>> sorted("zero")\r\n[''e'', ''o'', ''r'', ''z'']\r\n>>> sorted((3, 2, 1))\r\n[1, 2, 3]\r\n리스트 자료형에도 sort라는 함수가 있다. 하지만 리스트 자료형의 sort 함수는 리스트 객체 그 자체를 정렬만 할 뿐 정렬된 결과를 리턴하지는 않는다.\r\nhttps://wikidocs.net/32\r\n\r\n\r\n다음 예제로 sorted 함수와 리스트 자료형의 sort 함수의 차이점을 확인해 보자.\r\n\r\n>>> a = [3, 1, 2]\r\n>>> result = a.sort()\r\n>>> print(result)\r\nNone\r\n>>> a\r\n[1, 2, 3]\r\nsort 함수는 리턴값이 없기 때문에 result 변수에 저장되는 값이 없다. 따라서 print(result)를 하면 None이 출력된다. sort 함수를 수행한 후 리턴값은 없지만 리스트 객체 a를 확인하면 [3, 1, 2]가 [1, 2, 3]으로 정렬된 것을 볼 수 있다.', NULL, '', 10, 0),
(2194, 'dale.seo', '', '', '2016-08-01 21:38:21', '', '내장함수 map', 'map\r\nmap(f, iterable)은 함수(f)와 반복 가능한(iterable) 자료형을 입력으로 받는다. map은 입력받은 자료형의 각 요소가 함수 f에 의해 수행된 결과를 묶어서 리턴하는 함수이다.\r\n\r\n다음의 예를 보자.\r\n\r\n# two_times.py\r\ndef two_times(numberList):\r\n    result = [ ]\r\n    for number in numberList:\r\n        result.append(number*2)\r\n    return result\r\n\r\nresult = two_times([1, 2, 3, 4])\r\nprint(result)\r\ntwo_times 함수는 리스트 요소를 입력받아 각 요소에 2를 곱한 결과값을 돌려준다. 실행 결과는 다음과 같다.\r\n\r\n결과값: [2, 4, 6, 8]\r\n위의 예제는 map 함수를 이용하면 다음처럼 바꿀 수 있다.\r\n\r\n>>> def two_times(x): return x*2\r\n...\r\n>>> list(map(two_times, [1, 2, 3, 4]))\r\n[2, 4, 6, 8]\r\n이제 앞 예제를 해석해 보자. 먼저 리스트의 첫 번째 요소인 1이 two_times 함수의 입력값으로 들어가고, 1 * 2의 과정을 거쳐서 2가 된다. 다음으로 리스트의 두 번째 요소인 2가 2 * 2의 과정을 거쳐 4가 된다. 따라서 결과값 리스트는 이제 [2, 4]가 된다. 총 4개의 요소값이 모두 수행되면 최종적으로 [2, 4, 6, 8]이 리턴된다. 이것이 map 함수가 하는 일이다.\r\n\r\n(※ 위 예에서 map의 결과를 리스트로 보여 주기 위해 list 함수를 이용하여 출력하였다. 파이썬 2.7은 map의 결과가 리스트이므로 위 예에서 list 함수를 이용하여 리스트로 변환하지 않아도 된다.)\r\n\r\n앞의 예는 lambda를 사용하면 다음처럼 간략하게 만들 수 있다.\r\n\r\n>>> list(map(lambda a: a*2, [1, 2, 3, 4]))\r\n[2, 4, 6, 8]\r\nmap 함수 예를 하나 더 살펴보자.\r\n\r\n# map_test.py\r\ndef plus_one(x):\r\n    return x+1\r\nprint(list(map(plus_one, [1, 2, 3, 4, 5])))\r\n결과값: [2, 3, 4, 5, 6]\r\n위 예는 map과 plus_one 함수를 이용하여 리스트의 각 요소값을 1씩 증가시키는 예제이다.', NULL, '', 4, 0),
(2195, 'dale.seo', '', '', '2016-08-01 22:13:18', '', 'Python의 참 거짓 Boolean 판별', 'https://wikidocs.net/17\r\nhttps://docs.python.org/3/library/stdtypes.html#truth', NULL, '', 4, 0),
(2196, 'dale.seo', '', '', '2016-08-01 23:15:01', '', 'Python에서 Queue 사용하기', 'https://docs.python.org/3/tutorial/datastructures.html#using-lists-as-queues\r\nhttp://devsw.tistory.com/28\r\n\r\n일반 리스트와 pop(0) 조합을 사용할 수도 있지만 성능이 안 좋다고 함.\r\n따라서 deque를 임포트하여 popLeft() 펑션을 쓰는 걸 추천\r\n\r\n====================================================================\r\n>>> from collections import deque\r\n>>> queue = deque(["Eric", "John", "Michael"])\r\n>>> queue.append("Terry")           # Terry arrives\r\n>>> queue.append("Graham")          # Graham arrives\r\n>>> queue.popleft()                 # The first to arrive now leaves\r\n''Eric''\r\n>>> queue.popleft()                 # The second to arrive now leaves\r\n''John''\r\n>>> queue                           # Remaining queue in order of arrival\r\ndeque([''Michael'', ''Terry'', ''Graham''])\r\n\r\n====================================================================\r\nInverse Tree 예제 (https://leetcode.com/problems/invert-binary-tree/)\r\n====================================================================\r\nfrom collections import deque\r\n\r\nclass Solution(object):\r\n    def invertTree(self, root):\r\n        if not root:\r\n            return None\r\n        queue = deque([root])\r\n        while queue:\r\n            node = queue.popleft()\r\n            node.left, node.right = node.right, node.left\r\n            if node.left:\r\n                queue.append(node.left)\r\n            if node.right:\r\n                queue.append(node.right)\r\n        return root', NULL, '', 5, 0),
(2197, 'dale.seo', '', '', '2016-08-02 09:55:54', '', 'Firebase CLI', 'https://firebase.google.com/docs/cli/\r\n\r\n[ 연결된 Firebase App 확인 ]\r\n$ firebase use\r\n\r\n[ 연결된 Firebase App 변경 ]\r\n$ firebase use <콘솔의 app-id>\r\n\r\n[ Run a Local Web Server for Development ]\r\n$ npm install -g firebase-tools\r\n$ firebase serve', NULL, '', 9, 0),
(2198, 'dale.seo', '', '', '2016-08-02 21:38:30', '', 'Dictionary 자료구조', 'https://wikidocs.net/16\r\n\r\n\r\n# 팁\r\ndic[key] 을 사용하면 key 해당하는 값이 없을 때 에러가 난다.\r\nkey 해당하는 값이 있는지 없는지 확신이 없는 경우에는 dic.get(key)를 사용하면 된다.\r\ndic.get(key)는 값이 없을 경우에는 None을 리턴한다.\r\n\r\n\r\n# 순회 방법\r\n\r\nwebster = {\r\n	"Aardvark" : "A star of a popular children''s cartoon show.",\r\n    "Baa" : "The sound a goat makes.",\r\n    "Carpet": "Goes on the floor.",\r\n    "Dab": "A small amount."\r\n}\r\n\r\n# Add your code below!\r\nfor key in webster:\r\n    print webster[key]', NULL, '', 6, 0),
(2199, 'dale.seo', '', '', '2016-08-03 10:08:15', '', 'Firebase Hosting', '정적 리소스만 호스팅 가능함을 주의한다.\r\n\r\n===================================================================\r\nDeploy your Web App Using Firebase Hosting\r\n\r\nIf your web app is entirely static content, you can deploy it easily using Firebase Hosting.\r\n\r\nFirebase Hosting is developer-focused static web hosting for modern front-end web applications. Using Firebase Hosting, you can deploy SSL-enabled web apps to your own domain on a global content-delivery network (CDN) from a single command.', NULL, '', 3, 0),
(2200, 'dale.seo', '', '', '2016-08-03 23:25:02', '', 'Matcher 메서드 사용방법과 그룹 개념이해', 'http://sexy.pe.kr/tc/532', NULL, '', 3, 0),
(2201, 'dale.seo', '', '', '2016-08-04 09:56:53', '', 'Lookahead & Lookbehind', 'http://unlimitedpower.tistory.com/entry/%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D-%EC%9D%B4%EA%B2%83%EC%9D%B4-%EA%B3%A0%EA%B8%89%EC%9D%B4%EB%8B%A4-Positive-Negative-Lookahead-Lookbehind\r\n\r\nhttps://www.hackerrank.com/challenges/negative-lookahead\r\n\r\n바로 뒤나 앞에 나온 패턴이 있을 때 또는 없을 떄 매칭', NULL, '', 2, 0),
(2202, 'dale.seo', '', '', '2016-08-04 21:56:18', '', '정규식의 기본 (Concatenation, Repetition, Alternation, Negation)', 'package seo.dale.example.java.util.regex;\r\n\r\nimport org.junit.Test;\r\n\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\n\r\n/**\r\n * Concatenation, Repetition, Alternation, Negation\r\n */\r\npublic class BasicRegexTest {\r\n\r\n    public static final String TEXT = "Splitting a string, it''s as easy as 1 2 33!  Right?";\r\n\r\n    @Test\r\n    public void testConcatenation() {\r\n        Pattern pattern = Pattern.compile("it");\r\n        Matcher matcher = pattern.matcher(TEXT);\r\n\r\n        int cnt = 0;\r\n        String[] matches = {"it", "it"};\r\n\r\n        while (matcher.find()) {\r\n            assertEquals(matches[cnt], matcher.group());\r\n            cnt++;\r\n        }\r\n\r\n        assertEquals(matches.length, cnt);\r\n    }\r\n\r\n    @Test\r\n    public void testRepetitionOneOrMore() {\r\n        Pattern pattern = Pattern.compile("it+");\r\n        Matcher matcher = pattern.matcher(TEXT);\r\n\r\n        int cnt = 0;\r\n        String[] matches = {"itt", "it"};\r\n\r\n        while (matcher.find()) {\r\n            assertEquals(matches[cnt], matcher.group());\r\n            cnt++;\r\n        }\r\n\r\n        assertEquals(matches.length, cnt);;\r\n    }\r\n\r\n    @Test\r\n    public void testRepetitionZeroOrMore() {\r\n        Pattern pattern = Pattern.compile("it*");\r\n        Matcher matcher = pattern.matcher(TEXT);\r\n\r\n        int cnt = 0;\r\n        String[] matches = {"itt", "i", "i", "it", "i"};\r\n\r\n        while (matcher.find()) {\r\n            assertEquals(matches[cnt], matcher.group());\r\n            cnt++;\r\n        }\r\n\r\n        assertEquals(matches.length, cnt);\r\n    }\r\n\r\n    @Test\r\n    public void testAlternation() {\r\n        Pattern pattern = Pattern.compile("it|st");\r\n        Matcher matcher = pattern.matcher(TEXT);\r\n\r\n        int cnt = 0;\r\n        String[] matches = {"it", "st", "it"};\r\n\r\n        while (matcher.find()) {\r\n            assertEquals(matches[cnt], matcher.group());\r\n            cnt++;\r\n        }\r\n\r\n        assertEquals(matches.length, cnt);\r\n    }\r\n\r\n    @Test\r\n    public void testCharacterClasses() {\r\n        // Pattern pattern = Pattern.compile("[123]");\r\n        Pattern pattern = Pattern.compile("[1-3]"); // range\r\n        Matcher matcher = pattern.matcher(TEXT);\r\n\r\n        int cnt = 0;\r\n        String[] matches = {"1", "2", "3", "3"};\r\n\r\n        while (matcher.find()) {\r\n            assertEquals(matches[cnt], matcher.group());\r\n            cnt++;\r\n        }\r\n\r\n        assertEquals(matches.length, cnt);\r\n    }\r\n\r\n    @Test\r\n    public void testNegation() {\r\n        Pattern pattern = Pattern.compile("[^a-z1-3 ]"); // range\r\n        Matcher matcher = pattern.matcher(TEXT);\r\n\r\n        int cnt = 0;\r\n        String[] matches = {"S", ",", "''", "!", "R", "?"};\r\n\r\n        while (matcher.find()) {\r\n            assertEquals(matches[cnt], matcher.group());\r\n            cnt++;\r\n        }\r\n\r\n        assertEquals(matches.length, cnt);\r\n    }\r\n\r\n}\r\n', NULL, '', 7, 0),
(2203, 'dale.seo', '', '', '2016-08-04 22:50:15', '', '헷갈리는 정규식', 'https://regexper.com/#%5B1%2C2%2C3%5D\r\n\r\n[1,2,3]\r\n대괄호 안의 쉼표는 구분자가 아니다.\r\n\r\n[1-3]*\r\n모든 문자와 매칭된다.\r\n\r\n[1233]\r\n대괄호에 안에서 동일 문자 반복은 의미 없다. [123]과 동일', NULL, '', 7, 0),
(2204, 'dale.seo', '', '', '2016-08-04 23:19:11', '', '문자열 연결 시 주의사항', '자바에서 문자열은 immutable 객체이기 때문에 + 연산자나 concat 메서드 호출했을 때 원본 문자열은 바뀌지 않고 새로운 문자열을 리턴한다.\r\n따라서 아래와 같이 리턴된 문자열을 변수에 다시 할당해주지 않으면 원치않은 결과를 얻게 된다.\r\n\r\nString s = "Hello";\r\ns.concat(" World!");\r\nSystem.out.println(s); // Hello', NULL, '', 2, 0),
(2205, 'dale.seo', '', '', '2016-08-05 08:56:17', '', 'Add Firebase to your Web Project', 'https://firebase.google.com/docs/web/setup\r\n\r\n웹콘솔에서 scirpt 태그 복사해서 붙여넣으면 끝!', NULL, '', 4, 0),
(2206, 'dale.seo', '', '', '2016-08-05 09:25:56', '', 'Firebase Realtime Database', 'https://firebase.google.com/docs/database/web/start\r\n\r\n\r\n[ 누구나 접근 가능하게 만들기 ]\r\nhttps://firebase.google.com/docs/database/security/quickstart#sample-rules\r\n====================\r\ndatabase.rules.json\r\n====================\r\n{\r\n  "rules": {\r\n    ".read": true,\r\n    ".write": true\r\n  }\r\n}\r\n\r\n\r\n[ 생성하기 ]\r\n      firebase.database().ref(''users'').push({\r\n        username: ''Dale Seo'',\r\n        email: ''dale.seo@gamil.com'',\r\n        profile_picture: ''http://www.profile.com''\r\n      });\r\n\r\n\r\n[ 수정하기 ]\r\n    firebase.database().ref(''users/-KObQi96IGBPUQv-PRMr'').set({\r\n      username: ''Kate Kim'',\r\n      email: ''kimrla3838@gmail.com'',\r\n      profile_picture: ''http://www.naver.com''\r\n    });\r\n\r\n\r\n[ 먼저 key를 얻은 다음에 수정하기 ]\r\n    var key = firebase.database().ref(''users'').push().key;\r\n\r\n    firebase.database().ref(''users'').child(key).set({\r\n      username: ''Kate Kim'',\r\n      email: ''kimrla3838@gmail.com'',\r\n      profile_picture: ''http://www.naver.com''\r\n    });\r\n\r\n\r\n[ 삭제하기 ]\r\nfirebase.database().ref(''users'').child(''-KObVZMZD_SbjzpMa-O5'').remove();\r\n\r\n\r\n[ 동시에 여러개 수정하기 ]\r\n  var updates = {};\r\n  updates[''/posts/'' + newPostKey] = postData;\r\n  updates[''/user-posts/'' + uid + ''/'' + newPostKey] = postData;\r\n\r\n  return firebase.database().ref().update(updates);\r\n\r\n\r\n[ 레코디 일회성 조회 ]\r\n    firebase.database().ref(''/users'').once(''value'').then(function(snapshot) {\r\n      var username = snapshot.val()[''-KOberDJK0WeYwWa-W1k''].username;\r\n      alert(username);\r\n    });\r\n\r\n[ 레코드 생성 리스닝 ]\r\n    firebase.database().ref(''users'').on(''child_added'', function (data) {\r\n      alert(data.key + data.username);\r\n    });\r\n\r\n\r\n', NULL, '', 15, 0),
(2207, 'dale.seo', '', '', '2016-08-05 12:23:03', '', '자바 정규식 튜토리얼', 'http://www.tutorialspoint.com/java/java_regular_expressions.htm', NULL, '', 3, 0),
(2208, 'dale.seo', '', '', '2016-08-05 12:47:01', '', '** 연산자 (exponent operator) : power(승)', '#Set eggs equal to 100 using exponentiation on line 3!\r\n\r\neggs = 10 ** 2 # 10의 제곱\r\n\r\nprint eggs\r\n\r\n===========================================\r\n분산(Variance)으로 표준 편차(Standard Deviation) 구하기\r\n===========================================\r\nstandard_deviation = variance ** 0.5 # Square Root', NULL, '', 13, 0),
(2209, 'dale.seo', '', '', '2016-08-05 13:07:01', '', '파이썬의 문자열', '별도 처리 없이 바로 리스트처럼 [index]로 접근 가능하다.\r\n\r\n[ 스트링 관련 함수 ]\r\n# len()\r\n\r\nlen("Ryan") # 4\r\n\r\n# lower()\r\n\r\n"Ryan".lower() # ryan\r\n\r\n# upper()\r\n\r\n"Ryan".upper() # RYAN\r\n\r\n# str()\r\n\r\nstr(3.14) # "3.14"', NULL, '', 2, 0),
(2210, 'dale.seo', '', '', '2016-08-05 13:07:57', '', '파이썬에서 문자열과 숫자를 함께 출력할 때 주의사항', '아래와 같이 str 내장 함수를 사용해서 숫자를 문자열로 바꿔줘야 TypeErorr가 발생하지 않는다.\r\n\r\nprint "The value of pi is around " + str(3.14)', NULL, '', 2, 0),
(2212, 'dale.seo', '', '', '2016-08-06 11:57:05', '', 'ReactJS 입문 공부 자료', '안녕하세요~ \r\n저는 국내에 React.js를 많이 알리고싶은 React.js 개발자이자, 팬입니다.\r\n비록 전문가는 아니지만 어쩌다보니 Webframeworks.kr 에서 진행하는 React.js 세미나를 진행하게됐어요!\r\n세미나의 내용은 React.js 를 처음 접하시는분들을 대상으로 React.js 의 핵심개념과, Express.js 와 MongoDB를 통하여 Backend 서버를 구축하는 방법을 배우고 최종적으론 간단한 웹애플리케이션을 구현하는 것 입니다. (세미나는 모집인원이 이미 꽉 찼어요 ㅠㅠ)\r\nReact.js 를 최근에 입문하신 / 공부를 시작하고 싶으신분들께 도움이 될것같아서 자료를 공유합니다 :)\r\n1. 슬라이드: http://slides.com/minjunkim-1/deck\r\n2. 위 슬라이드의 텍스트형태 강좌는 https://velopert.com/reactjs-tutorials 에 있습니다\r\n3. 최종적으로 만들 프로젝트: https://memo.hoah.xyz/\r\n4. 작업환경 설정: https://velopert.com/1980\r\n5. 프로젝트 소스 코드: https://github.com/velopert/react-codelab-project\r\n6. 프로젝트 제작 강좌: https://velopert.com/tag/reactcodelab\r\n(슬라이드 부분은 설명이 많이 생략되어있기때문에.. 곧 동영상 형태로 만들 예정입니다)', NULL, '', 5, 0),
(2211, 'dale.seo', '', '', '2016-08-06 11:16:42', '', 'Python에서 무한대, 무한소', 'float(''inf'')\r\nfloat(''-inf'')\r\n\r\n\r\n예) 배열 앞 뒤에 무한소, 무한대 추가\r\nheaters = [float(''-inf'')] + heaters + [float(''inf'')]', NULL, '', 8, 0),
(2213, 'dale.seo', '', '', '2016-08-06 12:09:42', '', 'The datetime Library', 'from datetime import datetime\r\n\r\nnow = datetime.now()\r\n\r\nprint(now) # 2016-08-06 03:08:32.389537\r\nprint(now.year)  # 8\r\nprint(now.month) # 8\r\nprint(now.day) # 6\r\nprint(''%s/%s/%s'' % (now.month, now.day, now.year)) # 8/6/2016\r\nprint(''%s:%s:%s'' % (now.hour, now.minute, now.second)) # 3:17:27', NULL, '', 10, 0),
(2214, 'dale.seo', '', '', '2016-08-06 12:12:08', '', 'Python에서 printf 하는 2가지 방법', 'sub1, sub2 = ''world'', ''earth''\r\n\r\nprint ("hello %s and %s" % (sub1, sub2))\r\nprint ("hello {} and {}".format(sub1, sub2))', NULL, '', 9, 0),
(2215, 'dale.seo', '', '', '2016-08-06 12:30:25', '', 'Python Boolean Operators', '실행 우선순위가 있음에 주의 (not > and > or)\r\n\r\nThis and That (or This, But Not That!)\r\nBoolean operators aren''t just evaluated from left to right. Just like with arithmetic operators, there''s an order of operations for boolean operators:\r\n\r\nnot is evaluated first;\r\nand is evaluated next;\r\nor is evaluated last.\r\nFor example, True or not False and False returns True. If this isn''t clear, look at the Hint.\r\n\r\nParentheses () ensure your expressions are evaluated in the order you want. Anything in parentheses is evaluated as its own unit.', NULL, '', 2, 0),
(2216, 'dale.seo', '', '', '2016-08-06 15:12:16', '', '최소공배수 least common multiple, 최대공약수 greatest common divisor', 'https://www.mathsisfun.com/least-common-multiple.html\r\nhttps://www.mathsisfun.com/greatest-common-factor.html', NULL, '', 8, 0),
(2217, 'dale.seo', '', '', '2016-08-08 13:17:45', '', 'ASW RDS MySQL 접속 거부 당할 때', 'Security Group 설정을 0.0.0.0/0으로 해야한다.', NULL, '', 2, 0),
(2218, 'dale.seo', '', '', '2016-08-09 12:01:46', '', 'Big O를 영어로 읽는 방법', '관사 필요 없음\r\nO(n)은 Big-O of n 또는 Order n 이라고 읽으면 됨\r\n\r\n# A = O(n)\r\nA is Big-O of n.\r\n\r\n\r\n# 3n^2 + 4 = O(n^2)\r\nThree n squared plus 4 is Big-O of n squared.\r\n\r\n# n^2 - 10000 = O(n^2)\r\nn squared minus ten thousand equals big O of n squared.\r\n\r\n# O(n*log(n))\r\nbig O of n times log n\r\n\r\n# log2(n)\r\nlog base 2 of n', NULL, '', 19, 0),
(2219, 'dale.seo', '', '', '2016-08-09 12:13:51', '', 'asymptotic analysis / Asymptotics / Big-O classes 관련 용어', 'O(1)\r\n- It''s Order 1.\r\n- It''s constant time.\r\n- It runs in constant time.\r\n- It scales constantly with the input size.\r\n- This segment of code is Big-O of 1.\r\n- So we have a Big-O of 1 algorithm.\r\n- So we have a constant algorithm.\r\n\r\nO(log(n))\r\n- It runs in logarithmic time.\r\n\r\nO(n)\r\n- It''s Order n.\r\n- It''s linear time.\r\n- It''s running time is linear time.\r\n- It scales linearly with the input size.\r\n- This for loop is Big-O of n.\r\n- So we have a Big-O of n algorithm.\r\n- So we have a linear algorithm.\r\n\r\nO(n^2)\r\n- It runs in quadratic time.\r\n- it runs in big O of n squared time\r\n- So we have is a quadratic algorithm. \r\n\r\nO(n^3)\r\n- big O of n cubed\r\n- Order n cubed\r\n\r\n기타\r\n- big O of n squared grows faster than big O of n times log n.\r\n- big O of n grows more slowly than big O of n times log n.', NULL, '', 43, 0),
(2220, 'dale.seo', '', '', '2016-08-09 13:01:50', '', '모듈 내의 모든 함수/변수 보기', 'import math            # Imports the math module\r\neverything = dir(math) # Sets everything to a list of things from math\r\nprint everything       # Prints ''em all!', NULL, '', 2, 0),
(2221, 'dale.seo', '', '', '2016-08-09 13:04:42', '', '모듈 임포트 방법', '모듈 이름을 적어주는 게 귀찮더라도 네임 스페이스 충돌 방지를 위해 Generic Imports를 권장.\r\n해당 함수가 너무 자주 쓰인다면 Function Imports를 사용할 것.\r\nUniversal Imports는 가급적 피한다.\r\n\r\n# Generic Imports\r\n\r\nimport math\r\nmath.sqrt(25)\r\n\r\n\r\n# Function Imports\r\n\r\nfrom math import sqrt\r\nsqrt(25)\r\n\r\n\r\n# Universal Imports\r\n\r\nfrom math import *\r\nsqrt(25)', NULL, '', 5, 0),
(2222, 'dale.seo', '', '', '2016-08-10 11:28:02', '', 'HTTP KeepAlive 설명 끝판왕', 'https://varvy.com/pagespeed/keep-alive.html', NULL, '', 2, 0),
(2223, 'dale.seo', '', '', '2016-08-10 12:44:37', '', '로그 관련 공식', 'log a(b) = log c(a)/log c(b)\r\n\r\nex) log10(n) = log2(n)/log2(10)\r\n\r\n=> 따라서 log10(n) 그래프가 log2(n) 그래프보다 1/log2(10) 만큼 천천히 증가하는 것을 알 수 있다', NULL, '', 4, 0),
(2224, 'dale.seo', '', '', '2016-08-10 13:02:00', '', '수열 공식', '# Gauss Summation\r\n1 + 2 + 3 + ... + (n-2) + (n-1) = n(n-1)/2 = O(n^2)\r\n1 + 2 + 3 + ... + (n-2) + (n-1) + n = n(n+1)/2 = O(n^2)\r\n맨 앞과 맨 뒤 짝을 이뤄 계속 더하면 됨', NULL, '', 10, 0),
(2225, 'dale.seo', '', '', '2016-08-10 15:49:41', '', '로깅 자체에 대한 단위 테스트 (ArgumentCaptor) 1', '# Mockito의 ArgumentCaptor 활용\r\nhttp://stackoverflow.com/questions/38121652/testing-that-a-logback-log-statment-was-called-using-junit\r\n\r\n# Mockito의 ArgumentMatcher 활용\r\nhttps://jsoftbiz.wordpress.com/2011/11/29/unit-testing-asserting-that-a-line-was-logged-by-logback/\r\n\r\n# 특수 어팬더 구현\r\nhttps://www.thekua.com/atwork/2011/11/testing-logging-with-logback/\r\nhttp://www.thekua.com/atwork/2011/11/general-testing-approach-for-logging-in-java/\r\n\r\n\r\n\r\n=====================================================================================\r\npackage com.skplanet.storeplatform.framework.log.servlet;\r\n\r\nimport ch.qos.logback.classic.Level;\r\nimport ch.qos.logback.classic.Logger;\r\nimport ch.qos.logback.classic.spi.LoggingEvent;\r\nimport ch.qos.logback.core.Appender;\r\nimport com.skplanet.storeplatform.framework.web.filter.log.WebLoggingStyle;\r\nimport com.skplanet.storeplatform.framework.web.util.ContentKeepingRequestWrapper;\r\nimport com.skplanet.storeplatform.framework.web.util.ContentKeepingResponseWrapper;\r\nimport org.junit.After;\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\nimport org.mockito.ArgumentCaptor;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.http.MediaType;\r\nimport org.springframework.mock.web.MockHttpServletRequest;\r\nimport org.springframework.mock.web.MockHttpServletResponse;\r\n\r\nimport java.io.ByteArrayInputStream;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\nimport static org.mockito.Mockito.mock;\r\nimport static org.mockito.Mockito.verify;\r\n\r\n/**\r\n * Appender Mock 객체를 이용하여 실제 로깅되는 문자열까지 검증한다.\r\n * @author 서대영(DAEYOUNG SEO)/Onestore/SKP\r\n */\r\npublic class ServletLoggerTest {\r\n\r\n	private ServletLogger servletLogger;\r\n	private Appender mockAppender;\r\n	private ArgumentCaptor<Appender> argumentCaptor;\r\n\r\n	@Before\r\n	public void setUp() {\r\n		servletLogger = new ServletLogger("com.skplanet.storeplatform.framework", "info", true, 100, WebLoggingStyle.CURL);\r\n		mockAppender = mock(Appender.class);\r\n		argumentCaptor = ArgumentCaptor.forClass(Appender.class);\r\n\r\n		Logger logbackLogger = (Logger) LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME);\r\n		logbackLogger.detachAndStopAllAppenders();\r\n		logbackLogger.addAppender(mockAppender);\r\n	}\r\n\r\n	@Test\r\n	public void logRequest() {\r\n		String content = "{\\n" +\r\n				"  \\"id\\": 123,\\n" +\r\n				"  \\"name\\": \\"Dale Seo\\",\\n" +\r\n				"  \\"email\\": \\"dale.seo@sk.com\\"\\n" +\r\n				"}";\r\n\r\n		MockHttpServletRequest request = new MockHttpServletRequest("POST", "/test1/test2");\r\n		request.setQueryString("key1=val1&key2=val2");\r\n		request.setProtocol("HTTP/1.1");\r\n\r\n		request.addHeader("User-Agent", "Mozilla/4.0 (compatible; MSIE5.01; Windows NT)");\r\n		request.addHeader("Host", "www.someclient.com");\r\n		request.addHeader("Content-Type", "application/json;charset=UTF-8");\r\n		request.addHeader("Content-Length", "67");\r\n		request.addHeader("Accept", "application/json;charset=UTF-8");\r\n		request.setContent(content.getBytes());\r\n\r\n		// Log Request\r\n		servletLogger.logRequest(new ContentKeepingRequestWrapper(request));\r\n\r\n		verify(mockAppender).doAppend(argumentCaptor.capture());\r\n\r\n		LoggingEvent loggingEvent = (LoggingEvent) argumentCaptor.getValue();\r\n\r\n		String logMessage = loggingEvent.getFormattedMessage();\r\n\r\n		System.out.println(logMessage);\r\n\r\n		Scanner scanner = new Scanner(new ByteArrayInputStream(logMessage.getBytes()));\r\n		assertEquals("[[SERVER_REQUEST_LOGGING]]", scanner.nextLine());\r\n		assertEquals("POST http://localhost/test1/test2&key1=val1&key2=val2 HTTP/1.1", scanner.nextLine());\r\n		assertEquals("> User-Agent: Mozilla/4.0 (compatible; MSIE5.01; Windows NT)", scanner.nextLine());\r\n		assertEquals("> Host: www.someclient.com", scanner.nextLine());\r\n		assertEquals("> Content-Type: application/json;charset=UTF-8", scanner.nextLine());\r\n		assertEquals("> Content-Length: 67", scanner.nextLine());\r\n		assertEquals("> Accept: application/json;charset=UTF-8", scanner.nextLine());\r\n		assertEquals("{", scanner.nextLine());\r\n		assertEquals("  \\"id\\": 123,", scanner.nextLine());\r\n		assertEquals("  \\"name\\": \\"Dale Seo\\",", scanner.nextLine());\r\n		assertEquals("  \\"email\\": \\"dale.seo@sk.com\\"", scanner.nextLine());\r\n		assertEquals("}", scanner.nextLine());\r\n		scanner.close();\r\n	}\r\n\r\n	@Test\r\n	public void logResponse() throws IOException {\r\n		MockHttpServletRequest request = new MockHttpServletRequest();\r\n		request.setProtocol("HTTP/1.1");\r\n\r\n		String content = "{\\n" +\r\n				"  \\"errorCode\\": 100001,\\n" +\r\n				"  \\"errorMessage\\": \\"Unknown Problem\\"\\n" +\r\n				"}";\r\n\r\n		ContentKeepingResponseWrapper response = new ContentKeepingResponseWrapper(new MockHttpServletResponse());\r\n		response.setStatus(200);\r\n		response.setContentType(MediaType.APPLICATION_JSON_UTF8_VALUE);\r\n		response.setContentLength(content.length());\r\n\r\n		PrintWriter out = response.getWriter();\r\n		out.print(content);\r\n		out.flush();\r\n		out.close();\r\n\r\n		// Log Response\r\n		servletLogger.logResponse(request, response);\r\n\r\n		verify(mockAppender).doAppend(argumentCaptor.capture());\r\n\r\n		LoggingEvent loggingEvent = (LoggingEvent) argumentCaptor.getValue();\r\n\r\n		String logMessage = loggingEvent.getFormattedMessage();\r\n\r\n		System.out.println(logMessage);\r\n\r\n		Scanner scanner = new Scanner(new ByteArrayInputStream(logMessage.getBytes()));\r\n		assertEquals("[[SERVER_RESPONSE_LOGGING]]", scanner.nextLine());\r\n		assertEquals("HTTP/1.1 200 OK", scanner.nextLine());\r\n		assertEquals("> Content-Type: application/json;charset=UTF-8", scanner.nextLine());\r\n		assertEquals("> Content-Length: 62", scanner.nextLine());\r\n		assertEquals("{", scanner.nextLine());\r\n		assertEquals("  \\"errorCode\\": 100001,", scanner.nextLine());\r\n		assertEquals("  \\"errorMessage\\": \\"Unknown Problem\\"", scanner.nextLine());\r\n		assertEquals("}", scanner.nextLine());\r\n		scanner.close();\r\n	}\r\n\r\n	@After\r\n	public void tearDown() {\r\n		LoggingEvent loggingEvent = (LoggingEvent) argumentCaptor.getValue();\r\n		assertEquals("com.skplanet.storeplatform.framework", loggingEvent.getLoggerName());\r\n		assertEquals(Level.INFO, loggingEvent.getLevel());\r\n	}\r\n\r\n}', NULL, '', 29, 0),
(2226, 'dale.seo', '', '', '2016-08-10 22:15:25', '', 'Python에서 타입 체크', 'def is_numeric(num):\r\n    return type(num) == int or type(num) == float:', NULL, '', 3, 0),
(2227, 'dale.seo', '', '', '2016-08-11 10:02:26', '', 'Firebase Database REST API', 'https://firebase.google.com/docs/database/rest/retrieve-data\r\nhttps://firebase.google.com/docs/database/rest/save-data\r\nhttps://firebase.google.com/docs/reference/rest/database/\r\n\r\n\r\n[[ 특징 ]]\r\n- .json 확장자만 붙이면 어떤 Content-type이나 Accept 헤더를 사용해도 상관없음\r\n- 응답 HTTP Status는 성공하면 무조건 200 OK, 실패하면 무조건 400 Bad Request\r\n- DELETE는 응답 바디가 없으므로 HTTP Status로 성공 여부 판단할 것\r\n\r\n\r\n[[ GET ]]\r\n\r\n# 다큐먼트 조회\r\n\r\ncurl ''https://first-643b7.firebaseio.com/posts.json?print=pretty''\r\n\r\n# 키에 따라 정렬 후 a~m 까지만 필터링\r\n\r\ncurl ''https://dinosaur-facts.firebaseio.com/dinosaurs.json?orderBy="$key"&startAt="a"&endAt="m"&print=pretty''\r\n\r\n# 값에 다라 정렬 (경로 자체가 다큐먼트가 아니라 값인 경우)\r\n\r\ncurl ''https://dinosaur-facts.firebaseio.com/scores.json?orderBy="$value"&startAt=50&print=pretty''\r\n\r\n# 마지막 또는 처음 몇개만 필터링\r\n\r\ncurl ''https://dinosaur-facts.firebaseio.com/dinosaurs.json?orderBy="weight"&limitToLast=2&print=pretty''\r\ncurl ''https://dinosaur-facts.firebaseio.com/dinosaurs.json?orderBy="height"&limitToFirst=2&print=pretty''\r\ncurl ''https://dinosaur-facts.firebaseio.com/scores.json?orderBy="$value"&limitToLast=3&print=pretty''\r\n\r\n\r\n# Range 필터링 (주의 : inclusive)\r\n## 신장이 3 이상인 공룡들만 조회\r\ncurl ''https://dinosaur-facts.firebaseio.com/dinosaurs.json?orderBy="height"&startAt=3&print=pretty''\r\n\r\n## 키가 pterodactyl 보다 사전적으로 전에있는 공룔들만 조회\r\ncurl ''https://dinosaur-facts.firebaseio.com/dinosaurs.json?orderBy="$key"&endAt="pterodactyl"&print=pretty''\r\n\r\n## startAt과 endAt을 함께 사용하면 페이징 처리가 가능\r\ncurl ''https://dinosaur-facts.firebaseio.com/dinosaurs.json?orderBy="$key"&startAt="b"&endAt="b\\uf8ff"&print=pretty''\r\n\r\n[[ POST ]]\r\n\r\n# 다큐먼트 추가\r\n\r\ncurl -v -X POST -d ''{\r\n  "author": "alanisawesome",\r\n  "title": "The Turing Machine"\r\n}'' ''https://first-643b7.firebaseio.com/posts.json''\r\n\r\n{"name":"-KOqpKmWvAkn5f95zmIW"}\r\n\r\n\r\n[[ DELETE ]]\r\n\r\n# 다큐먼트 삭제\r\n\r\ncurl -v -X DELETE ''https://first-643b7.firebaseio.com/posts/-KOqpKmWvAkn5f95zmIW.json''\r\n\r\nnull\r\n\r\n\r\n[[ PUT ]]\r\n\r\n# 다큐먼트 전체 변경 (넘기지 않은 필드는 사라지므로 주의)\r\n\r\ncurl -v -X PUT -d ''{\r\n  "author": "Kate Kim",\r\n  "title": "Oracle Bad"\r\n}'' ''https://first-643b7.firebaseio.com/posts/-KOqp8RfTtd6KbdVv24d.json''\r\n\r\n{"author":"Kate Kim","title":"Oracle Bad"}\r\n\r\n# 다큐먼트 일부 필드 변경\r\n\r\ncurl -v -X PUT -d ''"Firebase Awesome"'' ''https://first-643b7.firebaseio.com/posts/-KOqp8RfTtd6KbdVv24d/title.json''\r\n\r\n# 다큐먼트에 없던 필드 추가\r\n\r\ncurl -v -X PUT -d ''35'' ''https://first-643b7.firebaseio.com/posts/-KOqp8RfTtd6KbdVv24d/age.json''\r\n\r\n"Firebase Awesome"\r\n\r\n[[ PATCH ]]\r\n\r\n# 다큐먼트 덮어쓰기 (다른 필드는 건드리지 않으므로 PUT 보다 안전)\r\n\r\ncurl -v -X PATCH -d ''{\r\n  "description": "Alan The Machine"\r\n}'' ''https://first-643b7.firebaseio.com/posts/-KOqp8RfTtd6KbdVv24d.json''\r\n\r\n{"description":"Alan The Machine"}\r\n\r\n# 여러 다큐먼트 덮어쓰기 (필드의 전체 경로를 다 적어줄 것)\r\n\r\ncurl -v -X PATCH -d ''{\r\n  "-KOqp8RfTtd6KbdVv24d/nickname": "Cake",\r\n  "-KOqp8RfTtd6KbdVv24e/nickname": "Pie"\r\n}'' ''https://first-643b7.firebaseio.com/posts.json''\r\n\r\n{"-KOqp8RfTtd6KbdVv24d":{"nickname":"Cake"},"-KOqp8RfTtd6KbdVv24e":{"nickname":"Pie"}}', NULL, '', 3, 0),
(2264, 'dale.seo', '', '', '2016-08-25 14:44:40', '', 'ConsoleAppender를 프로그램적으로 Logger에 세팅하기', 'http://www.programcreek.com/java-api-examples/index.php?api=ch.qos.logback.core.ConsoleAppender\r\n\r\n\r\nprivate static void configureLogging()\r\n{\r\n	LoggerContext loggerContext = (LoggerContext) LoggerFactory.getILoggerFactory();\r\n\r\n	PatternLayoutEncoder patternLayoutEncoder = new PatternLayoutEncoder();\r\n	patternLayoutEncoder.setPattern("%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n");\r\n	patternLayoutEncoder.setContext(loggerContext);\r\n	patternLayoutEncoder.start();\r\n\r\n	ConsoleAppender<ILoggingEvent> consoleAppender = new ConsoleAppender<>();\r\n	consoleAppender.setContext(loggerContext);\r\n	consoleAppender.setEncoder(patternLayoutEncoder);\r\n	consoleAppender.setName("STDOUT");\r\n	consoleAppender.start();\r\n\r\n	Logger rootLogger = (Logger) LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME);\r\n	rootLogger.addAppender(consoleAppender);\r\n	rootLogger.setLevel(Level.WARN);\r\n\r\n	Logger molgenisLogger = (Logger) LoggerFactory.getLogger("org.molgenis");\r\n	molgenisLogger.addAppender(consoleAppender);\r\n	molgenisLogger.setLevel(Level.INFO);\r\n	molgenisLogger.setAdditive(false);\r\n}', NULL, '', 2, 0),
(2228, 'dale.seo', '', '', '2016-08-11 19:29:49', '', 'Dictionary에서 key-value 쌍 삭제하기', 'del 연산자를 사용하면 됨\r\n\r\ndel zoo_animals[''Unicorn'']', NULL, '', 2, 0),
(2229, 'dale.seo', '', '', '2016-08-12 08:59:41', '', 'NodeJS에서 다른 REST API 호출하는 방법', 'http://stackoverflow.com/questions/30149327/can-node-js-make-a-restful-service-call', NULL, '', 2, 0),
(2230, 'dale.seo', '', '', '2016-08-12 12:03:26', '', '정렬 알고리즘 성능 비교 (Sorting Algorithm Performance)', 'https://en.wikipedia.org/wiki/Sorting_algorithm\r\n\r\n\r\n# Selection Sort (선택 정렬)\r\n : 기 정렬 여부와 관계없이 동일한 연산량\r\n - Best Case = Average Case = Worst Case = O(n^2)\r\n\r\n# Insertion Sort (삽입 정렬)\r\n : 기 정렬의 경우, 내부 루프는 수행 X\r\n - Best Case = O(n)\r\n - Worst Case = Average Case = O(n^2)\r\n\r\n# Merge Sort (병합 정렬)\r\n - Best Case = Average Case = Worst Case = O(n log n)\r\n\r\n# Quick Sort (퀵 정렬)\r\n - Best Case = Average Case = O(n log n)\r\n - Worst Case = O(n^2)', NULL, '', 22, 0),
(2231, 'dale.seo', '', '', '2016-08-12 13:31:39', '', '자바에서 O/S 별로 상이한 줄바꿈 기호 얻기', 'http://stackoverflow.com/questions/32276333/line-separator-in-java-n-io\r\n\r\nSystem.lineSeparator()\r\n\r\n또는 \r\n\r\nSystem.getProperty("line.separator") \r\n', NULL, '', 2, 0),
(2232, 'dale.seo', '', '', '2016-08-13 19:49:34', '', '리스트에서 엘리먼트 삭제하는 3가지 방법', 'Removing elements from lists\r\nThis exercise will expand on ways to remove items from a list. You actually have a few options. For a list called n:\r\n\r\n1) n.pop(index) will remove the item at index from the list and return it to you:\r\nn = [1, 3, 5]\r\nn.pop(1)\r\n# Returns 3 (the item at index 1)\r\nprint n\r\n# prints [1, 5]\r\n\r\n2) n.remove(item) will remove the actual item if it finds it:\r\nn.remove(1)\r\n# Removes 1 from the list,\r\n# NOT the item at index 1\r\nprint n\r\n# prints [3, 5]\r\n\r\n3) del(n[1]) is like .pop in that it will remove the item at the given index, but it won''t return it:\r\ndel(n[1])\r\n# Doesn''t return anything\r\nprint n\r\n# prints [1, 5]', NULL, '', 3, 0),
(2233, 'dale.seo', '', '', '2016-08-14 17:09:19', '', '리스트에 *, + 연산자 사용하기', '[[ 0으로 리스트 초기화 하기 ]]\r\nlst = [0] * 100\r\n\r\n[[ 두 개의 리스트를 합치는 방법 ]]\r\na = [1, 2, 3]\r\nb = [4, 5, 6]\r\nprint a + b\r\n# prints [1, 2, 3, 4, 5, 6]', NULL, '', 4, 0),
(2234, 'dale.seo', '', '', '2016-08-14 17:22:49', '', '랜덤 모듈', '# random.randint(a, b) : [a, b] 사이 난수 발생\r\n# random.randrange(a, b) : [a, b) 사이 난수 발생\r\n# random.randint(a, b) = random.randrange(a, b + 1)\r\n# random.shuffle(list) : 리스트를 섞어줌 (넘겨준 list를 변경하고, 리턴값은 None) \r\n# random.choice(list) : 리스트에서 랜담하게 하나의 엘리먼트만 리턴\r\n\r\n\r\nimport random\r\n\r\ndef random_row(board):\r\n    return random.randint(0, len(board) - 1)', NULL, '', 15, 0),
(2235, 'dale.seo', '', '', '2016-08-14 18:02:51', '', 'while - else', 'while - else 문에서 else 절이 의미없다고 생각할 수 있지만,\r\nwhile 절에서 break로 루프를 빠져나간 경우 else 절이 실행 안 된다.\r\n\r\n==========================================================================\r\nimport random\r\n\r\nprint "Lucky Numbers! 3 numbers will be generated."\r\nprint "If one of them is a ''5'', you lose!"\r\n\r\ncount = 0\r\nwhile count < 3:\r\n    num = random.randint(1, 6)\r\n    print num\r\n    if num == 5:\r\n        print "Sorry, you lose!"\r\n        break\r\n    count += 1\r\nelse:\r\n    print "You win!"', NULL, '', 3, 0),
(2236, 'dale.seo', '', '', '2016-08-14 18:50:00', '', 'Big O Notation 개념', 'https://www.interviewcake.com/article/java/big-o-notation-time-and-space-complexity', NULL, '', 2, 0),
(2237, 'dale.seo', '', '', '2016-08-14 18:51:08', '', '자바로 알고리즘별 정렬 구현', 'http://www.java2novice.com/java-sorting-algorithms/\r\nhttps://www.cs.cmu.edu/~adamchik/15-121/lectures/Sorting%20Algorithms/sorting.html', NULL, '', 5, 0),
(2238, 'dale.seo', '', '', '2016-08-14 19:24:45', '', '삽입 정렬 Python 구현', ' - 이터레이션 마다 하나씩 정렬 범위를 늘려나감\r\n - 정렬 범위에 새롭게 들어온 원소와 기 정렬 범위에 있는 원소들을 역순으로 비교해 나가면서\r\n - 기 정렬 범위에 있는 원소가 더 크면 해당 원소를 뒤로 한 칸씩 시프트 시킴 (그래야 새롭게 들어온 원소를 삽입할 자리가 만들어 지기 때문에)\r\n - 기 정렬 범위에에서 새로운 원소보다 작은 원소를 만나면 그 자리 바로 뒤에 새로운 원소를 삽입\r\n - 0번째가 아닌 1번째 인덱스부터 루프를 돌림 (0번째는 앞에 비교 대상이 없기 때문)\r\n - 이미 정렬된 경우, 중첩된 루프가 돌지 않으므로 O(n)의 성능을 보여줌\r\n\r\n==================================================================================\r\ndef insertion_sort(arr):\r\n    for i in range(1, len(arr)):\r\n        to_insert = arr[i]\r\n        j = i\r\n        while j > 0 and arr[j - 1] > to_insert:\r\n            arr[j] = arr[j - 1]  # shift the greater element to the right by 1\r\n            j -= 1\r\n        arr[j] = to_insert  # insert the new element after the less element.\r\n    return arr\r\n\r\n==================================================================================\r\n# swap each time\r\ndef insertion_sort(arr):\r\n    for i in range(1, len(arr)):\r\n        j = i\r\n        while j > 0 and arr[j - 1] > arr[j]:\r\n            arr[j - 1], arr[j] = arr[j], arr[j - 1]\r\n            j -= 1\r\n    return arr', NULL, '', 21, 0),
(2239, 'dale.seo', '', '', '2016-08-14 20:05:35', '', '병합 정렬 Python 구현', '자바 구현처럼 index로 조작하지 않고, 실제로 리스트를 나누었다가 다시 합친다. Python은 그게 쉬우니까\r\n\r\n\r\ndef merge_sort(arr):\r\n    if not arr:\r\n        return None\r\n    length = len(arr)\r\n    if length == 1:\r\n        return arr\r\n    mid = length // 2\r\n    first_half = merge_sort(arr[0:mid])\r\n    second_half = merge_sort(arr[mid:length])\r\n    return merge(first_half, second_half)\r\n\r\n\r\ndef merge(first, second):\r\n    arr = []\r\n    f_idx = s_idx = 0\r\n    while f_idx < len(first) and s_idx < len(second):\r\n        if first[f_idx] < second[s_idx]:\r\n            arr.append(first[f_idx])\r\n            f_idx += 1\r\n        else:\r\n            arr.append(second[s_idx])\r\n            s_idx += 1\r\n    if f_idx == len(first):\r\n        arr += second[s_idx:len(second)]\r\n    else:\r\n        arr += first[f_idx:len(first)]\r\n    return arr', NULL, '', 3, 0),
(2240, 'dale.seo', '', '', '2016-08-15 09:52:50', '', '한 줄에 출력하는 방법', 'http://stackoverflow.com/questions/12032214/python-3-print-new-output-on-same-line\r\n\r\n# end 속성 활용\r\nfor i in range(1, 11):\r\n  print(i, end='''')\r\n\r\n# join 함수 사용\r\nprint(''''.join(map(str,range(1,11))))', NULL, '', 2, 0),
(2241, 'dale.seo', '', '', '2016-08-15 09:59:39', '', '내장함수 zip', '2개 이상의 리스트를 길이가 짧은 것 기준으로 원소들을 짝지어줌\r\n\r\nlist_a = [3, 9, 17, 15, 19]\r\nlist_b = [2, 4, 8, 10, 30, 40, 50, 60, 70, 80, 90]\r\n\r\nfor a, b in zip(list_a, list_b):\r\n    # Add your code here!\r\n    print max(a, b)', NULL, '', 1, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(2242, 'dale.seo', '', '', '2016-08-16 17:01:58', '', 'Fork 브랜치 싱크를 로컬에서 수동으로 맞추기', 'https://help.github.com/articles/configuring-a-remote-for-a-fork/\r\nhttps://help.github.com/articles/syncing-a-fork/\r\n\r\n일단 로컬 브랜치에 Fork와 Original 브랜치를 모두 연결해야 한다.\r\n$ git remote add origin <FORK_URL>\r\n$ git remote add upstream <ORIGINAL_URL>\r\n\r\nOriginal 브랜치로 부터 최신 Commits를 받아와서 로컬 브랜치에 머지한다.\r\n$ git fetch upstream\r\n$ git checkout master\r\n$ git merge upstream/master', NULL, '', 4, 0),
(2243, 'dale.seo', '', '', '2016-08-16 17:21:19', '', 'Apache Lang 의 MethodUtils', '메소드 이름을 문자열로 알고 있을 때 사용하면 좋다.\r\n리플렉션을 쌩으로 쓰는 것 보다 훨씬 낫지...\r\n\r\n============================================================================================\r\n로거를 문자열로 받은 레벨에 따라 호출\r\n============================================================================================\r\n    private void log(String format) {\r\n        try {\r\n            MethodUtils.invokeMethod(this.logger,\r\n                    StringUtils.lowerCase(this.accessLoggingConfiguration.getLoggingLevel()), format);\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n\r\n============================================================================================\r\npublic class MethodUtilsTest {\r\n\r\n	@Test\r\n	public void testInvokeMethod() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {\r\n		Dummy printer = new Dummy();\r\n		String reversed = (String) MethodUtils.invokeMethod(printer, "reverse", "ABCDE");\r\n		assertEquals("EDCBA", reversed);\r\n	}\r\n\r\n	@Test(expected = NoSuchMethodException.class)\r\n	public void testThrowNoSuchMethodException() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {\r\n		Dummy printer = new Dummy();\r\n		MethodUtils.invokeMethod(printer, "print2", "ABCDE");\r\n	}\r\n\r\n}\r\n\r\nclass Dummy {\r\n\r\n	public String reverse(String text) {\r\n		return new StringBuilder(text).reverse().toString();\r\n	}\r\n\r\n	private void print(String text) {\r\n		System.out.println(text);\r\n	}\r\n\r\n}', NULL, '', 3, 0),
(2244, 'dale.seo', '', '', '2016-08-16 21:48:14', '', 'list comprehension', '내부적으로 generator를 사용하는 걸 이해할 것!\r\n\r\n# 0~50 사이의 짝수의 제곱 리스트 만들기\r\n```\r\neven_squares_to_50 = [i ** 2 for i in range(51) if i % 2 == 0]\r\n```\r\n\r\n# list comprehenstion 중첩\r\n```\r\n>>> x = [(i, j) for i in range(10) for j in range(10)]\r\n>>> x\r\n[(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9), (6, 0), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (7, 0), (7, 1), (7, 2), (7, 3), (7, 4), (7, 5), (7, 6), (7, 7), (7, 8), (7, 9), (8, 0), (8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8), (8, 9), (9, 0), (9, 1), (9, 2), (9, 3), (9, 4), (9, 5), (9, 6), (9, 7), (9, 8), (9, 9)]\r\n```\r\n\r\n# Dictionary 만들기\r\n```\r\n>>> x = {i: len(i) for i in ["one", "two", "three", "four", "five"]}\r\n>>> x\r\n{''one'': 3, ''two'': 3, ''four'': 4, ''five'': 4, ''three'': 5}\r\n```\r\n\r\n# Generator 만들기 (tuple이 되지 않는 걸 주의하기)\r\n```\r\n>>> x = (i for i in range(5))\r\n>>> x\r\n<generator object <genexpr> at 0x7f86a2348a20>\r\n>>> for val in x:\r\n...   print(val)\r\n... \r\n0\r\n1\r\n2\r\n3\r\n4\r\n```', NULL, '', 18, 0),
(2245, 'dale.seo', '', '', '2016-08-16 21:57:39', '', 'List Slicing', '[[ List Slicing Syntax ]]\r\n\r\n[start:end:stride]\r\nWhere start describes where the slice starts (inclusive), end is where it ends (exclusive), and stride describes the space between items in the sliced list. For example, a stride of 2 would select every other item from the original list to place in the sliced list.\r\n\r\n[[ Omitting Indices ]]\r\nto_five = [''A'', ''B'', ''C'', ''D'', ''E'']\r\n\r\nprint to_five[3:]\r\n# prints [''D'', ''E''] \r\n\r\nprint to_five[:2]\r\n# prints [''A'', ''B'']\r\n\r\nprint to_five[::2]\r\n# print [''A'', ''C'', ''E'']\r\n\r\nprint to_five[::-1]\r\n# print [''E'', ''D'', ''C'', ''B'', ''A'']', NULL, '', 4, 0),
(2246, 'dale.seo', '', '', '2016-08-16 22:12:23', '', 'filter와 lambda', 'my_list = range(16)\r\nfilter(lambda x: x % 3 == 0, my_list)', NULL, '', 2, 0),
(2247, 'dale.seo', '', '', '2016-08-17 11:55:28', '', 'Python Bitwise Operations', 'print 5 >> 4  # Right Shift\r\nprint 5 << 1  # Left Shift\r\nprint 8 & 5   # Bitwise AND\r\nprint 9 | 4   # Bitwise OR\r\nprint 12 ^ 42 # Bitwise XOR\r\nprint ~88     # Bitwise NOT\r\n', NULL, '', 3, 0),
(2248, 'dale.seo', '', '', '2016-08-17 11:59:22', '', 'Python Base 2 Number System', '0과1로 이뤄진 숫자 앞에 0b를 붙이면 이진수가 된다.\r\n\r\nprint 0b1,    #1\r\nprint 0b10,   #2\r\nprint 0b11,   #3\r\nprint 0b100,  #4\r\nprint 0b101,  #5\r\nprint 0b110,  #6\r\nprint 0b111   #7\r\nprint "******"\r\nprint 0b1 + 0b11\r\nprint 0b11 * 0b11\r\n', NULL, '', 4, 0),
(2249, 'dale.seo', '', '', '2016-08-17 12:04:07', '', '10 진수를 2, 8, 16 진수 형태의 문자열로 출력', 'print(bin(10))\r\nprint(oct(10))\r\nprint(hex(10))\r\n\r\n\r\nprint(''{0:b}, {0:o}, {0:x}''.format(10))\r\nprint(''{0:#b}, {0:#o}, {0:#x}''.format(10))', NULL, '', 12, 0),
(2250, 'dale.seo', '', '', '2016-08-17 12:07:43', '', '2 진수 문자열을 10 진수 정수로 바꾸기', 'int() 내장 함수의 2번째 인자로 base 값을 넣으면 됨\r\n\r\nprint int("1",2)\r\nprint int("10",2)\r\nprint int("111",2)\r\nprint int("0b100",2)\r\nprint int(bin(5),2)', NULL, '', 4, 0),
(2251, 'dale.seo', '', '', '2016-08-17 12:24:25', '', 'Bitwise Not Operator의 의미', 'print ~1 # -2\r\nprint ~2 # -3\r\nprint ~3 # -4\r\nprint ~42 # -43\r\nprint ~123 # -143\r\n\r\n일을 더한 후 -를 붙인 거랑 같음', NULL, '', 3, 0),
(2252, 'dale.seo', '', '', '2016-08-17 17:03:58', '', 'HttpClient의 커넥션 관리 설명 끝판왕', 'http://www.baeldung.com/httpclient-connection-management\r\nhttp://hc.apache.org/httpcomponents-client-ga/tutorial/html/connmgmt.html\r\n', NULL, '', 7, 0),
(2253, 'dale.seo', '', '', '2016-08-17 17:04:47', '', 'HttpClient의 타임아웃 설명 끝판왕', 'http://www.baeldung.com/httpclient-timeout', NULL, '', 4, 0),
(2254, 'dale.seo', '', '', '2016-08-18 11:33:19', '', 'NoHttpResponseException과 StaleConnection', 'http://stackoverflow.com/questions/10558791/apache-httpclient-interim-error-nohttpresponseexception\r\nhttp://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/impl/conn/PoolingHttpClientConnectionManager.html#setValidateAfterInactivity(int)\r\nhttp://www.baeldung.com/httpclient-connection-management\r\n\r\nHttpClient의  커넥션풀(PoolingHttpClientConnectionManager)을 사용할 때, maxTotal과 DefaultMaxPerRoute를 너무 크게 잡았을 경우, 간혈적으로 NoHttpResponseException이 발생할 수 있다.\r\n이유는 커넥션풀에 쓰고 있는 커넥션보다 놀고 있는 커넥션이 많은 경우, 서버 측에서 연결을 끊어서 Stale(half-closed) Connection이 발생할 확률이 높기 때문이다.\r\n서버가 연결을 끊을 때, HttpClient에 친절하게 알려주는 경우는 별로 없는 듯...\r\n\r\n따라서 클라이언트 측에서 HttpClient를 통해 커넥션풀에서 커넥션을 꺼낼 때, 해당 커넥션이 Stale Connection 인지 아닌지 검증(validate)를 해줘야 한다.\r\n이를 위해 HttpClient4.4 버전부터 PoolingHttpClientConnectionManager#setValidateAfterInactivity를 제공한다.\r\n(그 전에는 RequestConfig#setStaleConnectionCheckEnabled를 사용했는데, 4.4 버전에서는 Deprecated 되었다.)\r\n\r\n어떻게 작동하냐면, 커넥션 풀에서는 커넥션을 꺼내 줄 때, 해당 커넥션인이 얼마나 오랫동안 놀고 있었는지를 체크한다.\r\n그 시간이 PoolingHttpClientConnectionManager#setValidateAfterInactivity를 통해 세팅한 값 (ms) 보다 크면 Stale Connection 인지 아닌지 검증(validate)를 한다.\r\n\r\n만약 Stale Connection이면 close 하고 다시 연결해주겠죠?\r\n\r\n===============================================================================================\r\n\r\nAPI 문서를 보니 setValidateAfterInactivity 설정과 더불어 PoolingHttpClientConnectionManager 생성자를 통해  TImeToLive 설정까지 해주면 도움이 될 것 같다. (기본값 5초)\r\nTImeToLive 설정과 ValidateAfterInactivity 설정이 정확히 어떻게 다른지는 잘 모르겠다.\r\n\r\n------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\nPoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager(1000, TimeUnit.MILLISECONDS);\r\n------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\nThe handling of stale connections was changed in version 4.4. Previously, the code would check every connection by default before re-using it. The code now only checks the connection if the elapsed time since the last use of the connection exceeds the timeout that has been set. The default timeout is set to 5000ms - see PoolingHttpClientConnectionManager(HttpClientConnectionOperator, HttpConnectionFactory, long, TimeUnit)\r\n\r\n\r\n========================================================================================================\r\n안녕하세요. 서대영입니다.\r\n\r\nNoHttpResponseException 관련하여 HttpClient 버전업 이후 추가 조치 관련해서 공유드립니다.\r\n\r\n커넥션풀의 사이즈가 실제 어플리케이션에서 필요한 사이즈보다 많이 클 경우에 풀에서 오랫동안 놀고있는 커넥션들이 발생하게 됩니다.\r\n클라이언트 측에서 장기간 놀고있는 커넥션들에 대해서는 서버 측에서 일방적으로 연결을 닫기 때문에 이런 커넥션들을 Stale(Half-closed) Connection이라고 합니다.\r\n이를 방지하기 위해서, 커넥션풀에서 커넥션을 꺼내주기 전에 Stale Connection 여부를 검증해주는 설정을 추가하여 PR을 생성하였습니다.\r\n\r\nhttp://bitbucket.skplanet.com/projects/SDT/repos/storeplatform-ccs/pull-requests/945/overview\r\n\r\n참고로 위 설정에 대한 side effect로 커넥션 획득에 약간(50ms)의 지연이 발생할 수 있다고 합니다.\r\n이상적인 조치는 커넥션풀 내에서 오랫동안 놀고 있는 커넥션이 발생하지 않도록, 운영하면서 적당하게 풀 사이즈 설정을 조정해주는 것입니다.\r\nrest.{profile}.properties 파일에서 maxTotalConnections, maxConnectionsPerRoute값을 변경해주시면 되겠습니다.\r\n\r\n감사합니다. 수고하세요.', NULL, '', 15, 0),
(2255, 'dale.seo', '', '', '2016-08-19 12:40:00', '', 'Python Inheritance(상속) 문법', 'class DerivedClass(BaseClass):\r\n    # code goes here\r\n\r\n\r\n\r\n==============================================================\r\nclass Employee(object):\r\n    def __init__(self, name):\r\n        self.name = name\r\n    def greet(self, other):\r\n        print "Hello, %s" % other.name\r\n\r\nclass CEO(Employee):\r\n    def greet(self, other):\r\n        print "Get back to work, %s!" % other.name\r\n\r\nceo = CEO("Emily")\r\nemp = Employee("Steve")\r\nemp.greet(ceo)\r\n# Hello, Emily\r\nceo.greet(emp)\r\n# Get back to work, Steve!', NULL, '', 4, 0),
(2256, 'dale.seo', '', '', '2016-08-19 13:00:03', '', 'super 내장함수를 이용해서 Base Class의 메소드 호출하기', 'class Employee(object):\r\n    """Models real-life employees!"""\r\n    def __init__(self, employee_name):\r\n        self.employee_name = employee_name\r\n\r\n    def calculate_wage(self, hours):\r\n        self.hours = hours\r\n        return hours * 20.00\r\n\r\n# Add your code below!\r\nclass PartTimeEmployee(Employee):\r\n    def calculate_wage(self, hours):\r\n        self.hours = hours\r\n        return hours * 12.00\r\n    \r\n    def full_time_wage(self, hours):\r\n        return super(PartTimeEmployee, self).calculate_wage(hours)\r\n\r\nmilton = PartTimeEmployee(''milton'')\r\nprint(milton.full_time_wage(10))', NULL, '', 2, 0),
(2257, 'dale.seo', '', '', '2016-08-19 23:21:24', '', 'Fisher–Yates shuffle', 'https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\r\n\r\nO(N)의 복잡도로 맨 뒷자리 부터 랜덤 원소를 채워나가는 셔플 방법이다.\r\n\r\n["A", "B", "C"] 라는 리스트가 있다면,\r\n마지막 index 부터 1씩 줄여가면서 다음 로직을 반복한다.\r\n\r\n"0이상 index 이하의 랜덤 정수를 구한 후, index의 원소와 자리를 바꾼다." (만약 랜덤 정수가 index가 나온다면 바뀌는게 없겠지)\r\n이렇게 하면 반복이 진행될 수록 index의 값이 작아지므로, 결국 첫번째 자리를 채울 수 있다.\r\n\r\n==============================================================================\r\n"""\r\nhttps://leetcode.com/problems/shuffle-an-array/\r\n"""\r\nimport random\r\n\r\n# https://en.wikipedia.org/wiki/Fisher–Yates_shuffle\r\nclass Solution(object):\r\n\r\n    def __init__(self, nums):\r\n        self.nums = nums\r\n\r\n    def reset(self):\r\n        return self.nums\r\n\r\n    def shuffle(self):\r\n        positions = [i for i in range(len(self.nums))]\r\n        for idx in reversed(range(len(positions))):\r\n            rand_idx = random.randint(0, idx)\r\n            positions[idx], positions[rand_idx] = positions[rand_idx], positions[idx]\r\n        return [self.nums[p] for p in positions]\r\n\r\nnums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nobj = Solution(nums)\r\nprint("reset: ", obj.reset())\r\nfor x in range(100):\r\n    print("shuffle: ", obj.shuffle())\r\nprint("reset: ", obj.reset())\r\n', NULL, '', 10, 0),
(2258, 'dale.seo', '', '', '2016-08-20 12:04:54', '', 'Python File I/O', '내장 함수인 open(filepath, mode)를 이용해서 파일 객체를 얻어낸다.\r\n파일 객체의 write(), read(), readline() 메서드를 이용해서 I/O를 수행한다.\r\n파일 객체를 쓰고 나서는 반드시 close() 메소드를 호출해줘야 buffer 내용이 유실되지 않고 파일에 적용된다.\r\n\r\nmy_file = open(''text.txt'', ''r+'')\r\nmy_file.write(''abc'')\r\n\r\nif not my_file.closed:\r\n    my_file.close()\r\n\r\nprint(my_file.closed)\r\n\r\n\r\n\r\n[ with open() as 구문을 쓰면 자동으로 파일 객체를 닫아준다 ]\r\n\r\nwith open(''text.txt'', ''r+'') as my_file:\r\n    my_file.write(''abc'')\r\n\r\nif not my_file.closed:\r\n    my_file.close()\r\n\r\nprint(my_file.closed)', NULL, '', 5, 0),
(2259, 'dale.seo', '', '', '2016-08-20 14:19:32', '', '커맨드 라인 명령어 정리', 'https://www.codecademy.com/articles/command-line-commands', NULL, '', 2, 0),
(2260, 'dale.seo', '', '', '2016-08-22 09:22:32', '', 'CSS 레이아웃 간단 튜토리얼', 'http://ko.learnlayout.com/\r\n\r\n리마인드 할 때 좋을 듯', NULL, '', 2, 0),
(2261, 'dale.seo', '', '', '2016-08-22 14:24:46', '', 'Redirection', 'Congratulations! You learned how to use the command line to redirect standard input and standard output. What can we generalize so far?\r\n\r\nRedirection reroutes standard input, standard output, and standard error.\r\nThe common redirection commands are:\r\n\r\n> redirects standard output of a command to a file, overwriting previous content.\r\n>> redirects standard output of a command to a file, appending new content to old content.\r\n< redirects standard input to a command.\r\n| redirects standard output of a command to another command.\r\nA number of other commands are powerful when combined with redirection commands:\r\n\r\nsort: sorts lines of text alphabetically.\r\nuniq: filters duplicate, adjacent lines of text.\r\ngrep: searches for a text pattern and outputs it.\r\nsed : searches for a text pattern, modifies it, and outputs it.', NULL, '', 2, 0),
(2262, 'dale.seo', '', '', '2016-08-23 09:23:43', '', 'Maven 커맨드 - mvn archetype:generate', 'http://www.mkyong.com/maven/how-to-create-a-java-project-with-maven/\r\n\r\n터미널에서 간단하게 자바 프로젝트 만들 때 사용하면 좋다.\r\n\r\n[ 샘플 ]\r\n# 일반 프로젝트\r\nmvn archetype:generate -DgroupId=seo.dale.blog -DartifactId=dale-blog -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false\r\n# 웹 프로젝트\r\nmvn archetype:generate -DgroupId=seo.dale.practice.servlet -DartifactId=servlet-practice -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false\r\n\r\n[ 다음과 같은 디렉토리 레이아웃이 생김 ]\r\ndata-structure/\r\n├── pom.xml\r\n└── src\r\n    ├── main\r\n    │   └── java\r\n    │       └── seo\r\n    │           └── dale\r\n    │               └── datastructure\r\n    │                   └── App.java\r\n    └── test\r\n        └── java\r\n            └── seo\r\n                └── dale\r\n                    └── datastructure\r\n                        └── AppTest.java\r\n\r\n[ 기본 아키 타입 종류 ]\r\nhttps://maven.apache.org/archetypes/index.html', NULL, '', 11, 0),
(2263, 'dale.seo', '', '', '2016-08-24 10:04:34', '', '약수/소수 구할 때 최적화 팁', '루프돌릴 때 제곱근까지만 돌려도 된다.\r\n\r\n# n의 약수의 합 (n은 미포함)\r\ndef sum_divs(n):\r\n    sum_divs = 1\r\n    for m in range(2, int(n ** 0.5)):\r\n        if n % m == 0:\r\n            sum_divs += m + int(n / m)\r\n    return sum_divs', NULL, '', 4, 0),
(2265, 'dale.seo', '', '', '2016-08-26 14:57:16', '', 'Array의 contains 구현', 'http://javadevnotes.com/check-if-java-array-contains-a-certain-value\r\n\r\n====================================================\r\nString[] UNDEFIND_ERROR_CODES = {"02222", "02223"}\r\n\r\n		if (Arrays.stream(UNDEFIND_ERROR_CODES).anyMatch(item::equals)) {\r\n\r\n		}', NULL, '', 3, 0),
(2266, 'dale.seo', '', '', '2016-08-29 09:12:02', '', '[Built-in] sorted', 'https://github.com/dale-seo/dale-python/blob/master/builtins/sorted/sorted.py\r\n\r\n===========================================================\r\narr = [''A'', ''E'', ''F'', ''C'', ''B'', ''D'']\r\n\r\nprint(''sorted(arr): '', sorted(arr))  # ascending\r\nprint(''sorted(arr, reverse=True: '', sorted(arr, reverse=True))  # descending\r\nprint(''arr: '', arr)  # the original list doesn''t change', NULL, '', 4, 0),
(2267, 'dale.seo', '', '', '2016-08-29 09:58:04', '', '[Module] pickle', 'https://github.com/dale-seo/dale-python/blob/master/modules/pickle/pickle-test.py\r\n\r\n파일 열 때  바이너리 모드로 해야한다.\r\n\r\n========================================\r\nimport pickle\r\n\r\nwith open(''pickle.dat'', ''wb'') as file:\r\n    in_list = [''A'', ''B'', ''C'']\r\n    in_dic = {1: ''python'', 2: ''you need''}\r\n    pickle.dump(in_list, file)\r\n    pickle.dump(in_dic, file)\r\n\r\nwith open(''pickle.dat'', ''rb'') as file:\r\n    out_list = pickle.load(file)\r\n    out_dic = pickle.load(file)\r\n    print("out_list >>>", out_list)\r\n    print("out_dic >>>", out_dic)\r\n', NULL, '', 2, 0),
(2268, 'dale.seo', '', '', '2016-08-29 17:17:51', '', 'ServletPath는 서블릿 맵핑에 따라서 달라진다', 'https://bluxte.net/musings/2006/03/29/servletpath-and-pathinfo-servlet-api-weirdness/', NULL, '', 2, 0),
(2269, 'dale.seo', '', '', '2016-08-30 10:41:02', '', 'SinglyLinkedList와 DoublyLinkedList 직접 구현', 'https://github.com/dale-seo/java-data-structure/tree/master/src/main/java/seo/dale/datastructure/list\r\n\r\n===============================================================================\r\n/**\r\n * <h1>LinkedList의 두 가지 구현</h1>\r\n * <h2>공통 구현 팁</h2>\r\n * <ul>\r\n *     <li>두 방법 모두 내부적으로 getNode() 메소드를 구현함으로써 중복적인 노드 검색 로직을 줄인다</li>\r\n *     <li>성능을 위해 size 필드를 사용하고 깔끔한 구현을 위해 sentinel(head, tail) 객체 필드를 사용한다.</li>\r\n *     <li>ListNode는 외부에 노출하지 않는 클래스이므로 구지 setter, getter를 이용해서 접근하지 않는다.</li>\r\n * </ul>\r\n * <h2>구현 비교</h2>\r\n * <ul>\r\n *     <li>SinglyLinkedList : add와 remove 구현 시 index-1 위치의 노드에 접근해야 해서 까다롭다.</li>\r\n *     <li>DoublyLinkedList : add와 remove 구현 시 노듸의 next, prev를 모두 업데이트 해줘야 한다.</li>\r\n * </ul>\r\n * @author Dale Seo\r\n */\r\npackage seo.dale.datastructure.list;\r\n\r\n===============================================================================\r\npackage seo.dale.datastructure.list;\r\n\r\nimport java.util.AbstractList;\r\n\r\n/**\r\n * @author Dale Seo\r\n */\r\npublic class DoublyLinkedList<E> extends AbstractList<E> {\r\n\r\n	private int size;\r\n	private ListNode<E> head;\r\n	private ListNode<E> tail;\r\n\r\n	public DoublyLinkedList() {\r\n		this.size = 0;\r\n		this.head = new ListNode<>(null);\r\n		this.tail = new ListNode<>(null);\r\n		head.next = tail;\r\n		tail.prev = head;\r\n	}\r\n\r\n	@Override\r\n	public int size() {\r\n		return size;\r\n	}\r\n\r\n	@Override\r\n	public E get(int index) {\r\n		ListNode<E> node = getNode(index);\r\n		return node.data;\r\n	}\r\n\r\n	@Override\r\n	public boolean add(E element) {\r\n		add(size, element);\r\n		return true;\r\n	}\r\n\r\n	@Override\r\n	public void add(int index, E element) {\r\n		ListNode newNode = new ListNode<>(element);\r\n		ListNode<E> indexNode = index == size ? tail : getNode(index);\r\n		newNode.prev = indexNode.prev;\r\n		newNode.next = indexNode;\r\n		newNode.prev.next = newNode;\r\n		newNode.next.prev = newNode;\r\n		size++;\r\n	}\r\n\r\n	@Override\r\n	public E set(int index, E element) {\r\n		ListNode<E> node = getNode(index);\r\n		node.data = element;\r\n		return element;\r\n	}\r\n\r\n	@Override\r\n	public E remove(int index) {\r\n		ListNode<E> node = getNode(index);\r\n		node.prev.next = node.next;\r\n		node.next.prev = node.prev;\r\n		size--;\r\n		return node.data;\r\n	}\r\n\r\n	/**\r\n	 * get the node at the index\r\n	 */\r\n	private ListNode<E> getNode(int index) {\r\n		verifyIndex(index);\r\n\r\n		if (index < size / 2) {\r\n			ListNode<E> node = head.next;\r\n			for (int i = 0; i < index; i++) {\r\n				node = node.next;\r\n			}\r\n			return node;\r\n		} else {\r\n			ListNode<E> node = tail.prev;\r\n			for (int i = 0; i < size - 1 - index; i++) {\r\n				node = node.prev;\r\n			}\r\n			return node;\r\n		}\r\n	}\r\n\r\n	private void verifyIndex(int index) {\r\n		if (index < 0 || index >= size) {\r\n			throw new IndexOutOfBoundsException();\r\n		}\r\n	}\r\n\r\n	@Override\r\n	public String toString() {\r\n		return toStringForwards();\r\n	}\r\n\r\n	public String toStringForwards() {\r\n		StringBuilder builder = new StringBuilder();\r\n		ListNode<E> node = head.next;\r\n		while (node != null) {\r\n			builder.append(node).append(" ");\r\n			node = node.next;\r\n		}\r\n		return builder.toString();\r\n	}\r\n\r\n	public String toStringBackwords() {\r\n		StringBuilder builder = new StringBuilder();\r\n		ListNode<E> node = tail.prev;\r\n		while (node != null) {\r\n			builder.append(node).append(" ");\r\n			node = node.prev;\r\n		}\r\n		return builder.toString();\r\n	}\r\n\r\n}\r\n\r\n\r\n===============================================================================\r\npackage seo.dale.datastructure.list;\r\n\r\nimport java.util.AbstractList;\r\n\r\n/**\r\n * Implementation Tip: private getNode를 구현하여 여러 메소드에서 활\r\n * @author Dale Seo\r\n */\r\npublic class SinglyLinkedList<E> extends AbstractList<E> {\r\n\r\n	private int size;\r\n	private ListNode<E> head;\r\n\r\n	public SinglyLinkedList() {\r\n		head = new ListNode<>(null);\r\n		size = 0;\r\n	}\r\n\r\n	public int size() {\r\n		return size;\r\n	}\r\n\r\n	public E get(int index) {\r\n		ListNode<E> node = getNode(index);\r\n		return node.data;\r\n	}\r\n\r\n	public boolean add(E element) {\r\n		add(size, element);\r\n		return true;\r\n	}\r\n\r\n	public void add(int index, E element ) {\r\n		ListNode<E> prevNode = index == 0 ? head : getNode(index - 1);\r\n		ListNode<E> newNode = new ListNode<>(element);\r\n		newNode.next = prevNode.next;\r\n		prevNode.next = newNode;\r\n		size++;\r\n	}\r\n\r\n	public E set(int index, E element) {\r\n		ListNode<E> node = getNode(index);\r\n		node.data = element;\r\n		return element;\r\n	}\r\n\r\n	public E remove(int index) {\r\n		if (size == 0) {\r\n			throw new IndexOutOfBoundsException();\r\n		}\r\n		ListNode<E> prev = index == 0 ? head : getNode(index - 1);\r\n		ListNode<E> curr = prev.next;\r\n		prev.next = curr.next;\r\n		size--;\r\n		return curr.data;\r\n	}\r\n\r\n	/**\r\n	 * get the node at the index\r\n	 */\r\n	private ListNode<E> getNode(int index) {\r\n		verifyIndex(index);\r\n		ListNode<E> node = head.next;\r\n		for (int i = 0; i < index; i++) {\r\n			node = node.next;\r\n		}\r\n		return node;\r\n	}\r\n\r\n	private void verifyIndex(int index) {\r\n		if (index < 0 || index >= size) {\r\n			throw new IndexOutOfBoundsException();\r\n		}\r\n	}\r\n\r\n	@Override\r\n	public String toString() {\r\n		StringBuilder builder = new StringBuilder();\r\n		ListNode<E> node = head.next;\r\n		while (node != null) {\r\n			builder.append(node).append(" ");\r\n			node = node.next;\r\n		}\r\n		return builder.toString();\r\n	}\r\n\r\n}\r\n', NULL, '', 2, 0),
(2270, 'dale.seo', '', '', '2016-08-31 11:22:41', '', 'servlet-mapping url-pattern "/" vs "/*"', 'http://jinwooe.blogspot.kr/2014/05/servlet-mapping-url-pattern-vs.html\r\n\r\n\r\nJava Servlet 기반의 개발을 하면서 항상 명확하게 이해하지 못하고 넘어가는 부분 중에 하나가 url-pattern이 아닌가 싶습니다. 그 중에서도 "/" 과 "/*"의 차이를 이해하지 못하고 왔던 것 같아, 이번 기회에 정리해 보려고 합니다.\r\n\r\nServlet 3.1 Specification - Chapter 12를 읽어 보기 바랍니다.\r\n12.2 Specification Of Mappings 에 다음과 같은 내용이 있습니다.\r\n\r\nIn the Web application deployment descriptor, the following syntax is used to define\r\n\r\nmappings:\r\n\r\nA string beginning with a ‘/’ character and ending with a ‘/*’ suffix is used for path mapping.\r\nA string beginning with a ‘*.’ prefix is used as an extension mapping.\r\nThe empty string ("") is a special URL pattern that exactly maps to the application''s context root, i.e., requests of the form http://host:port/<contextroot>/. In this case the path info is ’/’ and the servlet path and context path is empty string (““).\r\nA string containing only the ’/’ character indicates the "default" servlet of the application. In this case the servlet path is the request URI minus the context path and the path info is null.\r\nAll other strings are used for exact matches only.\r\n\r\nIf the effective web.xml (after merging information from fragments and annotations) contains any url-patterns that are mapped to multiple servlets then the deployment must fail.\r\n\r\n''/'' 로 시작해서 ''/*''로 끝나는 문자열을 사용할 수 있습니다.\r\n''*''.prefix 형태의 확장자를 사용할 수 있습니다.\r\n빈 문자열("")은 특별한 URL 패턴인데 application의 context root에 매핑이 됩니다. 예를 들면 "http://host:port/<contextroot>/에 매핑이 되고, path info는 ''/'' 됩니다. 이 때 servlet path와 context path는 빈 문자열("")이 됩니다.\r\n''/'' 만 있는 문자열은 default servlet을 의미합니다. 이 때 servlet path는 request URI에서 context path를 제외한 문자열이 되고 path info는 null 입니다.\r\nurl-pattern에 의해 여러개의 servlet이 매핑이 되면 deploy가 실패해야 합니다.\r\n\r\n또 하나 알아야 할 것은 12.3 Implicit Mappings 인데, *.jsp의 경우는 container 내에 이미 매핑이 되어있습니다. 별도로 *.jsp 매핑을 정의하면 정의한 것을 사용하고, 정의하지 않으면 container 내에 있는 것을 사용하게 됩니다.\r\n\r\n그럼 여기서 헷갈리는 것 중에 하나가 "/"와 "/*"의 차이입니다.\r\n"/"는 default servlet을 의미하는 것이기 때문에, url-pattern에 "/"을 사용하면, container내에 있는 default servlet을 override하게 됩니다. 다시 말해 "/"에 매핑된 servlet이 default servlet이 되는 것입니다. default servlet의 역할은 url-pattern에 매치되지 않는 주로 정적 리소스들을(js, css, html, png 등) 전송하는 것입니다.\r\n\r\n"/*"은 모든 요청을 처리하겠다는 뜻입니다. "/*"에 매핑된 servlet은 서버의 모든 요청을 처리하게 되는데 js, css, png, html등을 servlet이 처리해 줘야 합니다. 때문에 별로 유용하지 않는 url pattern 입니다. 여기서 servlet path 는 빈문자열("")이 됩니다\r\n\r\n보통은 정적인 자원들은 public하게 사용되는 것이기 때문에 default servlet이 처리하도록 두는 것이 좋습니다.\r\n\r\n그런데 "/"를 사용해야 할 때가 있을 수도 있습니다. 그렇게 되면 container의 default servlet을 사용할 수 없게 되어 정적인 자원들을 전송하는 하는 기능을 직접 구현해 줘야 합니다. Spring에서는 "/"에 대한 매핑과 함께 <mvc:default-servlet-handler>라는 태그를 사용하여 정적인 자원들을 container의 default servlet을 활용할 수 있게 해줍니다. <mvc:default-servlet-handler>를 사용하면, 매치되지 않는 요청에 대해서 Spring에서 container의 default serviet으로 forwarding 해줍니다.', NULL, '', 2, 0),
(2271, 'dale.seo', '', '', '2016-08-31 11:28:34', '', 'Tomcat의 DefaultServlet과  Spring의 DispatcherServlet 메커니즘', 'http://lng1982.tistory.com/97\r\n\r\n\r\n스프링 3.1 샘플 프로젝트의 web.xml(DD) 구성 시 url-pattern을 *.do와 같이 설정하였다.\r\n이유는 단순하다.\r\n프로젝트를 진행할 때 항상 *.do를 사용했기 때문이다.\r\n\r\n하지만 REST 방식의 웹 어플리케이션을 구성하기 위해서는 다음과 같은 URL 형식을 제공해야 하는데 현재는 *.do와 같이 되어 있기 때문에 pattern을 /* 와 같이 변경해야만 했다.\r\nhttp://localhost:8080/user/list\r\n\r\n\r\n[현상]\r\n이제 내가 만들어 놓은 프로젝트는 REST 방식을 지원하는 spring web application이 되었다.\r\n허나 controller mapping url을 호출하면 404 에러가 발생하면서 아래와 같은 로그가 찍힌다.\r\nNo mapping found for HTTP request with URI [/WEB-INF/view/common/layout/default/layout.jsp] in \r\nDispatcherServlet with name ''dispatcher''\r\n\r\n\r\n[원인]\r\ncontroller mapping url을 못 찾아서 발생하는 404가 아닌 /WEB-INF/view/common/layout/default/layout.jsp 의 매핑 URL을 찾을 수 없어서 발생하는 오류였다.\r\n\r\n이 오류가 발생하는 원인을 알기 위해서는 서블릿 컨테이너와 웹 어플리케이션간의 연동 방법을 알아야 한다.\r\n일단 url-pattern에 등록할 수 있는 URL은 다음과 같다.\r\n"/"로 시작하고 "/*"로 끝나는 패턴은 path로 인식\r\n"*."으로 시작하는 경우 확장자 매칭\r\n"/"만 정의한 경우 디폴트 서블릿 의미\r\n그 외의 경우 동치 매칭\r\n\r\n위의 패턴 매칭에 존재하지는 않지만 /*는 요청 받는 모든 URL을 처리한다는 의미다. (아래와 같은 유형의 패턴 모두)\r\n/user/list\r\n/user/list.do\r\n/user/userList.jsp\r\n/img/test.png\r\n\r\n결국 모든 요청을 DispatcherServlet에서 처리하겠다고 지정했으니 jsp에 대한 호출도 DispatcherServlet이 처리를 하려고 했던 것이다.\r\n이로 인하여 jsp에 해당하는 mapping url을 찾을 수 없어 HTTP 404 오류가 발생하게 된 것이다.\r\n\r\n\r\n[해결 방안]\r\n그럼 해결 방법은 뭘까?\r\n결론적으로 말하자면 url-pattern을 "/" 로 지정하면 된다.\r\n해결 방법은 간단하지만 왜 이렇게 설정하면 잘 되는지 궁금해 졌다.\r\n\r\n위에서 언급했지만 "/"로 정의한 경우 디폴트 서블릿을 의미한다고 하였다.\r\n\r\n이게 뭔 말인가?\r\n이 말의 의미를 찾아 보니 디폴트 서블릿은 서블릿 매핑 URL에 걸리지 않는 요청들을 처리한다고 한다.\r\n\r\n또 의문이 생긴다.\r\n난 서블릿 매핑을 "/" 와 같이 한 개만 만들었는데...결국 거르는 작업 없이 내가 만들어 놓은 서블릿 매핑에 모두 걸리는 것 아닌가?\r\n그리고 디폴트 서블릿은 뭔가?\r\n\r\n위의 의문들을 해결하기 위해서 이제 tomcat 서블릿 컨테이너에 대해서 언급할 때가 왔다.\r\n${TOMCAT_HOME}/conf/web.xml 파일을 열어 보면 다음과 같이 세 개의 서블릿 매핑이 존재한다.\r\n<servlet-mapping>\r\n	<servlet-name>default</servlet-name>\r\n	<url-pattern>/</url-pattern>\r\n</servlet-mapping>\r\n\r\n\r\n<servlet>\r\n	<servlet-name>default</servlet-name>\r\n	<servlet-class>org.apache.catalina.servlets.DefaultServlet</servlet-class>\r\n	<init-param>\r\n		<param-name>debug</param-name>\r\n		<param-value>0</param-value>\r\n	</init-param>\r\n	<init-param>\r\n		<param-name>listings</param-name>\r\n		<param-value>false</param-value>\r\n	</init-param>\r\n	<load-on-startup>1</load-on-startup>\r\n</servlet>\r\n\r\n\r\n\r\n<servlet-mapping>\r\n	<servlet-name>jsp</servlet-name>\r\n	<url-pattern>*.jsp</url-pattern>\r\n</servlet-mapping>\r\n\r\n<servlet-mapping>\r\n	<servlet-name>jsp</servlet-name>\r\n	<url-pattern>*.jspx</url-pattern>\r\n</servlet-mapping>\r\n\r\n<servlet>\r\n	<servlet-name>jsp</servlet-name>\r\n	<servlet-class>org.apache.jasper.servlet.JspServlet</servlet-class>\r\n	<init-param>\r\n		<param-name>fork</param-name>\r\n		<param-value>false</param-value>\r\n	</init-param>\r\n	<init-param>\r\n		<param-name>xpoweredBy</param-name>\r\n		<param-value>false</param-value>\r\n	</init-param>\r\n	<load-on-startup>3</load-on-startup>\r\n</servlet>\r\n\r\n*.jsp, *.jspx와 같은 url 패턴은 JspServlet이 처리하고, DefaultServlet은 spring Controller mapping과 jsp 패턴에 걸리지 않는 요청 들을 처리한다는 결론이 나온다.\r\n즉, DefaultServlet은 png, jpg, js, html등 정적인 content를 처리한다는 말이다.\r\n\r\n정리하면 \r\nhttp://localhost:8080/user/userList.jsp <- JspServlet 요청 처리\r\nhttp://localhost:8080/img/button.jpg <- DefaultServlet 요청 처리\r\nhttp://localhost:8080/user/list <- DispatcherServlet 요청 처리', NULL, '', 4, 0),
(2272, 'dale.seo', '', '', '2016-08-31 14:03:49', '', '스프링에서 정적 리소스를 서비스하는 방법 (configureDefaultServletHandling  vs addResourceHandlers)', 'http://stackoverflow.com/questions/29396281/what-does-configuredefaultservlethandling-means\r\n\r\n========================================================================\r\nWebMvcConfigurerAdapter#configureDefaultServletHandling 또는 <mvc:default-servlet-handler/>\r\n========================================================================\r\n서블릿 컨테이너(Tomcat)의 DefaultServlet에게 정적 리소스를 서비스를 위임\r\n\r\n========================================================================\r\nWebMvcConfigurerAdapter#addResourceHandlers 또는 <mvc:resources/>\r\n========================================================================\r\n스프링의 DefaultServlet에서 정적 리소스를 직접 처리\r\n\r\n===>> 아래 방법이 명시적이라서 더 나은 듯...', NULL, '', 6, 0),
(2273, 'dale.seo', '', '', '2016-09-01 10:40:02', '', '특정 경로 내의 모든 하위 디렉토리에 명령어 날리기', 'http://stackoverflow.com/questions/7470165/how-to-go-to-each-directory-and-execute-a-command\r\n\r\n========================================================================================================================\r\nsotre로 시작하는 모든 디렉토리에 들어가서 git config user.name과 git config user.email 세팅해주기\r\n========================================================================================================================\r\n1002139@1002139s-MacBook-Pro sp-fw3 [develop] $ find . -maxdepth 1 -type d -name ''store*'' -exec bash -c "cd ''{}'' && git config user.name ''서대영(DAEYOUNG SEO)/Onestore/SKP''" \\;\r\n1002139@1002139s-MacBook-Pro sp-fw3 [develop] $ find . -maxdepth 1 -type d -name ''store*'' -exec bash -c "cd ''{}'' && git config user.email ''dale.seo@sk.com''" \\;\r\n', NULL, '', 4, 0),
(2274, 'dale.seo', '', '', '2016-09-01 11:34:29', '', 'Random 클래스에서 seed의 의미', 'Random 클래스를 생서할 때, seed 정수값을 넘겨야 한다.\r\n두 개의 Random 객체가 동일한 seed 값으로 생성되었다면, 랜덤 함수의 반환 값의 순서가 항상 동일함이 보장된다.\r\n\r\n===========================================================================\r\npublic class RandomTest {\r\n\r\n	/**\r\n	 * If the seeds of two Random object are the same,\r\n	 * they generate values in the same order.\r\n	 */\r\n	@Test\r\n	public void testSeed() {\r\n		Random random = new Random(1);\r\n		Random random2 = new Random(1);\r\n		for (int i = 0; i < 100; i++) {\r\n			assertEquals(random.nextInt(), random2.nextInt());\r\n		}\r\n	}\r\n\r\n	@Test\r\n	public void testNextInt() {\r\n		int[] counts = new int[10];\r\n		int seed = (int) (Math.random() * 10);\r\n		Random random = new Random(seed);\r\n		for (int i = 0; i < 10000; i++) {\r\n			counts[random.nextInt(10)] ++;\r\n		}\r\n		for (int count : counts) {\r\n			assertTrue(count > 800 && count < 1200);\r\n		}\r\n		System.out.println(">>> " + Arrays.toString(counts));\r\n	}\r\n\r\n}', NULL, '', 2, 0),
(2275, 'dale.seo', '', '', '2016-09-03 18:07:33', '', 'Promise 개념 잡기', 'http://programmingsummaries.tistory.com/325\r\nhttps://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise\r\n\r\n비동기 처리의 표준화를 위해 ES6 부터 도입 \r\n\r\n=======================================================\r\n//Promise 선언\r\nvar _promise = function (param) {\r\n\r\n	return new Promise(function (resolve, reject) {\r\n\r\n		// 비동기를 표현하기 위해 setTimeout 함수를 사용 \r\n		window.setTimeout(function () {\r\n\r\n			// 파라메터가 참이면, \r\n			if (param) {\r\n\r\n				// 해결됨 \r\n				resolve("해결 완료");\r\n			}\r\n\r\n			// 파라메터가 거짓이면, \r\n			else {\r\n\r\n				// 실패 \r\n				reject(Error("실패!!"));\r\n			}\r\n		}, 3000);\r\n	});\r\n};\r\n\r\n//Promise 실행\r\n_promise(true)\r\n.then(function (text) {\r\n	// 성공시\r\n	console.log(text);\r\n}, function (error) {\r\n	// 실패시 \r\n	console.error(error);\r\n});\r\n\r\n\r\n=======================================================\r\n\r\nasyncThing1()\r\n	.then(function() { return asyncThing2();})\r\n	.then(function() { return asyncThing3();})\r\n	.catch(function(err) { return asyncRecovery1();})\r\n\r\n	.then(function() { return asyncThing4();}, function(err) { return asyncRecovery2(); })\r\n	.catch(function(err) { console.log("Don''t worry about it");})\r\n\r\n	.then(function() { console.log("All done!");});', NULL, '', 6, 0),
(2276, 'dale.seo', '', '', '2016-09-04 15:57:25', '', 'git ignore 커맨드 사용하기', 'https://www.gitignore.io/docs\r\n\r\n터미널에서 다음처럼 git alias를 등록 후,\r\n\r\n$ git config --global alias.ignore ''!gi() { curl -L -s https://www.gitignore.io/api/$@ ;}; gi''\r\n\r\n아래와 같이 실행하면 된다.\r\n\r\ngit ignore node >> .ignore\r\n\r\n\r\n# Java 프로젝트\r\n git ignore java,maven,intellij >> .gitignore\r\n', NULL, '', 7, 0),
(2277, 'dale.seo', '', '', '2016-09-04 18:14:44', '', 'AngularJS2 Bootstrap, Boilertemplate', 'https://toddmotto.com/bootstrap-angular-2-hello-world\r\nhttps://toddmotto.com/creating-your-first-angular-2-component', NULL, '', 7, 0),
(2278, 'dale.seo', '', '', '2016-09-04 18:56:39', '', 'AngularJS2 @Input, @Output', '부모와 자식 컴포넌트 간에 통신 방법\r\n\r\nhttps://toddmotto.com/passing-data-angular-2-components-input\r\nhttps://toddmotto.com/component-events-event-emitter-output-angular-2', NULL, '', 6, 0),
(2279, 'dale.seo', '', '', '2016-09-05 15:00:53', '', 'xargs 커맨드', 'http://www.thegeekstuff.com/2013/12/xargs-examples/\r\nfind 커맨드의 같이 쓰면 강력하다.\r\n\r\n================================================\r\n특정 확장자의 파일들을 모두 지우기\r\n================================================\r\n$ touch "The Geek Stuff.c"\r\n\r\n$ ls\r\none.c  one.h  two.c  two.h The Geek Stuff.c\r\n\r\n$ find . -name "*.c" | xargs rm -rf\r\n\r\n$ ls\r\none.h  two.h  The Geek Stuff.c\r\n\r\n================================================\r\n특정 확장자의 파일들을 모두 지우기 (파일 이름에 공백이 있을 때)\r\n================================================\r\n$ ls\r\none.c  one.h  two.c  two.h The Geek Stuff.c\r\n\r\n$ find . -name "*.c" -print0 | xargs -0 rm -rf\r\n\r\n$ ls\r\none.h  two.h\r\n\r\n\r\n================================================\r\n특정 문자열이 포함하고 있는 파일들의 경로를 나열하기\r\n================================================\r\n$ find . -name ''*.c'' | xargs grep ''stdlib.h''\r\n./tgsthreads.c:#include\r\n./valgrind.c:#include\r\n./direntry.c:#include\r\n./xvirus.c:#include\r\n./temp.c:#include\r\n...\r\n...\r\n...', NULL, '', 7, 0),
(2280, 'dale.seo', '', '', '2016-09-06 11:20:18', '', '문자열 쪼개기 - String#split() VS StirngUtils.split()', 'StirngUtils을 쓰면 NllPointerException을 방지되기 때문에 많이 사용하는데,\r\nString#split와 구현이 다소 상이하기 때문에 주의해야 한다.\r\n\r\n구분자로 Spring#split()은 인자로 정규식을 받는 반면에, StirngUtils.split()은 지원되지 않는다.\r\n대신 StirngUtils.split()은 구분자 스트링을 인자로 받아서 각각 캐릭터의 모든 조합이 구분자로 사용한다.\r\n\r\n\r\n===========================================================================\r\n	@Test\r\n	public void testSplit() {\r\n        String text = "Can you hear me?  Hello, hello?";\r\n\r\n		String[] words = text.split(" ");\r\n		System.out.println(Arrays.toString(words));\r\n		assertArrayEquals(new String[]{"Can", "you", "hear", "me?", "", "Hello,", "hello?"}, words);\r\n\r\n        String[] words2 = text.split(" +"); // regex\r\n        System.out.println(Arrays.toString(words2));\r\n        assertArrayEquals(new String[]{"Can", "you", "hear", "me?", "Hello,", "hello?"}, words2);\r\n\r\n		String[] words3 = text.split("\\\\s+"); // regex\r\n		System.out.println(Arrays.toString(words3));\r\n		assertArrayEquals(new String[]{"Can", "you", "hear", "me?", "Hello,", "hello?"}, words3);\r\n	}\r\n\r\n\r\n===========================================================================\r\n	@Test\r\n	public void testSplit() {\r\n		String str = "I''m very tired.   I''ll go to bed.";\r\n		String[] tokens = StringUtils.split(str); // default separator = whitespace\r\n		System.out.println(Arrays.toString(tokens));\r\n		assertEquals(7, tokens.length);\r\n\r\n		String[] tokens2 = StringUtils.split(str, " ");\r\n		System.out.println(Arrays.toString(tokens2));\r\n		assertEquals(7, tokens2.length);\r\n\r\n		String[] tokens3 = StringUtils.split(str, " .''"); // each whitespace, dot, apostrophe is treated as a separator and a union separator\r\n		System.out.println(Arrays.toString(tokens3));\r\n		assertEquals(9, tokens3.length);\r\n\r\n		String[] tokens4 = StringUtils.split(str, "\\\\s+"); // Regex is not supported\r\n		System.out.println(Arrays.toString(tokens3));\r\n		assertEquals(1, tokens4.length);\r\n	}\r\n\r\n	@Test\r\n	public void testSplitGivenMax() {\r\n		String str = "ABC;DEF;___";\r\n		String[] tokens = StringUtils.split(str, ";");\r\n		System.out.println(Arrays.toString(tokens));\r\n		assertArrayEquals(new String[]{"ABC", "DEF", "___"}, tokens);\r\n\r\n		String[] tokens1 = StringUtils.split(str, ";", 1);\r\n		System.out.println(Arrays.toString(tokens1));\r\n		assertArrayEquals(new String[]{"ABC;DEF;___"}, tokens1);\r\n\r\n		String[] tokens2 = StringUtils.split(str, ";", 2);\r\n		System.out.println(Arrays.toString(tokens2));\r\n		assertArrayEquals(new String[]{"ABC", "DEF;___"}, tokens2);\r\n\r\n		String[] tokens3 = StringUtils.split(str, ";", 3);\r\n		System.out.println(Arrays.toString(tokens3));\r\n		assertArrayEquals(new String[]{"ABC", "DEF", "___"}, tokens3);\r\n\r\n		String[] tokens4 = StringUtils.split(str, ";", 4);\r\n		System.out.println(Arrays.toString(tokens4));\r\n		assertArrayEquals(new String[]{"ABC", "DEF", "___"}, tokens4);\r\n	}', NULL, '', 9, 0),
(2281, 'dale.seo', '', '', '2016-09-06 16:33:16', '', 'grep에서 + 정규식이 안 먹는 이유', 'http://askubuntu.com/questions/293148/grep-operator-does-not-work\r\n\r\n+ 표시는 확장 정규식 문법으로 grep 대신에 egrep을 써야 한다.', NULL, '', 2, 0),
(2282, 'dale.seo', '', '', '2016-09-06 16:34:01', '', 'fgrep VS grep VS egrep', 'http://dream-cy.tistory.com/21\r\n\r\nfgrep은 문자열 검색\r\ngrep은 정규식 검색\r\negrep는 확장 정규식 검색', NULL, '', 2, 0),
(2283, 'dale.seo', '', '', '2016-09-07 10:03:31', '', 'Python 문자열 포멧팅 - % vs format()', 'https://pyformat.info/', NULL, '', 4, 0),
(2284, 'dale.seo', '', '', '2016-09-07 10:46:01', '', '유니코드 이해', 'http://norux.me/31\r\n\r\n- 아스키코드의 경우, 128개의 코드가 정리되어 있는 코드표가 있다.\r\n- EUC-KR/CP949의 경우, 2바이트로 표현할 수 있는 코드표가 있는 것이다.\r\n- UTF-8/UTF-16등의 인코딩은 U+로 시작되는 코드표가 존재하고, 이를 유니코드라고 말한다. UTF같은 인코딩은 같은 유니코드표를 가지고 다르게 표현하는 방법인 것이다.\r\n\r\n이제는 유니코드가 무엇인지 헷갈려하지 말자. 유니코드는 그냥 코드표이다. \r\n', NULL, '', 2, 0),
(2285, 'dale.seo', '', '', '2016-09-07 12:47:59', '', 'Angluar2에서 사용하는 라이브러리', 'http://blog.jeonghwan.net/2016/08/23/about-angular2-quickstart-libraries.html\r\n\r\nhttps://github.com/systemjs/systemjs\r\nhttps://github.com/angular/zone.js', NULL, '', 2, 0),
(2286, 'dale.seo', '', '', '2016-09-07 14:15:28', '', 'Parameterized Test 예제', '@Parameterized.Parameter() 와 @Parameterized.Parameters 어노테이션이 붙어 있는 필드는 public 으로 선언해야 한다.\r\n\r\n\r\n==================================================================\r\npackage com.skplanet.storeplatform.ccs.runtime.security.parameter;\r\n\r\nimport com.skplanet.storeplatform.ccs.runtime.security.SecurityUtils;\r\nimport org.junit.Test;\r\nimport org.junit.runner.RunWith;\r\nimport org.junit.runners.Parameterized;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.Collection;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\n\r\n/**\r\n * SecurityUtilsTest.decrypt 메소드 테스트\r\n * @author 서대영/Store기술개발팀/SKP\r\n */\r\n@RunWith(Parameterized.class)\r\npublic class SecurityUtilsTest3 {\r\n\r\n	@Parameterized.Parameter(0)\r\n	public String algorithmText;\r\n\r\n	@Parameterized.Parameter(1)\r\n	public String cipherText;\r\n\r\n	@Parameterized.Parameter(2)\r\n	public String decryptedText;\r\n\r\n	@Parameterized.Parameters\r\n	public static Collection<String[]> parameters() {\r\n		return Arrays.asList(new String[][] {\r\n			// Query String\r\n			{\r\n				"aa0569042672685c99872f65",\r\n				"9a87370b2ed0b5406ce9d817d2e89524d1908b8ec1da51f4d05724decb7dee216e4767caade815",\r\n				"telcoCd=US001201&reqts=20160823T060103Z"\r\n			},\r\n			// Msisdn Header\r\n			{\r\n				"aa0569042672685c99872f6138",\r\n				"e54052d97e4516f83d93c5",\r\n				"01045216110"\r\n			},\r\n			// Usimsn Header\r\n			{\r\n				"aa0569042672685c99872f6138",\r\n				"ed485adf7b4216fc3c94c1ee65d2381596fe78",\r\n				"8982051206410781910"\r\n			},\r\n			// Imei Header\r\n			{\r\n				"aa0569042672685c99872f6138",\r\n				"e64453d4784517f83d91c3e665d432",\r\n				"351932061369012"\r\n			},\r\n			// Uuid Header\r\n			{\r\n				"aa0569042672685c99872f6138",\r\n				"b14555892a4616ac219bc0e830c83346cdad65d8c0bb0637114674113380f44a6d877dee",\r\n				"d47da11b-957e-3bbb-958a-71e51f277ee6"\r\n			}\r\n		});\r\n	}\r\n\r\n	@Test\r\n	public void test() {\r\n		assertEquals(decryptedText, SecurityUtils.decryptWithAlgorithm(algorithmText, cipherText));\r\n	}\r\n\r\n}', NULL, '', 9, 0),
(2287, 'dale.seo', '', '', '2016-09-08 15:19:33', '', 'NVM : Node Version Manager', 'https://github.com/creationix/nvm\r\n\r\n여러가지 버전의 노드 설치를 도와주는 CLI 툴\r\n\r\n# NVM 설치\r\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash\r\n\r\n# Node 설치\r\nnvm install node\r\n\r\n# 설치된 Node 버전 목록\r\nnvm list\r\n\r\n# 특정 버전 사용하기\r\nnvm use <버전이름>', NULL, '', 13, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(2534, 'dale.seo', '', '', '2017-05-31 18:41:43', '', '특정 문자열이 포함된 프로세를 찾아 죽이기', 'kill -9 `ps -ef | grep onetests | grep -v grep | awk ''{print $2}''`', NULL, '', 3, 0),
(2290, 'dale.seo', '', '', '2016-09-09 12:50:31', '', 'Bootstrap Grid System', 'http://getbootstrap.com/css/#grid\r\n\r\n# 그리드 단위가 적용되는 화면 너비\r\n : 각 유닛 별로 유효한 화면 너비 이상에서만 칼럼이 나눠짐\r\n- lg : 1200px 이상 (Desktops)\r\n- md : 992px 이상 (Laptops)\r\n- sm : 768 이상 (Tablets)\r\n- xs : 0이상 768 미만 (Phones)\r\n\r\n# Grid Class\r\ncol-단위-숫자 : 칼럼\r\n# Offeset Class\r\ncol-단위-offeset-숫자 : 앞에 공백\r\n\r\n# 주의 사항\r\n - gird size + offset size = 12\r\n - offeset 을 넣을 때는 gird 사이즈가 줄어야 함\r\n\r\n====================================\r\n# 전체 너비\r\n<div class="row">\r\n  <div class="col-md-12">\r\n</div>\r\n\r\n# 9:3 나누기\r\n<div class="row">\r\n  <div class="col-md-9">\r\n  <div class="col-md-3">\r\n</div>\r\n\r\n# 9:1:2 나누기 (중간 1은 공백)\r\n<div class="row">\r\n  <div class="col-md-9">\r\n  <div class="col-md-2 col-md-offeset-1">\r\n</div>\r\n', NULL, '', 17, 0),
(2289, 'dale.seo', '', '', '2016-09-08 20:00:43', '', 'Angular2 Component Relative Path', 'https://angular.io/docs/ts/latest/cookbook/component-relative-paths.html\r\n\r\n컴포넌트와 템플릿, 스타일을 상대경로로 엮으려면 다음과 같이 컴포넌트 데코레이터에 moduleId: module.id, 을 추가해준다.\r\n\r\n======================================================================\r\nimport {Component} from ''@angular/core'';\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: ''test-form'',\r\n  templateUrl: ''test.form.component.html''\r\n})\r\nexport class TestFormComponent {\r\n}', NULL, '', 2, 0),
(2291, 'dale.seo', '', '', '2016-09-09 13:18:06', '', 'Bootstrap Responsive Utilities', 'http://getbootstrap.com/css/#responsive-utilities\r\n\r\nvisible-*, hidden-* 클래스를 활용하면 큰 화면에서만 특정 칼럼이 나오거나,\r\n작은 화면에서 특정 칼럼을 숨길 수 있다.', NULL, '', 2, 0),
(2292, 'dale.seo', '', '', '2016-09-09 16:14:19', '', '모든 하위 디렉토리에 새로운 디렉토리 만들기', 'http://unix.stackexchange.com/questions/61907/how-do-i-create-a-directory-in-all-subdirectories\r\n\r\n모든 하위 디렉토리에 java 디렉토리를 새로 만들어줌\r\nfind . -mindepth 1 -maxdepth 1 -type d -exec mkdir {}/java \\;', NULL, '', 2, 0),
(2293, 'dale.seo', '', '', '2016-09-09 17:38:12', '', 'Servlet3.1로 web.xml 없이 어노테이션 기반 서블릿 개발', 'http://www.journaldev.com/1854/java-web-application-tutorial-for-beginners\r\n\r\n\r\n\r\npackage com.journaldev.first;\r\n\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Date;\r\n\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.annotation.WebInitParam;\r\nimport javax.servlet.annotation.WebServlet;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\n/**\r\n * Servlet implementation class FirstServlet\r\n */\r\n@WebServlet(description = "My First Servlet", urlPatterns = { "/FirstServlet" , "/FirstServlet.do"}, initParams = {@WebInitParam(name="id",value="1"),@WebInitParam(name="name",value="pankaj")})\r\npublic class FirstServlet extends HttpServlet {\r\n	private static final long serialVersionUID = 1L;\r\n	public static final String HTML_START="<html><body>";\r\n	public static final String HTML_END="</body></html>";\r\n       \r\n    /**\r\n     * @see HttpServlet#HttpServlet()\r\n     */\r\n    public FirstServlet() {\r\n        super();\r\n        // TODO Auto-generated constructor stub\r\n    }\r\n\r\n	/**\r\n	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)\r\n	 */\r\n	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n		PrintWriter out = response.getWriter();\r\n		Date date = new Date();\r\n		out.println(HTML_START + "<h2>Hi There!</h2><br/><h3>Date="+date +"</h3>"+HTML_END);\r\n	}\r\n\r\n	/**\r\n	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)\r\n	 */\r\n	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n		// TODO Auto-generated method stub\r\n	}\r\n\r\n}', NULL, '', 3, 0),
(2294, 'dale.seo', '', '', '2016-09-09 17:39:07', '', 'Servlet3.1 Tutorial', 'http://www.journaldev.com/2114/servlet-jsp-tutorial\r\n\r\n2016년도에 쓰여진 튜토리얼이라서 괜찮음\r\n\r\n서블릿, 세션, 쿠키 다 있음', NULL, '', 7, 0),
(2295, 'dale.seo', '', '', '2016-09-09 18:22:09', '', 'Servet3.1 구조 (Hierarchy)', 'http://www.journaldev.com/1877/servlet-tutorial-java\r\n\r\n\r\n[[ Servlet Interface ]] : URL 맵핑 당 하나 존재\r\nis the base interface of Java Servlet API.\r\n #init(ServletConfig servletConfig)\r\n # service()\r\n # destory()\r\n \r\n\r\n[[ Servlet Config ]] : 서블릿당 하나 존재 (서블릿 설정 인터페이스)\r\nis used to pass configuration information to Servlet.\r\n# getInitParameterNames()\r\n# getInitParameter(String paramString) \r\n\r\n\r\n[[ ServletContext interface ]] : 어플리케이션당 하나 존재 (어플리케이션 설정 인터페이스)\r\nprovides access to web application variables to the servlet.\r\nNote: Ideally the name of this interface should be ApplicationContext because it’s for the application and not specific to any servlet. Also don’t get confused it with the servlet context passed in the URL to access the web application.\r\n# RequestDispatcher getRequestDispatcher(String urlpath) \r\n\r\n\r\n[[ ServletRequest interface ]]\r\nServletRequest interface is used to provide client request information to the servlet. Servlet container creates ServletRequest object from client request and pass it to the servlet service() method for processing.\r\n\r\n\r\n[[ ServletResponse interface ]]\r\nServletResponse interface is used by servlet in sending response to the client. Servlet container creates the ServletResponse object and pass it to servlet service() method and later use the response object to generate the HTML response for client.\r\n\r\n\r\n[[ RequestDispatcher interface ]]\r\n\r\nRequestDispatcher interface is used to forward the request to another resource that can be HTML, JSP or another servlet in the same context. We can also use this to include the content of another resource to the response. This interface is used for servlet communication within the same context.\r\n\r\nThere are two methods defined in this interface:\r\n\r\nvoid forward(ServletRequest request, ServletResponse response) – forwards the request from a servlet to another resource (servlet, JSP file, or HTML file) on the server.\r\nvoid include(ServletRequest request, ServletResponse response) – includes the content of a resource (servlet, JSP page, HTML file) in the response.\r\nWe can get RequestDispatcher in a servlet using ServletContext getRequestDispatcher(String path) method. The path must begin with a / and is interpreted as relative to the current context root.\r\n', NULL, '', 6, 0),
(2296, 'dale.seo', '', '', '2016-09-10 12:23:18', '', 'Javascript Object Clone', 'http://heyjavascript.com/4-creative-ways-to-clone-objects/\r\n\r\n\r\n\r\n    this.test = JSON.parse(JSON.stringify(test));', NULL, '', 3, 0),
(2297, 'dale.seo', '', '', '2016-09-10 18:38:02', '', 'Bootstrap Typography - 텍스트 정렬, 리스트 불릿 제거', 'http://getbootstrap.com/css/#type-alignment\r\n\r\n버튼 정렬에 써도 좋음\r\n\r\nhttp://getbootstrap.com/css/#type-lists\r\n\r\nlist-unstyled 클래스를 쓰면 앞에 bullet 사라지고,\r\nlist-inline 클래스를 쓰면 리스트 아이템이 한 줄에 나열됨', NULL, '', 5, 0),
(2298, 'dale.seo', '', '', '2016-09-11 09:51:01', '', 'Bootstrap lead, well 클래스', '특정 블록이나 문단이 돋보이고 싶을 때 간단하게 활용하면 좋다.\r\n\r\n<div class="well">\r\n  <h2>...</h2>\r\n  <p class class="lead">...</p>\r\n</div>', NULL, '', 2, 0),
(2299, 'dale.seo', '', '', '2016-09-11 10:57:47', '', 'Bootstrap Navbar', '네비에기션 바를 만들 때 사용한다.\r\nnav랑 차이는 navbar는 보통 페이지 당 하나 또는 두개인데 반해 nav는 페이지 전반에 다양하게 쓰인다.\r\n\r\n- 최상위 블록 : navbar + navbar-default 또는 navbar-inverse\r\n- 최상위 블록의 포지션 : navbar-static-top, navbar-static-bottom, navbar-fixed-top, navbar-fixed-bottom\r\n- 왼쪽 로고 : navbar-brand\r\n- 오른쪽 메뉴 : navbar-nav, navbar-right\r\n\r\n주의 사항\r\n- div 대신에 nav 태그를 쓸 것\r\n- navbar 블록이 container 블록을 감싸고 있어야 화면 전체길이로 된다.\r\n- Gird System이랑 같이 사용하면 안된다.\r\n\r\n\r\nhttps://github.com/DaleSeo/bootstrap-practice/blob/master/navbar-my.html', NULL, '', 18, 0),
(2303, 'dale.seo', '', '', '2016-09-12 22:46:42', '', 'React Component 작성', '- React.Component 클래스를 확장하고, render() 메소드를 구현한다.\r\n- ReactDOM.render() 메서드를 이용해서 컴포넌트를 랜더링한다.\r\n\r\nclass RobotBox extends React.Component {\r\n  render() {\r\n    return <div>Hello From React</div>;\r\n  }\r\n}\r\n\r\nlet target = document.getElementById(''robot-app'');\r\n\r\nReactDOM.render(<RobotBox/>, target);\r\n', NULL, '', 3, 0),
(2300, 'dale.seo', '', '', '2016-09-11 11:26:08', '', 'Bootstrap Nav - nav-tabs, nav-pills', 'active와 fade 클래스를 이용해서 조절한다.\r\n\r\n\r\n          <ul class="nav nav-tabs nav-justified">\r\n            <li class="active"><a href=''#time''>Today''s Times</a></li>\r\n            <li><a href=''#deals''>Hot Deals</a></li>\r\n            <li><a href=''#forecast''>Forecast</a></li>\r\n          </ul>\r\n\r\n          <div class=''tab-content''>\r\n            <div class=''tab-pane active'' id=''time''>\r\n              <p>Today''s Time here</p>\r\n            </div>\r\n            <div class=''tab-pane fade'' id=''deals''>\r\n              <p>Deals here</p>\r\n            </div>\r\n            <div class=''tab-pane fade'' id=''forecast''>\r\n              <p>Forecast</p>\r\n            </div>\r\n          </div>', NULL, '', 4, 0),
(2301, 'dale.seo', '', '', '2016-09-11 12:21:05', '', 'Bootstrap - Panel', 'http://getbootstrap.com/components/#panels\r\n\r\n포스트잇 같은 디자인을 줄 때 사용\r\n\r\n<div class="panel panel-default">\r\n  <div class="panel-heading">History</div>\r\n  <div class="panel-body"></div>\r\n  <ul class="list-group">\r\n    <li *ngFor="let test of tests" (click)="loadForm(test)" class="list-group-item"><i class="fa fa-angle-right" aria-hidden="true"></i> {{test.method}} {{test.url.toFullUrl()}}</li>\r\n  </ul>\r\n</div>', NULL, '', 2, 0),
(2302, 'dale.seo', '', '', '2016-09-11 15:35:57', '', '아코디언 패널 그룹 만들기', 'http://getbootstrap.com/javascript/#collapse-example-accordion\r\n\r\n아코디언 패널 그룹 (Accordion Panel Group) 이란?\r\n여러 개의 패널로 구성되어, 하나의 패널을 확장하면 다른 패널이 축소되는 UI\r\n\r\n토글 시킬 엘리머튼에는 collpasse 클래스가 필요하고, id 속성이 필요하다.\r\ndata-toggle="collapse" 은 항상 필요하고, a 태그를 이용할 때는 href, 그 외에는 data-target 속성을 이용해서 토글 시킬 엘리먼트의 ID를 지정한다.\r\n그리고 data-parent 속성을 통해, 한 패널이 열렸을 때 다른 패널들은 닫히도록 한다.\r\n\r\n<div class="panel-group">\r\n  <div *ngFor="let test of tests" (click)="loadForm(test)" class="panel panel-default">\r\n    <div class="panel-heading"><a data-toggle="collapse" data-parent=".panel-group" href="#{{test.id}}">{{test.method}} {{test.url.toFullUrl()}}</a></div>\r\n    <div id="{{test.id}}" class="panel-collapse collapse">\r\n      <div class="panel-body">api-test</div>\r\n    </div>\r\n  </div>\r\n</div>', NULL, '', 6, 0),
(2304, 'dale.seo', '', '', '2016-09-12 23:00:12', '', 'Javascript map 펑션을 이용해서 리스트업하기', 'class RobotItems extends React.Component {\r\n  render() {\r\n    const topics = ["React", "JSX", "JavaScript", "Programming"];\r\n    return (\r\n      <div>\r\n        <h3>Topics I am interested in</h3>\r\n        <ul>\r\n          {topics.map(topic => <li>{topic}</li>)}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}', NULL, '', 3, 0),
(2305, 'dale.seo', '', '', '2016-09-13 14:55:43', '', '헤더 오른 쪽에 버튼 위치시키기', 'http://stackoverflow.com/questions/13136194/place-button-group-at-the-far-right-side-of-a-header-with-bootstrap\r\n\r\n\r\n<div class=''page-header''>\r\n  <div class=''btn-toolbar pull-right''>\r\n    <div class=''btn-group''>\r\n      <button type=''button'' class=''btn btn-primary''>Button Text</button>\r\n    </div>\r\n  </div>\r\n  <h2>Header Text</h2>\r\n</div>', NULL, '', 2, 0),
(2306, 'dale.seo', '', '', '2016-09-13 19:32:35', '', 'console.log.bind(console)의 의미', 'http://stackoverflow.com/questions/12944987/abbreviating-console-log-in-javascript\r\nhttp://stackoverflow.com/questions/28668759/what-does-this-statement-do-console-log-bindconsole', NULL, '', 5, 0),
(2307, 'dale.seo', '', '', '2016-09-13 20:42:35', '', 'Ubuntu 패키지 검색 사이트', 'http://packages.ubuntu.com/', NULL, '', 2, 0),
(2308, 'dale.seo', '', '', '2016-09-13 23:06:42', '', 'git push 이후에 하지 말아야할 커맨드', 'git reset HEAD^\r\ngit commit --amend\r\n\r\n위와 같은 커맨드는 push 이후에는 히스토리를 바꾸는 작업이 되므로 하지 말아야 한다.', NULL, '', 2, 0),
(2309, 'dale.seo', '', '', '2016-09-14 18:31:26', '', 'Heroku CLI', '# 헤로쿠에 배포\r\n```\r\nheroku create <app-name>\r\ngit push heroku master\r\n```\r\n\r\n# 헤로쿠 앱 이름 변경\r\n```\r\nheroku apps:rename <new-app-name>\r\n```\r\n\r\n# 현재 디렉토리를 기존 헤로쿠앱 연결\r\n```\r\nheroku git:remote -a <app-name>\r\n```\r\n\r\n# collaborator로 등록된 헤러쿠앱 클론\r\n```\r\nheroku git:clone -a <app-name>\r\n```\r\n\r\n# 기본 브라우져 열고 원격 사이트 접속\r\n```\r\nheroku open\r\n````\r\n\r\n# Herok 기본 정보 확인\r\n```\r\nheroku info\r\n```\r\n\r\n# 로그 확인\r\n```\r\nheroku logs --tail\r\n````\r\n\r\n# Dyno 목록 확인\r\n - 뛰어 놓은 어플리케이션과 무료 사용 시간 확인할 때 쓰임\r\n```\r\nheroku ps\r\n```\r\n\r\n# 로컬에서 실행하기\r\n - 5000 포트로 구동됨\r\n```\r\nheroku local\r\n```\r\n\r\n# 원격 서버 bash 접속 (One-off Dyno)\r\n```\r\nheroku run bash\r\n```\r\n\r\n# 설치된 애드온 목록 조회\r\n```\r\n heroku addons\r\n```\r\n\r\n# 애드온 추가\r\n```\r\nheroku addons:create <add-on-name>\r\n```\r\n\r\n# Config-vars 조회\r\n```\r\n$ heroku config\r\n```', NULL, '', 67, 0),
(2310, 'dale.seo', '', '', '2016-09-15 09:46:28', '', 'sudo 권한 주는 방법', '/etc/sudoers ', NULL, '', 3, 0),
(2311, 'dale.seo', '', '', '2016-09-16 13:37:58', '', 'Min/Max Heap 설명', 'http://interactivepython.org/runestone/static/pythonds/Trees/BinaryHeapImplementation.html', NULL, '', 4, 0),
(2312, 'dale.seo', '', '', '2016-09-21 13:08:46', '', 'Props 와 Sate 의 용도', 'A React component should use props to store information that can be changed, but can only be changed by a different component.\r\n\r\nA React component should use state to store information that the component itself can change.', NULL, '', 2, 0),
(2313, 'dale.seo', '', '', '2016-09-21 23:21:36', '', 'React의 Autobind 기능', 'https://facebook.github.io/react/blog/2013/07/02/react-v0-4-autobind-by-default.html\r\n\r\n\r\nThe meaning of this is determined when a function is called, not when when a function is defined. changeName is called by an event listener... on a <Child />. Shouldn''t that make this point to the instructions object of the Child class, instead of the Parent class?\r\n\r\nYou''d think that it would! Fortunately it doesn''t happen that way, thanks to some React magic called automatic binding.\r\n\r\nAutomatic binding allows you to pass functions as props, and any this values in the functions'' bodies will automatically refer to whatever they referred to when the function was defined. No binding to worry about!', NULL, '', 2, 0),
(2314, 'dale.seo', '', '', '2016-09-25 19:56:59', '', 'Gradle Java Reference', '- Java Quick Start\r\n    - https://docs.gradle.org/current/userguide/tutorial_java_projects.html\r\n- User Guide\r\n    - https://docs.gradle.org/current/userguide/java_plugin.html\r\n- Task\r\n    - https://docs.gradle.org/current/dsl/org.gradle.api.tasks.JavaExec.html', NULL, '', 5, 0),
(2315, 'dale.seo', '', '', '2016-09-25 19:57:55', '', 'Gradle Java 플러그인 설정', '/*\r\n\r\nApplying the Java plugin is simple, we need only add a single line to our\r\nbuild script.\r\n\r\n*/\r\n\r\napply plugin: "java"\r\n\r\n\r\n\r\n/*\r\n\r\nNow if we run\r\n\r\n    gradle tasks --all\r\n\r\nWe find a wealth of capabilities that Gradle can handle for us! There are four\r\nmain tasks we''ll use most often: assemble, check, build, and clean.\r\n\r\nAssemble creates the output we''re interested in. This is usually a JAR, but\r\ncan also be more interesting artifacts. Check runs any tests we''ve set up.\r\nBuild depends on both assemble and check. Finally, clean deletes all the build\r\noutput.\r\n\r\nWe''ve got a trivial Java project in this folder, with a single Person class.\r\nLet''s try running\r\n\r\n    gradle assemble\r\n\r\nLooking at the newly created /build directory, we see where our compiled\r\nPerson.class, and we can also find our JAR.\r\n\r\nYou might be thinking to yourself "I thought there wasn''t going to be any\r\nmagic. This sure seems like magic... How did Gradle know where to find my\r\nsource code?"\r\n\r\nI promise there''s no magic. Gradle just has a lot of very sensible defaults,\r\nlike, for instance, it assumes that your Java sources live in a folder named\r\n`src/main/java`. This, like most everything else in Gradle, can be configured,\r\nand we''ll show how shortly.\r\n\r\nThere''s another important thing to know how to do, and that''s run the project\r\nwe just built. You might have noticed that the Java plugin doesn''t add any\r\ntasks for running your code, and that''s because the JavaExec task is already\r\npart of the core Gradle functionality.\r\n\r\n*/\r\n\r\n\r\ntask execute(type: JavaExec) {\r\n    main = "com.udacity.gradle.Person"\r\n    // We''ll talk about this shortly\r\n    classpath = sourceSets.main.runtimeClasspath\r\n}\r\n\r\n/*\r\n\r\nThe `main` property tells the JavaExec task the path of your main class, and\r\nwe''ll talk more about the classpath very shortly.\r\n\r\nThere''s a number of resources that it would be a great idea to take a look at.\r\nThe first is the Gradle Java Quickstart guide\r\n\r\nhttps://docs.gradle.org/current/userguide/tutorial_java_projects.html\r\n\r\nThe Gradle user guide also has much more in-depth documentation on the Gradle\r\nplugin:\r\n\r\nhttps://docs.gradle.org/current/userguide/java_plugin.html\r\n\r\nFinally, check out the Gradle DSL reference for more info on the JavaExec task\r\ntype:\r\n\r\nhttps://docs.gradle.org/current/dsl/org.gradle.api.tasks.JavaExec.html\r\n\r\n*/\r\n', NULL, '', 9, 0),
(2316, 'dale.seo', '', '', '2016-09-25 19:59:33', '', 'Gradle Maven/Ivy Repository 설정', '/*\r\n\r\nTo add a dependency to a Gradle project, we first need to declare the\r\nrepository to fetch the dependency from.\r\n\r\nThe most basic sort of repository is just a folder full of JARs, which Gradle\r\ncalls a flat directory repository.\r\n\r\nAll repository configuration is done inside a `repositories { }` script block.\r\nFor a flat directory repository we add a `flatDir` block and configure the\r\ndirectories we want to include.\r\n\r\n*/\r\n\r\nrepositories {\r\n    flatDir {\r\n        dirs ''libs''\r\n    }\r\n}\r\n\r\n/*\r\n\r\nThis is a great option if you''re migrating an existing project to Gradle, or\r\nusing a dependency that''s not available from a remote repository, but it also means\r\nyou forgo a lot Gradle''s advanced dependency management features.\r\n\r\nThe `repositories` script block also allows you to use shortcut methods for\r\ncommonly used repositories such as Maven Central, Maven Local, or jCenter.\r\nSimply call the appropriate method and the repository will by automatically\r\nadded. This is by far the most common way to declare a repository.\r\n\r\n*/\r\n\r\nrepositories {\r\n    mavenCentral()\r\n    mavenLocal()\r\n    jcenter()\r\n}\r\n\r\n/*\r\n\r\nGradle also supports resolving managed dependencies from Maven and Ivy\r\nrepositories. The syntax for both is the same.\r\n\r\nSimply place your configuration in an `ivy` or `maven` block. For both Ivy and\r\nMaven repositories, the only required configuration element is the location of\r\nthe repository, expressed as a URL.\r\n\r\n*/\r\n\r\nrepositories {\r\n    maven {\r\n        url ''https://repo.foo.org/m2''\r\n    }\r\n}\r\n\r\n/*\r\n\r\nIn some cases, credentials may be required to access a repository. You can\r\neasily provide a username and password by placing them inside a `credentials`\r\nblock.\r\n\r\n*/\r\n\r\nrepositories {\r\n    ivy {\r\n        url ''https://repo.foo.org/ivy''\r\n        credentials {\r\n            username ''user''\r\n            password ''secret''\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n\r\nGradle supports a number of protocols for accessing repositories. In addition\r\nto the standard HTTP and HTTPS, Gradle also supports SFTP and file based\r\nrepositories.\r\n\r\n*/\r\n\r\nrepositories {\r\n    ivy {\r\n        url ''file:///home/user/repo''\r\n    }\r\n}\r\n', NULL, '', 2, 0),
(2317, 'dale.seo', '', '', '2016-09-25 20:03:14', '', 'Gradle Java Dependency 설정', '/*\r\n\r\nNow that we''ve configured our repositories, we can define dependencies on\r\nartifacts contained in those repositories. Dependencies that are resolved from\r\nrepositories are referred to as ''external module dependencies''. Dependencies\r\nare assigned to ''configurations''. We''ll talk more about configuration in\r\ndetail later but for now you can simply consider them to be groups of related\r\ndependencies.\r\n\r\n*/\r\n\r\ndependencies {\r\n    compile ''com.google.guava:guava:18.0''\r\n}\r\n\r\n/*\r\n\r\nFor the examples here we''ll be adding dependencies to the\r\n''compile'' configuration which is added by the Java plugin. Dependencies are\r\nconfigured in the `dependencies { }` script block. The syntax used is the name\r\nof the configuration we want to add the dependency to, followed by a\r\ndependency notation. External module dependencies are identified by their\r\ngroup, name and version.\r\n\r\nA Groovy map syntax can also be used to identify dependencies.\r\n\r\n*/\r\n\r\ndependencies {\r\n    compile group: ''com.google.guava'', name: ''guava'', version: ''18.0''\r\n}\r\n\r\n/*\r\n\r\nIn some cases we simply have files that we want to add as dependencies. File\r\ndependencies are declared very similarly to managed dependencies, however,\r\ninstead of a dependency notation, we simply use a `FileCollection` or\r\n`FileTree`. In this example, we are simply adding two JAR files as\r\ndependencies by creating a `FileCollection`.\r\n\r\n*/\r\n\r\ndependencies {\r\n    compile files(''libs/foo.jar'', ''libs/bar.jar'')\r\n}\r\n\r\n/*\r\n\r\nWe can also use a `FileTree`, which allows us to do things like specify\r\nfilters. This is useful for including a number of files within a directory.\r\n\r\n*/\r\n\r\ndependencies {\r\n    compile fileTree(dir: ''libs'', include: ''*.jar'')\r\n}\r\n\r\n/*\r\n\r\nGradle also supports project dependencies, which are dependencies to other\r\nGradle projects within a single multi-project build. We''ll talk more about\r\nmulti-project builds and project dependencies in the next lesson.\r\n\r\n*/\r\n', NULL, '', 3, 0),
(2318, 'dale.seo', '', '', '2016-09-25 20:07:54', '', 'Gradle Java Plugin Repositories & Rependencies Configuration', '/*\r\n\r\nIn this set of exercises we''ll be working with Gradle''s dependency management\r\nfeatures. Specifically, we''ll be declaring repositories and dependencies for\r\nour project. We''ve already applied the Java plugin, so no need to do that.\r\nAlso, we''ve supplied a simple task you can use to see all the dependencies\r\nthat have been configured for the ''compile'' configuration.\r\n\r\nExercises:\r\n\r\n1. Configure Maven Central as a repository\r\n2. Add a dependency to the ''compile'' configuration for the latest version\r\n   of commons-io.\r\n3. Add a file dependency that includes all the jars in the `libs` directory.\r\n4. Run the `printDependencies` task to verify the dependencies.\r\n5. Run the `printDependencies` task with the --refresh-dependencies flag.\r\n6. Run the `printDependencies` task one more time and note the difference in\r\n   run time.\r\n\r\nHint: You can search for available dependencies in Maven Central online.\r\nUse the following website to find the correct group, name and version\r\nfor commons-io.\r\n\r\nhttp://search.maven.org/\r\n\r\n*/\r\n\r\napply plugin: ''java''\r\n\r\nrepositories {\r\n    mavenCentral() // 1. Add Maven Central repository\r\n}\r\n\r\ndependencies {\r\n    compile ''commons-io:commons-io:2.4'' // 2. Add commons-io dependency\r\n    compile fileTree(dir: ''libs'', include: ''*.jar'') // 3. Add ''lib'' directory\r\n}\r\n\r\ntask printDependencies {\r\n    configurations.compile.each { println it.name }\r\n}\r\n', NULL, '', 3, 0),
(2319, 'dale.seo', '', '', '2016-09-25 20:08:56', '', 'Gradle Java Plugin Defalut 설정 바꾸기', '/*\r\n\r\nIn this series of exercises we''ll be building on our existing knowledge of the\r\nJava plugin. While the Java plugin defaults are sufficient for many projects,\r\nwe will typically need to add additional configuration.\r\n\r\nExercises:\r\n\r\n1. Apply the Java plugin to your project.\r\n2. Modify the ''jar'' task to add a manifest attribute named\r\n   ''Implementation-Version'' with a value of ''1.0''.\r\n3. Configure the main source set so that it includes the ''java'' directory\r\n   as an additional source directory.\r\n4. Use the gradle command-line to build your JAR file.\r\n5. Confirm that the build JAR contains classes from the ''java'' source\r\n   directory.\r\n\r\nHint: Take a look at the Gradle DSL documentation for the Jar task for\r\ninformation on modifying the generated manifest.\r\n\r\nhttps://docs.gradle.org/current/dsl/org.gradle.api.tasks.bundling.Jar.html\r\n\r\nAlso, you can find information on configuring source sets in the Gradle\r\nUser Guide chapter regarding the Java plugin.\r\n\r\nhttps://docs.gradle.org/current/userguide/java_plugin.html#sec:source_sets\r\n\r\n*/\r\n\r\napply plugin: ''java'' // 1. Apply the Java plugin to the project\r\n\r\nsourceSets {\r\n    main {\r\n        java {\r\n            srcDir ''java'' // 3. Add ''java'' directory as a source directory\r\n        }\r\n    }\r\n}\r\n\r\njar {\r\n    manifest {\r\n        attributes ''Implementation-Version'': ''1.0'' // 2. Add manifest attribute\r\n    }\r\n}\r\n', NULL, '', 2, 0),
(2320, 'dale.seo', '', '', '2016-09-25 20:17:18', '', 'Gradle Dependency Report', '/*\r\n\r\nGradle provides a two ways to visualize dependencies: a traditional dependency\r\nreport showing the complete graph of dependencies, and a dependency insight\r\nreport showing how a particular dependency is included in your project.\r\n\r\n*/\r\n\r\napply plugin: ''java''\r\n\r\nrepositories {\r\n    mavenCentral()\r\n}\r\n\r\ndependencies {\r\n    compile ''org.springframework:spring-core:4.1.1.RELEASE''\r\n}\r\n\r\n/*\r\n\r\nHere we have a simple Java project with a single dependency on the spring core\r\nlibrary. We can generate a dependency report by running the ''dependencies''\r\ntask.\r\n\r\n    $ gradle dependencies\r\n\r\nGradle displays the project dependencies, including transitive dependencies.\r\nThe report also breaks out dependencies by each configuration. To see the\r\ndependencies for a particular configuration we can use the ''--configuration''\r\ncommand-line option.\r\n\r\n    $ gradle dependencies --configuration runtime\r\n\r\nThe dependency insight report shows how a particular dependency is included in\r\nour project. This report is especially helpful when identifying version\r\nconflicts. To run the ''dependencyInsight'' task we need to specify the\r\ndependency we''re interested in using the ''--dependency'' command-line option.\r\n\r\nLet''s run an insight report on the ''commons-logging'' dependency.\r\n\r\n    $ gradle dependencyInsight --dependency commons-logging\r\n\r\nWe can tell from our report that ''commons-logging'' is a\r\ndependency of ''spring-core'', which in turn is one of our project''s compile\r\ndependencies.\r\n\r\nWe mentioned that one of main usages of dependency reports is to help identify\r\ndependency conflicts. Let''s know introduce a conflict and see how this affects\r\nthe output of our reports. Let''s add an explicit dependency to version 1.2 of\r\nthe ''commons-logging'' library to our project.\r\n\r\n*/\r\n\r\ndependencies {\r\n    compile ''commons-logging:commons-logging:1.2''\r\n}\r\n\r\n/*\r\n\r\nLet''s start by running the dependencies task again.\r\n\r\n    $ gradle dependencies\r\n\r\n''commons-logging'' is now listed twice in our dependency report. You can see\r\nthat our project depends on version 1.2, where as ''spring-core'' depends on\r\nversion 1.1.3. This introduces a conflict, which Gradle will then attempt to\r\nresolve. By default, Gradle resolves version conflicts to the newest version,\r\nin this case 1.2. In our report this is indicated with the arrow, showing us\r\nthat version 1.2 is being chosen over 1.1.3.\r\n\r\nWe can get similar information from the dependency insight report.\r\n\r\n    $ gradle dependencyInsight --dependency commons-logging\r\n\r\nAgain we can see that the commons-logging is shown twice, once as a direct dependency of compile, and once as a transitive dependency of spring core.\r\n\r\n*/\r\n', NULL, '', 7, 0),
(2321, 'dale.seo', '', '', '2016-09-25 20:22:22', '', 'Gradle Dependency Scope', '/*\r\n\r\nDifferent dependencies may be needed at different times in the build process.\r\nLogically related dependencies are grouped into configurations. So far we''ve\r\nbeen adding dependencies to the ''compile'' configuration, but the Java plugin\r\ncreates other configurations as well, such as runtime, testCompile and\r\ntestRuntime. The Java plugin ensures that the specified dependencies are on\r\nthe classpath when the corresponding tasks are run.\r\n\r\nDependencies can be added to any of these configurations by simply using the\r\nname of the configuration followed by a dependency notation.\r\n\r\n*/\r\n\r\napply plugin: ''java''\r\n\r\nrepositories {\r\n    mavenCentral()\r\n}\r\n\r\ndependencies {\r\n    compile ''commons-logging:commons-logging:1.1.3''\r\n    testCompile ''junit:junit:4.12''\r\n}\r\n\r\n/*\r\n\r\nHere we have added a dependency to the ''testCompile'' configuration. This\r\ndependency will only be available from our test code.\r\n\r\nConfigurations can extend other configurations. For example, the ''testCompile''\r\nconfiguration extends from the ''compile'' configuration, which means that\r\n''compile'' dependencies are automatically included in ''testCompile''. We can\r\nverify this by generating a dependency report.\r\n\r\n    $ gradle dependencies\r\n\r\nHere we can see that the ''compile'' configuration contains only the ''commons-\r\nlogging'' dependency, however, ''testCompile'' contains both ''junit'' and\r\n''commons-logging''.\r\n\r\nIf you have a more advanced build, with dependencies that don''t fit into a\r\nconfiguration defined by the Java plugin, you can create a custom\r\nconfiguration. Just add the name of your configuration to the `configurations`\r\nscript block. We can then assign dependencies to this configuration.\r\n\r\n*/\r\n\r\nconfigurations {\r\n    custom\r\n}\r\n\r\ndependencies {\r\n    custom ''com.google.guava:guava:18.0''\r\n}\r\n\r\n/*\r\n\r\nWe can run a dependency report to see that we have a new project configuration\r\nnamed ''custom'' with the ''guava'' dependency.\r\n\r\n    $ gradle dependencies\r\n\r\nConfigurations are really just fancy file collections and can be used anywhere\r\na file collection can be used, such as in Copy tasks. This is useful if we\r\nwant to download some dependencies from a remote repository and bundle them in\r\nour project somehow.\r\n\r\n*/\r\n\r\ntask copyDependencies(type: Copy) {\r\n    from configurations.custom\r\n    into ''build/libs''\r\n}\r\n', NULL, '', 8, 0),
(2322, 'dale.seo', '', '', '2016-09-26 19:45:49', '', 'Gradle Unit Tests', '/*\r\n\r\nGradle provides built-in support for testing your applications. Core support\r\nis provided for JUnit and TestNG testing frameworks. To get started running\r\nunit tests all you need to do is place your tests in the ''src/test/java''\r\ndirectory when using the Java plugin. You can, of course, change the location\r\nof your test code by configuring the ''test'' source set. Gradle will\r\nautomatically compile and run any appropriately annotated tests that are found\r\nin the ''test'' source set. The only things we have to manually configure are\r\nour test dependencies. In this example we''re using JUnit as our testing\r\nframework so we add a ''junit'' dependency to the ''testCompile'' configuration.\r\n\r\nRunning our tests is easy, just run the ''test'' task.\r\n\r\n    $ gradle test\r\n\r\nYou''ll notice Gradle performs all the required steps to run our tests. It\r\nfirst compiles our production code, followed by our test code, and then runs\r\nour tests. In this case, the build was successful, indicating that all of our\r\ntests passed.\r\n\r\nGradle also provides detailed reports on our test execution. These reports are\r\nplaced in the ''build/reports'' directory. Let''s take a look at one of these\r\nreports. On Mac you can use:\r\n\r\n    $ open build/reports/tests/index.html\r\n\r\nIn this case we can see that we have 1 test and that it was successful. Of\r\ncourse in a real project we would likely have a number of tests.\r\n\r\nIn case of a test failure, our build will fail with a message indicating which\r\ntest or tests failed. We can then take a look at the detailed report to try\r\nand troubleshoot while our test is failing. In this case you can see the\r\nfailed test is identified and a stacktrace is provided for debugging purposes.\r\n\r\n*/\r\n\r\napply plugin: ''java''\r\n\r\nrepositories {\r\n    mavenCentral()\r\n}\r\n\r\ndependencies {\r\n    testCompile ''junit:junit:4.12''\r\n}\r\n', NULL, '', 2, 0),
(2323, 'dale.seo', '', '', '2016-09-26 20:01:07', '', 'Gradle Wrapper', '/*\r\n\r\nWe used the Gradle wrapper way back at the start of this class to run our\r\nfirst task, before we had even installed Gradle. That''s a pretty cool party\r\ntrick, but the real strength of the wrapper is that you can put your build\r\ntool under version control, so everyone building your project is building it\r\nwith the exact same tool.\r\n\r\nThe Gradle wrapper is comprised of four files. A JAR, a properties file, and a\r\npair of scripts, a shell script for Unix and Mac, and a batch script for\r\nWindows. When you pass a command to one of these scripts, it will first check\r\nif Gradle is installed, download it if necessary, then execute your command.\r\n\r\nA wrapper can be created by running the built-in ''wrapper'' task. The wrapper\r\nscripts are placed in the root of your project directory and the other files\r\nin the ''gradle/wrapper'' directory.\r\n\r\nWe can now run our Gradle build using the wrapper. We use the wrapper\r\nidentically to how we would the ''gradle'' command.\r\n\r\n    $ ./gradlew tasks\r\n\r\nIf this is the first time using the wrapper, it will go ahead and download the\r\nappropriate Gradle distribution and cache it locally. We can also explicitly\r\nconfigure what version of Gradle to use by setting the `gradleVersion`\r\nproperty on the ''wrapper'' task. Let''s set the version to ''2.2'' and run the\r\n''wrapper'' task again.\r\n\r\n*/\r\n\r\nwrapper {\r\n    gradleVersion = ''2.2''\r\n}\r\n\r\n/*\r\n\r\nIf we haven''t already downloaded this particular version of Gradle, the\r\nwrapper will do so for us. Let''s run the wrapper with the ''--version'' option\r\nto confirm we are using the correct version.\r\n\r\n    $ ./gradlew --version\r\n\r\nAs you can see, the wrapper is now using version 2.2 of Gradle. This\r\ninformation is saved in the gradle-wrapper.properties file in the\r\n''gradle/wrapper'' directory. We can also set the wrapper version by modifying\r\nthis file. Let''s set the version back to 2.3 by changing the value of of the\r\n`distributionUrl` property.\r\n\r\nLet''s run the wrapper with the ''--version'' option and verify the\r\nresult.\r\n\r\n    $ ./gradlew --version\r\n\r\nThe version is now 2.3. This is a really important feature, as it allows us to\r\ncentrally control what version of Gradle is used to build our project. In\r\npractice, the Gradle wrapper files, to include the scripts, jar and properties\r\nfile, will be committed to source control. This serves two main functions.\r\nFirst, it means that everything that is needed to get up and running with\r\ndevelopment of our project is included in the source repository. Second, it\r\nmeans that the Gradle version is also version controlled, which eliminates the\r\npossibility that a developer encounters problems with the build due to using\r\nthe wrong version of Gradle.\r\n\r\n */\r\n', NULL, '', 3, 0),
(2324, 'dale.seo', '', '', '2016-09-26 20:22:17', '', 'Gradle Init Plugin', '자바 프로젝트 생성할 때 maven 대신에 gradle 사용하기\r\n\r\ngradle init --type java-library\r\n\r\nhttps://docs.gradle.org/current/userguide/build_init_plugin.html', NULL, '', 15, 0),
(2325, 'dale.seo', '', '', '2016-09-27 13:41:00', '', 'Object.assgin() 메소드', '객체 병합을 해줌.\r\n주로 사용자 세팅값과 기본 세팅값을 병함할 때 사용됨\r\n\r\nhttps://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\r\n\r\n\r\n============================================================================\r\nlet defaults = {\r\n  container:       ".main",\r\n  isActiveClass:   ".is-active"\r\n};\r\n\r\nlet options1 = {\r\n  container:       ".main-container",\r\n  isActiveClass:   ".is-active-element"\r\n};\r\n\r\nlet options2 = {\r\n  isActiveClass:   ".is-active-content"\r\n};\r\n\r\nlet settings = Object.assign({}, defaults, options1, options2);', NULL, '', 2, 0),
(2326, 'dale.seo', '', '', '2016-09-27 14:28:19', '', 'Spring Session - RedisOperationsSessionRepository', 'http://docs.spring.io/spring-session/docs/current/reference/html5/#api-redisoperationssessionrepository', NULL, '', 7, 0),
(2327, 'dale.seo', '', '', '2016-09-27 15:20:54', '', 'Gradle Guide by Spring', 'http://spring.io/guides/gs/gradle/\r\n\r\n\r\n\r\napply plugin: ''java''\r\napply plugin: ''application''\r\n\r\nmainClassName = ''hello.HelloWorld''\r\n\r\nrepositories {\r\n    mavenCentral()\r\n}\r\n\r\njar {\r\n    baseName = ''gs-gradle''\r\n    version =  ''0.1.0''\r\n}\r\n\r\nsourceCompatibility = 1.8\r\ntargetCompatibility = 1.8\r\n\r\ndependencies {\r\n    compile "joda-time:joda-time:2.2"\r\n    testCompile "junit:junit:4.12"\r\n}', NULL, '', 12, 0),
(2328, 'dale.seo', '', '', '2016-09-27 21:41:51', '', 'Thread 클래스의 join 메소드', 'https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html\r\n\r\nThread 클래스의 join 메소드가 호출된 라인에서 다음 라인이 바로 실행되지 않고,\r\n해당 쓰레드의 실행이 종료될 때 까지 대기시킨다.\r\n\r\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\npublic static void main(String[] args) throws InterruptedException {\r\n        ProcessingThread pt = new ProcessingThread();\r\n        Thread t1 = new Thread(pt, "t1");\r\n        t1.start();\r\n        Thread t2 = new Thread(pt, "t2");\r\n        t2.start();\r\n        //wait for threads to finish processing\r\n        t1.join();\r\n        t2.join();\r\n        System.out.println("Processing count=" + pt.getCount());\r\n    }', NULL, '', 5, 0),
(2329, 'dale.seo', '', '', '2016-09-28 16:51:54', '', 'Embeded Redis', 'https://github.com/kstyrc/embedded-redis\r\n\r\n# Spring Data Redis 검증\r\nhttps://github.com/kstyrc/embedded-redis/blob/master/src/test/java/redis/embedded/SpringDataConnectivityTest.java\r\n\r\n', NULL, '', 7, 0),
(2330, 'dale.seo', '', '', '2016-09-28 17:52:32', '', 'Thread의 start()와 run() 이해 (쓰레드 동작 메커니즘)', 'Thread 객체의 start() 메소드가 호출하면 별개의 전용 호출스택(call stack)을 생성한 다음에, 그 스택에서 run()을 호출한다.\r\n쓰레드가 종료되면 해당 호출스택은 소멸된다.\r\n\r\n1) main 메서드에서 쓰레드의 start 메서드를 호출한다.\r\n2) start 메서드는 쓰레드가 작업을 수행하는데 사용될 새로운 호출스택을 생성한다.\r\n3) 생성된 호출스택에 run 메서드를 호출해서 쓰레드가 작업을 수행하도록 한다.\r\n4) 이제는 호출스택이 2개이기 때문에 스케줄러가 정한 순서에 의해서 번갈아 가면서 실행된다.\r\n\r\n==============================================================\r\n예외를 일으켜서 어느 Call Stack에서 실행되었는지 확인\r\n==============================================================\r\npublic class ThreadCallStackTest {\r\n\r\n	public static void main(String[] args) {\r\n		/* Execute on the same call stack */\r\n		Runnable runnable = new ExceptionRunnable();\r\n		runnable.run(); // at seo.dale.practice.java.thread.ThreadEx2.main\r\n\r\n		/* Execute on a different call stack */\r\n		Thread thread = new Thread(runnable);\r\n		thread.start(); // at java.lang.Thread.run\r\n	}\r\n\r\n}\r\n\r\nclass ExceptionRunnable implements Runnable {\r\n	@Override\r\n	public void run() {\r\n		try {\r\n			throw new Exception();\r\n		} catch (Exception e) {\r\n			e.printStackTrace();\r\n		}\r\n	}\r\n}', NULL, '', 7, 0),
(2331, 'dale.seo', '', '', '2016-09-29 12:24:33', '', 'Heroku에 Angular2 배포하기', 'http://json.postype.com/post/226227/', NULL, '', 2, 0),
(2332, 'dale.seo', '', '', '2016-09-30 10:38:38', '', '비트 연산자를 이용한 빠른 짝홀수 체크', 'n & 1 == 0 이면, 짝수\r\nn & 1 == 1 이면, 홀수\r\n\r\n원리 : 제일 오른쪽 비트가 1인지 아닌지를 체크', NULL, '', 4, 0),
(2333, 'dale.seo', '', '', '2016-09-30 10:56:25', '', 'JOptionPane으로 간단하게 GUI 대화상자에 입력값 받기', '		String input = JOptionPane.showInputDialog("아무 값이나 입력하세요");\r\n		System.out.println("입력하신 값은 [" + input + "]입니다.");', NULL, '', 2, 0),
(2334, 'dale.seo', '', '', '2016-09-30 11:24:20', '', 'JUnit에서 System.in 사용하기', 'http://stackoverflow.com/questions/1647907/junit-how-to-simulate-system-in-testing\r\n\r\nhttp://stefanbirkner.github.io/system-rules/\r\n\r\npublic void MyTest {\r\n  @Rule\r\n  public final TextFromStandardInputStream systemInMock\r\n    = emptyStandardInputStream();\r\n\r\n  @Test\r\n  public void readTextFromStandardInputStream() {\r\n    systemInMock.provideLines("foo");\r\n    Scanner scanner = new Scanner(System.in);\r\n    assertEquals("foo", scanner.nextLine());\r\n  }\r\n}', NULL, '', 2, 0),
(2335, 'dale.seo', '', '', '2016-09-30 14:26:34', '', '10초 동안 사용자가 입력하지 않으면 종료하는 프로그램 예제', 'package seo.dale.practice.java.lang.thread;\r\n\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * 10초 동안 사용자가 입력하지 않으면 종료하는 프로그램 예제\r\n * @author Dale Seo\r\n */\r\npublic class InputTimeout {\r\n\r\n	private static boolean done = false;\r\n\r\n	public static void main(String[] args) {\r\n		System.out.println("10초 안에 값을 입력해야 합니다.");\r\n\r\n		Thread inputThread = new Thread(() -> {\r\n			Scanner io = new Scanner(System.in);\r\n			String input = io.next();\r\n			done = true;\r\n			System.out.println("입력하신 값은 [" + input + "]입니다.");\r\n			io.close();\r\n		});\r\n\r\n		Thread countThread = new Thread(() -> {\r\n			for (int i = 9; i > -1; i--) {\r\n				if (done) return;\r\n				System.out.println(i + "초 남았습니다.");\r\n				try {\r\n					Thread.sleep(1000);\r\n				} catch (InterruptedException e) {\r\n					e.printStackTrace();\r\n				}\r\n			}\r\n			System.out.println("10초 동안 값이 입력되지 않아 종료합니다.");\r\n			System.exit(0);\r\n		});\r\n\r\n		inputThread.start();\r\n		countThread.start();\r\n	}\r\n\r\n}', NULL, '', 2, 0),
(2336, 'dale.seo', '', '', '2016-09-30 16:37:35', '', '모든 쓰레드와 콜스택 모니터링', '쓰레드의 getAllStackTraces(); 를 활용하면, 해당 쓰레드 뿐만 아니라 같은 JVM에서 실행되는 모든 쓰레드를 모니터링할 수 있다.\r\n또한 system 그룹에 속하는 system 쓰레드도 함께 나온다.\r\n\r\n\r\n=========================================\r\npackage seo.dale.practice.java.lang.thread;\r\n\r\nimport java.util.Map;\r\n\r\n/**\r\n * Monitors all threads and their call stack.\r\n * @author Dale Seo\r\n */\r\npublic class ThreadMonitor {\r\n\r\n	public static void main(String[] args) {\r\n		new Thread(() -> {\r\n			try {\r\n				Thread.sleep((int) (1000 * Math.random()));\r\n			}catch(Exception e) {\r\n			}\r\n		}, "My Thread").start();\r\n\r\n		Map<Thread, StackTraceElement[]> map = Thread.getAllStackTraces();\r\n		for (Map.Entry<Thread, StackTraceElement[]> entry : map.entrySet()) {\r\n			System.out.println(">>> " + entry.getKey());\r\n\r\n			for (StackTraceElement stackTraceElement : entry.getValue()) {\r\n				System.out.println(stackTraceElement);\r\n			}\r\n\r\n			System.out.println();\r\n		}\r\n	}\r\n\r\n}', NULL, '', 6, 0),
(2337, 'dale.seo', '', '', '2016-09-30 19:34:30', '', 'Python2에서 Python3의 Interger, float division operator 사용하기', 'from __future__ import division\r\n\r\ndef ceil(A, B):\r\n    return A // B + bool(A % B)', NULL, '', 7, 0),
(2338, 'dale.seo', '', '', '2016-10-01 10:39:26', '', 'JavaScript Set', 'https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Set\r\n차집합, 교집합이 불편한 듯...\r\n\r\n// Convert an array to a set\r\nvar set = new Set([1, 2, 3]);\r\nconsole.log(set);\r\n\r\n// Convert a set to an array\r\nvar arr = [...set];\r\n// var arr = Array.from(set);\r\nconsole.log(arr);\r\n\r\nlet setA = new Set([1, 2, 3]);\r\nlet setB = new Set([3, 4, 5]);\r\nconsole.log(">>> setA : " + setA);\r\nconsole.log(">>> setB : " + setB);\r\n\r\n// Difference\r\nlet difference = [...setA].filter(x => !setB.has(x));\r\nconsole.log(">>> difference : " + difference);\r\n\r\n// Intersection\r\nlet intersection = [...setA].filter(x => setB.has(x));\r\nconsole.log(">>> intersection : " + intersection);', NULL, '', 6, 0),
(2339, 'dale.seo', '', '', '2016-10-02 09:11:48', '', 'Javascript Truthy/Falsey', '자바스크립트에서 조건문을 다룰 때, 정확하게는 True/Flase라고 얘기할 수는 없지만,\r\n대강 True/False로 쳐주는 개념이 있는데 얘네들을 Truthy/Falsey라고 한다.\r\n\r\n다음 Falsey에 대한 Rule만 기억하고, 나머지는 모두 Truthy라고 보면 된다.\r\n\r\n- 0\r\n- ''''\r\n- undefined\r\n- null\r\n- NaN\r\n\r\n빈 배열과 객체는 Falsey하지 않으므로 주의한다. (Python에서는 빈 배열과 객체도 Falsey로 간주함)', NULL, '', 2, 0),
(2340, 'dale.seo', '', '', '2016-10-02 20:06:10', '', '리모트 브랜치 삭제 후 로컬 브랜치 삭제하기', '[ 특정 브랜치 ]\r\n$ git push origin :<branch>\r\n$ git branch -d <branch>\r\n\r\n[ 리코트 브랜치에서 삭제된 모든 브랜치를 로컬에서도 삭제 ]\r\n$ git remote prune origin\r\n또는\r\n$ git remote update --prune', NULL, '', 6, 0),
(2341, 'dale.seo', '', '', '2016-10-02 20:25:48', '', 'git rebase 사용법', 'merge 때문에 오염되는 커밋 이력을 일자로 깔끔하게 펴준다.\r\n원리 : 현재 브랜치와 rebase 대상 브랜치의 공통 부모 커밋 이후에 발생한 모든 현재 브랜치의 커밋들을 임시 영역에 옮겨 놓고 rebase 대상 브랜치의 커밋들을 먼저 현재 브랜치에 올리고, 그 다음에 임시 영역에 있던 현대 브랜치의 커밋들을 올린다.\r\n\r\n[ fetch - rebase : 원격 브랜치를 커밋들을 로컬 브랜치의 커밋들 아래로 내리기 ]\r\n$ git fetch\r\n$ git rebase\r\n\r\n[ rebase - merge : 다른 브랜치의 커밋들을 현재 브랜치의 커밋들 아래로 내려놓고, 현재 브랜치로 다른 브랜치를 머지 시키기 ]\r\n$ git chekcout <다른 브랜치>\r\n$ git rebase <현재 브랜치>\r\n$ git chekcout <현재 브랜치>\r\n$ git merge <다른 브랜치 > : fast forward 됨', NULL, '', 14, 0),
(2343, 'dale.seo', '', '', '2016-10-02 20:58:37', '', 'Git 커밋 메세지 편집 툴 변경', '\r\n[ VI 에디터 ]\r\n$ git config --global core.editor vi\r\n\r\n[ Emas 에디터 ]\r\n$ git config --global core.editor emacs\r\n\r\n[ 머지툴 변경 ]\r\n$ git config --global merge.tool opendiff', NULL, '', 3, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(2344, 'dale.seo', '', '', '2016-10-03 18:28:59', '', '자바스크립트 배열 총정리', '# 기본\r\nhttp://www.w3schools.com/Js/js_arrays.asp\r\n\r\n# 메서드\r\nhttp://www.w3schools.com/Js/js_array_methods.asp\r\n\r\n# 정렬\r\nhttp://www.w3schools.com/Js/js_array_sort.asp\r\n\r\n# 레퍼런스\r\nhttp://www.w3schools.com/jsref/jsref_obj_array.asp', NULL, '', 4, 0),
(2345, 'dale.seo', '', '', '2016-10-04 09:05:28', '', 'Binary Search Tree Visualization', 'https://www.cs.usfca.edu/~galles/visualization/BST.html', NULL, '', 2, 0),
(2346, 'dale.seo', '', '', '2016-10-04 10:36:15', '', 'Thread 상태 정리', '1) NEW : 쓰레드가 생성되고 아직 start()가 호출되지 않은 상태\r\n2) RUNNABLE : 실행 가능한 상태 (CPU의 Dispatch Queue에 등록된 상태)\r\n2-1) RUNNING :  CPU를 차지하고 실행 중 (RUNNABLE에서 RUNNING으로 전환은 O/S가 알아서 자동으로, RUNNING에서 RUNNABLE은 yield 메소드 호출)\r\n3) BLOCKED : 동기화 블럭에 의해서 일시정지된 상태 (lock이 풀릴 때 까지 기다리는 상태\r\n4) WAITING, TIMED_WAITING : 실행 가능하지 않은 일시정지 상태. (TIMED_WATING은 일시 정지시간이 지정된 경우)\r\n5) TERMINATED : 쓰레드의 작업이 종료되거나, 어떤 상태에서든지 stop()이 호출되어 실행 도중 끝난 상태', NULL, '', 11, 0),
(2347, 'dale.seo', '', '', '2016-10-04 10:42:55', '', 'Thead Dead Lock 교착상태', '교착 상태(dead lock)란 두 쓰레드가 lock을 건 상태에서 서로 lock이 풀리기를 기다리는 상황으로 작업이 진해오디지 않고 영원히 기다리게 되는 상황을 말한다.\r\nThread에 정의된 stop(), suspend(), resume()과 같이 쓰레드의 상태를 변경하는 메세지들은 교착상태를 일으킬 가능성이 높다는 이유로 deprecated되었다.\r\n만일 객체에 lock을 건 상태에서 쓰레드가 종료되거나 정지된다면, 이 객체를 사용하려는 쓰레드들은 영원히 기다려야 할 것이다.\r\n따라서 suspend() 대신에 wait()를, resume() 대신 notify()를 사용해야 한다.', NULL, '', 2, 0),
(2348, 'dale.seo', '', '', '2016-10-04 12:38:09', '', '파일 맨 위에 문자열 라인 추가하기', 'http://stackoverflow.com/questions/9533679/how-to-insert-a-text-at-the-beginning-of-a-file\r\n\r\n# .gitignore 파일 맨 위에 "*.iml" 파일 추가\r\nsed -i ''1s/^/*.iml /'' .gitignore', NULL, '', 2, 0),
(2349, 'dale.seo', '', '', '2016-10-05 12:34:48', '', 'Gulp + Browserify 설명 끝판왕', 'https://www.viget.com/articles/gulp-browserify-starter-faq', NULL, '', 2, 0),
(2350, 'dale.seo', '', '', '2016-10-05 12:35:53', '', 'Gulp 한국어 참조 문서', 'https://github.com/preco21/gulp-docs-ko', NULL, '', 2, 0),
(2351, 'dale.seo', '', '', '2016-10-05 14:13:22', '', 'AWS 서비스별 무료 범위', 'http://gun0912.tistory.com/45', NULL, '', 2, 0),
(2352, 'dale.seo', '', '', '2016-10-06 22:19:01', '', 'Gradle Tasks, Properties 확인', '플러그인을 사용할 때, 어떤 Tasks와 Properties 들이 프리 세팅되어 있는지 확인해볼 때 좋다.\r\n\r\n$ gradle tasks\r\n\r\n$ gradle properties', NULL, '', 2, 0),
(2353, 'dale.seo', '', '', '2016-10-06 22:30:04', '', 'Gradle Java Plugin 주요 Task', '$ gradle build\r\n : assemble + check\r\n\r\n$ gradle assemble\r\n : classes + jar\r\n\r\n$ gradle check\r\n : testClasses + test\r\n\r\n$ gradle clean\r\n : build 디렉토리 삭제', NULL, '', 2, 0),
(2354, 'dale.seo', '', '', '2016-10-06 22:32:44', '', 'Gradle Java Plugin 디렉토리 Convetion', '- src/main/java : source code\r\n- src/main/resources : JAR 파일에 포함되는 리소스\r\n- src/test/java : test srouce code\r\n- src/test/resources : 테스트할 때 classpath에 올라가는 리소스\r\n- build : classes\r\n- build/libs : JAR', NULL, '', 2, 0),
(2355, 'dale.seo', '', '', '2016-10-06 22:38:27', '', 'Gradle Install (Using SDKMAN)', 'https://gradle.org/gradle-download/?_ga=1.113109772.962738933.147576086\r\n\r\nSDKMAN으로 리눅스, 윈도우 모두 설치 가능!\r\n\r\n$ curl -s https://get.sdkman.io | bash\r\n$ sdk install gradle 3.1', NULL, '', 7, 0),
(2356, 'dale.seo', '', '', '2016-10-09 12:52:20', '', 'Spring Boot CLI Install (Using SDKMAN)', 'http://docs.spring.io/spring-boot/docs/current/reference/html/getting-started-installing-spring-boot.html#getting-started-sdkman-cli-installation\r\n\r\n$ sdk install springboot\r\n$ spring --version\r\nSpring Boot v1.4.1.RELEASE\r\n\r\n\r\n# Mac에서는 Homebrew로 설치 가능\r\nhttp://docs.spring.io/spring-boot/docs/current/reference/html/getting-started-installing-spring-boot.html#getting-started-homebrew-cli-installation', NULL, '', 15, 0),
(2357, 'dale.seo', '', '', '2016-10-09 13:08:48', '', 'Spring Boot 어플리케이션을 Heroku에 배포하기', 'https://devcenter.heroku.com/articles/deploying-spring-boot-apps-to-heroku\r\n\r\n매우 간단...\r\n\r\n# Spring Boot Gradle 어플리케이션 배포하기\r\n\r\nhttps://devcenter.heroku.com/articles/deploying-gradle-apps-on-heroku#default-web-process-type\r\n\r\n## 주의사항\r\n\r\nProfile을 매뉴얼로 작성 시 다음과 같이 jar 파일 이름을 *.jar로 설정해줄 것!\r\njar 파일명이 build_0e4e314acb07cdc94c47865df532e331-0.0.1-SNAPSHOT.jar 처럼 동적으로 결정되기 때문\r\n\r\n==================================================================================\r\nweb: java -Dserver.port=$PORT -Dspring.profiles.active=production $JAVA_OPTS -jar build/libs/*.jar\r\n\r\n', NULL, '', 10, 0),
(2359, 'dale.seo', '', '', '2016-10-09 23:14:55', '', 'Heroku에서 제안하는 PostgresSQL 로컬 설치 방법', 'https://devcenter.heroku.com/articles/heroku-postgresql#local-setup', NULL, '', 3, 0),
(2360, 'dale.seo', '', '', '2016-10-10 09:16:06', '', 'Java의 Set으로 교집합/합집합/차집합 구하기', '- 교집합 : retainAll\r\n- 합집합 : addAll\r\n- 차집합 : removeAll\r\n\r\n=============================================================================\r\n	/**\r\n	 * The intersection of the two sets.\r\n	 */\r\n	@Test\r\n	public void testRetainAll() {\r\n	    Set<Integer> setA = new HashSet<>(Arrays.asList(1, 2, 3, 4, 5));\r\n		Set<Integer> setB = new HashSet<>(Arrays.asList(9, 8, 7, 6, 5, 4, 3));\r\n	    setA.retainAll(setB);\r\n	    Set<Integer> intersection = new HashSet<>(Arrays.asList(3, 4, 5));\r\n	    assertEquals(setA, intersection);\r\n    }\r\n\r\n	/**\r\n	 * The union of the two sets.\r\n	 */\r\n	@Test\r\n	public void testAddAll() {\r\n	    Set<Integer> setA = new HashSet<>(Arrays.asList(1, 2, 3, 4, 5));\r\n	    Set<Integer> setB = new HashSet<>(Arrays.asList(9, 8, 7, 6, 5, 4, 3));\r\n	    setA.addAll(setB);\r\n	    Set<Integer> union = new HashSet<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9));\r\n	    assertEquals(setA, union);\r\n    }\r\n\r\n	/**\r\n	 * The difference of the two sets.\r\n	 */\r\n	@Test\r\n	public void testRemoveAll() {\r\n		Set<Integer> setA = new HashSet<>(Arrays.asList(1, 2, 3, 4, 5));\r\n		Set<Integer> setB = new HashSet<>(Arrays.asList(9, 8, 7, 6, 5, 4, 3));\r\n		setA.removeAll(setB);\r\n		Set<Integer> union = new HashSet<>(Arrays.asList(1, 2));\r\n		assertEquals(setA, union);\r\n	}', NULL, '', 4, 0),
(2361, 'dale.seo', '', '', '2016-10-10 12:09:44', '', 'Heroku PostgreSQL Add-on 관련 CLI', 'DB Add-on 추가\r\n```\r\n$ heroku addons:create heroku-postgresql\r\n```\r\n\r\n브라우져에서 관리콘솔 열기\r\n```\r\n$ heroku addons:open heroku-postgresql\r\n```\r\n\r\nDATABSE_URL 확인\r\n```\r\n$ heroku config\r\n```\r\n\r\nJDB_DATABSE_URL 확인\r\n```\r\n$ heroku run echo \\$JDBC_DATABASE_URL\r\n```\r\n\r\nDB 설정 조회\r\n```\r\n$ heroku pg\r\n```\r\n\r\nDB 로그만 조회\r\n```\r\n$ heroku logs -p postgres -t\r\n```\r\n\r\nDB 상태 체크\r\n```\r\n$ heroku pg:diagnose\r\n```\r\n\r\nDB 관련 실행 프로세스 조회\r\n```\r\n$ heroku pg:ps\r\n```\r\n\r\nPSQL 터미널 접속\r\n```\r\n$ heroku pg:psql\r\n```', NULL, '', 18, 0),
(2358, 'dale.seo', '', '', '2016-10-09 22:38:59', '', 'Spring Boot CLI 주요 명령 (spring init)', 'http://docs.spring.io/spring-boot/docs/current/reference/html/cli-using-the-cli.html\r\n[ 웹버전 ]\r\nhttps://start.spring.io/\r\n\r\n[ 옵션 ]\r\n--dependencies(-d) : 스타터 의존성\r\n--packaging(-p) : 패키징 (default: jar)\r\n-build : 빌드도구 (default: maven)\r\n--extract(-x) : 압축풀기\r\n--force: 빌드도구를 바꿀 때 사용 (gradle -> maven)\r\n\r\n$ spring help init\r\n도움말 보기\r\n\r\n$ spring init --list\r\n옵션 보기\r\n\r\n$ spring init -x -d=web --build=gradle\r\nGradle Web 프로젝트 생성\r\n\r\n$ spring init --dependencies=web myapp\r\nMaven Web 프로젝트 생성\r\n\r\n$ spring init --build=gradle --java-version=1.8 --dependencies=websocket --packaging=war sample-app.zip\r\nGradle 프로젝트 생성\r\n\r\n$ spring init commerce --dependencies=web,data-jpa --type=gradle-project --groupId=seo.dale --artifactId=commerce\r\n커머스 프로젝트 생성 예\r\n\r\n$ spring init -dweb,data-jpa,security --build gradle -x\r\nweb, jpa, security 스타터에 의존서을 가지는 프로젝트 압축 파일을 현재 디렉토리에 압축 풀기\r\n\r\n==================================================================================\r\n\r\n$ spring init -d=web,thymeleaf,data-jpa,h2 --groupId=seo.dale --artifactId=readinglist --name="Reading List" --package-name=readinglist --description="Reading List Demo" --build gradle readinglist\r\n', NULL, '', 39, 0),
(2362, 'dale.seo', '', '', '2016-10-10 12:37:00', '', 'Connecting to Relational Databases on Heroku with Java', 'https://devcenter.heroku.com/articles/connecting-to-relational-databases-on-heroku-with-java\r\n\r\n어플리케이션에서는 DATABASE_URL 환경변수 대신에 JDBC_DATABASE_URL 환경변수를 사용하여 코딩한다.\r\n', NULL, '', 6, 0),
(2363, 'dale.seo', '', '', '2016-10-10 12:59:14', '', 'Externalized Configuration', 'http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html\r\n\r\n어플리케이션 설정을 yaml이나 properties 파일로 분리하는 방법 설명', NULL, '', 3, 0),
(2364, 'dale.seo', '', '', '2016-10-10 13:16:57', '', 'PostgreSQL 터미널 접속 방법', 'https://www.postgresql.org/docs/9.1/static/app-psql.html\r\n\r\npsql -h "ec2-54-243-50-185.compute-1.amazonaws.com" -p "5432" -d "d78010iqv9bjb7" -U "gigzyhypludzve" -W "JXvob6XCkIpp9JzGpfh8n0Pyws"', NULL, '', 2, 0),
(2365, 'dale.seo', '', '', '2016-10-10 13:17:55', '', 'PostgreSQL 설치 방법', '# Linux\r\n```\r\n$ sudo apt-get install postgresql\r\n```', NULL, '', 2, 0),
(2366, 'dale.seo', '', '', '2016-10-10 19:21:41', '', 'Python Set으로 교집합/합집합/차집합', '&, |, - 연산자를 지원함\r\n\r\n>>> x = {1, 2, 3}\r\n>>> y = {3, 4, 5}\r\n>>> x & y\r\n{3}\r\n>>> x | y\r\n{1, 2, 3, 4, 5}\r\n>>> x - y\r\n{1, 2}\r\n', NULL, '', 2, 0),
(2367, 'dale.seo', '', '', '2016-10-11 16:07:44', '', 'Spring Context 밖에서 Property 읽는 편법', 'package com.skplanet.storeplatform.ccs.runtime.session;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.stereotype.Component;\r\n\r\n/**\r\n * Spring Context 범위 밖에서 세션 활성화 여부를 조회하기 위함\r\n * TODO: 쿠키가 제거되면 함께 제거 요망\r\n * @author 서대영(DAEYOUNG SEO)/Onestore/SKP\r\n */\r\n@Component\r\npublic class SessionGlobalSettings {\r\n\r\n	private static boolean active;\r\n\r\n	@Autowired\r\n	public SessionGlobalSettings(@Value("${session.active:false}") boolean active) {\r\n		SessionGlobalSettings.active = active;\r\n	}\r\n\r\n	public static boolean isActive() {\r\n		return active;\r\n	}\r\n\r\n}\r\n\r\n\r\n==============================================================\r\npackage com.skplanet.storeplatform.ccs.runtime.session;\r\n\r\nimport com.skplanet.storeplatform.ccs.PropertyTestConfig;\r\nimport org.junit.Test;\r\nimport org.junit.runner.RunWith;\r\nimport org.springframework.context.annotation.ComponentScan;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.context.annotation.Import;\r\nimport org.springframework.test.context.ContextConfiguration;\r\nimport org.springframework.test.context.TestPropertySource;\r\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\r\n\r\nimport static org.junit.Assert.assertTrue;\r\n\r\n/**\r\n * @author 서대영(DAEYOUNG SEO)/Onestore/SKP\r\n */\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(classes = {SessionSettingsTest.Config.class})\r\n@TestPropertySource("classpath:properties/app.test.properties")\r\npublic class SessionGlobalSettingsTest {\r\n\r\n	@Test\r\n	public void testIsActive() {\r\n		assertTrue(SessionGlobalSettings.isActive());\r\n	}\r\n\r\n	@Configuration\r\n	@ComponentScan\r\n	@Import(PropertyTestConfig.class)\r\n	public static class Config {\r\n	}\r\n\r\n}', NULL, '', 4, 0),
(2368, 'dale.seo', '', '', '2016-10-11 23:56:23', '', 'EntityManagerTest (Life Cycle & Dirty Checking)', 'Entity Life Cycle과 Dirty Checking 검증\r\n내가 짰지만 잘 짰음\r\n\r\n=============================================\r\npackage seo.dale.practice.jpa;\r\n\r\nimport org.junit.*;\r\nimport seo.dale.practice.jpa.model.Member;\r\nimport seo.dale.practice.jpa.util.TableCreator;\r\n\r\nimport javax.persistence.EntityManager;\r\nimport javax.persistence.EntityManagerFactory;\r\nimport javax.persistence.EntityTransaction;\r\nimport javax.persistence.Persistence;\r\nimport java.sql.SQLException;\r\n\r\nimport static org.junit.Assert.*;\r\n\r\npublic class EntityManagerTest {\r\n\r\n    private static EntityManagerFactory emf;\r\n    private EntityManager em;\r\n    EntityTransaction tx;\r\n\r\n    @BeforeClass\r\n    public static void setUpClass() throws SQLException {\r\n        TableCreator.createTable();\r\n        emf = Persistence.createEntityManagerFactory("commerce");\r\n    }\r\n\r\n    @Before\r\n    public void setUp() {\r\n        em = emf.createEntityManager();\r\n        tx = em.getTransaction();\r\n        tx.begin();\r\n    }\r\n\r\n    @Test\r\n    public void testLifeCycle() {\r\n        // New\r\n        Member member = createMember(1L, "dale0713", 34);\r\n        assertFalse(em.contains(member));\r\n\r\n        // Managed\r\n        em.persist(member);\r\n        assertTrue(em.contains(member));\r\n        assertSame(member, em.find(Member.class, 1L));\r\n\r\n        // Though you flush, it stays in the persistence context\r\n        em.flush();\r\n        assertTrue(em.contains(member));\r\n\r\n        // Detached\r\n        em.detach(member);\r\n        member.setAge(17);\r\n        em.flush();\r\n        assertFalse(em.contains(member));\r\n        assertEquals(34, em.find(Member.class, 1L).getAge().intValue());\r\n\r\n        // Managed again\r\n        member = em.merge(member);\r\n        em.flush();\r\n        assertTrue(em.contains(member));\r\n        assertEquals(17, em.find(Member.class, 1L).getAge().intValue());\r\n\r\n        // Removed\r\n        em.remove(member);\r\n        em.flush();\r\n        assertFalse(em.contains(member));\r\n        assertNull(em.find(Member.class, 1L));\r\n    }\r\n\r\n    @Test\r\n    public void tesDirtyChecking() {\r\n        Member member = createMember(1L, "dale0713", 34);\r\n        em.persist(member);\r\n        assertTrue(em.contains(member));\r\n\r\n        em.flush();\r\n        assertSame(member, em.find(Member.class, 1L));\r\n\r\n        member.setUsername("DaleSeo");\r\n        em.flush();\r\n        assertEquals("DaleSeo", em.find(Member.class, 1L).getUsername());\r\n    }\r\n\r\n    @After\r\n    public void tearDown() {\r\n        tx.commit();\r\n        em.close();\r\n    }\r\n\r\n    @AfterClass\r\n    public static void tearDownClass() {\r\n        emf.close();\r\n    }\r\n\r\n    private static Member createMember(Long id, String username, Integer age) {\r\n        Member member = new Member();\r\n        member.setId(id);\r\n        member.setUsername(username);\r\n        member.setAge(age);\r\n        return member;\r\n    }\r\n\r\n}\r\n', NULL, '', 2, 0),
(2369, 'dale.seo', '', '', '2016-10-12 11:37:25', '', 'Heroku Logging Add-on Papertrail', 'https://devcenter.heroku.com/articles/papertrail\r\n\r\n# 설치\r\n```\r\n$ heroku addons:create papertrail\r\n```\r\n\r\n# 실행\r\n```\r\n$ heroku addons:open papertrail\r\n```', NULL, '', 11, 0),
(2371, 'dale.seo', '', '', '2016-10-12 15:00:54', '', '프로퍼티 파일에서 콤마로 구분된 문자열을 Set 필드로 받아오기', '	@Value("#{T(org.springframework.util.StringUtils).commaDelimitedListToSet(''${session.loginAPIs}'')}")\r\n	private Set<String> loginAPIs;', NULL, '', 3, 0),
(2372, 'dale.seo', '', '', '2016-10-12 15:31:32', '', 'Matcher 클래스의 find와 matches 메서드 비교', 'find는 패턴이 문자열의 일부기만 해도 true를 반환하지만, matches는 패턴이 전체 문자열과 일치할 때만 true를 리턴한다.\r\n\r\n\r\npublic class MatcherTest {\r\n\r\n	/**\r\n	 * find() - true if the pattern is found from the string\r\n	 * matches() - true if the pattern matches the entire string\r\n	 */\r\n	@Test\r\n	public void testFindVsMatches() {\r\n		Pattern p = Pattern.compile("\\\\d\\\\d\\\\d");\r\n		Matcher m = p.matcher("a123b");\r\n		assertTrue(m.find());\r\n		assertFalse(m.matches());\r\n\r\n		p = Pattern.compile("^\\\\d\\\\d\\\\d$");\r\n		m = p.matcher("123");\r\n		assertTrue(m.find());\r\n		assertTrue(m.matches());\r\n	}\r\n\r\n}\r\n', NULL, '', 1, 0),
(2373, 'dale.seo', '', '', '2016-10-13 12:14:22', '', 'Spring Boot로 정적 리소스 서비스 하기', 'https://spring.io/blog/2013/12/19/serving-static-web-content-with-spring-boot\r\n\r\n아래 디렉토리에 정적 파일을 두면 자동으로 처리됨\r\n/META-INF/resources/\r\n/resources/\r\n/static/\r\n/public/', NULL, '', 4, 0),
(2374, 'dale.seo', '', '', '2016-10-13 20:35:03', '', 'Spring Boot 통합 테스트 예제', '@SpringBootTest를 사용하면 된다.\r\n\r\n================================================================================\r\npackage seo.dale.commerce.product;\r\n\r\nimport org.junit.Test;\r\nimport org.junit.runner.RunWith;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.boot.test.context.SpringBootTest;\r\nimport org.springframework.test.context.junit4.SpringRunner;\r\nimport seo.dale.commerce.core.ModelFactory;\r\n\r\nimport static org.assertj.core.api.Assertions.assertThat;\r\n\r\n@RunWith(SpringRunner.class)\r\n@SpringBootTest\r\npublic class ProductServiceIntegrationTest {\r\n\r\n    @Autowired\r\n    private ProductRepository repository;\r\n\r\n    @Autowired\r\n    private ProductService service;\r\n\r\n    @Test\r\n    public void testCreate() {\r\n        // Given\r\n        Product saved = ModelFactory.newProduct("Apple", "Red apple", 1000.1F, 100);\r\n        // When\r\n        service.create(saved);\r\n        // Then\r\n        Product found = repository.findOne(saved.getId());\r\n        assertThat(found.getName()).isEqualTo("Apple");\r\n        assertThat(found.getDescription()).isEqualTo("Red apple");\r\n        assertThat(found.getPrice()).isEqualTo(1000.1F);\r\n        assertThat(found.getStock()).isEqualTo(100);\r\n    }\r\n\r\n}', NULL, '', 11, 0),
(2375, 'dale.seo', '', '', '2016-10-14 10:16:07', '', 'Brute Force 조합 문제 풀이', '"""\r\nhttps://codility.com/programmers/lessons/6-sorting/triangle/\r\n"""\r\n\r\ndef solution(A):\r\n    """\r\n    Brute force : O(n^3)\r\n    Correctness 100%, Performance 33%\r\n    """\r\n    for i in range(len(A) - 2):\r\n        for j in range(i + 1, len(A) - 1):\r\n            for k in range(j + 1, len(A)):\r\n                if isTriangular(A[i], A[j], A[k]):\r\n                    return 1\r\n    return 0\r\n\r\n\r\ndef isTriangular(p, q, r):\r\n    return p + q > r and q + r > p and r + p > q\r\n\r\n\r\nprint(1, solution([10, 2, 5, 1, 8, 20]))\r\nprint(0, solution([10, 50, 5, 1]))\r\n', NULL, '', 4, 0),
(2376, 'dale.seo', '', '', '2016-10-14 12:31:13', '', 'Spring Boot Actuator', '다양한 관리성 URL을 제공\r\n\r\nhttp://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-endpoints.html\r\n\r\n# Gradle\r\norg.springframework.boot:spring-boot-starter-actuator\r\n\r\n', NULL, '', 6, 0),
(2377, 'dale.seo', '', '', '2016-10-14 12:47:01', '', 'Spring Boot Actuator - Docs', 'http://java.ihoney.pe.kr/389\r\n\r\n# Gradle\r\n - org.springframework.boot:spring-boot-actuator-docs', NULL, '', 5, 0),
(2378, 'dale.seo', '', '', '2016-10-14 23:15:29', '', 'Interactive Rebase (git rebase -i)', '같은 브랜치 내에서 커밋간 순서 조정, 분리, 병합 등에 쓰인다.\r\npush 하지 않은 commit 에만 사용해야 하는 기능임을 명심한다.\r\ninteractive rebase editor의 커밋 순서는 오래된 게 위, 최신이 아래에 나온다.\r\n\r\n\r\n# 마지막 4개 커밋들의 순서 조정 (순서 바꾼 후 저장)\r\n```\r\n$ git rebase -i HEAD~4\r\n\r\npick b3f1649 Add unicorn\r\npick f239187 Implement poodles\r\npick 4b65a5a Add tests\r\npick c3f863f Added a title to the homepage\r\n```\r\n\r\n# 특정 커밋의 메세지 변경 (reword 표시 한 커밋에 대한 메세지 수정 화면으로 전환됨)\r\n```\r\n$ git rebase -i HEAD~4\r\n\r\npick b3f1649 Add unicorn\r\nreword 4b65a5a Add tests\r\npick f239187 Implement poodles\r\npick c3f863f Added a title to the homepage\r\n```\r\n\r\n# 특정 커밋의 변경 내용 편집\r\n - edit 표시 후 저장\r\n - edit 바로 전 커밋으로 reset\r\n - 변경 내용 add & commit\r\n - git rebase --amend (기존 커밋에 반영)또는 git rebase --continue (기존 커밋에서 분리)\r\n```\r\n$ git rebase -i HEAD~4\r\n\r\nedit b3f1649 Add unicorn\r\npick 4b65a5a Add tests\r\npick f239187 Implement poodles\r\npick c3f863f Added a title to the homepage\r\n\r\n$ git reset HEAD^\r\n$ git add .\r\n$ git commit -m "blah~ blah"\r\n$ git rebase --continue\r\n```\r\n\r\n# 위 커밋과 병합 (squash로 표시 후 저정하면, 병합된 커밋에 대한 메시지 입력 창으로 전환)\r\n```\r\n$ git rebase -i HEAD~4\r\n\r\npick b3f1649 Add unicorn\r\npick 4b65a5a Add tests\r\npick f239187 Implement poodles\r\nsquash c3f863f Add title to poodle page\r\n```', NULL, '', 6, 0),
(2379, 'dale.seo', '', '', '2016-10-15 08:59:26', '', '필드와 칼럼 매핑 어노테이션 종류와 속성', '@Column\r\n - name = DB 칼럼 이름\r\n - nullable = false\r\n - unque = true\r\n\r\n@Enumerated\r\n - EnumType.ORDINAL : enum 순서를 DB에 저장 (기본값)\r\n - EnumType.STRING : enum 이름을 DB에 저장 (권장)\r\n\r\n@Temporal\r\n - TemporalType.DATE : DB의 data 타입과 매핑\r\n - TemporalType.TIME : DB의 time 타입과 매핑\r\n - TemporalType.TIMESTAMP : DB의 timestamp(dateitme) 타입과 매핑\r\n\r\n@Lob\r\n - 필드 타입이 String, char[] 이면 DB의 CLOB타입으로 매핑\r\n - 필드 타입이 byte[] 이면 DB의 BLOB타입으로 매핑\r\n\r\n@Transient\r\n - DB와 매핑하고 싶지 않은 필드에 사용\r\n\r\n@Access\r\n - AcessType.FILED : 필드와 맵핑\r\n - AcessType.PROPERTY : Setter, Getter와 맵핑', NULL, '', 4, 0),
(2380, 'dale.seo', '', '', '2016-10-16 16:35:12', '', 'Spring Security Web Test', 'http://docs.spring.io/spring-security/site/docs/4.0.x/reference/html/test-mockmvc.html#test-mockmvc-securitycontextholder-rpp\r\n\r\n@WithMockUser 어노테이션을 이용하거나 RequestPostProcessor을 이용할 수 있다.\r\n@WithMockUser 어노테이션을 이용하는게 깔끔한 듯\r\n\r\n==============================================================================\r\npackage seo.dale.practice.spring.security.web;\r\n\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\nimport org.junit.runner.RunWith;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\r\nimport org.springframework.security.test.context.support.WithMockUser;\r\nimport org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers;\r\nimport org.springframework.test.context.ContextConfiguration;\r\nimport org.springframework.test.context.junit4.SpringRunner;\r\nimport org.springframework.test.context.web.WebAppConfiguration;\r\nimport org.springframework.test.web.servlet.MockMvc;\r\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\r\nimport org.springframework.web.context.WebApplicationContext;\r\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\r\n\r\nimport static org.springframework.security.test.web.servlet.response.SecurityMockMvcResultMatchers.authenticated;\r\nimport static org.springframework.security.test.web.servlet.response.SecurityMockMvcResultMatchers.unauthenticated;\r\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\r\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\r\n\r\n/**\r\n * http://docs.spring.io/spring-security/site/docs/4.0.x/reference/html/test-mockmvc.html#test-mockmvc-securitycontextholder-rpp\r\n * https://github.com/DaleSeo/spring-security/blob/master/test/src/test/java/org/springframework/security/test/web/servlet/showcase/secured/WithUserAuthenticationTests.java\r\n */\r\n@RunWith(SpringRunner.class)\r\n@ContextConfiguration(classes = WithUserAuthenticationTest.Config.class)\r\n@WebAppConfiguration\r\npublic class WithUserAuthenticationTest {\r\n\r\n	@Autowired\r\n	private WebApplicationContext context;\r\n\r\n	private MockMvc mvc;\r\n\r\n	@Before\r\n	public void setup() {\r\n		mvc = MockMvcBuilders.webAppContextSetup(context)\r\n				.apply(SecurityMockMvcConfigurers.springSecurity()).build();\r\n	}\r\n\r\n	@Test\r\n	public void requestProtectedUrlUnauthenticated() throws Exception {\r\n		mvc.perform(get("/"))\r\n				.andExpect(status().isFound()) // 302\r\n				.andExpect(unauthenticated());\r\n	}\r\n\r\n	@Test\r\n	@WithMockUser\r\n	public void requestProtectedUrlWithUser() throws Exception {\r\n		mvc.perform(get("/"))\r\n				.andExpect(status().isNotFound())\r\n				.andExpect(authenticated().withUsername("user"));\r\n	}\r\n\r\n	@Test\r\n	@WithMockUser(roles = "ADMIN")\r\n	public void requestProtectedUrlWithAdmin() throws Exception {\r\n		mvc.perform(get("/admin"))\r\n				.andExpect(status().isNotFound())\r\n				.andExpect(authenticated().withUsername("user").withRoles("ADMIN"));\r\n	}\r\n\r\n	@EnableWebSecurity\r\n	@EnableWebMvc\r\n	static class Config extends WebSecurityConfigurerAdapter {\r\n\r\n		@Override\r\n		protected void configure(HttpSecurity http) throws Exception {\r\n			http\r\n				.authorizeRequests()\r\n				.antMatchers("/admin/**").hasRole("ADMIN")\r\n				.anyRequest().authenticated()\r\n				.and()\r\n				.formLogin();\r\n		}\r\n\r\n		@Autowired\r\n		public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {\r\n			auth\r\n				.inMemoryAuthentication()\r\n					.withUser("user").password("password").roles("USER");\r\n		}\r\n\r\n	}\r\n\r\n\r\n}\r\n\r\n\r\n\r\n==============================================================================\r\npackage seo.dale.practice.spring.security.web;\r\n\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\nimport org.junit.runner.RunWith;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\r\nimport org.springframework.security.test.context.support.WithMockUser;\r\nimport org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers;\r\nimport org.springframework.test.context.ContextConfiguration;\r\nimport org.springframework.test.context.junit4.SpringRunner;\r\nimport org.springframework.test.context.web.WebAppConfiguration;\r\nimport org.springframework.test.web.servlet.MockMvc;\r\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\r\nimport org.springframework.web.context.WebApplicationContext;\r\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\r\n\r\nimport static org.springframework.security.test.web.servlet.response.SecurityMockMvcResultMatchers.authenticated;\r\nimport static org.springframework.security.test.web.servlet.response.SecurityMockMvcResultMatchers.unauthenticated;\r\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\r\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\r\n\r\n/**\r\n * http://docs.spring.io/spring-security/site/docs/4.0.x/reference/html/test-mockmvc.html#test-mockmvc-securitycontextholder-rpp\r\n * https://github.com/DaleSeo/spring-security/blob/master/test/src/test/java/org/springframework/security/test/web/servlet/showcase/secured/WithUserAuthenticationTests.java\r\n */\r\n@RunWith(SpringRunner.class)\r\n@ContextConfiguration(classes = WithUserAuthenticationTest.Config.class)\r\n@WebAppConfiguration\r\npublic class WithUserAuthenticationTest {\r\n\r\n	@Autowired\r\n	private WebApplicationContext context;\r\n\r\n	private MockMvc mvc;\r\n\r\n	@Before\r\n	public void setup() {\r\n		mvc = MockMvcBuilders.webAppContextSetup(context)\r\n				.apply(SecurityMockMvcConfigurers.springSecurity()).build();\r\n	}\r\n\r\n	@Test\r\n	public void requestProtectedUrlUnauthenticated() throws Exception {\r\n		mvc.perform(get("/"))\r\n				.andExpect(status().isFound()) // 302\r\n				.andExpect(unauthenticated());\r\n	}\r\n\r\n	@Test\r\n	@WithMockUser\r\n	public void requestProtectedUrlWithUser() throws Exception {\r\n		mvc.perform(get("/"))\r\n				.andExpect(status().isNotFound())\r\n				.andExpect(authenticated().withUsername("user"));\r\n	}\r\n\r\n	@Test\r\n	@WithMockUser(roles = "ADMIN")\r\n	public void requestProtectedUrlWithAdmin() throws Exception {\r\n		mvc.perform(get("/admin"))\r\n				.andExpect(status().isNotFound())\r\n				.andExpect(authenticated().withUsername("user").withRoles("ADMIN"));\r\n	}\r\n\r\n	@EnableWebSecurity\r\n	@EnableWebMvc\r\n	static class Config extends WebSecurityConfigurerAdapter {\r\n\r\n		@Override\r\n		protected void configure(HttpSecurity http) throws Exception {\r\n			http\r\n				.authorizeRequests()\r\n				.antMatchers("/admin/**").hasRole("ADMIN")\r\n				.anyRequest().authenticated()\r\n				.and()\r\n				.formLogin();\r\n		}\r\n\r\n		@Autowired\r\n		public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {\r\n			auth\r\n				.inMemoryAuthentication()\r\n					.withUser("user").password("password").roles("USER");\r\n		}\r\n\r\n	}\r\n\r\n\r\n}', NULL, '', 26, 0),
(2381, 'dale.seo', '', '', '2016-10-18 11:54:46', '', 'Spring Security Authentication Mechanism (인증 메커니즘)', '레퍼런스를 정독하고 다음과 같이 정리한다.\r\n\r\n[[ AuthenticationManager ]]\r\nSpring Security 내 모든 인증은 기본적으로 AuthenticationManager 인터페이스의 Authentication authenticate(Authentication auth) 메서드를 통해서 이뤄진다.\r\nAuthenticationManager 인터페이스의 기본 구현 클래스는 ProviderManager이며 내부적으로 여러 개의 AuthenticationProvider 구현 클래스를 통해서 인증을 진행한다.\r\n\r\n[[ AuthenticationProvider ]]\r\nAuthenticationProvider 구현 클래스는 AuthenticationManager 인터페이스와 동일한 Authentication authenticate(Authentication auth) 메서드를 구현해야 한다.\r\n일반적으로 구현은 다음과 같이 한다.\r\n메서드 인자로 받은 authentication 객체의 username 필드를 이용하여, DB든 LDAP이든 In Memory 등을 통해 해당 유저의 정보를 받아온다.\r\n만약 조회된 유저와 인자로 받은 유저의 패스워드가 일치하지 않으면 BadCredentialsException 예외를 던진다.\r\n패스워드가 일치한다면 authentication 객체에 GrantedAuthrority 목록을 세팅해서 반환한다.\r\n\r\n[[ UserDetailsService ]]\r\nAuthenticationProvider가 내부적으로 사용하는 UserDetailService 인터페이스는 UserDetails loadUserByUsername(String username) 메서드를 가진다.\r\n주의할 점은 UserDetailsService 인터페이스와 AuthenticationProvider의 역할 구분이다.\r\nAuthenticationProvider 역할이 인증 자체라면 UserDetailsService는 유저 정보 획득이다.\r\n따라서 UserDetailsService 구현 클래스에서는 순수하게 username으로 유저 조회한다. (패스워드 정보가 인자로 안 넘어오기 때문에 하고 싶어도 못함)\r\n조회한 유저의 패스워드가 입력 받은 유저의 패스워드랑 일치하는지는 AuthenticationProvider에서 해줄 것이다.\r\n만약 해당 유저가 존재하지 않으면 UsernameNotFoundException 예외를 던진다.\r\n\r\n[[ 결론 ]]\r\nAuthenticationManager, AuthenticationProvider, UserDetailsService 이 3개의 인터페이스에 대해서 모두 디폴트 구현이 제공되기 때문에,\r\n어느 레벨에서 커스터마이징하고 싶은지 잘 판단해야 한다.\r\n예를 들어 여러 종류의 AuthenticationProvider가 필요 없으면 AuthenticationManager를 바로 구현해도 충분하다.', NULL, '', 5, 0),
(2382, 'dale.seo', '', '', '2016-10-18 22:16:05', '', 'Algorithms 4th Edition Online Book', 'http://algs4.cs.princeton.edu/home/', NULL, '', 2, 0),
(2383, 'dale.seo', '', '', '2016-10-18 22:51:15', '', 'Bubble Sort (버블 정렬) Python 구현', '		// 이전 패스에서 가장 최근에 교환이 일어났던 인덱스까지만,\r\n		// 다음 패스에서 다시 정렬을 진행하면 된다.\r\n		// 만약 이전 패스에서 교환이 없었다면 정렬을 종료하면 된다.\r\n\r\n\r\n\r\ndef bubble_sort(arr):\r\n    """\r\n    Iterate until the the index where the last swap happened in previous pass\r\n    """\r\n    print(''input >'', arr)\r\n    end = len(arr) - 1\r\n    while end > 0:\r\n        last_swap = 0\r\n        for i in range(end):\r\n            if arr[i] > arr[i + 1]:\r\n                arr[i], arr[i + 1] = arr[i + 1], arr[i]\r\n                last_swap = i\r\n        print(0, ''~'', end, ''>'', arr)\r\n        end = last_swap\r\n    return arr', NULL, '', 13, 0),
(2384, 'dale.seo', '', '', '2016-10-19 19:27:53', '', 'Selection Sort (선택 정렬) Python 구현', 'def selection_sort(arr):\r\n    for i in range(len(arr) - 1):\r\n        min_idx = i\r\n        for j in range(i + 1, len(arr)):\r\n            if arr[j] < arr[min_idx]:\r\n                min_idx = j\r\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\r\n    return arr\r\n\r\nprint(selection_sort([x for x in range(10)]))\r\nprint(selection_sort([x for x in reversed(range(10))]))\r\nprint(selection_sort([3, 1, 2, 5, 4]))\r\nprint(selection_sort([3, 3, 1, 2, 1, 2, 5, 4, 4, 5]))\r\n', NULL, '', 5, 0),
(2385, 'dale.seo', '', '', '2016-10-19 20:06:02', '', 'Quick Sort (퀵 정렬) Python 구현', 'def quick_sort(arr):\r\n    if len(arr) <= 1:\r\n        return arr\r\n    pivot = arr[len(arr) // 2]\r\n    less, equal, greater = [], [], []\r\n    for a in arr:\r\n        if a < pivot:\r\n            less.append(a)\r\n        elif a > pivot:\r\n            greater.append(a)\r\n        else:\r\n            equal.append(a)\r\n    return quick_sort(less) + equal + quick_sort(greater)\r\n\r\narr1 = [3, 7, 8, 5, 2, 1, 9, 5, 4]\r\nprint(sorted(arr1), quick_sort(arr1), sep=''\\n'')\r\nprint([x for x in range(10)], quick_sort([x for x in reversed(range(10))]), sep=''\\n'')\r\nprint([x for x in range(10)], quick_sort([x for x in range(10)]), sep=''\\n'')', NULL, '', 6, 0),
(2386, 'dale.seo', '', '', '2016-10-19 20:48:47', '', 'Merge Sort (합병 정렬) Python 구현', 'def merge_sort(arr):\r\n    if len(arr) <= 1:\r\n        return arr\r\n    mid = len(arr) // 2\r\n    first = merge_sort(arr[:mid])\r\n    second = merge_sort(arr[mid:])\r\n\r\n    arr = []\r\n    f = s = 0\r\n    while f < len(first) and s < len(second):\r\n        if first[f] < second[s]:\r\n            arr.append(first[f])\r\n            f += 1\r\n        else:\r\n            arr.append(second[s])\r\n            s += 1\r\n    arr += second[s:]\r\n    arr += first[f:]\r\n    return arr\r\n\r\nprint(merge_sort([x for x in range(10)]))\r\nprint(merge_sort([x for x in reversed(range(10))]))\r\nprint(merge_sort([3, 1, 2, 5, 4]))\r\nprint(merge_sort([3, 3, 1, 2, 1, 2, 5, 4, 4, 5]))', NULL, '', 3, 0),
(2387, 'dale.seo', '', '', '2016-10-21 12:48:06', '', 'Object#equals 메서드 오바라이드 시 주의사항', 'instanceOf 대신에 getClass()를 사용해야함\r\n\r\nhttp://iilii.egloos.com/3999066', NULL, '', 2, 0),
(2388, 'dale.seo', '', '', '2016-10-21 13:31:15', '', 'Object 클래스의 hasCode와 equals 메서드 간의 관계', 'Two Objects that compare as equals must generate the same hash code, but two Objects with the same hash code do not have to be equal.\r\n\r\n\r\n두 개의 객체 A, B가 있을 때 A.equals("B") == true 라면, A.hashCode() == B.hashCode()도 반드시 성립해야 한다.\r\n\r\n왜냐하면, Set이나 Map에서 객체를 저장할 때, hasCode와 equals 메서드를 차례로 호출하여 동일성을 따지기 때문이다.\r\n두 객체의 hasCode() 메서드 반환값이 일치하지 않는다면, equlas() 메서드는 호출 기회조차 얻지 못한다.\r\n\r\n실천하기 가장 쉬운 방법은 equals 메서드에서 사용했던 필드들을 hashcode 만들 때도 빠짐없이 사용하면 된다.', NULL, '', 9, 0),
(2389, 'dale.seo', '', '', '2016-10-21 13:32:01', '', 'Object 클래스의 equals와 hashCode 메서드 구현 방법', 'http://skylit.tistory.com/35', NULL, '', 2, 0),
(2390, 'dale.seo', '', '', '2016-10-21 19:46:55', '', 'HashCodeBuilder', 'https://commons.apache.org/proper/commons-lang/javadocs/api-release/index.html\r\n\r\n# hasCode 생성에 사용될 필드를 지정해주기 (필드 수가 적을 때 추천)\r\n================================================================\r\n public class Person {\r\n   String name;\r\n   int age;\r\n   boolean smoker;\r\n   ...\r\n\r\n   public int hashCode() {\r\n     // you pick a hard-coded, randomly chosen, non-zero, odd number\r\n     // ideally different for each class\r\n     return new HashCodeBuilder(17, 37).\r\n       append(name).\r\n       append(age).\r\n       append(smoker).\r\n       toHashCode();\r\n   }\r\n }\r\n \r\n\r\n# 리플렉션을 이용해서 모든 필드를 이용해서 hashCode 만들기 (필드 많을 때, 특정 필드만 제외 시킬 때)\r\n================================================================\r\n public int hashCode() {\r\n   return HashCodeBuilder.reflectionHashCode(this);\r\n }\r\n\r\n제외 시키기 워하는 필드에 @HashCodeExclude 어노테이션을 선언할 것', NULL, '', 6, 0),
(2391, 'dale.seo', '', '', '2016-10-21 20:01:54', '', 'EqualsBuilder', 'https://commons.apache.org/proper/commons-lang/javadocs/api-release/index.html\r\n\r\n# 수동 필드 지정\r\n===============================================================\r\n public boolean equals(Object obj) {\r\n   if (obj == null) { return false; }\r\n   if (obj == this) { return true; }\r\n   if (obj.getClass() != getClass()) {\r\n     return false;\r\n   }\r\n   MyClass rhs = (MyClass) obj;\r\n   return new EqualsBuilder()\r\n                 .appendSuper(super.equals(obj))\r\n                 .append(field1, rhs.field1)\r\n                 .append(field2, rhs.field2)\r\n                 .append(field3, rhs.field3)\r\n                 .isEquals();\r\n  }\r\n\r\n# 리플렉션\r\n===============================================================\r\n public boolean equals(Object obj) {\r\n   return EqualsBuilder.reflectionEquals(this, obj);\r\n }', NULL, '', 2, 0),
(2392, 'dale.seo', '', '', '2016-10-21 20:16:18', '', 'CompareToBuilder', 'https://commons.apache.org/proper/commons-lang/javadocs/api-release/index.html\r\n\r\n\r\n\r\npublic class MyClass {\r\n   String field1;\r\n   int field2;\r\n   boolean field3;\r\n\r\n   ...\r\n\r\n   public int compareTo(Object o) {\r\n     MyClass myClass = (MyClass) o;\r\n     return new CompareToBuilder()\r\n       .appendSuper(super.compareTo(o)\r\n       .append(this.field1, myClass.field1)\r\n       .append(this.field2, myClass.field2)\r\n       .append(this.field3, myClass.field3)\r\n       .toComparison();\r\n   }\r\n }\r\n\r\n\r\n==============================================================\r\n\r\n public int compareTo(Object o) {\r\n   return CompareToBuilder.reflectionCompare(this, o);\r\n }', NULL, '', 2, 0),
(2393, 'dale.seo', '', '', '2016-10-21 20:17:32', '', 'ToStringBuilder', 'https://commons.apache.org/proper/commons-lang/javadocs/api-release/index.html', NULL, '', 2, 0),
(2394, 'dale.seo', '', '', '2016-10-22 19:59:32', '', '나눔고딕 으로 폰트 변경하기', 'http://hanawordpress.com/%EC%9B%8C%EB%93%9C%ED%94%84%EB%A0%88%EC%8A%A4%EC%97%90-%EB%82%98%EB%88%94%EA%B3%A0%EB%94%95-%EA%B8%80%EA%BC%B4-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/\r\n\r\nhttp://socialsignalimpact.com/%EC%9B%8C%EB%93%9C%ED%94%84%EB%A0%88%EC%8A%A4%EC%97%90-%EB%82%98%EB%88%94%EA%B3%A0%EB%94%95-%EC%9B%B9%ED%8F%B0%ED%8A%B8-%EC%89%BD%EA%B2%8C-%EC%A0%81%EC%9A%A9-%ED%95%98%EA%B8%B0/\r\n\r\n\r\n\r\n외모 >  테마편집기 로 가서 style.css 맨 위에 아래 추가 (안 먹는 경우, !important 설정할 것)\r\n\r\n@import url(http://fonts.googleapis.com/earlyaccess/nanumgothic.css);\r\n* { font-family: ‘Nanum Gothic’, Calibri !important; }', NULL, '', 8, 0),
(2395, 'dale.seo', '', '', '2016-10-23 13:25:15', '', 'Jetpack 플러그인으로 워드프레스에 Gist Code Snippet 넣기', 'http://tourkick.com/advice-tips-howto/5-ways-embed-gists-wordpress-jetpack/', NULL, '', 6, 0),
(2396, 'dale.seo', '', '', '2016-10-25 13:11:35', '', 'State of the Art JavaScript in 2016', 'https://medium.com/javascript-and-opinions/state-of-the-art-javascript-in-2016-ab67fc68eb0b#.qwoz6zs9k', NULL, '', 2, 0),
(2397, 'dale.seo', '', '', '2016-10-25 15:19:57', '', 'ThreadLocal 활용 예제 - 2', 'package com.skplanet.storeplatform.ccs.runtime.etoken;\r\n\r\nimport com.skplanet.storeplatform.ccs.runtime.interceptor.header.vo.EToken;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\n/**\r\n * eToken 홀더\r\n * @author 서대영(DAEYOUNG SEO)/Onestore/SKP\r\n */\r\npublic class ETokenHolder {\r\n\r\n	private static final Logger logger = LoggerFactory.getLogger(ETokenHolder.class);\r\n\r\n	private static final ThreadLocal<EToken> threadLocal = ThreadLocal.withInitial(ETokenHolder::initial);\r\n\r\n	/**\r\n	 * eToken을 설정한다.\r\n	 */\r\n	public static void setEToken(EToken eToken) {\r\n		threadLocal.set(eToken);\r\n		logger.debug("eToken is set to : {}." + eToken);\r\n	}\r\n\r\n	/**\r\n	 * eToken을 획득한다.\r\n	 */\r\n	public static EToken getEToken() {\r\n		EToken eToken = threadLocal.get();\r\n		logger.debug("eToken => {}" + eToken);\r\n		return eToken;\r\n	}\r\n\r\n	/**\r\n	 * eToken을 삭제한다.\r\n	 */\r\n	public static void removeEToken() {\r\n		threadLocal.remove();\r\n		logger.debug("eToken is removed.");\r\n	}\r\n\r\n	/**\r\n	 * eToken 초기값\r\n	 */\r\n	private static EToken initial() {\r\n		logger.debug("eToken is initialized.");\r\n		return new EToken();\r\n	}\r\n\r\n}\r\n\r\n=======================================================================\r\n\r\npackage com.skplanet.storeplatform.ccs.runtime.etoken;\r\n\r\nimport com.skplanet.storeplatform.ccs.TestUtils;\r\nimport com.skplanet.storeplatform.ccs.runtime.interceptor.header.vo.EToken;\r\nimport org.apache.commons.lang.builder.EqualsBuilder;\r\nimport org.junit.Test;\r\n\r\n/**\r\n * @author 서대영(DAEYOUNG SEO)/Onestore/SKP\r\n */\r\npublic class ETokenHolderTest {\r\n\r\n	@Test\r\n	public void test() {\r\n		EToken eToken = TestUtils.mockEToken();\r\n\r\n		ETokenHolder.setEToken(eToken);\r\n\r\n		TestUtils.verifyEToken(ETokenHolder.getEToken());\r\n\r\n		ETokenHolder.removeEToken();\r\n\r\n		EqualsBuilder.reflectionEquals(new EToken(), ETokenHolder.getEToken());\r\n	}\r\n\r\n}', NULL, '', 2, 0),
(2398, 'dale.seo', '', '', '2016-10-26 14:12:15', '', 'Webpack 설명 끝판왕', 'https://medium.com/@dabit3/beginner-s-guide-to-webpack-b1f1a3638460#.ihcnooivn\r\n\r\nhttps://scotch.io/tutorials/getting-started-with-webpack-module-bundling-magic', NULL, '', 13, 0),
(2399, 'dale.seo', '', '', '2016-10-26 20:12:21', '', 'SecurityContext가 여러 Request 간에 유지되는 원리', 'SecurityContextPersistenceFilter가 HttpSessionSecurityContextRepository를 사용해서,\r\n컨트롤러 도달 전(요청 후)에 SecurityContext를 HttpSession에서 SecurityContextHolder로 로드 시켜주고,\r\n컨트롤러 처리 후(응답 전)에 SecurityContext를 SecurityContextHolder에서 HttpSession로 저장 시켜준다.\r\n\r\n\r\nhttp://docs.spring.io/spring-security/site/docs/current/reference/html/core-web-filters.html#security-context-repository\r\nhttp://docs.spring.io/spring-security/site/docs/4.1.3.RELEASE/apidocs/org/springframework/security/web/context/SecurityContextPersistenceFilter.html\r\nhttp://docs.spring.io/spring-security/site/docs/4.1.3.RELEASE/apidocs/org/springframework/security/web/context/HttpSessionSecurityContextRepository.html\r\n\r\n\r\nhttp://docs.spring.io/spring-security/site/docs/current/reference/html/session-mgmt.html\r\n\r\n', NULL, '', 11, 0),
(2400, 'dale.seo', '', '', '2016-10-27 12:02:15', '', 'Null Obejct 패턴', 'http://dsmoon.tistory.com/entry/NULL-OBJECT-%ED%8C%A8%ED%84%B4\r\nhttp://godblessyk.tistory.com/entry/NULL-%EA%B0%9D%EC%B2%B4-%ED%8C%A8%ED%84%B4-%EC%A0%95%EB%A6%AC\r\n', NULL, '', 4, 0),
(2401, 'dale.seo', '', '', '2016-10-29 11:22:28', '', '숫자형에서 문자형간 변환', 'https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Number/toString \r\n\r\n\r\n========================\r\nvar n = 128;\r\n n = n.toString();\r\n console.log(n);\r\n\r\n\r\n앞에 +를 붙이거나 Number로 감싸기\r\n========================\r\nvar sum = 0;\r\nfor (var i = 2; i < process.argv.length; i++) {\r\n  sum += +process.argv[i];\r\n  // sum += Number(process.argv[i]);\r\n}\r\nconsole.log(sum);', NULL, '', 11, 0),
(2402, 'dale.seo', '', '', '2016-11-03 21:26:10', '', ' Git filter-branch : 커밋 히스토리 변경', '# master_password.txt 파일을 모든 커밋 히스토리에서 삭제하기\r\n```\r\ngit filter-branch --tree-filter ''rm -f master_password.txt''\r\n```\r\n\r\n# 변경 내용이 없는 커밋들을 지우기\r\n```\r\ngit filter-branch -f --prune-empty -- --all\r\n```', NULL, '', 2, 0),
(2403, 'dale.seo', '', '', '2016-11-03 22:04:32', '', 'Git O/S별 Line Separator 설정', '아래와 같이 설정하면 로컬 환경과 리모트 환경의 O/S가 상이할 때 자동으로 Line Seprator 설정을 맞춰준다.\r\n\r\n# Linux\r\n```\r\n$ git config --global core.autocrlf input\r\n```\r\n\r\n# Windows\r\n```\r\n$ git config --global core.autocrlf true\r\n```', NULL, '', 7, 0),
(2404, 'dale.seo', '', '', '2016-11-03 22:18:22', '', 'Git cherry-pick', '# 특정 커밋을 현재 브랜치로 가져오기 (부모 커밋이 다르기 때문에 새로운 커밋 해쉬값이 따짐)\r\n```\r\n$ git cherry pick 3fbd473\r\n```\r\n\r\n# 체리픽 하면서 커밋 메시지 수정하기\r\n```\r\n$  git cherry-pick --edit 3fbd473 \r\n```\r\n\r\n# 여러 개의 커밋을 체리픽하면서 추가 수정을 위해 커밋은 안 하기 (추가 수정 후 직접 커밋해야 함)\r\n```\r\n$ git cherry-pick --no-commit b447335 b59d285\r\n```\r\n\r\n# 커밋 출처를 표시하면서 체리픽 하기\r\n```\r\n$ git cherry-pick -x bdf9578\r\n```\r\n\r\n# Author를 기존 커밋자가 아닌 체리픽자로 변경하면서 체리픽 하기\r\n```\r\n$ git cherry-pick --signoff bdf9578\r\n```', NULL, '', 2, 0),
(2405, 'dale.seo', '', '', '2016-11-08 15:52:08', '', 'git clone', '$ git clone <주소>\r\n원격 디렉토리명 그대로 사용\r\n\r\n$ git clone <주소> <디렉토리명>\r\n다른 디렉토리명 사용\r\n\r\n$ git clone bare <주소>\r\n리파지토리를 raw 데이터구조로 그대로 다운 받음 \r\n(개발용이 아니라 백업이나 마이그레이션이 쓰임)', NULL, '', 2, 0),
(2406, 'dale.seo', '', '', '2016-11-08 15:54:03', '', 'Git 서버 이전 방법', '[ 임시 디렉토리를 만들어서 작업하고 지우는 방법 ]\r\nhttps://help.github.com/articles/duplicating-a-repository/#mirroring-a-repository\r\n\r\n[ 기존 개발하던 워킹 디렉토리에서 작업 - 약간 노가다 ]\r\nhttps://www.smashingmagazine.com/2014/05/moving-git-repository-new-server/\r\n\r\n\r\n-----------------------------------------------------------------------------------------------\r\n$ git clone --bare https://github.com/exampleuser/old-repository.git\r\n$ cd old-repository.git\r\n$ git push --mirror https://github.com/exampleuser/new-repository.git\r\n$ rm -rf old-repository.git', NULL, '', 6, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(2407, 'dale.seo', '', '', '2016-11-12 10:39:10', '', 'Java8 Stream을 이용하여 File을 라인별로 읽기', 'https://www.mkyong.com/java8/java-8-stream-read-a-file-line-by-line/\r\n\r\n=======================================================\r\npackage seo.dale.practice.java.nio.stream;\r\n\r\nimport org.junit.Test;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.net.URI;\r\nimport java.net.URISyntaxException;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Paths;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\nimport java.util.stream.Collectors;\r\nimport java.util.stream.Stream;\r\n\r\n/**\r\n * https://www.mkyong.com/java8/java-8-stream-read-a-file-line-by-line/\r\n */\r\npublic class TestReadFileTest {\r\n\r\n    @Test\r\n    public void test1() throws URISyntaxException, IOException {\r\n        String fileName = "file/lines.txt";\r\n\r\n        URI uri = ClassLoader.getSystemResource(fileName).toURI();\r\n        try (Stream<String> stream = Files.lines(Paths.get(uri))) {\r\n            stream.forEach(System.out::println);\r\n        }\r\n    }\r\n\r\n\r\n    @Test\r\n    public void test2() throws URISyntaxException, IOException {\r\n        List<String> list;\r\n\r\n        String fileName = "file/lines.txt";\r\n\r\n        URI uri = ClassLoader.getSystemResource(fileName).toURI();\r\n        try (Stream<String> stream = Files.lines(Paths.get(uri))) {\r\n            list = stream\r\n                    .filter(line -> !line.startsWith("line3"))\r\n                    .map(String::toUpperCase)\r\n                    .collect(Collectors.toList());\r\n        }\r\n\r\n        System.out.println(list);\r\n    }\r\n\r\n    @Test\r\n    public void test3() throws URISyntaxException, IOException {\r\n        List<String> list;\r\n\r\n        String fileName = "file/lines.txt";\r\n\r\n        URI uri = ClassLoader.getSystemResource(fileName).toURI();\r\n        try (BufferedReader br = Files.newBufferedReader(Paths.get(uri))) {\r\n            list = br.lines().collect(Collectors.toList());\r\n        }\r\n\r\n        System.out.println(list);\r\n    }\r\n\r\n    @Test\r\n    public void test4() throws URISyntaxException, IOException {\r\n        String fileName = "file/lines.txt";\r\n\r\n        URI uri = ClassLoader.getSystemResource(fileName).toURI();\r\n        try (BufferedReader br = Files.newBufferedReader(Paths.get(uri))) {\r\n            String line;\r\n            while ((line = br.readLine()) != null) {\r\n                System.out.println(line);\r\n            }\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void test5() throws URISyntaxException, IOException {\r\n        String fileName = "file/lines.txt";\r\n\r\n        InputStream in = ClassLoader.getSystemResourceAsStream(fileName);\r\n        try (Scanner scanner = new Scanner(in)) {\r\n            while (scanner.hasNext()) {\r\n                System.out.println(scanner.nextLine());\r\n            }\r\n        }\r\n    }\r\n\r\n}', NULL, '', 4, 0),
(2408, 'dale.seo', '', '', '2016-11-12 10:40:50', '', 'resources 디렉토리 내의 파일 접근', 'http://stackoverflow.com/questions/15713119/java-nio-file-path-for-a-classpath-resource\r\n\r\n\r\nPaths.get(ClassLoader.getSystemResource(resourceName).toURI());', NULL, '', 2, 0),
(2409, 'dale.seo', '', '', '2016-11-14 13:53:35', '', '[Java8] Comparator 인터페이스의 디폴트 메서드를 활용한 Chaning', '\r\n// Order by Mmr, Id DESC\r\nTreeSet<Player> playerSetOrderByMmr = new TreeSet<>(Comparator\r\n			    .comparing(Player::getMmr).thenComparing(Player::getId).reversed());', NULL, '', 3, 0),
(2410, 'dale.seo', '', '', '2016-11-15 23:32:07', '', 'Linux에서 Redis 설치 방법', 'http://redis.io/download\r\nhttps://github.com/antirez/redis/issues/722\r\n\r\nAWS로 생성한 따끈한 인스턴스에서는 make 전에 몇 가지 커맨드를 더 실행해줘야 한다.\r\n\r\n-------------------------------------------------------------------------\r\n$ sudo apt-get update\r\n$ sudo apt-get install make\r\n$ sudo apt-get install gcc\r\n$ sudo apt-get install build-essential\r\n-------------------------------------------------------------------------\r\n$ wget http://download.redis.io/releases/redis-3.2.5.tar.gz\r\n$ tar xzf redis-3.2.5.tar.gz\r\n$ cd redis-3.2.5\r\n$ cd deps\r\n$ sudo make hiredis lua jemalloc linenoise geohash-int\r\n$ cd ..\r\n$ make\r\n-------------------------------------------------------------------------\r\n\r\n위 방법이 잘 안 통하면 아래 커맨드를 시도해본다.\r\n\r\n$ make distclean all', NULL, '', 9, 0),
(2411, 'dale.seo', '', '', '2016-11-15 23:41:17', '', 'Redis 서버 구동/정지', '백그라운드로 구동하기\r\n$ redis-server --daemonize yes\r\n\r\n정지하기\r\n$ killall redis-server', NULL, '', 11, 0),
(2412, 'dale.seo', '', '', '2016-11-19 13:02:36', '', 'redis-cli로 커맨드 모니터링 방법', '1002139@1002139s-MacBook-Pro ~ $ redis-cli\r\n127.0.0.1:6379> monitor\r\nOK\r\n1479528067.909269 [0 127.0.0.1:53562] "HSET" "\\xac\\xed\\x00\\x05t\\x00\\aStudent" "\\xac\\xed\\x00\\x05t\\x00\\nEng2015001" "\\xac\\xed\\x00\\x05sr\\x003seo.dale.practice.spring.data.redis.student.Student\\xfd\\x99\\xdd\\xc8\\xcd\\xdcT\\xa1\\x02\\x00\\x04I\\x00\\x05gradeL\\x00\\x06gendert\\x00<Lseo/dale/practice/spring/data/redis/student/Student$Gender;L\\x00\\x02idt\\x00\\x12Ljava/lang/String;L\\x00\\x04nameq\\x00~\\x00\\x02xp\\x00\\x00\\x00\\x01~r\\x00:seo.dale.practice.spring.data.redis.student.Student$Gender\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x12\\x00\\x00xr\\x00\\x0ejava.lang.Enum\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x12\\x00\\x00xpt\\x00\\x04MALEt\\x00\\nEng2015001t\\x00\\bJohn Doe"\r\n1479528067.910597 [0 127.0.0.1:53562] "HSET" "\\xac\\xed\\x00\\x05t\\x00\\aStudent" "\\xac\\xed\\x00\\x05t\\x00\\nMed2015001" "\\xac\\xed\\x00\\x05sr\\x003seo.dale.practice.spring.data.redis.student.Student\\xfd\\x99\\xdd\\xc8\\xcd\\xdcT\\xa1\\x02\\x00\\x04I\\x00\\x05gradeL\\x00\\x06gendert\\x00<Lseo/dale/practice/spring/data/redis/student/Student$Gender;L\\x00\\x02idt\\x00\\x12Ljava/lang/String;L\\x00\\x04nameq\\x00~\\x00\\x02xp\\x00\\x00\\x00\\x02~r\\x00:seo.dale.practice.spring.data.redis.student.Student$Gender\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x12\\x00\\x00xr\\x00\\x0ejava.lang.Enum\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x12\\x00\\x00xpt\\x00\\x04MALEt\\x00\\nMed2015001t\\x00\\x0eGareth Houston"\r\n1479528067.911414 [0 127.0.0.1:53562] "HGETALL" "\\xac\\xed\\x00\\x05t\\x00\\aStudent"', NULL, '', 9, 0),
(2413, 'dale.seo', '', '', '2016-11-21 15:42:59', '', 'Homebrew로 Mac에 Tomcat 간편 설치', 'http://blog.devenjoy.com/?p=249\r\n\r\n================================\r\nbrew update\r\n\r\nbrew install tomcat\r\n\r\nsudo ln -s /usr/local/Cellar/tomcat/8.5.8/libexec /Library/Tomcat\r\n\r\nsudo chown -R 1002139 /Library/Tomcat\r\n\r\nsudo chmod +x /Library/Tomcat/bin/*.sh\r\n\r\n/Library/Tomcat/bin/startup.sh\r\n\r\nhttp://localhost:8080', NULL, '', 5, 0),
(2414, 'dale.seo', '', '', '2016-11-21 16:28:33', '', 'Redis 기본 커맨드', 'https://redis.io/topics/rediscli\r\nhttp://redis.io/topics/twitter-clone\r\n\r\n위 글에 보기쉽게 잘 나와 있음\r\n\r\n# 원격 Redis 서버 접속\r\n```\r\n$ redis-cli -h ec2-34-224-49-43.compute-1.amazonaws.com -p 8959\r\n```\r\n\r\n', NULL, '', 18, 0),
(2415, 'dale.seo', '', '', '2016-11-23 10:30:13', '', '2d array를 1d array로 flattern 시키기', 'nested list comprehention을 이용하면 됨\r\n\r\n>>> list_of_lists = [[180.0, 1, 2, 3], [173.8], [164.2], [156.5], [147.2], [138.2]]\r\n>>> flattened  = [val for sublist in list_of_lists for val in sublist]\r\n>>> flattened \r\n[180.0, 1, 2, 3, 173.8, 164.2, 156.5, 147.2,138.2]\r\n\r\n\r\nhttp://stackoverflow.com/questions/952914/making-a-flat-list-out-of-list-of-lists-in-python', NULL, '', 3, 0),
(2416, 'dale.seo', '', '', '2016-11-25 14:37:52', '', 'vi 에디터 단축키 끝판왕', 'https://kldp.org/node/102947', NULL, '', 4, 0),
(2417, 'dale.seo', '', '', '2016-12-05 15:19:02', '', 'ThreadLocal과 Optional 함께 쓰기', 'public class SecurityManager {\r\n\r\n    private static ThreadLocal<UserInfo> threadLocal = new ThreadLocal<>();\r\n\r\n    public void login(String userName, String password) {\r\n        threadLocal.set(new UserInfo(userName, password));\r\n    }\r\n\r\n    public void logout() {\r\n        threadLocal.set(null);\r\n    }\r\n\r\n    public Optional<UserInfo> getLoggedOnUser() {\r\n        return Optional.ofNullable(threadLocal.get());\r\n    }\r\n}', NULL, '', 3, 0),
(2418, 'dale.seo', '', '', '2016-12-05 16:41:55', '', 'Lombok 사용법', '[ 공식 사이트 ]\r\nhttps://projectlombok.org\r\nhttps://projectlombok.org/features/index.html\r\n\r\n[ IntelliJ 세팅 방법 ]\r\nhttp://blog.woniper.net/229\r\n1) Lombok Plugin 설치\r\n2) 아래 2개 설정\r\n1.) Intellij Idea -> Preferences -> Compiler -> Annotation Processors\r\n2.) File -> Other Settings -> Default Settings -> Compiler -> Annotation Processors', NULL, '', 13, 0),
(2419, 'dale.seo', '', '', '2016-12-06 18:41:04', '', 'jekyll serve 오류날 때 ', 'http://stackoverflow.com/questions/8809878/using-bundle-exec-may-solve-this\r\n\r\n아래와 같이 오류가 날 경우, bundle clean --force 명령어를 날려주면 해결이 된다.\r\n\r\n$ jekyll serve\r\n/usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.6/lib/bundler/runtime.rb:40:in `block in setup'': You have already activated jekyll 3.3.1, but your Gemfile requires jekyll 3.3.0. Prepending `bundle exec` to your command may solve this. (Gem::LoadError)\r\n	from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.6/lib/bundler/runtime.rb:25:in `map''\r\n	from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.6/lib/bundler/runtime.rb:25:in `setup''\r\n	from /usr/local/lib/ruby/gems/2.3.0/gems/bundler-1.13.6/lib/bundler.rb:99:in `setup''\r\n	from /usr/local/lib/ruby/gems/2.3.0/gems/jekyll-3.3.1/lib/jekyll/plugin_manager.rb:36:in `require_from_bundler''\r\n	from /usr/local/lib/ruby/gems/2.3.0/gems/jekyll-3.3.1/exe/jekyll:9:in `<top (required)>''\r\n	from /usr/local/bin/jekyll:19:in `load''\r\n	from /usr/local/bin/jekyll:19:in `<main>''', NULL, '', 4, 0),
(2420, 'dale.seo', '', '', '2016-12-06 19:00:27', '', 'jekyll cli', '$ jeckyll new .\r\n현재 디렉토리에 jeckyll 생성\r\n\r\n$ jeckyll new my-blog\r\nmy-blog 디렉토리에 jekyll 생성\r\n\r\n$ jeckyll build\r\n_site 디렉토리에 빌드하기\r\n\r\n$ jeckyll serve --watch\r\n개발 서버 올리기', NULL, '', 3, 0),
(2421, 'dale.seo', '', '', '2016-12-15 11:01:42', '', 'H2 Database의 3가지 모드', 'http://www.h2database.com/html/cheatSheet.html\r\n\r\n\r\n1. Embeded\r\n - 로컬 파일을 스토어로 사용\r\n - URL 예시\r\njdbc:h2:~/test => ''test'' in the user home directory\r\njdbc:h2:/data/test => ''test'' in the directory /data\r\njdbc:h2:./test => in the current(!) working directory\r\n(여기서 현재 디렉토리는 h2 커맨드가 있는 디렉토리 기준임 ex./usr/local/Cellar/h2/1.4.196/libexec/)\r\n\r\n2. In-momory\r\n - 메모리를 스토어로 사용\r\n - 어플리케이션 프로세스 종료 시점에 데이터 소멸\r\n - 단위 테스트에서 많이 사용\r\n - URL 예시\r\njdbc:h2:mem:test => multiple connections in one process\r\njdbc:h2:mem: => unnamed private; one connection\r\n\r\n3. TCP Server\r\n - 원격 서버가 될 수도 있고 로컬 서버가 될 수도 있음\r\n - TCP Server 구동 방법 : java -cp h2*.jar org.h2.tools.Server\r\n - URL 예시\r\njdbc:h2:tcp://localhost/~/test => user home dir\r\njdbc:h2:tcp://localhost//data/test => absolute dir', NULL, '', 17, 0),
(2422, 'dale.seo', '', '', '2016-12-15 11:27:39', '', 'H2 Mac에서 설치/서버 구동', '$ install brew h2\r\n$ h2', NULL, '', 5, 0),
(2423, 'dale.seo', '', '', '2016-12-15 11:28:50', '', 'H2 Console 설정 방법', '.h2.server.properties 파일이 홈디렉토리에 생김\r\n\r\nhttp://www.h2database.com/html/tutorial.html#console_settings', NULL, '', 8, 0),
(2424, 'dale.seo', '', '', '2016-12-22 09:23:23', '', 'Travis Heroku 연동', 'https://docs.travis-ci.com/user/deployment/heroku/\r\n\r\n1) https://travis-ci.org 에 가서 해당 Git Repository 추가\r\n2) $ travis setup heroku', NULL, '', 5, 0),
(2425, 'dale.seo', '', '', '2016-12-26 19:31:12', '', 'Java 커스텀 Stack 구현', 'import java.util.EmptyStackException;\r\n\r\n/**\r\n * https://github.com/careercup/CtCI-6th-Edition/blob/master/Java/Ch%2003.%20Stacks%20and%20Queues/Introduction/MyStack.java\r\n */\r\npublic class MyStack<T> {\r\n\r\n	private static class Node<T> {\r\n		private T data;\r\n		private Node<T> next;\r\n\r\n		public Node(T data) {\r\n			this.data = data;\r\n		}\r\n	}\r\n\r\n	private Node<T> top;\r\n\r\n	public void push(T item) {\r\n		Node<T> node =  new Node<>(item);\r\n		node.next = top;\r\n		top = node;\r\n	}\r\n\r\n	public T pop() {\r\n		T item = peek();\r\n		top = top.next;\r\n		return item;\r\n	}\r\n\r\n	public T peek() {\r\n		if (top == null) {\r\n			throw new EmptyStackException();\r\n		}\r\n		return top.data;\r\n	}\r\n\r\n	public boolean isEmpty() {\r\n		return top == null;\r\n	}\r\n\r\n}', NULL, '', 3, 0),
(2426, 'dale.seo', '', '', '2016-12-26 19:45:17', '', 'Java 커스텀 Queue 구현', 'import java.util.NoSuchElementException;\r\n\r\n/**\r\n * https://github.com/careercup/CtCI-6th-Edition/blob/master/Java/Ch%2003.%20Stacks%20and%20Queues/Introduction/MyQueue.java\r\n */\r\npublic class MyQueue<T> {\r\n\r\n	private static class Node<T> {\r\n		private T data;\r\n		private Node<T> next;\r\n\r\n		public Node(T data) {\r\n			this.data = data;\r\n		}\r\n	}\r\n\r\n	private Node<T> head;\r\n	private Node<T> tail;\r\n\r\n	public void add(T item) {\r\n		Node<T> node = new Node(item);\r\n		if (tail != null) {\r\n			tail.next = node;\r\n		}\r\n		tail = node;\r\n		if (head == null) {\r\n			head = tail;\r\n		}\r\n	}\r\n\r\n	public T remove() {\r\n		T item = peek();\r\n		head = head.next;\r\n		if (head == null) {\r\n			tail = null;\r\n		}\r\n		return item;\r\n	}\r\n\r\n	public T peek() {\r\n		if (head == null) {\r\n			throw new NoSuchElementException();\r\n		}\r\n		return head.data;\r\n	}\r\n\r\n	public boolean isEmpty() {\r\n		return head == null;\r\n	}\r\n}', NULL, '', 3, 0),
(2427, 'dale.seo', '', '', '2016-12-28 12:00:50', '', 'Java volatile 키워드', 'http://tutorials.jenkov.com/java-concurrency/volatile.html\r\n\r\nhttps://www.ibm.com/developerworks/library/j-5things15/', NULL, '', 6, 0),
(2428, 'dale.seo', '', '', '2016-12-28 15:27:26', '', 'DB Transaction Isolation Level (격리 수준)', 'http://gdbt.tistory.com/79\r\nhttps://en.wikipedia.org/wiki/Isolation_(database_systems)\r\n\r\n4가지 DB 트렌젝션 격리 수준에 대해서 숙지할 것\r\n\r\n2.1	Serializable\r\n2.2	Repeatable reads\r\n2.3	Read committed\r\n2.4	Read uncommitted', NULL, '', 4, 0),
(2429, 'dale.seo', '', '', '2016-12-29 09:16:14', '', '간단한 Tree, Graph 자바 구현', 'Tree는 하나의 root만 관리하고, Graph는 여러 개의 node를 관리하는 게 유일한 차이\r\n\r\n// Shared\r\nclass Node<T> {\r\n  public T data;\r\n  public Node<T>[] children;\r\n}\r\n\r\n// Tree\r\nclass Tree<T> {\r\n  public Node<T> root;\r\n}\r\n\r\n// Graph\r\nclass Graph {\r\n  public Node<T> nodes;\r\n}', NULL, '', 3, 0),
(2430, 'dale.seo', '', '', '2017-01-06 19:20:30', '', 'jQuery로 JSONP 호출 방법', 'http://stackoverflow.com/questions/16193653/using-jquery-and-json-to-display-groups-from-meetup-api\r\n\r\n\r\nURL에 ?callback= 만 붙어주면 됨\r\n-----------------------------------------------------------------------------------------------------------------------------------------------------\r\n  function loadMeetups() {\r\n    $.getJSON(''https://api.meetup.com/Learn-Teach-Code-Seoul/events?callback=?&sign=true&photo-host=public&page=20'')\r\n      .done((data) => {\r\n        console.log(data);\r\n      })\r\n      .fail(() => {\r\n        console.log(''error'');\r\n      });\r\n  }', NULL, '', 2, 0),
(2431, 'dale.seo', '', '', '2017-01-09 13:04:34', '', 'net 모듈을 이용해서 TCP 서버 만들기', '다음과 같이 telnet 명령어를 이용해서 테스트할 수 있음\r\n\r\n################################################\r\n$ telnet localhost 8888\r\nTrying ::1...\r\nConnected to localhost.\r\nEscape character is ''^]''.\r\nhihi\r\nhihi\r\n\r\n################################################\r\n// Echo Server\r\nvar net = require(''net'');\r\n\r\nvar server = net.createServer();\r\nserver.on(''connection'', socket => {\r\n	socket.on(''data'', data => {\r\n		console.log(data);\r\n		socket.write(data);\r\n	})\r\n})\r\n\r\nserver.listen(8888);\r\n\r\n', NULL, '', 2, 0),
(2432, 'dale.seo', '', '', '2017-01-09 13:27:29', '', 'Global Error Handler', 'NodeJS에서 에러가 발생했을 때 stack trace를 출력하고 종료되는 게 싫다면,\r\n다음과 같이 글로벌 에러 핸들러를 등록해놓을 수 있다.\r\n\r\nprocess.on(''uncaughtException'', function(err) {\r\n  console.error(err.stack);\r\n  process.exit(1);\r\n}', NULL, '', 2, 0),
(2433, 'dale.seo', '', '', '2017-01-11 15:28:23', '', 'AWS CLI 설치', '< MAC >\r\n\r\n$ brew install awscli\r\n\r\n< Windows >\r\n파이썬 패키지 매니저로 설치\r\n\r\n$ pip install awscli', NULL, '', 7, 0),
(2434, 'dale.seo', '', '', '2017-01-16 11:21:53', '', '메모리 관점에서 본 프로세스와 쓰레드', '[OS]메모리 관점에서 본 쓰레드(thread)\r\n\r\n여러 개의 쓰레드가 하나의 프로세스 내에서 Heap 영역은 공유하되, Stack 영역은 별개로 가짐\r\n\r\nhttp://mooneegee.blogspot.kr/2015/01/os-process.html\r\nhttp://mooneegee.blogspot.kr/2015/01/os-thread.html', NULL, '', 2, 0),
(2435, 'dale.seo', '', '', '2017-01-18 14:49:36', '', '윈도우 10에서 우분투 듀얼부팅 하기(멀티부팅)', 'http://palpit.tistory.com/765\r\nhttp://palpit.tistory.com/766', NULL, '', 7, 0),
(2436, 'dale.seo', '', '', '2017-01-18 15:04:05', '', '윈도우 10에서 Bash Shell 지원 - Windows Subsystem for Linux (WSL)', 'https://blogs.msdn.microsoft.com/eva/?p=7633\r\nhttp://www.zdnet.com/article/how-to-run-run-the-native-ubuntu-desktop-on-windows-10/', NULL, '', 4, 0),
(2437, 'dale.seo', '', '', '2017-01-19 08:04:37', '', '우분투 설치용 USB 메모리 만드는 방법', 'http://sergeswin.com/1178\r\n\r\n1. 우분투 iso 파일 다운로드\r\n\r\nhttps://www.ubuntu.com/download/desktop\r\n\r\n2. 유니버셜 USB 인스톨러 설치\r\n\r\nhttps://www.pendrivelinux.com/universal-usb-installer-easy-as-1-2-3/\r\n\r\n3. USB 디스크 꼽고 iso 파일 경로와 USB 디스크 드라이브 볼륨만 선택해주면 끝', NULL, '', 6, 0),
(2439, 'dale.seo', '', '', '2017-01-23 08:48:42', '', '우분투 전원관리', '\r\n# 1. TLP\r\n\r\nhttp://sergeswin.com/954\r\nhttps://partrita.wordpress.com/2015/03/30/%EC%9A%B0%EB%B6%84%ED%88%AC%EB%A5%BC-%EB%85%B8%ED%8A%B8%EB%B6%81%EC%97%90-%EC%B5%9C%EC%A0%81%ED%99%94-%EC%8B%9C%ED%82%A4%EA%B8%B0-tlp/\r\n\r\n* 우분투 저장소 추가 명령 (드래그 선택 후 복사):\r\nsudo add-apt-repository ppa:linrunner/tlp\r\n\r\n* 우분투 저장소 새로 고침 명령 (드래그 선택 후 복사):\r\nsudo apt-get update\r\n\r\n* TLP 설치 (드래그 선택 후 복사):\r\nsudo apt-get install tlp tlp-rdw\r\n\r\n* 싱크패드 사용자를 위한 추가 패키지 (드래그 선택 후 복사):\r\nsudo apt-get install tp-smapi-dkms acpi-call-tools\r\n\r\n* TLP 서비스 시작 명령 (드래그 선택 후 복사):\r\nsudo tlp start\r\n\r\n\r\n# 2. laptop-mode-tools (리눅스 민트에서만)\r\n\r\nhttps://community.linuxmint.com/software/view/laptop-mode-tools', NULL, '', 15, 0),
(2440, 'dale.seo', '', '', '2017-01-27 14:07:13', '', '의존성 트리 확인 (Gradle vs. Maven)', '# Gradle\r\n\r\n$ ./gradlew dependencies --configuration runtime\r\n\r\n# Maven\r\n\r\n$ mvn dependency:tree\r\n', NULL, '', 6, 0),
(2441, 'dale.seo', '', '', '2017-01-27 14:11:25', '', '전의적 의존성 제외 방법 (Gradle vs. Maven)', '# Gradle\r\n\r\ncompile(''org.springframework.boot:spring-boot-starter-web'') {\r\n    exclude group: ''com.fasterxml.jackson.core''\r\n}\r\n\r\n\r\n# Maven\r\n\r\n<dependency>\r\n  <groupId>org.springframework.boot</groupId>\r\n  <artifactId>spring-boot-starter-web</artifactId>\r\n  <exclusions>\r\n    <exclusion>\r\n      <groupId>com.fasterxml.jackson.core</groupId>\r\n    </exclusion>\r\n  </exclusions>\r\n</dependency>', NULL, '', 5, 0),
(2442, 'dale.seo', '', '', '2017-01-31 21:01:51', '', 'Node Debuger', '\r\nc : 다음 break point\r\nn : 다음 line\r\ns : step inside\r\no : step outside\r\n\r\n====================================================================\r\n실행\r\n=====================================================================\r\n\r\n$ node debug hello-debug.js\r\n\r\n=====================================================================\r\nhello-debug.js\r\n=====================================================================\r\n\r\nvar http = require(''http'');\r\ndebugger;\r\nhttp.createServer(function (req, res) {\r\n  res.writeHead(200, {''Content-Type'': ''text/plain''});\r\n  debugger;\r\n  res.end(''Hello World\\n'');\r\n}).listen(1337, ''127.0.0.1'');\r\nconsole.log(''Server running at http://127.0.0.1:1337/'');\r\n', NULL, '', 2, 0),
(2443, 'dale.seo', '', '', '2017-02-03 18:33:25', '', '리눅스 크롬 설치 방법', 'http://dongjinlee.tistory.com/entry/Ubuntu-1604%EC%97%90%EC%84%9C-chrome-install-%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\r\n\r\n1.  https://www.google.com/chrome/ 에서 크롬 설치 파일 (.deb) 다운로드\r\n2. sudo apt-get -f install\r\n3. sudo dpkg -i google-chrome-stable_current_amd64.deb', NULL, '', 7, 0),
(2444, 'dale.seo', '', '', '2017-02-03 18:40:20', '', '우분투, 리눅스 민트 설치 후 무선 인터넷(wifi)이 안 될 때', '다 필요 없고 커널만 최신으로 업데이트하면 된다', NULL, '', 3, 0),
(2445, 'dale.seo', '', '', '2017-02-03 18:52:39', '', '키모음 잠금 풀기 (default keyring to unlock) 문제 해결', 'http://horangi.tistory.com/346\r\n\r\n 1. 터미널에서 아래의 명령어를 입력하고 엔터.\r\n      mv ~/.local/share/keyrings ~/.local/share/keyrings.old\r\n\r\n2. 재부팅.\r\n\r\n3. 다시 입력 대화상자가 뜨면 그냥 아무것도 입력하지 않고 ok 하면 다음부터 안 뜸', NULL, '', 11, 0),
(2446, 'dale.seo', '', '', '2017-02-04 23:19:42', '', 'JavaScript Array splice() Method', '첫번째 파라미터로 들어온 인덱스 이후를 삭제한다. (삭제된 부분은 반환한다.)\r\n\r\n> let arr = [0, 1, 2, 3, 4, 5]\r\nundefined\r\n> arr.splice(2)\r\n[ 2, 3, 4, 5 ]\r\n> arr\r\n[ 0, 1 ]\r\n', NULL, '', 7, 0),
(2447, 'dale.seo', '', '', '2017-02-04 23:30:37', '', 'process.cwd() vs. __dirname', 'http://stackoverflow.com/questions/9874382/whats-the-difference-between-process-cwd-vs-dirname\r\n\r\n\r\nprocess.cwd()는 터미널에서 node 명령어를 실행시킨 위치를 리턴하고,\r\n__dirname은 실행된 파일의 위치를 리턴한다.', NULL, '', 2, 0),
(2448, 'dale.seo', '', '', '2017-02-05 08:02:47', '', 'JavaScript JSON 모듈', '자바스크립트 객체와 JSON 스트링 간에 변환에 쓰인다.\r\n\r\n> JSON.stringify({id: 1, name: ''Dale''})\r\n''{"id":1,"name":"Dale"}''\r\n> JSON.parse(''{"id":1,"name":"Dale"}'')\r\n{ id: 1, name: ''Dale'' }\r\n', NULL, '', 2, 0),
(2449, 'dale.seo', '', '', '2017-02-06 12:05:36', '', 'Socket.io 기본 사용법', 'https://github.com/socketio/socket.io#how-to-use', NULL, '', 3, 0),
(2450, 'dale.seo', '', '', '2017-02-06 12:09:02', '', 'Socket.io로 간단한 채팅 앱 만들기', 'http://socket.io/get-started/chat/', NULL, '', 2, 0),
(2451, 'dale.seo', '', '', '2017-02-06 12:12:51', '', 'Socket.io Cheatsheet', 'https://gist.github.com/alexpchin/3f257d0bb813e2c8c476\r\nhttps://github.com/socketio/socket.io/blob/master/docs/emit.md', NULL, '', 7, 0),
(2452, 'dale.seo', '', '', '2017-02-06 19:51:40', '', 'jQuery.data() 이해와 활용', 'http://www.nextree.co.kr/p10155/', NULL, '', 2, 0),
(2453, 'dale.seo', '', '', '2017-02-10 13:06:47', '', 'webpack에서 jquery 임포트 하는 방법', '# 우선 jquery 패키지 인스톨\r\n$ npm -i -S jquery\r\n\r\n# es6\r\nimport $ from ''jquery'';\r\n\r\n# Common JS\r\nvar $ = require(''jquery'');\r\n\r\n위처럼 하면 별도의 webpack.config.js를 세팅할 필요는 없음', NULL, '', 3, 0),
(2454, 'dale.seo', '', '', '2017-02-10 13:49:42', '', ' Object 또는 Map 타입의 인자를 쿼리 스트링으로 변환', 'package seo.dale.http.client.common;\r\n\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport org.apache.commons.lang3.StringUtils;\r\n\r\nimport java.io.UnsupportedEncodingException;\r\nimport java.net.URLEncoder;\r\nimport java.util.Map;\r\n\r\n/**\r\n * HttpClient 유틸리티 클래스\r\n */\r\npublic class HttpClientUtils {\r\n\r\n	/**\r\n	 * Object 또는 Map 타입의 인자를 쿼리 스트링으로 변환한다.\r\n	 */\r\n	public static String toQueryString(Object obj) {\r\n		ObjectMapper mapper = new ObjectMapper();\r\n\r\n		Map<String, Object> map;\r\n		if (obj instanceof Map) {\r\n			map = (Map<String, Object>) obj;\r\n		} else {\r\n			map = mapper.convertValue(obj, Map.class);\r\n		}\r\n\r\n		String queryString = "";\r\n		for (Map.Entry<String, Object> entry : map.entrySet()) {\r\n			String key = entry.getKey();\r\n			if (entry.getValue() == null) {\r\n				continue;\r\n			}\r\n			String value = entry.getValue().toString();\r\n			try {\r\n				value = URLEncoder.encode(value, "UTF-8");\r\n			} catch (UnsupportedEncodingException e) {\r\n				// skip url encoding\r\n				e.printStackTrace();\r\n			}\r\n			queryString += key + "=" + value + "&";\r\n		}\r\n\r\n		return StringUtils.substringBeforeLast(queryString, "&");\r\n	}\r\n\r\n}\r\n', NULL, '', 2, 0),
(2455, 'dale.seo', '', '', '2017-02-10 15:09:11', '', 'DefaultResponseErrorHandler에서 오류 응답 메세지를 자바 객체로 변환하는 방법', '에러 핸들러에 RestTemplate에 세팅되어 있는 동일한 messageConverters를 주입하고,\r\nHttpMessageConverterExtractor를 이용하여 오류 응답 메세지를 자바 객체로 변환한다.\r\n보통 이 자바 객체는 예외 클래스의 생성자로 넘긴 후에 throw 처리한다.\r\n\r\n===============================================================================\r\n구현체\r\n===============================================================================\r\npackage com.skplanet.storeplatform.framework.web.client.sac.error;\r\n\r\nimport com.skplanet.storeplatform.framework.core.exception.vo.ErrorInfo;\r\nimport com.skplanet.storeplatform.framework.web.client.sac.common.SacClientConstants;\r\nimport com.skplanet.storeplatform.framework.web.client.sac.model.SacClientResponse;\r\nimport com.skplanet.storeplatform.framework.web.client.sac.converter.SacClientErrorConverter;\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.http.HttpHeaders;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.client.ClientHttpResponse;\r\nimport org.springframework.http.converter.HttpMessageConverter;\r\nimport org.springframework.web.client.DefaultResponseErrorHandler;\r\nimport org.springframework.web.client.HttpMessageConverterExtractor;\r\n\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * SAC 호출용 응답 에러 핸드러\r\n */\r\npublic class SacClientErrorHandler extends DefaultResponseErrorHandler {\r\n\r\n	private static final Logger LOGGER = LoggerFactory.getLogger(SacClientErrorHandler.class);\r\n\r\n	private SacClientErrorConverter errorConverter = new SacClientErrorConverter();\r\n\r\n	private List<HttpMessageConverter<?>> messageConverters = new ArrayList<>();\r\n\r\n	public void setMessageConverters(List<HttpMessageConverter<?>> messageConverters) {\r\n		this.messageConverters = messageConverters;\r\n	}\r\n\r\n	/**\r\n	 * 응답을 보니 에러가 있는가?\r\n	 * Reuslt Code 헤더가 SUCC이고 Http Status가 200이면 정상(return false)이다.\r\n	 */\r\n	@Override\r\n	public boolean hasError(ClientHttpResponse response) throws IOException {\r\n		HttpStatus httpStatusCode = response.getStatusCode();\r\n		String resultCode = response.getHeaders().getFirst(SacClientConstants.HEADER_RESULT_CODE);\r\n\r\n		boolean httpStatusIs200OK = httpStatusCode == HttpStatus.OK;\r\n		boolean resultCodeIsSuccess = StringUtils.equalsIgnoreCase(resultCode, "SUCC");\r\n\r\n		boolean hasError = !(httpStatusIs200OK && resultCodeIsSuccess);\r\n		if (hasError) {\r\n			LOGGER.error("# Wrong response coming from SAC : {} {}", httpStatusCode, resultCode);\r\n		} else {\r\n			LOGGER.info("# Right response coming from SAC : {} {}", httpStatusCode, resultCode);\r\n		}\r\n		return hasError;\r\n	}\r\n\r\n	@Override\r\n	public void handleError(ClientHttpResponse response) throws IOException {\r\n		HttpStatus httpStatus = response.getStatusCode();\r\n		HttpHeaders httpHeaders = response.getHeaders();\r\n\r\n		HttpMessageConverterExtractor<ErrorInfo> responseExtractor = new HttpMessageConverterExtractor<>(ErrorInfo.class, messageConverters);\r\n		ErrorInfo errorInfo = responseExtractor.extractData(response);\r\n\r\n		SacClientResponse<String> sacClientResponse = errorConverter.convert(httpStatus, httpHeaders, errorInfo);\r\n\r\n		throw new SacClientError(errorInfo, sacClientResponse);\r\n	}\r\n\r\n}\r\n\r\n\r\n\r\n===============================================================================\r\n테스트\r\n===============================================================================\r\npackage com.skplanet.storeplatform.framework.web.client.sac.error;\r\n\r\nimport com.skplanet.storeplatform.framework.web.client.sac.common.SacClientConstants;\r\nimport org.junit.BeforeClass;\r\nimport org.junit.Test;\r\nimport org.springframework.http.HttpHeaders;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.client.ClientHttpResponse;\r\n\r\nimport java.io.IOException;\r\n\r\nimport static org.junit.Assert.assertFalse;\r\nimport static org.junit.Assert.assertTrue;\r\nimport static org.mockito.Mockito.*;\r\n\r\npublic class SacClientErrorHandlerTest {\r\n\r\n	private static HttpHeaders emptyHeader;\r\n	private static HttpHeaders failHeader;\r\n	private static HttpHeaders succHeader;\r\n\r\n	private SacClientErrorHandler errorHandler = new SacClientErrorHandler();\r\n\r\n	@BeforeClass\r\n	public static void beforeClass() {\r\n		emptyHeader = new HttpHeaders();\r\n\r\n		failHeader = new HttpHeaders();\r\n		failHeader.set(SacClientConstants.HEADER_RESULT_CODE, "FAIL");\r\n\r\n		succHeader = new HttpHeaders();\r\n		succHeader.set(SacClientConstants.HEADER_RESULT_CODE, "SUCC");\r\n	}\r\n\r\n	/**\r\n	 * Reuslt Code 헤더가 SUCC이고 HTTP Status Code가 200일 때만 정상\r\n	 */\r\n	@Test\r\n	public void hasNoErrorOnlyWhenResultCodeIsSuccAndStatusCodeIs200() throws IOException {\r\n		ClientHttpResponse response = mock(ClientHttpResponse.class);\r\n		when(response.getHeaders()).thenReturn(succHeader);\r\n		when(response.getStatusCode()).thenReturn(HttpStatus.OK);\r\n		assertFalse(errorHandler.hasError(response));\r\n\r\n		verify(response).getHeaders();\r\n		verify(response).getStatusCode();\r\n	}\r\n\r\n	/**\r\n	 * Result Code 헤더가 FAIL이면 오류\r\n	 */\r\n	@Test\r\n	public void hasErrorWhenResultCodeIsFail() throws IOException {\r\n		ClientHttpResponse response = mock(ClientHttpResponse.class);\r\n		when(response.getHeaders()).thenReturn(failHeader);\r\n		when(response.getStatusCode()).thenReturn(HttpStatus.OK);\r\n		assertTrue(errorHandler.hasError(response));\r\n\r\n		verify(response).getHeaders();\r\n		verify(response).getStatusCode();\r\n	}\r\n\r\n	/**\r\n	 * Http Status Code 값이 200이 아니면 오륲\r\n	 */\r\n	@Test\r\n	public void hasErrorWhenStatusCodeIsNot200() throws IOException {\r\n		ClientHttpResponse response = mock(ClientHttpResponse.class);\r\n		when(response.getHeaders()).thenReturn(succHeader);\r\n		when(response.getStatusCode()).thenReturn(HttpStatus.INTERNAL_SERVER_ERROR);\r\n		assertTrue(errorHandler.hasError(response));\r\n\r\n		verify(response).getHeaders();\r\n		verify(response).getStatusCode();\r\n	}\r\n\r\n	/**\r\n	 * Result Code 헤더가 없으면 오류\r\n	 */\r\n	@Test\r\n	public void hasErrorWithoutResultCode() throws IOException {\r\n		ClientHttpResponse response = mock(ClientHttpResponse.class);\r\n		when(response.getHeaders()).thenReturn(emptyHeader);\r\n		when(response.getStatusCode()).thenReturn(HttpStatus.OK);\r\n		assertTrue(errorHandler.hasError(response));\r\n\r\n		verify(response).getHeaders();\r\n		verify(response).getStatusCode();\r\n	}\r\n\r\n	/**\r\n	 * Http Status Code 값이 없으면 오류\r\n	 */\r\n	@Test\r\n	public void hasErrorWithoutStatusCode() throws IOException {\r\n		ClientHttpResponse response = mock(ClientHttpResponse.class);\r\n		when(response.getHeaders()).thenReturn(succHeader);\r\n		assertTrue(errorHandler.hasError(response));\r\n\r\n		verify(response).getHeaders();\r\n		verify(response).getStatusCode();\r\n	}\r\n\r\n}', NULL, '', 7, 0),
(2456, 'dale.seo', '', '', '2017-02-10 16:50:04', '', 'RestTemplate의 Interceptor 테스트 방법', '\r\n===========================================================================================================\r\n테스트\r\n===========================================================================================================\r\n\r\npackage com.skplanet.storeplatform.framework.web.client.interceptor;\r\n\r\nimport com.skplanet.storeplatform.framework.log.rest.RestLoggingConfig;\r\nimport org.junit.Test;\r\nimport org.springframework.http.HttpMethod;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.client.ClientHttpRequestExecution;\r\nimport org.springframework.mock.http.client.MockClientHttpRequest;\r\nimport org.springframework.mock.http.client.MockClientHttpResponse;\r\n\r\nimport java.io.IOException;\r\nimport java.net.URI;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\n\r\npublic class RestLoggingInterceptorTest {\r\n\r\n	private static final String requestBody = "{\\n" +\r\n			"  \\"id\\": 111,\\n" +\r\n			"  \\"title\\": \\"Request Body\\",\\n" +\r\n			"  \\"description\\": \\"요청 보내요 !@#$%^&*()-=\\"\\n" +\r\n			"}";\r\n	private static final String responseBody = "{\\n" +\r\n			"  \\"id\\": 222,\\n" +\r\n			"  \\"title\\": \\"Response Body\\",\\n" +\r\n			"  \\"description\\": \\"응답 받아요 !@#$%^&*()-=\\"\\n" +\r\n			"}";\r\n\r\n	@Test\r\n	public void testInterceptWithLength30() throws IOException {\r\n		RestLoggingConfig config = RestLoggingConfig.custom()\r\n				.loggerName(getClass().getName())\r\n				.logLevel("DEBUG")\r\n				.maxPayloadLength(30)\r\n				.resultCodeHeaderName("x-result-code")\r\n				.messagePrefix("XXX")\r\n				.skippableOnSuccess(true)\r\n				.build();\r\n\r\n		RestLoggingInterceptor logInterceptor = new RestLoggingInterceptor(config);\r\n\r\n		MockClientHttpRequest request = new MockClientHttpRequest(HttpMethod.POST, URI.create("http://www.test.com/api"));\r\n\r\n		ClientHttpRequestExecution execution = (req, body) -> new MockClientHttpResponse(responseBody.getBytes(), HttpStatus.OK);\r\n\r\n		MockClientHttpResponse response = (MockClientHttpResponse) logInterceptor.intercept(request, requestBody.getBytes(), execution);\r\n		assertEquals(HttpStatus.OK, response.getStatusCode());\r\n	}\r\n\r\n	@Test\r\n	public void testInterceptWithLength1000() throws Exception {\r\n		RestLoggingConfig config = RestLoggingConfig.custom()\r\n				.loggerName(getClass().getName())\r\n				.logLevel("WARN")\r\n				.maxPayloadLength(-1)\r\n				.resultCodeHeaderName("x-result-code")\r\n				.messagePrefix("YYY")\r\n				.skippableOnSuccess(false)\r\n				.build();\r\n\r\n		RestLoggingInterceptor logInterceptor = new RestLoggingInterceptor(config);\r\n		MockClientHttpRequest request = new MockClientHttpRequest(HttpMethod.POST, URI.create("http://www.test.com/api"));\r\n\r\n		ClientHttpRequestExecution execution = (req, body) -> new MockClientHttpResponse(responseBody.getBytes(), HttpStatus.OK);\r\n\r\n		MockClientHttpResponse response = (MockClientHttpResponse) logInterceptor.intercept(request, requestBody.getBytes(), execution);\r\n		assertEquals(HttpStatus.OK, response.getStatusCode());\r\n	}\r\n\r\n}\r\n\r\n\r\n===========================================================================================================\r\n구현체\r\n===========================================================================================================\r\npackage com.skplanet.storeplatform.framework.web.client.interceptor;\r\n\r\nimport com.skplanet.storeplatform.framework.log.rest.RestClientLogger;\r\nimport com.skplanet.storeplatform.framework.log.rest.RestLoggingConfig;\r\nimport org.springframework.http.HttpRequest;\r\nimport org.springframework.http.client.ClientHttpRequestExecution;\r\nimport org.springframework.http.client.ClientHttpRequestInterceptor;\r\nimport org.springframework.http.client.ClientHttpResponse;\r\n\r\nimport java.io.IOException;\r\n\r\n/**\r\n * REST API 호출용 인터셉터\r\n */\r\npublic class RestLoggingInterceptor implements ClientHttpRequestInterceptor {\r\n\r\n	private RestClientLogger logger;\r\n	private LoggingPreventer preventer;\r\n\r\n	public RestLoggingInterceptor(RestLoggingConfig config) {\r\n		this(config, new LoggingPreventer() {\r\n			@Override\r\n			public boolean shouldPreventRequestLogging(HttpRequest request, byte[] body) {\r\n				return false;\r\n			}\r\n			@Override\r\n			public boolean shouldPreventResponseLogging(HttpRequest request, ClientHttpResponse response) {\r\n				return false;\r\n			}\r\n		}); // 디폴트로 항상 로깅 방지 안 함\r\n	}\r\n\r\n	public RestLoggingInterceptor(RestLoggingConfig config, LoggingPreventer preventer) {\r\n		this.logger = new RestClientLogger(config);\r\n		this.preventer = preventer;\r\n	}\r\n\r\n	@Override\r\n    public ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution) throws IOException {\r\n		ClientHttpResponse response;\r\n		if (!preventer.shouldPreventRequestLogging(request, body)) {\r\n			logger.logClientRequest(request, body);\r\n		}\r\n		response = execution.execute(request, body);\r\n    	if (!preventer.shouldPreventResponseLogging(request, response)) {\r\n		    logger.logClientResponse(response);\r\n	    }\r\n        return response;\r\n    }\r\n\r\n	/**\r\n	 * 로깅 방지용 인터페이스\r\n	 */\r\n	public interface LoggingPreventer {\r\n\r\n		/**\r\n		 * 요청 로깅을 방지해야 하느냐?\r\n		 * @return true 방지함, false 방지 안함\r\n		 */\r\n		boolean shouldPreventRequestLogging(HttpRequest request, byte[] body);\r\n\r\n		/**\r\n		 * 응답 로깅을 방지해야 하느냐?\r\n		 * @return true 방지함, false 방지 안함\r\n		 */\r\n		boolean shouldPreventResponseLogging(HttpRequest request, ClientHttpResponse response);\r\n\r\n	}\r\n\r\n}\r\n', NULL, '', 3, 0),
(2457, 'dale.seo', '', '', '2017-02-12 09:56:10', '', 'Socket.io 주요 API', '// 송신자에게만 보내기\r\nsocket.emit(''message'', "this is a test");\r\n\r\n// 송신자를 포함한 모든 유저에게 보내기\r\nio.emit(''message'', "this is a test");\r\n\r\n// 송신자를 제외한 모든 유저에게 보내기\r\nsocket.broadcast.emit(''message'', "this is a test");', NULL, '', 2, 0),
(2458, 'dale.seo', '', '', '2017-02-15 17:26:11', '', 'SLF4J 로거의 메소드를 스트링으로 호출하기', '다음과 같이 리플렉션을 이용하면 된다.\r\n\r\n	/**\r\n	 * 로그 이름으로 로거를 얻어와서 로그 레벨에 따라 로그 메세지를 출력한다.\r\n	 */\r\n	public static void logByLevel(String loggerName, String logLevel, String logMessage) {\r\n		Logger logger = LoggerFactory.getLogger(loggerName);\r\n		try {\r\n			MethodUtils.invokeMethod(logger, StringUtils.lowerCase(logLevel), logMessage);\r\n		} catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {\r\n			logger.error("Request Logging Failed!");\r\n		}\r\n	}', NULL, '', 2, 0),
(2459, 'dale.seo', '', '', '2017-02-16 15:10:55', '', '로깅 자체에 대한 단위 테스트 (ArgumentCaptor) 2', 'ArgumentCaptor에서 getAllValues()를 호출하면 여러 개의 로그도 체크할 수 있다.\r\n\r\n\r\n===================================================================================================\r\nimport ch.qos.logback.classic.Logger;\r\nimport ch.qos.logback.classic.spi.IThrowableProxy;\r\nimport ch.qos.logback.classic.spi.LoggingEvent;\r\nimport ch.qos.logback.classic.spi.StackTraceElementProxy;\r\nimport ch.qos.logback.core.Appender;\r\nimport com.skplanet.storeplatform.framework.core.exception.ErrorConstants;\r\nimport com.skplanet.storeplatform.framework.core.exception.StorePlatformException;\r\nimport com.skplanet.storeplatform.framework.core.exception.vo.ErrorInfo;\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\nimport org.junit.runner.RunWith;\r\nimport org.mockito.ArgumentCaptor;\r\nimport org.mockito.Mock;\r\nimport org.mockito.runners.MockitoJUnitRunner;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.context.MessageSource;\r\nimport org.springframework.context.i18n.LocaleContextHolder;\r\nimport org.springframework.http.HttpHeaders;\r\nimport org.springframework.http.HttpStatus;\r\n\r\nimport java.util.Locale;\r\n\r\nimport static junit.framework.TestCase.assertNull;\r\nimport static junit.framework.TestCase.assertTrue;\r\nimport static org.junit.Assert.assertEquals;\r\nimport static org.mockito.Mockito.*;\r\n\r\n/**\r\n * @author 서대영/Store기술개발팀/SKP\r\n */\r\n@RunWith(MockitoJUnitRunner.class)\r\npublic class DefaultExceptionHandlingStrategyTest {\r\n\r\n	private DefaultExceptionHandlingStrategy strategy;\r\n\r\n	private Appender mockAppender;\r\n	private ArgumentCaptor<LoggingEvent> argumentCaptor;\r\n\r\n	@Mock\r\n	private MessageSource messageSource;\r\n\r\n	@Before\r\n	public void setUp() throws Exception {\r\n		strategy = new DefaultExceptionHandlingStrategy(messageSource);\r\n\r\n		mockAppender = mock(Appender.class);\r\n		argumentCaptor = ArgumentCaptor.forClass(LoggingEvent.class);\r\n\r\n		Logger logbackLogger = (Logger) LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME);\r\n		logbackLogger.addAppender(mockAppender);\r\n	}\r\n\r\n	@Test\r\n	public void testResolveBody() throws Exception {\r\n		String code = "SYS_ERROR";\r\n		Object[] args = {1, "One"};\r\n		String defaultMessage = ErrorConstants.DEFAULT_ERROR_MESSAGE;\r\n		String message = "System Error! 1 = One";\r\n		Locale locale = LocaleContextHolder.getLocale();\r\n\r\n		when(messageSource.getMessage(code, args, defaultMessage, locale)).thenReturn(message);\r\n		ErrorInfo errorInfo = strategy.resolveBody(new StorePlatformException(code, args));\r\n		assertEquals(code, errorInfo.getCode());\r\n		assertEquals(message, errorInfo.getMessage());\r\n\r\n		verify(messageSource).getMessage(code, args, defaultMessage, locale);\r\n		verify(mockAppender, times(4)).doAppend(argumentCaptor.capture());\r\n\r\n		for (LoggingEvent loggingEvent : argumentCaptor.getAllValues()) {\r\n			String logMessage = loggingEvent.getFormattedMessage();\r\n			if (loggingEvent.getThrowableProxy() != null) {\r\n				IThrowableProxy throwableProxy = loggingEvent.getThrowableProxy();\r\n				assertEquals(code, throwableProxy.getMessage());\r\n				assertEquals("com.skplanet.storeplatform.framework.core.exception.StorePlatformException", throwableProxy.getClassName());\r\n				StackTraceElementProxy[] stackTraceElementProxies = throwableProxy.getStackTraceElementProxyArray();\r\n				assertTrue(stackTraceElementProxies.length > 0);\r\n				assertTrue(stackTraceElementProxies[0].getSTEAsString().contains(getClass().getName()));\r\n			}\r\n			System.out.println("# LOG MESSAGE >> " + logMessage);\r\n		}\r\n	}\r\n\r\n	@Test\r\n	public void testResolveHeaders() throws Exception {\r\n		String code = "SYS_ERROR";\r\n		Object[] args = {1, "One"};\r\n		HttpHeaders headers = strategy.resolveHeaders(new StorePlatformException(code, args));\r\n		assertNull(headers);\r\n	}\r\n\r\n	@Test\r\n	public void testResolveStatus() throws Exception {\r\n		String code = "SYS_ERROR";\r\n		Object[] args = {1, "One"};\r\n		HttpStatus status = strategy.resolveStatus(new StorePlatformException(code, args));\r\n		assertEquals(HttpStatus.OK, status);\r\n	}\r\n}', NULL, '', 3, 0),
(2460, 'dale.seo', '', '', '2017-02-16 21:02:42', '', 'Spring Boot How Swapping IntelliJ 세팅 (클래스 리로드)', 'http://docs.spring.io/spring-boot/docs/current/reference/html/howto-hotswapping.html#howto-reload-springloaded-gradle-and-intellij-idea\r\nhttp://blog.saltfactory.net/developing-spring-without-restarting-server/\r\n\r\n자바 파일을 바꾼 후에는 반드시, 인텔리제이 메뉴에서 Build > Recompile을 해줘야 반영된다.\r\n\r\n다음 Gradle 설정 추가\r\n=======================================================================================================\r\nbuildscript {\r\n    repositories { jcenter() }\r\n    dependencies {\r\n        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.5.1.RELEASE"\r\n        classpath ''org.springframework:springloaded:1.2.6.RELEASE''\r\n    }\r\n}\r\n\r\napply plugin: ''idea''\r\n\r\nidea {\r\n    module {\r\n        inheritOutputDirs = false\r\n        outputDir = file("$buildDir/classes/main/")\r\n    }\r\n}\r\n================================================================================================', NULL, '', 7, 0),
(2461, 'dale.seo', '', '', '2017-02-17 10:40:19', '', '보수', '컴퓨터에서는 무조건 2의 보수를 사용한다고 생각하면 됨\r\n1의 보수는 +0과 -0 두개가 생기며, 뺄셈 연산에서 2의 보수가 더 유리함\r\n\r\n음의 2진수를 10진수로 바꿀 때는 sign bit를 제외하고 1의 보수 처리하고 -1\r\n\r\nex) 1111 => -000 - 1 => -1\r\nex) 1000 => -111 - 1 => -7 -1 => -8\r\n\r\nhttp://sessionk.tistory.com/126', NULL, '', 4, 0),
(2462, 'dale.seo', '', '', '2017-02-17 16:19:35', '', 'HttpServletResponse의 sendError()와 setStatus() 차이', 'http://blogs.atlassian.com/2007/07/responsesenderror_vs_responses/\r\nhttps://coderanch.com/t/175993/certification/setStatus-sendError\r\nhttp://noritersand.tistory.com/214\r\n\r\n\r\nsendError()를 호출하면 web.xml에 등록된 error-code에 맵핑되어 있는 서블릿이나 jsp를 찾아서 응답한다.\r\nsendStatus()를 호출하면 비록 4XX, 5XX 상태 코드라도 정상적으로 응답 바디를 써서 응답한다.\r\n\r\n또한 sendErorr()를 호출하면 response.isCommitted()이 ture이기 때문에 더 이상 바디를 쓸 수 없다. (예외 발생)\r\n하지만 sendStatus()를 호출한 후에는 바디를 쓸 수 있다.\r\n\r\nServlet 서버 어플리케이션에서는 예외를 일으킬 수 있는 수단이 Exception 객체를 throw하는 것 뿐만아니라 sendError() 메소드를 이용하여 상태 기준으로 낼 수 있다는 것에 주의한다.', NULL, '', 6, 0),
(2463, 'dale.seo', '', '', '2017-02-17 16:53:15', '', 'web.xml의 error-page 설정을 Spring Boot로 하기', 'http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-developing-web-applications.html#boot-features-error-handling-mapping-error-pages-without-mvc\r\n\r\n공식 레퍼런스 문서를 읽어보니 ErrorPageRegister를 구현해서 빈으로 등록하는 거 더 나은 거 같음\r\n\r\n\r\n=============================================================================================================================\r\n\r\nhttps://gs.saro.me/#!m=elec&jn=779\r\n\r\nFilter에서 발생한 예외나 HttpMessageConverer에서 sendError()한 경우, 글로벌 예외 핸들러에서 처리 못하므로 Spring Boot로 기존 web.xml의 error-page 설정해주듯이 해줘야 한다.\r\n\r\n\r\nimport org.springframework.boot.autoconfigure.web.ServerProperties;\r\nimport org.springframework.boot.context.embedded.ConfigurableEmbeddedServletContainer;\r\nimport org.springframework.boot.web.servlet.ErrorPage;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.http.HttpStatus;\r\n \r\n@Configuration\r\npublic class ErrorConfiguration extends ServerProperties\r\n{\r\n	@Override\r\n	public void customize(ConfigurableEmbeddedServletContainer container)\r\n	{\r\n		super.customize(container);\r\n		container.addErrorPages(new ErrorPage(HttpStatus.NOT_FOUND, "/error/404"));\r\n		container.addErrorPages(new ErrorPage(HttpStatus.INTERNAL_SERVER_ERROR, "/error/500"));\r\n		container.addErrorPages(new ErrorPage("/error/code"));\r\n	}\r\n}', NULL, '', 8, 0),
(2464, 'dale.seo', '', '', '2017-02-21 12:39:19', '', 'Spring Boot의 CommandLineRunner를 이용하여 초기 데이터 적재', '스프링 컨테이너에 모든 빈이 생성되고 등록된 다음에 실행된다.\r\n\r\n\r\n\r\n\r\n\r\npackage seo.dale.practice.react;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.boot.CommandLineRunner;\r\n\r\npublic class DatabaseLoader implements CommandLineRunner {\r\n\r\n    private final EmployeeRepository repository;\r\n\r\n    @Autowired\r\n    public DatabaseLoader(EmployeeRepository repository) {\r\n        this.repository = repository;\r\n    }\r\n\r\n    @Override\r\n    public void run(String... args) throws Exception {\r\n        this.repository.save(new Employee("Frodo", "Baggins", "ring bearer"));\r\n    }\r\n\r\n}\r\n', NULL, '', 13, 0),
(2465, 'dale.seo', '', '', '2017-02-24 19:22:23', '', 'Mocha 테스트 라이브러리 소개', 'http://programmingsummaries.tistory.com/383', NULL, '', 4, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(2466, 'dale.seo', '', '', '2017-02-26 18:28:31', '', '&&와 ||을 사용하여 자바스크립트 코딩하기', 'http://4urdev.tistory.com/13', NULL, '', 2, 0),
(2467, 'dale.seo', '', '', '2017-02-27 14:14:56', '', 'WebMvcConfigurerAdapter 확장하여 Spring MVC 세팅 시 @EnableWebMvc의 중요성', 'http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-developing-web-applications.html#boot-features-spring-mvc-auto-configuration\r\n\r\n@EnableWebMvc 어노테이션을 붙일 경우, Spring Boot의 자동 설정이 완전히 무시된다.\r\n따라서 Spring Boot를 사용할 때는 @EnableWebMvc 어노테이션을 안 붙이는 게 유리하다.\r\n\r\n\r\nIf you want to keep Spring Boot MVC features, and you just want to add additional MVC configuration (interceptors, formatters, view controllers etc.) you can add your own @Configuration class of type WebMvcConfigurerAdapter, but without @EnableWebMvc. If you wish to provide custom instances of RequestMappingHandlerMapping, RequestMappingHandlerAdapter or ExceptionHandlerExceptionResolver you can declare a WebMvcRegistrationsAdapter instance providing such components.\r\n\r\nIf you want to take complete control of Spring MVC, you can add your own @Configuration annotated with @EnableWebMvc.', NULL, '', 4, 0),
(2468, 'dale.seo', '', '', '2017-02-27 14:27:56', '', '정적 파일 서비스할 때 base path 세팅해주기', 'application.properties 파일에 다음과 같이 세팅한다.\r\n\r\n====================================\r\nspring.mvc.static-path-pattern=/static/**\r\n====================================\r\n\r\n위와 같이 세팅하면, index.html 이 아니라 /static/index.html 로 접근된다.\r\n\r\n\r\nhttp://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-developing-web-applications.html#boot-features-spring-mvc-static-content', NULL, '', 3, 0),
(2469, 'dale.seo', '', '', '2017-02-27 15:39:22', '', 'Spring Boot에서 CORS 지원', '@CrossOrigin 어노테이션을 사용하면 컨트롤러 단위로 설정할 수 있고,\r\n다음과 같이 글로벌 설정도 지원한다.\r\n\r\n================================================\r\n@Configuration\r\npublic class MyConfiguration {\r\n\r\n    @Bean\r\n    public WebMvcConfigurer corsConfigurer() {\r\n        return new WebMvcConfigurerAdapter() {\r\n            @Override\r\n            public void addCorsMappings(CorsRegistry registry) {\r\n                registry.addMapping("/api/**");\r\n            }\r\n        };\r\n    }\r\n}\r\n================================================\r\n\r\n\r\nhttp://docs.spring.io/spring/docs/4.3.8.RELEASE/spring-framework-reference/htmlsingle/#_global_cors_configuration\r\nhttp://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-developing-web-applications.html#boot-features-cors', NULL, '', 13, 0),
(2470, 'dale.seo', '', '', '2017-02-28 12:40:45', '', 'Heroku Redis 사용법', 'https://devcenter.heroku.com/articles/heroku-redis\r\n\r\n[ Heroku Redis 애드온 설치 ]\r\n```\r\n$ heroku addons:create heroku-redis:hobby-dev\r\n```\r\n\r\n[ Heroku Redis 접속 정보 확인 ]\r\n```\r\n$ heroku config | grep REDIS\r\n```\r\n\r\n[ Redis CLI 접속 ]\r\n\r\n$ heroku redis:cli\r\n\r\n[ Java Spring Jedis 설정 ]\r\n\r\nhttps://devcenter.heroku.com/articles/heroku-redis#connecting-in-java', NULL, '', 19, 0),
(2471, 'dale.seo', '', '', '2017-02-28 12:59:16', '', 'Redis CLI, Server Linux 간단 설치', 'Redis CLI 설치\r\n\r\n$ sudo apt install redis-tools\r\n\r\n\r\nRedis Server 설치\r\n\r\n$ sudo apt install redis-server', NULL, '', 13, 0),
(2472, 'dale.seo', '', '', '2017-02-28 14:54:50', '', 'HTTPS 프로토콜 종류 (SSL/TLS)', 'https://eastdg.wordpress.com/2014/04/09/ssltls-%EA%B8%B0%EB%B3%B8/\r\nhttp://thenine.egloos.com/v/448202\r\nhttp://soul0.tistory.com/214\r\n\r\n[ SSL/TLS 관계 ]\r\n - SSL v2: SSL 버전 2\r\n - SSL v3: SSL 버전 3\r\n - TLS v1: SSL 버전 3.1\r\n - TLS v1.1: SSL 버전 3.2\r\n - TLS v1.2: SSL 버전 3.3', NULL, '', 4, 0),
(2473, 'dale.seo', '', '', '2017-03-01 10:24:01', '', 'Spring Boot Cors 설정법/검증 방법', '# 설정 방법\r\nhttp://devtrans.tistory.com/entry/CORS-support-in-Spring-Framework\r\n\r\n@CrossOrgin 어노테이션을 이용하여 컨트롤러 전체나 메소드 단위로 적용이 가능하며,\r\nWebMvcConfigurerAdapter 클래스의 addCorsMappings 메소드를 오버라이드하여 글로벌 설정도 가능\r\n\r\n# 검증 방법\r\nhttp://stackoverflow.com/questions/12173990/how-can-you-debug-a-cors-request-with-curl\r\n\r\n======================================================================\r\ncurl -H "Origin: http://localhost:3000" http://localhost:8080/http/records -i\r\nHTTP/1.1 200 \r\nAccess-Control-Allow-Origin: http://localhost:3000\r\nVary: Origin\r\nAccess-Control-Allow-Credentials: true\r\nContent-Type: application/json;charset=UTF-8\r\nContent-Length: 815\r\nDate: Wed, 01 Mar 2017 01:21:20 GMT\r\n\r\n[{"id":1,"request":{"method":"GET","url":{"scheme":"HTTP","host":"jsonplaceholder.typicode.com","path":"/posts","query":null},"headers":null,"body":""},"response":null},{"id":2,"request":{"method":"POST","url":{"scheme":"HTTP","host":"jsonplaceholder.typicode.com","path":"/posts","query":null},"headers":null,"body":"{\\"userId\\": 1, \\"id\\": 101, \\"title\\": \\"foo\\", \\"body\\": \\"bar\\"}"},"response":null},{"id":3,"request":{"method":"PUT","url":{"scheme":"HTTP","host":"jsonplaceholder.typicode.com","path":"/posts/1","query":null},"headers":null,"body":"{\\"userId\\": 1, \\"id\\": 101, \\"title\\": \\"foo\\", \\"body\\": \\"bar\\"}"},"response":null},{"id":4,"request":{"method":"DELETE","url":{"scheme":"HTTP","host":"jsonplaceholder.typicode.com","path":"/posts/1","query":null},"headers":null,"body":""},"response":null}]\r\n', NULL, '', 9, 0),
(2474, 'dale.seo', '', '', '2017-03-03 13:05:08', '', 'Heroku Redis Spring 설정', 'JedisConnectionFactory 빈을 생성하는 게 핵심이다.\r\nREDIS_URL 환경 변수를 읽어와서 JedisShardInfo를 통해 세팅해주면 된다.\r\n\r\n\r\n    @Bean\r\n    public RedisTemplate<?, ?> redisTemplate(RedisConnectionFactory connectionFactory) {\r\n        RedisTemplate<byte[], byte[]> template = new RedisTemplate<>();\r\n        template.setConnectionFactory(connectionFactory);\r\n        return template;\r\n    }\r\n\r\n    @Bean\r\n    @Profile("production")\r\n    public JedisConnectionFactory jedisConnectionFactory() throws URISyntaxException {\r\n        URI redisUri = new URI(System.getenv("REDIS_URL"));\r\nlogger.debug("Use Heroku Redis Server. ({})", redisUri);\r\n        return new JedisConnectionFactory(new JedisShardInfo(redisUri));\r\n    }\r\n\r\n\r\n\r\n//    @Bean\r\n//    @Profile("production")\r\n//    public RedisConnectionFactory connectionFactoryForProduction() throws IOException, URISyntaxException {\r\n//        URI redisURI = new URI(System.getenv("REDIS_URL"));\r\n//        logger.debug("Use Heroku Redis Server. ({})", redisURI);\r\n//        JedisConnectionFactory jedisConnectionFactory = new JedisConnectionFactory();\r\n//        jedisConnectionFactory.setHostName(redisURI.getHost());\r\n//        jedisConnectionFactory.setPort(redisURI.getPort());\r\n//        jedisConnectionFactory.setTimeout(Protocol.DEFAULT_TIMEOUT);\r\n//        jedisConnectionFactory.setPassword(JedisURIHelper.getPassword(redisURI));\r\n//        return jedisConnectionFactory;\r\n//    }', NULL, '', 7, 0),
(2475, 'dale.seo', '', '', '2017-03-06 11:35:35', '', 'MongoDB 우분투 설치', 'https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/\r\n\r\n# Linux Mint 18.1 base on Ubuntu 16.04\r\n\r\n1. sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0C49F3730359A14518585931BC711F9BA15703C6\r\n2. echo "deb [ arch=amd64,arm64 ] http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.4 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list\r\n3. sudo apt-get update\r\n4. sudo apt-get install -y mongodb-org', NULL, '', 8, 0),
(2476, 'dale.seo', '', '', '2017-03-06 12:26:39', '', 'mongo 모듈을 이용하여 MongoClient 사용 예제', 'const MongoClient = require(''mongodb'').MongoClient;\r\nconst url = ''mongodb://localhost:27017/test'';\r\n\r\nMongoClient.connect(url, (err, db) => {\r\n  console.log(''Connected correctly to server'');\r\n  let collection = db.collection(''dishes'');\r\n  collection.insertOne({name: ''Uthapizza'', description: ''test''}, (err, result) => {\r\n    console.log(''After Insert:'');\r\n    console.log(result.ops);\r\n    collection.find({}).toArray((err, docs) => {\r\n      console.log(''Found:'');\r\n      console.log(docs);\r\n      db.dropCollection(''dishes'', (err, result) => {\r\n        db.close();\r\n      });\r\n    });\r\n  });\r\n});\r\n\r\n================================================================================\r\n$ node mongo_test.js\r\nConnected correctly to server\r\nAfter Insert:\r\n[ { name: ''Uthapizza'',\r\n    description: ''test'',\r\n    _id: 58bcd6c1293eb9354d6fef2e } ]\r\nFound:\r\n[ { _id: 58bcd6c1293eb9354d6fef2e,\r\n    name: ''Uthapizza'',\r\n    description: ''test'' } ]', NULL, '', 5, 0),
(2477, 'dale.seo', '', '', '2017-03-06 13:03:47', '', 'mongo 모듈을 이용하여 CRUD 모듈 만들기', '===========================================================================================\r\nserver.js\r\n===========================================================================================\r\nconst MongoClient = require(''mongodb'').MongoClient;\r\nconst dboper = require(''./operations'');\r\nconst url = ''mongodb://localhost:27017/test'';\r\n\r\nMongoClient.connect(url, (err, db) => {\r\n  console.log(''Connected correctly to server'');\r\n  dboper.insertDocument(db, {name: "Vadonut", description: "Test"}, ''dishes'', (result) => {\r\n    console.log(result.ops);\r\n    dboper.findDocuments(db, ''dishes'', (docs) => {\r\n      console.log(docs);\r\n      dboper.updateDocument(db, {name: "Vadonut"}, {description: "Updated Test"}, ''dishes'', (result) => {\r\n        console.log(result.result);\r\n        dboper.findDocuments(db, ''dishes'', (docs) => {\r\n          console.log(docs);\r\n          db.dropCollection(''dishes'', (result) => {\r\n            db.close();\r\n          });\r\n        });\r\n      });\r\n    });\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\n===========================================================================================\r\noperations.js\r\n===========================================================================================\r\nexports.insertDocument = function(db, document, collection, callback) {\r\n  var coll = db.collection(collection);\r\n  coll.insert(document, (err, result) => {\r\n    console.log(''Inserted'', result.result.n, ''documents into the document collection'', collection);\r\n    callback(result);\r\n  });\r\n};\r\n\r\nexports.findDocuments = function(db, collection, callback) {\r\n  var coll = db.collection(collection);\r\n  coll.find({}).toArray((err, docs) => {\r\n    callback(docs);\r\n  });\r\n};\r\n\r\nexports.removeDocument = function(db, document, collection, callback) {\r\n  var coll = db.collection(collection);\r\n  coll.deleteOne(document, (err, result) => {\r\n    console.log(''Removed the document'', document);\r\n    callback(result);\r\n  });\r\n};\r\n\r\nexports.updateDocument = function(db, document, update, collection, callback) {\r\n  var coll = db.collection(collection);\r\n  coll.updateOne(document, {$set: update}, (err, result) => {\r\n    console.log(''Updated the document with'', update);\r\n    callback(result);\r\n  });\r\n};\r\n\r\n\r\n', NULL, '', 5, 0),
(2575, 'dale.seo', '', '', '2017-07-14 19:49:52', '', 'npm install', 'https://docs.npmjs.com/cli/install\r\n\r\n\r\n## 패키지를 해당 패키지의 의존성을 추가 (package.json 에 dependencies 추가됨)\r\nnpm install <pkg> --save\r\nnpm i -S <pkg>\r\n\r\n## 패키지를 해당 패키지의 의존성을 추가 (package.json 에 devDependencies 추가됨)\r\nnpm install <pkg> --save-dev\r\nnpm i -D <pkg>\r\n\r\n## 단순히 1회성 의존성 추가\r\nnpm install <pkg>\r\n\r\n## 프로젝트 의존성 목록 설치 (package.json 기준)\r\n  : 보통 --save 옵션을 주지 안고 추가한 의존성 목록들을 한 번에 node_modules에 다운받기 위해 사용한다.\r\nnpm install\r\n\r\n## devDependencies 제외하고 설치\r\n```\r\nnpm install --production\r\n```\r\n또는 \r\n환경 변수 NODE_ENV=production으로 세팅하고 npm install 실행', NULL, '', 4, 0),
(2478, 'dale.seo', '', '', '2017-03-08 13:05:31', '', 'Webpack jQuery 세팅', 'https://webpack.js.org/plugins/provide-plugin/#usage-jquery\r\n\r\n\r\n==========================================================\r\nconst webpack = require(''webpack'')\r\n\r\nmodule.exports = {\r\n  plugins: [\r\n    new webpack.ProvidePlugin({\r\n      $: ''jquery'',\r\n      jQuery: ''jquery''\r\n    })\r\n  ]\r\n}\r\n', NULL, '', 6, 0),
(2479, 'dale.seo', '', '', '2017-03-08 13:22:36', '', 'Webpack Bootstrap 세팅', '구지 https://www.npmjs.com/package/bootstrap-loader를 쓸 필요까지는 없고, 일반 css 처럼 세팅하면 됨\r\n\r\n==============================================================================\r\n[ Bootstarp 의존성 추가 ]\r\n$ npm i -D bootstarp\r\n\r\n[ Bootstarp 임포트 ]\r\nimport ''bootstrap/dist/css/bootstrap.css''\r\n\r\n\r\n[ webpack.config.js에 CCS룰 추가가 없다면 추가 ]\r\n================================================\r\nconst ExtractTextPlugin = require(''extract-text-webpack-plugin'')\r\n\r\nmodule.exports = {\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.css$/,\r\n        use: ExtractTextPlugin.extract({\r\n          fallback: ''style-loader'',\r\n          use: ''css-loader''\r\n        })\r\n      }\r\n    ]\r\n  }\r\n}\r\n', NULL, '', 2, 0),
(2480, 'dale.seo', '', '', '2017-03-10 19:35:35', '', 'Mongolab Addon', 'https://devcenter.heroku.com/articles/mongolab\r\n\r\n[ 설치 ]\r\n$ heroku addons:create mongolab\r\n\r\n[ 접속 정보 확인 ]\r\n$ heroku config:get MONGODB_URI\r\n\r\n[ 관리자 웹화면 열기 ]\r\n$ heroku addons:open mongolab\r\n\r\n[ 노드에서 접속 정보 얻기 ]\r\nprocess.env.MONGODB_URI', NULL, '', 12, 0),
(2481, 'dale.seo', '', '', '2017-03-13 12:58:07', '', '해당 모듈이 다른 모듈에 의해서 실행되는지 최상위에서 실행되는지 알아내기', 'https://nodejs.org/api/modules.html#modules_accessing_the_main_module\r\n\r\nrequire.main === module 값이 true이면 다른 모듈에 의해서 실행되지 않고 최상위에서 실행된다는 의미이다.\r\n\r\n==========================================================\r\nconst server = http.createServer(app)\r\nconst startUp = function () {\r\n  server.listen(\r\n    app.get(''port''), () => {\r\n      console.log(''Express.js server listening on port'', app.get(''port''))\r\n    }\r\n  )\r\n}\r\nconst shutdown = function () {\r\n  server.close()\r\n}\r\nif (require.main === module) {\r\n  startUp()\r\n} else {\r\n  console.info(''Running app as a module'')\r\n  exports.startUp = startUp\r\n  exports.shutDown = shutDown\r\n  exports.port = app.get(''port'')\r\n}', NULL, '', 3, 0),
(2482, 'dale.seo', '', '', '2017-03-13 17:47:37', '', 'Elasticsearch & Kibana QuickStart', '[ 다운로드 ]\r\nhttps://www.elastic.co/start\r\n에서 elasticsearch와 kibana의 tar.gz 파일 다운로드\r\n\r\n[ 압축풀기 ]\r\n$ tar zxf elasticsearch-5.0.0.tar.gz\r\n$ tar zxf kibana-5.0.0-darwin-x86_64.tar.gz\r\n\r\n[ x-pack 플러그인 설치 (선택사항) ]\r\n$ elasticsearch-5.0.0/bin/elasticsearch-plugin install x-pack\r\n$ kibana-5.0.0/bin/kibana-plugin install x-pack\r\n\r\n[ 구동 ]\r\n$ elasticsearch-5.0.0/bin/elasticsearch\r\n$ kibana-5.0.0/bin/kibana\r\n\r\n[ 브라우저로 접속 ]\r\nhttp://localhost:9200/ (elastic/changeme)\r\nhttp://localhost:5601/ (elastic/changeme)\r\n', NULL, '', 10, 0),
(2483, 'dale.seo', '', '', '2017-03-13 17:48:27', '', 'Elasticsearch 연습', 'Kibana의 Devtool에서 연습함\r\n\r\n==========================================\r\nGET /\r\n\r\nPOST /my-index/my-type/1\r\n{\r\n  "body": "foo"\r\n}\r\n\r\nGET /my-index/my-type/1\r\n\r\nGET /my-index/_search\r\n{\r\n  "query": {\r\n    "match": {\r\n      "body": "foo"\r\n    }\r\n  }\r\n}\r\n\r\nDELETE /my-index/my-type/1\r\n\r\nPUT /library\r\n{\r\n  "settings": {\r\n    "index.number_of_shards": 1,\r\n    "index.number_of_replicas": 0\r\n  }\r\n}\r\n\r\nPOST /library/books/_bulk\r\n{"index": {"_id":1}}\r\n{"title": "The quick brown fox", "price":5, "colors": ["red", "green", "blue"]}\r\n{"index": {"_id":2}}\r\n{"title": "The quick brown fox jumps over the lazy dog", "price":15, "colors": ["blue", "yellow"]}\r\n{"index": {"_id":3}}\r\n{"title": "The quick brown fox jumps over the quick dog", "price":8, "colors": ["red", "blue"]}\r\n{"index": {"_id":4}}\r\n{"title": "Brown fox brown dog", "price":2, "colors": ["black", "yellow", "red", "blue"]}\r\n{"index": {"_id":5}}\r\n{"title": "Lazy dog", "price":9, "colors": ["red", "blue", "green"]}\r\n\r\nGET /library/books/_search\r\n\r\nGET /library/books/_search\r\n{\r\n  "query": {\r\n    "match": {\r\n      "title": "fox"\r\n    }\r\n  }\r\n}\r\n\r\nGET /library/books/_search\r\n{\r\n  "query": {\r\n    "match": {\r\n      "title": "quick dog"\r\n    }\r\n  }\r\n}\r\n\r\nGET /library/books/_search\r\n{\r\n  "query": {\r\n    "match_phrase": {\r\n      "title": "quick dog"\r\n    }\r\n  }\r\n}\r\n\r\nGET /library/books/_search\r\n{\r\n  "query": {\r\n    "bool": {\r\n      "must": [\r\n        {\r\n          "match": {\r\n            "title": "quick"\r\n          }\r\n        },\r\n        {\r\n          "match_phrase": {\r\n            "title": "lazy dog"\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}\r\n\r\nGET /library/books/_search\r\n{\r\n  "query": {\r\n    "bool": {\r\n      "must_not": [\r\n        {\r\n          "match": {\r\n            "title": "lazy"\r\n          }\r\n        },\r\n        {\r\n          "match_phrase": {\r\n            "title": "quick dog"\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}\r\n\r\nGET /library/books/_search\r\n{\r\n  "query": {\r\n    "bool": {\r\n      "should": [\r\n        {\r\n          "match_phrase": {\r\n            "title": "quick dog"\r\n          }\r\n        },\r\n        {\r\n          "match_phrase": {\r\n            "title": {\r\n              "query": "lazy dog",\r\n              "boost": 3\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}\r\n\r\nGET /library/books/_search\r\n{\r\n  "query": {\r\n    "bool": {\r\n      "should": [\r\n        {\r\n          "match_phrase": {\r\n            "title": {\r\n              "query": "quick dog",\r\n              "boost": 2\r\n            }\r\n          }\r\n        },\r\n        {\r\n          "match_phrase": {\r\n            "title": {\r\n              "query": "lazy dog"\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  "highlight": {\r\n    "fields": {\r\n      "title": {}\r\n    }\r\n  }\r\n}\r\n\r\nGET /library/books/_search\r\n{\r\n  "query": {\r\n    "bool": {\r\n      "must": [\r\n        {\r\n          "match": {\r\n            "title": "dog"\r\n          }\r\n        }\r\n      ],\r\n      "filter": {\r\n        "range": {\r\n          "price": {\r\n            "gte": 5,\r\n            "lte": 10\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nGET /library/books/_search\r\n{\r\n  "query": {\r\n    "bool": {\r\n      "filter": {\r\n        "range": {\r\n          "price": {\r\n            "gt": 5\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nGET /library/_analyze\r\n{\r\n  "tokenizer": "standard",\r\n  "text": "Brown fox brown dog"\r\n}\r\n\r\nGET /library/_analyze\r\n{\r\n  "tokenizer": "standard",\r\n  "filter": ["lowercase"], \r\n  "text": "Brown fox brown dog"\r\n}\r\n\r\nGET /library/_analyze\r\n{\r\n  "tokenizer": "standard",\r\n  "filter": ["lowercase", "unique"], \r\n  "text": "Brown fox brown dog"\r\n}\r\n\r\nGET /library/_search\r\n{\r\n  "size": 0,\r\n  "aggs": {\r\n    "popular-colors": {\r\n      "terms": {\r\n        "field": "colors.keyword"  \r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nGET /library/_search\r\n{\r\n  "query": {\r\n    "match": {\r\n      "title": "dog"\r\n    }\r\n  },\r\n  "aggs": {\r\n    "popular-colors": {\r\n      "terms": {\r\n        "field": "colors.keyword"  \r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nPOST /library/books/1\r\n{\r\n  "title": "The quick brown fox",\r\n  "price": 10,\r\n  "colors": ["red", "green", "blue"]\r\n}\r\n\r\nPOST /library/books/1/_update\r\n{\r\n  "doc": {\r\n    "title": "The quick fantastic fox"\r\n  }\r\n}\r\n\r\nGET /library/books/1\r\n\r\nGET /library/_mapping', NULL, '', 3, 0),
(2484, 'dale.seo', '', '', '2017-03-14 12:55:33', '', 'Mac에서 MongoDB 설치', '$ brew install mongodb', NULL, '', 5, 0),
(2485, 'dale.seo', '', '', '2017-03-16 11:26:04', '', 'Bonsai Elasticsearch Node.js Quickstart', 'https://docs.bonsai.io/docs/nodejs', NULL, '', 4, 0),
(2486, 'dale.seo', '', '', '2017-03-17 12:46:59', '', 'MongoClient connection pooling', 'https://mongodb.github.io/node-mongodb-native/driver-articles/mongoclient.html#mongoclient-connection-pooling\r\n\r\nExpress.js에서 MongoDB를 사용할 때 다음과 같이 커넥션 풀링을 할 수 있다\r\n======================================================================================\r\nvar express = require(''express'');\r\nvar mongodb = require(''mongodb'');\r\nvar app = express();\r\n\r\nvar MongoClient = require(''mongodb'').MongoClient;\r\nvar db;\r\n\r\n// Initialize connection once\r\nMongoClient.connect("mongodb://localhost:27017/integration_test", function(err, database) {\r\n  if(err) throw err;\r\n\r\n  db = database;\r\n\r\n  // Start the application after the database connection is ready\r\n  app.listen(3000);\r\n  console.log("Listening on port 3000");\r\n});\r\n\r\n// Reuse database object in request handlers\r\napp.get("/", function(req, res) {\r\n  db.collection("replicaset_mongo_client_collection").find({}, function(err, docs) {\r\n    docs.each(function(err, doc) {\r\n      if(doc) {\r\n        console.log(doc);\r\n      }\r\n      else {\r\n        res.end();\r\n      }\r\n    });\r\n  });\r\n});', NULL, '', 6, 0),
(2487, 'dale.seo', '', '', '2017-03-17 17:37:25', '', 'Elasticsearch Getting Started', 'https://www.elastic.co/guide/en/elasticsearch/reference/current/getting-started.html\r\n\r\n\r\n# Patter\r\n<REST Verb> /<Index>/<Type>/<ID>\r\n\r\n# Cluster Health\r\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/_cluster_health.html\r\nGET /_cat/health?v\r\nGET /_cat/nodes?v\r\n\r\n# List All Indicies\r\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/_list_all_indices.html\r\nGET /_cat/indices?v\r\n\r\n# Create an Index\r\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/_create_an_index.html\r\nPUT /customer?pretty\r\nGET /_cat/indices?v\r\n\r\n# Index and Query a Document \r\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/_index_and_query_a_document.html\r\nPUT /customer/external/1?pretty\r\n{\r\n  "name": "John Doe"\r\n}\r\nGET /customer/external/1?pretty\r\n\r\n# Delete an Index\r\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/_delete_an_index.html\r\nDELETE /customer?pretty\r\nGET /_cat/indices?v', NULL, '', 2, 0),
(2488, 'dale.seo', '', '', '2017-03-21 09:55:38', '', 'Java Spring Left Padding with 0', 'http://stackoverflow.com/questions/4469717/left-padding-a-string-with-zeros\r\n\r\n\r\n\r\nString.format("%06d", 1234); // 001234', NULL, '', 2, 0),
(2489, 'dale.seo', '', '', '2017-03-25 12:14:12', '', 'NPM CLI - Global Packages', 'https://docs.npmjs.com/getting-started/installing-npm-packages-globally\r\nhttps://docs.npmjs.com/getting-started/updating-global-packages\r\nhttps://docs.npmjs.com/getting-started/uninstalling-global-packages\r\n\r\n# 글로벌 패키지 관리\r\n$ npm install -g <pkg>\r\n$ npm uninstall -g <pkg>\r\n$ npm outdated -g --depth=0\r\n$ npm update -g <pkg>', NULL, '', 4, 0),
(2490, 'dale.seo', '', '', '2017-03-27 12:01:12', '', 'mongoexport & mongoimport', 'json 파일의 데이터를 MongoDB 서버로 임포트할 때 사용됨\r\nMongo Daemon이 올라와있을 때만 작동함\r\n\r\n$ mongoimport --db test --collection restaurants --drop --file primer-dataset.json\r\n2017-03-27T11:59:40.367+0900	connected to: localhost\r\n2017-03-27T11:59:40.368+0900	dropping: test.restaurants\r\n2017-03-27T11:59:41.165+0900	imported 25359 documents\r\n\r\n[ json array 임포트 : --josonArray 옵션 사용 ]\r\n$ mongoimport -d ltcs -c users --jsonArray users.json\r\n\r\n[ 원격 서버 간 파일 내려받고 올리기 : 기존 컬렉션 삭제 ]\r\n1) case 컬렉션\r\n```\r\n$ mongoexport --out case.json -c case -d sqe --port 27017 --host 172.21.196.30 -u sqe -p QASPBIS*36!\r\n$ mongoimport --drop --file case.json -c case -d onetests --port 33241 --host ds133241.mlab.com -u user -p pass\r\n```\r\n2) user 컬렉션\r\n```\r\n$ mongoexport --out user.json -c user -d sqe --port 27017 --host 172.21.196.30 -u sqe -p QASPBIS*36!\r\n$ mongoimport --drop --file user.json -c user -d onetests --port 33241 --host ds133241.mlab.com -u user -p pass\r\n```', NULL, '', 20, 0),
(2491, 'dale.seo', '', '', '2017-03-28 13:17:35', '', 'Rest API 단위 테스트 (Mocha)', '서버를 띄어놓고 테스트해야 한다는 맹점은 있음\r\n\r\n================================================================================\r\nvar superagent = require(''superagent'')\r\nvar expect = require(''expect.js'')\r\n\r\ndescribe(''express rest api server'', function () {\r\n  var id\r\n\r\n  it(''post object'', function (done) {\r\n    superagent.post(''http://localhost:3000/collections/test'')\r\n      .send({ name: ''John'',\r\n        email: ''john@rpjs.co''\r\n      })\r\n      .end(function (e, res) {\r\n        // console.log(res.body)\r\n        expect(e).to.eql(null)\r\n        expect(res.body.length).to.eql(1)\r\n        expect(res.body[0]._id.length).to.eql(24)\r\n        id = res.body[0]._id\r\n        done()\r\n      })\r\n  })\r\n\r\n  it(''retrieves an object'', function (done) {\r\n    superagent.get(''http://localhost:3000/collections/test/'' + id)\r\n      .end(function (e, res) {\r\n        // console.log(res.body)\r\n        expect(e).to.eql(null)\r\n        expect(typeof res.body).to.eql(''object'')\r\n        expect(res.body._id.length).to.eql(24)\r\n        expect(res.body._id).to.eql(id)\r\n        done()\r\n      })\r\n  })\r\n\r\n  it(''retrieves a collection'', function (done) {\r\n    superagent.get(''http://localhost:3000/collections/test'')\r\n      .end(function (e, res) {\r\n        // console.log(res.body)\r\n        expect(e).to.eql(null)\r\n        expect(res.body.length).to.be.above(0)\r\n        expect(res.body.map(function (item) { return item._id })).to.contain(id)\r\n        done()\r\n      })\r\n  })\r\n\r\n  it(''updates an object'', function (done) {\r\n    superagent.put(''http://localhost:3000/collections/test/'' + id)\r\n      .send({name: ''Peter'',\r\n        email: ''peter@yahoo.com''})\r\n      .end(function (e, res) {\r\n        // console.log(res.body)\r\n        expect(e).to.eql(null)\r\n        expect(typeof res.body).to.eql(''object'')\r\n        expect(res.body.msg).to.eql(''success'')\r\n        done()\r\n      })\r\n  })\r\n\r\n  it(''checks an updated object'', function (done) {\r\n    superagent.get(''http://localhost:3000/collections/test/'' + id)\r\n      .end(function (e, res) {\r\n        // console.log(res.body)\r\n        expect(e).to.eql(null)\r\n        expect(typeof res.body).to.eql(''object'')\r\n        expect(res.body._id.length).to.eql(24)\r\n        expect(res.body._id).to.eql(id)\r\n        expect(res.body.name).to.eql(''Peter'')\r\n        done()\r\n      })\r\n  })\r\n\r\n  it(''removes an object'', function (done) {\r\n    superagent.del(''http://localhost:3000/collections/test/'' + id)\r\n      .end(function (e, res) {\r\n        // console.log(res.body)\r\n        expect(e).to.eql(null)\r\n        expect(typeof res.body).to.eql(''object'')\r\n        expect(res.body.msg).to.eql(''success'')\r\n        done()\r\n      })\r\n  })\r\n})\r\n=======================================================================================================\r\n\r\nvar express = require(''express''),\r\n  mongoskin = require(''mongoskin''),\r\n  bodyParser = require(''body-parser''),\r\n  logger = require(''morgan'')\r\n\r\nvar app = express()\r\n\r\napp.use(bodyParser.urlencoded({ extended: false }))\r\napp.use(bodyParser.json())\r\napp.use(logger(''dev''))\r\n\r\nvar db = mongoskin.db(''mongodb://localhost:27017/test'', {native_parser: true})\r\nvar id = mongoskin.helper.toObjectID\r\n\r\napp.param(''collectionName'', (req, res, next, collectionName) => {\r\n  req.collection = db.collection(collectionName)\r\n  return next()\r\n})\r\n\r\napp.get(''/'', (req, res, next) => {\r\n  res.send(''Select a collection, e.g., /collections/messages'')\r\n})\r\n\r\napp.get(''/collections/:collectionName'', (req, res, next) => {\r\n  req.collection.find({}, {\r\n    limit: 10, sort: [[''_id'', -1]]\r\n  }).toArray((e, results) => {\r\n    if (e) return next(e)\r\n    res.send(results)\r\n  })\r\n})\r\n\r\napp.post(''/collections/:collectionName'', (req, res, next) => {\r\n  req.collection.insert(req.body, {}, (e, results) => {\r\n    if (e) return next(e)\r\n    res.send(results.ops)\r\n  })\r\n})\r\n\r\napp.get(''/collections/:collectionName/:id'', (req, res, next) => {\r\n  req.collection.findOne({\r\n    _id: id(req.params.id)\r\n  }, (e, result) => {\r\n    if (e) return next(e)\r\n    res.send(result)\r\n  })\r\n})\r\n\r\napp.put(''/collections/:collectionName/:id'', (req, res, next) => {\r\n  req.collection.update({\r\n    _id: id(req.params.id)\r\n  }, {\r\n    $set: req.body\r\n  }, (e, result) => {\r\n    if (e) return next(e)\r\n    res.send(result.result.n === 1 ? {msg: ''success''} : {msg: ''error''})\r\n  })\r\n})\r\n\r\napp.delete(''/collections/:collectionName/:id'', (req, res, next) => {\r\n  req.collection.remove({\r\n    _id: id(req.params.id)\r\n  }, (e, result) => {\r\n    if (e) return next(e)\r\n    res.send(result.result.n === 1 ? {msg: ''success''} : {msg: ''error''})\r\n  })\r\n})\r\n\r\napp.listen(3000, () => {\r\n  console.log(''Server is running'')\r\n})', NULL, '', 4, 0),
(2492, 'dale.seo', '', '', '2017-03-29 14:12:43', '', 'MAC에서 ifconfig로 IP 확인', 'en0의 inet 뒤가 IP 이다\r\n\r\n-------------------------------------------------------------------------------\r\n$ ifconfig\r\nlo0: flags=8049<UP,LOOPBACK,RUNNING,MULTICAST> mtu 16384\r\n	options=3<RXCSUM,TXCSUM>\r\n	inet6 ::1 prefixlen 128\r\n	inet 127.0.0.1 netmask 0xff000000\r\n\r\n	inet6 fe80::1%lo0 prefixlen 64 scopeid 0x1\r\n	nd6 options=1<PERFORMNUD>\r\ngif0: flags=8010<POINTOPOINT,MULTICAST> mtu 1280\r\nstf0: flags=0<> mtu 1280\r\nen0: flags=8863<UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST> mtu 1500\r\n	ether ac:bc:32:83:b8:e5\r\n	inet6 fe80::aebc:32ff:fe83:b8e5%en0 prefixlen 64 scopeid 0x4\r\n	inet 10.202.96.235 netmask 0xfffffe00 broadcast 10.202.97.255\r\n	nd6 options=1<PERFORMNUD>\r\n	media: autoselect\r\n	status: active\r\nen1: flags=963<UP,BROADCAST,SMART,RUNNING,PROMISC,SIMPLEX> mtu 1500\r\n	options=60<TSO4,TSO6>\r\n	ether 6a:00:00:ef:cf:80\r\n	media: autoselect <full-duplex>\r\n	status: inactive\r\nen2: flags=963<UP,BROADCAST,SMART,RUNNING,PROMISC,SIMPLEX> mtu 1500\r\n	options=60<TSO4,TSO6>\r\n	ether 6a:00:00:ef:cf:81\r\n	media: autoselect <full-duplex>\r\n	status: inactive\r\np2p0: flags=8843<UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST> mtu 2304\r\n	ether 0e:bc:32:83:b8:e5\r\n	media: autoselect\r\n	status: inactive\r\nawdl0: flags=8943<UP,BROADCAST,RUNNING,PROMISC,SIMPLEX,MULTICAST> mtu 1484\r\n	ether 86:c5:87:0b:b2:37\r\n	inet6 fe80::84c5:87ff:fe0b:b237%awdl0 prefixlen 64 scopeid 0x8\r\n	nd6 options=1<PERFORMNUD>\r\n	media: autoselect\r\n	status: active\r\nbridge0: flags=8863<UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST> mtu 1500\r\n	options=63<RXCSUM,TXCSUM,TSO4,TSO6>\r\n	ether ae:bc:32:38:6e:00\r\n	Configuration:\r\n		id 0:0:0:0:0:0 priority 0 hellotime 0 fwddelay 0\r\n		maxage 0 holdcnt 0 proto stp maxaddr 100 timeout 1200\r\n		root id 0:0:0:0:0:0 priority 0 ifcost 0 port 0\r\n		ipfilter disabled flags 0x2\r\n	member: en1 flags=3<LEARNING,DISCOVER>\r\n	        ifmaxaddr 0 port 5 priority 0 path cost 0\r\n	member: en2 flags=3<LEARNING,DISCOVER>\r\n	        ifmaxaddr 0 port 6 priority 0 path cost 0\r\n	nd6 options=1<PERFORMNUD>\r\n	media: <unknown type>\r\n	status: inactive', NULL, '', 3, 0),
(2493, 'dale.seo', '', '', '2017-03-30 12:39:30', '', 'NodeJS에서 환경변수 사용법', '# 용도\r\n\r\nAPI Key나 Database URL/Password 등은 소스 코드에 저장하면 위함하기 때문에, 보통 환경 변수에 저장을 한다.\r\n\r\n# 접근법\r\n\r\nconsole.log(process.env.NODE_ENV, process.env.API_KEY, process.env.DB_PASSSWORD)\r\n\r\n# 1회성 설정법\r\n\r\n$ NODE_ENV=development API_KEY=abc123 DB_PASSWORD=pass node app.js\r\n\r\n# 세션 기준 설정법\r\n\r\n$ export NODE_ENV=development\r\n$ node app.js', NULL, '', 0, 0),
(2494, 'dale.seo', '', '', '2017-03-30 12:39:30', '', 'NodeJS에서 환경변수 사용법', '# 용도\r\n\r\nAPI Key나 Database URL/Password 등은 소스 코드에 저장하면 위함하기 때문에, 보통 환경 변수에 저장을 한다.\r\n\r\n# 접근법\r\n\r\nconsole.log(process.env.NODE_ENV, process.env.API_KEY, process.env.DB_PASSSWORD)\r\n\r\n# 1회성 설정법\r\n\r\n$ NODE_ENV=development API_KEY=abc123 DB_PASSWORD=pass node app.js\r\n\r\n# 세션 기준 설정법\r\n\r\n$ export NODE_ENV=development\r\n$ node app.js', NULL, '', 4, 0),
(2495, 'dale.seo', '', '', '2017-03-30 12:53:08', '', 'Travis CI에 MongoDB 설정', 'https://docs.travis-ci.com/user/database-setup/#MongoDB\r\n\r\n단위 테스트 돌릴 때 매우 유용하다\r\n\r\n\r\n## .travis.yml\r\n```\r\nlanguage: node_js\r\nnode_js: ''7''\r\nservices:\r\n  - mongodb\r\n```', NULL, '', 8, 0),
(2496, 'dale.seo', '', '', '2017-03-30 19:48:26', '', 'VueJS Directives', 'v-text (3:10) = inserting text into the element\r\nv-html (4:50) = inserting html into the element\r\nv-show (6:45) = conditionally show the element when statement evaluates to true. If it evaluates to false then display:none is added to hide the element (but maintained in the DOM)\r\nv-if (8:47) = conditionally insert element into the DOM when statement evaluates to true\r\nv-else (11:00) = alternative statement if a v-if evaluates to false\r\nv-pre (13:11) = preformatted text in the element. Will prevent rendering.\r\nv-once (13:58) = render element one time (does not update when model changes)\r\nv-cloak (14:52) = target v-cloak with CSS to add custom styling before Vue finishes rendering. V-cloak is removed after Vue finishes loading, restoring default CSS styling for that element.', NULL, '', 2, 0),
(2497, 'dale.seo', '', '', '2017-03-31 11:39:08', '', 'Heroku 환경 변수 (Environment Variables) 설정법', 'https://devcenter.heroku.com/articles/config-vars\r\n\r\n\r\n전체 목록\r\n$ heroku config\r\n\r\n단건 조회\r\n$ heroku config:get NAME\r\n\r\n단건 설정\r\n$ heroku config:set NAME=VALUE\r\n\r\n단건 삭제\r\n$ heroku config:unset NAME', NULL, '', 7, 0),
(2500, 'dale.seo', '', '', '2017-04-10 17:10:41', '', 'Firebase 데이터 저장', 'https://firebase.google.com/docs/database/web/save-data\r\n\r\n\r\n\r\nFirebase 실시간 데이터베이스에 데이터를 쓰는 메소드는 다음과 같이 4가지입니다.\r\n\r\n메소드	일반적인 용도\r\nset()	정의된 경로(예: users/<user-id>/<username>)에 데이터를 쓰거나 대체합니다.\r\npush()	데이터 목록에 추가합니다. push()를 호출할 때마다 Firebase에서 고유 식별자로도 사용할 수 있는 고유 키(예: user-posts/<user-id>/<unique-post-id>)를 생성합니다.\r\nupdate()	정의된 경로에서 모든 데이터를 대체하지 않고 일부 키를 업데이트합니다.\r\ntransaction()	동시 업데이트에 의해 손상될 수 있는 복잡한 데이터를 업데이트합니다.', NULL, '', 4, 0),
(2499, 'dale.seo', '', '', '2017-03-31 12:39:10', '', 'Heroku Config Plugin', 'https://github.com/xavdid/heroku-config\r\n\r\nHeroku의 환경변수와 로컬의 환경변수의 일괄로 동기화를 맞출 때 유용하다.\r\n\r\n컨피그 플러그인 설치\r\n$ heroku plugins:install heroku-config\r\n\r\nHeroku Config => .env 파일\r\n$ heroku config:pull\r\n\r\n.env 파일 => Heroku Config (이 건 좀 위험할 듯)\r\n$ heroku config:push', NULL, '', 5, 0),
(2501, 'dale.seo', '', '', '2017-04-10 17:34:30', '', 'Firebase 데이터 검색', 'https://firebase.google.com/docs/database/web/retrieve-data', NULL, '', 2, 0),
(2502, 'dale.seo', '', '', '2017-04-12 19:01:07', '', 'How to reset data in Vuejs', 'http://stackoverflow.com/questions/35604987/is-there-a-proper-way-of-resetting-a-components-initial-data-in-vuejs\r\nhttp://codepen.io/CodinCat/pen/ameraP?editors=1010\r\n\r\n\r\nfunction getInitialData() {\r\n  return {\r\n    a: 0,\r\n    b: {\r\n      xx: 100\r\n    }\r\n  }\r\n}\r\n\r\nnew Vue({\r\n  el: ''#app'',\r\n  data: getInitialData(),\r\n  methods: {\r\n    mutate () {\r\n      this.a++\r\n      this.b.xx--\r\n    },\r\n    reset () {\r\n      Object.assign(this.$data, getInitialData())\r\n    }\r\n  }\r\n})\r\n\r\n\r\n\r\n<div id="app">\r\n  <button @click="mutate">mutate</button>\r\n  <button @click="reset">reset</button>\r\n  <div>{{ $data }}</div>\r\n</div>\r\n', NULL, '', 5, 0),
(2503, 'dale.seo', '', '', '2017-04-14 16:08:09', '', 'babel-cli 사용법', 'http://blog.jeonghwan.net/2016/07/19/babel.html\r\n\r\n$ babel index.js |node\r\n$ babel-node index.js', NULL, '', 3, 0),
(2504, 'dale.seo', '', '', '2017-04-19 10:11:12', '', 'Numbers Without Leading Zeros', 'http://stackoverflow.com/questions/7753976/regular-expression-for-numbers-without-leading-zeros\r\n\r\n\r\n/[+-]?(0|[1-9][0-9]*)/', NULL, '', 2, 0),
(2505, 'dale.seo', '', '', '2017-04-19 15:48:48', '', 'Babel을 이용하여 Mocha로 ES6 기반 프로젝트 테스트', 'https://babeljs.io/docs/setup/#installation\r\nhttp://www.jisaacks.com/writing-mocha-tests-in-es6-with-babel-6/\r\nhttp://jamesknelson.com/testing-in-es6-with-mocha-and-babel-6/\r\n\r\n===================================\r\n주의사항 \r\n===================================\r\nbabel-register가 babel-core로 부터 분리되었다.\r\n따라서 babel-register도 설치하야 하고, babel-core/register 대신에 babel-register를 사용해야 한다.\r\n\r\n\r\n===================================\r\n설치\r\n===================================\r\nnpm install --save-dev babel-register\r\n\r\n\r\n===================================\r\npackage.json\r\n===================================\r\n{\r\n  "scripts": {\r\n    "test": "mocha --compilers js:babel-register"\r\n  }\r\n}', NULL, '', 12, 0),
(2506, 'dale.seo', '', '', '2017-04-19 15:56:45', '', 'Babel을 이용하여 터미널에서 Mocha로 ES6 코드 테스트', 'babel-register 글로벌 설치\r\n=======================\r\n$ npm i -g babel-register\r\n=======================\r\n\r\nES6 기반 코드 테스트 실행\r\n=======================\r\nmocha --require babel-register SuiteServiceTest.js\r\n=======================', NULL, '', 6, 0),
(2507, 'dale.seo', '', '', '2017-04-26 23:09:52', '', 'NodeJS console 객체', 'https://nodejs.org/api/util.html#util_util_format_format_args\r\n\r\n다양한 포멧을 지원한다.\r\n\r\nconsole.log(''숫자 보여주기: %d'', 10)\r\nconsole.log(''문자열 보여주기: %s'', ''소녀시대)\r\nconsole.log(''JSON객체 보여주기: %j'', {name: ''소녀시대''})\r\n\r\n객체 트리 출력\r\n\r\n\r\nconsole.dir(obj)\r\n\r\n수행시간 측정\r\n\r\nvar result = 0;\r\n\r\nconsole.time(''duration_sum'')\r\n\r\nfor (var i = 1; i <= 100000; i++) {\r\n    result += i\r\n}\r\n\r\nconsole.timeEnd(''duration_sum'')\r\nconsole.log(''sum:'', result)', NULL, '', 8, 0),
(2508, 'dale.seo', '', '', '2017-05-01 12:52:34', '', 'NodeJS의 url, querystring 내장 모듈', 'var url = require(''url'')\r\n\r\nvar curURL = url.parse(''https://search.naver.com/search.naver?sm=tab_hty.top&where=nexearch&oquery=steave+jobs&ie=utf8&query=steve+jobs'');\r\nvar curStr = url.format(curURL)\r\n\r\nconsole.log(''URL Obj:'', curURL)\r\nconsole.log(''URL Str:'', curStr)\r\n\r\nvar querystring = require(''querystring'')\r\nvar param = querystring.parse(curURL.query)\r\n\r\nconsole.log(''Querystring Obj:'', param)\r\nconsole.log(''Querystring Str:'', querystring.stringify(param))', NULL, '', 2, 0),
(2509, 'dale.seo', '', '', '2017-05-01 13:19:17', '', '최하위 레벨에서 파일 쓰기/읽기', 'fs.readFile이나 fs.writeFile 보다 더 낮은 레벨에서 파일을 쓰고 읽을 수 있다.\r\n\r\n[[[ 파일 쓰기 ]]]\r\nvar fs = require(''fs'')\r\n\r\nfs.open(''./output.txt'', ''w'', (err, fd) => {\r\n    var buf = new Buffer(''안녕!\\n'')\r\n    fs.write(fd, buf, 0, buf.length, null, (err, written, buffer) => {\r\n        console.log(written, buffer)\r\n        fs.close(fd, () => {\r\n            console.log(''파일 열고 데이터 쓰고 파일 닫기 완료'')\r\n        })\r\n    })\r\n}) \r\n\r\n[[[ 파일 읽기 ]]]\r\nvar fs = require(''fs'')\r\n\r\nfs.open(''./output.txt'', ''r'', (err, fd) => {\r\n    var buf = new Buffer(10)\r\n    fs.read(fd, buf, 0, buf.length, null, (err, bytesRead, buffer) => {\r\n        var inStr = buffer.toString(''utf-8'', 0, bytesRead)\r\n        console.log(''파일에서 읽은 데이터:'', inStr)\r\n        console.log(bytesRead, buffer)\r\n        fs.close(fd, () => {\r\n            console.log(''output.txt 파일을 열고 읽기 완료.'')\r\n        })\r\n    })\r\n})', NULL, '', 6, 0),
(2510, 'dale.seo', '', '', '2017-05-01 20:24:43', '', 'Mongo Shell', '[ URL ]\r\nmongodb://heroku_1f3wn7xn:rtj3akoqol6hb660rbnoo640fv@ds127531.mlab.com:27531/heroku_1f3wn7xn\r\n\r\n[ Mongo Shell ]\r\n$ mongo -u heroku_1f3wn7xn -p rtj3akoqol6hb660rbnoo6 40fv --host ds127531.mlab.com --port 27531 heroku_1f3wn7xn\r\n또는\r\n$ mongodb://heroku_1f3wn7xn:rtj3akoqol6hb660rbnoo640fv@ds127531.mlab.com:27531/heroku_1f3wn7xn\r\n', NULL, '', 4, 0),
(2511, 'dale.seo', '', '', '2017-05-01 22:07:45', '', 'csv 파일로 mySql에서 mongodb로 마이그레이션', 'phpMyAdmin에서 MS엑셀 CSV데이터 형식(맨처음에 필드 이름을 출력)으로 내보내기 후...\r\n\r\n```\r\n$ mongoimport --file english.csv --type csv --headerline -u heroku_1f3wn7xn -p rtj3akoqol6hb660rbnoo640fv --host ds127531.mlab.com --port 27531 -d heroku_1f3wn7xn -c posts --drop\r\n```\r\n\r\n```\r\n$ mongoimport --file link.csv --type csv --headerline -u heroku_xt4pwdn5 -p 407ba2foilkm74q7oebvbe9qrg --host ds135532.mlab.com --port 35532 -d heroku_xt4pwdn5 -c links --drop\r\n```', NULL, '', 10, 0),
(2512, 'dale.seo', '', '', '2017-05-02 10:48:30', '', 'BigDecimal과 BigInteger 차이', 'http://gaboon.tistory.com/entry/%EC%A0%95%ED%99%95%ED%95%9C-%EC%88%AB%EC%9E%90%EA%B3%84%EC%82%B0%EC%9D%84-%EC%9C%84%ED%95%9C-BigDecimal-BigInteger\r\n\r\nBigDecimal은 실수, BigInteger는 정수를 다룰 때 사용한다.\r\n\r\n[ 메소드 ]\r\n- add\r\n- subtract\r\n- multiply\r\n- divide\r\n- remainder', NULL, '', 4, 0),
(2513, 'dale.seo', '', '', '2017-05-03 18:20:04', '', '컬렉션 백업', 'http://stackoverflow.com/questions/10624964/whats-the-fastest-way-to-copy-a-collection-within-the-same-database\r\n\r\n다큐먼트만 백업되고 인덱스는 백업되지 않으므로 주의한다.\r\n\r\n```\r\ndb.posts.aggregate([{$match: {}}, {$out: ''posts_170507''}])\r\n```', NULL, '', 10, 0),
(2514, 'dale.seo', '', '', '2017-05-08 19:50:28', '', 'Firebase 내림차순 정렬 트릭', '  computed: {\r\n    rCalls () {\r\n      return [].concat(this.calls).reverse().splice(0, 20)\r\n    }\r\n  }', NULL, '', 5, 0),
(2515, 'dale.seo', '', '', '2017-05-09 11:01:56', '', '도메인 네임 설정 방법', 'https://devcenter.heroku.com/articles/custom-domains#add-a-custom-root-domain\r\nhttp://seapy.com/2079\r\nhttps://en.wikipedia.org/wiki/List_of_DNS_record_types\r\n\r\n호스팅KR과 같은 DSP의 도메인 관리 화면에 들어가서 설정을 해주게 되는데,\r\n\r\n보통 A 타입과 CNAME 타입 설정으로 나뉜다.\r\nA 타입은 해당 도메인 네임을 직접 IP랑 맵핑해주는 방식인데 클라우드 환경에서는 IP가 유동적일 수 있으므로 잘 사용되지 않는다.\r\nCNAME 타입은 해동 도메인 네임에 IP 또는 다른 도메인 네임을 맵핑해주는 방식인데, Root Domain 세팅이 어려운 단점이 있다.', NULL, '', 4, 0),
(2516, 'dale.seo', '', '', '2017-05-09 11:04:49', '', '도메인 네임 종류', 'https://devcenter.heroku.com/articles/custom-domains\r\n\r\ntryapis.com => Root Domain (Apex Domain)\r\nwww.tryapis.com => Wildcard Domain\r\nxxx.tryapis.com => Sub Domain', NULL, '', 4, 0),
(2517, 'dale.seo', '', '', '2017-05-10 12:43:47', '', 'ExpressJS에서 204 No Content 응답하기', 'PUT이나 DELETE 요청에 대해서는 내부적으로 보통 리턴 값이 없는 메소드를 사용하기 때문에 최종 응답도 할 께 없는 경우가 많다.\r\n이럴 경우 아래와 같이 처리하면 된다.\r\n\r\n===============================================\r\nres.sendStatus(204)\r\n또는\r\nres.status(204).end()\r\n', NULL, '', 7, 0),
(2518, 'dale.seo', '', '', '2017-05-11 12:04:11', '', 'AWS Access Key 생성 방법', 'https://www.cloudberrylab.com/blog/how-to-find-your-aws-access-key-id-and-secret-access-key-and-register-with-cloudberry-s3-explorer/', NULL, '', 4, 0),
(2519, 'dale.seo', '', '', '2017-05-11 13:02:07', '', 'Heroku에서 AWS S3 연동하기', 'https://devcenter.heroku.com/articles/s3\r\nhttps://devcenter.heroku.com/articles/s3-upload-node\r\n\r\nheroku config:set AWS_ACCESS_KEY_ID=AKIAJNJN7AUVOPAAYDWQ AWS_SECRET_ACCESS_KEY=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\r\nheroku config:set S3_BUCKET_NAME=dale-blog', NULL, '', 8, 0),
(2520, 'dale.seo', '', '', '2017-05-12 10:20:53', '', 'Maximum subarray problem - Kadane''s algorithm', 'https://en.wikipedia.org/wiki/Maximum_subarray_problem\r\n\r\n현재 인덱스까지의 부분 배열의 합의 최대 = (바로 전 인덱스까지의 부분 배열의 합의 최대) vs. (바로 전 인덱스까지의 부분 배열의 합의 최대 + 현재 인덱스 값)\r\n대표적인 Dynamic Programing 알고리즘', NULL, '', 7, 0),
(2521, 'dale.seo', '', '', '2017-05-12 16:19:15', '', 'Spring Data MongoDB Mapping Annotations', 'http://docs.spring.io/spring-data/mongodb/docs/current/reference/html/#mapping-usage-annotations\r\n\r\nJPA와 비교했을 때, @Entity 대신에 @Document를 사용하고, @DBRef를 사용해서 컬레션 간 관계를 설정한다. (@OneToMany 같은 거 안 씀)\r\n\r\n=============================================================================\r\n@Document\r\n@CompoundIndexes({\r\n    @CompoundIndex(name = "age_idx", def = "{''lastName'': 1, ''age'': -1}")\r\n})\r\npublic class Person<T extends Address> {\r\n\r\n  @Id\r\n  private String id;\r\n\r\n  @Indexed(unique = true)\r\n  private Integer ssn;\r\n\r\n  @Field("fName")\r\n  private String firstName;\r\n\r\n  @Indexed\r\n  private String lastName;\r\n\r\n  private Integer age;\r\n\r\n  @Transient\r\n  private Integer accountTotal;\r\n\r\n  @DBRef\r\n  private List<Account> accounts;\r\n\r\n  private T address;\r\n\r\n\r\n  public Person(Integer ssn) {\r\n    this.ssn = ssn;\r\n  }\r\n\r\n  @PersistenceConstructor\r\n  public Person(Integer ssn, String firstName, String lastName, Integer age, T address) {\r\n    this.ssn = ssn;\r\n    this.firstName = firstName;\r\n    this.lastName = lastName;\r\n    this.age = age;\r\n    this.address = address;\r\n  }\r\n\r\n  public String getId() {\r\n    return id;\r\n  }\r\n\r\n  // no setter for Id.  (getter is only exposed for some unit testing)\r\n\r\n  public Integer getSsn() {\r\n    return ssn;\r\n  }\r\n\r\n// other getters/setters omitted', NULL, '', 5, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(2522, 'dale.seo', '', '', '2017-05-12 23:05:16', '', '첨부 파일을 MongoDB에서 관리하기', 'Multer로 파일을 업로드 할 때, Memory Storage 옵션을 사용하면 req.file.buffer에 첨부 파일 바이너리 데이터가 담긴다.\r\n이 것을 그대로 MongoDB에 insert하고, 조회할 때는 그 바이너리 데이터를 그대로 mime-type을 헤더로 줘서 res에 써주면 된다.\r\n\r\n===========================================================================\r\nconst router = require(''express'').Router()\r\nconst fs = require(''fs'')\r\nconst path = require(''path'')\r\nconst userSvc = require(''../services/userSvc'')\r\n\r\nconst multer = require(''multer'')\r\nconst upload = multer()\r\n\r\nrouter.get(''/'', (req, res) => {\r\n  userSvc.list()\r\n    .then(users => {\r\n      console.log(users)\r\n      return users\r\n    })\r\n    .then(users => {\r\n      res.render(''index'', {users: users})\r\n    })\r\n})\r\n\r\nconst newUser = {\r\n  ''name'': '''',\r\n  ''role'': ''Guest'',\r\n  ''email'': '''',\r\n  ''score'': 0,\r\n  ''img'': ''guest.png''\r\n}\r\n\r\nrouter.get(''/add'', (req, res) => {\r\n  res.render(''edit'', {user: newUser})\r\n})\r\n\r\nrouter.post(''/add'', upload.single(''photo''), (req, res) => {\r\n  console.log(''#req.body:'', req.body)\r\n  console.log(''#req.file:'', req.file)\r\n  if (req.file) {\r\n    req.body.photo = {\r\n      type: req.file.mimetype,\r\n      name: req.file.originalname,\r\n      size: req.file.size,\r\n      data: req.file.buffer\r\n    }\r\n  }\r\n  userSvc.create(req.body)\r\n    .then(id => {\r\n      res.redirect(id)\r\n    })\r\n})\r\n\r\nrouter.get(''/:id'', (req, res) => {\r\n  userSvc.detail(req.params.id)\r\n    .then(user => {\r\n      delete user.photo\r\n      res.render(''view'', {user: user})\r\n    })\r\n})\r\n\r\nrouter.get(''/:id/photo'', (req, res) => {\r\n  userSvc.detail(req.params.id)\r\n    .then(user => {\r\n      if (user.photo) {\r\n        res.set(''Content-Type'', user.photo.type)\r\n        res.end(user.photo.data.buffer)\r\n      } else {\r\n        res.set(''Content-Type'', ''image/png'')\r\n        fs.createReadStream(path.join(''__dirname'', ''../public/images/profile.png'')).pipe(res)\r\n      }\r\n    })\r\n})\r\n\r\nrouter.get(''/:id/del'', (req, res) => {\r\n  userSvc.remove(req.params.id)\r\n    .then(_ => {\r\n      res.redirect(''/users'')\r\n    })\r\n})\r\n\r\nrouter.get(''/:id/edit'', (req, res) => {\r\n  userSvc.detail(req.params.id)\r\n    .then(user => {\r\n      res.render(''edit'', {user: user})\r\n    })\r\n})\r\n\r\nrouter.post(''/:id/edit'', upload.single(''photo''), (req, res) => {\r\n  console.log(''#req.body:'', req.body)\r\n  console.log(''#req.file:'', req.file)\r\n  if (req.file) {\r\n    req.body.photo = {\r\n      type: req.file.mimetype,\r\n      name: req.file.originalname,\r\n      size: req.file.size,\r\n      data: req.file.buffer\r\n    }\r\n  }\r\n  userSvc.modify(req.params.id, req.body)\r\n    .then(_ => {\r\n      res.redirect(''/users/'' + req.params.id)\r\n    })\r\n})\r\n\r\nmodule.exports = router;', NULL, '', 3, 0),
(2523, 'dale.seo', '', '', '2017-05-16 13:25:18', '', 'Mongodump 후 Mongorestore', 'FROM : mongodb://sqe:QASPBIS*36!@172.21.196.30:27017/sqe\r\n```\r\n$ mongodump --host 172.21.196.30 --port 27017 -u sqe -p QASPBIS*36! -d sqe\r\n```\r\n\r\nTO : mongodb://user:pass@ds133241.mlab.com:33241/onetests\r\n```\r\nmongorestore --host ds133241.mlab.com --port 33241 -d onetests -u user -p pass dump/sqe/\r\n```\r\n\r\n================================================================================================\r\nmongodb://heroku_1f3wn7xn:rtj3akoqol6hb660rbnoo640fv@ds127531.mlab.com:27531/heroku_1f3wn7xn\r\n로 부터 posts 컬렉션 덤프뜨기\r\ndump 디렉토리가 만들어지고 그 안에 덤프가 뜬다.\r\n\r\n```\r\n$ mongodump --host ds127531.mlab.com --port 27531 -u heroku_1f3wn7xn -p rtj3akoqol6hb660rbnoo640fv -d heroku_1f3wn7xn -c posts\r\n```\r\n\r\n그대로 로컬 MongoDB의 english DB에 복원하기\r\n```\r\n$ mongorestore --db english dump/heroku_1f3wn7xn/\r\n```', NULL, '', 22, 0),
(2524, 'dale.seo', '', '', '2017-05-16 23:06:15', '', 'Mongoose 스키마 timestamps 옵션 적용하기', '스키마 생성할 때 { timestamps: true } 옵션을 주면, createdAt와 updatedAt 필드가 추가된다. (마치 JPA의 Auditing 기능처럼)\r\n\r\n====================================================\r\noption: timestamps\r\nIf set timestamps, mongoose assigns createdAt and updatedAt fields to your schema, the type assigned is Date.\r\n\r\nBy default, the name of two fields are createdAt and updatedAt, custom the field name by setting timestamps.createdAt and timestamps.updatedAt.\r\n\r\nvar thingSchema = new Schema({..}, { timestamps: { createdAt: ''created_at'' } });\r\nvar Thing = mongoose.model(''Thing'', thingSchema);\r\nvar thing = new Thing();\r\nthing.save(); // `created_at` & `updatedAt` will be included', NULL, '', 3, 0),
(2525, 'dale.seo', '', '', '2017-05-19 11:26:11', '', 'Global Filter 등록', 'import moment from ''moment''\r\n\r\nVue.filter(''formatDate'', function (date) {\r\n    return moment(date).format(''YY/MM/DD HH:mm:ss'')\r\n})', NULL, '', 2, 0),
(2526, 'dale.seo', '', '', '2017-05-26 10:26:02', '', '자바 Map의 getOrDefault 메소드', 'get 메소드를 쓰면 키가 없을 때 예외가 발생하지만 getOrDefault를 쓰면 기본값을 세팅해줄 수 있다.\r\ncontains 메소드를 사용하지 않고 간결하게 코드 작성을 할 수 있다.\r\n\r\ncounter.put(A[i], counter.getOrDefault(A[i], 0) + 1);', NULL, '', 2, 0),
(2527, 'dale.seo', '', '', '2017-05-26 11:15:47', '', '[Vue Router] $route 객체에서 얻을 수 있는 것들', 'https://router.vuejs.org/en/api/route-object.html', NULL, '', 3, 0),
(2528, 'dale.seo', '', '', '2017-05-26 18:54:48', '', 'Atom 단축키', '\r\n- 동일한 부분 모두 선택하기 : Ctrl + Cmd + g / Alt + F3\r\n- 열편집 : Alt + Shift + Up/Down\r\n', NULL, '', 4, 0),
(2529, 'dale.seo', '', '', '2017-05-27 12:35:55', '', 'NodeJS Password Encryption', 'bcrypt를 이용한다.\r\n\r\nhttps://codahale.com/how-to-safely-store-a-password/\r\nhttp://tphangout.com/how-to-encrypt-passwords-or-other-data-before-saving-it-in-mongodb/\r\nh\r\nhttp://devsmash.com/blog/password-authentication-with-mongoose-and-bcrypt\r\nhttp://devsmash.com/blog/implementing-max-login-attempts-with-mongoose\r\nhttps://www.npmjs.com/package/bcrypt', NULL, '', 6, 0),
(2530, 'dale.seo', '', '', '2017-05-30 18:20:30', '', 'VueJS에서 jQuery사용하기', 'ProvidePlugin을 사용하면 된다.\r\n\r\nhttps://webpack.js.org/plugins/provide-plugin/\r\n\r\nhttps://stackoverflow.com/questions/37928998/how-to-use-a-jquery-plugin-inside-vue\r\n\r\nhttps://github.com/prograhammer/example-vue-project#configure-jquery-and-lodash-and-tether', NULL, '', 5, 0),
(2531, 'dale.seo', '', '', '2017-05-30 19:49:04', '', 'Docker 자동 설치 스크립트', 'http://www.pyrasis.com/Docker/Docker-HOWTO#section-5\r\n\r\n$ sudo wget -qO- https://get.docker.com/ | sh\r\n\r\n설치 후 다음과 명령어를 매번 sudo를 안 쳐도 됨\r\n\r\n$ sudo usermod -aG docker dale\r\n', NULL, '', 5, 0),
(2532, 'dale.seo', '', '', '2017-05-30 21:59:31', '', '리눅스 민트 한글 입력 / 한영키 / 한자키 설정', '# 설치시 키보드 선택\r\nhttp://kingfisher.pe.kr/%EB%A6%AC%EB%88%85%EC%8A%A4-%EB%AF%BC%ED%8A%B8-linux-mint-17-1-rebecca-%ED%95%9C%EA%B8%80-%EC%9E%85%EB%A0%A5%EA%B8%B0-%EC%84%A4%EC%A0%95%EB%B0%A9%EB%B2%95/\r\n\r\n- 한국어 (101/104키 호환) 선택할 것\r\n\r\n# 한국어 추가\r\n- System Settings > Languages > \r\n- Language 탭에서 Language Support 부분에서 Korean 설치\r\n- Input Method 탭에서 UIM 선택\r\n\r\n# 한영키 설정 (UIM 벼루)\r\nhttp://deneb21.tistory.com/357\r\n\r\nUIM, iBUS, Fcitx 중에 UIM(벼루)를 선택하고, 한영키/한자키 세팅을 해준다.\r\n\r\n\r\n', NULL, '', 5, 0),
(2533, 'dale.seo', '', '', '2017-05-30 23:35:15', '', 'Atom 필수 패키지', '- sync-settings\r\n- file-icons\r\n- highlight-selected\r\n- emmet\r\n- minimap\r\n- atom-beautify\r\nhttps://atom.io/packages/atom-beautify', NULL, '', 11, 0),
(2535, 'dale.seo', '', '', '2017-05-31 19:26:44', '', 'Spring Data MongoDB Cascading with DBRef', '부모 문서를 저장할 때 자식 문서도 같이 저장할 수 있다.\r\n\r\nhttp://www.baeldung.com/cascading-with-dbref-and-lifecycle-events-in-spring-data-mongodb\r\nhttps://github.com/eugenp/tutorials/tree/master/spring-data-mongodb', NULL, '', 6, 0),
(2536, 'dale.seo', '', '', '2017-05-31 19:38:48', '', '@DBRef 사용 시 link 대신에 실제 객체를 받는 방법', 'Spring Data Rest와 Spring Data MongoDB를 사용할 때, @DBRef 어노테이션이 선언된 필드는 실제 객체가 아니라, 해당 객체를 얻을 수 있는 URL(link > href) 가 대신 응답된다.\r\n\r\n@Projection 어노테이션을 사용하면 됨\r\n\r\nhttps://docs.spring.io/spring-data/rest/docs/current/reference/html/#projections-excerpts\r\nhttps://github.com/spring-projects/spring-data-examples/tree/master/rest/projections\r\n\r\nhttps://w3stacks.com/questions/spring-boot/167/eagerly-load-mongodb-dbref-in-spring-data-s-repositoryrestresource\r\nhttps://stackoverflow.com/questions/43394427/eagerly-load-mongodb-dbref-in-spring-datas-repositoryrestresource\r\nhttps://stackoverflow.com/questions/35991354/spring-data-rest-mongodb-retrieve-objects-of-dbref-instead-of-href', NULL, '', 16, 0),
(2537, 'dale.seo', '', '', '2017-06-01 12:57:04', '', 'Webpack toastr 세팅', 'npm i -S jquery toastr 후에 다음과 같이 global scope에 등록해준다.\r\n\r\n=================================================\r\nmodule.exports = {\r\n  plugins: [\r\n    new webpack.ProvidePlugin({\r\n      $: ''jquery'',\r\n      jQuery: ''jquery'',\r\n      toastr: ''toastr''\r\n    })\r\n  ]\r\n}', NULL, '', 2, 0),
(2538, 'dale.seo', '', '', '2017-06-01 14:11:08', '', 'Spring Data Rest 사용 시 관계 설정 방법', 'http://www.baeldung.com/spring-data-rest-relationships\r\n\r\n위 포스트에 매우 잘 나와 있음.\r\nPUT 메소드와 text/uri-list라는 컨텐트 타입을 이용해야함.\r\n', NULL, '', 3, 0),
(2539, 'dale.seo', '', '', '2017-06-01 22:09:23', '', 'Vuejs에서 jQuery의 ready와 대응되는 Lifecyle hook', 'mounted 또는 updated 라이프사이클 훅을 사용해야 한다.\r\n\r\n```\r\n  mounted () {\r\n    $(''.ui.accordion'').accordion();\r\n  }\r\n```', NULL, '', 6, 0),
(2540, 'dale.seo', '', '', '2017-06-04 10:45:06', '', 'Spring Boot Devtools Live Reload', 'http://jojoldu.tistory.com/48\r\n위에 있는 마지막 2개까지 해야지 IntelliJ에서 정상 작동함\r\n========================================================================\r\nhttps://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-devtools.html\r\n\r\n정적 리소스 파일들이 업데이트될 때, 브라우져 화면에서도 바로 업데이트 할 수 있다.\r\n\r\n1) Intellij IDEA에서 Build project automatically 옵션을 켜준다. \r\n- 위치: Build, Execution, Deployment > Compiler\r\n- 기능: Eclipse처럼 파일에 수정을 가하는 순간 다시 컴파일을 해준다.\r\n\r\n2) spring-boot-devtools 디펜던시를 추가해준다.\r\n```\r\ndependencies {\r\n    compile("org.springframework.boot:spring-boot-devtools")\r\n}\r\n```\r\n\r\n3) application.yml 파일에 다음 설정을 추가해준다.\r\n```\r\nspring:\r\n  devtools:\r\n    livereload:\r\n      enabled: true\r\n```\r\n\r\n4) 터미널에서 ./gradlew bootRun으로 서버를 실행한다. \r\n(java -jar나 Gradle 플러그인을 통해서 실행시키면 안됨)\r\n\r\n5) Live Reload 크롬 익스텐션을 설치한다.\r\nhttps://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei\r\n\r\n6) /static 이나 /public 폴더 내의 파일을 업데이트 하는 순간 크롬 브라우져의 화면이 refresh 됨을 확인할 수 있다.\r\n(Reload 기능은 Restart 기능과 다르게 콘솔에 아무 로그도 남지 않는다.)', NULL, '', 23, 0),
(2541, 'dale.seo', '', '', '2017-06-05 13:35:54', '', 'Spring Data JPA Auditng 이해 (설명 끝판왕)', 'http://www.baeldung.com/database-auditing-jpa\r\n\r\nJAP Auditng을 사용하는 3가지 옵션이 있으나, 현실적으로 마지막 Spring Data를 사용\r\n\r\n1) 스프링 자바 설정 파일에 @EnableJpaAuditing 추가\r\n2) Auditing을 적용시킬 Entity 클래스에 @EntityListeners(AuditingEntityListener.class) 적용\r\n3) Entity 클래스에 Auditing 정보를 저장할 필드 추가 (@CreatedDate, @LastModifiedDate, @CreatedBy, @LastModifiedBy)\r\n4) Date 필드는 아무 설정 안 해도 자동으로 세팅되지만, By 필드는 어떤 타입으로 어떻게 값을 세팅해줄지에 대해서 AuditorAware 인터페이스를 구현해야줘야 한다.\r\n(아래 예제는 By 필드들이 항상 "user"로 세팅됨. 프로젝트 초반에 Spring Security 적용 전에 활용하면 좋을 듯)\r\n\r\n```\r\n@Component\r\npublic class AuditorAwareImpl implements AuditorAware<String> {\r\n    @Override\r\n    public String getCurrentAuditor() {\r\n        return "user";\r\n    }\r\n}\r\n```', NULL, '', 8, 0),
(2542, 'dale.seo', '', '', '2017-06-06 13:46:54', '', '특정 칼럼에 대한 필터 넣기', 'https://datatables.net/examples/api/multi_filter_select.html', NULL, '', 2, 0),
(2543, 'dale.seo', '', '', '2017-06-06 13:47:45', '', 'DataTables + Semantic UI', 'https://datatables.net/examples/styling/semanticui.html', NULL, '', 2, 0),
(2544, 'dale.seo', '', '', '2017-06-06 17:13:10', '', 'Spring Data MongoDB 쿼리 로깅 세팅', 'application.yaml\r\n```\r\nlogging:\r\n  level:\r\n    com.onestorecorp.onetests: DEBUG\r\n    org.springframework.data.mongodb.core.MongoTemplate: DEBUG\r\n    org.springframework: INFO\r\n    org.mongodb.driver: DEBUG\r\n    ROOT: INFO\r\n```', NULL, '', 4, 0),
(2545, 'dale.seo', '', '', '2017-06-08 12:28:16', '', 'v-model 작동 원리', 'https://vuejs.org/v2/guide/components.html#Form-Input-Components-using-Custom-Events\r\n\r\n```\r\n<input v-model="something">\r\n```\r\n\r\n위 코드는 아래 코드의 shortcut 이라고 보면 됨\r\n\r\n```\r\n<input\r\n  v-bind:value="something"\r\n  v-on:input="something = $event.target.value">\r\n```', NULL, '', 3, 0),
(2546, 'dale.seo', '', '', '2017-06-08 12:59:52', '', '자식 컴포넌트에서 props 업데이트 하는 방법', '# .sync 수식어 활용\r\nhttps://vuejs.org/v2/guide/components.html#sync-Modifier\r\n\r\n# v-model 디렉티브 활용\r\nhttps://vuejs.org/v2/guide/components.html#Form-Input-Components-using-Custom-Events\r\n\r\n# v-model 디렉티브 커스터마이징\r\nhttps://vuejs.org/v2/guide/components.html#Customizing-Component-v-model\r\n\r\n```\r\n  model: {\r\n    prop: ''checked'',\r\n    event: ''change''\r\n  }\r\n```', NULL, '', 10, 0),
(2547, 'dale.seo', '', '', '2017-06-08 13:05:38', '', 'slot 사용 방법', 'https://vuejs.org/v2/guide/components.html#Content-Distribution-with-Slots\r\n\r\n보통 컴포넌트를 사용할 때는 <Comp /> 이런 식으로 태그 안에 콘텐트를 넣지 않는다.\r\n하지만 <Comp>~~~</Comp> 식으로 사용할 경우, 부모 템플릿의 콘텐트(~~~)와 자식 컴포넌트의 템플릿이 경합을 일으키게 된다.\r\n이럴 경우, 자식 컴포넌트의 템플릿에 <slot/> 태그를 포함시켜 주면, 그 안에 부모 템플릿의 콘텐트가 박히게 된다.\r\n\r\n레이아웃을 잡을 때 유용하게 사용된다.', NULL, '', 4, 0),
(2548, 'dale.seo', '', '', '2017-06-08 13:19:27', '', '여러 개의 컴포넌트를 동적으로 교체하기', 'https://vuejs.org/v2/guide/components.html#Dynamic-Components\r\n\r\n탭을 구현할 때, v-if 대신에 활용하면 좋을 것 같다.\r\n\r\n<component>와 <keep-alive> 내장 태그를 이용하면 간단히 구현이 가능하다.', NULL, '', 5, 0),
(2549, 'dale.seo', '', '', '2017-06-09 18:28:53', '', 'this.$refs', 'https://vuejs.org/v2/guide/components.html#Child-Component-Refs\r\n\r\njQuery의 선택자처럼 템플릿 내에서 특정 요소를 선택할 때 사용된다.', NULL, '', 5, 0),
(2550, 'dale.seo', '', '', '2017-06-09 18:48:08', '', 'text/x-template', 'https://vuejs.org/v2/guide/components.html#X-Templates\r\n\r\nCDN으로 VueJS를 사용할 때 유용할 듯', NULL, '', 0, 0),
(2551, 'dale.seo', '', '', '2017-06-09 18:48:08', '', 'text/x-template', 'https://vuejs.org/v2/guide/components.html#X-Templates\r\n\r\nCDN으로 VueJS를 사용할 때 유용할 듯', NULL, '', 2, 0),
(2552, 'dale.seo', '', '', '2017-06-12 12:13:04', '', 'Heroku CLI 설치 방법 (Linux)', '# Run this from your terminal.\r\n# The following will add our apt repository and install the CLI:\r\nsudo add-apt-repository "deb https://cli-assets.heroku.com/branches/stable/apt ./"\r\ncurl -L https://cli-assets.heroku.com/apt/release.key | sudo apt-key add -\r\nsudo apt-get update\r\nsudo apt-get install heroku', NULL, '', 3, 0),
(2553, 'dale.seo', '', '', '2017-06-12 12:38:18', '', 'VUE CLI', '# 설치\r\n```\r\nnpm install -g vue-cli\r\n```\r\n\r\n# 도움말\r\n```\r\nvue -h\r\n```\r\n\r\n# 설치 옵션\r\n```\r\nvue list\r\n```\r\n\r\n# webpack-simple 옵션으로 설치\r\n```\r\nvue init webpack-simple\r\n```', NULL, '', 10, 0),
(2554, 'dale.seo', '', '', '2017-06-13 12:02:47', '', 'Java 8 Collectors 설명 끝판왕', 'http://www.baeldung.com/java-8-collectors', NULL, '', 2, 0),
(2555, 'dale.seo', '', '', '2017-06-13 13:06:24', '', 'Collection을 순회하는 3가지 방법', 'http://docs.oracle.com/javase/tutorial/collections/interfaces/collection.html\r\n\r\n1) Stream API\r\n\r\n2) For each\r\n\r\n3) Iterator\r\n\r\nInterator를 이용하면 순회하면서 특정 element를 삭제할 수 있다.', NULL, '', 2, 0),
(2556, 'dale.seo', '', '', '2017-06-13 20:01:18', '', '자주 사용하는 Jackson 라이브러리 어노테이션', '특정 필드를 무시\r\n```\r\n@JsonIgnore\r\nprivate String password;\r\n```\r\n\r\n널 값을 무시\r\n```\r\n@JsonInclude(JsonInclude.Include.NON_NULL)\r\nprivate String body;\r\n```\r\n\r\n필드 이름 변경\r\n```\r\n@JsonProperty("username")\r\nprivate String name;\r\n```', NULL, '', 7, 0),
(2557, 'dale.seo', '', '', '2017-06-13 20:06:19', '', '자주 사용하는 ObjectMapper 글로벌 설정 옵션', '// 널값을 가진 필드 무시\r\nmapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);', NULL, '', 4, 0),
(2558, 'dale.seo', '', '', '2017-06-18 10:45:27', '', 'ObjectMapper#writerWithDefaultPrettyPrinter()', '자바 객체를 Json 문자열로 Serialize할 때, 여러 줄로 가독성 좋게 줄바꿈을 넣어준다.\r\n\r\n	@Test\r\n	public void testWriterWithDefaultPrettyPrinter() throws JsonProcessingException {\r\n		ObjectMapper mapper = new ObjectMapper();\r\n		ObjectNode objectNode = mapper.createObjectNode();\r\n		objectNode.put("no", 1);\r\n		objectNode.put("createdDate", 1497351968054L);\r\n		objectNode.put("email", "user@test.com");\r\n		objectNode.putNull("roles");\r\n		objectNode.put("username", "user");\r\n\r\n		String jsonAsString = mapper.writeValueAsString(objectNode);\r\n		System.out.println("#jsonAsString: " + jsonAsString);\r\n		String expectedString = "{\\"no\\":1,\\"createdDate\\":1497351968054,\\"email\\":\\"user@test.com\\",\\"roles\\":null,\\"username\\":\\"user\\"}";\r\n		assertThat(jsonAsString).isEqualTo(expectedString);\r\n\r\n		String jsonAsPrettyString = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(objectNode);\r\n		String expectedPrettyString = "{\\n" +\r\n				"  \\"no\\" : 1,\\n" +\r\n				"  \\"createdDate\\" : 1497351968054,\\n" +\r\n				"  \\"email\\" : \\"user@test.com\\",\\n" +\r\n				"  \\"roles\\" : null,\\n" +\r\n				"  \\"username\\" : \\"user\\"\\n" +\r\n				"}";\r\n		System.out.println("#jsonAsPrettyString: " + jsonAsPrettyString);\r\n		assertThat(jsonAsPrettyString).isEqualTo(expectedPrettyString);\r\n	}', NULL, '', 3, 0),
(2559, 'dale.seo', '', '', '2017-06-22 11:09:55', '', 'Redis Zset 설명', 'https://scalegrid.io/blog/introduction-to-redis-data-structures-sorted-sets/\r\n\r\n그나마 잘 되어 있음', NULL, '', 2, 0),
(2560, 'dale.seo', '', '', '2017-06-22 14:11:12', '', 'Redis ZSET 관련 명령어 정리', '## 주의사항\r\nZRANGE는 기본적으로 오름차순 정렬된 데이터의 0 인덱스 기준으로 조회한다. (즉, 점수가 낮을 수록 유리한 랭킹, 예. 100 달리기 기록)\r\nZREVRAGE는 반대로 내림차순 정렬된 데이터를 기준으로 조회한다. (즉, 점수가 높을 수록 유리한 랭킹, 예. 온라임 게임의 leaderboard)\r\n따라서 다른 기준으로 정렬을 하고 싶은면 ZRANGEBYSCORE, ZRANGEBYLEX를 사용한다.\r\n\r\n## 팁\r\nZSET에는 중복 vlaue를 저장할 수는 없지만 중복 score는 저장할 수 있다. 즉, 데이터 보관은 value가 마치 key처럼 작동하는데, 데이터 정렬은 score 기준으로 한다.\r\n따라서 ZADD는 기존 value에 대해서는 score 업데이트 기능으로 동작한다.\r\n\r\n## board 키에 5개의 값 삽입\r\n```\r\n> ZADD board 100 Dale 90 Nate 80 Ben 60 Kate 70 Beege 50 John\r\n```\r\n\r\n## 특정 원소의 점수 변경\r\n```\r\n> ZADD board 101 Dale\r\n```\r\n\r\n## 특정 원소의 점수 1 증가\r\n```\r\n> ZINCRBY board 1 Dale\r\n```\r\n\r\n## TOP 3 조회\r\n```\r\n> ZREVRANGE board 0 3\r\n또는\r\n> ZRANGE board -3 -1\r\n```\r\n\r\n## BOTTOM 3 조회\r\n```\r\n> ZRANGE board 0 3\r\n또는\r\n> ZREVRANGE board -3 -1\r\n```\r\n\r\n## 점수가 낮은 순서대로 범위 조회 (점수와 함께)\r\n```\r\nZRANGE board 0 -1 WITHSCORES\r\n1) "Beege"\r\n2) 70.0\r\n3) "Ben"\r\n4) 80.0\r\n5) "Nate"\r\n6) 90.0\r\n7) "Dale"\r\n8) 100.0\r\n```\r\n\r\n## 점수가 높은 순서대로 범위 조회 (점수와 함께) => 순위 조회임\r\n```\r\nZREVRANGE board 0 -1 WITHSCORES\r\n```\r\n\r\n## 특정 구간에 속해있는 맴버 수 구하기: 101점 부터 200점 사이에 속한 맴버의 수\r\n```\r\nZCOUNT myzset 101 200\r\n```\r\n\r\n## 특정 원소의 점수 조회\r\n```\r\n> ZSCORE board Dale\r\n```\r\n\r\n\r\n## 3등 조회\r\n```\r\n> ZRANGE board -3 -3\r\n```\r\n\r\n## 뒤에서 3등 조회\r\n```\r\n> ZRANGE board 3 3\r\n```\r\n\r\n## Dale의 랭킹 조회 (오름차순, 내림차순)\r\n```\r\n> ZRANK board Dale\r\n> ZREVRANK board Dale\r\n```\r\n\r\n## 특정 티어/레벨의 사용자 조회: 200점 부터 101점 사이 구간의 사용자\r\n```\r\n> ZREVRANGEBYSCORE 200 101\r\n```\r\n\r\n## 상위 Top 3 삭제 (-3, -2, -1 만 남김)\r\n```\r\nZREMRANGEBYRANK board 0 -4\r\n```\r\n\r\n## 하위 Top 3 삭제 (0, 1, 2 만 남김)\r\n```\r\n> ZREMRANGEBYRANK board 3 -1\r\n```\r\n\r\n## 90점 미만 원소 삭제\r\n```\r\n> ZREMRANGEBYSCORE board -inf (90\r\n```\r\n\r\n## Dale 삭제\r\n```\r\n> ZREM board Dale\r\n```\r\n', NULL, '', 24, 0),
(2561, 'dale.seo', '', '', '2017-06-22 19:05:13', '', 'MinHeap을 이용해서, Top K 구하기', 'http://www.zrzahid.com/top-k-or-k-most-frequent-words-in-a-document/\r\nhttp://blog.naver.com/PostView.nhn?blogId=hyoun1202&logNo=90193398013\r\nhttp://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/', NULL, '', 7, 0),
(2562, 'dale.seo', '', '', '2017-06-24 21:00:48', '', '.env 파일을 이용해서 process.env 채우기', '# .env\r\n```\r\nMONGODB_URI=''mongodb://localhost:27017/test''\r\n```\r\n\r\n# test.js\r\n```\r\nrequire(''dotenv'').config()\r\nconsole.log(process.env.MONGODB_URI)\r\n```', NULL, '', 3, 0),
(2563, 'dale.seo', '', '', '2017-06-27 14:57:47', '', '객체의 내부 필드가 바뀌었을 때, DOM update 시키는 방법', 'this.$set 이나 this.$delete 메소드를 사용하면 됨\r\n\r\nhttps://vuejs.org/v2/guide/reactivity.html#Change-Detection-Caveats\r\nhttps://vuejs.org/v2/api/#vm-set\r\nhttps://vuejs.org/v2/api/#vm-delete\r\n\r\n강제로 DOM update 시키는 방법\r\n\r\nthis.$forceUpdate()', NULL, '', 7, 0),
(2564, 'dale.seo', '', '', '2017-06-29 12:16:50', '', 'Free Dyno Hours', 'https://devcenter.heroku.com/articles/free-dyno-hours\r\n\r\n아무 앱 대상으로 `heroku ps`를 날리면 몇 시간, 몇 퍼센트 남았는지 알려준다.\r\n\r\n기본적으로 한달에 1000시간을 제공해주고, 30분 동안 들어오는 요청이 없으면 수면 상태가 된다.', NULL, '', 2, 0),
(2565, 'dale.seo', '', '', '2017-06-29 12:27:17', '', 'New Relic APM - Heroku Monitoring Add-on', 'https://elements.heroku.com/addons/newrelic\r\n\r\n허로쿠 앱 모니터링 애드온.\r\n허로쿠 앱의 Sleep 방지 용으로도 사용할 수 있음', NULL, '', 2, 0),
(2566, 'dale.seo', '', '', '2017-06-29 12:54:01', '', 'Heroku App이 Sleep 되지 않게 만들기', '자기 자신을 주기적으로 계속 호줄하는 코드를 넣으면 된다.\r\n\r\n## monitor.js\r\n```\r\nconst http = require(''http'')\r\nsetInterval(_ => {\r\n  console.log(''#monitor'')\r\n  http.get(''/health'')\r\n}, 5 * 60 * 1000) // 5 mins\r\n```\r\n\r\n## app.js\r\n```\r\nrequire(''./monitor.js''\r\n```', NULL, '', 5, 0),
(2567, 'dale.seo', '', '', '2017-06-29 19:32:06', '', 'body 외에 sidebar 적용하기', '\r\n## HTML\r\nui sidebar 클래스와  pusher 클래스를 감싸는 ui segment pushable 클래스가 필요하며,\r\n\r\n## JavaScript\r\n.sidebar() 메소드에 context 옵션을 사용해서 부모 엘리먼트를 지정해줘야 한다.\r\n\r\n========================================================================\r\n<template>\r\n  <div id="app" class="ui segment pushable">\r\n    <div class="ui inverted vertical icon labeled menu sidebar">\r\n      <div class="item" @click="select(''home'')">\r\n        <i class="home icon"/>Home\r\n      </div>\r\n      <div class="item" @click="select(''planner'')">\r\n        <i class="checked calendar icon"/>Planner\r\n      </div>\r\n      <div class="item" @click="select(''planner'')">\r\n        <i class="bookmark icon"/>Bookmarks\r\n      </div>\r\n    </div>\r\n    <div class="pusher">\r\n      <div class="ui basic segment">\r\n        <div class="ui icon button" @click="toggleMenu">\r\n          <i class="sidebar icon"/>\r\n        </div>\r\n        <Home/>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Home from ''./components/Home.vue''\r\n\r\nexport default {\r\n  components: {Home},\r\n  mounted () {\r\n    $(''#app .ui.sidebar'')\r\n      .sidebar({\r\n        context: $(''#app'')\r\n      })\r\n      .sidebar(''attach events'', ''#app .menu .item'')\r\n  },\r\n  methods: {\r\n    toggleMenu () {\r\n      $(''#app .ui.sidebar'')\r\n        .sidebar(''toggle'')\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n</style>\r\n', NULL, '', 5, 0),
(2568, 'dale.seo', '', '', '2017-07-04 21:07:19', '', 'Hoisting 관련 좋은 글들', 'http://javascriptissexy.com/javascript-variable-scope-and-hoisting-explained/\r\nhttp://chanlee.github.io/2013/12/10/javascript-variable-scope-and-hoisting/\r\nhttps://developer.mozilla.org/en-US/docs/Glossary/Hoisting', NULL, '', 5, 0),
(2569, 'dale.seo', '', '', '2017-07-06 17:13:30', '', 'Spring Boot에 EhCache 설정하기', 'http://jojoldu.tistory.com/57\r\n\r\n설명이 완벽함', NULL, '', 3, 0),
(2570, 'dale.seo', '', '', '2017-07-06 17:24:21', '', 'CommandLineRunner를 이용한 빈 등록 여부 검증', '생성자에 @Autowired를 안 써도 주입이 되는 듯?\r\n\r\n========================================================================\r\npackage com.onestorecorp.onetests;\r\n\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.springframework.boot.CommandLineRunner;\r\nimport org.springframework.cache.CacheManager;\r\nimport org.springframework.stereotype.Component;\r\n\r\n@Component\r\n@Slf4j\r\npublic class CacheManagerCheck implements CommandLineRunner {\r\n\r\n	private final CacheManager cacheManager;\r\n\r\n	public CacheManagerCheck(CacheManager cacheManager) {\r\n		this.cacheManager = cacheManager;\r\n	}\r\n\r\n	@Override\r\n	public void run(String... args) throws Exception {\r\n		log.info("\\n\\n" + "=========================================================\\n" + "Using cache manager: " + this.cacheManager.getClass().getName() + "\\n" + "=========================================================\\n\\n");\r\n	}\r\n\r\n}\r\n', NULL, '', 5, 0),
(2571, 'dale.seo', '', '', '2017-07-07 11:27:36', '', '@DBRef가 해주는 것', 'Spring Data MongoDB를 사용하면서 @DBRef가 많은 것을 해줄 거라 생각하는데, 사실 별로 해주게 없다.\r\n\r\n일단 조회할 때는 아무 영향을 주지 않는다.\r\n\r\n컬렉션을 저장할 때는, 관계를 맺고있는 다큐먼트까지 함께 업데이트쳐주지 않는다.\r\n따라서 MongoEventListner를 사용해서 매뉴얼로 세팅해줘야 한다. (http://www.baeldung.com/cascading-with-dbref-and-lifecycle-events-in-spring-data-mongodb)\r\n\r\n딱 한가지 분명히 해주는 것은 @DBRef가 붙은 필드가 저장될 때, "$id" 필드 외에 "$ref" 필드까지 관계를 맺고 있는 컬렉션 명으로 세팅을 해준다.', NULL, '', 6, 0),
(2572, 'dale.seo', '', '', '2017-07-09 16:16:51', '', 'Best Time to Buy and Sell Stock', 'https://leetcode.com/problems/best-time-to-buy-and-sell-stock\r\nhttp://www.programcreek.com/2014/02/leetcode-best-time-to-buy-and-sell-stock-java/\r\n\r\n주식을 언제 사서 언제 팔아야지 최대 수익을 낼 수 있는지 알아내는 문제 (페이스북 코딩 시험 때 나옴)\r\n현재가에서 여태까지 나왔던 최저가를 빼서 현 시점에서 낼 수 있는 최대 수익을 구하고 이를 여태까지 나왔떤 최대 수익과 비교하면 됨\r\n\r\n```\r\nclass Solution(object):\r\n    def maxProfit(self, prices):\r\n        if not prices:\r\n            return 0\r\n        max_profit = 0\r\n        min_price = prices[0]\r\n        for price in prices:\r\n            min_price = min(min_price, price)\r\n            cur_profit = price - min_price\r\n            max_profit = max(max_profit, cur_profit)\r\n        return max_profit\r\n```', NULL, '', 2, 0),
(2573, 'dale.seo', '', '', '2017-07-10 22:33:38', '', 'heapq 모듈', 'https://docs.python.org/3/library/heapq.html\r\n\r\n자바의 Priority Queue 처럼 사용할 수 있음', NULL, '', 6, 0),
(2574, 'dale.seo', '', '', '2017-07-14 19:21:30', '', 'Heroku에 Vue 앱 배포', 'http://www.travisluong.com/how-to-deploy-a-vue-js-app-to-heroku/\r\n\r\n내가 선호하는 아래 2번 방법을 위 포스트에서 더 정확히 설명해놓았음\r\n중요한 것은 아래 설정을 통해서 heroku가 devDependencies까지 설치하게 해야 리모트에서 직접 빌드가 가능하다.\r\n\r\n```\r\n$ heroku config:set NPM_CONFIG_PRODUCTION=false\r\n```\r\n\r\n\r\n==================================================================================================\r\n1) 로컬에서 빌드에서 dist 디렉토리만 올리기\r\n- 장점: 빠르기 배포할 수 있음\r\n- 단점: dist 디렉토리까지 version control 해야함\r\n\r\nhttps://medium.com/@sagarjauhari/quick-n-clean-way-to-deploy-vue-webpack-apps-on-heroku-b522d3904bc8\r\n\r\n2) 리모트에서 빌드하기\r\n- 장점 : 로컬과 동일한 구조로 배포 가능\r\n- 단점 : 느림\r\n\r\nhttps://medium.com/@sagarjauhari/quick-n-dirty-way-to-deploying-vue-webpack-apps-on-heroku-4ab964ee536\r\n\r\n=====================================================================================\r\n1) Ideally, you would want to build your app locally and then only push and serve your minified files from Heroku. This way your app size is minimum and the deployments are super fast.\r\n2) One not-so-great but simple approach is to let Heroku do the build for you and serve the static pages out of the ‘dist’ folder. This way, you can just push to Heroku and if automatic deploys are enabled, Heroku will build your app for you and then serve files out of the created ‘dist’ folder.\r\n', NULL, '', 9, 0),
(2576, 'dale.seo', '', '', '2017-07-14 20:35:40', '', 'Heroku에 NodeJS  앱 배포할 때 팁들', 'https://devcenter.heroku.com/articles/nodejs-support\r\nhttps://devcenter.heroku.com/articles/node-best-practices\r\n\r\n\r\n## devDependencies도 설치하기\r\n```\r\n$ heroku config:set NPM_CONFIG_PRODUCTION=false\r\n```\r\n\r\n## 디폴트 Procfile\r\npackage.json의 start 스크립트', NULL, '', 5, 0),
(2577, 'dale.seo', '', '', '2017-07-16 22:40:54', '', 'Mongoose 단위 테스트', 'https://codeutopia.net/blog/2016/06/10/mongoose-models-and-unit-tests-the-definitive-guide/', NULL, '', 5, 0),
(2578, 'dale.seo', '', '', '2017-07-19 17:14:45', '', '[Vue Router] HTML5 히스토리 모드', 'https://router.vuejs.org/kr/essentials/history-mode.html\r\n\r\nVue Router를 사용할 때, 반드시 <a href="... 대신에 <router-link to="... 를 사용해야지, \r\n웹서버(Spring, Express)에 배포했을 때 정상적으로 작동한다.\r\n\r\n<a href="... 를 사용하면 npm run dev로 올렸을 때만 작동함\r\n\r\n배포 관련해서 또 다른 문제는 / 를 제외하고 다른 url에서 새로 고침을 하면 404가 발생하는 것이다.\r\n이는 서버에 간단하게 포괄적인 대체 경로를 추가해야하는데, express의 경우에는 다음 미들웨어만 추가해주면 된다.\r\n\r\nhttps://github.com/bripkens/connect-history-api-fallback', NULL, '', 2, 0),
(2579, 'dale.seo', '', '', '2017-07-19 17:53:09', '', 'unittest 모듈', '단위 테스트할 때 사용된다.\r\n\r\n```py\r\nimport unittest\r\n\r\nclass Test(unittest.TestCase):\r\n    def test1(self):\r\n        pass\r\n\r\nif __name__ == ''__main__'':\r\n    unittest.main()\r\n```\r\n\r\n```bash\r\n$ python3 add-two-numbers.py\r\n```', NULL, '', 5, 0),
(2580, 'dale.seo', '', '', '2017-08-02 10:37:03', '', 'Facebook Access Token 종류', 'http://www.devils-heaven.com/facebook-access-tokens/\r\nhttps://developers.facebook.com/docs/facebook-login/access-tokens/\r\n\r\nGraph API라고 불리는 Facebook의 API를 호출할 때, 쿼리 파라미터로 access_token 값을 보내줘야 응답이 온다.\r\n\r\n# App Token\r\n - 가장 간단하게 생성 가능: <APP_ID>|<APP_SECRET>\r\n - 기본적인 조회만 가능하며 생성 API 호출은 불가함\r\n\r\n# User Access Token\r\n - 가장 많이 사용되는 인증 토큰\r\n - 로그인 과정을 거쳐야지만 확보할 수 있음\r\n - 로그인 시 scope 속성을 설정된 권한에 따라서 호출할 수 있는 API의 범위가 틀려짐\r\n\r\n# Page Access Token\r\n - 특정 페이지를 관리할 때 필요한 인증 토큰\r\n - 우선 manage_pages 스콥에 대한 User Access Token을 확보하고, 다음 API를 호출하여 Page Access Token 획득\r\n - curl -i -X GET "https://graph.facebook.com/v2.10/<PAGE_ID>?fields=access_token&access_token=<USER_ACCESS_TOKEN>"', NULL, '', 4, 0),
(2581, 'dale.seo', '', '', '2017-08-02 10:57:21', '', 'NodeJS로 Facebook 연동 앱 개발', 'http://lorenstewart.me/2017/03/12/using-node-js-to-interact-with-facebooks-graph-api/', NULL, '', 3, 0),
(2582, 'dale.seo', '', '', '2017-08-24 09:11:09', '', 'RDP (Remote Desktop Protocol) vs XRDP', 'Remote Desktop Protocol (RDP) is a Microsoft protocol used to offer desktop access to a remote system over the network. XRDP is an implementation of that protocol for Linux, that allows any clients of the protocol to connect to it.', NULL, '', 2, 0),
(2583, 'dale.seo', '', '', '2017-08-24 12:52:31', '', 'Homebrew 명령어 정리', '# Find things you can install with Homebrew\r\nbrew search <formula name or substring>\r\n \r\n# Get formula status and configuration notes\r\nbrew info <formulaname>\r\n \r\n# Edit a formula\r\nbrew edit <formulaname>\r\n \r\n# Install a formula\r\nbrew install <formulaname>\r\n \r\n# Update the Homebrew database with latest versions\r\nbrew update\r\n \r\n# Upgrade everything on your system with the latest versions\r\nbrew upgrade\r\n \r\n# Installation self-check\r\nbrew doctor\r\n \r\n# List everything you have installed with Homebrew\r\nbrew list\r\n \r\n# Uninstall a formula\r\nbrew uninstall <formulaname>\r\n \r\n# Would you like to know more?\r\nman brew', NULL, '', 2, 0),
(2584, 'dale.seo', '', '', '2017-08-24 13:29:26', '', 'Homebrew로  Java 설치', 'http://www.lonecpluspluscoder.com/2017/04/27/installing-java-8-jdk-os-x-using-homebrew/\r\n\r\n설치 전에 어떤 버젼 깔리는지 확인\r\n```\r\n$ brew cask info java\r\n```\r\n\r\n설치\r\n```\r\n$ brew cask install java\r\n```\r\n\r\ncask가 안 깔려있다면 먼저 설치\r\n```\r\nbrew tap caskroom/cask\r\n```\r\n\r\n', NULL, '', 4, 0),
(2585, 'dale.seo', '', '', '2017-08-29 13:57:15', '', 'Using the ApplicationRunner or CommandLineRunner', 'https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-command-line-runner\r\n\r\nApplicationRunner or CommandLineRunner를 사용하면 Spring Boot 어플리케이션 시작할 때 일회성으로 실행하고 싶은 코드를 실행할 수 있다.\r\n\r\n보통 디버깅이나 테스트, 초기 데이터 적재 용도록 사용한다.', NULL, '', 5, 0),
(2586, 'dale.seo', '', '', '2017-09-05 09:09:27', '', 'Google Guice 관련 검색', '## 공식 레퍼런스\r\n- https://github.com/google/guice\r\n- https://www.youtube.com/watch?v=hBVJbzAagfs\r\n- http://www.kwangsiklee.com/ko/2016/12/%EB%B2%88%EC%97%AD-%EA%B5%AC%EA%B8%80-%EC%A3%BC%EC%8A%A4google-guice-%EC%86%8C%EA%B0%9C/\r\n\r\n## 샘플 코드\r\nhttp://netframework.tistory.com/entry/Google-Guice%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-DI-1\r\n\r\n##  기본적인 사용법\r\nhttp://eclipse.or.kr/wiki/Google_Guice\r\n\r\n## 다른 DI 프레임워크와 비교\r\nhttp://www.nextree.co.kr/p11247/', NULL, '', 4, 0),
(2587, 'dale.seo', '', '', '2017-09-17 07:51:09', '', '스프링 부트 메이븐 플러그인으로 jar 파일 만들어서 구동 시키기', '## 0. pom.xml에 패키징 설정이 jar로 되어 있는지 확인\r\n\r\n```\r\n<packaging>jar</packaging>\r\n```\r\n\r\n## 1. pom.xml에 스프링 부트 플러그인 추가\r\n\r\n```\r\n	<build>\r\n		<plugins>\r\n			<plugin>\r\n				<groupId>org.springframework.boot</groupId>\r\n				<artifactId>spring-boot-maven-plugin</artifactId>\r\n			</plugin>\r\n		</plugins>\r\n	</build>\r\n```\r\n\r\n## 2. 메이븐 커맨드로 jar로 패키징 시키기\r\n\r\n```\r\n$ mvn package\r\n```\r\n\r\n## 3. jar 파일로 구동시키기\r\n\r\n```\r\n$ java -jar target/demo-0.0.1-SNAPSHOT.jar\r\n```', NULL, '', 4, 0),
(2588, 'dale.seo', '', '', '2017-09-19 08:47:09', '', 'Mac에서 Hombrew로 깔끔하게 Java 설치하기', 'http://hanxue-it.blogspot.com/2014/05/installing-java-8-managing-multiple.html\r\n\r\n```\r\n$ brew update\r\n$ brew cask install java\r\n```', NULL, '', 5, 0),
(2589, 'dale.seo', '', '', '2017-09-19 09:00:14', '', 'java.security.InvalidKeyException: Illegal key size or default parameters 해결 방법', 'https://stackoverflow.com/questions/6481627/java-security-illegal-key-size-or-default-parameters', NULL, '', 2, 0),
(2590, 'dale.seo', '', '', '2017-09-30 09:59:24', '', 'curl 응답 결과를 예쁘게 보기', '## JSON\r\ncurl 뒤에  `| python -m json.tool` 붙이기\r\n\r\n```\r\ncurl localhost:8080/rest/books -H ''Accept: application/json'' -s | python -m json.tool\r\n```\r\n\r\n\r\n## XML\r\ncurl 뒤에  `| xmllint --format -` 붙이기\r\n\r\n```\r\n$ curl -s http://usl-query-na.integ.amazon.com:8171/accountingevent/by-ext-id?externalId=STARS.DebtRecovery.amzn1.stars.v1.SettlementProcessor.v1.8%3A5048721481%3A5037485051_DebtOffset | xmllint --format -\r\n```', NULL, '', 7, 0),
(2591, 'dale.seo', '', '', '2017-10-02 08:22:39', '', 'StreamingOutput 타입 간단한 예제', 'https://stackoverflow.com/questions/29637151/jersey-streamingoutput-as-response-entity\r\nhttp://memorynotfound.com/low-level-streaming-with-jax-rs-streamingoutput/\r\n\r\nStreamingOutput 인터페이스는 메소드가 하나 밖에 없는 Functional Interface이므로,\r\n다음과 같이 람다로 구현해서 바로 리턴하면 됨\r\n\r\n```\r\n@Component\r\n@Path("/streaming")\r\npublic class StreamingResource {\r\n\r\n    @GET\r\n    public StreamingOutput getStream() {\r\n        return out -> {\r\n            out.write("test".getBytes());\r\n            out.flush();\r\n        };\r\n    }\r\n\r\n}\r\n```\r\n\r\n## 테스트\r\n```\r\n$ curl localhost:8080/rest/streaming\r\ntest\r\n```', NULL, '', 11, 0),
(2593, 'dale.seo', '', '', '2017-10-05 05:25:45', '', '@Mock 어노테이션 활성화', '@Mock 어노테이션이 선언되어 있는 필드들에 Mock 객체를 주입하려면,\r\n1) 테스트 클래스에 @RunWith(MockitoJUnitRunner.class)를 선언해주거나,\r\n2) @Before 어노테이션이 선어되어 있는 메소드에 MockitoAnnotations.initMocks(this)를 넣어준다.\r\n\r\n스프링 러너와 함께 사용하려면 2번 방법을 이용해야 한다.\r\n\r\n```\r\n@RunWith(MockitoJUnitRunner.class)\r\npublic class ListTest {\r\n  @Mock private List mockedList;\r\n \r\n  @Test\r\n  public void test() {\r\n    // test here\r\n  }\r\n}\r\n```\r\n\r\n```\r\npublic class ListTest {\r\n  @Mock private List mockedList;\r\n\r\n  @Before\r\n  public void initMocks() {\r\n      MockitoAnnotations.initMocks(this); // mock all the field having @Mock annotation\r\n  }\r\n  \r\n  @Test\r\n  public void test() {\r\n    // test here\r\n  }\r\n}\r\n```', NULL, '', 4, 0),
(2594, 'dale.seo', '', '', '2017-10-14 00:41:24', '', 'DynamoDB 개발자 가이드', '## DynamoDB Streams\r\n - 추가/갱신/삭제 이벤트를 인지할 수 있도록 제공되는 스트림\r\nhttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.CoreComponents.html#HowItWorks.CoreComponents.Streams', NULL, '', 2, 0),
(2595, 'dale.seo', '', '', '2017-10-14 14:09:16', '', 'AWS CLI 빠른 설정', 'http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html#cli-quick-configuration\r\n\r\n```\r\n$ aws configure\r\n```', NULL, '', 2, 0),
(2592, 'dale.seo', '', '', '2017-10-02 08:35:42', '', 'StreamingOutput 타입으로 스트리밍으로 조금씩 응답하기', 'https://stackoverflow.com/questions/12012724/example-of-using-streamingoutput-as-response-entity-in-jersey\r\n\r\n```\r\n@Component\r\n@Path("/streaming")\r\npublic class StreamingResource {\r\n\r\n    @GET\r\n    @Produces(MediaType.APPLICATION_OCTET_STREAM)\r\n    public StreamingOutput getStream() {\r\n        return new FeedReturnStreamingOutput();\r\n    }\r\n\r\n    public static class FeedReturnStreamingOutput implements StreamingOutput {\r\n\r\n        @Override\r\n        public void write(OutputStream output) throws IOException, WebApplicationException {\r\n            try {\r\n                for (int i = 0; i < 10; i++) {\r\n                    output.write(String.format("Hello %d\\n", i).getBytes());\r\n                    output.flush();\r\n                    TimeUnit.MILLISECONDS.sleep(500);\r\n                }\r\n            } catch (InterruptedException e) {  throw new RuntimeException(e); }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n```\r\n@Configuration\r\n@ApplicationPath("rest")\r\npublic class JerseyConfiguration extends ResourceConfig {\r\n\r\n    @PostConstruct\r\n    public void setUp() {\r\n        register(StreamingResource.class);\r\n        property(ServerProperties.OUTBOUND_CONTENT_LENGTH_BUFFER, 0);\r\n    }\r\n\r\n}\r\n```\r\n\r\n## 테스트\r\nOUTBOUND_CONTENT_LENGTH_BUFFER를 0으로 설정하였기 때문에 Content-type은 서버 단에서 자동으로 세팅되지 않음\r\n```\r\n8c859026c732:Dale daeyoung$ curl localhost:8080/rest/streaming -v\r\n*   Trying ::1...\r\n* TCP_NODELAY set\r\n* Connected to localhost (::1) port 8080 (#0)\r\n> GET /rest/streaming HTTP/1.1\r\n> Host: localhost:8080\r\n> User-Agent: curl/7.54.0\r\n> Accept: */*\r\n> \r\n< HTTP/1.1 200 OK\r\n< Connection: keep-alive\r\n< Transfer-Encoding: chunked\r\n< Content-Type: text/plain\r\n< Date: Sun, 01 Oct 2017 23:16:52 GMT\r\n< \r\nHello 0\r\nHello 1\r\nHello 2\r\nHello 3\r\nHello 4\r\nHello 5\r\nHello 6\r\nHello 7\r\nHello 8\r\nHello 9\r\n* Connection #0 to host localhost left intact\r\n```', NULL, '', 4, 0),
(2596, 'dale.seo', '', '', '2017-10-15 06:41:47', '', '/src/main/resources 내부 파일 접근', 'https://www.mkyong.com/java/java-read-a-file-from-resources-folder/\r\n\r\n## InputStream으로 접근\r\n\r\nInputStream inputStream = getClass().getClassLoader().getResourceAsStream("moviedata.json");\r\n\r\n## File로 접근\r\n\r\nFile file = getClass().getClassLoader().getResource("moviedata.json").getFile();\r\n', NULL, '', 3, 0),
(2597, 'dale.seo', '', '', '2017-10-15 09:11:02', '', 'DynamoDB 공식 문서', '# Developer Guide\r\nhttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Introduction.html\r\n\r\n# REST API Reference\r\nhttp://docs.aws.amazon.com/amazondynamodb/latest/APIReference/Welcome.html\r\n\r\n# Java DOC\r\nhttp://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/', NULL, '', 4, 0),
(2598, 'dale.seo', '', '', '2017-10-16 07:06:55', '', 'AWS SDK for Java - Credentials & Region 설정', 'http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/CodeSamples.Java.html#CodeSamples.Java.RegionAndEndpoint\r\n\r\n## Credentials 설정\r\n어플리케이션 구동되는 머신의 ~/.aws/credentials 파일에 설정\r\n\r\n## Regin 설정\r\n기본적으로 코드 샘플은 미국 서부(오레곤) 리전의 DynamoDB에 액세스합니다. \r\n다른 리전을 사용할 때는 다음과 같이 withRegion 메서드로 명시해준다.\r\n\r\n```\r\nAmazonDynamoDB client = AmazonDynamoDBClientBuilder.standard()\r\n    .withRegion(Regions.US_WEST_2)\r\n    .build(); \r\n```', NULL, '', 3, 0),
(2599, 'dale.seo', '', '', '2017-10-17 14:24:23', '', '리눅스 cat, more, less, head, tail - 파일내용 확인', 'http://withcoding.com/111\r\nhttp://webdir.tistory.com/142\r\n\r\n\r\n간단하게 짧은 문서를 출력하려면 cat\r\n\r\n긴 출력 결과를 끊어서 보고 싶으면 more\r\n\r\n긴 문서를 조금 더 꼼꼼하게 확인하고 싶으면 less\r\n\r\n문서의 머리부분을 확인하고 싶으면 head\r\n\r\n꼬리부분을 보고 싶거나 로그를 실시간으로 확인하고 싶으면 tail\r\n\r\n편집하고 싶으면 vim', NULL, '', 2, 0),
(2600, 'dale.seo', '', '', '2017-10-17 15:47:24', '', 'Optimistic Locking VS Pessimistic Locking', 'http://blog.naver.com/PostView.nhn?blogId=smart_guy&logNo=100196538467\r\n\r\nDB에 여러 클라이언트가 붙어 레코드를 갱신하다 보면, 한 클라이언트에 의해서 갱신되었던 레코드가 다른 클라이언트에 의해서 아예 오버라이트 되어 버리는 Lost Update가 발생한다.\r\n이 Lost Update를 레코드 레벨 Locking으로 해결하는데 두가지 접근법이 있다.\r\n\r\n## Pessimistic/Exclusive Locking\r\n - 비관적인(보수적인) 잠금: 모든 레코드는 항상 동시 갱신의 가능성이 있으므로 한 클라이언트가 접근할 때 레코드에 락을 걸어 다른 클라이언트들을 모두 대기시킨다.\r\n - 락을 건 클라이언트가 죽을 경우, 해당 레코드에 어떤 클라이언트도 접근할 수 없는 문제가 발생할 수 있다.\r\n - 전통적인 RDB에서 많이 사용하는 방법\r\n - 동시성이 매우 떨어지지만 데이터 정합성은 확실히 보장된다.\r\n\r\n## Optimistic Locking\r\n - 낙관적인 잠금: 레코드가 동시에 갱신될 가능성은 매우 낮으므로 여러 클라이언트가 하나의 레코드에 접근하는 것을 허용한다.\r\n - 보통 레코드가 갱신될 때 마다 버전을 두어, 낮은 버전으로 조회했던 레코드를 갱신하려는 클라이언트가 있을 경우, 에러를 발생시키고 재 조회 후 갱신하도록 요청한다.\r\n - NoSQL DB에서 많이 사용하는 방법\r\n - 동시성이 매우 좋다', NULL, '', 7, 0),
(2601, 'dale.seo', '', '', '2017-10-19 14:01:58', '', 'AWS Credentials 설정 방법', 'http://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/setup-credentials.html\r\nhttp://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/credentials.html\r\n\r\nUse the default credential provider chain\r\n\r\n~/.aws/credentials ', NULL, '', 11, 0),
(2602, 'dale.seo', '', '', '2017-10-19 14:13:52', '', 'AWS Default Region 설정 방법', 'http://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/setup-credentials.html#setup-credentials-setting-region\r\n\r\n~/.aws/config 파일', NULL, '', 5, 0),
(2603, 'dale.seo', '', '', '2017-10-19 14:22:18', '', '[AWS CLI] aws configure', 'AWS Credentials, Region 등을 설정할 때 사용한다.\r\n\r\n~/.aws/credentials 파일과 ~/.aws/config 파일을 업데이트 해준다.\r\n\r\n설정 목록 조회\r\n```\r\n$ aws configure list\r\n```\r\n\r\n설정 항목 조회\r\n```\r\n$ aws configure get aws_access_key_id\r\n```\r\n\r\n디폴트 설정\r\n```\r\n$ aws configure\r\n```\r\n\r\n특정 프로파일 설정\r\n```\r\n$ aws configure --profile stock\r\n```', NULL, '', 4, 0);
INSERT INTO `post` (`postNo`, `id`, `name`, `pw`, `date`, `kind`, `title`, `memo`, `url`, `file`, `hit`, `secret`) VALUES
(2604, 'dale.seo', '', '', '2017-10-19 14:41:48', '', 'AWS Credentials 로드 하기', 'http://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/credentials.html#credentials-specify-provider\r\n\r\nAmazonS3ClientBuilder를 사용해서 AWS Credentials 로드할 수 있다.\r\nnew AmazonS3Client()는 deprecated 되었으니 사용하지 말 것!\r\n\r\n## 디폴트 Credentials 로드: 따로 지정해줄 게 없다\r\n```\r\nAmazonS3 s3Client = AmazonS3ClientBuilder.standard()\r\n                       // .withCredentials(new ProfileCredentialsProvider())\r\n                       .withRegion(Regions.US_WEST_2)\r\n                       .build()\r\n```\r\n\r\n## 특정 Profile의 Credentials를 로드하려면...\r\n\r\nProfileCredentialsProvider를 사용하거나\r\n```\r\nAmazonS3 s3Client = AmazonS3ClientBuilder.standard()\r\n                       .withCredentials(new ProfileCredentialsProvider("myProfile"))\r\n                       .withRegion(Regions.US_WEST_2)\r\n                       .build()\r\n```\r\n\r\nJava System Property를 세팅해주거나,\r\n```\r\nSystem.setProperty("aws.profile ", "myProfile")\r\n```\r\n\r\nOS Environment Variable을 세팅해준다.\r\n```\r\nexport AWS_PROFILE="myProfile"\r\n```\r\n\r\n## 직정 Credentials 지정하는 방법\r\n\r\n```\r\nBasicAWSCredentials awsCreds = new BasicAWSCredentials("access_key_id", "secret_key_id");\r\nAmazonS3 s3Client = AmazonS3ClientBuilder.standard()\r\n                        .withCredentials(new AWSStaticCredentialsProvider(awsCreds))\r\n                        .build();\r\n```', NULL, '', 5, 0),
(2605, 'dale.seo', '', '', '2017-10-21 06:22:17', '', 'Unix Epoch Time', 'https://ko.wikipedia.org/wiki/%EC%9C%A0%EB%8B%89%EC%8A%A4_%EC%8B%9C%EA%B0%84\r\n\r\nhttps://www.epochconverter.com/\r\n\r\n영어로 정의하면... seconds since 1970-01-01 00:00:00 UTC\r\n\r\nUTC 기준으로 1970년 1월 1일 00:00:00부터 몇초가 경과했는지 나타냄\r\n흔히 타임스탬프라고 얘기하며, Unix time, POSIX time, Epoch time 이라고도 불림\r\n\r\n```\r\nLinux Terminal: date +%s\r\nPython: import time; long(time.time())\r\nJava: System.currentTimeMillis() / 1000L\r\nJavaScript: Math.floor(Date.now() / 1000)\r\n```\r\n\r\n\r\n\r\n', NULL, '', 9, 0),
(2606, 'dale.seo', '', '', '2017-10-22 14:28:14', '', 'JavaDoc - {@inheritDoc}', 'https://docs.oracle.com/javase/6/docs/technotes/tools/solaris/javadoc.html#@inheritDoc\r\n\r\n오버라이드 하는 메소드의 문서를 그대로 가져다 쓰고 싶을 때는 아래와 같이 명시적으로 선언한다.\r\n\r\n```\r\n    /**\r\n     * {@inheritDoc}\r\n     */\r\n    @Override\r\n    public void initialize(String shardId) {\r\n        LOG.info("Initializing record processor for shard: " + shardId);\r\n        this.kinesisShardId = shardId;\r\n    }\r\n```', NULL, '', 2, 0),
(2607, 'dale.seo', '', '', '2017-10-23 16:00:28', '', 'Kenesis Stream을 맨 처음부터 읽어오기', 'http://docs.aws.amazon.com/streams/latest/dev/kinesis-record-processor-additional-considerations.html#kinesis-record-processor-producer-consumer-coordination\r\n\r\nConsumer를 최초로 동작시키는 경우, DynamoDB에 Checkpoint 정보가 없으므로, Consumer가 올라온 이후로 Stream에 들어온 레코드만 처리한다.\r\nConsumer 최초 구동 시, Producer가 Stream에 넣은 모든 레코드를 처음부터 읽어오고 싶다면 initialPositionInStream = TRIM_HORIZON로 세팅한다.\r\n\r\n```\r\n        KinesisClientLibConfiguration kclConfig = new KinesisClientLibConfiguration(\r\n                APPLICATION_NAME,\r\n                STREAM_NAME,\r\n                new ProfileCredentialsProvider(),\r\n                WORKER_NAME\r\n        )\r\n                .withRegionName(REGION_NAME)\r\n                .withInitialPositionInStream(InitialPositionInStream.TRIM_HORIZON); // Read from the beginning\r\n```', NULL, '', 2, 0),
(2608, 'dale.seo', '', '', '2017-10-25 15:29:08', '', '@DynamoDBAutoGeneratedTimestamp 사용 시 주의사항', 'https://stackoverflow.com/questions/42098797/auto-populate-timestamp-in-dynamodb\r\n\r\n@DynamoDBAutoGeneratedTimestamp 어노테이션은 DynamoDB에 삽입/갱신 시 자동으로 현재 시간을 세팅해주고 싶은 필드에 달아준다.\r\n\r\n## 주의 사항\r\nALWAYS가 디폴트 전략이기 때문에 갱신이 불가능한 파티션 키나 소트 키에 달아줄 때는 전략을 CREATE로 변경해준다.\r\n\r\n```\r\n@DynamoDBTable(tableName = Config.TABLE_NAME)\r\n@Data\r\npublic class Item {\r\n    @DynamoDBHashKey\r\n    @DynamoDBAutoGeneratedKey\r\n    private String id;\r\n\r\n    @DynamoDBRangeKey\r\n    @DynamoDBAutoGeneratedTimestamp(strategy=DynamoDBAutoGenerateStrategy.CREATE)\r\n    private Date created;\r\n\r\n    private Date expired;\r\n}\r\n```', NULL, '', 2, 0),
(2609, 'dale.seo', '', '', '2017-10-27 06:38:03', '', 'Guice 기반 어플리케이션 시각화 도구', 'Using grapher to visualize Guice applications\r\n\r\nhttps://github.com/google/guice/wiki/Grapher', NULL, '', 3, 0),
(2610, 'dale.seo', '', '', '2017-11-09 15:31:12', '', 'DynamoDBMapper의 save메소드의 SaveBehavior 옵션', 'https://aws.amazon.com/blogs/developer/using-the-savebehavior-configuration-for-the-dynamodbmapper/\r\n\r\n아이템을 생성할 때는 SaveBehavior 옵션으로 4가지 중 어떤 것을 넘기듯 의미가 없으므로 주의한다.', NULL, '', 2, 0),
(2611, 'dale.seo', '', '', '2017-11-16 15:59:38', '', 'InetAddress의 static methods', 'InetAddress는 도메인네임과 IP주소 정보를 함께 저장하고 있는 객체인 것 같다.\r\n\r\n## InetAddress.getByName(String hostName);\r\n호스트네임 스트링에 대한 InetAddress 반환\r\n\r\n## InetAddress.getLocalHost();\r\n로컬 호스트의 실제 IP 주소에 대한 InetAddress 반환\r\n\r\n## InetAddress.getLoopbackAddress():\r\n127.0.0.1을 반환', NULL, '', 3, 0),
(2612, 'dale.seo', '', '', '2017-11-16 16:15:34', '', 'ZonedDateTime 사용법', 'Java8에서는 DateTime 대신에 ZonedDateTime을 많이 사용하는 것 같다.\r\n\r\n## 현재 시간\r\nZonedDateTime.now();\r\n\r\n## 타임스탬프를 ZonedDateTime으로 변환\r\nZonedDateTime instant = ZonedDateTime.ofInstant(Instant.ofEpochMilli(1505955173), ZoneId.systemDefault());', NULL, '', 8, 0),
(2613, 'dale.seo', '', '', '2017-11-17 02:48:49', '', 'Mockito Spy 사용법과  Mock과 차이', 'http://www.baeldung.com/mockito-spy\r\n\r\n## Spy 개념\r\n타입의 인스턴스를 만들어서 mock처럼 사용\r\n\r\n## Spy 사용법\r\n@Spy 어노테이션을 사용하거나, Mockito.spy() 메소드로 실제 인스턴스를 감싸주면 됨\r\n\r\n## Mock과 차이\r\nMock은 stub해준 행동에만 반응하지만, Spy는 실제 인스턴스의 행동이 기본적으로 반응되고, 거기에 다른 행동을 stub까지 할 수 있음', NULL, '', 3, 0),
(2614, 'dale.seo', '', '', '2017-11-18 04:47:40', '', 'null 값을 주입하는 방법', 'https://github.com/google/guice/wiki/UseNullable\r\n\r\nGuice에서는 기본적으로 null 값 주입을 허락하지 않기 때문에 명시적으로 null 값 주입을 나타내줘야 한다.\r\n\r\n\r\n## 주입 받는 클래스\r\n\r\n@Inject가 선언된 생성자는 세터의 파라미터에 @javax.annotation.Nullable를 선언해준다.\r\n해당 어노테이션이 확보가 안 되는 경우, findbugs jsr 디펜더시를 추가해준다. (compile ''com.google.code.findbugs:jsr305:3.0.2'')\r\n\r\n````\r\n    @Inject\r\n    public MyClient(@Nullable MyType type) {\r\n        this.type = type;\r\n    }\r\n```\r\n\r\n## 바인딩 모듈\r\n\r\n다음과 같이 명시적으로 null을 바인딩 한다. 반드시 Providers.of(null)를 사용해야 한거나, null을 리턴하는 Provider를 구현해서 넘겨야 한다.\r\n\r\n```\r\n        bind(MyType.class).toProvider(Providers.of(null));\r\n        bind(MyClient.class);\r\n```\r\n\r\n또는\r\n\r\n```\r\n        bind(MyType.class).toProvider(() -> null);\r\n        bind(MyClient.class);\r\n```', NULL, '', 7, 0),
(2615, 'dale.seo', '', '', '2017-11-23 15:02:54', '', 'DynamoDB Throttling & Retry', '예전에 Lionel이 DynamoDB의 디폴트 Retry 설정에 대해서 정리했는데 참 잘 했음\r\n================================================\r\nThe DDB client that we inject does not define any policy, therefore it will use the default retry policy from the AWS SDK. This means that we would have the following behavior:\r\n\r\n    Retry condition: The default retry condition which covers internal server errors (500) but also IO errors, throttling errors as well as network failure errors.\r\n    Backoff algorithm: The default backoff policy which is based on a jitter algorithm rather than an exponential growth.\r\n    Max retries: Defaults to 3 but can be overridden by the client\r\n================================================\r\n\r\n\r\n## Introducing Retry Throttling\r\nhttps://aws.amazon.com/blogs/developer/introducing-retry-throttling/\r\n\r\n## Naive Retries Considered Harmful\r\nhttp://www.evanjones.ca/retries-considered-harmful.html\r\n\r\n## 디폴트\r\nhttps://github.com/aws/aws-sdk-java/blob/master/aws-java-sdk-core/src/main/java/com/amazonaws/retry/PredefinedRetryPolicies.java\r\nhttps://github.com/aws/aws-sdk-java/blob/master/aws-java-sdk-core/src/main/java/com/amazonaws/retry/PredefinedBackoffStrategies.java\r\n\r\nQuestions to research\r\n\r\n    Can we enable retry on client or server side?\r\n    What are the specifics of the pre-defined retry policies?\r\n    What sort of events can trigger a retry? How granular is it?\r\n\r\nUseful resources\r\n\r\n    DDB error handling\r\n    AWS SDK predefined retry policies\r\n    USL retry client configuration\r\n\r\nFindings\r\nClient retry policy\r\n\r\nRetry policy is composed of 3 main components:\r\n\r\n    Max error retry: number of retry attemps\r\n    Retry condition: custom code that determines if an error qualifies for retry\r\n    Backoff strategy: determines the delay between retries\r\n\r\nThere is also a 4th minor component which is a flag that indicates if client can override the max error try value.\r\n\r\nSee also the RetryPolicy constructor.\r\nClient retry throttling\r\n\r\nThere is a possibility to throttle retries on the client side to avoid overwhelming the service if retry attempts are mostly failing.\r\nWhen enabled, an internal "retry capacity" will slowly deplete with every failed retry and slowly increase with every successful retry.\r\n\r\nThis feature can be enabled on the client code:\r\n\r\nclientConfiguration.setUseThrottleRetries(true);\r\n\r\nOr with a JVM parameter:\r\n\r\n-Dcom.amazonaws.sdk.enableThrottledRetry\r\n\r\nSee also the ClientConfiguration.setUseThrottleRetries method.\r\nArticles\r\n\r\n    Naive Retries Considered Harmful\r\n    Introducing Retry Throttling', NULL, '', 10, 0),
(2616, 'dale.seo', '', '', '2017-12-05 04:49:07', '', 'Java Enum Look Up by String', 'static map filed를 사용하면 매번 루프를 돌지 않고 효율적으로 구현 가능\r\n\r\n==========================================================================\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic enum  IntervalArtifactStatus\r\n{\r\n    READY("ready"),\r\n    SCHEDULED("scheduled"),\r\n    PENDING("pending"),\r\n    INITIAL("initial"),\r\n    UNKNOWN("unknown");\r\n\r\n    private final String status;\r\n\r\n    private static final Map<String, IntervalArtifactStatus> LOOK_UP = new HashMap<>();\r\n\r\n    static\r\n    {\r\n        for (IntervalArtifactStatus ias : IntervalArtifactStatus.values())\r\n        {\r\n            LOOK_UP.put(ias.getStatus(), ias);\r\n        }\r\n    }\r\n\r\n    IntervalArtifactStatus(\r\n        final String status)\r\n    {\r\n        this.status = status;\r\n    }\r\n\r\n    public String getStatus()\r\n    {\r\n        return status;\r\n    }\r\n\r\n    public static IntervalArtifactStatus getEnum(\r\n        final String status)\r\n    {\r\n        return LOOK_UP.getOrDefault(status, UNKNOWN);\r\n    }\r\n}\r\n\r\n', NULL, '', 2, 0),
(2617, 'dale.seo', '', '', '2017-12-06 13:06:51', '', 'Stream으로 간단하게 Set 만들기', 'Set<String> hosts = Stream.of("host1", "host2", "host3").collect(Collectors.toSet())', NULL, '', 2, 0),
(2618, 'dale.seo', '', '', '2017-12-16 15:26:31', '', 'Checkstyle', '## official website\r\nhttp://checkstyle.sourceforge.net\r\n## gradle plugin\r\nhttps://docs.gradle.org/current/userguide/checkstyle_plugin.html\r\n\r\n### config src\r\nconfig/checkstyle/checkstyle.xml\r\n\r\n### how to run\r\n$ ./gradlew check\r\n\r\n## CLI\r\n$ brew checkstyle\r\n$ checkstyle -c checkstyle.xml Helloworld.java', NULL, '', 7, 0),
(2620, 'dale.seo', '', '', '2017-12-17 04:48:18', '', 'Checkstyle 설정 항목', '## http://checkstyle.sourceforge.net/config_misc.html#Translation\r\n다국어 메세지 파일들이 서로 consistent 한지 검사\r\n\r\n## http://checkstyle.sourceforge.net/config_filters.html#SuppressionFilter\r\n검사 예외 설정 파일 위치 지정\r\n\r\n## http://checkstyle.sourceforge.net/config_filters.html#SuppressionCommentFilter\r\n코드 내에서 시작/끝 코멘트를 통해 검사 예외 설정\r\n\r\n## http://checkstyle.sourceforge.net/config_misc.html#NewlineAtEndOfFile\r\n파일 마지막에 줄바꿈으로 끝나는지 검사\r\n\r\n## http://checkstyle.sourceforge.net/config_sizes.html#FileLength\r\n파일이 2000줄이 넘는지 검사\r\n\r\n## http://checkstyle.sourceforge.net/config_whitespace.html#FileTabCharacter\r\n탭 문자를 사용하고 있는지 검사\r\n\r\n## http://checkstyle.sourceforge.net/config_naming.html#ConstantName\r\nstatic final 필드 이름이 대문자인지 검사\r\n\r\n## http://checkstyle.sourceforge.net/config_naming.html#LocalFinalVariableName\r\n로컬 final 필드는 꼭 대문자일 필요 없음\r\n', NULL, '', 2, 0),
(2619, 'dale.seo', '', '', '2017-12-17 02:03:05', '', '설정파일 checkstyle.xml', '아래가 아무 설정도 없는 설정 파일임\r\n\r\n\r\n## configuration examples\r\nhttps://github.com/checkstyle/contribution/tree/master/examples/conf\r\n\r\n## Google\r\nhttps://github.com/checkstyle/checkstyle/blob/master/src/main/resources/google_checks.xml\r\n\r\n## SUN\r\nhttps://github.com/checkstyle/checkstyle/blob/master/src/main/resources/sun_checks.xml\r\n\r\n## Checkstyle\r\nhttps://github.com/checkstyle/checkstyle/blob/master/config/checkstyle_checks.xml', NULL, '', 5, 0),
(2621, 'dale.seo', '', '', '2017-12-17 05:12:50', '', 'Checkstyle LeftCurly 모듈', 'http://checkstyle.sourceforge.net/config_blocks.html#LeftCurly\r\n\r\nLeftCurly 모듈을 통해 { 이 라인 끝에 올지 새로운 라인에 올지 설정할 수 있다.\r\n\r\n## End Of Line\r\n```\r\n        <module name="LeftCurly">\r\n```\r\n## New Line\r\n ```\r\n        <module name="LeftCurly">\r\n            <property name="option" value="nl"/>\r\n        </module>\r\n ```', NULL, '', 4, 0),
(2622, 'dale.seo', '', '', '2017-12-17 05:34:10', '', 'Checkstyle NeedBraces 모듈', 'http://checkstyle.sourceforge.net/config_blocks.html#NeedBraces\r\n\r\nif, while, do-while, for 문 뒤에 {}이 꼭 필요한지 체크하도록 설정\r\n\r\n한줄로 쓰는 경우 {} 생략할 수 있도록 설정\r\n```\r\n<module name="NeedBraces">\r\n    <property name="allowSingleLineStatement" value="true"/>\r\n</module>\r\n```', NULL, '', 2, 0),
(2623, 'dale.seo', '', '', '2017-12-17 05:48:51', '', 'Checkstyle HiddenField 모듈', 'http://checkstyle.sourceforge.net/config_coding.html#HiddenField\r\n\r\n클래스 필드 이름과 동일한 로컬 변수 이름을 쓰고 있는지 체크한다.\r\n\r\n생성자나 세터, 그리고 빌더 패턴을 쓸 때까지 제한하면 너무 빡세서, 보통 다음과 같이 세팅한다.\r\n\r\n```\r\n    <module name="HiddenField">\r\n        <property name="ignoreConstructorParameter" value="true"/>\r\n        <property name="ignoreSetter" value="true"/>\r\n        <property name="setterCanReturnItsClass" value="true"/>\r\n    </module>\r\n```', NULL, '', 3, 0),
(2624, 'dale.seo', '', '', '2017-12-17 05:56:01', '', 'Checkstyle FinalLocalVariable와 FinalParameters 모듈', '## http://checkstyle.sourceforge.net/config_coding.html#FinalLocalVariable\r\n\r\n불변하는 로컬 변수나 메소드 파라미터를 final로 선언하도록 강제한다.\r\n기본 값은 로컬 변수에만 해당한다.\r\n메소드 파라미터는 FinalParameters 모듈에서 컨트롤 할 수 있다.\r\n\r\n## http://checkstyle.sourceforge.net/config_misc.html#FinalParameters\r\n\r\n생성자, 메소드 파라미터를 무조건 final로 선언하도록 강제한다.\r\n커뮤니티의 의견들을 보면 final로 선언하는 게 올바르지만, 코드 가독성을 저해하기 때문에 좋아하지 않는 사람들이 많다.\r\n\r\nhttps://stackoverflow.com/questions/154314/when-should-one-use-final-for-method-parameters-and-local-variables\r\nhttp://www.gmarwaha.com/blog/2010/01/02/final-modifier-for-method-arguments-what-do-you-think/', NULL, '', 5, 0),
(2625, 'dale.seo', '', '', '2017-12-26 07:43:29', '', 'Git Ignore Best Practice', '## .gitignore\r\nbin, build와 같이 빌더가 남기는 파일이나 폴더\r\n\r\n## ~/.config/git/ignore\r\nIDE 관련 (ex. *.iml)\r\n\r\n## .git/info/exclude\r\n나만 혼자 예외 시키고 싶은 파일들\r\n\r\n\r\n====================================================================================================================================\r\nYou can place a file in any directory named ".gitignore" which will tell git not to track files based on a number of patterns. This may seem like a really great place to ignore your IDE''s metadata files (*.iml or *.idea if you use IntelliJ, *.swp if you use VIM, .metadata if you use Eclipse). DO NOT DO THIS. I don''t care what IDE you use. I may or may not use it. Since our code base is shared, you should not check in files specific to your workflow, even if it is a .gitignore telling git to ignore your workflow-specific files. There is a better place to do this. You have a global git ignore file, which is by default in ~/.config/git/ignore. You can also have per-repository ignore files that are not tracked. They are located in /path/to/git/repo/.git/info/exclude. Both of these are more preferable to adding a .gitignore file. Don''t try to be smart and check in a .gitignore file that names itself, that really just makes things worse. Legitimate use cases for a .gitignore would include ignoring intermediate build artifacts that brazil-build might produce in your working directory but should not be checked in. ', NULL, '', 2, 0),
(2626, 'dale.seo', '', '', '2018-01-03 11:14:36', '', '커밋 합치기 (git rebase -i squash)', 'https://git-scm.com/book/ko/v2/Git-%EB%8F%84%EA%B5%AC-%ED%9E%88%EC%8A%A4%ED%86%A0%EB%A6%AC-%EB%8B%A8%EC%9E%A5%ED%95%98%EA%B8%B0\r\n\r\n## 최근 3개의 커밋 합치기\r\n\r\n$ git rebase -i HEAD~3\r\n\r\n### 에디터가 열리면 다음과 같이 수정\r\npick 1st commit\r\ns 2nd commit\r\ns 3rd commit\r\n\r\n### 저장하면 1st commit만 남음\r\n\r\n', NULL, '', 4, 0),
(2627, 'dale.seo', '', '', '2018-01-03 12:45:16', '', '스트림에서 예외 처리', 'https://www.oreilly.com/ideas/handling-checked-exceptions-in-java-streams\r\n\r\n예외를 던지는 FunctionalInterface를 예외를 못던지는 Java8의 Funciton으로 바꿔주면 됨\r\n\r\n```java\r\n    public String encodedAddressUsingWrapper(String... address) {\r\n        return Arrays.stream(address)\r\n            .map(wrapper(s -> URLEncoder.encode(s, "UTF-8")))\r\n            .collect(Collectors.joining(","));\r\n    }\r\n\r\n    private <T, R, E extends Exception> Function<T, R> wrapper(FunctionWithException<T, R, E> fe) {\r\n        return arg -> {\r\n            try {\r\n                return fe.apply(arg);\r\n            } catch (Exception e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n        };\r\n    }\r\n\r\n    @FunctionalInterface\r\n    public interface FunctionWithException<T, R, E extends Exception> {\r\n        R apply(T t) throws E;\r\n    }\r\n```', NULL, '', 4, 0),
(2628, 'dale.seo', '', '', '2018-01-05 15:30:01', '', 'Elastic Beanstalk으로 Spring Boot 앱 배포하기', 'https://aws.amazon.com/blogs/devops/deploying-a-spring-boot-application-on-aws-using-aws-elastic-beanstalk/\r\nhttps://pragmaticintegrator.wordpress.com/2016/07/12/run-your-spring-boot-application-on-aws-using-elastic-beanstalk/', NULL, '', 8, 0),
(2629, 'dale.seo', '', '', '2018-01-07 13:40:38', '', 'SSH Key - 비밀번호 없이 로그인', 'https://opentutorials.org/module/432/3742\r\n\r\nssh-keygen 명령어를 아무 옵션없이 실행하면 ~/.ssh 디렉토리 아래에 두 개의 파일을 만들어준다.\r\n1) id_rsa: 비밀키\r\n2) id_rsa.pub: 공개키\r\n\r\n이중에서 2번 공개키를 ssh 서버의 ~/.ssh/authorized_keys 파일에 추가해주면,\r\n비밀키를 이용해서 ssh 접속이 가능해진다.\r\n\r\n비밀키를 ~/.ssh/id_rsa가 아닌 다른 경로에 두었다면,\r\nssh -i 옵션을 이용해서 비밀키를 지정해주면 된다.', NULL, '', 2, 0),
(2630, 'dale.seo', '', '', '2018-01-07 14:02:55', '', '모든 AWS Region에서 하나의 SSH Key 사용하기', 'https://aws.amazon.com/blogs/aws/new-amazon-ec2-feature-bring-your-own-keypair/\r\nhttps://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html#how-to-generate-your-own-key-and-import-it-to-aws\r\nhttps://alestic.com/2010/10/ec2-ssh-keys/\r\nhttps://www.pyrosoft.co.uk/blog/2010/10/27/import-your-own-rsa-ssh-key-into-amazon-ec2/\r\n\r\nAWS Management Console에서 생성하면 각 Region마다 Key Pair를 관리해야되서 매우 귀찮음.\r\n본인 컴퓨터에서 ssh-keygen으로 SSH Key Pair 생성 후 Pulbic Key만 import 해주면 됨', NULL, '', 5, 0),
(2631, 'dale.seo', '', '', '2018-01-07 15:12:34', '', 'Elastic Beanstalk CLI 설치', 'https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb-cli3-install-osx.html\r\n\r\n$ brew install awsebcli', NULL, '', 6, 0),
(2632, 'dale.seo', '', '', '2018-01-08 04:30:36', '', 'EB CLI - 프로젝트 폴더가 아니라 jar나 war 파일만 배포하기', 'https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb-cli3-configuration.html\r\n\r\n# Deploying an Artifact Instead of the Project Folder\r\n\r\nYou can tell the EB CLI to deploy a ZIP or WAR file that you generate as part of a separate build process by adding the following lines to .elasticbeanstalk/config.yml in your project folder.\r\n\r\ndeploy:\r\n  artifact: path/to/buildartifact.zip', NULL, '', 5, 0),
(2633, 'dale.seo', '', '', '2018-01-08 04:34:16', '', 'EB CLI 주요 커맨드', 'https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb-cli3-getting-started.html\r\n\r\n$ eb init\r\nEB Application을 생성하고 특정 디렉토리를 eb랑 연결\r\n\r\n$ eb use <env-name>\r\n기존 EB Environment 사용\r\n\r\n$ eb create\r\nEB Enivronment 생성\r\n\r\n$ eb deploy\r\nEB Applicatoin Version으로 배포\r\n\r\n$ eb logs\r\n어플레케이션 로그 확인\r\n\r\n$ eb open\r\n브라우져에서 웹어플리케이션 열기\r\n\r\n$ eb config\r\n설정 확인\r\n\r\n$ eb terminate\r\n지금 사용하고 있는 environment 제거', NULL, '', 9, 0),
(2634, 'dale.seo', '', '', '2018-01-12 15:33:41', '', 'Sprking Boot에서 파일 기반 H2 사용 하기', 'https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-sql.html\r\n\r\n## application.yaml\r\n\r\n```\r\nspring:\r\n  datasource:\r\n    driver-class-name: org.h2.Driver\r\n    url: jdbc:h2:./dev\r\n``` \r\n\r\n## 서버 구동하면 프로젝트에 dev.mv.db 파일이 생김\r\n\r\n## h2 console 접속\r\n\r\nhttp://localhost:8080/h2-console\r\n\r\nusername: sa\r\npassword: (blank)\r\n', NULL, '', 5, 0),
(2635, 'dale.seo', '', '', '2018-01-16 15:30:48', '', '터미널에서 atom . 안 먹을 때', 'https://discuss.atom.io/t/atom-command-not-found/36243/4\r\n\r\n```\r\nrm /usr/local/bin/atom\r\nln -s /Applications/Atom.app/Contents/Resources/app/atom.sh /usr/local/bin/atom\r\n```', NULL, '', 2, 0),
(2636, 'dale.seo', '', '', '2018-01-17 12:38:24', '', 'cut: cut out selected portions of each line of a file', '## Options\r\n-d: delimiter\r\n\r\n\r\n## Examples\r\n$ cat test.cfg\r\nusers:dale,kate\r\npasswords:111,222\r\n$ cat test.cfg |fgrep "users:" |cut -d ":" -f 1\r\nusers\r\n$ cat test.cfg |fgrep "users:" |cut -d ":" -f 2\r\ndale,kate\r\n$ cat test.cfg |fgrep "passwords:" |cut -d ":" -f 2\r\n111,222\r\n\r\n### Extract users'' login names and shells from the system passwd(5) file as ``name:shell''''pairs:\r\n           cut -d : -f 1,7 /etc/passwd', NULL, '', 2, 0),
(2637, 'dale.seo', '', '', '2018-01-17 12:51:44', '', 'Shell 프로그래밍: if-else', 'http://codewiki.wikidot.com/shell-script:if-else\r\n\r\n\r\n## ./test.sh cool 이라고 입력하면 Cool Beans룰 출력함\r\n```\r\n#!/bin/bash\r\n\r\nif [ "$1" = "cool" ]\r\nthen\r\n    echo "Cool Beans"\r\nelif [ "$1" = "neat" ]\r\nthen\r\n    echo "Neato cool"\r\nelse\r\n    echo "Not Cool Beans"\r\nfi\r\n```\r\n\r\n## ./test.sh test.sh 이라고 입력하면 test.sh is a file이라고 출력함\r\n```\r\n#!/bin/bash\r\n\r\nif [ -f "$1" ]\r\nthen\r\n    echo "$1 is a file"\r\nelse\r\n    echo "$1 is not a file"\r\nfi\r\n```', NULL, '', 2, 0),
(2638, 'dale.seo', '', '', '2018-01-17 12:54:28', '', 'Shell Scripting(쉘 프로그래밍) 끝판왕 ', 'http://codewiki.wikidot.com/shell-script', NULL, '', 2, 0),
(2639, 'dale.seo', '', '', '2018-01-17 13:39:26', '', 'Shell Script: For loop', 'http://codewiki.wikidot.com/shell-script:for-loop\r\n\r\n```\r\n#!/bin/bash\r\nfor i in $(seq 1 10)\r\ndo\r\n    echo $i\r\ndone\r\n```\r\n\r\n```\r\n#!/bin/bash\r\nfor ((i=1;i<=10;i++))\r\ndo\r\n    echo $i\r\ndone\r\n```', NULL, '', 5, 0),
(2640, 'dale.seo', '', '', '2018-01-18 11:59:22', '', 'vi 에디터에 문법 강조(Syntax Highlight) 설정', 'https://www.cyberciti.biz/faq/turn-on-or-off-color-syntax-highlighting-in-vi-or-vim/\r\n\r\n$ echo "syntax on" >> ~/.vimrc', NULL, '', 2, 0),
(2641, 'dale.seo', '', '', '2018-01-24 15:15:37', '', 'virtualenv 개념/설치', 'virtualenv 패키지는 OS와 독립된 실행환경을 제공해준다.\r\n따라서 OS를 오염시키지 않으면서 특정 어플리케이션에서 요구하는 패키지를 설치할 수 있다.\r\n또한 설치할 때 관리자 권한도 필요하지 않다.\r\nvirtualenv를 바로 사용하는 것 보다는 virtualenvwrapper 이용하는 것이 좀 더 깔끔하게 사용할 수 있다.\r\n\r\n## mac에 설치\r\n```\r\n$ pip install virtualenvwrapper\r\n```\r\n\r\n## ~/.bash_profile에 추가\r\n```\r\nexport WORKON_HOME=$HOME/.virtualenvs\r\nexport PROJECT_HOME=$HOME/Devel\r\nexport VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python3\r\nexport VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/bin/virtualenv\r\nsource /usr/local/bin/virtualenvwrapper.sh\r\n```\r\n\r\n## 세팅 완료 확인\r\n홈 디렉토리에 ./virtualenv가 생성되야 함\r\n\r\n## 가상 환경 만들기\r\n$ mkvirtualenv myvenv\r\n\r\n## 가상 환경 조회\r\n$ workon\r\n\r\n## 가상 환경 진입\r\n$ workon myvenv\r\n\r\n## 가상 환경 탈출\r\n$ deactivate\r\n\r\n\r\n## 참고\r\nhttps://help.pythonanywhere.com/pages/Virtualenvs\r\nhttps://virtualenvwrapper.readthedocs.io/en/latest/install.html\r\nhttps://tutorial.djangogirls.org/ko/installation/#%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0', NULL, '', 3, 0),
(2642, 'dale.seo', '', '', '2018-01-25 14:39:41', '', 'python manage.py 명령어', '$ python manage.py help\r\n도움말\r\n\r\n$ django-admin startproject <site-name>\r\n신규 사이트 생성\r\n\r\n$ python manage.py createsuperuser\r\n관리자 생성\r\n\r\n$ python manage.py startapp <app-name>\r\n신규 앱 추가\r\n\r\n$ python manage.py shell\r\n장고 쉘 접속\r\n\r\n\r\n## 마이그레이션\r\nhttps://docs.djangoproject.com/en/2.0/topics/migrations/#migration-squashing\r\n\r\n$ python manage.py makemigrations\r\n모델 변경사항을 마이그레이션에 반영\r\n\r\n$ python manage.py migrate\r\n마이그레이션을 데이터베이스에 반영\r\n\r\n$ python manage.py showmigrations\r\n마이그레이션 내역 확인\r\n\r\n$ python manage.py squashmigrations <app_label> <migration_no>\r\n마이그레이션 합치기\r\n', NULL, '', 9, 0),
(2643, 'dale.seo', '', '', '2018-01-25 14:40:55', '', '데이터베이스 접속 정보를 환경변수로 세팅하기', 'https://godjango.com/blog/working-with-environment-variables-in-python/\r\nhttps://help.pythonanywhere.com/pages/environment-variables-for-web-apps/', NULL, '', 6, 0),
(2644, 'dale.seo', '', '', '2018-01-25 15:34:10', '', 'pythonanywhere에 Django 앱 배포하기', 'https://help.pythonanywhere.com/pages/FollowingTheDjangoTutorial\r\nhttps://tutorial.djangogirls.org/ko/deploy/', NULL, '', 3, 0);
